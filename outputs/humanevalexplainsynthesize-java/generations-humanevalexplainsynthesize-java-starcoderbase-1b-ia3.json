[["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        double min = numbers.get(0);\n        double max = numbers.get(0);\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) < min) {\n                min = numbers.get(i);\n            }\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n        }\n        if (Math.abs(max - min) <= threshold) {\n            return true;\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        boolean flag = false;\n        for (Double num : numbers) {\n            if (Math.abs(num - numbers.get(numbers.size() - 1)) <= threshold) {\n                flag = true;\n                break;\n            }\n        }\n        return flag;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        double min = numbers.get(0);\n        double max = numbers.get(0);\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) < min) {\n                min = numbers.get(i);\n            }\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n        }\n        double diff = max - min;\n        double diff2 = threshold * diff;\n        for (int i = 0; i < numbers.size(); i++) {\n            if (Math.abs(numbers.get(i) - min) < diff2) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        int count = 0;\n        for (Double number : numbers) {\n            if (Math.abs(number) <= threshold) {\n                count++;\n            }\n        }\n        return count >= numbers.size() / 2;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        double diff = numbers.get(0) - numbers.get(1);\n        for (int i = 2; i < numbers.size(); i++) {\n            diff = Math.abs(numbers.get(i) - numbers.get(i - 1));\n            if (diff > threshold) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        double min = numbers.get(0);\n        double max = numbers.get(0);\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) < min) {\n                min = numbers.get(i);\n            }\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n        }\n        return Math.abs(max - min) < threshold;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        double min = numbers.get(0);\n        double max = numbers.get(0);\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) < min) {\n                min = numbers.get(i);\n            }\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n        }\n        double diff = max - min;\n        if (diff < threshold) {\n            return true;\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers == null || numbers.size() == 0) {\n            return false;\n        }\n        Collections.sort(numbers);\n        double min = numbers.get(0);\n        double max = numbers.get(numbers.size() - 1);\n        return Math.abs(max - min) > threshold;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        double min = numbers.get(0);\n        double max = numbers.get(0);\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) < min) {\n                min = numbers.get(i);\n            }\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n        }\n        return Math.abs(max - min) > threshold;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        double distanc = 0;\n        for (int i = 0; i < numbers.size(); i++) {\n            distanc += Math.abs(numbers.get(i) - numbers.get(i + 1));\n        }\n        return distanc <= threshold;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2)\n            return false;\n        double min = numbers.get(0);\n        double max = numbers.get(0);\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) < min)\n                min = numbers.get(i);\n            if (numbers.get(i) > max)\n                max = numbers.get(i);\n        }\n        double diff = max - min;\n        if (diff < threshold)\n            return true;\n        else\n            return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        double distanc = 0;\n        for (int i = 0; i < numbers.size(); i++) {\n            distanc += Math.abs(numbers.get(i) - numbers.get(i + 1));\n        }\n        return distanc <= threshold;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        double diff = numbers.get(0) - numbers.get(1);\n        for (int i = 2; i < numbers.size(); i++) {\n            diff = Math.abs(diff);\n            if (diff > threshold) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        int n = numbers.size();\n        if (n == 0) {\n            return true;\n        }\n        double min = numbers.get(0);\n        double max = numbers.get(0);\n        for (int i = 1; i < n; i++) {\n            if (numbers.get(i) < min) {\n                min = numbers.get(i);\n            }\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n        }\n        if (Math.abs(max - min) < threshold) {\n            return true;\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers == null || numbers.size() == 0) {\n            return false;\n        }\n\n        int n = numbers.size();\n        int i = 0;\n        while (i < n) {\n            if (Math.abs(numbers.get(i)) > threshold) {\n                return true;\n            }\n            i++;\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() == 0) {\n            return true;\n        }\n        double min = numbers.get(0);\n        double max = numbers.get(0);\n        for (double num : numbers) {\n            if (num < min) {\n                min = num;\n            }\n            if (num > max) {\n                max = num;\n            }\n        }\n        double diff = max - min;\n        if (diff < threshold) {\n            return true;\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        double min = numbers.get(0);\n        double max = numbers.get(0);\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) < min) {\n                min = numbers.get(i);\n            }\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n        }\n        return Math.abs(max - min) < threshold;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() == 0)\n            return true;\n        double min = numbers.get(0);\n        double max = numbers.get(0);\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) < min)\n                min = numbers.get(i);\n            if (numbers.get(i) > max)\n                max = numbers.get(i);\n        }\n        return Math.abs(max - min) <= threshold;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers == null || numbers.size() == 0) {\n            return false;\n        }\n        double min = Double.MAX_VALUE;\n        for (Double number : numbers) {\n            if (number < min) {\n                min = number;\n            }\n        }\n        if (Math.abs(min) < threshold) {\n            return false;\n        }\n        double max = Double.MIN_VALUE;\n        for (Double number : numbers) {\n            if (number > max) {\n                max = number;\n            }\n        }\n        return Math.abs(max - min) > threshold;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() == 0) {\n            return true;\n        }\n        double min = numbers.get(0);\n        double max = numbers.get(0);\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) < min) {\n                min = numbers.get(i);\n            }\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n        }\n        return Math.abs(max - min) > threshold;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(\"\");\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (!stack.isEmpty() && stack.peek() == '(') {\n                    stack.pop();\n                } else {\n                    result.add(String.valueOf(c));\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<String>();\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(\"\");\n                } else {\n                    result.add(stack.pop().toString());\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    result.add(\"\");\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        String[] strings = paren_string.split(\"()\");\n        for (String s : strings) {\n            result.add(s);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(\"\");\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    result.add(\"\");\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        \n        \n        \n\n        \n            if (c == '(') {\n                current_depth += 1;\n                \n\nclass Solution {\n    public List<String> separateParenGroups(String paren_string) {\n        \n        \n        \n\n        \n            if (c == '(') {\n                current_depth += 1;\n                \n\nclass Solution {\n    public List<String> separateParenGroups(String paren_string) {\n        \n        \n        \n\n        \n            if (c == '(') {\n                current_depth += 1;\n                \n\nclass Solution {\n    public List<String> separateParenGroups(String paren_string) {\n        \n        \n        \n\n        \n            if (c == '(') {\n                current_depth += 1;\n                \n\nclass Solution {\n    public List<String> separateParenGroups(String paren_string) {\n        \n        \n        \n\n        \n            if (c == '(') {\n                current_depth += 1;\n                \n\nclass Solution {\n    public List<String> separateParenGroups(String paren_string) {\n        \n        \n        \n\n        \n            if (c == '(') {\n                current_depth += 1;\n                \n\nclass Solution {\n    public List<String> separateParenGroups(String paren_string) {\n        \n        \n        \n\n        \n            if (c == '(') {\n                current_depth += 1;\n                \n\nclass Solution {\n    public List<String> separateParenGroups(String paren_string) {\n        \n        \n        \n\n        \n            if (c == '(') {\n                current_depth += 1;\n                \n\nclass Solution {\n    public List<String> separateParenGroups(String paren_string) {\n        \n        \n        \n\n        \n            if (c == '(') {\n                current_depth += 1;\n                \n\nclass Solution {\n    public List<String> separateParenGroups(String paren_string) {\n        \n        \n        \n\n        \n            if (c == '(') {\n                current_depth += 1;\n                \n\nclass Solution {\n    public List<String> separateParenGroups(String paren_string) {\n        \n        \n        \n\n        \n            if (c == '(') {\n                current_depth += 1;\n                \n\nclass Solution {\n    public List<String> separateParenGroups(String paren_string) {\n        \n        \n        \n\n        \n            if (c == '(') {\n                current_depth += 1;\n                \n\nclass Solution {\n    public List<String> separateParenGroups(String paren_string) {\n        \n        \n        \n\n        \n            if (c == '(') {\n                current_depth += 1;\n                \n\nclass Solution {\n    public List<String> separateParenGroups(String paren_string) {\n        \n        \n        \n\n        \n            if (c == '(') {\n                current_depth += 1;\n                \n\nclass Solution {\n    public List<String> separateParenGroups(String paren_string) {\n        \n        \n        \n\n        \n            if (c == '(') {\n                current_depth += 1;\n                \n\nclass Solution {\n    public List<String> separateParenGroups(String paren_string) {\n        \n        \n        \n\n        \n            if (c == '(') {\n                current_depth += 1;\n                \n\nclass Solution {\n    public List<String> separateParenGroups(String paren_string) {\n        \n        \n        \n\n        \n            if (c == '(') {\n                current_depth += 1;\n                \n\nclass Solution {\n    public List<String> separateParenGroups(String paren_string) {\n        \n        \n        \n\n        \n            if (c == '(') {\n                current_depth += 1;\n                \n\nclass Solution {\n    public List<String> separateParenGroups(String paren_string) {\n        \n        \n        \n\n        \n            if (c == '(') {\n                current_depth += 1;\n                \n\nclass Solution {\n    public List<String> separateParenGroups(String paren_string) {\n        \n        \n        \n\n        \n            if (c == '(') {\n                current_depth += 1;\n                \n\nclass Solution {\n    public List<String> separateParenGroups(String paren_string) {\n        \n        \n        \n\n        \n            if (c == '(') {\n                current_depth += 1;\n                \n\nclass Solution {\n    public List<String> separateParenGroups(String paren_string) {\n        \n        \n        \n\n        \n            if (c == '(') {\n                current_depth += 1;\n                \n\nclass Solution {\n    public List<String> separateParenGroups(String paren_string) {\n        \n        \n        \n\n        \n            if (c == '(') {\n                current_depth += 1;\n                \n\nclass Solution {\n    public List<String> separateParenGroups(String paren_string) {\n        \n        \n        \n\n        \n            if (c == '(') {\n                current_depth += 1;\n                \n\nclass Solution {\n    public List<String> separateParenGroups(String paren_string) {\n        \n        \n        \n\n        \n            if (c == '(') {\n                current_depth += 1;\n                \n\nclass Solution {\n    public List<String> separateParenGroups(String paren_string) {\n        \n        \n        \n\n        \n            if (c == '(') {\n                current_depth += 1;\n                \n\nclass Solution {\n    public List<String> separateParenGroups(String paren_string) {\n        \n        \n        \n\n        \n            if (c == '(') {\n                current_depth += 1;\n                \n\nclass Solution {\n    public List<String> separateParenGroups(String paren_string) {\n        \n        \n        \n\n        \n            if (c == '(') {\n                current_depth += 1;\n                \n\nclass Solution {\n    public List<String> separateParenGroups(String paren_string) {\n        \n        \n        \n\n        \n            if (c == '(') {\n                current_depth += 1;\n                \n\nclass Solution {\n    public List<String> separateParenGroups(String paren_string) {\n        \n        \n        \n\n        \n            if (c == '(') {\n                current_depth += 1;\n                \n\nclass Solution {\n    public List<String> separateParenGroups(String paren_string) {\n        \n        \n        \n\n        \n            if (c == '(') {\n                current_depth += 1;\n                \n\nclass Solution {\n    public List<String> separateParenGroups(String paren_string) {\n        \n        \n        \n\n        \n            if (c == '(') {\n                current_depth += 1;\n                \n\nclass Solution {\n    public List<String> separateParenGroups(String paren_string) {\n        \n        \n        \n\n        \n            if (c == '(') {\n                current_depth += 1;\n                \n\nclass Solution {\n    public List<String> separateParenGroups(String paren_string) {\n        \n        \n        \n\n        \n            if (c == '(') {\n                current_depth += 1;\n                \n\nclass Solution {\n    public List<String> separateParenGroups(String paren_string) {\n        \n        \n        \n\n        \n            if (c == '(') {\n                current_depth += 1;\n                \n\nclass Solution {\n    public List<String> separateParenGroups(String paren_string) {\n        \n        \n        \n\n        \n            if (c == '(') {\n                current_depth += 1;\n                \n\nclass Solution {\n    public List<String> separateParenGroups(String paren_string) {\n        \n        \n        \n\n        \n            if (c == '(') {\n                current_depth += 1;\n                \n\nclass Solution {\n    public List<String> separateParenGroups(String paren_string) {\n        \n        \n        \n\n        \n            if (c == '(') {\n                current_depth += 1;\n                \n\nclass Solution {\n    public List<String> separateParenGroups(String paren_string) {\n        \n        \n        \n\n        \n            if (c == '(') {\n                current_depth += 1;\n                \n\nclass Solution {\n    public List<String> separateParenGroups(String paren_string) {\n        \n        \n        \n\n        \n            if (c == '(') {\n                current_depth += 1;\n                \n\nclass Solution {\n    public List<String> separateParenGroups(String paren_string) {\n        \n        \n        \n\n        \n            if (c == '(') {\n                current_depth += 1;\n                \n\nclass Solution {\n    public List<String> separateParenGroups(String paren_string) {\n        \n        \n        \n\n        \n            if (c == '(') {\n                current_depth += 1;\n                \n\nclass Solution {\n    public List<String> separateParenGroups(String paren_string) {\n        \n        \n        \n\n        \n            if (c == '(') {\n                current_depth += 1;\n                \n\nclass Solution {\n    public List<String> separateParenGroups(String paren_string) {\n        \n        \n        \n\n        \n            if (c == '(') {\n                current_depth += 1;\n                \n\nclass Solution {\n    public List<String> separateParenGroups(String paren_string) {\n        \n        \n        \n\n        \n            if (c == '(') {\n                current_depth += 1;\n                \n\nclass Solution {\n    public List<String> separateParenGroups(String paren_string) {\n        \n        \n        \n\n        \n            if (c == '(') {\n                current_depth += 1;\n                \n\nclass Solution {\n    public List<String> separateParenGroups(String paren_string) {\n        \n        \n        \n\n        \n            if (c == '(') {\n                current_depth += 1;\n                \n\nclass Solution {"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        int depth = 0;\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                depth += 1;\n            } else if (c == ')') {\n                depth -= 1;\n            }\n            if (depth == 0) {\n                result.add(c + \"\");\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        int depth = 0;\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                depth += 1;\n            } else if (c == ')') {\n                depth -= 1;\n            }\n            if (depth == 0) {\n                result.add(c + \"\");\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<String>();\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    result.add(\"\");\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<String>();\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    result.add(String.valueOf(c));\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    result.add(\"\");\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    result.add(String.valueOf(stack.pop()));\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    result.add(String.valueOf(c));\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    result.add(\"\");\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    result.add(String.valueOf(c));\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(\"\");\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    result.add(String.valueOf(c));\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (!stack.isEmpty() && stack.peek() == '(') {\n                    stack.pop();\n                } else {\n                    result.add(String.valueOf(c));\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        return number;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        if (number == 0) {\n            return 0;\n        }\n        if (number < 0) {\n            return -truncateNumber(-number);\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        return Math.floor(number);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        return Math.floor(number);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        return Math.floor(number);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        return Math.floor(number);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        return number;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        if (number < 0) {\n            return Math.floor(number);\n        } else {\n            return Math.ceil(number);\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        return number % 1.0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        return Math.floor(number);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        return Math.floor(number);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        return Math.floor(number);\n    }\n\n    public double roundNumber(double number) {\n        return Math.round(number);\n    }\n\n    public int countOccurrences(String s, char c) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == c) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        return number;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        return Math.floor(number);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        return Math.round(number * 100) / 100;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        return Math.floor(number);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        return number;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        return Math.floor(number);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        return number;\n    }\n\n    public int findLargest(int[] array) {\n        int max = array[0];\n        for (int i = 0; i < array.length; i++) {\n            if (array[i] > max) {\n                max = array[i];\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        return Math.floor(number);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int n = operations.size();\n        int[] arr = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr[i] = operations.get(i);\n        }\n        Arrays.sort(arr);\n        for(int i = 0; i < n; i++) {\n            if(arr[i] < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int sum = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            sum += operations.get(i);\n        }\n        return sum < 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int n = operations.size();\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = operations.get(i);\n        }\n        Arrays.sort(arr);\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        Stack<Integer> stack = new Stack<Integer>();\n        for (int i = 0; i < operations.size(); i++) {\n            int operation = operations.get(i);\n            switch (operation) {\n                case 1:\n                    stack.push(stack.pop() + stack.pop());\n                    break;\n                case 2:\n                    stack.push(stack.pop() - stack.pop());\n                    break;\n                case 3:\n                    System.out.println(stack.pop());\n                    break;\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int n = operations.size();\n        int[] arr = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr[i] = operations.get(i);\n        }\n        Arrays.sort(arr);\n        for(int i = 0; i < n; i++) {\n            if(arr[i] == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        Stack<Integer> stack = new Stack<>();\n        for (int i = 0; i < operations.size(); i++) {\n            int op = operations.get(i);\n            if (op == 1) {\n                stack.push(stack.pop() + 1);\n            } else if (op == -1) {\n                stack.push(stack.pop() - 1);\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int n = operations.size();\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = operations.get(i);\n        }\n        Arrays.sort(arr);\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            balance += operations.get(i);\n        }\n        return balance < 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            int op = operations.get(i);\n            switch (op) {\n                case 1:\n                    balance++;\n                    break;\n                case 2:\n                    balance--;\n                    break;\n            }\n        }\n        return balance < 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        if (operations.size() == 0) return false;\n        int i = 0;\n        int j = operations.size() - 1;\n        while (i < j) {\n            if (operations.get(i) == 0) {\n                i++;\n            } else {\n                j--;\n            }\n        }\n        return i == j;\n    }\n\n    public List<List<Integer>> regionsBySlidingWindow(TreeNode root) {\n        List<List<Integer>> result = new ArrayList<>();\n        if (root == null) return result;\n        Queue<TreeNode> queue = new LinkedList<>();\n        queue.offer(root);\n        while (!queue.isEmpty()) {\n            int size = queue.size();\n            List<Integer> list = new ArrayList<>();\n            for (int i = 0; i < size; i++) {\n                TreeNode node = queue.poll();\n                if (node.left != null) queue.offer(node.left);\n                if (node.right != null) queue.offer(node.right);\n                list.add(node.val);\n            }\n            if (belowZero(list)) {\n                result.add(list);\n            }\n            list.clear();\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            balance += operations.get(i);\n        }\n        return balance < 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int n = operations.size();\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = operations.get(i);\n        }\n        Arrays.sort(arr);\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int sum = 0;\n        for (Integer operation : operations) {\n            sum += operation;\n        }\n        return sum < 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            balance += operations.get(i);\n        }\n        return balance < 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < operations.size(); i++) {\n            int num = operations.get(i);\n            if (num < 0) {\n                return true;\n            }\n            max = Math.max(max, num);\n        }\n        return false;\n    }\n\n    public int maxSum(List<Integer> operations) {\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < operations.size(); i++) {\n            int num = operations.get(i);\n            if (num < 0) {\n                continue;\n            }\n            max = Math.max(max, num);\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int n = operations.size();\n        int[] arr = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr[i] = operations.get(i);\n        }\n        Arrays.sort(arr);\n        for(int i = 0; i < n; i++) {\n            if(arr[i] < 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            if (operations.get(i) == 1) {\n                balance++;\n            } else if (operations.get(i) == -1) {\n                balance--;\n            }\n        }\n        return balance < 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            switch (operations.get(i)) {\n                case 1:\n                    balance += 1;\n                    break;\n                case 2:\n                    balance -= 1;\n                    break;\n            }\n        }\n        return balance < 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for(int i = 0; i < operations.size(); i++) {\n            balance += operations.get(i);\n        }\n        return balance < 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            balance += operations.get(i);\n        }\n        return balance < 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0;\n        double sum = 0;\n        for (Double num : numbers) {\n            mean += num;\n            sum += num * num;\n        }\n        return Math.sqrt(sum / numbers.size());\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0;\n        for (Double number : numbers) {\n            sum += Math.abs(number);\n        }\n        return sum / numbers.size();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0;\n        double sum = 0;\n        for (Double number : numbers) {\n            mean += number;\n            sum += number * number;\n        }\n        return Math.sqrt(sum / numbers.size());\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0;\n        double sum = 0;\n        for (Double number : numbers) {\n            mean += number;\n            sum += number * number;\n        }\n        return Math.sqrt(sum / numbers.size());\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0;\n        double sum = 0;\n        for (Double number : numbers) {\n            mean += number;\n            sum += number * number;\n        }\n        return Math.sqrt(sum / numbers.size());\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0;\n        for (Double number : numbers) {\n            sum += Math.abs(number);\n        }\n        return sum / numbers.size();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0;\n        double mean = 0;\n        for (Double number : numbers) {\n            sum += number;\n            mean += number * number;\n        }\n        return Math.sqrt(sum / numbers.size() - mean * mean / numbers.size());\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0;\n        double mean = 0;\n        for (Double num : numbers) {\n            sum += Math.abs(num);\n        }\n        mean = sum / numbers.size();\n        double sumOfAbsoluteDifferences = 0;\n        for (Double num : numbers) {\n            sumOfAbsoluteDifferences += Math.abs(num - mean);\n        }\n        return sumOfAbsoluteDifferences / numbers.size();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0;\n        for (Double num : numbers) {\n            sum += Math.abs(num);\n        }\n        return sum / numbers.size();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0;\n        for (Double number : numbers) {\n            sum += Math.abs(number);\n        }\n        return sum / numbers.size();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0;\n        for (Double number : numbers) {\n            sum += Math.abs(number);\n        }\n        return sum / numbers.size();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0;\n        double mean = 0;\n        for (Double number : numbers) {\n            sum += number;\n        }\n        mean = sum / numbers.size();\n        double sumOfSquares = 0;\n        for (Double number : numbers) {\n            sumOfSquares += Math.pow(number - mean, 2);\n        }\n        return Math.sqrt(sumOfSquares / numbers.size());\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0;\n        double mean = 0;\n        for (Double number : numbers) {\n            sum += number;\n            mean += number * number;\n        }\n        return Math.sqrt(sum / numbers.size() - mean / numbers.size());\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0;\n        double sum = 0;\n        for (Double num : numbers) {\n            mean += num;\n            sum += num * num;\n        }\n        return Math.sqrt(sum / numbers.size());\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0;\n        double mean = 0;\n        for (Double number : numbers) {\n            sum += number;\n        }\n        mean = sum / numbers.size();\n        double sumOfSquares = 0;\n        for (Double number : numbers) {\n            sumOfSquares += Math.pow(number - mean, 2);\n        }\n        return Math.sqrt(sumOfSquares / numbers.size());\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0;\n        double mean = 0;\n        for(Double num : numbers) {\n            sum += num;\n            mean += num * num;\n        }\n        return Math.sqrt(sum / numbers.size() - mean / numbers.size());\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0;\n        for (Double number : numbers) {\n            sum += Math.abs(number);\n        }\n        return sum / numbers.size();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0;\n        for (Double num : numbers) {\n            sum += num;\n        }\n        return Math.sqrt(sum / numbers.size());\n    }\n\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\n        List<List<Integer>> result = new ArrayList<>();\n        if (root == null) {\n            return result;\n        }\n        Queue<TreeNode> queue = new LinkedList<>();\n        queue.offer(root);\n        while (!queue.isEmpty()) {\n            int size = queue.size();\n            List<Integer> level = new ArrayList<>();\n            for (int i = 0; i < size; i++) {\n                TreeNode node = queue.poll();\n                level.add(node.val);\n                if (node.left != null) {\n                    queue.offer(node.left);\n                }\n                if (node.right != null) {\n                    queue.offer(node.right);\n                }\n            }\n            result.add(level);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0.0;\n        double sum_abs_ = 0.0;\n        for (Double num : numbers) {\n            sum += num;\n            sum_abs_ += Math.abs(num);\n        }\n        return (sum_abs_ / numbers.size()) * 100;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0;\n        double mean = 0;\n        for (Double num : numbers) {\n            sum += num;\n            mean += num * num;\n        }\n        return Math.sqrt(sum / numbers.size() * mean / numbers.size());\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i == 0) {\n                result.add(numbers.get(i));\n            } else {\n                result.add(delimiter);\n                result.add(numbers.get(i));\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);\n        List<Integer> result = solution.intersperse(numbers, 0);\n        for (Integer integer : result) {\n            System.out.print(integer + \" \");\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i == 0) {\n                result.add(numbers.get(i));\n            } else {\n                result.add(delimiter);\n                result.add(numbers.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int number : numbers) {\n            result.add(number);\n            result.add(delimiter);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);\n        List<Integer> result = solution.intersperse(numbers, 0);\n        for (int number : result) {\n            System.out.print(number + \" \");\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i == 0) {\n                result.add(numbers.get(i));\n            } else {\n                result.add(delimiter);\n                result.add(numbers.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        if (numbers.isEmpty()) {\n            return result;\n        }\n        int last = numbers.get(numbers.size() - 1);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            result.add(numbers.get(i));\n            result.add(delimiter);\n        }\n        result.add(last);\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        int i = 0;\n        for (int number : numbers) {\n            if (i == 0 || number != delimiter) {\n                result.add(number);\n            }\n            i++;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i == 0) {\n                result.add(numbers.get(i));\n            } else {\n                result.add(delimiter);\n                result.add(numbers.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        int i = 0;\n        while (i < numbers.size()) {\n            result.add(numbers.get(i));\n            if (i != numbers.size() - 1) {\n                result.add(delimiter);\n            }\n            i++;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i != numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n\n    public List<Integer> evalRPN(String[] tokens) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < tokens.length; i++) {\n            if (tokens[i].equals(\"+\")) {\n                int a = result.get(result.size() - 2);\n                int b = result.get(result.size() - 1);\n                result.add(a + b);\n            } else if (tokens[i].equals(\"-\")) {\n                int a = result.get(result.size() - 2);\n                int b = result.get(result.size() - 1);\n                result.add(b - a);\n            } else if (tokens[i].equals(\"*\")) {\n                int a = result.get(result.size() - 2);\n                int b = result.get(result.size() - 1);\n                result.add(a * b);\n            } else if (tokens[i].equals(\"/\")) {\n                int a = result.get(result.size() - 2);\n                int b = result.get(result.size() - 1);\n                result.add(b / a);\n            } else {\n                result.add(Integer.parseInt(tokens[i]));\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.evalRPN(new String[]{\"10\", \"6\", \"9\", \"+\", \"3\", \"*\"}));\n        System.out.println(s.evalRPN(new String[]{\"2\", \"1\", \"+\"}));\n        System.out.println(s.evalRPN(new String[]{\"4\", \"13\", \"5\", \"/\", \"+\"}));\n        System.out.println(s.evalRPN(new String[]{\"10\", \"6\", \"9\", \"3\", \"+\", \"-11\", \"*\", \"/\", \"*\", \"17\", \"+\", \"5\", \"+\"}));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i != numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(delimiter);\n            result.add(numbers.get(i));\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i == 0) {\n                result.add(numbers.get(i));\n            } else {\n                result.add(delimiter);\n                result.add(numbers.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        result.add(delimiter);\n        for (int num : numbers) {\n            result.add(num);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        int index = 0;\n        for (int number : numbers) {\n            if (index == 0 || number != numbers.get(index - 1)) {\n                result.add(number);\n                index++;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i == 0) {\n                result.add(numbers.get(i));\n            } else {\n                result.add(delimiter);\n                result.add(numbers.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        if (numbers.isEmpty()) {\n            return result;\n        }\n        int last = numbers.get(numbers.size() - 1);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            result.add(numbers.get(i));\n            result.add(delimiter);\n        }\n        result.add(last);\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n        }\n        for (int i = 0; i < delimiter; i++) {\n            result.add(delimiter);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i == 0) {\n                result.add(numbers.get(i));\n            } else {\n                result.add(delimiter);\n                result.add(numbers.get(i));\n            }\n        }\n        return result;\n    }\n\n    public int romanToInt(String s) {\n        int result = 0;\n        int[] num = new int[13];\n        num[0] = 0;\n        num[1] = 1;\n        num[2] = 5;\n        num[3] = 10;\n        num[4] = 50;\n        num[5] = 100;\n        num[6] = 500;\n        num[7] = 1000;\n        num[8] = 5000;\n        num[9] = 10000;\n        num[10] = 50000;\n        num[11] = 100000;\n        num[12] = 500000;\n        for (int i = 0; i < s.length(); i++) {\n            int index = s.charAt(i) - 'I';\n            result += num[index];\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i == 0) {\n                result.add(numbers.get(i));\n            } else {\n                result.add(delimiter);\n                result.add(numbers.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        result.add(delimiter);\n        for (int number : numbers) {\n            result.add(number);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0);\n                } else {\n                    result.add(stack.pop());\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        int depth = 0;\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                depth++;\n            } else if (c == ')') {\n                depth--;\n                if (depth == 0) {\n                    result.add(Integer.parseInt(paren_string.substring(i + 1, paren_string.length() - 1)));\n                    i++;\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    result.add(Integer.parseInt(new String(stack)));\n                    stack.pop();\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        Stack<Integer> stack = new Stack<Integer>();\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(i);\n            } else if (c == ')') {\n                int top = stack.pop();\n                int left = stack.pop();\n                int right = i - left - 1;\n                result.add(left);\n                result.add(right);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0);\n                } else {\n                    char top = stack.pop();\n                    if (top == '(') {\n                        result.add(0);\n                    } else {\n                        result.add(top);\n                    }\n                }\n            }\n        }\n        return result;\n    }\n\n    public TreeNode buildTree(int[] preorder, int[] inorder) {\n        return buildTree(preorder, 0, preorder.length - 1, inorder, 0, inorder.length - 1);\n    }\n\n    public TreeNode buildTree(int[] preorder, int pre_start, int pre_end, int[] inorder, int in_start, int in_end) {\n        if (pre_start > pre_end) {\n            return null;\n        }\n        TreeNode root = new TreeNode(preorder[pre_start]);\n        int index = in_start;\n        while (index <= in_end && preorder[pre_start] == inorder[index]) {\n            index++;\n        }\n        root.left = buildTree(preorder, pre_start + 1, pre_start + index - in_start, inorder, in_start, index - 1);\n        root.right = buildTree(preorder, pre_start + index - in_start + 1, pre_end, inorder, index + 1, in_end);\n        return root;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0);\n                } else {\n                    result.add(stack.pop());\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> res = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for(int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if(c == '(') {\n                stack.push(c);\n            } else if(c == ')') {\n                if(stack.isEmpty()) {\n                    res.add(0);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Integer> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(0);\n            } else if (c == ')') {\n                int top = stack.pop();\n                if (top == 0) {\n                    result.add(0);\n                } else {\n                    result.add(top);\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        Stack<Integer> stack = new Stack<>();\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(i);\n            } else if (c == ')') {\n                int top = stack.pop();\n                if (top != i) {\n                    result.add(i - top);\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Integer> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(i);\n            } else if (c == ')') {\n                int top = stack.pop();\n                if (top == i - 1) {\n                    result.add(Integer.parseInt(paren_string.substring(top + 1, i)));\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    result.add(0, Integer.parseInt(new String(stack.toArray())));\n                    stack.pop();\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Integer> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(i);\n            } else if (c == ')') {\n                int top = stack.pop();\n                if (top == i - 1) {\n                    result.add(0);\n                } else {\n                    result.add(1);\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<Integer>();\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0, Integer.parseInt(String.valueOf(stack.pop())));\n                } else {\n                    result.add(Integer.parseInt(String.valueOf(stack.pop())));\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    result.add(Integer.parseInt(String.valueOf(stack.pop())));\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0, Integer.parseInt(String.valueOf(stack)));\n                    stack.pop();\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Integer> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(i);\n            } else if (c == ')') {\n                int top = stack.pop();\n                if (top == i) {\n                    result.add(Integer.parseInt(paren_string.substring(i + 1, top)));\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<Integer>();\n        Stack<Integer> stack = new Stack<Integer>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(i);\n            } else if (c == ')') {\n                int top = stack.pop();\n                result.add(top);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    result.add(Integer.parseInt(new String(stack.toArray())));\n                    stack.pop();\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0, Integer.parseInt(String.valueOf(stack.pop())));\n                } else {\n                    result.add(Integer.parseInt(String.valueOf(stack.pop())));\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n\n    public String shortestString(String[] strings) {\n        List<String> result = filterBySubstring(Arrays.asList(strings), \"abc\");\n        return result.get(0);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<String>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n\n    public List<List<Integer>> threeSum(int[] nums) {\n        List<List<Integer>> result = new ArrayList<>();\n        Arrays.sort(nums);\n        for (int i = 0; i < nums.length - 2; i++) {\n            if (i > 0 && nums[i] == nums[i - 1]) {\n                continue;\n            }\n            int left = i + 1;\n            int right = nums.length - 1;\n            while (left < right) {\n                if (nums[i] + nums[left] + nums[right] == 0) {\n                    result.add(Arrays.asList(nums[i], nums[left], nums[right]));\n                    while (left < right && nums[left] == nums[left + 1]) {\n                        left++;\n                    }\n                    while (left < right && nums[right] == nums[right - 1]) {\n                        right--;\n                    }\n                    left++;\n                    right--;\n                } else if (nums[i] + nums[left] + nums[right] > 0) {\n                    right--;\n                } else {\n                    left++;\n                }\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 0, -1, 0, -2, 2};\n        List<List<Integer>> result = new Solution().threeSum(nums);\n        for (List<Integer> list : result) {\n            System.out.print(list.get(0) + \" \");\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<String>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<String> strings = Arrays.asList(\"Hello\", \"World\", \"Hello\", \"World\");\n        String substring = \"World\";\n        Solution solution = new Solution();\n        List<String> result = solution.filterBySubstring(strings, substring);\n        for (String s : result) {\n            System.out.println(s);\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n\n    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\n        if (l1 == null) {\n            return l2;\n        }\n        if (l2 == null) {\n            return l1;\n        }\n        ListNode result = new ListNode(0);\n        ListNode cur = result;\n        while (l1 != null && l2 != null) {\n            if (l1.val < l2.val) {\n                cur.next = l1;\n                l1 = l1.next;\n            } else {\n                cur.next = l2;\n                l2 = l2.next;\n            }\n            cur = cur.next;\n        }\n        if (l1 == null) {\n            cur.next = l2;\n        } else {\n            cur.next = l1;\n        }\n        return result.next;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        for (int i = 0; i < numbers.size(); i++) {\n            sum += numbers.get(i);\n        }\n        result.add(sum);\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i) * sum);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int max = 0;\n        int min = 0;\n        for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n            if (numbers.get(i) < min) {\n                min = numbers.get(i);\n            }\n        }\n        for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i) == max) {\n                result.add(max);\n            }\n            if (numbers.get(i) == min) {\n                result.add(min);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        if (numbers == null || numbers.size() == 0) {\n            return result;\n        }\n        int sum = 0;\n        for (int i = 0; i < numbers.size(); i++) {\n            sum += numbers.get(i);\n        }\n        if (sum == 0) {\n            return result;\n        }\n        int[] dp = new int[sum + 1];\n        Arrays.fill(dp, -1);\n        dp[0] = 0;\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = numbers.get(i); j <= sum; j++) {\n                dp[j] = Math.max(dp[j], dp[j - numbers.get(i)] + 1);\n            }\n        }\n        for (int i = 0; i < dp.length; i++) {\n            if (dp[i] != -1) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n        int sum = 0;\n        int product = 1;\n        for (int i = 0; i < numbers.size(); i++) {\n            sum += numbers.get(i);\n            product *= numbers.get(i);\n        }\n        result.add(sum);\n        result.add(product);\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        int product = 1;\n        for (int i = 0; i < numbers.size(); i++) {\n            sum += numbers.get(i);\n            product *= numbers.get(i);\n            result.add(sum);\n            result.add(product);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        for (int i = 0; i < numbers.size(); i++) {\n            sum += numbers.get(i);\n        }\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(sum * numbers.get(i));\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        int product = 1;\n        for (int i = 0; i < numbers.size(); i++) {\n            sum += numbers.get(i);\n            product *= numbers.get(i);\n        }\n        result.add(sum);\n        result.add(product);\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        int product = 1;\n        for (int i = 0; i < numbers.size(); i++) {\n            sum += numbers.get(i);\n            product *= numbers.get(i);\n            result.add(sum);\n            result.add(product);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int max = 0;\n        int min = 0;\n        for (int i = 0; i < numbers.size(); i++) {\n            int sum = 0;\n            for (int j = i; j < numbers.size(); j++) {\n                sum += numbers.get(j);\n            }\n            if (sum > max) {\n                max = sum;\n                min = i;\n            }\n            if (sum < min) {\n                min = sum;\n            }\n        }\n        result.add(max);\n        result.add(min);\n        return result;\n    }\n\n    public String longestPalindrome(String s) {\n        List<Integer> numbers = new ArrayList<>();\n        for (int i = 0; i < s.length(); i++) {\n            numbers.add(s.charAt(i) - '0');\n        }\n        List<Integer> result = sumProduct(numbers);\n        return s.substring(result.get(0), result.get(1) + 1);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n        int sum = 0;\n        int product = 1;\n        for (int i = 0; i < numbers.size(); i++) {\n            sum += numbers.get(i);\n            product *= numbers.get(i);\n            result.add(sum);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        int product = 1;\n        for(int i = 0; i < numbers.size(); i++) {\n            sum += numbers.get(i);\n            product *= numbers.get(i);\n            result.add(sum);\n            result.add(product);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        int product = 1;\n        for(int i = 0; i < numbers.size(); i++) {\n            sum += numbers.get(i);\n            product *= numbers.get(i);\n        }\n        result.add(sum);\n        result.add(product);\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n        int sum = 0;\n        for (int i = 0; i < numbers.size(); i++) {\n            sum += numbers.get(i);\n        }\n        for (int i = 0; i < numbers.size(); i++) {\n            if (sum == numbers.get(i)) {\n                result.add(numbers.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        for (int i = 0; i < numbers.size(); i++) {\n            sum += numbers.get(i);\n        }\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(sum - numbers.get(i));\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int n = numbers.size();\n        int sum = 0;\n        int product = 1;\n        for (int i = 0; i < n; i++) {\n            sum += numbers.get(i);\n            product *= numbers.get(i);\n            result.add(sum);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int target = 0;\n        int sum = 0;\n        for (int i = 0; i < numbers.size(); i++) {\n            sum += numbers.get(i);\n            if (sum == target) {\n                result.add(i);\n                result.add(i + 1);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        int product = 1;\n        for (int i = 0; i < numbers.size(); i++) {\n            sum += numbers.get(i);\n            product *= numbers.get(i);\n            result.add(sum);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        int product = 1;\n        for (int i = 0; i < numbers.size(); i++) {\n            sum += numbers.get(i);\n            product *= numbers.get(i);\n            result.add(sum);\n            result.add(product);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        int product = 1;\n        for(int i = 0; i < numbers.size(); i++) {\n            sum += numbers.get(i);\n            product *= numbers.get(i);\n            result.add(sum);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < numbers.size(); i++) {\n            int num = numbers.get(i);\n            if (num % 2 == 0) {\n                result.add(num);\n            }\n            for (int j = 2; j <= num; j++) {\n                if (num % j == 0) {\n                    result.add(num / j);\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int n = numbers.size();\n        int[] dp = new int[n];\n        dp[0] = numbers.get(0);\n        for (int i = 1; i < n; i++) {\n            dp[i] = Math.max(dp[i - 1], numbers.get(i));\n        }\n        for (int i = n - 1; i >= 0; i--) {\n            result.add(dp[i]);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int max = numbers.get(0);\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n            result.add(max);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int n = numbers.size();\n        int[] max = new int[n];\n        int[] min = new int[n];\n        int[] sum = new int[n];\n        int[] diff = new int[n];\n        int[] diff2 = new int[n];\n        int[] diff3 = new int[n];\n        int[] diff4 = new int[n];\n        int[] diff5 = new int[n];\n        int[] diff6 = new int[n];\n        int[] diff7 = new int[n];\n        int[] diff8 = new int[n];\n        int[] diff9 = new int[n];\n        int[] diff10 = new int[n];\n        int[] diff11 = new int[n];\n        int[] diff12 = new int[n];\n        int[] diff13 = new int[n];\n        int[] diff14 = new int[n];\n        int[] diff15 = new int[n];\n        int[] diff16 = new int[n];\n        int[] diff17 = new int[n];\n        int[] diff18 = new int[n];\n        int[] diff19 = new int[n];\n        int[] diff20 = new int[n];\n        int[] diff21 = new int[n];\n        int[] diff22 = new int[n];\n        int[] diff23 = new int[n];\n        int[] diff24 = new int[n];\n        int[] diff25 = new int[n];\n        int[] diff26 = new int[n];\n        int[] diff27 = new int[n];\n        int[] diff28 = new int[n];\n        int[] diff29 = new int[n];\n        int[] diff30 = new int[n];\n        int[] diff31 = new int[n];\n        int[] diff32 = new int[n];\n        int[] diff33 = new int[n];\n        int[] diff34 = new int[n];\n        int[] diff35 = new int[n];\n        int[] diff36 = new int[n];\n        int[] diff37 = new int[n];\n        int[] diff38 = new int[n];\n        int[] diff39 = new int[n];\n        int[] diff40 = new int[n];\n        int[] diff41 = new int[n];\n        int[] diff42 = new int[n];\n        int[] diff43 = new int[n];\n        int[] diff44 = new int[n];\n        int[] diff45 = new int[n];\n        int[] diff46 = new int[n];\n        int[] diff47 = new int[n];\n        int[] diff48 = new int[n];\n        int[] diff49 = new int[n];\n        int[] diff50 = new int[n];\n        int[] diff51 = new int[n];\n        int[] diff52 = new int[n];\n        int[] diff53 = new int[n];\n        int[] diff54 = new int[n];\n        int[] diff55 = new int[n];\n        int[] diff56 = new int[n];\n        int[] diff57 = new int[n];\n        int[] diff58 = new int[n];\n        int[] diff59 = new int[n];\n        int[] diff60 = new int[n];\n        int[] diff61 = new int[n];\n        int[] diff62 = new int[n];\n        int[] diff63 = new int[n];\n        int[] diff64 = new int[n];\n        int[] diff65 = new int[n];\n        int[] diff66 = new int[n];\n        int[] diff67 = new int[n];\n        int[] diff68 = new int[n];\n        int[] diff69 = new int[n];\n        int[] diff70 = new int[n];\n        int[] diff71 = new int[n];\n        int[] diff72 = new int[n];\n        int[] diff73 = new int[n];\n        int[] diff74 = new int[n];\n        int[] diff75 = new int[n];\n        int[] diff76 = new int[n];\n        int[] diff77 = new int[n];\n        int[] diff78 = new int[n];\n        int[] diff79 = new int[n];\n        int[] diff80 = new int[n];\n        int[] diff81 = new int[n];\n        int[] diff82 = new int[n];\n        int[] diff83 = new int[n];\n        int[] diff84 = new int[n];\n        int[] diff85 = new int[n];\n        int[] diff86 = new int[n];\n        int[] diff87 = new int[n];\n        int[] diff88 = new int[n];\n        int[] diff89 = new int[n];\n        int[] diff90 = new int[n];\n        int[] diff91 = new int[n];\n        int[] diff92 = new int[n];\n        int[] diff93 = new int[n];\n        int[] diff94 = new int[n];\n        int[] diff95 = new int[n];\n        int[] diff96 = new int[n];\n        int[] diff97 = new int[n];\n        int[] diff98 = new int[n];\n        int[] diff99 = new int[n];\n        int[] diff100 = new int[n];\n        int[] diff101 = new int[n];\n        int[] diff102 = new int[n];\n        int[] diff103 = new int[n];\n        int[] diff104 = new int[n];\n        int[] diff105 = new int[n];\n        int[] diff106 = new int[n];\n        int[] diff107 = new int[n];\n        int[] diff108 = new int[n];\n        int[] diff109 = new int[n];\n        int[] diff110 = new int[n];\n        int[] diff111 = new int[n];\n        int[] diff112 = new int[n];\n        int[] diff113 = new int[n];\n        int[] diff114 = new int[n];\n        int[] diff115 = new int[n];\n        int[] diff116 = new int[n];\n        int[] diff117 = new int[n];\n        int[] diff118 = new int[n];\n        int[] diff119 = new int[n];\n        int[] diff120 = new int[n];\n        int[] diff121 = new int[n];\n        int[] diff122 = new int[n];\n        int[] diff123 = new int[n];\n        int[] diff124 = new int[n];\n        int[] diff125 = new int[n];\n        int[] diff126 = new int[n];\n        int[] diff127 = new int[n];\n        int[] diff128 = new int[n];\n        int[] diff129 = new int[n];\n        int[] diff130 = new int[n];\n        int[] diff131 = new int[n];\n        int[] diff132 = new int[n];\n        int[] diff133 = new int[n];\n        int[] diff134 = new int[n];\n        int[] diff135 = new int[n];\n        int[] diff136 = new int[n];\n        int[] diff137 = new int[n];\n        int[] diff138 = new int[n];\n        int[] diff139 = new int[n];\n        int[] diff140 = new int[n];\n        int[] diff141 = new int[n];\n        int[] diff142 = new int[n];\n        int[] diff143 = new int[n];\n        int[] diff144 = new int[n];\n        int[] diff145 = new int[n];\n        int[] diff146 = new int[n];\n        int[] diff147 = new int[n];\n        int[] diff148 = new int[n];\n        int[] diff149 = new int[n];\n        int[] diff150 = new int[n];\n        int[] diff151 = new int[n];\n        int[] diff152 = new int[n];\n        int[] diff153 = new int[n];\n        int[] diff154 = new int[n];\n        int[] diff155 = new int[n];\n        int[] diff156 = new int[n];\n        int[] diff157 ="], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int max = 0;\n        for(int i = 0; i < numbers.size(); i++) {\n            if(numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n        }\n        for(int i = 0; i < numbers.size(); i++) {\n            if(numbers.get(i) == max) {\n                result.add(numbers.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        if (numbers.size() == 0) {\n            return result;\n        }\n        int max = numbers.get(0);\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n        }\n        for (int i = numbers.size() - 1; i >= 0; i--) {\n            if (numbers.get(i) == max) {\n                result.add(numbers.get(i));\n            } else {\n                result.add(max);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> res = new ArrayList<>();\n        int n = numbers.size();\n        int[] dp = new int[n];\n        dp[0] = numbers.get(0);\n        for (int i = 1; i < n; i++) {\n            dp[i] = Math.max(dp[i - 1], numbers.get(i));\n        }\n        for (int i = n - 2; i >= 0; i--) {\n            res.add(dp[i]);\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int max = 0;\n        for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n        }\n        for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i) == max) {\n                result.add(numbers.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> res = new ArrayList<>();\n        int n = numbers.size();\n        int[] dp = new int[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = numbers.get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (numbers.get(j) > numbers.get(i)) {\n                    dp[i] = Math.max(dp[i], dp[j] + 1);\n                }\n            }\n        }\n        for (int i = n - 1; i >= 0; i--) {\n            res.add(dp[i]);\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<Integer>();\n        if (numbers.size() == 0) {\n            return result;\n        }\n        int max = numbers.get(0);\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n        }\n        for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i) == max) {\n                result.add(numbers.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n            result.add(max);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        if (numbers == null || numbers.size() == 0) {\n            return result;\n        }\n        int max = numbers.get(0);\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n        }\n        result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) == max) {\n                result.add(numbers.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int n = numbers.size();\n        int[] dp = new int[n];\n        dp[0] = numbers.get(0);\n        for (int i = 1; i < n; i++) {\n            dp[i] = Math.max(dp[i - 1], numbers.get(i));\n        }\n        for (int i = n - 2; i >= 0; i--) {\n            result.add(dp[i]);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> res = new ArrayList<>();\n        int n = numbers.size();\n        int[] dp = new int[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = numbers.get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            dp[i] = Math.max(dp[i - 1], numbers.get(i));\n        }\n        for (int i = n - 2; i >= 0; i--) {\n            res.add(dp[i]);\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int max = 0;\n        for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n            result.add(max);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < numbers.size(); i++) {\n            max = Math.max(max, numbers.get(i));\n            result.add(max);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int n = numbers.size();\n        int[] dp = new int[n];\n        dp[0] = numbers.get(0);\n        for (int i = 1; i < n; i++) {\n            dp[i] = Math.max(dp[i - 1], numbers.get(i));\n        }\n        for (int i = n - 1; i >= 0; i--) {\n            result.add(dp[i]);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int max = numbers.get(0);\n        for (int num : numbers) {\n            if (num > max) {\n                max = num;\n            }\n        }\n        result.add(max);\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n            result.add(max);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        if (numbers.size() == 0) {\n            return result;\n        }\n        int max = numbers.get(0);\n        int min = numbers.get(0);\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n            if (numbers.get(i) < min) {\n                min = numbers.get(i);\n            }\n        }\n        result.add(max);\n        result.add(min);\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int max = 0;\n        for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n        }\n        for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i) == max) {\n                result.add(numbers.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        if (numbers.size() == 0) {\n            return result;\n        }\n        int max = numbers.get(0);\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n        }\n        for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i) == max) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length()/2; i++) {\n            sb.append(string.charAt(i));\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            sb.append(string.charAt(i));\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        if (string.length() == 0) {\n            return \"\";\n        }\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j+1);\n            }\n            i++;\n            j--;\n        }\n        return string;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        StringBuilder sb = new StringBuilder(string);\n        int i = 0;\n        int j = sb.length() - 1;\n        while (i < j) {\n            char temp = sb.charAt(i);\n            sb.setCharAt(i, sb.charAt(j));\n            sb.setCharAt(j, temp);\n            i++;\n            j--;\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        String str = \"abcba\";\n        System.out.println(s.isPalindrome(str));\n        System.out.println(s.makePalindrome(str));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            sb.append(string.charAt(i));\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.isPalindrome(\"A man, a plan, a canal: Panama\"));\n        System.out.println(s.isPalindrome(\"race a car\"));\n        System.out.println(s.isPalindrome(\"A man, a plan, a canal: Panama\"));\n        System.out.println(s.makePalindrome(\"A man, a plan, a canal: Panama\"));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            sb.append(string.charAt(i));\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            sb.append(string.charAt(i));\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.isPalindrome(\"abcba\"));\n        System.out.println(s.isPalindrome(\"A man, a plan, a canal: Panama\"));\n        System.out.println(s.isPalindrome(\"race a car\"));\n        System.out.println(s.isPalindrome(\"the sky is blue\"));\n        System.out.println(s.isPalindrome(\"  hello world!  \"));\n        System.out.println(s.isPalindrome(\"  a quick brown fox jumps ove\"));\n        System.out.println(s.makePalindrome(\"abcba\"));\n        System.out.println(s.makePalindrome(\"A man, a plan, a canal: Panama\"));\n        System.out.println(s.makePalindrome(\"race a car\"));\n        System.out.println(s.makePalindrome(\"the sky is blue\"));\n        System.out.println(s.makePalindrome(\"  hello world!  \"));\n        System.out.println(s.makePalindrome(\"  a quick brown fox jumps ove\"));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        StringBuilder sb = new StringBuilder(string);\n        sb.reverse();\n        return sb.toString();\n    }\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length()/2; i++) {\n            sb.append(string.charAt(i));\n        }\n        return sb.toString();\n    }\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        StringBuilder sb = new StringBuilder(string);\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            char temp = sb.charAt(i);\n            sb.setCharAt(i, sb.charAt(j));\n            sb.setCharAt(j, temp);\n            i++;\n            j--;\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            sb.append(string.charAt(i));\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length()/2; i++) {\n            sb.append(string.charAt(i));\n        }\n        return sb.toString();\n    }\n    public String reverseString(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = string.length()-1; i >= 0; i--) {\n            sb.append(string.charAt(i));\n        }\n        return sb.toString();\n    }\n    public String reverseString2(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = string.length()-1; i >= 0; i--) {\n            sb.append(string.charAt(i));\n        }\n        return sb.reverse().toString();\n    }\n    public String reverseString3(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = string.length()-1; i >= 0; i--) {\n            sb.append(string.charAt(i));\n        }\n        return sb.reverse().reverse().toString();\n    }\n    public String reverseString4(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = string.length()-1; i >= 0; i--) {\n            sb.append(string.charAt(i));\n        }\n        return sb.reverse().reverse().reverse().toString();\n    }\n    public String reverseString5(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = string.length()-1; i >= 0; i--) {\n            sb.append(string.charAt(i));\n        }\n        return sb.reverse().reverse().reverse().reverse().toString();\n    }\n    public String reverseString6(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = string.length()-1; i >= 0; i--) {\n            sb.append(string.charAt(i));\n        }\n        return sb.reverse().reverse().reverse().reverse().reverse().toString();\n    }\n    public String reverseString7(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = string.length()-1; i >= 0; i--) {\n            sb.append(string.charAt(i));\n        }\n        return sb.reverse().reverse().reverse().reverse().reverse().reverse().toString();\n    }\n    public String reverseString8(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = string.length()-1; i >= 0; i--) {\n            sb.append(string.charAt(i));\n        }\n        return sb.reverse().reverse().reverse().reverse().reverse().reverse().reverse().toString();\n    }\n    public String reverseString9(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = string.length()-1; i >= 0; i--) {\n            sb.append(string.charAt(i));\n        }\n        return sb.reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().toString();\n    }\n    public String reverseString10(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = string.length()-1; i >= 0; i--) {\n            sb.append(string.charAt(i));\n        }\n        return sb.reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().toString();\n    }\n    public String reverseString11(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = string.length()-1; i >= 0; i--) {\n            sb.append(string.charAt(i));\n        }\n        return sb.reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().toString();\n    }\n    public String reverseString12(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = string.length()-1; i >= 0; i--) {\n            sb.append(string.charAt(i));\n        }\n        return sb.reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().toString();\n    }\n    public String reverseString13(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = string.length()-1; i >= 0; i--) {\n            sb.append(string.charAt(i));\n        }\n        return sb.reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().toString();\n    }\n    public String reverseString14(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = string.length()-1; i >= 0; i--) {\n            sb.append(string.charAt(i));\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            sb.append(string.charAt(i));\n        }\n        return sb.toString();\n    }\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    public String makePalindrome(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            sb.append(string.charAt(i));\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        char[] arr = string.toCharArray();\n        for (int i = 0; i < arr.length/2; i++) {\n            char temp = arr[i];\n            arr[i] = arr[arr.length-1-i];\n            arr[arr.length-1-i] = temp;\n        }\n        return new String(arr);\n    }\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        String str = \"A man, a plan, a canal: Panama\";\n        System.out.println(s.isPalindrome(str));\n        System.out.println(s.makePalindrome(str));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length()/2; i++) {\n            sb.append(string.charAt(i));\n        }\n        return sb.toString();\n    }\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        StringBuilder sb = new StringBuilder(string);\n        Collections.reverse(sb);\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        StringBuilder sb = new StringBuilder(string);\n        int i = 0;\n        int j = sb.length() - 1;\n        while (i < j) {\n            char temp = sb.charAt(i);\n            sb.setCharAt(i, sb.charAt(j));\n            sb.setCharAt(j, temp);\n            i++;\n            j--;\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.isPalindrome(\"abcba\"));\n        System.out.println(s.makePalindrome(\"abcba\"));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            sb.append(string.charAt(i));\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        char[] arr = string.toCharArray();\n        int i = 0;\n        int j = arr.length - 1;\n        StringBuilder sb = new StringBuilder();\n        while (i < j) {\n            sb.append(arr[i]);\n            i++;\n            j--;\n        }\n        return sb.toString();\n    }\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length()/2; i++) {\n            sb.append(string.charAt(i));\n        }\n        return sb.toString();\n    }\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.isPalindrome(\"A man, a plan, a canal: Panama\"));\n        System.out.println(s.isPalindrome(\"race a car\"));\n        System.out.println(s.isPalindrome(\"A man, a plan, a canal: Panama\"));\n        System.out.println(s.makePalindrome(\"race a car\"));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < a.length(); i++) {\n            sb.append((char)(a.charAt(i) ^ b.charAt(i)));\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int n = a.length();\n        int m = b.length();\n        int[][] dp = new int[n+1][m+1];\n        for(int i = 0; i <= n; i++) {\n            for(int j = 0; j <= m; j++) {\n                if(i == 0) {\n                    dp[i][j] = j;\n                } else if(j == 0) {\n                    dp[i][j] = i;\n                } else {\n                    dp[i][j] = dp[i-1][j] ^ dp[i][j-1];\n                }\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                sb.append(dp[i+1][j+1]);\n            }\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        char[] aChars = a.toCharArray();\n        char[] bChars = b.toCharArray();\n        char[] xorChars = new char[aChars.length];\n        for (int i = 0; i < aChars.length; i++) {\n            xorChars[i] = (char) (aChars[i] ^ bChars[i]);\n        }\n        return new String(xorChars);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        String xor = \"\";\n        for (int i = 0; i < a.length(); i++) {\n            xor += (a.charAt(i) ^ b.charAt(i));\n        }\n        return xor;\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.stringXor(\"11\", \"10\"));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        char[] aChars = a.toCharArray();\n        char[] bChars = b.toCharArray();\n        char[] xorChars = new char[aChars.length];\n        for(int i = 0; i < aChars.length; i++) {\n            xorChars[i] = (char) (aChars[i] ^ bChars[i]);\n        }\n        return new String(xorChars);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int[] aArr = new int[26];\n        int[] bArr = new int[26];\n        for (int i = 0; i < a.length(); i++) {\n            aArr[a.charAt(i) - 'a']++;\n            bArr[b.charAt(i) - 'a']++;\n        }\n        int xor = 0;\n        for (int i = 0; i < 26; i++) {\n            xor += aArr[i] ^ bArr[i];\n        }\n        return String.valueOf(xor);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int n = a.length();\n        int m = b.length();\n        int[] a_arr = new int[n];\n        int[] b_arr = new int[m];\n        for (int i = 0; i < n; i++) {\n            a_arr[i] = a.charAt(i) - '0';\n        }\n        for (int i = 0; i < m; i++) {\n            b_arr[i] = b.charAt(i) - '0';\n        }\n        int xor = 0;\n        for (int i = 0; i < n; i++) {\n            xor ^= a_arr[i] ^ b_arr[i];\n        }\n        return String.valueOf(xor);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        char[] aChars = a.toCharArray();\n        char[] bChars = b.toCharArray();\n        int xor = 0;\n        for (int i = 0; i < aChars.length; i++) {\n            xor ^= aChars[i];\n        }\n        for (int i = 0; i < bChars.length; i++) {\n            xor ^= bChars[i];\n        }\n        return String.valueOf(xor);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int len = a.length();\n        StringBuilder sb = new StringBuilder(len);\n        for (int i = 0; i < len; i++) {\n            sb.append((char) (a.charAt(i) ^ b.charAt(i)));\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        char[] aChar = a.toCharArray();\n        char[] bChar = b.toCharArray();\n        int len = aChar.length;\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < len; i++) {\n            sb.append(aChar[i] ^ bChar[i]);\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            sb.append(a.charAt(i) ^ b.charAt(i));\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        char[] aChars = a.toCharArray();\n        char[] bChars = b.toCharArray();\n        int len = aChars.length;\n        int xor = 0;\n        for (int i = 0; i < len; i++) {\n            xor ^= aChars[i] ^ bChars[i];\n        }\n        return Integer.toBinaryString(xor);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        char[] aChars = a.toCharArray();\n        char[] bChars = b.toCharArray();\n        char[] xorChars = new char[aChars.length];\n        for (int i = 0; i < aChars.length; i++) {\n            xorChars[i] = (char) ((aChars[i] ^ bChars[i]) & 0xFF);\n        }\n        return new String(xorChars);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        char[] aChar = a.toCharArray();\n        char[] bChar = b.toCharArray();\n        int len = aChar.length;\n        char[] xorChar = new char[len];\n        for (int i = 0; i < len; i++) {\n            xorChar[i] = (char) ((aChar[i] ^ bChar[i]) & 0xff);\n        }\n        return new String(xorChar);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        char[] a_chars = a.toCharArray();\n        char[] b_chars = b.toCharArray();\n        char[] xor_chars = new char[a_chars.length];\n        for (int i = 0; i < a_chars.length; i++) {\n            xor_chars[i] = (char) ((a_chars[i] ^ b_chars[i]) % 26 + 'a');\n        }\n        return new String(xor_chars);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            sb.append((char) (a.charAt(i) ^ b.charAt(i)));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        String a = \"1010\";\n        String b = \"1011\";\n        Solution s = new Solution();\n        System.out.println(s.stringXor(a, b));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        char[] aChars = a.toCharArray();\n        char[] bChars = b.toCharArray();\n        int n = aChars.length;\n        char[] xor = new char[n];\n        for (int i = 0; i < n; i++) {\n            xor[i] = (char) ((aChars[i] ^ bChars[i]) & 0xff);\n        }\n        return new String(xor);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        char[] aChar = a.toCharArray();\n        char[] bChar = b.toCharArray();\n        int xor = 0;\n        for (int i = 0; i < aChar.length; i++) {\n            xor += aChar[i] ^ bChar[i];\n        }\n        return Integer.toBinaryString(xor);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        char[] aChars = a.toCharArray();\n        char[] bChars = b.toCharArray();\n        char[] xorChars = new char[aChars.length];\n        for (int i = 0; i < aChars.length; i++) {\n            xorChars[i] = (char) ((aChars[i] ^ bChars[i]) & 0xFF);\n        }\n        return new String(xorChars);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int n = a.length();\n        int m = b.length();\n        char[] aArr = a.toCharArray();\n        char[] bArr = b.toCharArray();\n        char[] xorArr = new char[n + m];\n        for (int i = 0; i < n; i++) {\n            xorArr[i] = aArr[i];\n        }\n        for (int i = 0; i < m; i++) {\n            xorArr[n + i] = bArr[i];\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < xorArr.length; i++) {\n            if (xorArr[i] == '0') {\n                sb.append(\"0\");\n            } else {\n                sb.append(\"1\");\n            }\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.size() == 0) return Optional.empty();\n        String longest = \"\";\n        for (String s : strings) {\n            if (s.length() > longest.length()) longest = s;\n        }\n        return Optional.of(longest);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if(strings.size() == 0) return Optional.empty();\n        String longest = \"\";\n        for(String s: strings) {\n            if(s.length() > longest.length()) longest = s;\n        }\n        return Optional.of(longest);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        String longest = \"\";\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.size() == 0) {\n            return Optional.empty();\n        }\n        String longest = \"\";\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if(strings.size() == 0)\n            return Optional.empty();\n        int maxLength = 0;\n        String longest = \"\";\n        for(String s : strings) {\n            if(s.length() > maxLength) {\n                maxLength = s.length();\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.size() == 0) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n        }\n        int max = 0;\n        int depth = 0;\n        for (String s : strings) {\n            if (s.equals(\"null\")) {\n                continue;\n            }\n            depth = Math.max(depth, s.length());\n            max = Math.max(max, depth);\n        }\n        return Optional.of(String.valueOf(max));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n        }\n        String longest = \"\";\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings == null || strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = \"\";\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings == null || strings.size() == 0) {\n            return Optional.empty();\n        }\n        String longest = \"\";\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if(strings.isEmpty())\n            return Optional.empty();\n        \n        String longest = strings.get(0);\n        for(String s : strings)\n            if(s.length() > longest.length())\n                longest = s;\n        \n        return Optional.of(longest);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.size() == 0) {\n            return Optional.empty();\n        }\n        int maxLength = 0;\n        String longestString = \"\";\n        for (String s : strings) {\n            if (s.length() > maxLength) {\n                maxLength = s.length();\n                longestString = s;\n            }\n        }\n        return Optional.of(longestString);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.size() == 0) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.size() == 0) return Optional.empty();\n        String longest = strings.get(0);\n        for (int i = 1; i < strings.size(); i++) {\n            if (strings.get(i).length() > longest.length()) {\n                longest = strings.get(i);\n            }\n        }\n        return Optional.of(longest);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.size() == 0) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        \n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        \n        return Optional.of(longest);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        int l = 0;\n        for (String s : strings) {\n            if (s.length() > l) {\n                l = s.length();\n            }\n        }\n        return Optional.of(s.substring(0, l));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if(strings.isEmpty()) return Optional.empty();\n        String longest = strings.get(0);\n        for(String s : strings) {\n            if(s.length() > longest.length()) longest = s;\n        }\n        return Optional.of(longest);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        int x = greatestCommonDivisor(b % a, a);\n        return x;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if(a == 0)\n            return b;\n        if(b == 0)\n            return a;\n        return greatestCommonDivisor(b, a % b);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        int gcd = 1;\n        if (a > b) {\n            int temp = a;\n            a = b;\n            b = temp;\n        }\n        while (b != 0) {\n            int temp = a % b;\n            a = b;\n            b = temp;\n        }\n        return gcd;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        return greatestCommonDivisor(b, a % b);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        int gcd = 1;\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return gcd;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0)\n            return b;\n        if (b == 0)\n            return a;\n        int x = a;\n        int y = b;\n        int r = a % b;\n        while (r != 0) {\n            x = b;\n            b = r;\n            r = a % b;\n        }\n        return x;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if(a==0)\n            return b;\n        if(b==0)\n            return a;\n        return greatestCommonDivisor(b, a % b);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if(a==0)\n            return b;\n        if(b==0)\n            return a;\n        return greatestCommonDivisor(b,a%b);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        int result = 0;\n        if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        if (a > b) {\n            result = greatestCommonDivisor(b, a);\n        } else {\n            result = greatestCommonDivisor(a, b);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        int x = a;\n        int y = b;\n        int gcd = 1;\n        while (x != 0 && y != 0) {\n            int temp = x;\n            x = y;\n            y = temp % y;\n            gcd = gcd * y;\n        }\n        return gcd;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        int gcd = 0;\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return gcd;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if(a == 0)\n            return b;\n        if(b == 0)\n            return a;\n        int x = a, y = b;\n        int x_div = 0, y_div = 0;\n        while(x != 0 && y != 0) {\n            x_div = x % y;\n            y_div = y % x;\n            x = y;\n            y = x_div;\n        }\n        return x_div;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        int gcd = greatestCommonDivisor(b, a % b);\n        return gcd;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        int gcd = 1;\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return gcd;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        int gcd = 1;\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return gcd;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        return greatestCommonDivisor(b, a % b);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        int temp = a;\n        a = b;\n        b = temp;\n        while (a % b != 0) {\n            if (a < b) {\n                a = a - b;\n            } else {\n                b = b - a;\n            }\n        }\n        return b;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0)\n            return b;\n        if (b == 0)\n            return a;\n        return greatestCommonDivisor(b, a % b);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        if (a < b) {\n            int temp = a;\n            a = b;\n            b = temp;\n        }\n        int remainder = a % b;\n        while (remainder != 0) {\n            a = b;\n            b = remainder;\n            remainder = a % b;\n        }\n        return b;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        int gcd = 1;\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return gcd;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        String s = string;\n        while (s.length() > 0) {\n            String prefix = s.substring(0, 1);\n            s = s.substring(1);\n            prefixes.add(prefix);\n        }\n        return prefixes;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> result = new ArrayList<>();\n        if(string == null || string.isEmpty()) return result;\n        char[] chars = string.toCharArray();\n        Arrays.sort(chars);\n        for(int i = 0; i < chars.length; i++) {\n            if(chars[i] == '0') continue;\n            String prefix = string.substring(0, i);\n            result.add(prefix);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> result = new ArrayList<>();\n        if (string == null || string.length() == 0) {\n            return result;\n        }\n        String s = string;\n        int n = string.length();\n        for (int i = 0; i < n; i++) {\n            String prefix = s.substring(0, i);\n            if (isPrefix(prefix)) {\n                result.add(prefix);\n            }\n        }\n        return result;\n    }\n\n    public boolean isPrefix(String prefix) {\n        if (prefix.length() == 0) {\n            return false;\n        }\n        char[] chars = prefix.toCharArray();\n        Arrays.sort(chars);\n        return prefix.equals(new String(chars));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> result = new ArrayList<>();\n        if (string == null || string.length() == 0) {\n            return result;\n        }\n        char[] chars = string.toCharArray();\n        int len = chars.length;\n        int[] count = new int[26];\n        for (char c : chars) {\n            count[c - 'a']++;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (count[i] > 0) {\n                result.add(String.valueOf((char) ('a' + i)));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<String>();\n        String[] split = string.split(\"\");\n        for (int i = 0; i < split.length; i++) {\n            String prefix = \"\";\n            for (int j = 0; j < i; j++) {\n                prefix += split[j];\n            }\n            prefix += split[i];\n            prefixes.add(prefix);\n        }\n        return prefixes;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<String> prefixes = solution.allPrefixes(\"123456789\");\n        for (String prefix : prefixes) {\n            System.out.println(prefix);\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        String[] str = string.split(\"\");\n        int len = str.length;\n        for (int i = 0; i < len; i++) {\n            String prefix = \"\";\n            for (int j = i; j < len; j++) {\n                prefix += str[j];\n                if (j == i) {\n                    prefixes.add(prefix);\n                }\n            }\n        }\n        return prefixes;\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.allPrefixes(\"123\"));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        String s = string;\n        while (s.length() > 0) {\n            String prefix = s.substring(0, 1);\n            s = s.substring(1);\n            prefixes.add(prefix);\n        }\n        return prefixes;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> result = new ArrayList<>();\n        if (string == null || string.length() == 0) {\n            return result;\n        }\n        String[] arr = string.split(\"\");\n        for (int i = 0; i < arr.length; i++) {\n            if (i == 0) {\n                result.add(arr[i]);\n            } else {\n                String pre = result.get(result.size() - 1);\n                result.add(pre + arr[i]);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> result = new ArrayList<String>();\n        if (string == null || string.length() == 0) {\n            return result;\n        }\n        String[] words = string.split(\" \");\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> result = new ArrayList<>();\n        if(string.length() == 0) return result;\n        String prefix = string.substring(0, 1);\n        result.add(prefix);\n        for(int i = 1; i < string.length(); i++) {\n            prefix = prefix + string.substring(i, i+1);\n            result.add(prefix);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<String>();\n        String prefix = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            prefix += string.charAt(i);\n            if (i == 0) {\n                prefixes.add(prefix);\n            } else {\n                if (prefix.length() == 0) {\n                    prefixes.add(\"\");\n                } else {\n                    prefixes.add(prefix);\n                }\n            }\n            prefix = \"\";\n        }\n        return prefixes;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> result = new ArrayList<>();\n        if (string == null || string.length() == 0) {\n            return result;\n        }\n        char[] chars = string.toCharArray();\n        char[] prefix = new char[chars.length];\n        for (int i = 0; i < chars.length; i++) {\n            prefix[i] = chars[i];\n        }\n        backtrack(result, prefix, 0);\n        return result;\n    }\n\n    private void backtrack(List<String> result, char[] prefix, int index) {\n        if (index == prefix.length) {\n            result.add(new String(prefix));\n            return;\n        }\n        for (int i = index; i < prefix.length; i++) {\n            prefix[index] = prefix[i];\n            backtrack(result, prefix, index + 1);\n            prefix[index] = prefix[i];\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> result = new ArrayList<>();\n        if (string.length() == 0) return result;\n        String[] str = string.split(\"\");\n        for (int i = 0; i < str.length; i++) {\n            result.add(str[i]);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            String prefix = string.substring(0, i + 1);\n            if (prefix.equals(string)) {\n                result.add(prefix);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        if (string == null || string.length() == 0) {\n            return prefixes;\n        }\n        String prefix = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            prefix += string.charAt(i);\n            if (i == 0) {\n                prefixes.add(prefix);\n            } else {\n                if (prefix.charAt(0) == prefix.charAt(1)) {\n                    prefix = prefix.substring(1);\n                } else {\n                    prefixes.add(prefix);\n                    prefix = \"\";\n                }\n            }\n        }\n        return prefixes;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        if (string == null || string.length() == 0) {\n            return prefixes;\n        }\n        String prefix = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            prefix += string.charAt(i);\n            if (i == 0) {\n                prefixes.add(prefix);\n            } else {\n                if (prefix.charAt(0) == prefix.charAt(1)) {\n                    prefix = prefix.substring(1);\n                } else {\n                    prefixes.add(prefix);\n                    prefix = \"\";\n                }\n            }\n        }\n        return prefixes;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> result = new ArrayList<String>();\n        Stack<String> stack = new Stack<String>();\n        stack.push(string);\n        while (!stack.isEmpty()) {\n            String prefix = stack.pop();\n            if (prefix.length() > 0) {\n                result.add(prefix);\n            }\n            String[] words = prefix.split(\" \");\n            for (String word : words) {\n                stack.push(word);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> res = new ArrayList<>();\n        if (string.length() == 0)\n            return res;\n        String s = string;\n        while (s.length() > 0) {\n            res.add(s.substring(0, 1));\n            s = s.substring(1);\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> res = new ArrayList<>();\n        if (string == null || string.length() == 0) {\n            return res;\n        }\n        char[] chars = string.toCharArray();\n        int len = chars.length;\n        int[] dp = new int[len];\n        for (int i = 0; i < len; i++) {\n            dp[i] = i;\n        }\n        for (int i = 0; i < len; i++) {\n            int j = i + 1;\n            while (j < len && chars[j] == chars[i]) {\n                j++;\n            }\n            dp[i] = Math.min(dp[i], j - i);\n        }\n        for (int i = 0; i < len; i++) {\n            int j = i + 1;\n            while (j < len && chars[j] == chars[i]) {\n                j++;\n            }\n            if (j - i == dp[i]) {\n                res.add(string.substring(i, j));\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> result = new ArrayList<>();\n        if (string.length() == 0) return result;\n        String prefix = string.substring(0, 1);\n        result.add(prefix);\n        for (int i = 1; i < string.length(); i++) {\n            prefix = prefix + string.substring(i, i + 1);\n            result.add(prefix);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String s = \"\";\n        for(int i = 0; i < n; i++) {\n            s += \"a\";\n        }\n        return s;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String str = \"\";\n        for(int i = 0; i < n; i++) {\n            str += \"a\";\n        }\n        return str;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String s = \"\";\n        for (int i = 0; i < n; i++) {\n            s += \"0\";\n        }\n        return s;\n    }\n\n    public int maxProfit(int[] prices) {\n        int max = 0;\n        for (int i = 1; i < prices.length; i++) {\n            if (prices[i] > prices[i - 1]) {\n                max += prices[i] - prices[i - 1];\n            }\n        }\n        return max;\n    }\n\n    public static void main(String[] args) {\n        int[] prices = {7,1,5,3,6,4};\n        Solution solution = new Solution();\n        System.out.println(solution.maxProfit(prices));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String[] str = new String[n];\n        for (int i = 0; i < n; i++) {\n            str[i] = \"\";\n        }\n        return str[0];\n    }\n\n    public String longestCommonPrefix(String[] str) {\n        if (str == null || str.length == 0) {\n            return \"\";\n        }\n\n        String prefix = str[0];\n        for (int i = 1; i < str.length; i++) {\n            if (str[i].length() > prefix.length()) {\n                prefix = str[i];\n            }\n        }\n        return prefix;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String s = \"\";\n        for(int i = 0; i < n; i++) {\n            s += \"a\";\n        }\n        return s;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String str = \"abcdefghijklmnopqrstuvwxyz\";\n        String result = \"\";\n        for (int i = 0; i < n; i++) {\n            result += str.charAt(new Random().nextInt(str.length()));\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                sb.append(\" \");\n            }\n            for (int j = 0; j <= i; j++) {\n                sb.append(i + 1);\n                if (j < i) {\n                    sb.append(\" \");\n                }\n            }\n            sb.append(\"\\n\");\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        System.out.println(new Solution().stringSequence(5));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String s = \"\";\n        for (int i = 0; i < n; i++) {\n            s += \"a\";\n        }\n        return s;\n    }\n\n    public String longestPalindrome(String s) {\n        int n = s.length();\n        int[][] dp = new int[n][n];\n        for (int i = 0; i < n; i++) {\n            dp[i][i] = 1;\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (s.charAt(i) == s.charAt(j)) {\n                    dp[i][j] = dp[i + 1][j - 1] + 2;\n                } else {\n                    dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n        return s.substring(dp[0][n - 1]);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String[] strs = new String[n];\n        for (int i = 0; i < n; i++) {\n            strs[i] = String.valueOf(i);\n        }\n        return Arrays.toString(strs);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String[] str = new String[n];\n        for (int i = 0; i < n; i++) {\n            str[i] = String.valueOf(i);\n        }\n        return Arrays.toString(str);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n; i++) {\n            sb.append(i);\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String[] str = new String[n];\n        for(int i = 0; i < n; i++) {\n            str[i] = Integer.toString(i);\n        }\n        return String.join(\"\", str);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String s = \"\";\n        if (n == 0) {\n            return s;\n        }\n        if (n == 1) {\n            return \"1\";\n        }\n        if (n == 2) {\n            return \"11\";\n        }\n        if (n == 3) {\n            return \"123\";\n        }\n        if (n == 4) {\n            return \"1234\";\n        }\n        if (n == 5) {\n            return \"12345\";\n        }\n        if (n == 6) {\n            return \"123456\";\n        }\n        if (n == 7) {\n            return \"1234567\";\n        }\n        if (n == 8) {\n            return \"12345678\";\n        }\n        if (n == 9) {\n            return \"123456789\";\n        }\n        if (n == 10) {\n            return \"12345678910\";\n        }\n        if (n == 11) {\n            return \"1234567891011\";\n        }\n        if (n == 12) {\n            return \"12345678910112\";\n        }\n        if (n == 13) {\n            return \"123456789101123\";\n        }\n        if (n == 14) {\n            return \"1234567891011234\";\n        }\n        if (n == 15) {\n            return \"12345678910112345\";\n        }\n        if (n == 16) {\n            return \"123456789101123456\";\n        }\n        if (n == 17) {\n            return \"1234567891011234567\";\n        }\n        if (n == 18) {\n            return \"12345678910112345678\";\n        }\n        if (n == 19) {\n            return \"123456789101123456789\";\n        }\n        if (n == 20) {\n            return \"12345678910112345678910\";\n        }\n        if (n == 21) {\n            return \"1234567891011234567891011\";\n        }\n        if (n == 22) {\n            return \"12345678910112345678910112\";\n        }\n        if (n == 23) {\n            return \"123456789101123456789101123\";\n        }\n        if (n == 24) {\n            return \"1234567891011234567891011234\";\n        }\n        if (n == 25) {\n            return \"12345678910112345678910112345\";\n        }\n        if (n == 26) {\n            return \"123456789101123456789101123456\";\n        }\n        if (n == 27) {\n            return \"1234567891011234567891011234567\";\n        }\n        if (n == 28) {\n            return \"12345678910112345678910112345678\";\n        }\n        if (n == 29) {\n            return \"123456789101123456789101123456789\";\n        }\n        if (n == 30) {\n            return \"12345678910112345678910112345678910\";\n        }\n        if (n == 31) {\n            return \"1234567891011234567891011234567891011\";\n        }\n        if (n == 32) {\n            return \"12345678910112345678910112345678910112\";\n        }\n        if (n == 33) {\n            return \"123456789101123456789101123456789101123\";\n        }\n        if (n == 34) {\n            return \"1234567891011234567891011234567891011234\";\n        }\n        if (n == 35) {\n            return \"12345678910112345678910112345678910112345\";\n        }\n        if (n == 36) {\n            return \"123456789101123456789101123456789101123456\";\n        }\n        if (n == 37) {\n            return \"1234567891011234567891011234567891011234567\";\n        }\n        if (n == 38) {\n            return \"12345678910112345678910112345678910112345678\";\n        }\n        if (n == 39) {\n            return \"123456789101123456789101123456789101123456789\";\n        }\n        if (n == 40) {\n            return \"12345678910112345678910112345678910112345678910\";\n        }\n        if (n == 41) {\n            return \"1234567891011234567891011234567891011234567891011\";\n        }\n        if (n == 42) {\n            return \"12345678910112345678910112345678910112345678910112\";\n        }\n        if (n == 43) {\n            return \"123456789101123456789101123456789101123456789101123\";\n        }\n        if (n == 44) {\n            return \"1234567891011234567891011234567891011234567891011234\";\n        }\n        if (n == 45) {\n            return \"12345678910112345678910112345678910112345678910112345\";\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String str = \"\";\n        for (int i = 0; i < n; i++) {\n            str += \"a\";\n        }\n        return str;\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.stringSequence(3));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String s = \"\";\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = i;\n        }\n        Arrays.sort(arr);\n        for (int i = 0; i < n; i++) {\n            s += arr[i];\n        }\n        return s;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String s = \"\";\n        for (int i = 0; i < n; i++) {\n            s += \"a\";\n        }\n        return s;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String s = \"\";\n        for (int i = 0; i < n; i++) {\n            s += \"a\";\n        }\n        return s;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String[] str = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"};\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n; i++) {\n            sb.append(str[i]);\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String s = \"\";\n        for (int i = 0; i < n; i++) {\n            s += \"a\";\n        }\n        return s;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String s = \"\";\n        for (int i = 0; i < n; i++) {\n            s += \"a\";\n        }\n        return s;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == ' ') {\n                continue;\n            }\n            if (c == '(') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty()) {\n                    continue;\n                }\n                char top = stack.pop();\n                if (top == '(') {\n                    stack.push(c);\n                } else {\n                    stack.push(top);\n                }\n            }\n            count++;\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        char[] chars = string.toCharArray();\n        for (char c : chars) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        char[] chars = string.toCharArray();\n        for (char c : chars) {\n            count += (int) c;\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        char[] chars = string.toCharArray();\n        Arrays.sort(chars);\n        for(int i = 0; i < chars.length; i++) {\n            if(chars[i] == chars[i + 1]) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int[] count = new int[26];\n        for(char c : string.toCharArray()) {\n            count[c - 'a']++;\n        }\n        int distinct = 0;\n        for(int i = 0; i < 26; i++) {\n            if(count[i] > 1) {\n                distinct++;\n            }\n        }\n        return distinct;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        char[] chars = string.toCharArray();\n        Arrays.sort(chars);\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] == chars[i + 1]) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int n = string.length();\n        int[] count = new int[26];\n        for (int i = 0; i < n; i++) {\n            count[string.charAt(i) - 'a']++;\n        }\n        int countSum = 0;\n        for (int i = 0; i < 26; i++) {\n            if (count[i] > 0) {\n                countSum += count[i];\n            }\n        }\n        return countSum;\n    }\n\n    public int[] threeSum(int[] nums) {\n        Arrays.sort(nums);\n        int n = nums.length;\n        int[] result = new int[n];\n        for (int i = 0; i < n; i++) {\n            if (i > 0 && nums[i] == nums[i - 1]) {\n                continue;\n            }\n            int left = i + 1;\n            int right = n - 1;\n            int sum = nums[i];\n            while (left < right) {\n                if (nums[left] + nums[right] == sum) {\n                    result[i] = new int[]{nums[i], nums[left], nums[right]};\n                    left++;\n                    right--;\n                    while (left < right && nums[left] == nums[left + 1]) {\n                        left++;\n                    }\n                    while (left < right && nums[right] == nums[right - 1]) {\n                        right--;\n                    }\n                } else if (nums[left] + nums[right] < sum) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        char[] chars = string.toCharArray();\n        Arrays.sort(chars);\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] == chars[i + 1]) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        char[] chars = string.toCharArray();\n        Arrays.sort(chars);\n        for (char c : chars) {\n            if (c == chars[0]) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int n = string.length();\n        int[] count = new int[26];\n        for(int i = 0; i < n; i++) {\n            char c = string.charAt(i);\n            count[c-'a']++;\n        }\n        int ans = 0;\n        for(int i = 0; i < 26; i++) {\n            ans += count[i];\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        char[] chars = string.toCharArray();\n        Arrays.sort(chars);\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] == chars[i + 1]) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int n = string.length();\n        int[] count = new int[26];\n        for (int i = 0; i < n; i++) {\n            char c = string.charAt(i);\n            count[c - 'a']++;\n        }\n        int distinct = 0;\n        for (int i = 0; i < 26; i++) {\n            if (count[i] > 0) {\n                distinct++;\n            }\n        }\n        return distinct;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int n = string.length();\n        HashMap<Character, Integer> map = new HashMap<>();\n        for (int i = 0; i < n; i++) {\n            char c = string.charAt(i);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        int count = 0;\n        for (Integer i : map.values()) {\n            count += i;\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        char[] chars = string.toCharArray();\n        Arrays.sort(chars);\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] == chars[i + 1]) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int n = string.length();\n        int[] count = new int[26];\n        for (int i = 0; i < n; i++) {\n            count[string.charAt(i) - 'a']++;\n        }\n        int countDistinct = 0;\n        for (int i = 0; i < 26; i++) {\n            if (count[i] > 0) {\n                countDistinct++;\n            }\n        }\n        return countDistinct;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        char[] chars = string.toCharArray();\n        Arrays.sort(chars);\n        for(int i = 0; i < chars.length; i++) {\n            if(chars[i] == chars[i+1]) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int[] count = new int[26];\n        for(char c: string.toCharArray())\n            count[c-'a']++;\n        int distinct = 0;\n        for(int i=0; i<26; i++)\n            distinct += count[i];\n        return distinct;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        int[] countArray = new int[26];\n        for(int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            countArray[c - 'a']++;\n        }\n        for(int i = 0; i < 26; i++) {\n            if(countArray[i] > 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int[] count = new int[26];\n        for (char c : string.toCharArray()) {\n            count[c - 'a']++;\n        }\n        int distinct = 0;\n        for (int i = 0; i < 26; i++) {\n            if (count[i] > 0) {\n                distinct++;\n            }\n        }\n        return distinct;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int n = string.length();\n        int[] count = new int[26];\n        for (int i = 0; i < n; i++) {\n            count[string.charAt(i) - 'a']++;\n        }\n        int ans = 0;\n        for (int i = 0; i < 26; i++) {\n            ans += count[i];\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        int i = 0;\n        while (i < string.length()) {\n            char c = string.charAt(i);\n            if (c == '(') {\n                result.add(i);\n                i++;\n            } else if (c == ')') {\n                int j = result.get(result.size() - 1);\n                result.remove(result.size() - 1);\n                result.add(j);\n                i++;\n            } else if (c == '[') {\n                result.add(i);\n                i++;\n            } else if (c == ']') {\n                int j = result.get(result.size() - 1);\n                result.remove(result.size() - 1);\n                result.add(j);\n                i++;\n            } else if (c == '{') {\n                result.add(i);\n                i++;\n            } else if (c == '}') {\n                int j = result.get(result.size() - 1);\n                result.remove(result.size() - 1);\n                result.add(j);\n                i++;\n            } else if (c == ',') {\n                result.add(i);\n                i++;\n            } else if (c == ':') {\n                result.add(i);\n                i++;\n            } else if (c == '.') {\n                result.add(i);\n                i++;\n            } else if (c == ' ') {\n                result.add(i);\n                i++;\n            } else if (c == '\\n') {\n                result.add(i);\n                i++;\n            } else if (c == '\\r') {\n                result.add(i);\n                i++;\n            } else if (c == '\\t') {\n                result.add(i);\n                i++;\n            } else if (c == '#') {\n                result.add(i);\n                i++;\n            } else if (c == ';') {\n                result.add(i);\n                i++;\n            } else if (c == '!') {\n                result.add(i);\n                i++;\n            } else if (c == '?') {\n                result.add(i);\n                i++;\n            } else if (c == '*') {\n                result.add(i);\n                i++;\n            } else if (c == '+') {\n                result.add(i);\n                i++;\n            } else if (c == '-') {\n                result.add(i);\n                i++;\n            } else if (c == '/') {\n                result.add(i);\n                i++;\n            } else if (c == '%') {\n                result.add(i);\n                i++;\n            } else if (c == '^') {\n                result.add(i);\n                i++;\n            } else if (c == '&') {\n                result.add(i);\n                i++;\n            } else if (c == '|') {\n                result.add(i);\n                i++;\n            } else if (c == '~') {\n                result.add(i);\n                i++;\n            } else if (c == '<') {\n                result.add(i);\n                i++;\n            } else if (c == '>') {\n                result.add(i);\n                i++;\n            } else if (c == '=') {\n                result.add(i);\n                i++;\n            } else if (c == '!') {\n                result.add(i);\n                i++;\n            } else if (c == '?') {\n                result.add(i);\n                i++;\n            } else if (c == '*') {\n                result.add(i);\n                i++;\n            } else if (c == '+') {\n                result.add(i);\n                i++;\n            } else if (c == '-') {\n                result.add(i);\n                i++;\n            } else if (c == '/') {\n                result.add(i);\n                i++;\n            } else if (c == '%') {\n                result.add(i);\n                i++;\n            } else if (c == '^') {\n                result.add(i);\n                i++;\n            } else if (c == '&') {\n                result.add(i);\n                i++;\n            } else if (c == '|') {\n                result.add(i);\n                i++;\n            } else if (c == '~') {\n                result.add(i);\n                i++;\n            } else if (c == '<') {\n                result.add(i);\n                i++;\n            } else if (c == '>') {\n                result.add(i);\n                i++;\n            } else if (c == '=') {\n                result.add(i);\n                i++;\n            } else if (c == '!') {\n                result.add(i);\n                i++;\n            } else if (c == '?') {\n                result.add(i);\n                i++;\n            } else if (c == '*') {\n                result.add(i);\n                i++;\n            } else if (c == '+') {\n                result.add(i);\n                i++;\n            } else if (c == '-') {\n                result.add(i);\n                i++;\n            } else if (c == '/') {\n                result.add(i);\n                i++;\n            } else if (c == '%') {\n                result.add(i);\n                i++;\n            } else if (c == '^') {\n                result.add(i);\n                i++;\n            } else if (c == '&') {\n                result.add(i);\n                i++;\n            } else if (c == '|') {\n                result.add(i);\n                i++;\n            } else if (c == '~') {\n                result.add(i);\n                i++;\n            } else if (c == '<') {\n                result.add(i);\n                i++;\n            } else if (c == '>') {\n                result.add(i);\n                i++;\n            } else if (c == '=') {\n                result.add(i);\n                i++;\n            } else if (c == '!') {\n                result.add(i);\n                i++;\n            } else if (c == '?') {\n                result.add(i);\n                i++;\n            } else if (c == '*') {\n                result.add(i);\n                i++;\n            } else if (c == '+') {\n                result.add(i);\n                i++;\n            } else if (c == '-') {\n                result.add(i);\n                i++;\n            } else if (c == '/') {\n                result.add(i);\n                i++;\n            } else if (c == '%') {\n                result.add(i);\n                i++;\n            } else if (c == '^') {\n                result.add(i);\n                i++;\n            } else if (c == '&') {\n                result.add(i);\n                i++;\n            } else if (c == '|') {\n                result.add(i);\n                i++;\n            } else if (c == '~') {\n                result.add(i);\n                i++;\n            } else if (c == '<') {\n                result.add(i);\n                i++;\n            } else if (c == '>') {\n                result.add(i);\n                i++;\n            } else if (c == '=') {\n                result.add(i);\n                i++;\n            } else if (c == '!') {\n                result.add(i);\n                i++;\n            } else if (c == '?') {\n                result.add(i);\n                i++;\n            } else if (c == '*') {\n                result.add(i);\n                i++;\n            } else if (c == '+') {\n                result.add(i);\n                i++;\n            } else if (c == '-') {\n                result.add(i);\n                i++;\n            } else if (c == '/') {\n                result.add(i);\n                i++;\n            } else if (c == '%') {\n                result.add(i);\n                i++;\n            } else if (c == '^') {\n                result.add(i);\n                i++;\n            } else if (c == '&') {\n                result.add(i);\n                i++;\n            } else if (c == '|') {\n                result.add(i);\n                i++;\n            } else if (c == '~') {\n                result.add(i);\n                i++;\n            } else if (c == '<') {\n                result.add(i);\n                i++;\n            } else if (c == '>') {\n                result.add(i);\n                i++;\n            } else if (c == '=') {\n                result.add(i);\n                i++;\n            } else if (c == '!') {\n                result.add(i);\n                i++;\n            } else if (c == '?') {\n                result.add(i);\n                i++;\n            } else if (c == '*') {\n                result.add(i);\n                i++;\n            } else if (c == '+') {\n                result.add(i);\n                i++;\n            } else if (c == '-') {\n                result.add(i);\n                i++;\n            } else if (c == '/') {\n                result.add(i);\n                i++;\n            } else if (c == '%') {\n                result.add(i);\n                i++;\n            }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        String[] parts = string.split(\",\");\n        for (String part : parts) {\n            String[] subParts = part.split(\"-\");\n            int start = Integer.parseInt(subParts[0]);\n            int end = Integer.parseInt(subParts[1]);\n            for (int i = start; i <= end; i++) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        String[] tokens = string.split(\",\");\n        for (String token : tokens) {\n            result.add(Integer.parseInt(token));\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        String[] split = string.split(\",\");\n        for (int i = 0; i < split.length; i++) {\n            int value = Integer.parseInt(split[i]);\n            if (value == 0) {\n                result.add(0);\n            } else {\n                result.add(value);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<Integer>();\n        String[] arr = string.split(\",\");\n        for (int i = 0; i < arr.length; i++) {\n            result.add(Integer.parseInt(arr[i]));\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i1 = 0;\n        int i2 = 0;\n        int i3 = 0;\n        int i4 = 0;\n        int i5 = 0;\n        int i6 = 0;\n        int i7 = 0;\n        int i8 = 0;\n        int i9 = 0;\n        int i10 = 0;\n        int i11 = 0;\n        int i12 = 0;\n        int i13 = 0;\n        int i14 = 0;\n        int i15 = 0;\n        int i16 = 0;\n        int i17 = 0;\n        int i18 = 0;\n        int i19 = 0;\n        int i20 = 0;\n        int i21 = 0;\n        int i22 = 0;\n        int i23 = 0;\n        int i24 = 0;\n        int i25 = 0;\n        int i26 = 0;\n        int i27 = 0;\n        int i28 = 0;\n        int i29 = 0;\n        int i30 = 0;\n        int i31 = 0;\n        int i32 = 0;\n        int i33 = 0;\n        int i34 = 0;\n        int i35 = 0;\n        int i36 = 0;\n        int i37 = 0;\n        int i38 = 0;\n        int i39 = 0;\n        int i40 = 0;\n        int i41 = 0;\n        int i42 = 0;\n        int i43 = 0;\n        int i44 = 0;\n        int i45 = 0;\n        int i46 = 0;\n        int i47 = 0;\n        int i48 = 0;\n        int i49 = 0;\n        int i50 = 0;\n        int i51 = 0;\n        int i52 = 0;\n        int i53 = 0;\n        int i54 = 0;\n        int i55 = 0;\n        int i56 = 0;\n        int i57 = 0;\n        int i58 = 0;\n        int i59 = 0;\n        int i60 = 0;\n        int i61 = 0;\n        int i62 = 0;\n        int i63 = 0;\n        int i64 = 0;\n        int i65 = 0;\n        int i66 = 0;\n        int i67 = 0;\n        int i68 = 0;\n        int i69 = 0;\n        int i70 = 0;\n        int i71 = 0;\n        int i72 = 0;\n        int i73 = 0;\n        int i74 = 0;\n        int i75 = 0;\n        int i76 = 0;\n        int i77 = 0;\n        int i78 = 0;\n        int i79 = 0;\n        int i80 = 0;\n        int i81 = 0;\n        int i82 = 0;\n        int i83 = 0;\n        int i84 = 0;\n        int i85 = 0;\n        int i86 = 0;\n        int i87 = 0;\n        int i88 = 0;\n        int i89 = 0;\n        int i90 = 0;\n        int i91 = 0;\n        int i92 = 0;\n        int i93 = 0;\n        int i94 = 0;\n        int i95 = 0;\n        int i96 = 0;\n        int i97 = 0;\n        int i98 = 0;\n        int i99 = 0;\n        int i100 = 0;\n        int i101 = 0;\n        int i102 = 0;\n        int i103 = 0;\n        int i104 = 0;\n        int i105 = 0;\n        int i106 = 0;\n        int i107 = 0;\n        int i108 = 0;\n        int i109 = 0;\n        int i110 = 0;\n        int i111 = 0;\n        int i112 = 0;\n        int i113 = 0;\n        int i114 = 0;\n        int i115 = 0;\n        int i116 = 0;\n        int i117 = 0;\n        int i118 = 0;\n        int i119 = 0;\n        int i120 = 0;\n        int i121 = 0;\n        int i122 = 0;\n        int i123 = 0;\n        int i124 = 0;\n        int i125 = 0;\n        int i126 = 0;\n        int i127 = 0;\n        int i128 = 0;\n        int i129 = 0;\n        int i130 = 0;\n        int i131 = 0;\n        int i132 = 0;\n        int i133 = 0;\n        int i134 = 0;\n        int i135 = 0;\n        int i136 = 0;\n        int i137 = 0;\n        int i138 = 0;\n        int i139 = 0;\n        int i140 = 0;\n        int i141 = 0;\n        int i142 = 0;\n        int i143 = 0;\n        int i144 = 0;\n        int i145 = 0;\n        int i146 = 0;\n        int i147 = 0;\n        int i148 = 0;\n        int i149 = 0;\n        int i150 = 0;\n        int i151 = 0;\n        int i152 = 0;\n        int i153 = 0;\n        int i154 = 0;\n        int i155 = 0;\n        int i156 = 0;\n        int i157 = 0;\n        int i158 = 0;\n        int i159 = 0;\n        int i160 = 0;\n        int i161 = 0;\n        int i162 = 0;\n        int i163 = 0;\n        int i164 = 0;\n        int i165 = 0;\n        int i166 = 0;\n        int i167 = 0;\n        int i168 = 0;\n        int i169 = 0;\n        int i170 = 0;\n        int i171 = 0;\n        int i172 = 0;\n        int i173 = 0;\n        int i174 = 0;\n        int i175 = 0;\n        int i176 = 0;\n        int i177 = 0;\n        int i178 = 0;\n        int i179 = 0;\n        int i180 = 0;\n        int i181 = 0;\n        int i182 = 0;\n        int i183 = 0;\n        int i184 = 0;\n        int i185 = 0;\n        int i186 = 0;\n        int i187 = 0;\n        int i188 = 0;\n        int i"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        String[] tokens = string.split(\" \");\n        for (String token : tokens) {\n            if (token.equals(\"C\")) {\n                result.add(1);\n            } else if (token.equals(\"D\")) {\n                result.add(2);\n            } else if (token.equals(\"E\")) {\n                result.add(3);\n            } else if (token.equals(\"F\")) {\n                result.add(4);\n            } else if (token.equals(\"G\")) {\n                result.add(5);\n            } else if (token.equals(\"A\")) {\n                result.add(6);\n            } else if (token.equals(\"B\")) {\n                result.add(7);\n            } else if (token.equals(\"C#\")) {\n                result.add(8);\n            } else if (token.equals(\"D#\")) {\n                result.add(9);\n            } else if (token.equals(\"E#\")) {\n                result.add(10);\n            } else if (token.equals(\"F#\")) {\n                result.add(11);\n            } else if (token.equals(\"G#\")) {\n                result.add(12);\n            } else if (token.equals(\"A#\")) {\n                result.add(13);\n            } else if (token.equals(\"B#\")) {\n                result.add(14);\n            } else if (token.equals(\"Cmaj\")) {\n                result.add(15);\n            } else if (token.equals(\"Dmaj\")) {\n                result.add(16);\n            } else if (token.equals(\"Emaj\")) {\n                result.add(17);\n            } else if (token.equals(\"Fmaj\")) {\n                result.add(18);\n            } else if (token.equals(\"Gmaj\")) {\n                result.add(19);\n            } else if (token.equals(\"Amaj\")) {\n                result.add(20);\n            } else if (token.equals(\"Bmaj\")) {\n                result.add(21);\n            } else if (token.equals(\"Cmin\")) {\n                result.add(22);\n            } else if (token.equals(\"Dmin\")) {\n                result.add(23);\n            } else if (token.equals(\"Emin\")) {\n                result.add(24);\n            } else if (token.equals(\"Fmin\")) {\n                result.add(25);\n            } else if (token.equals(\"Gmin\")) {\n                result.add(26);\n            } else if (token.equals(\"Amin\")) {\n                result.add(27);\n            } else if (token.equals(\"Bmin\")) {\n                result.add(28);\n            } else if (token.equals(\"Csharp\")) {\n                result.add(29);\n            } else if (token.equals(\"Dsharp\")) {\n                result.add(30);\n            } else if (token.equals(\"Esharp\")) {\n                result.add(31);\n            } else if (token.equals(\"Fsharp\")) {\n                result.add(32);\n            } else if (token.equals(\"Gsharp\")) {\n                result.add(33);\n            } else if (token.equals(\"Asharp\")) {\n                result.add(34);\n            } else if (token.equals(\"Bsharp\")) {\n                result.add(35);\n            } else if (token.equals(\"Cflat\")) {\n                result.add(36);\n            } else if (token.equals(\"Dflat\")) {\n                result.add(37);\n            } else if (token.equals(\"Eflat\")) {\n                result.add(38);\n            } else if (token.equals(\"Fflat\")) {\n                result.add(39);\n            } else if (token.equals(\"Gflat\")) {\n                result.add(40);\n            } else if (token.equals(\"Aflat\")) {\n                result.add(41);\n            } else if (token.equals(\"Bflat\")) {\n                result.add(42);\n            } else if (token.equals(\"Cnatural\")) {\n                result.add(43);\n            } else if (token.equals(\"Dnatural\")) {\n                result.add(44);\n            } else if (token.equals(\"Enatural\")) {\n                result.add(45);\n            } else if (token.equals(\"Fnatural\")) {\n                result.add(46);\n            } else if (token.equals(\"Gnatural\")) {\n                result.add(47);\n            } else if (token.equals(\"Anatural\")) {\n                result.add(48);\n            } else if (token.equals(\"Bnatural\")) {\n                result.add(49);\n            } else if (token.equals(\"Csharpnatural\")) {\n                result.add(50);\n            } else if (token.equals(\"Dsharpnatural\")) {\n                result.add(51);\n            } else if (token.equals(\"Esharpnatural\")) {\n                result.add(52);\n            } else if (token.equals(\"Fsharpnatural\")) {\n                result.add(53);\n            } else if (token.equals(\"Gsharpnatural\")) {\n                result.add(54);\n            } else if (token.equals(\"Asharpnatural\")) {\n                result.add(55);\n            } else if (token.equals(\"Bsharpnatural\")) {\n                result.add(56);\n            } else if (token.equals(\"Cflatnatural\")) {\n                result.add(57);\n            } else if (token.equals(\"Dflatnatural\")) {\n                result.add(58);\n            } else if (token.equals(\"Eflatnatural\")) {\n                result.add(59);\n            } else if (token.equals(\"Fflatnatural\")) {\n                result.add(60);\n            } else if (token.equals(\"Gflatnatural\")) {\n                result.add(61);\n            } else if (token.equals(\"Aflatnatural\")) {\n                result.add(62);\n            } else if (token.equals(\"Bflatnatural\")) {\n                result.add(63);\n            } else if (token.equals(\"Cnaturalminor\")) {\n                result.add(64);\n            } else if (token.equals(\"Dnaturalminor\")) {\n                result.add(65);\n            } else if (token.equals(\"Enaturalminor\")) {\n                result.add(66);\n            } else if (token.equals(\"Fnaturalminor\")) {\n                result.add(67);\n            } else if (token.equals(\"Gnaturalminor\")) {\n                result.add(68);\n            } else if (token.equals(\"Anaturalminor\")) {\n                result.add(69);\n            } else if (token.equals(\"Bnaturalminor\")) {\n                result.add(70);\n            } else if (token.equals(\"Csharpnaturalminor\")) {\n                result.add(71);\n            } else if (token.equals(\"Dsharpnaturalminor\")) {\n                result.add(72);\n            } else if (token.equals(\"Esharpnaturalminor\")) {\n                result.add(73);\n            } else if (token.equals(\"Fsharpnaturalminor\")) {\n                result.add(74);\n            } else if (token.equals(\"Gsharpnaturalminor\")) {\n                result.add(75);\n            } else if (token.equals(\"Asharpnaturalminor\")) {\n                result.add(76);\n            } else if (token.equals(\"Bsharpnaturalminor\")) {\n                result.add(77);\n            } else if (token.equals(\"Cflatnaturalminor\")) {\n                result.add(78);\n            } else if (token.equals(\"Dflatnaturalminor\")) {\n                result.add(79);\n            } else if (token.equals(\"Eflatnaturalminor\")) {\n                result.add(80);\n            } else if (token.equals(\"Fflatnaturalminor\")) {\n                result.add(81);\n            }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        String[] arr = string.split(\" \");\n        for (int i = 0; i < arr.length; i++) {\n            int num = Integer.parseInt(arr[i]);\n            result.add(num);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        String[] tokens = string.split(\" \");\n        for (String token : tokens) {\n            if (token.equals(\"(\")) {\n                result.add(0);\n            } else if (token.equals(\")\")) {\n                result.add(1);\n            } else {\n                result.add(Integer.parseInt(token));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        int index = 0;\n        int length = string.length();\n        while (index < length) {\n            char c = string.charAt(index);\n            if (c == '(') {\n                result.add(0);\n                index++;\n            } else if (c == ')') {\n                int count = 1;\n                while (index < length && string.charAt(index) == '(') {\n                    count++;\n                    index++;\n                }\n                result.add(count);\n                index++;\n            } else if (c == '[') {\n                int count = 1;\n                while (index < length && string.charAt(index) == '[') {\n                    count++;\n                    index++;\n                }\n                result.add(count);\n                index++;\n            } else if (c == ']') {\n                int count = 1;\n                while (index < length && string.charAt(index) == ']') {\n                    count++;\n                    index++;\n                }\n                result.add(count);\n                index++;\n            } else if (c == '{') {\n                int count = 1;\n                while (index < length && string.charAt(index) == '{') {\n                    count++;\n                    index++;\n                }\n                result.add(count);\n                index++;\n            } else if (c == '}') {\n                int count = 1;\n                while (index < length && string.charAt(index) == '}') {\n                    count++;\n                    index++;\n                }\n                result.add(count);\n                index++;\n            } else if (c == '#') {\n                int count = 1;\n                while (index < length && string.charAt(index) == '#') {\n                    count++;\n                    index++;\n                }\n                result.add(count);\n                index++;\n            } else if (c == '.') {\n                int count = 1;\n                while (index < length && string.charAt(index) == '.') {\n                    count++;\n                    index++;\n                }\n                result.add(count);\n                index++;\n            } else {\n                index++;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        String[] arr = string.split(\" \");\n        for (int i = 0; i < arr.length; i++) {\n            switch (arr[i]) {\n                case \"C\":\n                    result.add(0);\n                    break;\n                case \"D\":\n                    result.add(1);\n                    break;\n                case \"E\":\n                    result.add(2);\n                    break;\n                case \"F\":\n                    result.add(3);\n                    break;\n                case \"G\":\n                    result.add(4);\n                    break;\n                case \"A\":\n                    result.add(5);\n                    break;\n                case \"B\":\n                    result.add(6);\n                    break;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        int i = 0;\n        while (i < string.length()) {\n            if (string.charAt(i) == '(') {\n                result.add(i);\n                i++;\n                continue;\n            }\n            if (string.charAt(i) == ')') {\n                int j = result.remove(result.size() - 1);\n                while (j > 0 && string.charAt(j) != '(') {\n                    result.add(j);\n                    j--;\n                }\n                if (j == 0) {\n                    result.add(j);\n                    break;\n                }\n                i++;\n                continue;\n            }\n            i++;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        String[] parts = string.split(\" \");\n        for (String part : parts) {\n            if (part.equals(\"C\")) {\n                result.add(1);\n            } else if (part.equals(\"D\")) {\n                result.add(2);\n            } else if (part.equals(\"E\")) {\n                result.add(3);\n            } else if (part.equals(\"F\")) {\n                result.add(4);\n            } else if (part.equals(\"G\")) {\n                result.add(5);\n            } else if (part.equals(\"A\")) {\n                result.add(6);\n            } else if (part.equals(\"B\")) {\n                result.add(7);\n            } else if (part.equals(\"C#\")) {\n                result.add(8);\n            } else if (part.equals(\"D#\")) {\n                result.add(9);\n            } else if (part.equals(\"E#\")) {\n                result.add(10);\n            } else if (part.equals(\"F#\")) {\n                result.add(11);\n            } else if (part.equals(\"G#\")) {\n                result.add(12);\n            } else if (part.equals(\"A#\")) {\n                result.add(13);\n            } else if (part.equals(\"B#\")) {\n                result.add(14);\n            } else if (part.equals(\"Cmaj\")) {\n                result.add(15);\n            } else if (part.equals(\"Dmaj\")) {\n                result.add(16);\n            } else if (part.equals(\"Emaj\")) {\n                result.add(17);\n            } else if (part.equals(\"Fmaj\")) {\n                result.add(18);\n            } else if (part.equals(\"Gmaj\")) {\n                result.add(19);\n            } else if (part.equals(\"Amaj\")) {\n                result.add(20);\n            } else if (part.equals(\"Bmaj\")) {\n                result.add(21);\n            } else if (part.equals(\"Cmin\")) {\n                result.add(22);\n            } else if (part.equals(\"Dmin\")) {\n                result.add(23);\n            } else if (part.equals(\"Emin\")) {\n                result.add(24);\n            } else if (part.equals(\"Fmin\")) {\n                result.add(25);\n            } else if (part.equals(\"Gmin\")) {\n                result.add(26);\n            } else if (part.equals(\"Amin\")) {\n                result.add(27);\n            } else if (part.equals(\"Bmin\")) {\n                result.add(28);\n            } else if (part.equals(\"Cmaj7\")) {\n                result.add(29);\n            } else if (part.equals(\"Dmaj7\")) {\n                result.add(30);\n            } else if (part.equals(\"Emaj7\")) {\n                result.add(31);\n            } else if (part.equals(\"Fmaj7\")) {\n                result.add(32);\n            } else if (part.equals(\"Gmaj7\")) {\n                result.add(33);\n            } else if (part.equals(\"Amaj7\")) {\n                result.add(34);\n            } else if (part.equals(\"Bmaj7\")) {\n                result.add(35);\n            } else if (part.equals(\"Cmin7\")) {\n                result.add(36);\n            } else if (part.equals(\"Dmin7\")) {\n                result.add(37);\n            } else if (part.equals(\"Emin7\")) {\n                result.add(38);\n            } else if (part.equals(\"Fmin7\")) {\n                result.add(39);\n            } else if (part.equals(\"Gmin7\")) {\n                result.add(40);\n            } else if (part.equals(\"Amin7\")) {\n                result.add(41);\n            } else if (part.equals(\"Bmin7\")) {\n                result.add(42);\n            } else if (part.equals(\"Cmaj9\")) {\n                result.add(43);\n            } else if (part.equals(\"Dmaj9\")) {\n                result.add(44);\n            } else if (part.equals(\"Emaj9\")) {\n                result.add(45);\n            } else if (part.equals(\"Fmaj9\")) {\n                result.add(46);\n            } else if (part.equals(\"Gmaj9\")) {\n                result.add(47);\n            } else if (part.equals(\"Amaj9\")) {\n                result.add(48);\n            } else if (part.equals(\"Bmaj9\")) {\n                result.add(49);\n            } else if (part.equals(\"Cmin9\")) {\n                result.add(50);\n            } else if (part.equals(\"Dmin9\")) {\n                result.add(51);\n            } else if (part.equals(\"Emin9\")) {\n                result.add(52);\n            } else if (part.equals(\"Fmin9\")) {\n                result.add(53);\n            } else if (part.equals(\"Gmin9\")) {\n                result.add(54);\n            } else if (part.equals(\"Amin9\")) {\n                result.add(55);\n            } else if (part.equals(\"Bmin9\")) {\n                result.add(56);\n            } else if (part.equals(\"Cmaj11\")) {\n                result.add(57);\n            } else if (part.equals(\"Dmaj11\")) {\n                result.add(58);\n            } else if (part.equals(\"Emaj11\")) {\n                result.add(59);\n            } else if (part.equals(\"Fmaj11\")) {\n                result.add(60);\n            } else if (part.equals(\"Gmaj11\")) {\n                result.add(61);\n            } else if (part.equals(\"Amaj11\")) {\n                result.add(62);\n            } else if (part.equals(\"Bmaj11\")) {\n                result.add(63);\n            } else if (part.equals(\"Cmin11\")) {\n                result.add(64);\n            } else if (part.equals(\"Dmin11\")) {\n                result.add(65);\n            } else if (part.equals(\"Emin11\")) {\n                result.add(66);\n            } else if (part.equals(\"Fmin11\")) {\n                result.add(67);\n            } else if (part.equals(\"Gmin11\")) {\n                result.add(68);\n            } else if (part.equals(\"Amin11\")) {\n                result.add(69);\n            } else if (part.equals(\"Bmin11\")) {\n                result.add(70);\n            } else if (part.equals(\"Cmaj13\")) {\n                result.add(71);\n            } else if (part.equals(\"Dmaj13\")) {\n                result.add(72);\n            } else if (part.equals(\"Emaj13\")) {\n                result.add(73);\n            } else if (part.equals(\"Fmaj13\")) {\n                result.add(74);\n            } else if (part.equals(\"Gmaj13\")) {\n                result.add(75);\n            } else if (part.equals(\"Amaj13\")) {\n                result.add(76);\n            } else if (part.equals(\"Bmaj13\")) {\n                result.add(77);\n            } else if (part.equals(\"Cmin13\")) {\n                result.add(78);\n            } else if (part.equals(\"Dmin13\")) {\n                result.add(79);\n            } else if (part.equals(\"Emin13\")) {\n                result.add(80);\n            } else if (part.equals(\"Fmin13\")) {\n                result.add(81);\n            } else if (part.equals(\"Gmin13\")) {\n                result.add(82);\n            } else if (part.equals(\"Amin13\")) {\n                result.add(83);\n            } else if (part.equals(\"Bmin13\")) {\n                result.add(84);\n            } else if (part.equals(\"Cmaj15\")) {\n                result.add(85);\n            } else if (part.equals(\"Dmaj15\")) {\n                result.add(86);\n            } else if (part.equals(\"Emaj15\")) {\n                result.add(87);\n            } else if (part.equals(\"Fmaj15\")) {\n                result.add(88);\n            } else if (part.equals(\"Gmaj15\")) {\n                result.add(89);\n            } else if (part.equals(\"Amaj15\")) {\n                result.add(90);\n            }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        String[] str = string.split(\" \");\n        for (int i = 0; i < str.length; i++) {\n            if (str[i].equals(\"C\")) {\n                result.add(0);\n            } else if (str[i].equals(\"D\")) {\n                result.add(1);\n            } else if (str[i].equals(\"E\")) {\n                result.add(2);\n            } else if (str[i].equals(\"F\")) {\n                result.add(3);\n            } else if (str[i].equals(\"G\")) {\n                result.add(4);\n            } else if (str[i].equals(\"A\")) {\n                result.add(5);\n            } else if (str[i].equals(\"B\")) {\n                result.add(6);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        String[] tokens = string.split(\" \");\n        for (int i = 0; i < tokens.length; i++) {\n            if (tokens[i].equals(\"C\")) {\n                result.add(0);\n            } else if (tokens[i].equals(\"D\")) {\n                result.add(1);\n            } else if (tokens[i].equals(\"E\")) {\n                result.add(2);\n            } else if (tokens[i].equals(\"F\")) {\n                result.add(3);\n            } else if (tokens[i].equals(\"G\")) {\n                result.add(4);\n            } else if (tokens[i].equals(\"A\")) {\n                result.add(5);\n            } else if (tokens[i].equals(\"B\")) {\n                result.add(6);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        String[] arr = string.split(\" \");\n        for (int i = 0; i < arr.length; i++) {\n            result.add(Integer.parseInt(arr[i]));\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        int i = 0;\n        int j = 0;\n        int count = 0;\n        int flag = 0;\n        int temp = 0;\n        int temp2 = 0;\n        int temp3 = 0;\n        int temp4 = 0;\n        int temp5 = 0;\n        int temp6 = 0;\n        int temp7 = 0;\n        int temp8 = 0;\n        int temp9 = 0;\n        int temp10 = 0;\n        int temp11 = 0;\n        int temp12 = 0;\n        int temp13 = 0;\n        int temp14 = 0;\n        int temp15 = 0;\n        int temp16 = 0;\n        int temp17 = 0;\n        int temp18 = 0;\n        int temp19 = 0;\n        int temp20 = 0;\n        int temp21 = 0;\n        int temp22 = 0;\n        int temp23 = 0;\n        int temp24 = 0;\n        int temp25 = 0;\n        int temp26 = 0;\n        int temp27 = 0;\n        int temp28 = 0;\n        int temp29 = 0;\n        int temp30 = 0;\n        int temp31 = 0;\n        int temp32 = 0;\n        int temp33 = 0;\n        int temp34 = 0;\n        int temp35 = 0;\n        int temp36 = 0;\n        int temp37 = 0;\n        int temp38 = 0;\n        int temp39 = 0;\n        int temp40 = 0;\n        int temp41 = 0;\n        int temp42 = 0;\n        int temp43 = 0;\n        int temp44 = 0;\n        int temp45 = 0;\n        int temp46 = 0;\n        int temp47 = 0;\n        int temp48 = 0;\n        int temp49 = 0;\n        int temp50 = 0;\n        int temp51 = 0;\n        int temp52 = 0;\n        int temp53 = 0;\n        int temp54 = 0;\n        int temp55 = 0;\n        int temp56 = 0;\n        int temp57 = 0;\n        int temp58 = 0;\n        int temp59 = 0;\n        int temp60 = 0;\n        int temp61 = 0;\n        int temp62 = 0;\n        int temp63 = 0;\n        int temp64 = 0;\n        int temp65 = 0;\n        int temp66 = 0;\n        int temp67 = 0;\n        int temp68 = 0;\n        int temp69 = 0;\n        int temp70 = 0;\n        int temp71 = 0;\n        int temp72 = 0;\n        int temp73 = 0;\n        int temp74 = 0;\n        int temp75 = 0;\n        int temp76 = 0;\n        int temp77 = 0;\n        int temp78 = 0;\n        int temp79 = 0;\n        int temp80 = 0;\n        int temp81 = 0;\n        int temp82 = 0;\n        int temp83 = 0;\n        int temp84 = 0;\n        int temp85 = 0;\n        int temp86 = 0;\n        int temp87 = 0;\n        int temp88 = 0;\n        int temp89 = 0;\n        int temp90 = 0;\n        int temp91 = 0;\n        int temp92 = 0;\n        int temp93 = 0;\n        int temp94 = 0;\n        int temp95 = 0;\n        int temp96 = 0;\n        int temp97 = 0;\n        int temp98 = 0;\n        int temp99 = 0;\n        int temp100 = 0;\n        int temp101 = 0;\n        int temp102 = 0;\n        int temp103 = 0;\n        int temp104 = 0;\n        int temp105 = 0;\n        int temp106 = 0;\n        int temp107 = 0;\n        int temp108 = 0;\n        int temp109 = 0;\n        int temp110 = 0;\n        int temp111 = 0;\n        int temp112 = 0;\n        int temp113 = 0;\n        int temp114 = 0;\n        int temp115 = 0;\n        int temp116 = 0;\n        int temp117 = 0;\n        int temp118 = 0;\n        int temp119 = 0;\n        int temp120 = 0;\n        int temp121 = 0;\n        int temp122 = 0;\n        int temp123 = 0;\n        int temp124 = 0;\n        int temp125 = 0;\n        int temp126 = 0;\n        int temp127 = 0;\n        int temp128 = 0;\n        int temp129 = 0;\n        int temp130 = 0;\n        int temp131 = 0;\n        int temp132 = 0;\n        int temp133 = 0;\n        int temp134 = 0;\n        int temp135 = 0;\n        int temp136 = 0;\n        int temp137 = 0;\n        int temp138 = 0;\n        int temp139 = 0;\n        int temp140 = 0;\n        int temp141 = 0;\n        int temp142 = 0;\n        int temp143 = 0;\n        int temp144 = 0;\n        int temp145 = 0;\n        int temp146 = 0;\n        int temp147 = 0;\n        int temp148 = 0;\n        int temp149 = 0;\n        int temp150 = 0;\n        int temp151 = 0;\n        int temp152 = 0;\n        int temp153 = 0;\n        int temp154 = 0;\n        int temp155 = 0;\n        int temp156 = 0;\n        int temp157 = 0;\n        int temp158 = 0;\n        int temp159 = 0;\n        int temp160 = 0;\n        int temp161 = 0;\n        int temp162 = 0;\n        int temp163 = 0;\n        int temp164 = 0;\n        int temp165 = 0;\n        int temp166 = 0;\n        int temp167 = 0;\n        int temp168 = 0;\n        int temp169 = 0;\n        int temp170 = 0;\n        int temp171 = 0;\n        int temp172 = 0;\n        int temp173 = 0;\n        int temp174 = 0;\n        int temp175 = 0;\n        int temp176 = 0;\n        int temp177 = 0;\n        int temp178 = 0;\n        int temp179 = 0;\n        int temp180 = 0;\n        int temp181 = 0;\n        int temp182 = 0;\n        int temp183 = 0;\n        int temp184 = 0;\n        int temp185 = 0;\n        int temp186 = 0;\n        int temp187 = 0;\n        int temp188 = 0;\n        int temp189 = 0;\n        int temp190 = 0;\n        int temp191 = 0;\n        int temp192 = 0;\n        int temp193 = 0;\n        int temp194 = 0;\n        int temp195 = 0;\n        int temp196 = 0;\n        int temp197 = 0;\n        int temp198 = 0;\n        int temp199 = 0;\n        int temp200 = 0;\n        int temp201 = 0;\n        int temp202 = 0;\n        int temp203 = 0;\n        int temp204 ="], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        String[] arr = string.split(\" \");\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i].equals(\"C\")) {\n                result.add(1);\n            } else if (arr[i].equals(\"D\")) {\n                result.add(2);\n            } else if (arr[i].equals(\"E\")) {\n                result.add(3);\n            } else if (arr[i].equals(\"F\")) {\n                result.add(4);\n            } else if (arr[i].equals(\"G\")) {\n                result.add(5);\n            } else if (arr[i].equals(\"A\")) {\n                result.add(6);\n            } else if (arr[i].equals(\"B\")) {\n                result.add(7);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Integer> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0);\n                } else {\n                    result.add(stack.pop());\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == '(') {\n                res.add(i);\n            } else if (c == ')') {\n                int start = res.get(res.size() - 1);\n                int end = i;\n                res.remove(res.size() - 1);\n                res.add(start, end);\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int start = 0;\n        int end = 0;\n        while (end < string.length()) {\n            if (string.substring(end, end + substring.length()).equals(substring)) {\n                count++;\n                end += substring.length();\n            } else {\n                start = end;\n                end++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int index = 0;\n        while (index != -1) {\n            index = string.indexOf(substring, index);\n            if (index != -1) {\n                count++;\n                index++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == substring.charAt(0)) {\n                int j = 1;\n                while (j < substring.length() && i + j < string.length() && string.charAt(i + j) == substring.charAt(j)) {\n                    j++;\n                }\n                count += j;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.howManyTimes(\"abcd\", \"cd\"));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int index = 0;\n        while (index != -1) {\n            index = string.indexOf(substring, index);\n            if (index != -1) {\n                count++;\n                index++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int i = 0;\n        while (i < string.length()) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                count++;\n            }\n            i++;\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int times = 0;\n\n        for (int i = 0; i < string.length(); i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                times++;\n            }\n        }\n\n        return times;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int index = 0;\n        while (index != -1) {\n            index = string.indexOf(substring, index);\n            if (index != -1) {\n                count++;\n                index += substring.length();\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int start = 0;\n        int end = 0;\n        while (end < string.length()) {\n            if (string.substring(end).equals(substring)) {\n                count++;\n                end++;\n            } else {\n                start = end;\n                end++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int index = 0;\n        while (index != -1) {\n            index = string.indexOf(substring, index);\n            if (index != -1) {\n                count++;\n                index += substring.length();\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int times = 0;\n        int index = 0;\n        while (index != -1) {\n            index = string.indexOf(substring, index);\n            if (index != -1) {\n                times++;\n                index += substring.length();\n            }\n        }\n        return times;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int start = 0;\n        int end = 0;\n        while (end < string.length()) {\n            if (string.substring(end).equals(substring)) {\n                count++;\n                end++;\n            } else {\n                while (end < string.length() && !string.substring(end).equals(substring)) {\n                    end++;\n                }\n                start = end;\n                end++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int index = 0;\n        while (index != -1) {\n            index = string.indexOf(substring, index + 1);\n            count++;\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int times = 0;\n        int i = 0;\n        int j = 0;\n        while (i < string.length() && j < substring.length()) {\n            if (string.charAt(i) == substring.charAt(j)) {\n                i++;\n                j++;\n                times++;\n            } else {\n                j++;\n            }\n        }\n        return times;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int start = 0;\n        while (start != -1) {\n            start = string.indexOf(substring, start);\n            if (start != -1) {\n                count++;\n                start += substring.length();\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == substring.charAt(0)) {\n                count++;\n                for (int j = 1; j < substring.length(); j++) {\n                    if (string.charAt(i + j) != substring.charAt(j)) {\n                        break;\n                    }\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int i = 0;\n        int j = 0;\n        while(i < string.length() && j < substring.length()) {\n            if(string.charAt(i) == substring.charAt(j)) {\n                i++;\n                j++;\n                count++;\n            }\n            else {\n                i++;\n                j = 0;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int start = 0;\n        int end = 0;\n        while (end < string.length()) {\n            if (string.substring(end).equals(substring)) {\n                count++;\n                end++;\n            } else {\n                end++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        String string = \"Hello World\";\n        String substring = \"World\";\n        System.out.println(new Solution().howManyTimes(string, substring));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int index = 0;\n        while (index != -1) {\n            index = string.indexOf(substring, index);\n            if (index != -1) {\n                count++;\n                index += substring.length();\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int index = 0;\n        while (index != -1) {\n            index = string.indexOf(substring, index);\n            if (index != -1) {\n                count++;\n                index += substring.length();\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] nums = numbers.split(\",\");\n        Arrays.sort(nums);\n        return String.join(\",\", nums);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] numbersArray = numbers.split(\",\");\n        Arrays.sort(numbersArray);\n        StringBuilder stringBuilder = new StringBuilder();\n        for (String number : numbersArray) {\n            stringBuilder.append(number);\n        }\n        return stringBuilder.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] numbersArray = numbers.split(\",\");\n        Arrays.sort(numbersArray);\n        StringBuilder sb = new StringBuilder();\n        for (String number : numbersArray) {\n            sb.append(number).append(\",\");\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] numbersArray = numbers.split(\" \");\n        String[] sortedNumbers = new String[numbersArray.length];\n        for(int i = 0; i < numbersArray.length; i++) {\n            sortedNumbers[i] = numbersArray[i];\n        }\n        Arrays.sort(sortedNumbers);\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < sortedNumbers.length; i++) {\n            sb.append(sortedNumbers[i]);\n            if(i != sortedNumbers.length - 1) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] arr = numbers.split(\",\");\n        Arrays.sort(arr);\n        return String.join(\",\", arr);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] nums = numbers.split(\",\");\n        Arrays.sort(nums);\n        return String.join(\",\", nums);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] numbersArray = numbers.split(\",\");\n        Arrays.sort(numbersArray);\n        StringBuilder sb = new StringBuilder();\n        for (String number : numbersArray) {\n            sb.append(number).append(\",\");\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] arr = numbers.split(\",\");\n        Arrays.sort(arr);\n        return String.join(\",\", arr);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] nums = numbers.split(\",\");\n        Arrays.sort(nums);\n        return String.join(\",\", nums);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] numbersArray = numbers.split(\",\");\n        int[] numbersArrayInt = new int[numbersArray.length];\n        for (int i = 0; i < numbersArray.length; i++) {\n            numbersArrayInt[i] = Integer.parseInt(numbersArray[i]);\n        }\n        Arrays.sort(numbersArrayInt);\n        StringBuilder stringBuilder = new StringBuilder();\n        for (int i = 0; i < numbersArrayInt.length; i++) {\n            stringBuilder.append(numbersArrayInt[i]).append(\",\");\n        }\n        return stringBuilder.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] arr = numbers.split(\",\");\n        Arrays.sort(arr);\n        return String.join(\",\", arr);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] numbersArray = numbers.split(\",\");\n        Arrays.sort(numbersArray);\n        return String.join(\",\", numbersArray);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] numbersArray = numbers.split(\",\");\n        Arrays.sort(numbersArray);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < numbersArray.length; i++) {\n            sb.append(numbersArray[i]).append(\",\");\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] arr = numbers.split(\",\");\n        Arrays.sort(arr);\n        return String.join(\",\", arr);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] arr = numbers.split(\",\");\n        Arrays.sort(arr);\n        return String.join(\",\", arr);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] nums = numbers.split(\",\");\n        Arrays.sort(nums);\n        return String.join(\",\", nums);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] numbersArray = numbers.split(\",\");\n        Arrays.sort(numbersArray);\n        return String.join(\",\", numbersArray);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        List<Integer> list = new ArrayList<>();\n        for (String num : numbers.split(\" \")) {\n            list.add(Integer.parseInt(num));\n        }\n        Collections.sort(list);\n        StringBuilder sb = new StringBuilder();\n        for (Integer num : list) {\n            sb.append(num).append(\" \");\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] arr = numbers.split(\",\");\n        Arrays.sort(arr);\n        return String.join(\",\", arr);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] numbersArray = numbers.split(\",\");\n        Arrays.sort(numbersArray);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < numbersArray.length; i++) {\n            sb.append(numbersArray[i]);\n            if (i != numbersArray.length - 1) {\n                sb.append(\",\");\n            }\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> result = new ArrayList<>();\n        int len = numbers.size();\n        if (len == 0) return result;\n        int min = Integer.MAX_VALUE;\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < len; i++) {\n            if (numbers.get(i) < min) min = numbers.get(i);\n            if (numbers.get(i) > max) max = numbers.get(i);\n        }\n        double diff = max - min;\n        for (int i = 0; i < len; i++) {\n            double num = numbers.get(i);\n            if (num - min <= diff / 2) {\n                result.add(num);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closest = new ArrayList<>();\n        double min = Double.MAX_VALUE;\n        for (double number : numbers) {\n            if (number < min) {\n                min = number;\n            }\n        }\n        for (double number : numbers) {\n            if (number == min) {\n                closest.add(min);\n            } else {\n                closest.add(number);\n            }\n        }\n        return closest;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> result = new ArrayList<>();\n        Collections.sort(numbers);\n        for (Double number : numbers) {\n            result.add(number);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closest = new ArrayList<Double>();\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (numbers.get(i) == numbers.get(i + 1)) {\n                closest.add(numbers.get(i));\n            }\n        }\n        return closest;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> result = new ArrayList<>();\n        int n = numbers.size();\n        if (n < 3) {\n            return result;\n        }\n        Arrays.sort(numbers);\n        for (int i = 0; i < n - 2; i++) {\n            if (numbers.get(i) == numbers.get(i + 1)) {\n                continue;\n            }\n            double diff = Math.abs(numbers.get(i + 1) - numbers.get(i));\n            for (int j = i + 2; j < n; j++) {\n                if (numbers.get(j) == numbers.get(i)) {\n                    continue;\n                }\n                double temp = Math.abs(numbers.get(j) - numbers.get(i));\n                if (temp < diff) {\n                    diff = temp;\n                }\n            }\n            result.add(diff);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> result = new ArrayList<>();\n        double min = Double.MAX_VALUE;\n        for (Double num : numbers) {\n            if (Math.abs(num - min) < Math.abs(num - min)) {\n                min = num;\n            }\n        }\n        for (Double num : numbers) {\n            if (Math.abs(num - min) == Math.abs(num - min)) {\n                result.add(num);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closest = new ArrayList<Double>();\n        double min = Double.MAX_VALUE;\n        for (Double num : numbers) {\n            if (Math.abs(num - 1.0) < min) {\n                min = Math.abs(num - 1.0);\n            }\n        }\n        for (Double num : numbers) {\n            if (Math.abs(num - 2.0) < min) {\n                min = Math.abs(num - 2.0);\n            }\n        }\n        for (Double num : numbers) {\n            if (Math.abs(num - 1.0) < min) {\n                min = Math.abs(num - 1.0);\n            }\n        }\n        for (Double num : numbers) {\n            if (Math.abs(num - 2.0) < min) {\n                min = Math.abs(num - 2.0);\n            }\n        }\n        for (Double num : numbers) {\n            if (Math.abs(num - 1.0) < min) {\n                min = Math.abs(num - 1.0);\n            }\n        }\n        for (Double num : numbers) {\n            if (Math.abs(num - 2.0) < min) {\n                min = Math.abs(num - 2.0);\n            }\n        }\n        for (Double num : numbers) {\n            if (Math.abs(num - 1.0) < min) {\n                min = Math.abs(num - 1.0);\n            }\n        }\n        for (Double num : numbers) {\n            if (Math.abs(num - 2.0) < min) {\n                min = Math.abs(num - 2.0);\n            }\n        }\n        for (Double num : numbers) {\n            if (Math.abs(num - 1.0) < min) {\n                min = Math.abs(num - 1.0);\n            }\n        }\n        for (Double num : numbers) {\n            if (Math.abs(num - 2.0) < min) {\n                min = Math.abs(num - 2.0);\n            }\n        }\n        for (Double num : numbers) {\n            if (Math.abs(num - 1.0) < min) {\n                min = Math.abs(num - 1.0);\n            }\n        }\n        for (Double num : numbers) {\n            if (Math.abs(num - 2.0) < min) {\n                min = Math.abs(num - 2.0);\n            }\n        }\n        for (Double num : numbers) {\n            if (Math.abs(num - 1.0) < min) {\n                min = Math.abs(num - 1.0);\n            }\n        }\n        for (Double num : numbers) {\n            if (Math.abs(num - 2.0) < min) {\n                min = Math.abs(num - 2.0);\n            }\n        }\n        for (Double num : numbers) {\n            if (Math.abs(num - 1.0) < min) {\n                min = Math.abs(num - 1.0);\n            }\n        }\n        for (Double num : numbers) {\n            if (Math.abs(num - 2.0) < min) {\n                min = Math.abs(num - 2.0);\n            }\n        }\n        for (Double num : numbers) {\n            if (Math.abs(num - 1.0) < min) {\n                min = Math.abs(num - 1.0);\n            }\n        }\n        for (Double num : numbers) {\n            if (Math.abs(num - 2.0) < min) {\n                min = Math.abs(num - 2.0);\n            }\n        }\n        for (Double num : numbers) {\n            if (Math.abs(num - 1.0) < min) {\n                min = Math.abs(num - 1.0);\n            }\n        }\n        for (Double num : numbers) {\n            if (Math.abs(num - 2.0) < min) {\n                min = Math.abs(num - 2.0);\n            }\n        }\n        for (Double num : numbers) {\n            if (Math.abs(num - 1.0) < min) {\n                min = Math.abs(num - 1.0);\n            }\n        }\n        for (Double num : numbers) {\n            if (Math.abs(num - 2.0) < min) {\n                min = Math.abs(num - 2.0);\n            }\n        }\n        for (Double num : numbers) {\n            if (Math.abs(num - 1.0) < min) {\n                min = Math.abs(num - 1.0);\n            }\n        }\n        for (Double num : numbers) {\n            if (Math.abs(num - 2.0) < min) {\n                min = Math.abs(num - 2.0);\n            }\n        }\n        for (Double num : numbers) {\n            if (Math.abs(num - 1.0) < min) {\n                min = Math.abs(num - 1.0);\n            }\n        }\n        for (Double num : numbers) {\n            if (Math.abs(num - 2.0) < min) {\n                min = Math.abs(num - 2.0);\n            }\n        }\n        for (Double num : numbers) {\n            if (Math.abs(num - 1.0) < min) {\n                min = Math.abs(num - 1.0);\n            }\n        }\n        for (Double num : numbers) {\n            if (Math.abs(num - 2.0) < min) {\n                min = Math.abs(num - 2.0);\n            }\n        }\n        for (Double num : numbers) {\n            if (Math.abs(num - 1.0) < min) {\n                min = Math.abs(num - 1.0);\n            }\n        }\n        for (Double num : numbers) {\n            if (Math.abs(num - 2.0) < min) {\n                min = Math.abs(num - 2.0);\n            }\n        }\n        for (Double num : numbers) {\n            if (Math.abs(num - 1.0) < min) {\n                min = Math.abs(num - 1.0);\n            }\n        }\n        for (Double num : numbers) {\n            if (Math.abs(num - 2.0) < min) {\n                min = Math.abs(num - 2.0);\n            }\n        }\n        for (Double num : numbers) {\n            if (Math.abs(num - 1.0) < min) {\n                min = Math.abs(num - 1.0);\n            }\n        }\n        for (Double num : numbers) {\n            if (Math.abs(num - 2.0) < min) {\n                min = Math.abs(num - 2.0);\n            }\n        }\n        for (Double num : numbers) {\n            if (Math.abs(num - 1.0) < min) {\n                min = Math.abs(num - 1.0);\n            }\n        }\n        for (Double num : numbers) {\n            if (Math.abs(num - 2.0) < min) {\n                min = Math.abs(num - 2.0);\n            }\n        }\n        for (Double num : numbers) {\n            if (Math.abs(num - 1.0) < min) {\n                min = Math.abs(num - 1.0);\n            }\n        }\n        for (Double num : numbers) {\n            if (Math.abs(num - 2.0) < min) {\n                min = Math.abs(num - 2.0);\n            }\n        }\n        for (Double num : numbers) {\n            if (Math.abs(num - 1.0) < min) {\n                min = Math.abs(num - 1.0);\n            }\n        }\n        for (Double num : numbers) {\n            if (Math.abs(num - 2.0) < min) {\n                min = Math.abs(num - 2.0);\n            }\n        }\n        for (Double num : numbers) {\n            if (Math.abs(num - 1.0) < min) {\n                min = Math.abs(num - 1.0);\n            }\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> result = new ArrayList<>();\n        if (numbers.size() == 0) {\n            return result;\n        }\n        double min = numbers.get(0);\n        double max = numbers.get(0);\n        for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i) < min) {\n                min = numbers.get(i);\n            }\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n        }\n        double diff = max - min;\n        for (int i = 0; i < numbers.size(); i++) {\n            double distance = Math.abs(numbers.get(i) - min);\n            if (distance <= diff) {\n                result.add(numbers.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> res = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = 0; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < Math.abs(numbers.get(i) - numbers.get(j))) {\n                    res.add(numbers.get(i));\n                    res.add(numbers.get(j));\n                }\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closest = new ArrayList<>();\n        for (Double number : numbers) {\n            double min = Double.MAX_VALUE;\n            for (Double closestNumber : closest) {\n                if (Math.abs(number - closestNumber) < Math.abs(number - min)) {\n                    min = number;\n                }\n            }\n            closest.add(min);\n        }\n        return closest;\n    }\n\n    public List<String> wordBreak(String s, List<String> wordDict) {\n        List<String> result = new ArrayList<>();\n        if (s == null || s.length() == 0 || wordDict == null || wordDict.size() == 0) {\n            return result;\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < wordDict.size(); i++) {\n            map.put(wordDict.get(i), i);\n        }\n        List<String> words = new ArrayList<>();\n        words.add(s);\n        while (words.size() > 0) {\n            String word = words.remove(0);\n            if (map.containsKey(word)) {\n                words.add(word);\n            }\n            for (int i = 0; i < word.length(); i++) {\n                String newWord = word.substring(0, i) + \" \" + word.substring(i + 1);\n                if (map.containsKey(newWord)) {\n                    words.add(newWord);\n                }\n            }\n        }\n        for (int i = 0; i < wordDict.size(); i++) {\n            String word = wordDict.get(i);\n            if (map.containsKey(word)) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> result = new ArrayList<>();\n        for (Double num : numbers) {\n            result.add(num);\n        }\n        Collections.sort(result);\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> result = new ArrayList<Double>();\n        for (Double num : numbers) {\n            int index = Arrays.binarySearch(numbers.toArray(), num);\n            if (index < 0) {\n                index = -index - 1;\n            }\n            result.add(num);\n            result.add(numbers.get(index));\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> result = new ArrayList<Double>();\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (numbers.get(i + 1) - numbers.get(i) < 0.000001) {\n                result.add(numbers.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> result = new ArrayList<>();\n        double min = Double.MAX_VALUE;\n        for (Double num : numbers) {\n            if (Math.abs(num - min) < Math.abs(min - num)) {\n                min = num;\n            }\n        }\n        for (Double num : numbers) {\n            if (Math.abs(num - min) == Math.abs(min - num)) {\n                result.add(num);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> result = new ArrayList<>();\n        double min = Double.MAX_VALUE;\n        for (int i = 0; i < numbers.size(); i++) {\n            double diff = Math.abs(numbers.get(i) - min);\n            if (diff < min) {\n                min = numbers.get(i);\n                result.add(min);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closestElements = new ArrayList<>();\n        double min = Double.MAX_VALUE;\n        for (Double number : numbers) {\n            if (number < min) {\n                min = number;\n            }\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closestElements = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(jimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closest = new ArrayList<>();\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (numbers.get(i) == numbers.get(i + 1)) {\n                closest.add(numbers.get(i));\n            }\n        }\n        return closest;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> result = new ArrayList<>();\n        int n = numbers.size();\n        double min = Double.MAX_VALUE;\n        double max = Double.MIN_VALUE;\n        for (int i = 0; i < n; i++) {\n            if (numbers.get(i) < min) {\n                min = numbers.get(i);\n            }\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (Math.abs(numbers.get(i) - min) < Math.abs(numbers.get(i) - max)) {\n                result.add(numbers.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closest = new ArrayList<>();\n        Collections.sort(numbers);\n        for (Double num : numbers) {\n            if (closest.size() == 0 || Math.abs(num - closest.get(0)) > Math.abs(num - closest.get(1))) {\n                closest.add(num);\n            }\n        }\n        return closest;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        List<Double> result = new ArrayList<Double>();\n        for (Double number : numbers) {\n            result.add(number / 10.0);\n        }\n        return result;\n    }\n\n    public String longestVowel(String s) {\n        String result = \"\";\n        int max = 0;\n        int maxIndex = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                if (s.charAt(i) == 'a') {\n                    max = 1;\n                } else if (s.charAt(i) == 'e') {\n                    max = 2;\n                } else if (s.charAt(i) == 'i') {\n                    max = 3;\n                } else if (s.charAt(i) == 'o') {\n                    max = 4;\n                } else if (s.charAt(i) == 'u') {\n                    max = 5;\n                }\n                if (max > maxIndex) {\n                    maxIndex = max;\n                    result = s.substring(i - maxIndex + 1, i + 1);\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        List<Double> result = new ArrayList<>();\n        for (Double number : numbers) {\n            result.add(number / 100);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        double max = Collections.max(numbers);\n        double min = Collections.min(numbers);\n        double scale = max - min;\n        for (int i = 0; i < numbers.size(); i++) {\n            numbers.set(i, numbers.get(i) * scale + min);\n        }\n        return numbers;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        List<Double> result = new ArrayList<>();\n        for (Double num : numbers) {\n            result.add(num / 100);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        List<Double> result = new ArrayList<>();\n        for (Double number : numbers) {\n            result.add(number / 100.0);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Double> numbers = new ArrayList<>();\n        numbers.add(1.0);\n        numbers.add(2.0);\n        numbers.add(3.0);\n        numbers.add(4.0);\n        numbers.add(5.0);\n        numbers.add(6.0);\n        numbers.add(7.0);\n        numbers.add(8.0);\n        numbers.add(9.0);\n        numbers.add(10.0);\n\n        Solution solution = new Solution();\n        List<Double> rescaledNumbers = solution.rescaleToUnit(numbers);\n\n        for (Double number : rescaledNumbers) {\n            System.out.println(number);\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        double max = Collections.max(numbers);\n        double min = Collections.min(numbers);\n        double scale = max - min;\n        for (int i = 0; i < numbers.size(); i++) {\n            numbers.set(i, numbers.get(i) * scale + min);\n        }\n        return numbers;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        double max = Collections.max(numbers);\n        double min = Collections.min(numbers);\n        double scale = max - min;\n        for (int i = 0; i < numbers.size(); i++) {\n            numbers.set(i, numbers.get(i) * scale + min);\n        }\n        return numbers;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        double max = Collections.max(numbers);\n        double min = Collections.min(numbers);\n        double scale = max - min;\n        for (int i = 0; i < numbers.size(); i++) {\n            numbers.set(i, numbers.get(i) * scale / 100);\n        }\n        return numbers;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        double max = Double.MIN_VALUE;\n        for (double num : numbers) {\n            if (num > max) {\n                max = num;\n            }\n        }\n        double min = Double.MAX_VALUE;\n        for (double num : numbers) {\n            if (num < min) {\n                min = num;\n            }\n        }\n        double unit = max - min;\n        for (double num : numbers) {\n            num = (num - min) / unit;\n        }\n        return numbers;\n    }\n\n    public int maxProfit(int[] prices) {\n        int n = prices.length;\n        int[] buy = new int[n];\n        int[] sell = new int[n];\n        for (int i = 0; i < n; i++) {\n            buy[i] = 0;\n            sell[i] = 0;\n        }\n        for (int i = 0; i < n; i++) {\n            buy[i] = Math.max(buy[i], prices[i]);\n            sell[i] = Math.max(sell[i], prices[i] - buy[i]);\n        }\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            max = Math.max(max, sell[i] - buy[i]);\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        double sum = 0;\n        for (Double number : numbers) {\n            sum += number;\n        }\n        double max = Math.max(numbers);\n        double min = Math.min(numbers);\n        double scale = 1 / (max - min);\n        for (Double number : numbers) {\n            number *= scale;\n        }\n        return numbers;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        List<Double> result = new ArrayList<Double>();\n        double max = Collections.max(numbers);\n        double min = Collections.min(numbers);\n        for (double number : numbers) {\n            result.add((number - min) / (max - min));\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        double max = Collections.max(numbers);\n        double min = Collections.min(numbers);\n        double range = max - min;\n        for (int i = 0; i < numbers.size(); i++) {\n            numbers.set(i, numbers.get(i) - min);\n            numbers.set(i, numbers.get(i) / range);\n        }\n        return numbers;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        double range = max - min;\n        double[] rescaled = new double[numbers.size()];\n        for (int i = 0; i < numbers.size(); i++) {\n            rescaled[i] = (numbers.get(i) - min) / range;\n        }\n        return Arrays.asList(rescaled);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        List<Double> result = new ArrayList<>();\n        Stack<Double> stack = new Stack<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i) == 0) {\n                continue;\n            }\n            if (numbers.get(i) == 1) {\n                stack.push(numbers.get(i));\n                continue;\n            }\n            if (numbers.get(i) == 2) {\n                double value = stack.pop();\n                double value2 = stack.pop();\n                result.add(value / value2);\n                continue;\n            }\n        }\n        return result;\n    }\n\n    public TreeNode buildTree(int[] preorder, int[] inorder) {\n        if (preorder == null || preorder.length == 0) {\n            return null;\n        }\n        if (inorder == null || inorder.length == 0) {\n            return null;\n        }\n        TreeNode root = new TreeNode(preorder[0]);\n        int index = 0;\n        for (int i = 0; i < inorder.length; i++) {\n            if (inorder[i] == preorder[0]) {\n                index = i;\n                break;\n            }\n        }\n        root.left = buildTree(preorder, Arrays.copyOfRange(preorder, 1, index + 1));\n        root.right = buildTree(preorder, Arrays.copyOfRange(preorder, index + 1, preorder.length));\n        return root;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        List<Double> result = new ArrayList<Double>();\n        for (Double number : numbers) {\n            result.add(number / 100.0);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Double> numbers = Arrays.asList(100.0, 100.0, 100.0, 100.0, 100.0);\n        Solution solution = new Solution();\n        List<Double> result = solution.rescaleToUnit(numbers);\n        for (Double number : result) {\n            System.out.println(number);\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        List<Double> result = new ArrayList<>();\n        for (Double number : numbers) {\n            result.add(number / 100);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        List<Double> numbers = new ArrayList<>();\n        for (int i = 0; i < 5; i++) {\n            numbers.add(scanner.nextDouble());\n        }\n        List<Double> result = rescaleToUnit(numbers);\n        for (Double number : result) {\n            System.out.println(number);\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        double max = Collections.max(numbers);\n        double min = Collections.min(numbers);\n        double range = max - min;\n        for (int i = 0; i < numbers.size(); i++) {\n            numbers.set(i, numbers.get(i) - min);\n            numbers.set(i, numbers.get(i) / range);\n        }\n        return numbers;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        double max = Collections.max(numbers);\n        double min = Collections.min(numbers);\n        double scale = max - min;\n        for (int i = 0; i < numbers.size(); i++) {\n            numbers.set(i, numbers.get(i) * scale / 100);\n        }\n        return numbers;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        double max = Collections.max(numbers);\n        double min = Collections.min(numbers);\n        double range = max - min;\n        double scale = 1.0 / range;\n        List<Double> result = new ArrayList<Double>();\n        for (double number : numbers) {\n            result.add(number * scale);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        double max = Collections.max(numbers);\n        double min = Collections.min(numbers);\n        double scale = max - min;\n        for (int i = 0; i < numbers.size(); i++) {\n            numbers.set(i, numbers.get(i) * scale / 100);\n        }\n        return numbers;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value % 7 == 0) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Object> values = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n        List<Integer> result = solution.filterIntegers(values);\n        for (Integer integer : result) {\n            System.out.println(integer);\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value % 7 != 0) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                Integer i = (Integer) value;\n                if (i % 2 == 0) {\n                    result.add(i);\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (int i = 0; i < string.length(); i++) {\n            len++;\n        }\n        return len;\n    }\n\n    public static void main(String[] args) {\n        String str = \"The code is a string\";\n        Solution s = new Solution();\n        System.out.println(s.strlen(str));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (int i = 0; i < string.length(); i++) {\n            len++;\n        }\n        return len;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (int i = 0; i < string.length(); i++) {\n            len++;\n        }\n        return len;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == ' ') {\n                len++;\n            }\n        }\n        return len;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == ' ') {\n                len++;\n            }\n        }\n        return len;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (int i = 0; i < string.length(); i++) {\n            len++;\n        }\n        return len;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == ' ') {\n                len++;\n            }\n        }\n        return len;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (int i = 0; i < string.length(); i++) {\n            len++;\n        }\n        return len;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == ' ') {\n                len++;\n            }\n        }\n        return len;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == 'I') {\n                len++;\n            } else if (string.charAt(i) == 'V') {\n                len++;\n            } else if (string.charAt(i) == 'X') {\n                len++;\n            } else if (string.charAt(i) == 'L') {\n                len++;\n            } else if (string.charAt(i) == 'C') {\n                len++;\n            } else if (string.charAt(i) == 'D') {\n                len++;\n            } else if (string.charAt(i) == 'M') {\n                len++;\n            }\n        }\n        return len;\n    }\n\n    public String romanToInt(String s) {\n        int len = strlen(s);\n        String[] roman = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String result = \"\";\n        for (int i = 0; i < len; i++) {\n            for (int j = 0; j < roman.length; j++) {\n                if (s.charAt(i) == roman[j].charAt(0)) {\n                    result += roman[j];\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (int i = 0; i < string.length(); i++) {\n            len++;\n        }\n        return len;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (char c : string.toCharArray()) {\n            if (c == ' ') {\n                len++;\n            }\n        }\n        return len;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (int i = 0; i < string.length(); i++) {\n            len++;\n        }\n        return len;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == ' ') {\n                len++;\n            }\n        }\n        return len;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (int i = 0; i < string.length(); i++) {\n            len = Math.max(len, string.charAt(i) - 'a' + 1);\n        }\n        return len;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int count = 0;\n        for(int i = 0; i < string.length(); i++) {\n            count++;\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (int i = 0; i < string.length(); i++) {\n            len++;\n        }\n        return len;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (int i = 0; i < string.length(); i++) {\n            len += string.charAt(i);\n        }\n        return len;\n    }\n    public int atoi(String str) {\n        int len = strlen(str);\n        int ans = 0;\n        for (int i = 0; i < len; i++) {\n            ans = ans * 10 + str.charAt(i) - '0';\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == ' ') {\n                len++;\n            }\n        }\n        return len;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (int i = 0; i < string.length(); i++) {\n            len++;\n        }\n        return len;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int max = 1;\n        int min = 1;\n        int mid;\n        int sum = 0;\n        int i = 2;\n        while(i <= n) {\n            mid = (max + min) / 2;\n            sum = 0;\n            for(int j = 1; j <= mid; j++) {\n                sum += j;\n            }\n            if(sum > n) {\n                max = mid;\n            }\n            else {\n                min = mid;\n            }\n            i++;\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int max = 1;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                max = i;\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int max = 0;\n        int min = 0;\n        int sum = 0;\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            sum = 0;\n            for (int j = 1; j <= i; j++) {\n                sum += j;\n            }\n            if (sum % 2 == 0) {\n                count++;\n            }\n            if (sum > max) {\n                max = sum;\n            }\n            if (sum < min) {\n                min = sum;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int max = 1;\n        int min = 1;\n        int sum = 0;\n        for(int i = 2; i <= n; i++) {\n            sum = 0;\n            for(int j = 1; j <= i; j++) {\n                sum += j;\n            }\n            if(sum > max) {\n                max = sum;\n            }\n            if(sum < min) {\n                min = sum;\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int max = 1;\n        int min = 1;\n        int sum = 1;\n        while (sum <= n) {\n            if (sum % 2 == 0) {\n                max = Math.max(max, sum);\n            }\n            if (sum % 2 != 0) {\n                min = Math.min(min, sum);\n            }\n            sum += 2;\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int max = 1;\n        int min = 1;\n        int mid;\n        while(n != 0) {\n            mid = (max + min) / 2;\n            if(n % mid == 0) {\n                max = mid;\n            } else {\n                min = mid;\n            }\n            n = n / mid;\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int max = 1;\n        int min = 2;\n        int mid;\n        while(n > 1) {\n            mid = (max + min) / 2;\n            if(n % mid == 0) {\n                max = mid;\n            } else {\n                min = mid;\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int max = 1;\n        int min = 1;\n        int sum = 1;\n        int count = 1;\n        while(sum <= n){\n            sum += count;\n            count++;\n            if(sum > n){\n                break;\n            }\n            if(sum % 2 == 0){\n                max = Math.max(max, sum);\n            }\n            if(sum % 2 != 0){\n                min = Math.min(min, sum);\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int[] dp = new int[n+1];\n        dp[0] = 1;\n        for(int i = 1; i <= n; i++) {\n            for(int j = 1; j <= n; j++) {\n                if(i % j == 0) {\n                    dp[i] = Math.max(dp[i], dp[j]);\n                }\n            }\n        }\n        return dp[n];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int max = 1;\n        int min = 1;\n        int sum = 0;\n        while(n > 0) {\n            sum += n % 10;\n            max = Math.max(max, n / 10);\n            min = Math.min(min, n / 10);\n            n /= 10;\n        }\n        return sum == 0 ? max : min;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int max = 1;\n        int min = 1;\n        int sum = 1;\n        while (sum <= n) {\n            if (sum % 2 == 0) {\n                max = Math.max(max, sum);\n            } else {\n                min = Math.min(min, sum);\n            }\n            sum += 2;\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int[] arr = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr[i] = i;\n        }\n        Arrays.sort(arr);\n        int ans = arr[n-1];\n        for(int i = n-2; i >= 0; i--) {\n            if(arr[i] % ans == 0) {\n                ans = arr[i];\n            }\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int max = 0;\n        int min = n;\n        int mid;\n        while(min < max) {\n            mid = (min + max) / 2;\n            if(mid % 2 == 0) {\n                max = mid;\n            } else {\n                min = mid + 1;\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int max = 1;\n        int min = 1;\n        int mid;\n        while (n > 1) {\n            mid = (max + min) / 2;\n            if (n % mid == 0) {\n                max = mid;\n            } else {\n                min = mid;\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = i;\n        }\n        Arrays.sort(arr);\n        int ans = arr[n - 1];\n        for (int i = n - 2; i >= 0; i--) {\n            if (arr[i] % arr[i + 1] == 0) {\n                ans = Math.max(ans, arr[i]);\n            }\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int max = 0;\n        int min = 1000000000;\n        int mid;\n        while(n>0) {\n            mid = n/10;\n            if(mid>max) {\n                max = mid;\n            }\n            if(mid<min) {\n                min = mid;\n            }\n            n = mid;\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int max = 1;\n        int min = 1;\n        int mid;\n        while(n != 1) {\n            mid = (max + min) / 2;\n            if(mid * mid == n) {\n                max = mid;\n            } else if(mid * mid > n) {\n                min = mid;\n            } else {\n                n = mid;\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int max = 1;\n        int min = 1;\n        int sum = 1;\n        int count = 1;\n        int temp = n;\n        while(temp != 1) {\n            if(temp % 2 == 0) {\n                sum += temp;\n                count += 1;\n            }\n            else {\n                sum -= temp;\n                count -= 1;\n            }\n            if(sum > max) {\n                max = sum;\n            }\n            if(sum < min) {\n                min = sum;\n            }\n            temp = sum;\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int max = 1;\n        int min = 1;\n        int sum = 1;\n        int count = 1;\n        while(sum < n){\n            sum = sum + count;\n            count++;\n            if(sum > n){\n                break;\n            }\n            if(sum < n){\n                max = Math.max(max, count);\n                min = Math.min(min, count);\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int ans = 1;\n        int i = 2;\n        while(i*i <= n) {\n            if(n%i == 0) {\n                ans = Math.max(ans, i);\n                n /= i;\n            }\n            i++;\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        int i = 1;\n        while (n > 1) {\n            if (n % i == 0) {\n                result.add(i);\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        if (n > 1) {\n            result.add(n);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int i = 1;\n        while(n != 1) {\n            if(n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n            else {\n                i++;\n            }\n        }\n        return factors;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> result = new ArrayList<>();\n        if (n == 0) return result;\n        int[] nums = new int[n];\n        for (int i = 0; i < n; i++) {\n            nums[i] = i + 1;\n        }\n        Arrays.sort(nums);\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if (nums[i] + nums[j] + nums[k] == 0) {\n                        result.add(nums[i]);\n                        result.add(nums[j]);\n                        result.add(nums[k]);\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<Integer>();\n        int i = 1;\n        while (n % i == 0) {\n            factors.add(i);\n            n /= i;\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> fact = new ArrayList<>();\n        int i = 2;\n        while (n > 1) {\n            if (n % i == 0) {\n                fact.add(i);\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return fact;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> result = new ArrayList<>();\n        int i = 2;\n        while (n > 1) {\n            if (n % i == 0) {\n                result.add(i);\n                n /= i;\n            }\n            else {\n                i++;\n            }\n        }\n        if (n > 1) {\n            result.add(n);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> fact = new ArrayList<Integer>();\n        int i = 2;\n        while (n > 1) {\n            if (n % i == 0) {\n                fact.add(i);\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return fact;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        int i = 2;\n        while (i <= n) {\n            while (n % i == 0) {\n                result.add(i);\n                n /= i;\n            }\n            i++;\n        }\n        if (n > 1) {\n            result.add(n);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> fact = new ArrayList<>();\n        if (n == 1) {\n            return fact;\n        }\n        for (int i = 1; i <= n; i++) {\n            List<Integer> subFact = factorize(n - i);\n            for (int j = 0; j < subFact.size(); j++) {\n                fact.add(i * subFact.get(j));\n            }\n        }\n        return fact;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> result = new ArrayList<>();\n        if (n == 0) {\n            return result;\n        }\n        int[] factors = new int[n];\n        int i = 0;\n        while (n != 1) {\n            if (n % 2 == 0) {\n                n /= 2;\n                factors[i] = 2;\n            } else {\n                n = (n - 1) / 2;\n                factors[i] = 2;\n            }\n            i++;\n        }\n        for (int j = 0; j < i; j++) {\n            result.add(factors[j]);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int i = 2;\n        while (n > 1) {\n            if (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n\n    public boolean isSubsequence(String s, String t) {\n        if (s == null || t == null) {\n            return false;\n        }\n\n        List<Integer> factors = factorize(s.length());\n        int i = 0;\n        int j = 0;\n        while (i < factors.size() && j < t.length()) {\n            if (factors.get(i) == t.charAt(j)) {\n                i++;\n                j++;\n            } else {\n                i++;\n            }\n        }\n        return i == factors.size();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        \n        int i = 2;\n        while (n > 1) {\n            if (n % i == 0) {\n                fact.add(i);\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return fact;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        int[] factors = new int[n];\n        int i = 0;\n        while (n != 1) {\n            if (n % 2 == 0) {\n                n /= 2;\n                factors[i++] = 2;\n            } else {\n                n = n - 1;\n                factors[i++] = 1;\n            }\n        }\n        for (int j = 0; j < i; j++) {\n            result.add(factors[j]);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        if (n == 0) {\n            return factors;\n        }\n        int i = 2;\n        while (n % i == 0) {\n            factors.add(i);\n            n /= i;\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<Integer>();\n        while (n != 1) {\n            if (n % 2 == 0) {\n                n /= 2;\n                factors.add(2);\n            } else {\n                n = n / 2;\n                factors.add(1);\n            }\n        }\n        return factors;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        \n        int i = 2;\n        while (n > 1) {\n            if (n % i == 0) {\n                fact.add(i);\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return fact;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> result = new ArrayList<>();\n        if (n == 0) {\n            return result;\n        }\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                result.add(i);\n                n /= i;\n            }\n            i++;\n        }\n        if (n > 1) {\n            result.add(n);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int i = 2;\n        while(n > 1) {\n            if(n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n            else {\n                i++;\n            }\n        }\n        if(n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> result = new ArrayList<>();\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = i + 1;\n        }\n        int i = 0;\n        while (n != 1) {\n            if (n % arr[i] == 0) {\n                n /= arr[i];\n                result.add(arr[i]);\n            }\n            i++;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<Integer>();\n        for(int i = 1; i <= n; i++) {\n            if(n % i == 0) {\n                factors.add(i);\n                factors.add(n/i);\n            }\n        }\n        return factors;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        if (numbers == null || numbers.size() == 0) {\n            return new ArrayList<>();\n        }\n        List<Integer> result = new ArrayList<>();\n        int i = 0;\n        for (int j = 0; j < numbers.size(); j++) {\n            if (numbers.get(j) != numbers.get(i)) {\n                result.add(numbers.get(i));\n                i++;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        if (numbers.size() == 0) {\n            return numbers;\n        }\n        List<Integer> result = new ArrayList<>();\n        result.add(numbers.get(0));\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) == numbers.get(i - 1)) {\n                continue;\n            }\n            result.add(numbers.get(i));\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        if (numbers.size() == 0) {\n            return numbers;\n        }\n        List<Integer> result = new ArrayList<>();\n        result.add(numbers.get(0));\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) == numbers.get(i - 1)) {\n                continue;\n            }\n            result.add(numbers.get(i));\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        if (numbers == null || numbers.size() == 0) {\n            return new ArrayList<>();\n        }\n        List<Integer> result = new ArrayList<>();\n        result.add(numbers.get(0));\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) == numbers.get(i - 1)) {\n                continue;\n            }\n            result.add(numbers.get(i));\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        if (numbers.size() == 0) {\n            return numbers;\n        }\n        List<Integer> result = new ArrayList<>();\n        result.add(numbers.get(0));\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) != numbers.get(i - 1)) {\n                result.add(numbers.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        if (numbers.size() == 0) {\n            return numbers;\n        }\n        int i = 1;\n        for (int j = 0; j < numbers.size(); j++) {\n            if (numbers.get(j) != numbers.get(j - 1)) {\n                numbers.add(i, numbers.get(j));\n                i++;\n            }\n        }\n        return numbers.subList(0, i);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        if(numbers.size() == 0) return new ArrayList<>();\n        List<Integer> result = new ArrayList<>();\n        result.add(numbers.get(0));\n        for(int i = 1; i < numbers.size(); i++) {\n            if(numbers.get(i) == numbers.get(i-1)) continue;\n            result.add(numbers.get(i));\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n        for (int num : numbers) {\n            if (!set.contains(num)) {\n                set.add(num);\n                result.add(num);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n        for(int i = 0; i < numbers.size(); i++) {\n            if(!set.contains(numbers.get(i))) {\n                result.add(numbers.get(i));\n                set.add(numbers.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        Map<Integer, Integer> map = new HashMap<>();\n        List<Integer> result = new ArrayList<>();\n        for (int num : numbers) {\n            map.put(num, map.getOrDefault(num, 0) + 1);\n        }\n        for (int num : numbers) {\n            if (map.containsKey(num)) {\n                map.put(num, map.get(num) - 1);\n            }\n            if (map.containsKey(num)) {\n                result.add(num);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        if (numbers == null || numbers.size() == 0) {\n            return new ArrayList<>();\n        }\n        List<Integer> result = new ArrayList<>();\n        result.add(numbers.get(0));\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) != numbers.get(i - 1)) {\n                result.add(numbers.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        Set<Integer> set = new HashSet<>();\n        \n            if (set.contains(numbers.get(0))) {\n                set.remove(numbers.get(0));\n                numbers.remove(0);\n            }\n            for (int i = 1; i < numbers.size(); i++) {\n                if (set.contains(numbers.get(i))) {\n                    set.remove(numbers.get(i));\n                    numbers.remove(i);\n                }\n            }\n            return numbers;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n        for (Integer number : numbers) {\n            if (map.containsKey(number)) {\n                map.put(number, map.get(number) + 1);\n            } else {\n                map.put(number, 1);\n            }\n        }\n        for (Integer number : map.keySet()) {\n            if (map.get(number) == 1) {\n                result.add(number);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        if (numbers.size() == 0) {\n            return numbers;\n        }\n        int i = 0;\n        for (int j = 1; j < numbers.size(); j++) {\n            if (numbers.get(i) != numbers.get(j)) {\n                numbers.add(numbers.get(j), i);\n                i++;\n            }\n        }\n        return numbers.subList(0, i);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (result.size() == 0 || result.get(result.size() - 1) != numbers.get(i)) {\n                result.add(numbers.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        if (numbers.size() == 0) return numbers;\n        Set<Integer> set = new HashSet<>();\n        set.add(numbers.get(0));\n        for (int i = 1; i < numbers.size(); i++) {\n            if (set.contains(numbers.get(i))) {\n                set.remove(numbers.get(i));\n            } else {\n                set.add(numbers.get(i));\n            }\n        }\n        return set.stream().map(x -> x).collect(Collectors.toList());\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        Set<Integer> set = new HashSet<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (!set.contains(numbers.get(i))) {\n                set.add(numbers.get(i));\n            }\n        }\n        return set.stream().mapToInt(i -> i).boxed().collect(Collectors.toList());\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        if (numbers == null || numbers.size() == 0) {\n            return new ArrayList<>();\n        }\n        List<Integer> result = new ArrayList<>();\n        result.add(numbers.get(0));\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) != numbers.get(i - 1)) {\n                result.add(numbers.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        Set<Integer> s = new HashSet<>();\n        numbers.forEach(n -> s.add(n));\n        return s.stream().collect(Collectors.toList());\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        if (numbers.size() == 0) {\n            return new ArrayList<>();\n        }\n        List<Integer> result = new ArrayList<>();\n        result.add(numbers.get(0));\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) != numbers.get(i - 1)) {\n                result.add(numbers.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] arr = string.toCharArray();\n        for (int i = 0; i < arr.length; i++) {\n            if (Character.isUpperCase(arr[i])) {\n                arr[i] = Character.toLowerCase(arr[i]);\n            } else {\n                arr[i] = Character.toUpperCase(arr[i]);\n            }\n        }\n        return new String(arr);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for(int i = 0; i < chars.length; i++) {\n            if(chars[i] >= 'a' && chars[i] <= 'z') {\n                chars[i] = (char)(chars[i] + 32);\n            }\n            else if(chars[i] >= 'A' && chars[i] <= 'Z') {\n                chars[i] = (char)(chars[i] - 32);\n            }\n        }\n        return new String(chars);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for(int i = 0; i < chars.length; i++) {\n            if(chars[i] >= 'a' && chars[i] <= 'z') {\n                chars[i] = (char)(chars[i] + 32);\n            }\n            else if(chars[i] >= 'A' && chars[i] <= 'Z') {\n                chars[i] = (char)(chars[i] - 32);\n            }\n        }\n        return new String(chars);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] arr = string.toCharArray();\n        for (int i = 0; i < arr.length; i++) {\n            if (Character.isUpperCase(arr[i])) {\n                arr[i] = Character.toLowerCase(arr[i]);\n            } else {\n                arr[i] = Character.toUpperCase(arr[i]);\n            }\n        }\n        return new String(arr);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isUpperCase(chars[i])) {\n                chars[i] = Character.toLowerCase(chars[i]);\n            } else {\n                chars[i] = Character.toUpperCase(chars[i]);\n            }\n        }\n        return new String(chars);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] arr = string.toCharArray();\n        for (int i = 0; i < arr.length; i++) {\n            if (Character.isUpperCase(arr[i])) {\n                arr[i] = Character.toLowerCase(arr[i]);\n            } else {\n                arr[i] = Character.toUpperCase(arr[i]);\n            }\n        }\n        return new String(arr);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isUpperCase(chars[i])) {\n                chars[i] = Character.toLowerCase(chars[i]);\n            } else {\n                chars[i] = Character.toUpperCase(chars[i]);\n            }\n        }\n        return new String(chars);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] >= 'A' && chars[i] <= 'Z') {\n                chars[i] = (char) (chars[i] + 32);\n            } else if (chars[i] >= 'a' && chars[i] <= 'z') {\n                chars[i] = (char) (chars[i] - 32);\n            }\n        }\n        return new String(chars);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for(int i = 0; i < chars.length; i++) {\n            if(chars[i] >= 'A' && chars[i] <= 'Z') {\n                chars[i] = (char)(chars[i] + 32);\n            }\n            else if(chars[i] >= 'a' && chars[i] <= 'z') {\n                chars[i] = (char)(chars[i] - 32);\n            }\n        }\n        return new String(chars);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isUpperCase(chars[i])) {\n                chars[i] = Character.toLowerCase(chars[i]);\n            } else {\n                chars[i] = Character.toUpperCase(chars[i]);\n            }\n        }\n        return new String(chars);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isUpperCase(chars[i])) {\n                chars[i] = Character.toLowerCase(chars[i]);\n            } else {\n                chars[i] = Character.toUpperCase(chars[i]);\n            }\n        }\n        return new String(chars);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i] = Character.toUpperCase(chars[i]);\n            } else {\n                chars[i] = Character.toLowerCase(chars[i]);\n            }\n        }\n        return new String(chars);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        if (string == null || string.length() == 0) {\n            return string;\n        }\n        char[] chars = string.toCharArray();\n        int len = chars.length;\n        int[] sum = new int[26];\n        for (int i = 0; i < len; i++) {\n            sum[chars[i] - 'a']++;\n        }\n        int[] dp = new int[26];\n        for (int i = 0; i < 26; i++) {\n            dp[i] = sum[i];\n        }\n        for (int i = 0; i < len; i++) {\n            if (dp[chars[i] - 'a'] > 0) {\n                dp[chars[i] - 'a']--;\n                chars[i] = (char) ('a' + i);\n            }\n        }\n        return new String(chars);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        String result = \"\";\n        for(int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if(c >= 'A' && c <= 'Z') {\n                c = (char)(c + 32);\n            }\n            result += c;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        String result = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c >= 'A' && c <= 'Z') {\n                c = (char) (c - 32);\n            }\n            result += c;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isUpperCase(chars[i])) {\n                chars[i] = Character.toLowerCase(chars[i]);\n            } else {\n                chars[i] = Character.toUpperCase(chars[i]);\n            }\n        }\n        return new String(chars);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        String result = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (Character.isUpperCase(c)) {\n                c = Character.toLowerCase(c);\n            } else {\n                c = Character.toUpperCase(c);\n            }\n            result += c;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for(int i = 0; i < chars.length; i++) {\n            if(chars[i] >= 'a' && chars[i] <= 'z') {\n                chars[i] = (char)(chars[i] + 32);\n            }\n            else if(chars[i] >= 'A' && chars[i] <= 'Z') {\n                chars[i] = (char)(chars[i] - 32);\n            }\n        }\n        return new String(chars);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i] = Character.toUpperCase(chars[i]);\n            } else {\n                chars[i] = Character.toLowerCase(chars[i]);\n            }\n        }\n        return new String(chars);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] arr = string.toCharArray();\n        for (int i = 0; i < arr.length; i++) {\n            if (Character.isUpperCase(arr[i])) {\n                arr[i] = Character.toLowerCase(arr[i]);\n            } else {\n                arr[i] = Character.toUpperCase(arr[i]);\n            }\n        }\n        return new String(arr);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n```\n"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n\n    public String longestPalindrome(String s) {\n        if (s == null || s.length() == 0) {\n            return \"\";\n        }\n\n        int len = s.length();\n        int[][] dp = new int[len][len];\n\n        for (int i = 0; i < len; i++) {\n            dp[i][i] = 1;\n        }\n\n        for (int i = 0; i < len - 1; i++) {\n            for (int j = i + 1; j < len; j++) {\n                if (s.charAt(i) == s.charAt(j)) {\n                    dp[i][j] = dp[i + 1][j - 1] + 2;\n                } else {\n                    dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n\n        return concatenate(Arrays.asList(s.substring(dp[0][len - 1]), s.substring(0, dp[0][len - 1])));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        String result = \"\";\n        for (String s : strings) {\n            result += s;\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<String> strings = new ArrayList<String>();\n        strings.add(\"Hello\");\n        strings.add(\"World\");\n        System.out.println(solution.concatenate(strings));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        List<String> strings = new ArrayList<>();\n        strings.add(\"Hello\");\n        strings.add(\"World\");\n        System.out.println(new Solution().concatenate(strings));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(p -> p.startsWith(prefix)).collect(Collectors.toList();\n```\n\n## 10.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.startsWith(prefix)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.startsWith(prefix)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.startsWith(prefix)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toList());\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(p -> p.startsWith(prefix)).collect(Collectors.toList();\n```\n\n### 2.1.2.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1."], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.startsWith(prefix)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.startsWith(prefix)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(p -> p.startsWith(prefix)).collect(Collectors.toList();\n```\n\n## 1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1."], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.startsWith(prefix)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.startsWith(prefix)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.startsWith(prefix)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(p -> p.startsWith(prefix)).collect(Collectors.toList();\n```\n\n## 2.2.3. Write functional code in Java according to the description.\n```java\npublic class Solution {\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(p -> p.startsWith(prefix)).collect(Collectors.toList();\n```\n\n## 2.2.4. Write functional code in Java according to the description.\n```java\npublic class Solution {\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(p -> p.startsWith(prefix)).collect(Collectors.toList();\n```\n\n## 2.2.5. Write functional code in Java according to the description.\n```java\npublic class Solution {\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(p -> p.startsWith(prefix)).collect(Collectors.toList();\n```\n\n## 2.2.6. Write functional code in Java according to the description.\n```java\npublic class Solution {\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(p -> p.startsWith(prefix)).collect(Collectors.toList();\n```\n\n## 2.2.7. Write functional code in Java according to the description.\n```java\npublic class Solution {\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(p -> p.startsWith(prefix)).collect(Collectors.toList();\n```\n\n## 2.2.8. Write functional code in Java according to the description.\n```java\npublic class Solution {\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(p -> p.startsWith(prefix)).collect(Collectors.toList();\n```\n\n## 2.2.9. Write functional code in Java according to the description.\n```java\npublic class Solution {\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(p -> p.startsWith(prefix)).collect(Collectors.toList();\n```\n\n## 2.2.10. Write functional code in Java according to the description.\n```java\npublic class Solution {\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(p -> p.startsWith(prefix)).collect(Collectors.toList();\n```\n\n## 2.2.11. Write functional code in Java according to the description.\n```java\npublic class Solution {\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(p -> p.startsWith(prefix)).collect(Collectors.toList();\n```\n\n## 2.2.12. Write functional code in Java according to the description.\n```java\npublic class Solution {\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(p -> p.startsWith(prefix)).collect(Collectors.toList();\n```\n\n## 2.2.13. Write functional code in Java according to the description.\n```java\npublic class Solution {\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(p -> p.startsWith(prefix)).collect(Collectors.toList();\n```\n\n## 2.2.14. Write functional code in Java according to the description.\n```java\npublic class Solution {\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(p -> p.startsWith(prefix)).collect(Collectors.toList();\n```\n\n## 2.2.15. Write functional code in Java according to the description.\n```java\npublic class Solution {\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(p -> p.startsWith(prefix)).collect(Collectors.toList();\n```\n\n## 2.2.16. Write functional code in Java according to the description.\n```java\npublic class Solution {\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(p -> p.startsWith(prefix)).collect(Collectors.toList();\n```\n\n## 2.2.17. Write functional code in Java according to the description.\n```java\npublic class Solution {\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(p -> p.startsWith(prefix)).collect(Collectors.toList();\n```\n\n## 2.2.18. Write functional code in Java according to the description.\n```java\npublic class Solution {\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(p -> p.startsWith(prefix)).collect(Collectors.toList();\n```\n\n## 2.2.19. Write functional code in Java according to the description.\n```java\npublic class Solution {\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(p -> p.startsWith(prefix)).collect(Collectors.toList();\n```\n\n## 2.2.20. Write functional code in Java according to the description.\n```java\npublic class Solution {\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(p -> p.startsWith(prefix)).collect(Collectors.toList();\n```\n\n## 2.2.21. Write functional code in Java according to the description.\n```java\npublic class Solution {\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(p -> p.startsWith(prefix)).collect(Collectors.toList();\n```\n\n## 2.2.22. Write functional code in Java according to the description.\n```java\npublic class Solution {\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(p -> p.startsWith(prefix)).collect(Collectors.toList();\n```\n\n## 2.2.23. Write functional code in Java according to the description.\n```java\npublic class Solution {\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(p -> p.startsWith(prefix)).collect(Collectors.toList();\n```\n\n## 2.2.24. Write functional code in Java according to the description.\n```java\npublic class Solution {\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(p -> p.startsWith(prefix)).collect(Collectors.toList();\n```\n\n## 2.2.25. Write functional code in Java according to the description.\n```java\npublic class Solution {\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(p -> p.startsWith(prefix)).collect(Collectors.toList();\n```\n\n## 2.2.26. Write functional code in Java according to the description.\n```java\npublic class Solution {\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(p -> p.startsWith(prefix)).collect(Collectors.toList();\n```\n\n## 2.2.27. Write functional code in Java according to the description.\n```java\npublic class Solution {\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(p -> p.startsWith(prefix)).collect(Collectors.toList();\n```\n\n## 2.2.28. Write functional code in Java according to the description.\n```java\npublic class Solution {\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(p -> p.startsWith(prefix)).collect(Collectors.toList();\n```\n\n## 2.2.29. Write functional code in Java according to the description."], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.startsWith(prefix)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.startsWith(prefix)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.startsWith(prefix)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.startsWith(prefix)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.startsWith(prefix)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(p -> p.startsWith(prefix)).collect(Collectors.toList();\n```\n\n### 1.2.1.2.1.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1.2.1."], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) > 0) {\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> l = Arrays.asList(1, 2, 0);\n        List<Integer> result = new Solution().getPositive(l);\n        System.out.println(result);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        for (Integer i : l) {\n            if (i > 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) > 0) {\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        res.add(l.get(i));\n                        res.add(l.get(j));\n                        res.add(l.get(k));\n                    }\n                }\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) > 0) {\n                res.add(l.get(i));\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x > 0).collect(Collectors.toList());\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        for (Integer i : l) {\n            if (i > 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) > 0) {\n                res.add(l.get(i));\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x > 0).collect(Collectors.toList());\n    }\n\n    public List<Integer> getNegative(List<Integer> l) {\n        return l.stream().filter(x -> x < 0).collect(Collectors.toList());\n    }\n\n    public List<Integer> getZero(List<Integer> l) {\n        return l.stream().filter(x -> x == 0).collect(Collectors.toList());\n    }\n\n    public List<Integer> getPositiveAndNegative(List<Integer> l) {\n        return getPositive(getNegative(l));\n    }\n\n    public List<Integer> getPositiveAndZero(List<Integer> l) {\n        return getPositive(getZero(l));\n    }\n\n    public List<Integer> getNegativeAndZero(List<Integer> l) {\n        return getNegative(getZero(l));\n    }\n\n    public List<Integer> getPositiveAndNegativeAndZero(List<Integer> l) {\n        return getPositive(getNegative(getZero(l)));\n    }\n\n    public List<Integer> getPositiveAndNegativeAndPositive(List<Integer> l) {\n        return getPositive(getNegative(getPositive(l)));\n    }\n\n    public List<Integer> getPositiveAndNegativeAndNegative(List<Integer> l) {\n        return getPositive(getNegative(getNegative(l)));\n    }\n\n    public List<Integer> getPositiveAndNegativeAndZeroAndPositive(List<Integer> l) {\n        return getPositive(getNegative(getZero(getPositive(l))));\n    }\n\n    public List<Integer> getPositiveAndNegativeAndZeroAndNegative(List<Integer> l) {\n        return getPositive(getNegative(getZero(getNegative(l))));\n    }\n\n    public List<Integer> getPositiveAndNegativeAndPositiveAndNegative(List<Integer> l) {\n        return getPositive(getNegative(getPositive(getNegative(l))));\n    }\n\n    public List<Integer> getPositiveAndNegativeAndPositiveAndZero(List<Integer> l) {\n        return getPositive(getNegative(getPositive(getZero(l))));\n    }\n\n    public List<Integer> getPositiveAndNegativeAndNegativeAndPositive(List<Integer> l) {\n        return getPositive(getNegative(getNegative(getPositive(l))));\n    }\n\n    public List<Integer> getPositiveAndNegativeAndNegativeAndZero(List<Integer> l) {\n        return getPositive(getNegative(getNegative(getZero(l))));\n    }\n\n    public List<Integer> getPositiveAndNegativeAndNegativeAndPositiveAndZero(List<Integer> l) {\n        return getPositive(getNegative(getNegative(getPositive(getZero(l))))));\n    }\n\n    public List<Integer> getPositiveAndNegativeAndNegativeAndNegativeAndZero(List<Integer> l) {\n        return getPositive(getNegative(getNegative(getNegative(getZero(l))))));\n    }\n\n    public List<Integer> getPositiveAndNegativeAndNegativeAndNegativeAndPositive(List<Integer> l) {\n        return getPositive(getNegative(getNegative(getNegative(getPositive(l))))));\n    }\n\n    public List<Integer> getPositiveAndNegativeAndNegativeAndNegativeAndZeroAndPositive(List<Integer> l) {\n        return getPositive(getNegative(getNegative(getNegative(getZero(getPositive(l)))))));\n    }\n\n    public List<Integer> getPositiveAndNegativeAndNegativeAndNegativeAndZeroAndNegative(List<Integer> l) {\n        return getPositive(getNegative(getNegative(getNegative(getZero(getNegative(l)))))));\n    }\n\n    public List<Integer> getPositiveAndNegativeAndNegativeAndNegativeAndPositiveAndZeroAndNegative(List<Integer> l) {\n        return getPositive(getNegative(getNegative(getNegative(getPositive(getZero(getNegative(l))))))));\n    }\n\n    public List<Integer> getPositiveAndNegativeAndNegativeAndNegativeAndPositiveAndZeroAndPositive(List<Integer> l) {\n        return getPositive(getNegative(getNegative(getNegative(getPositive(getZero(getPositive(l))))))));\n    }\n\n    public List<Integer> getPositiveAndNegativeAndNegativeAndNegativeAndPositiveAndZeroAndNegative(List<Integer> l) {\n        return getPositive(getNegative(getNegative(getNegative(getPositive(getZero(getNegative(l))))))));\n    }\n\n    public List<Integer> getPositiveAndNegativeAndNegativeAndNegativeAndNegativeAndZeroAndPositive(List<Integer> l) {\n        return getPositive(getNegative(getNegative(getNegative(getNegative(getZero(getPositive(l))))))));\n    }\n\n    public List<Integer> getPositiveAndNegativeAndNegativeAndNegativeAndNegativeAndZeroAndNegative(List<Integer> l) {\n        return getPositive(getNegative(getNegative(getNegative(getNegative(getZero(getNegative(l))))))));\n    }\n\n    public List<Integer> getPositiveAndNegativeAndNegativeAndNegativeAndNegativeAndZeroAndPositiveAndNegative(List<Integer> l) {\n        return getPositive(getNegative(getNegative(getNegative(getNegative(getZero(getPositive(getNegative(l))))))));\n    }\n\n    public List<Integer> getPositiveAndNegativeAndNegativeAndNegativeAndNegativeAndZeroAndPositiveAndPositive(List<Integer> l) {\n        return getPositive(getNegative(getNegative(getNegative(getNegative(getZero(getPositive(getPositive(l))))))));\n    }\n\n    public List<Integer> getPositiveAndNegativeAndNegativeAndNegativeAndNegativeAndZeroAndPositiveAndNegative(List<Integer> l) {\n        return getPositive(getNegative(getNegative(getNegative(getNegative(getZero(getNegative(l))))))));\n    }\n\n    public List<Integer> getPositiveAndNegativeAndNegativeAndNegativeAndNegativeAndZeroAndNegativeAndPositive(List<Integer> l) {\n        return getPositive(getNegative(getNegative(getNegative(getNegative(getZero(getPositive(getNegative(l))))))));\n    }\n\n    public List<Integer> getPositiveAndNegativeAndNegativeAndNegativeAndNegativeAndZeroAndNegativeAndNegative(List<Integer> l) {\n        return getPositive(getNegative(getNegative(getNegative(getNegative(getZero(getNegative(l))))))));\n    }\n\n    public List<Integer> getPositiveAndNegativeAndNegativeAndNegativeAndNegativeAndZeroAndNegativeAndPositive(List<Integer> l) {\n        return getPositive(getNegative(getNegative(getNegative(getNegative(getZero(getPositive(getNegative(l))))))));\n    }\n\n    public List<Integer> getPositiveAndNegativeAndNegativeAndNegativeAndNegativeAndZeroAndNegativeAndNegative(List<Integer> l) {\n        return getPositive(getNegative(getNegative(getNegative(getNegative(getZero(getNegative(l))))))));\n    }\n\n    public List<Integer> getPositiveAndNegativeAndNegativeAndNegativeAndNegativeAndZeroAndPositiveAndPositive(List<Integer> l) {\n        return getPositive(getNegative(getNegative(getNegative(getNegative(getZero(getPositive(getPositive(l))))))));\n    }\n\n    public List<Integer> getPositiveAndNegativeAndNegativeAndNegativeAndNegativeAndZeroAndPositiveAndNegative(List<Integer> l) {\n        return getPositive(getNegative(getNegative(getNegative(getNegative(getZero(getPositive(getNegative(l))))))));\n    }\n\n    public List<Integer> getPositiveAndNegativeAndNegativeAndNegativeAndNegativeAndZeroAndNegativeAndNegative(List<Integer> l) {\n        return getPositive(getNegative(getNegative(getNegative(getNegative(getZero(getNegative(l))))))));\n    }\n\n    public List<Integer> getPositiveAndNegativeAndNegativeAndNegativeAndNegativeAndZeroAndPositiveAndPositive(List<Integer> l) {\n        return getPositive(getNegative(getNegative(getNegative(getNegative(getZero(getPositive(getPositive(l))))))));\n    }\n\n    public List<Integer> getPositiveAndNegativeAndNegativeAndNegativeAndNegativeAndZeroAndPositiveAndNegative(List<Integer> l) {\n        return getPositive(getNegative(getNegative(getNegative(getNegative(getZero(getPositive(getNegative(l))))))));\n    }\n\n    public List<Integer> getPositiveAndNegativeAndNegativeAndNegativeAndNegativeAndZeroAndNegativeAndNegative(List<Integer> l) {\n        return getPositive(getNegative(getNegative(getNegative(getNegative(getZero(getNegative(l))))))));\n    }\n\n    public List<Integer> getPositiveAndNegativeAndNegativeAndNegativeAndNegativeAndZeroAndPositiveAndPositive(List<Integer> l) {\n        return getPositive(getNegative(getNegative(getNegative(getNegative(getZero(getPositive(getPositive(l))))))));\n    }"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        for (Integer i : l) {\n            if (i > 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) > 0) {\n                res.add(l.get(i));\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) > 0) {\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        List<Integer> res = new ArrayList<>();\n        for (int i : l) {\n            if (i > 0) {\n                res.add(i);\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        List<Integer> res = new ArrayList<>();\n        if (l == null || l.size() == 0) {\n            return res;\n        }\n        int n = l.size();\n        int[] dp = new int[n];\n        Arrays.fill(dp, -1);\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (l.get(i) > l.get(j)) {\n                    dp[j] = Math.max(dp[j], dp[i] + 1);\n                }\n            }\n            max = Math.max(max, dp[i]);\n        }\n        for (int i = 0; i < n; i++) {\n            if (dp[i] == max) {\n                res.add(l.get(i));\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) > 0) {\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) > 0) {\n                res.add(l.get(i));\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(i -> i > 0).collect(Collectors.toList());\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) > 0) {\n                res.add(l.get(i));\n            }\n        }\n        return res;\n    }\n\n    public int maxProfit(int[] prices) {\n        List<Integer> l = Arrays.stream(prices).boxed().collect(Collectors.toList());\n        l = getPositive(l);\n        int res = 0;\n        for (int i = 0; i < l.size() - 1; i++) {\n            res = Math.max(res, l.get(i + 1) - l.get(i));\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) > 0) {\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x > 0).collect(Collectors.toList());\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n <= 1) return false;\n        if (n == 2) return true;\n        if (n % 2 == 0) return false;\n        if (n % 3 == 0) return false;\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) return false;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        Solution s = new Solution();\n        System.out.println(s.isPrime(n));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public int longestConsecutive(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            return 0;\n        }\n        int max = 0;\n        int cur = 0;\n        for (int i = 0; i < nums.length; i++) {\n            if (nums[i] == 0) {\n                continue;\n            }\n            if (nums[i] == 1) {\n                cur++;\n            } else {\n                cur = 1;\n            }\n            if (cur > max) {\n                max = cur;\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n <= 1) return false;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        Solution s = new Solution();\n        System.out.println(s.isPrime(n));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        \n            if (n % k == 0) {\n                return false;\n            }\n        \n            for (int i = 2; i * i <= n; i++) {\n                if (n % i == 0) {\n                    return false;\n                }\n            }\n        \n            return true;\n        }\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public int gcd(int a, int b) {\n        if (b == 0) {\n            return a;\n        }\n        return gcd(b, a % b);\n    }\n\n    public int max(int a, int b) {\n        return a > b ? a : b;\n    }\n\n    public int min(int a, int b) {\n        return a < b ? a : b;\n    }\n\n    public int lcm(int a, int b) {\n        return max(a * b / gcd(a, b), min(a, b));\n    }\n\n    public int maxDivisibleSubset(int[] nums) {\n        Arrays.sort(nums);\n        int n = nums.length;\n        int[] dp = new int[n];\n        dp[0] = nums[0];\n        for (int i = 1; i < n; i++) {\n            dp[i] = max(dp[i - 1], nums[i]);\n        }\n        return dp[n - 1];\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 2, 3, 4, 5};\n        System.out.println(new Solution().maxDivisibleSubset(nums));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        Solution solution = new Solution();\n        System.out.println(solution.isPrime(n));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n == 1 || n == 0) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n == 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i * i < n; i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        \n            if (n % k == 0) {\n                return false;\n            }\n        }\n        return true;\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        Solution s = new Solution();\n        System.out.println(s.isPrime(n));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        Solution s = new Solution();\n        System.out.println(s.isPrime(n));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        Solution s = new Solution();\n        System.out.println(s.isPrime(n));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        Solution s = new Solution();\n        System.out.println(s.isPrime(n));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        \n            if (n % k == 0) {\n                return false;\n            }\n            for (int i = 2; i * i <= n; i++) {\n                if (n % i == 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if(n == 1 || n == 2)\n            return true;\n        if(n % 2 == 0)\n            return false;\n        for(int i = 3; i * i <= n; i += 2)\n            if(n % i == 0)\n                return false;\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n < 2) {\n            return false;\n        }\n        \n            if (n % k == 0) {\n                return false;\n            }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n == 1)\n            return false;\n        if (n == 2)\n            return true;\n        if (n % 2 == 0)\n            return false;\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0)\n                return false;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        Solution s = new Solution();\n        System.out.println(s.isPrime(n));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n == 2) return true;\n        if (n % 2 == 0) return false;\n        if (n % 3 == 0) return false;\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        Solution solution = new Solution();\n        System.out.println(solution.isPrime(n));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n <= 1) return false;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n\n    public String intToRoman(int num) {\n        String[] roman = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String result = \"\";\n        while (num > 0) {\n            int index = roman.length - 1;\n            while (num >= roman[index]) {\n                result += roman[index];\n                num -= roman[index];\n                index--;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n <= 1) return false;\n        if (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        System.out.println(isPrime(n));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(i, i);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        double begin = 0, end = 0;\n        double center = 0;\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (i == 0) {\n                begin = xs.get(i);\n            } else {\n                end = xs.get(i);\n            }\n            center = (begin + end) / 2;\n            result = poly(xs, center);\n            if (result == 0) {\n                return center;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        double begin = 0;\n        double end = 1;\n        double center = 0;\n        double result = 0;\n        while (end - beginimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(i, 2);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i);\n        }\n        return result;\n    }\n    \n    public double findZero(double[] xs) {\n        double result = 0;\n        for (int i = 0; i < xs.length; i++) {\n            result += xs[i];\n        }\n        return result;\n    }\n    \n    public double findZero(int[] xs) {\n        double result = 0;\n        for (int i = 0; i < xs.length; i++) {\n            result += xs[i];\n        }\n        return result;\n    }\n    \n    public double findZero(long[] xs) {\n        double result = 0;\n        for (int i = 0; i < xs.length; i++) {\n            result += xs[i];\n        }\n        return result;\n    }\n    \n    public double findZero(float[] xs) {\n        double result = 0;\n        for (int i = 0; i < xs.length; i++) {\n            result += xs[i];\n        }\n        return result;\n    }\n    \n    public double findZero(double[] xs, int n) {\n        double result = 0;\n        for (int i = 0; i < n; i++) {\n            result += xs[i];\n        }\n        return result;\n    }\n    \n    public double findZero(int[] xs, int n) {\n        double result = 0;\n        for (int i = 0; i < n; i++) {\n            result += xs[i];\n        }\n        return result;\n    }\n    \n    public double findZero(long[] xs, int n) {\n        double result = 0;\n        for (int i = 0; i < n; i++) {\n            result += xs[i];\n        }\n        return result;\n    }\n    \n    public double findZero(float[] xs, int n) {\n        double result = 0;\n        for (int i = 0; i < n; i++) {\n            result += xs[i];\n        }\n        return result;\n    }\n    \n    public double findZero(double[] xs, int n, double x) {\n        double result = 0;\n        for (int i = 0; i < n; i++) {\n            result += xs[i] * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    public double findZero(int[] xs, int n, int x) {\n        double result = 0;\n        for (int i = 0; i < n; i++) {\n            result += xs[i] * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    public double findZero(long[] xs, int n, long x) {\n        double result = 0;\n        for (int i = 0; i < n; i++) {\n            result += xs[i] * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    public double findZero(float[] xs, int n, float x) {\n        double result = 0;\n        for (int i = 0; i < n; i++) {\n            result += xs[i] * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) == 0) {\n                result = i;\n                break;\n            }\n        }\n        return result;\n    }\n    \n    public double findZero(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) == 0) {\n                result = i;\n                break;\n            }\n        }\n        return result;\n    }\n    \n    public double findZero(List<Double> xs, double x, double y) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) == 0) {\n                result = i;\n                break;\n            }\n        }\n        return result;\n    }\n    \n    public double findZero(List<Double> xs, double x, double y, double z) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) == 0) {\n                result = i;\n                break;\n            }\n        }\n        return result;\n    }\n    \n    public double findZero(List<Double> xs, double x, double y, double z, double w) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) == 0) {\n                result = i;\n                break;\n            }\n        }\n        return result;\n    }\n    \n    public double findZero(List<Double> xs, double x, double y, double z, double w, double u) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) == 0) {\n                result = i;\n                break;\n            }\n        }\n        return result;\n    }\n    \n    public double findZero(List<Double> xs, double x, double y, double z, double w, double u, double v) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) == 0) {\n                result = i;\n                break;\n            }\n        }\n        return result;\n    }\n    \n    public double findZero(List<Double> xs, double x, double y, double z, double w, double u, double v, double w) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) == 0) {\n                result = i;\n                break;\n            }\n        }\n        return result;\n    }\n    \n    public double findZero(List<Double> xs, double x, double y, double z, double w, double u, double v, double w, double u) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) == 0) {\n                result = i;\n                break;\n            }\n        }\n        return result;\n    }\n    \n    public double findZero(List<Double> xs, double x, double y, double z, double w, double u, double v, double w, double u, double v) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) == 0) {\n                result = i;\n                break;\n            }\n        }\n        return result;\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        double begin = 0;\n        double end = 1;\n        double center = 0.5;\n        double result = 0;\n        while (end - begin > 1e-10) {\n            result = poly(xs, center);\n            if (result == 0) {\n                return center;\n            }\n            if (result > 0) {\n                end = center;\n            } else {\n                begin = center;\n            }\n            center = (begin + end) / 2;\n        }\n        return center;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(i, 2);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) == 0) {\n                result = i;\n                break;\n            }\n        }\n        return result;\n    }\n    \n    public double findZero(double[] xs) {\n        double result = 0;\n        for (int i = 0; i < xs.length; i++) {\n            if (xs[i] == 0) {\n                result = i;\n                break;\n            }\n        }\n        return result;\n    }\n    \n    public double findZero(int[] xs) {\n        double result = 0;\n        for (int i = 0; i < xs.length; i++) {\n            if (xs[i] == 0) {\n                result = i;\n                break;\n            }\n        }\n        return result;\n    }\n    \n    public double findZero(long[] xs) {\n        double result = 0;\n        for (int i = 0; i < xs.length; i++) {\n            if (xs[i] == 0) {\n                result = i;\n                break;\n            }\n        }\n        return result;\n    }\n    \n    public double findZero(float[] xs) {\n        double result = 0;\n        for (int i = 0; i < xs.length; i++) {\n            if (xs[i] == 0) {\n                result = i;\n                break;\n            }\n        }\n        return result;\n    }\n    \n    public double findZero(double[] xs, int n) {\n        double result = 0;\n        for (int i = 0; i < n; i++) {\n            if (xs[i] == 0) {\n                result = i;\n                break;\n            }\n        }\n        return result;\n    }\n    \n    public double findZero(int[] xs, int n) {\n        double result = 0;\n        for (int i = 0; i < n; i++) {\n            if (xs[i] == 0) {\n                result = i;\n                break;\n            }\n        }\n        return result;\n    }\n    \n    public double findZero(long[] xs, int n) {\n        double result = 0;\n        for (int i = 0; i < n; i++) {\n            if (xs[i] == 0) {\n                result = i;\n                break;\n            }\n        }\n        return result;\n    }\n    \n    public double findZero(float[] xs, int n) {\n        double result = 0;\n        for (int i = 0; i < n; i++) {\n            if (xs[i] == 0) {\n                result = i;\n                break;\n            }\n        }\n        return result;\n    }\n    \n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        double begin = 0, end = 0;\n        double center = (begin + end) / 2;\n        double begin2 = 0, end2 = 0;\n        double center2 = (begin2 + end2) / 2;\n        double begin3 = 0, end3 = 0;\n        double center3 = (begin3 + end3) / 2;\n        double begin4 = 0, end4 = 0;\n        double center4 = (begin4 + end4) / 2;\n        double begin5 = 0, end5 = 0;\n        double center5 = (begin5 + end5) / 2;\n        double begin6 = 0, end6 = 0;\n        double center6 = (begin6 + end6) / 2;\n        double begin7 = 0, end7 = 0;\n        double center7 = (begin7 + end7) / 2;\n        double begin8 = 0, end8 = 0;\n        double center8 = (begin8 + end8) / 2;\n        double begin9 = 0, end9 = 0;\n        double center9 = (begin9 + end9) / 2;\n        double begin10 = 0, end10 = 0;\n        double center10 = (begin10 + end10) / 2;\n        double begin11 = 0, end11 = 0;\n        double center11 = (begin11 + end11) / 2;\n        double begin12 = 0, end12 = 0;\n        double center12 = (begin12 + end12) / 2;\n        double begin13 = 0, end13 = 0;\n        double center13 = (begin13 + end13) / 2;\n        double begin14 = 0, end14 = 0;\n        double center14 = (begin14 + end14) / 2;\n        double begin15 = 0, end15 = 0;\n        double center15 = (begin15 + end15) / 2;\n        double begin16 = 0, end16 = 0;\n        double center16 = (begin16 + end16) / 2;\n        double begin17 = 0, end17 = 0;\n        double center17 = (begin17 + end17) / 2;\n        double begin18 = 0, end18 = 0;\n        double center18 = (begin18 + end18) / 2;\n        double begin19 = 0, end19 = 0;\n        double center19 = (begin19 + end19) / 2;\n        double begin20 = 0, end20 = 0;\n        double center20 = (begin20 + end20) / 2;\n        double begin21 = 0, end21 = 0;\n        double center21 = (begin21 + end21) / 2;\n        double begin22 = 0, end22 = 0;\n        double center22 = (begin22 + end22) / 2;\n        double begin23 = 0, end23 = 0;\n        double center23 = (begin23 + end23) / 2;\n        double begin24 = 0, end24 = 0;\n        double center24 = (begin24 + end24) / 2;\n        double begin25 = 0, end25 = 0;\n        double center25 = (begin25 + end25) / 2;\n        double begin26 = 0, end26 = 0;\n        double center26 = (begin26 + end26) / 2;\n        double begin27 = 0, end27 = 0;\n        double center27 = (begin27 + end27) / 2;\n        double begin28 = 0, end28 = 0;\n        double center28 = (begin28 + end28) / 2;\n        double begin29 = 0, end29 = 0;\n        double center29 = (begin29 + end29) / 2;\n        double begin30 = 0, end30 = 0;\n        double center30 = (begin30 + end30) / 2;\n        double begin31 = 0, end31 = 0;\n        double center31 = (begin31 + end31) / 2;\n        double begin32 = 0, end32 = 0;\n        double center32 = (begin32 + end32) / 2;\n        double begin33 = 0, end33 = 0;\n        double center33 = (begin33 + end33) / 2;\n        double begin34 = 0, end34 = 0;\n        double center34 = (begin34 + end34) / 2;\n        double begin35 = 0, end35 = 0;\n        double center35 = (begin35 + end35) / 2;\n        double begin36 = 0, end36 = 0;\n        double center36 = (begin36 + end36) / 2;\n        double begin37 = 0, end37 = 0;\n        double center37 = (begin37 + end37) / 2;\n        double begin38 = 0, end38 = 0;\n        double center38 = (begin38 + end38) / 2;\n        double begin39 = 0, end39 = 0;\n        double center39 = (begin39 + end39) / 2;\n        double begin40 = 0, end40 = 0;\n        double center40 = (begin40 + end40) / 2;\n        double begin41 = 0, end41 = 0;\n        double center41 = (begin41 + end41) / 2;\n        double begin42 = 0, end42 = 0;\n        double center42 = (begin42 + end42) / 2;\n        double begin43 = 0, end43 = 0;\n        double center43 = (begin43 + end43) / 2;\n        double begin44 = 0, end44 = 0;\n        double center44 = (begin44 + end44) / 2;\n        double begin45 = 0, end45 = 0;\n        double center45 = (begin45 + end45) / 2;\n        double begin46 = 0, end46 = 0;\n        double center46 = (begin46 + end46) / 2;\n        double begin47 = 0, end47 = 0;\n        double center47 = (begin47 + end47) / 2;\n        double begin48 = 0, end48 = 0;\n        double center48 = (begin48 + end48) / 2;\n        double begin49 = 0, end49 = 0;\n        double center49 = (begin49 + end49) / 2;\n        double begin50 = 0, end50 = 0;\n        double center50 = (begin50 + end50) / 2;\n        double begin51 = 0, end51 = 0;\n        double center51 = (begin51 + end51) / 2;\n        double begin52 = 0, end52 = 0;\n        double center52 = (begin52 + end52) / 2;\n        double begin53 = 0, end53 = 0;\n        double center53 = (begin53 + end53) / 2;\n        double begin54 = 0, end54 = 0;\n        double center54 = (begin54 + end54) / 2;\n        double"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(i, i);\n        }\n        return result;\n    }\n    \n    public double findZero(double[] xs) {\n        double result = 0;\n        for (int i = 0; i < xs.length; i++) {\n            result += xs[i] * Math.pow(i, i);\n        }\n        return result;\n    }\n    \n    public double findZero(int[] xs) {\n        double result = 0;\n        for (int i = 0; i < xs.length; i++) {\n            result += xs[i] * Math.pow(i, i);\n        }\n        return result;\n    }\n    \n    public double findZero(long[] xs) {\n        double result = 0;\n        for (int i = 0; i < xs.length; i++) {\n            result += xs[i] * Math.pow(i, i);\n        }\n        return result;\n    }\n    \n    public double findZero(float[] xs) {\n        double result = 0;\n        for (int i = 0; i < xs.length; i++) {\n            result += xs[i] * Math.pow(i, i);\n        }\n        return result;\n    }\n    \n    public double findZero(double[] xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.length; i++) {\n            result += xs[i] * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    public double findZero(int[] xs, int x) {\n        double result = 0;\n        for (int i = 0; i < xs.length; i++) {\n            result += xs[i] * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    public double findZero(long[] xs, long x) {\n        double result = 0;\n        for (int i = 0; i < xs.length; i++) {\n            result += xs[i] * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    public double findZero(float[] xs, float x) {\n        double result = 0;\n        for (int i = 0; i < xs.length; i++) {\n            result += xs[i] * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    public double findZero(double[] xs, double x, double epsilon) {\n        double result = 0;\n        for (int i = 0; i < xs.length; i++) {\n            result += xs[i] * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    public double findZero(int[] xs, int x, int epsilon) {\n        double result = 0;\n        for (int i = 0; i < xs.length; i++) {\n            result += xs[i] * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    public double findZero(long[] xs, long x, long epsilon) {\n        double result = 0;\n        for (int i = 0; i < xs.length; i++) {\n            result += xs[i] * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    public double findZero(float[] xs, float x, float epsilon) {\n        double result = 0;\n        for (int i = 0; i < xs.length; i++) {\n            result += xs[i] * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    public double findZero(double[] xs, double x, double epsilon, double delta) {\n        double result = 0;\n        for (int i = 0; i < xs.length; i++) {\n            result += xs[i] * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    public double findZero(int[] xs, int x, int epsilon, int delta) {\n        double result = 0;\n        for (int i = 0; i < xs.length; i++) {\n            result += xs[i] * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    public double findZero(long[] xs, long x, long epsilon, long delta) {\n        double result = 0;\n        for (int i = 0; i < xs.length; i++) {\n            result += xs[i] * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    public double findZero(float[] xs, float x, float epsilon, float delta) {\n        double result = 0;\n        for (int i = 0; i < xs.length; i++) {\n            result += xs[i] * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    public double findZero(double[] xs, double x, double epsilon, double delta, double epsilon2) {\n        double result = 0;\n        for (int i = 0; i < xs.length; i++) {\n            result += xs[i] * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    public double findZero(int[] xs, int x, int epsilon, int delta, int epsilon2) {\n        double result = 0;\n        for (int i = 0; i < xs.length; i++) {\n            result += xs[i] * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    public double findZero(long[] xs, long x, long epsilon, long delta, long epsilon2) {\n        double result = 0;\n        for (int i = 0; i < xs.length; i++) {\n            result += xs[i] * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    public double findZero(float[] xs, float x, float epsilon, float delta, float epsilon2) {\n        double result = 0;\n        for (int i = 0; i < xs.length; i++) {\n            result += xs[i] * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    public double findZero(double[] xs, double x, double epsilon, double delta, double epsilon2, double delta2) {\n        double result = 0;\n        for (int i = 0; i < xs.length; i++) {\n            result += xs[i] * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    public double findZero(int[] xs, int x, int epsilon, int delta, int epsilon2, int delta2) {\n        double result = 0;\n        for (int i = 0; i < xs.length; i++) {\n            result += xs[i] * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    public double findZero(long[] xs, long x, long epsilon, long delta, long epsilon2, long delta2) {\n        double result = 0;\n        for (int i = 0; i < xs.length; i++) {\n            result += xs[i] * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    public double findZero(float[] xs, float x, float epsilon, float delta, float epsilon2, float delta2) {\n        double result = 0;\n        for (int i = 0; i < xs.length; i++) {\n            result += xs[i] * Math.pow(x, i);\n        }\n        return result;\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(i, i);\n        }\n        return result;\n    }\n    \n    public double findZero(double[] xs) {\n        double result = 0;\n        for (int i = 0; i < xs.length; i++) {\n            result += xs[i] * Math.pow(i, i);\n        }\n        return result;\n    }\n    \n    public double findZero(int[] xs) {\n        double result = 0;\n        for (int i = 0; i < xs.length; i++) {\n            result += xs[i] * Math.pow(i, i);\n        }\n        return result;\n    }\n    \n    public double findZero(long[] xs) {\n        double result = 0;\n        for (int i = 0; i < xs.length; i++) {\n            result += xs[i] * Math.pow(i, i);\n        }\n        return result;\n    }\n    \n    public double findZero(float[] xs) {\n        double result = 0;\n        for (int i = 0; i < xs.length; i++) {\n            result += xs[i] * Math.pow(i, i);\n        }\n        return result;\n    }\n    \n    public double findZero(double[] xs, int n) {\n        double result = 0;\n        for (int i = 0; i < n; i++) {\n            result += xs[i] * Math.pow(i, i);\n        }\n        return result;\n    }\n    \n    public double findZero(int[] xs, int n) {\n        double result = 0;\n        for (int i = 0; i < n; i++) {\n            result += xs[i] * Math.pow(i, i);\n        }\n        return result;\n    }\n    \n    public double findZero(long[] xs, int n) {\n        double result = 0;\n        for (int i = 0; i < n; i++) {\n            result += xs[i] * Math.pow(i, i);\n        }\n        return result;\n    }\n    \n    public double findZero(float[] xs, int n) {\n        double result = 0;\n        for (int i = 0; i < n; i++) {\n            result += xs[i] * Math.pow(i, i);\n        }\n        return result;\n    }\n    \n    public double findZero(double[] xs, int n, int m) {\n        double result = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                result += xs[i] * Math.pow(i, j);\n            }\n        }\n        return result;\n    }\n    \n    public double findZero(int[] xs, int n, int m) {\n        double result = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                result += xs[i] * Math.pow(i, j);\n            }\n        }\n        return result;\n    }\n    \n    public double findZero(long[] xs, int n, int m) {\n        double result = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                result += xs[i] * Math.pow(i, j);\n            }\n        }\n        return result;\n    }\n    \n    public double findZero(float[] xs, int n, int m) {\n        double result = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                result += xs[i] * Math.pow(i, j);\n            }\n        }\n        return result;\n    }\n    \n    public double findZero(double[] xs, int n, int m, int p) {\n        double result = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                for (int k = 0; k < p; k++) {\n                    result += xs[i] * Math.pow(i, j);\n                }\n            }\n        }\n        return result;\n    }\n    \n    public double findZero(int[] xs, int n, int m, int p) {\n        double result = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                for (int k = 0; k < p; k++) {\n                    result += xs[i] * Math.pow(i, j);\n                }\n            }\n        }\n        return result;\n    }\n    \n    public double findZero(long[] xs, int n, int m, int p) {\n        double result = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                for (int k = 0; k < p; k++) {\n                    result += xs[i] * Math.pow(i, j);\n                }\n            }\n        }\n        return result;\n    }\n    \n    public double findZero(float[] xs, int n, int m, int p) {\n        double result = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                for (int k = 0; k < p; k++) {\n                    result += xs[i] * Math.pow(i, j);\n                }\n            }\n        }\n        return result;\n    }\n    \n    public double findZero(double[] xs, int n, int m, int p, int q) {\n        double result = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                for (int k = 0; k < p; k++) {\n                    for (int l = 0; l < q; l++) {\n                        result += xs[i] * Math.pow(i, j);\n                    }\n                }\n            }\n        }\n        return result;\n    }\n    \n    public double findZero(int[] xs, int n, int m, int p, int q) {\n        double result = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                for (int k = 0; k < p; k++) {\n                    for (int l = 0; l < q; l++) {\n                        result += xs[i] * Math.pow(i, j);\n                    }\n                }\n            }\n        }\n        return result;\n    }\n    \n    public double findZero(long[] xs, int n, int m, int p, int q) {\n        double result = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                for (int k = 0; k < p; k++) {\n                    for (int l = 0; l < q; l++) {\n                        result += xs[i] * Math.pow(i, j);\n                    }\n                }\n            }\n        }\n        return result;\n    }\n    \n    public double findZero(float[] xs, int n, int m, int p, int q) {\n        double result = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                for (int k = 0; k < p; k++) {\n                    for (int l = 0; l < q; l++) {\n                        result += xs[i] * Math.pow(i, j);\n                    }\n                }\n            }\n        }\n        return result;\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        double begin = 0;\n        double end = 1;\n        double center = 0;\n        double result = 0;\n        while (begin < end) {\n            center = (begin + end) / 2;\n            result = poly(xs, center);\n            if (result == 0) {\n                return center;\n            } else if (result > 0) {\n                end = center;\n            } else {\n                begin = center;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        double begin = 0;\n        double end = 1;\n        double center = (begin + end) / 2;\n        double begin2 = begin;\n        double end2 = end;\n        double center2 = (begin2 + end2) / 2;\n        double begin3 = begin2;\n        double end3 = end2;\n        double center3 = (begin3 + end3) / 2;\n        double begin4 = begin3;\n        double end4 = end3;\n        double center4 = (begin4 + end4) / 2;\n        double begin5 = begin4;\n        double end5 = end4;\n        double center5 = (begin5 + end5) / 2;\n        double begin6 = begin5;\n        double end6 = end5;\n        double center6 = (begin6 + end6) / 2;\n        double begin7 = begin6;\n        double end7 = end6;\n        double center7 = (begin7 + end7) / 2;\n        double begin8 = begin7;\n        double end8 = end7;\n        double center8 = (begin8 + end8) / 2;\n        double begin9 = begin8;\n        double end9 = end8;\n        double center9 = (begin9 + end9) / 2;\n        double begin10 = begin9;\n        double end10 = end9;\n        double center10 = (begin10 + end10) / 2;\n        double begin11 = begin10;\n        double end11 = end10;\n        double center11 = (begin11 + end11) / 2;\n        double begin12 = begin11;\n        double end12 = end11;\n        double center12 = (begin12 + end12) / 2;\n        double begin13 = begin12;\n        double end13 = end12;\n        double center13 = (begin13 + end13) / 2;\n        double begin14 = begin13;\n        double end14 = end13;\n        double center14 = (begin14 + end14) / 2;\n        double begin15 = begin14;\n        double end15 = end14;\n        double center15 = (begin15 + end15) / 2;\n        double begin16 = begin15;\n        double end16 = end15;\n        double center16 = (begin16 + end16) / 2;\n        double begin17 = begin16;\n        double end17 = end16;\n        double center17 = (begin17 + end17) / 2;\n        double begin18 = begin17;\n        double end18 = end17;\n        double center18 = (begin18 + end18) / 2;\n        double begin19 = begin18;\n        double end19 = end18;\n        double center19 = (begin19 + end19) / 2;\n        double begin20 = begin19;\n        double end20 = end19;\n        double center20 = (begin20 + end20) / 2;\n        double begin21 = begin20;\n        double end21 = end20;\n        double center21 = (begin21 + end21) / 2;\n        double begin22 = begin21;\n        double end22 = end21;\n        double center22 = (begin22 + end22) / 2;\n        double begin23 = begin22;\n        double end23 = end22;\n        double center23 = (begin23 + end23) / 2;\n        double begin24 = begin23;\n        double end24 = end23;\n        double center24 = (begin24 + end24) / 2;\n        double begin25 = begin24;\n        double end25 = end24;\n        double center25 = (begin25 + end25) / 2;\n        double begin26 = begin25;\n        double end26 = end25;\n        double center26 = (begin26 + end26) / 2;\n        double begin27 = begin26;\n        double end27 = end26;\n        double center27 = (begin27 + end27) / 2;\n        double begin28 = begin27;\n        double end28 = end27;\n        double center28 = (begin28 + end28) / 2;\n        double begin29 = begin28;\n        double end29 = end28;\n        double center29 = (begin29 + end29) / 2;\n        double begin30 = begin29;\n        double end30 = end29;\n        double center30 = (begin30 + end30) / 2;\n        double begin31 = begin30;\n        double end31 = end30;\n        double center31 = (begin31 + end31) / 2;\n        double begin32 = begin31;\n        double end32 = end31;\n        double center32 = (begin32 + end32) / 2;\n        double begin33 = begin32;\n        double end33 = end32;\n        double center33 = (begin33 + end33) / 2;\n        double begin34 = begin33;\n        double end34 = end33;\n        double center34 = (begin34 + end34) / 2;\n        double begin35 = begin34;\n        double end35 = end34;\n        double center35 = (begin35 + end35) / 2;\n        double begin36 = begin35;\n        double end36 = end35;\n        double center36 = (begin36 + end36) / 2;\n        double begin37 = begin36;\n        double end37 = end36;\n        double center37 = (begin37 + end37) / 2;\n        double begin38 = begin37;\n        double end38 = end37;\n        double center38 = (begin38 + end38) / 2;\n        double begin39 = begin38;\n        double end39 = end38;\n        double center39 = (begin39 + end39) / 2;\n        double begin40 = begin39;\n        double end40 = end39;\n        double center40 = (begin40 + end40) / 2;\n        double begin41 = begin40;\n        double end41 = end40;\n        double center41 = (begin41 + end41) / 2;\n        double begin42 = begin41;\n        double end42 = end41;\n        double center42 = (begin42 + end42) / 2;\n        double begin43 = begin42;\n        double end43 = end42;\n        double center43 = (begin43 + end43) / 2;\n        double begin44 = begin43;\n        double end44 = end43;\n        double center44 = (begin44 + end44) / 2;\n        double begin45 = begin44;\n        double end45 = end44;\n        double center45 = (begin45 + end45) / 2;\n        double begin46 = begin45;\n        double end46 = end45;\n        double center46 = (begin46 + end46) / 2;\n        double begin47 = begin46;\n        double end47 = end46;\n        double center47 = (begin47 + end47) / 2;\n        double begin48 = begin47;\n        double end48 = end47;\n        double center48 = (begin48 + end48) / 2;\n        double begin49 = begin48;\n        double end49 = end48;\n        double center49 = (begin49 + end49) / 2;\n        double begin5"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(i, i);\n        }\n        return result;\n    }\n    \n    public double findZero(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    public double findZero(List<Double> xs, double x, double y) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i) * Math.pow(y, i);\n        }\n        return result;\n    }\n    \n    public double findZero(List<Double> xs, double x, double y, double z) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i) * Math.pow(y, i) * Math.pow(z, i);\n        }\n        return result;\n    }\n    \n    public double findZero(List<Double> xs, double x, double y, double z, double w) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i) * Math.pow(y, i) * Math.pow(z, i) * Math.pow(w, i);\n        }\n        return result;\n    }\n    \n    public double findZero(List<Double> xs, double x, double y, double z, double w, double u) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i) * Math.pow(y, i) * Math.pow(z, i) * Math.pow(w, i) * Math.pow(u, i);\n        }\n        return result;\n    }\n    \n    public double findZero(List<Double> xs, double x, double y, double z, double w, double u, double v) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i) * Math.pow(y, i) * Math.pow(z, i) * Math.pow(w, i) * Math.pow(u, i) * Math.pow(v, i);\n        }\n        return result;\n    }\n    \n    public double findZero(List<Double> xs, double x, double y, double z, double w, double u, double v, double w) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i) * Math.pow(y, i) * Math.pow(z, i) * Math.pow(w, i) * Math.pow(u, i) * Math.pow(v, i) * Math.pow(w, i);\n        }\n        return result;\n    }\n    \n    public double findZero(List<Double> xs, double x, double y, double z, double w, double u, double v, double w, double u) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i) * Math.pow(y, i) * Math.pow(z, i) * Math.pow(w, i) * Math.pow(u, i) * Math.pow(v, i) * Math.pow(w, i) * Math.pow(u, i);\n        }\n        return result;\n    }\n    \n    public double findZero(List<Double> xs, double x, double y, double z, double w, double u, double v, double w, double u, double v) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i) * Math.pow(y, i) * Math.pow(z, i) * Math.pow(w, i) * Math.pow(u, i) * Math.pow(v, i) * Math.pow(w, i) * Math.pow(u, i) * Math.pow(v, i);\n        }\n        return result;\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(i, i);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(i, 2);\n        }\n        return result;\n    }\n    \n    public double findZero(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    public double findZero(List<Double> xs, double x, double y) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i) * Math.pow(y, i);\n        }\n        return result;\n    }\n    \n    public double findZero(List<Double> xs, double x, double y, double z) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i) * Math.pow(y, i) * Math.pow(z, i);\n        }\n        return result;\n    }\n    \n    public double findZero(List<Double> xs, double x, double y, double z, double w) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i) * Math.pow(y, i) * Math.pow(z, i) * Math.pow(w, i);\n        }\n        return result;\n    }\n    \n    public double findZero(List<Double> xs, double x, double y, double z, double w, double u) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i) * Math.pow(y, i) * Math.pow(z, i) * Math.pow(w, i) * Math.pow(u, i);\n        }\n        return result;\n    }\n    \n    public double findZero(List<Double> xs, double x, double y, double z, double w, double u, double v) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i) * Math.pow(y, i) * Math.pow(z, i) * Math.pow(w, i) * Math.pow(u, i) * Math.pow(v, i);\n        }\n        return result;\n    }\n    \n    public double findZero(List<Double> xs, double x, double y, double z, double w, double u, double v, double w) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i) * Math.pow(y, i) * Math.pow(z, i) * Math.pow(w, i) * Math.pow(u, i) * Math.pow(v, i) * Math.pow(w, i);\n        }\n        return result;\n    }\n    \n    public double findZero(List<Double> xs, double x, double y, double z, double w, double u, double v, double w, double u) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i) * Math.pow(y, i) * Math.pow(z, i) * Math.pow(w, i) * Math.pow(u, i) * Math.pow(v, i) * Math.pow(w, i) * Math.pow(u, i);\n        }\n        return result;\n    }\n    \n    public double findZero(List<Double> xs, double x, double y, double z, double w, double u, double v, double w, double u, double v) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i) * Math.pow(y, i) * Math.pow(z, i) * Math.pow(w, i) * Math.pow(u, i) * Math.pow(v, i) * Math.pow(w, i) * Math.pow(u, i) * Math.pow(v, i);\n        }\n        return result;\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) == 0) {\n                result = i;\n                break;\n            }\n        }\n        return result;\n    }\n    \n    public double findZero(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) == 0) {\n                result = i;\n                break;\n            }\n        }\n        return result;\n    }\n    \n    public double findZero(List<Double> xs, double x, double y) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) == 0) {\n                result = i;\n                break;\n            }\n        }\n        return result;\n    }\n    \n    public double findZero(List<Double> xs, double x, double y, double z) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) == 0) {\n                result = i;\n                break;\n            }\n        }\n        return result;\n    }\n    \n    public double findZero(List<Double> xs, double x, double y, double z, double w) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) == 0) {\n                result = i;\n                break;\n            }\n        }\n        return result;\n    }\n    \n    public double findZero(List<Double> xs, double x, double y, double z, double w, double u) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) == 0) {\n                result = i;\n                break;\n            }\n        }\n        return result;\n    }\n    \n    public double findZero(List<Double> xs, double x, double y, double z, double w, double u, double v) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) == 0) {\n                result = i;\n                break;\n            }\n        }\n        return result;\n    }\n    \n    public double findZero(List<Double> xs, double x, double y, double z, double w, double u, double v, double w) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) == 0) {\n                result = i;\n                break;\n            }\n        }\n        return result;\n    }\n    \n    public double findZero(List<Double> xs, double x, double y, double z, double w, double u, double v, double w, double u) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) == 0) {\n                result = i;\n                break;\n            }\n        }\n        return result;\n    }\n    \n    public double findZero(List<Double> xs, double x, double y, double z, double w, double u, double v, double w, double u, double v) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) == 0) {\n                result = i;\n                break;\n            }\n        }\n        return result;\n    }\n    \n    public double findZero(List<Double> xs, double x, double y, double z, double w, double u, double v, double w, double u, double v, double w) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) == 0) {\n                result = i;\n                break;\n            }\n        }\n        return result;\n    }\n    \n    public double findZero(List<Double> xs, double x, double y, double z, double w, double u, double v, double w, double u, double v, double w, double u) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) == 0) {\n                result = i;\n                break;\n            }\n        }\n        return result;\n    }\n    \n    public double findZero(List<Double> xs, double x, double y, double z, double w, double u, double v, double w, double u, double v, double w, double u, double v, double w) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) == 0) {\n                result = i;\n                break;\n            }\n        }\n        return result;\n    }\n    \n    public double findZero(List<Double> xs, double x, double y, double z, double w, double u, double v, double w, double u, double v, double w, double u, double v, double w, double u, double v, double w, double u) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) == 0) {\n                result = i;\n                break;\n            }\n        }\n        return result;\n    }\n    \n    public double findZero(List<Double> xs, double x, double y, double z, double w, double u, double v, double w, double u, double v, double w, double u, double v, double w, double u, double v, double w, double u, double v, double w, double u, double v, double w) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) == 0) {\n                result = i;\n                break;\n            }\n        }\n        return result;\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        double begin = 0, end = 1;\n        double center = (begin + end) / 2;\n        double result = 0;\n        while (Math.abs(result) > 1e-9) {\n            result = poly(xs, center);\n            if (result == 0) {\n                return center;\n            }\n            if (result < 0) {\n                end = center;\n            } else {\n                begin = center;\n            }\n            center = (begin + end) / 2;\n        }\n        return center;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(i, 2);\n        }\n        return result;\n    }\n    \n    public double findZero(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    public double findZero(List<Double> xs, double x, double y) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i) * Math.pow(y, i);\n        }\n        return result;\n    }\n    \n    public double findZero(List<Double> xs, double x, double y, double z) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i) * Math.pow(y, i) * Math.pow(z, i);\n        }\n        return result;\n    }\n    \n    public double findZero(List<Double> xs, double x, double y, double z, double w) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i) * Math.pow(y, i) * Math.pow(z, i) * Math.pow(w, i);\n        }\n        return result;\n    }\n    \n    public double findZero(List<Double> xs, double x, double y, double z, double w, double u) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i) * Math.pow(y, i) * Math.pow(z, i) * Math.pow(w, i) * Math.pow(u, i);\n        }\n        return result;\n    }\n    \n    public double findZero(List<Double> xs, double x, double y, double z, double w, double u, double v) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i) * Math.pow(y, i) * Math.pow(z, i) * Math.pow(w, i) * Math.pow(u, i) * Math.pow(v, i);\n        }\n        return result;\n    }\n    \n    public double findZero(List<Double> xs, double x, double y, double z, double w, double u, double v, double w) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i) * Math.pow(y, i) * Math.pow(z, i) * Math.pow(w, i) * Math.pow(u, i) * Math.pow(v, i) * Math.pow(w, i);\n        }\n        return result;\n    }\n    \n    public double findZero(List<Double> xs, double x, double y, double z, double w, double u, double v, double w, double u) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i) * Math.pow(y, i) * Math.pow(z, i) * Math.pow(w, i) * Math.pow(u, i) * Math.pow(v, i) * Math.pow(w, i) * Math.pow(u, i);\n        }\n        return result;\n    }\n    \n    public double findZero(List<Double> xs, double x, double y, double z, double w, double u, double v, double w, double u, double v) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i) * Math.pow(y, i) * Math.pow(z, i) * Math.pow(w, i) * Math.pow(u, i) * Math.pow(v, i) * Math.pow(w, i) * Math.pow(u, i) * Math.pow(v, i);\n        }\n        return result;\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> ans = new ArrayList<>();\n        int n = l.size();\n        int i = 0;\n        int j = n - 1;\n        while (i < j) {\n            if (l.get(i) > l.get(j)) {\n                int temp = l.get(i);\n                l.set(i, l.get(j));\n                l.set(j, temp);\n            }\n            if (l.get(i) == l.get(j)) {\n                i++;\n                j--;\n            } else {\n                ans.add(l.get(i));\n                i++;\n            }\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n        String pattern = \"([0-9]+)\";\n        Pattern p = Pattern.compile(pattern);\n        Matcher m = p.matcher(l.toString());\n        while (m.find()) {\n            result.add(Integer.parseInt(m.group()));\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        int len = l.size();\n        int mid = len / 2;\n        int left = 0;\n        int right = mid;\n        while (left < right) {\n            if (l.get(left) > l.get(right)) {\n                result.add(l.get(left));\n                left++;\n            } else {\n                result.add(l.get(right));\n                right--;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        int n = l.size();\n        int i = 0;\n        int j = n - 1;\n        while(i < j){\n            if(l.get(i) > l.get(j)){\n                int temp = l.get(i);\n                l.set(i, l.get(j));\n                l.set(j, temp);\n                result.add(l.get(i));\n                result.add(l.get(j));\n                i++;\n                j--;\n            }\n            else{\n                i++;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        List<Integer> thirds = new ArrayList<>();\n        for(int i = 0; i < l.size(); i++) {\n            if(i % 3 == 0) {\n                thirds.add(l.get(i));\n            }\n        }\n        for(int i = 0; i < l.size(); i++) {\n            if(i % 3 == 1) {\n                result.add(l.get(i));\n            }\n        }\n        for(int i = 0; i < l.size(); i++) {\n            if(i % 3 == 2) {\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        int n = l.size();\n        int[] arr = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr[i] = l.get(i);\n        }\n        Arrays.sort(arr);\n        int[] arr2 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr2[i] = arr[i];\n        }\n        List<Integer> res = new ArrayList<>();\n        for(int i = 0; i < n; i++) {\n            res.add(arr2[i]);\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        List<Integer> thirds = new ArrayList<>();\n        for(int i = 0; i < l.size(); i++) {\n            if(i % 3 == 0) {\n                thirds.add(l.get(i));\n            }\n        }\n        for(int i = 0; i < l.size(); i++) {\n            if(i % 3 == 1) {\n                result.add(l.get(i));\n            }\n        }\n        for(int i = 0; i < l.size(); i++) {\n            if(i % 3 == 2) {\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> ans = new ArrayList<>();\n        int n = l.size();\n        int i = 0;\n        while(i < n){\n            int j = i+1;\n            int k = n-1;\n            while(j < k){\n                if(l.get(j) > l.get(i)){\n                    int temp = l.get(j);\n                    l.set(j, l.get(i));\n                    l.set(i, temp);\n                }\n                j++;\n            }\n            ans.add(l.get(i));\n            i++;\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        if (l.size() < 3) {\n            return l;\n        }\n        Collections.sort(l);\n        return l.subList(2, l.size());\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                result.add(l.get(i));\n            }\n        }\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 != 0) {\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> res = new ArrayList<>();\n        int n = l.size();\n        int mid = n / 2;\n        for (int i = 0; i < mid; i++) {\n            res.add(l.get(i));\n        }\n        for (int i = mid; i < n; i++) {\n            res.add(l.get(i - mid));\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int count = 0;\n        while (i < l.size()) {\n            if (l.get(i) == 1000) {\n                count++;\n                i++;\n            } else if (l.get(i) == 900) {\n                count++;\n                i++;\n            } else if (l.get(i) == 500) {\n                count++;\n                i++;\n            } else if (l.get(i) == 400) {\n                count++;\n                i++;\n            } else if (l.get(i) == 100) {\n                count++;\n                i++;\n            } else if (l.get(i) == 90) {\n                count++;\n                i++;\n            } else if (l.get(i) == 50) {\n                count++;\n                i++;\n            } else if (l.get(i) == 40) {\n                count++;\n                i++;\n            } else if (l.get(i) == 10) {\n                count++;\n                i++;\n            } else if (l.get(i) == 9) {\n                count++;\n                i++;\n            } else if (l.get(i) == 5) {\n                count++;\n                i++;\n            } else if (l.get(i) == 4) {\n                count++;\n                i++;\n            } else if (l.get(i) == 1) {\n                count++;\n                i++;\n            } else {\n                count++;\n                result.add(l.get(i));\n                i++;\n            }\n        }\n        while (j < count) {\n            result.add(3000);\n            j++;\n        }\n        while (k < count) {\n            result.add(500);\n            k++;\n        }\n        while (i < l.size()) {\n            if (l.get(i) == 1000) {\n                count++;\n                i++;\n            } else if (l.get(i) == 900) {\n                count++;\n                i++;\n            } else if (l.get(i) == 500) {\n                count++;\n                i++;\n            } else if (l.get(i) == 400) {\n                count++;\n                i++;\n            } else if (l.get(i) == 100) {\n                count++;\n                i++;\n            } else if (l.get(i) == 90) {\n                count++;\n                i++;\n            } else if (l.get(i) == 50) {\n                count++;\n                i++;\n            } else if (l.get(i) == 40) {\n                count++;\n                i++;\n            } else if (l.get(i) == 10) {\n                count++;\n                i++;\n            } else if (l.get(i) == 9) {\n                count++;\n                i++;\n            } else if (l.get(i) == 5) {\n                count++;\n                i++;\n            } else if (l.get(i) == 4) {\n                count++;\n                i++;\n            } else if (l.get(i) == 1) {\n                count++;\n                i++;\n            } else {\n                count++;\n                result.add(l.get(i));\n                i++;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> res = new ArrayList<>();\n        if(l.size() == 0) return res;\n        int n = l.size();\n        int[] arr = new int[n];\n        for(int i = 0; i < n; i++) arr[i] = l.get(i);\n        Arrays.sort(arr);\n        for(int i = 0; i < n; i++) res.add(arr[i]);\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        int len = l.size();\n        int third = len / 3;\n        for (int i = 0; i < third; i++) {\n            result.add(l.get(i));\n        }\n        for (int i = third; i < len; i++) {\n            result.add(l.get(i));\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            int j = i + 1;\n            while (j < l.size()) {\n                if (l.get(i) > l.get(j)) {\n                    int temp = l.get(i);\n                    l.set(i, l.get(j));\n                    l.set(j, temp);\n                }\n                j++;\n            }\n            result.add(l.get(i));\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> ans = new ArrayList<>();\n        int n = l.size();\n        int i = 0;\n        int j = n - 1;\n        while(i < j) {\n            if(l.get(i) > l.get(j)) {\n                int temp = l.get(i);\n                l.set(i, l.get(j));\n                l.set(j, temp);\n            }\n            i++;\n            j--;\n        }\n        for(int k = 0; k < n; k++) {\n            ans.add(l.get(k));\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        int len = l.size();\n        int mid = len / 3;\n        int left = 0;\n        int right = mid;\n        int i = 0;\n        while (left < right) {\n            result.add(l.get(left));\n            result.add(l.get(right));\n            result.add(l.get(mid));\n            left++;\n            right--;\n            mid = (left + right) / 2;\n            i++;\n        }\n        for (int j = 0; j < len; j++) {\n            result.add(l.get(j));\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        if (l == null || l.size() < 3) {\n            return l;\n        }\n        Collections.sort(l);\n        return l.subList(2, l.size());\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> ans = new ArrayList<>();\n        int n = l.size();\n        for (int i = 0; i < n; i++) {\n            int j = i;\n            while (j < n && l.get(j) > l.get(i)) {\n                j++;\n            }\n            ans.add(l.get(i));\n            ans.add(l.get(j));\n            ans.add(l.get(n-1));\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (!result.contains(l.get(i))) {\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Map<Integer, Integer> map = new HashMap<>();\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (!map.containsKey(l.get(i))) {\n                map.put(l.get(i), 1);\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (map.containsKey(l.get(i))) {\n                map.put(l.get(i), map.get(l.get(i)) + 1);\n            } else {\n                map.put(l.get(i), 1);\n            }\n        }\n        for (int i = 0; i < l.size(); i++) {\n            if (map.get(l.get(i)) == 1) {\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        List<Integer> res = new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n        for(int i : l) {\n            if(!set.contains(i)) {\n                res.add(i);\n                set.add(i);\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (!result.contains(l.get(i))) {\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> s = new HashSet<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (!s.contains(l.get(i))) {\n                s.add(l.get(i));\n            }\n        }\n        return new ArrayList<Integer>(s);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Map<Integer, Integer> map = new HashMap<>();\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (!map.containsKey(l.get(i))) {\n                map.put(l.get(i), 1);\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                if (l.get(i) == l.get(j)) {\n                    l.remove(i);\n                    l.remove(j);\n                    i--;\n                    j--;\n                }\n            }\n        }\n        res.addAll(l);\n        return res;\n    }\n\n    public boolean isPalindrome(String s) {\n        List<Integer> l = new ArrayList<>();\n        for (int i = 0; i < s.length(); i++) {\n            l.add(s.charAt(i) - '0');\n        }\n        return unique(l).size() == l.size();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (!set.contains(l.get(i))) {\n                result.add(l.get(i));\n                set.add(l.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        List<Integer> res = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (map.containsKey(l.get(i))) {\n                map.put(l.get(i), map.get(l.get(i)) + 1);\n            } else {\n                map.put(l.get(i), 1);\n            }\n        }\n        for (int i = 0; i < l.size(); i++) {\n            if (map.get(l.get(i)) == 1) {\n                res.add(l.get(i));\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (!result.contains(l.get(i))) {\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Map<Integer, Integer> map = new HashMap<>();\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (map.containsKey(l.get(i))) {\n                map.put(l.get(i), map.get(l.get(i)) + 1);\n            } else {\n                map.put(l.get(i), 1);\n            }\n        }\n        for (int i = 0; i < l.size(); i++) {\n            if (map.get(l.get(i)) == 1) {\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (!result.contains(l.get(i))) {\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n        for (int i : l) {\n            if (!set.contains(i)) {\n                result.add(i);\n                set.add(i);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (result.indexOf(l.get(i)) == -1) {\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> s = new HashSet<Integer>();\n        for (int i : l) {\n            if (!s.contains(i)) {\n                s.add(i);\n            }\n        }\n        return new ArrayList<Integer>(s);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (!res.contains(l.get(i))) {\n                res.add(l.get(i));\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Map<Integer, Integer> map = new HashMap<>();\n        List<Integer> res = new ArrayList<>();\n        for (Integer i : l) {\n            if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1);\n            }\n        }\n        for (Integer i : map.keySet()) {\n            if (map.get(i) == 1) {\n                res.add(i);\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Map<Integer, Integer> map = new HashMap<>();\n        List<Integer> result = new ArrayList<>();\n        for (Integer i : l) {\n            if (map.containsKey(i)) {\n                map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i, 1);\n            }\n        }\n        for (Integer i : map.keySet()) {\n            if (map.get(i) == 1) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (!result.contains(l.get(i))) {\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = Integer.MIN_VALUE;\n        for(int i = 0; i < l.size(); i++) {\n            if(l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = Integer.MIN_VALUE;\n        for (int i : l) {\n            if (i > max) {\n                max = i;\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = Integer.MIN_VALUE;\n        for(int i = 0; i < l.size(); i++) {\n            if(l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = Integer.MIN_VALUE;\n        for (int i : l) {\n            if (i > max) {\n                max = i;\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = Integer.MIN_VALUE;\n        for (int i : l) {\n            if (i > max)\n                max = i;\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n\n    public String fractionToDecimal(int numerator, int denominator) {\n        if (denominator == 0) {\n            return \"0\";\n        }\n        int num = numerator;\n        int den = denominator;\n        String res = \"\";\n        while (num != 0) {\n            int rem = num % den;\n            num /= den;\n            res = rem + \" \" + res;\n        }\n        return res;\n    }\n\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = Integer.MIN_VALUE;\n        for (int i : l) {\n            if (i > max) {\n                max = i;\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = Integer.MIN_VALUE;\n        for (int i : l) {\n            if (i > max) {\n                max = i;\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = Integer.MIN_VALUE;\n\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < l.size(); i++) {\n            max = Math.max(max, l.get(i));\n        }\n        return max;\n    }\n\n    public int maxProfit(int[] prices) {\n        int max = 0;\n        for (int i = 1; i < prices.length; i++) {\n            max = Math.max(max, prices[i] - prices[i - 1]);\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int fizz = 0;\n        int buzz = 0;\n        int fizzBuzz = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 3 == 0) {\n                fizz++;\n            }\n            if (i % 5 == 0) {\n                buzz++;\n            }\n            if (i % 3 == 0 && i % 5 == 0) {\n                fizzBuzz++;\n            }\n        }\n        return fizzBuzz;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int result = 1;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                result = result * i;\n                if (i % 3 == 0) {\n                    result = result / 3;\n                } else if (i % 5 == 0) {\n                    result = result / 5;\n                }\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        System.out.println(fizzBuzz(n));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        if (n == 0) return 0;\n        if (n % 3 == 0 && n % 5 == 0) return 3;\n        if (n % 3 == 0) return 3;\n        if (n % 5 == 0) return 5;\n        return n;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        if(n == 0) return 0;\n        int[] arr = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr[i] = i + 1;\n        }\n        int max = 0;\n        for(int i = 0; i < n; i++) {\n            if(arr[i] % 3 == 0 && arr[i] % 5 == 0) {\n                arr[i] = arr[i] / 3 * 3 + arr[i] / 5 * 5;\n            }\n            else if(arr[i] % 3 == 0) {\n                arr[i] = arr[i] / 3 * 3;\n            }\n            else if(arr[i] % 5 == 0) {\n                arr[i] = arr[i] / 5 * 5;\n            }\n            max = Math.max(max, arr[i]);\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        if (n == 0)\n            return 0;\n        if (n % 3 == 0 && n % 5 == 0)\n            return 3;\n        if (n % 3 == 0)\n            return 3;\n        if (n % 5 == 0)\n            return 5;\n        return n;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n % 3 == 0 && n % 5 == 0) {\n            return 3;\n        }\n        if (n % 3 == 0) {\n            return 3;\n        }\n        if (n % 5 == 0) {\n            return 5;\n        }\n        return n;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int result = 0;\n        if (n % 3 == 0) {\n            result += 3;\n        }\n        if (n % 5 == 0) {\n            result += 5;\n        }\n        if (result == 0) {\n            result = n;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n % 15 == 0) {\n            return 3;\n        }\n        if (n % 5 == 0) {\n            return 5;\n        }\n        if (n % 3 == 0) {\n            return 7;\n        }\n        return n;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        if (n % 3 == 0 && n % 5 == 0) {\n            return 3;\n        } else if (n % 3 == 0) {\n            return 3;\n        } else if (n % 5 == 0) {\n            return 5;\n        } else {\n            return n;\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int result = 0;\n        if (n % 3 == 0 && n % 5 == 0) {\n            result = 3;\n        } else if (n % 3 == 0) {\n            result = 3;\n        } else if (n % 5 == 0) {\n            result = 5;\n        } else {\n            result = n;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int result = 0;\n        if(n % 3 == 0 && n % 5 == 0)\n            result = 3;\n        else if(n % 3 == 0)\n            result = 3;\n        else if(n % 5 == 0)\n            result = 5;\n        else\n            result = n;\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        if (n == 0) return 0;\n        if (n % 3 == 0) return 3;\n        if (n % 5 == 0) return 5;\n        return n;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        Solution s = new Solution();\n        System.out.println(s.fizzBuzz(n));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        if (n % 3 == 0 && n % 5 == 0) {\n            return 3;\n        } else if (n % 3 == 0) {\n            return 3;\n        } else if (n % 5 == 0) {\n            return 5;\n        } else {\n            return n;\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = i;\n        }\n        return fizzBuzz(arr, 0, n - 1);\n    }\n\n    public int fizzBuzz(int[] arr, int start, int end) {\n        if (start == end) {\n            return arr[start];\n        }\n        int mid = (start + end) / 2;\n        int fizz = fizzBuzz(arr, start, mid);\n        int buzz = fizzBuzz(arr, mid + 1, end);\n        int sum = fizz + buzz;\n        if (sum % 3 == 0) {\n            return \"Fizz\";\n        } else if (sum % 5 == 0) {\n            return \"Buzz\";\n        } else {\n            return arr[mid];\n        }\n    }\n\n    public static void main(String[] args) {\n        int n = 10;\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = i;\n        }\n        System.out.println(fizzBuzz(arr, 0, n - 1));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        if (n == 0) return 0;\n        if (n % 3 == 0) return 3;\n        if (n % 5 == 0) return 5;\n        return n;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int result = 0;\n        if (n % 3 == 0) {\n            result = result + 3;\n        }\n        if (n % 5 == 0) {\n            result = result + 5;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        if(n == 0) return 0;\n        if(n % 3 == 0 && n % 5 == 0) return 3;\n        if(n % 3 == 0) return 3;\n        if(n % 5 == 0) return 5;\n        return n;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int result = 0;\n        if (n % 3 == 0) {\n            result += 3;\n        }\n        if (n % 5 == 0) {\n            result += 5;\n        }\n        if (n % 3 == 0 && n % 5 == 0) {\n            result += 15;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int result = 0;\n        if (n % 15 == 0) {\n            result = 3;\n        } else if (n % 5 == 0) {\n            result = 5;\n        } else if (n % 3 == 0) {\n            result = 7;\n        } else {\n            result = n;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int result = 0;\n        if (n % 15 == 0) {\n            result = 3;\n        } else if (n % 5 == 0) {\n            result = 5;\n        } else if (n % 3 == 0) {\n            result = 7;\n        } else {\n            result = n;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 2 == 0) {\n                res.add(l.get(i));\n            }\n        }\n        return res;\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Integer> l = new ArrayList<>();\n        l.add(1);\n        l.add(2);\n        l.add(3);\n        l.add(4);\n        l.add(5);\n        l.add(6);\n        l.add(7);\n        l.add(8);\n        l.add(9);\n        l.add(10);\n        System.out.println(s.sortEven(l));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> res = new ArrayList<>();\n        int len = l.size();\n        for (int i = 0; i < len; i++) {\n            int num = l.get(i);\n            if (num % 2 == 0) {\n                res.add(num);\n            }\n        }\n        return res;\n    }\n\n    public List<List<Integer>> threeSum(int[] nums) {\n        List<List<Integer>> res = new ArrayList<>();\n        if (nums == null || nums.length < 3) {\n            return res;\n        }\n        Arrays.sort(nums);\n        for (int i = 0; i < nums.length - 2; i++) {\n            if (i > 0 && nums[i] == nums[i - 1]) {\n                continue;\n            }\n            int left = i + 1;\n            int right = nums.length - 1;\n            while (left < right) {\n                if (nums[i] + nums[left] + nums[right] == 0) {\n                    List<Integer> temp = new ArrayList<>();\n                    temp.add(nums[i]);\n                    temp.add(nums[left]);\n                    temp.add(nums[right]);\n                    res.add(temp);\n                    while (left < right && nums[left] == nums[left + 1]) {\n                        left++;\n                    }\n                    while (left < right && nums[right] == nums[right - 1]) {\n                        right--;\n                    }\n                    left++;\n                    right--;\n                } else if (nums[i] + nums[left] + nums[right] < 0) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n        return res;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {-1, 0, 1, 2, -1, -4};\n        Solution solution = new Solution();\n        List<List<Integer>> res = solution.threeSum(nums);\n        System.out.println(res);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> even = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 2 == 0) {\n                even.add(l.get(i));\n            }\n        }\n        return even;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n        int len = l.size();\n        int start = 0;\n        int end = 0;\n        int count = 0;\n        while (end < len) {\n            if (l.get(end) % 2 == 0) {\n                result.add(l.get(end));\n                end++;\n            } else {\n                if (count == 0) {\n                    start = end;\n                    count++;\n                } else {\n                    result.add(l.get(start));\n                    result.add(l.get(end));\n                    end++;\n                    count = 0;\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 2 == 0) {\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 2 == 0) {\n                res.add(l.get(i));\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> even = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 2 == 0) {\n                even.add(l.get(i));\n            }\n        }\n        return even;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 2 == 0) {\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> even = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 2 == 0) {\n                even.add(l.get(i));\n            }\n        }\n        return even;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 2 == 0) {\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 2 == 0) {\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> l = new ArrayList<Integer>();\n        l.add(1);\n        l.add(2);\n        l.add(3);\n        l.add(4);\n        l.add(5);\n        l.add(6);\n        l.add(7);\n        l.add(8);\n        l.add(9);\n        l.add(10);\n        Solution s = new Solution();\n        List<Integer> result = s.sortEven(l);\n        for (int i = 0; i < result.size(); i++) {\n            System.out.println(result.get(i));\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> ans = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 2 == 0) {\n                ans.add(l.get(i));\n            }\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> res = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 2 == 0) {\n                res.add(l.get(i));\n            }\n        }\n        return res;\n    }\n\n    public List<Integer> threeSum(int[] nums) {\n        List<Integer> res = new ArrayList<Integer>();\n        Arrays.sort(nums);\n        for (int i = 0; i < nums.length - 2; i++) {\n            if (nums[i] > 0) {\n                break;\n            }\n            if (i > 0 && nums[i] == nums[i - 1]) {\n                continue;\n            }\n            int l = i + 1;\n            int r = nums.length - 1;\n            while (l < r) {\n                int sum = nums[i] + nums[l] + nums[r];\n                if (sum == 0) {\n                    res.add(nums[i]);\n                    res.add(nums[l]);\n                    res.add(nums[r]);\n                    l++;\n                    r--;\n                } else if (sum < 0) {\n                    l++;\n                } else {\n                    r--;\n                }\n            }\n        }\n        return res;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {-1, 0, 1, 2, -1, -4};\n        Solution solution = new Solution();\n        System.out.println(solution.threeSum(nums));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> res = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 2 == 0) {\n                res.add(l.get(i));\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 2 == 0) {\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 2 == 0) {\n                res.add(l.get(i));\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 2 == 0) {\n                res.add(l.get(i));\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 2 == 0) {\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> even = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 2 == 0) {\n                even.add(l.get(i));\n            }\n        }\n        return even;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> even = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 2 == 0) {\n                even.add(l.get(i));\n            }\n        }\n        return even;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(0) + groups.get(i).substring(1));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split\n\n```\n"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(0) + groups.get(i).substring(1));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(0) + groups.get(i).substring(1));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(0) + groups.get(i).substring(1));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.encodeCyclic(\"aab\"));\n        System.out.println(s.decodeCyclic(\"aba\"));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        int[] f = new int[n+1];\n        f[0] = 0;\n        f[1] = 1;\n        for(int i = 2; i <= n; i++) {\n            if(f[i] == 0) {\n                f[i] = f[i-1] + f[i-2];\n            }\n        }\n        return f[n];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        int[] prime = new int[n + 1];\n        prime[0] = 2;\n        prime[1] = 3;\n        for (int i = 2; i <= n; i++) {\n            if (prime[i] == 0) {\n                for (int j = 2 * i; j <= n; j += i) {\n                    prime[j] = i;\n                }\n            }\n        }\n        return prime[n];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        int[] prime = new int[n+1];\n        prime[0] = 0;\n        prime[1] = 1;\n        for(int i = 2; i <= n; i++) {\n            if(prime[i] == 0) {\n                for(int j = 2; j <= i; j++) {\n                    if(i % j == 0) {\n                        prime[i] = j;\n                        break;\n                    }\n                }\n            }\n        }\n        return prime[n];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        int f = 0;\n        int i = 1;\n        int j = 2;\n        while (i <= n) {\n            if (j % i == 0) {\n                f = j;\n                i = j;\n                j = f + j;\n            }\n            else {\n                i++;\n            }\n        }\n        return f;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        int[] fib = new int[n+1];\n        fib[0] = 0;\n        fib[1] = 1;\n        for(int i = 2; i <= n; i++) {\n            if(fib[i-1] == 0) {\n                fib[i] = fib[i-2] + fib[i-1];\n            } else {\n                fib[i] = fib[i-1];\n            }\n        }\n        return fib[n];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        int f0 = 0;\n        int f1 = 1;\n        int f2 = 0;\n        int f3 = 1;\n        int f4 = 0;\n        int f5 = 1;\n        int f6 = 0;\n        int f7 = 1;\n        int f8 = 0;\n        int f9 = 1;\n        int f10 = 0;\n        int f11 = 1;\n        int f12 = 0;\n        int f13 = 1;\n        int f14 = 0;\n        int f15 = 1;\n        int f16 = 0;\n        int f17 = 1;\n        int f18 = 0;\n        int f19 = 1;\n        int f20 = 0;\n        int f21 = 1;\n        int f22 = 0;\n        int f23 = 1;\n        int f24 = 0;\n        int f25 = 1;\n        int f26 = 0;\n        int f27 = 1;\n        int f28 = 0;\n        int f29 = 1;\n        int f30 = 0;\n        int f31 = 1;\n        int f32 = 0;\n        int f33 = 1;\n        int f34 = 0;\n        int f35 = 1;\n        int f36 = 0;\n        int f37 = 1;\n        int f38 = 0;\n        int f39 = 1;\n        int f40 = 0;\n        int f41 = 1;\n        int f42 = 0;\n        int f43 = 1;\n        int f44 = 0;\n        int f45 = 1;\n        int f46 = 0;\n        int f47 = 1;\n        int f48 = 0;\n        int f49 = 1;\n        int f50 = 0;\n        int f51 = 1;\n        int f52 = 0;\n        int f53 = 1;\n        int f54 = 0;\n        int f55 = 1;\n        int f56 = 0;\n        int f57 = 1;\n        int f58 = 0;\n        int f59 = 1;\n        int f60 = 0;\n        int f61 = 1;\n        int f62 = 0;\n        int f63 = 1;\n        int f64 = 0;\n        int f65 = 1;\n        int f66 = 0;\n        int f67 = 1;\n        int f68 = 0;\n        int f69 = 1;\n        int f70 = 0;\n        int f71 = 1;\n        int f72 = 0;\n        int f73 = 1;\n        int f74 = 0;\n        int f75 = 1;\n        int f76 = 0;\n        int f77 = 1;\n        int f78 = 0;\n        int f79 = 1;\n        int f80 = 0;\n        int f81 = 1;\n        int f82 = 0;\n        int f83 = 1;\n        int f84 = 0;\n        int f85 = 1;\n        int f86 = 0;\n        int f87 = 1;\n        int f88 = 0;\n        int f89 = 1;\n        int f90 = 0;\n        int f91 = 1;\n        int f92 = 0;\n        int f93 = 1;\n        int f94 = 0;\n        int f95 = 1;\n        int f96 = 0;\n        int f97 = 1;\n        int f98 = 0;\n        int f99 = 1;\n        int f100 = 0;\n        int f101 = 1;\n        int f102 = 0;\n        int f103 = 1;\n        int f104 = 0;\n        int f105 = 1;\n        int f106 = 0;\n        int f107 = 1;\n        int f108 = 0;\n        int f109 = 1;\n        int f110 = 0;\n        int f111 = 1;\n        int f112 = 0;\n        int f113 = 1;\n        int f114 = 0;\n        int f115 = 1;\n        int f116 = 0;\n        int f117 = 1;\n        int f118 = 0;\n        int f119 = 1;\n        int f120 = 0;\n        int f121 = 1;\n        int f122 = 0;\n        int f123 = 1;\n        int f124 = 0;\n        int f125 = 1;\n        int f126 = 0;\n        int f127 = 1;\n        int f128 = 0;\n        int f129 = 1;\n        int f130 = 0;\n        int f131 = 1;\n        int f132 = 0;\n        int f133 = 1;\n        int f134 = 0;\n        int f135 = 1;\n        int f136 = 0;\n        int f137 = 1;\n        int f138 = 0;\n        int f139 = 1;\n        int f140 = 0;\n        int f141 = 1;\n        int f142 = 0;\n        int f143 = 1;\n        int f144 = 0;\n        int f145 = 1;\n        int f146 = 0;\n        int f147 = 1;\n        int f148 = 0;\n        int f149 = 1;\n        int f150 = 0;\n        int f151 = 1;\n        int f152 = 0;\n        int f153 = 1;\n        int f154 = 0;\n        int f155 = 1;\n        int f156 = 0;\n        int f157 = 1;\n        int f158 = 0;\n        int f159 = 1;\n        int f160 = 0;\n        int f161 = 1;\n        int f162 = 0;\n        int f163 = 1;\n        int f164 = 0;\n        int f165 = 1;\n        int f166 = 0;\n        int f167 = 1;\n        int f168 = 0;\n        int f169 = 1;\n        int f170 = 0;\n        int f171 = 1;\n        int f172 = 0;\n        int f173 = 1;\n        int f174 = 0;\n        int f175 = 1;\n        int f176 = 0;\n        int f177 = 1;\n        int f178 = 0;\n        int f179 = 1;\n        int f180 = 0;\n        int f181 = 1;\n        int f182 = 0;\n        int f183 = 1;\n        int f184 = 0;\n        int f185 = 1;\n        int f186 = 0;\n        int f187 = 1;\n        int f188 = 0;\n        int f189 = 1;\n        int f190 = 0;\n        int f191 = 1;\n        int f192 = 0;\n        int f193 = 1;\n        int f194 = 0;\n        int f195 = 1;\n        int f196 = 0;\n        int f197 = 1;\n        int f198 = 0;\n        int f199 = 1;\n        int f200 = 0;\n        int f201 = 1;\n        int f202 = 0;\n        int f203 = 1;\n        int f204 = 0;\n        int f205 = 1;\n        int f206 = 0;\n        int f2"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        int i = 2;\n        int j = 1;\n        while (i <= n) {\n            if (n % i == 0) {\n                j = i;\n                n = n / i;\n            }\n            i++;\n        }\n        return j;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        int[] prime = new int[n+1];\n        prime[0] = 0;\n        prime[1] = 1;\n        for(int i = 2; i <= n; i++) {\n            if(prime[i] == 0) {\n                for(int j = 2; j * i <= n; j++) {\n                    prime[i*j] = 1;\n                }\n            }\n        }\n        return prime[n];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        int[] f = new int[n+1];\n        f[0] = 0;\n        f[1] = 1;\n        for(int i = 2; i <= n; i++) {\n            if(f[i] == 0) {\n                f[i] = f[i-1] + f[i-2];\n            }\n        }\n        return f[n];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        int[] f = new int[n + 1];\n        f[0] = 0;\n        f[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            if (f[i] == 0) {\n                f[i] = f[i - 1] + f[i - 2];\n            }\n        }\n        return f[n];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        int[] fib = new int[n+1];\n        fib[0] = 0;\n        fib[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            fib[i] = fib[i-1] + fib[i-2];\n        }\n        return fib[n];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        int[] prime = new int[n+1];\n        prime[0] = 2;\n        prime[1] = 3;\n        for (int i = 2; i <= n; i++) {\n            if (prime[i] == 0) {\n                for (int j = 2; j * i <= n; j++) {\n                    prime[i] = j;\n                    break;\n                }\n            }\n        }\n        return prime[n];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        int[] prime = new int[n+1];\n        prime[0] = 0;\n        prime[1] = 1;\n        for(int i = 2; i <= n; i++) {\n            if(prime[i] == 0) {\n                for(int j = i*i; j <= n; j += i) {\n                    prime[j] = i;\n                }\n            }\n        }\n        return prime[n];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        int[] prime = new int[n+1];\n        prime[0] = 0;\n        prime[1] = 1;\n        for(int i = 2; i <= n; i++) {\n            if(prime[i] == 0) {\n                for(int j = 2; j * i <= n; j++) {\n                    prime[i*j] = 1;\n                }\n            }\n        }\n        return prime[n];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        int[] prime = new int[n+1];\n        prime[0] = 0;\n        prime[1] = 1;\n        for(int i = 2; i <= n; i++) {\n            if(prime[i] == 0) {\n                for(int j = 2; j * i <= n; j++) {\n                    prime[i*j] = 1;\n                }\n            }\n        }\n        return prime[n];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        if(n == 1)\n            return 1;\n        if(n == 2)\n            return 2;\n        int[] fib = new int[n+1];\n        fib[0] = 1;\n        fib[1] = 2;\n        for(int i = 2; i <= n; i++) {\n            fib[i] = fib[i-1] + fib[i-2];\n        }\n        return fib[n];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        int[] prime = new int[n+1];\n        prime[0] = 0;\n        prime[1] = 1;\n        for(int i = 2; i <= n; i++) {\n            if(prime[i] == 0) {\n                for(int j = 2; j * i <= n; j++) {\n                    prime[i*j] = 1;\n                }\n            }\n        }\n        return prime[n];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        int[] fib = new int[n+1];\n        fib[0] = 0;\n        fib[1] = 1;\n        for(int i = 2; i <= n; i++) {\n            fib[i] = fib[i-1] + fib[i-2];\n        }\n        return fib[n];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        int[] primes = new int[n];\n        primes[0] = 2;\n        primes[1] = 3;\n        for (int i = 2; i < n; i++) {\n            if (primes[i] == 0) {\n                primes[i] = i;\n            } else {\n                for (int j = 0; j < i; j++) {\n                    if (primes[j] * primes[i] == i) {\n                        primes[i] = j;\n                        break;\n                    }\n                }\n            }\n        }\n        return primes[n - 1];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        int f0 = 0, f1 = 1;\n        while (true) {\n            if (f0 == 0) {\n                f0 = f1;\n            }\n            if (f1 == 0) {\n                f1 = f0;\n            }\n            if (f0 == f1) {\n                return f0;\n            }\n            f0 = f1;\n            f1 = f0 + f1;\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        if (l == null || l.size() < 3) {\n            return false;\n        }\n        int sum = 0;\n        for (int i = 0; i < l.size() - 2; i++) {\n            sum += l.get(i);\n        }\n        for (int i = 0; i < l.size() - 1; i++) {\n            if (sum - l.get(i) != 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        return sum == 0;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> l = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9);\n        System.out.println(new Solution().triplesSumToZero(l));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        return sum == 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        sum += l.get(i) + l.get(j) + l.get(k);\n                    }\n                }\n            }\n        }\n        return sum == 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        return sum == 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        if (l == null || l.size() == 0) {\n            return false;\n        }\n        int sum = 0;\n        int n = l.size();\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < n; i++) {\n            sum += l.get(i);\n            map.put(sum, map.getOrDefault(sum, 0) + 1);\n        }\n        for (int i = 0; i < n; i++) {\n            if (map.get(sum - l.get(i)) == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for(int i = 0; i < l.size(); i++) {\n            for(int j = i + 1; j < l.size(); j++) {\n                for(int k = j + 1; k < l.size(); k++) {\n                    if(l.get(i) + l.get(j) + l.get(k) == 0) {\n                        sum += l.get(i) + l.get(j) + l.get(k);\n                    }\n                }\n            }\n        }\n        return sum == 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for(int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if(sum == 0) {\n            return true;\n        }\n        for(int i = 0; i < l.size(); i++) {\n            for(int j = i + 1; j < l.size(); j++) {\n                for(int k = j + 1; k < l.size(); k++) {\n                    if(l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        sum += l.get(i) + l.get(j) + l.get(k);\n                    }\n                }\n            }\n        }\n        return sum == 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        sum += l.get(i) + l.get(j) + l.get(k);\n                    }\n                }\n            }\n        }\n        return sum == 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        return sum == 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == sum) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        for (int i = 0; i < l.size(); i++) {\n            if (sum - l.get(i) == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for(int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if(sum == 0) {\n            return true;\n        }\n        for(int i = 0; i < l.size(); i++) {\n            if(sum - l.get(i) == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for(int i = 0; i < l.size(); i++) {\n            for(int j = i + 1; j < l.size(); j++) {\n                for(int k = j + 1; k < l.size(); k++) {\n                    if(l.get(i) + l.get(j) + l.get(k) == 0) {\n                        sum += l.get(i) + l.get(j) + l.get(k);\n                    }\n                }\n            }\n        }\n        return sum == 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        sum += l.get(i) + l.get(j) + l.get(k);\n                    }\n                }\n            }\n        }\n        return sum == 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        if (n == 0) return 0;\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = i + 1;\n        }\n        int[] arr2 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr2[i] = arr[i];\n        }\n        int[] arr3 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr3[i] = arr[i];\n        }\n        for (int i = 0; i < n; i++) {\n            arr3[i] = arr[i];\n        }\n        int[] arr4 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr4[i] = arr[i];\n        }\n        int[] arr5 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr5[i] = arr[i];\n        }\n        int[] arr6 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr6[i] = arr[i];\n        }\n        int[] arr7 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr7[i] = arr[i];\n        }\n        int[] arr8 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr8[i] = arr[i];\n        }\n        int[] arr9 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr9[i] = arr[i];\n        }\n        int[] arr10 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr10[i] = arr[i];\n        }\n        int[] arr11 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr11[i] = arr[i];\n        }\n        int[] arr12 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr12[i] = arr[i];\n        }\n        int[] arr13 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr13[i] = arr[i];\n        }\n        int[] arr14 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr14[i] = arr[i];\n        }\n        int[] arr15 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr15[i] = arr[i];\n        }\n        int[] arr16 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr16[i] = arr[i];\n        }\n        int[] arr17 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr17[i] = arr[i];\n        }\n        int[] arr18 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr18[i] = arr[i];\n        }\n        int[] arr19 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr19[i] = arr[i];\n        }\n        int[] arr20 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr20[i] = arr[i];\n        }\n        int[] arr21 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr21[i] = arr[i];\n        }\n        int[] arr22 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr22[i] = arr[i];\n        }\n        int[] arr23 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr23[i] = arr[i];\n        }\n        int[] arr24 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr24[i] = arr[i];\n        }\n        int[] arr25 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr25[i] = arr[i];\n        }\n        int[] arr26 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr26[i] = arr[i];\n        }\n        int[] arr27 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr27[i] = arr[i];\n        }\n        int[] arr28 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr28[i] = arr[i];\n        }\n        int[] arr29 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr29[i] = arr[i];\n        }\n        int[] arr30 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr30[i] = arr[i];\n        }\n        int[] arr31 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr31[i] = arr[i];\n        }\n        int[] arr32 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr32[i] = arr[i];\n        }\n        int[] arr33 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr33[i] = arr[i];\n        }\n        int[] arr34 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr34[i] = arr[i];\n        }\n        int[] arr35 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr35[i] = arr[i];\n        }\n        int[] arr36 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr36[i] = arr[i];\n        }\n        int[] arr37 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr37[i] = arr[i];\n        }\n        int[] arr38 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr38[i] = arr[i];\n        }\n        int[] arr39 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr39[i] = arr[i];\n        }\n        int[] arr40 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr40[i] = arr[i];\n        }\n        int[] arr41 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr41[i] = arr[i];\n        }\n        int[] arr42 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr42[i] = arr[i];\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int[] cars = new int[n];\n        for (int i = 0; i < n; i++) {\n            cars[i] = i + 1;\n        }\n        Arrays.sort(cars);\n        int i = 0;\n        int j = n - 1;\n        while (i < j) {\n            if (cars[i] == cars[j]) {\n                i++;\n                j--;\n            } else if (cars[i] < cars[j]) {\n                i++;\n            } else {\n                j--;\n            }\n        }\n        return i + 1;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = i;\n        }\n        Arrays.sort(arr);\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == arr[i + 1]) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = i;\n        }\n        int[] arr1 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr1[i] = i;\n        }\n        int[] arr2 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr2[i] = i;\n        }\n        int[] arr3 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr3[i] = i;\n        }\n        int[] arr4 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr4[i] = i;\n        }\n        int[] arr5 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr5[i] = i;\n        }\n        int[] arr6 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr6[i] = i;\n        }\n        int[] arr7 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr7[i] = i;\n        }\n        int[] arr8 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr8[i] = i;\n        }\n        int[] arr9 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr9[i] = i;\n        }\n        int[] arr10 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr10[i] = i;\n        }\n        int[] arr11 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr11[i] = i;\n        }\n        int[] arr12 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr12[i] = i;\n        }\n        int[] arr13 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr13[i] = i;\n        }\n        int[] arr14 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr14[i] = i;\n        }\n        int[] arr15 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr15[i] = i;\n        }\n        int[] arr16 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr16[i] = i;\n        }\n        int[] arr17 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr17[i] = i;\n        }\n        int[] arr18 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr18[i] = i;\n        }\n        int[] arr19 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr19[i] = i;\n        }\n        int[] arr20 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr20[i] = i;\n        }\n        int[] arr21 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr21[i] = i;\n        }\n        int[] arr22 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr22[i] = i;\n        }\n        int[] arr23 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr23[i] = i;\n        }\n        int[] arr24 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr24[i] = i;\n        }\n        int[] arr25 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr25[i] = i;\n        }\n        int[] arr26 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr26[i] = i;\n        }\n        int[] arr27 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr27[i] = i;\n        }\n        int[] arr28 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr28[i] = i;\n        }\n        int[] arr29 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr29[i] = i;\n        }\n        int[] arr30 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr30[i] = i;\n        }\n        int[] arr31 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr31[i] = i;\n        }\n        int[] arr32 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr32[i] = i;\n        }\n        int[] arr33 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr33[i] = i;\n        }\n        int[] arr34 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr34[i] = i;\n        }\n        int[] arr35 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr35[i] = i;\n        }\n        int[] arr36 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr36[i] = i;\n        }\n        int[] arr37 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr37[i] = i;\n        }\n        int[] arr38 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr38[i] = i;\n        }\n        int[] arr39 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr39[i] = i;\n        }\n        int[] arr40 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr40[i] = i;\n        }\n        int[] arr41 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr41[i] = i;\n        }\n        int[] arr42 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr42[i] = i;\n        }\n        int[] arr43 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr43[i] = i;\n        }\n        int[] arr44 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr44[i] = i;\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int[] cars = new int[n];\n        cars[0] = 1;\n        for(int i = 1; i < n; i++) {\n            cars[i] = cars[i-1] + 1;\n        }\n        int[] cars2 = new int[n];\n        cars2[0] = 1;\n        for(int i = 1; i < n; i++) {\n            cars2[i] = cars2[i-1] + 1;\n        }\n        int[] cars3 = new int[n];\n        cars3[0] = 1;\n        for(int i = 1; i < n; i++) {\n            cars3[i] = cars3[i-1] + 1;\n        }\n        int[] cars4 = new int[n];\n        cars4[0] = 1;\n        for(int i = 1; i < n; i++) {\n            cars4[i] = cars4[i-1] + 1;\n        }\n        int[] cars5 = new int[n];\n        cars5[0] = 1;\n        for(int i = 1; i < n; i++) {\n            cars5[i] = cars5[i-1] + 1;\n        }\n        int[] cars6 = new int[n];\n        cars6[0] = 1;\n        for(int i = 1; i < n; i++) {\n            cars6[i] = cars6[i-1] + 1;\n        }\n        int[] cars7 = new int[n];\n        cars7[0] = 1;\n        for(int i = 1; i < n; i++) {\n            cars7[i] = cars7[i-1] + 1;\n        }\n        int[] cars8 = new int[n];\n        cars8[0] = 1;\n        for(int i = 1; i < n; i++) {\n            cars8[i] = cars8[i-1] + 1;\n        }\n        int[] cars9 = new int[n];\n        cars9[0] = 1;\n        for(int i = 1; i < n; i++) {\n            cars9[i] = cars9[i-1] + 1;\n        }\n        int[] cars10 = new int[n];\n        cars10[0] = 1;\n        for(int i = 1; i < n; i++) {\n            cars10[i] = cars10[i-1] + 1;\n        }\n        int[] cars11 = new int[n];\n        cars11[0] = 1;\n        for(int i = 1; i < n; i++) {\n            cars11[i] = cars11[i-1] + 1;\n        }\n        int[] cars12 = new int[n];\n        cars12[0] = 1;\n        for(int i = 1; i < n; i++) {\n            cars12[i] = cars12[i-1] + 1;\n        }\n        int[] cars13 = new int[n];\n        cars13[0] = 1;\n        for(int i = 1; i < n; i++) {\n            cars13[i] = cars13[i-1] + 1;\n        }\n        int[] cars14 = new int[n];\n        cars14[0] = 1;\n        for(int i = 1; i < n; i++) {\n            cars14[i] = cars14[i-1] + 1;\n        }\n        int[] cars15 = new int[n];\n        cars15[0] = 1;\n        for(int i = 1; i < n; i++) {\n            cars15[i] = cars15[i-1] + 1;\n        }\n        int[] cars16 = new int[n];\n        cars16[0] = 1;\n        for(int i = 1; i < n; i++) {\n            cars16[i] = cars16[i-1] + 1;\n        }\n        int[] cars17 = new int[n];\n        cars17[0] = 1;\n        for(int i = 1; i < n; i++) {\n            cars17[i] = cars17[i-1] + 1;\n        }\n        int[] cars18 = new int[n];\n        cars18[0] = 1;\n        for(int i = 1; i < n; i++) {\n            cars18[i] = cars18[i-1] + 1;\n        }\n        int[] cars19 = new int[n];\n        cars19[0] = 1;\n        for(int i = 1; i < n; i++) {\n            cars19[i] = cars19[i-1] + 1;\n        }\n        int[] cars20 = new int[n];\n        cars20[0] = 1;\n        for(int i = 1; i < n; i++) {\n            cars20[i] = cars20[i-1] + 1;\n        }\n        int[] cars21 = new int[n];\n        cars21[0] = 1;\n        for(int i = 1; i < n; i++) {\n            cars21[i] = cars21[i-1] + 1;\n        }\n        int[] cars22 = new int[n];\n        cars22[0] = 1;\n        for(int i = 1; i < n; i++) {\n            cars22[i] = cars22[i-1] + 1;\n        }\n        int[] cars23 = new int[n];\n        cars23[0] = 1;\n        for(int i = 1; i < n; i++) {\n            cars23[i] = cars23[i-1] + 1;\n        }\n        int[] cars24 = new int[n];\n        cars24[0] = 1;\n        for(int i = 1; i < n; i++) {\n            cars24[i] = cars24[i-1] + 1;\n        }\n        int[] cars25 = new int[n];\n        cars25[0] = 1;\n        for(int i = 1; i < n; i++) {\n            cars25[i] = cars25[i-1] + 1;\n        }\n        int[] cars26 = new int[n];\n        cars26[0] = 1;\n        for(int i = 1; i < n; i++) {\n            cars26[i] = cars26[i-1] + 1;\n        }\n        int[] cars27 = new int[n];\n        cars27[0] = 1;\n        for(int i = 1; i < n; i++) {\n            cars27[i] = cars27[i-1] + 1;\n        }\n        int[] cars28 = new int[n];\n        cars28[0] = 1;\n        for(int i = 1; i < n; i++) {\n            cars28[i] = cars28[i-1] + 1;\n        }\n        int[] cars29 = new int[n];\n        cars29[0] = 1;\n        for(int i = 1; i < n; i++) {\n            cars29[i] = cars29[i-1] + 1;\n        }\n        int[] cars30 = new int[n];\n        cars30[0] = 1;\n        for(int i = 1; i < n; i++) {\n            cars30[i] = cars30[i-1] + 1;\n        }\n        int[] cars31 = new int[n];\n        cars31[0] = 1;\n        for(int i = 1; i < n; i++) {\n            cars31[i] = cars31[i-1] + 1;\n        }\n        int[] cars32 = new int[n];\n        cars32[0] = 1;\n        for(int i = 1; i < n; i++) {\n            cars32[i] = cars32[i-1] + 1;\n        }\n        int[] cars33 = new int[n];\n        cars33[0] = 1;\n        for(int i = 1; i < n; i++) {\n            cars33[i] = cars33[i-1] + 1;\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int[] cars = new int[n];\n        for (int i = 0; i < n; i++) {\n            cars[i] = i + 1;\n        }\n        Arrays.sort(cars);\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (cars[i] == cars[i + 1]) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int[] cars = new int[n];\n        cars[0] = 0;\n        for (int i = 1; i < n; i++) {\n            cars[i] = cars[i - 1] + 1;\n        }\n        int[] cars2 = new int[n];\n        cars2[0] = 0;\n        for (int i = 1; i < n; i++) {\n            cars2[i] = cars2[i - 1] + 1;\n        }\n        int[] cars3 = new int[n];\n        cars3[0] = 0;\n        for (int i = 1; i < n; i++) {\n            cars3[i] = cars3[i - 1] + 1;\n        }\n        int[] cars4 = new int[n];\n        cars4[0] = 0;\n        for (int i = 1; i < n; i++) {\n            cars4[i] = cars4[i - 1] + 1;\n        }\n        int[] cars5 = new int[n];\n        cars5[0] = 0;\n        for (int i = 1; i < n; i++) {\n            cars5[i] = cars5[i - 1] + 1;\n        }\n        int[] cars6 = new int[n];\n        cars6[0] = 0;\n        for (int i = 1; i < n; i++) {\n            cars6[i] = cars6[i - 1] + 1;\n        }\n        int[] cars7 = new int[n];\n        cars7[0] = 0;\n        for (int i = 1; i < n; i++) {\n            cars7[i] = cars7[i - 1] + 1;\n        }\n        int[] cars8 = new int[n];\n        cars8[0] = 0;\n        for (int i = 1; i < n; i++) {\n            cars8[i] = cars8[i - 1] + 1;\n        }\n        int[] cars9 = new int[n];\n        cars9[0] = 0;\n        for (int i = 1; i < n; i++) {\n            cars9[i] = cars9[i - 1] + 1;\n        }\n        int[] cars10 = new int[n];\n        cars10[0] = 0;\n        for (int i = 1; i < n; i++) {\n            cars10[i] = cars10[i - 1] + 1;\n        }\n        int[] cars11 = new int[n];\n        cars11[0] = 0;\n        for (int i = 1; i < n; i++) {\n            cars11[i] = cars11[i - 1] + 1;\n        }\n        int[] cars12 = new int[n];\n        cars12[0] = 0;\n        for (int i = 1; i < n; i++) {\n            cars12[i] = cars12[i - 1] + 1;\n        }\n        int[] cars13 = new int[n];\n        cars13[0] = 0;\n        for (int i = 1; i < n; i++) {\n            cars13[i] = cars13[i - 1] + 1;\n        }\n        int[] cars14 = new int[n];\n        cars14[0] = 0;\n        for (int i = 1; i < n; i++) {\n            cars14[i] = cars14[i - 1] + 1;\n        }\n        int[] cars15 = new int[n];\n        cars15[0] = 0;\n        for (int i = 1; i < n; i++) {\n            cars15[i] = cars15[i - 1] + 1;\n        }\n        int[] cars16 = new int[n];\n        cars16[0] = 0;\n        for (int i = 1; i < n; i++) {\n            cars16[i] = cars16[i - 1] + 1;\n        }\n        int[] cars17 = new int[n];\n        cars17[0] = 0;\n        for (int i = 1; i < n; i++) {\n            cars17[i] = cars17[i - 1] + 1;\n        }\n        int[] cars18 = new int[n];\n        cars18[0] = 0;\n        for (int i = 1; i < n; i++) {\n            cars18[i] = cars18[i - 1] + 1;\n        }\n        int[] cars19 = new int[n];\n        cars19[0] = 0;\n        for (int i = 1; i < n; i++) {\n            cars19[i] = cars19[i - 1] + 1;\n        }\n        int[] cars20 = new int[n];\n        cars20[0] = 0;\n        for (int i = 1; i < n; i++) {\n            cars20[i] = cars20[i - 1] + 1;\n        }\n        int[] cars21 = new int[n];\n        cars21[0] = 0;\n        for (int i = 1; i < n; i++) {\n            cars21[i] = cars21[i - 1] + 1;\n        }\n        int[] cars22 = new int[n];\n        cars22[0] = 0;\n        for (int i = 1; i < n; i++) {\n            cars22[i] = cars22[i - 1] + 1;\n        }\n        int[] cars23 = new int[n];\n        cars23[0] = 0;\n        for (int i = 1; i < n; i++) {\n            cars23[i] = cars23[i - 1] + 1;\n        }\n        int[] cars24 = new int[n];\n        cars24[0] = 0;\n        for (int i = 1; i < n; i++) {\n            cars24[i] = cars24[i - 1] + 1;\n        }\n        int[] cars25 = new int[n];\n        cars25[0] = 0;\n        for (int i = 1; i < n; i++) {\n            cars25[i] = cars25[i - 1] + 1;\n        }\n        int[] cars26 = new int[n];\n        cars26[0] = 0;\n        for (int i = 1; i < n; i++) {\n            cars26[i] = cars26[i - 1] + 1;\n        }\n        int[] cars27 = new int[n];\n        cars27[0] = 0;\n        for (int i = 1; i < n; i++) {\n            cars27[i] = cars27[i - 1] + 1;\n        }\n        int[] cars28 = new int[n];\n        cars28[0] = 0;\n        for (int i = 1; i < n; i++) {\n            cars28[i] = cars28[i - 1] + 1;\n        }\n        int[] cars29 = new int[n];\n        cars29[0] = 0;\n        for (int i = 1; i < n; i++) {\n            cars29[i] = cars29[i - 1] + 1;\n        }\n        int[] cars30 = new int[n];\n        cars30[0] = 0;\n        for (int i = 1; i < n; i++) {\n            cars30[i] = cars30[i - 1] + 1;\n        }\n        int[] cars31 = new int[n];\n        cars31[0] = 0;\n        for (int i = 1; i < n; i++) {\n            cars31[i] = cars31[i - 1] + 1;\n        }\n        int[] cars32 = new int[n];\n        cars32[0] = 0;\n        for (int i = 1; i < n; i++) {\n            cars32[i] = cars32[i - 1] + 1;\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int[] arr = new int[n];\n        for(int i=0;i<n;i++){\n            arr[i] = i+1;\n        }\n        int[] arr2 = new int[n];\n        for(int i=0;i<n;i++){\n            arr2[i] = i+1;\n        }\n        int[] arr3 = new int[n];\n        for(int i=0;i<n;i++){\n            arr3[i] = i+1;\n        }\n        int[] arr4 = new int[n];\n        for(int i=0;i<n;i++){\n            arr4[i] = i+1;\n        }\n        int[] arr5 = new int[n];\n        for(int i=0;i<n;i++){\n            arr5[i] = i+1;\n        }\n        int[] arr6 = new int[n];\n        for(int i=0;i<n;i++){\n            arr6[i] = i+1;\n        }\n        int[] arr7 = new int[n];\n        for(int i=0;i<n;i++){\n            arr7[i] = i+1;\n        }\n        int[] arr8 = new int[n];\n        for(int i=0;i<n;i++){\n            arr8[i] = i+1;\n        }\n        int[] arr9 = new int[n];\n        for(int i=0;i<n;i++){\n            arr9[i] = i+1;\n        }\n        int[] arr10 = new int[n];\n        for(int i=0;i<n;i++){\n            arr10[i] = i+1;\n        }\n        int[] arr11 = new int[n];\n        for(int i=0;i<n;i++){\n            arr11[i] = i+1;\n        }\n        int[] arr12 = new int[n];\n        for(int i=0;i<n;i++){\n            arr12[i] = i+1;\n        }\n        int[] arr13 = new int[n];\n        for(int i=0;i<n;i++){\n            arr13[i] = i+1;\n        }\n        int[] arr14 = new int[n];\n        for(int i=0;i<n;i++){\n            arr14[i] = i+1;\n        }\n        int[] arr15 = new int[n];\n        for(int i=0;i<n;i++){\n            arr15[i] = i+1;\n        }\n        int[] arr16 = new int[n];\n        for(int i=0;i<n;i++){\n            arr16[i] = i+1;\n        }\n        int[] arr17 = new int[n];\n        for(int i=0;i<n;i++){\n            arr17[i] = i+1;\n        }\n        int[] arr18 = new int[n];\n        for(int i=0;i<n;i++){\n            arr18[i] = i+1;\n        }\n        int[] arr19 = new int[n];\n        for(int i=0;i<n;i++){\n            arr19[i] = i+1;\n        }\n        int[] arr20 = new int[n];\n        for(int i=0;i<n;i++){\n            arr20[i] = i+1;\n        }\n        int[] arr21 = new int[n];\n        for(int i=0;i<n;i++){\n            arr21[i] = i+1;\n        }\n        int[] arr22 = new int[n];\n        for(int i=0;i<n;i++){\n            arr22[i] = i+1;\n        }\n        int[] arr23 = new int[n];\n        for(int i=0;i<n;i++){\n            arr23[i] = i+1;\n        }\n        int[] arr24 = new int[n];\n        for(int i=0;i<n;i++){\n            arr24[i] = i+1;\n        }\n        int[] arr25 = new int[n];\n        for(int i=0;i<n;i++){\n            arr25[i] = i+1;\n        }\n        int[] arr26 = new int[n];\n        for(int i=0;i<n;i++){\n            arr26[i] = i+1;\n        }\n        int[] arr27 = new int[n];\n        for(int i=0;i<n;i++){\n            arr27[i] = i+1;\n        }\n        int[] arr28 = new int[n];\n        for(int i=0;i<n;i++){\n            arr28[i] = i+1;\n        }\n        int[] arr29 = new int[n];\n        for(int i=0;i<n;i++){\n            arr29[i] = i+1;\n        }\n        int[] arr30 = new int[n];\n        for(int i=0;i<n;i++){\n            arr30[i] = i+1;\n        }\n        int[] arr31 = new int[n];\n        for(int i=0;i<n;i++){\n            arr31[i] = i+1;\n        }\n        int[] arr32 = new int[n];\n        for(int i=0;i<n;i++){\n            arr32[i] = i+1;\n        }\n        int[] arr33 = new int[n];\n        for(int i=0;i<n;i++){\n            arr33[i] = i+1;\n        }\n        int[] arr34 = new int[n];\n        for(int i=0;i<n;i++){\n            arr34[i] = i+1;\n        }\n        int[] arr35 = new int[n];\n        for(int i=0;i<n;i++){\n            arr35[i] = i+1;\n        }\n        int[] arr36 = new int[n];\n        for(int i=0;i<n;i++){\n            arr36[i] = i+1;\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = i + 1;\n        }\n        int[] result = new int[n];\n        for (int i = 0; i < n; i++) {\n            int index = arr[i] - 1;\n            if (index != arr[index]) {\n                result[index] = arr[index];\n            }\n        }\n        return result[0];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int[] arr = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr[i] = i;\n        }\n        int count = 0;\n        int i = 0;\n        while(i < n) {\n            if(arr[i] != arr[i+1]) {\n                count++;\n                i++;\n            } else {\n                i++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int[] arr = new int[n];\n        for(int i = 0; i < n; i++)\n            arr[i] = i;\n        Arrays.sort(arr);\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            if(arr[i] == arr[i+1])\n                count++;\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int[] arr = new int[n];\n        for(int i = 0; i < n; i++)\n            arr[i] = i;\n        \n        Arrays.sort(arr);\n        \n        int count = 0;\n        for(int i = 0; i < n; i++)\n            count += arr[i] - arr[i + 1];\n        \n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int[] car = new int[n];\n        int[] time = new int[n];\n        Arrays.fill(car, 0);\n        Arrays.fill(time, 0);\n        for(int i = 0; i < n; i++) {\n            int carTime = 0;\n            int carIndex = 0;\n            while(carTime < time[carIndex]) {\n                carTime += car[carIndex];\n                carIndex++;\n            }\n            car[carIndex] = 0;\n            carTime = 0;\n            carIndex = i;\n            while(carTime < time[carIndex]) {\n                carTime += car[carIndex];\n                carIndex++;\n            }\n            car[carIndex] = 1;\n            time[i] = carTime;\n        }\n        return time[0];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int[] cars = new int[n];\n        for (int i = 0; i < n; i++) {\n            cars[i] = i;\n        }\n        int[] cars2 = new int[n];\n        for (int i = 0; i < n; i++) {\n            cars2[i] = i;\n        }\n        Arrays.sort(cars);\n        Arrays.sort(cars2);\n        int i = 0;\n        int j = 0;\n        while (i < n && j < n) {\n            if (cars[i] == cars2[j]) {\n                i++;\n                j++;\n            } else if (cars[i] < cars2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return i == n ? 0 : -1;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int[] arr = new int[n];\n        for(int i=0;i<n;i++)\n            arr[i] = i+1;\n        Arrays.sort(arr);\n        int count = 0;\n        for(int i=0;i<n-1;i++)\n            if(arr[i] == arr[i+1])\n                count++;\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int[] arr = new int[n];\n        for(int i = 0; i < n; i++)\n            arr[i] = i;\n        Arrays.sort(arr);\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            if(arr[i] != i+1) {\n                count++;\n                if(count > 1)\n                    return -1;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int[] arr = new int[n];\n        for(int i=0;i<n;i++){\n            arr[i] = i;\n        }\n        int[] arr2 = new int[n];\n        for(int i=0;i<n;i++){\n            arr2[i] = i;\n        }\n        int[] arr3 = new int[n];\n        for(int i=0;i<n;i++){\n            arr3[i] = i;\n        }\n        int[] arr4 = new int[n];\n        for(int i=0;i<n;i++){\n            arr4[i] = i;\n        }\n        int[] arr5 = new int[n];\n        for(int i=0;i<n;i++){\n            arr5[i] = i;\n        }\n        int[] arr6 = new int[n];\n        for(int i=0;i<n;i++){\n            arr6[i] = i;\n        }\n        int[] arr7 = new int[n];\n        for(int i=0;i<n;i++){\n            arr7[i] = i;\n        }\n        int[] arr8 = new int[n];\n        for(int i=0;i<n;i++){\n            arr8[i] = i;\n        }\n        int[] arr9 = new int[n];\n        for(int i=0;i<n;i++){\n            arr9[i] = i;\n        }\n        int[] arr10 = new int[n];\n        for(int i=0;i<n;i++){\n            arr10[i] = i;\n        }\n        int[] arr11 = new int[n];\n        for(int i=0;i<n;i++){\n            arr11[i] = i;\n        }\n        int[] arr12 = new int[n];\n        for(int i=0;i<n;i++){\n            arr12[i] = i;\n        }\n        int[] arr13 = new int[n];\n        for(int i=0;i<n;i++){\n            arr13[i] = i;\n        }\n        int[] arr14 = new int[n];\n        for(int i=0;i<n;i++){\n            arr14[i] = i;\n        }\n        int[] arr15 = new int[n];\n        for(int i=0;i<n;i++){\n            arr15[i] = i;\n        }\n        int[] arr16 = new int[n];\n        for(int i=0;i<n;i++){\n            arr16[i] = i;\n        }\n        int[] arr17 = new int[n];\n        for(int i=0;i<n;i++){\n            arr17[i] = i;\n        }\n        int[] arr18 = new int[n];\n        for(int i=0;i<n;i++){\n            arr18[i] = i;\n        }\n        int[] arr19 = new int[n];\n        for(int i=0;i<n;i++){\n            arr19[i] = i;\n        }\n        int[] arr20 = new int[n];\n        for(int i=0;i<n;i++){\n            arr20[i] = i;\n        }\n        int[] arr21 = new int[n];\n        for(int i=0;i<n;i++){\n            arr21[i] = i;\n        }\n        int[] arr22 = new int[n];\n        for(int i=0;i<n;i++){\n            arr22[i] = i;\n        }\n        int[] arr23 = new int[n];\n        for(int i=0;i<n;i++){\n            arr23[i] = i;\n        }\n        int[] arr24 = new int[n];\n        for(int i=0;i<n;i++){\n            arr24[i] = i;\n        }\n        int[] arr25 = new int[n];\n        for(int i=0;i<n;i++){\n            arr25[i] = i;\n        }\n        int[] arr26 = new int[n];\n        for(int i=0;i<n;i++){\n            arr26[i] = i;\n        }\n        int[] arr27 = new int[n];\n        for(int i=0;i<n;i++){\n            arr27[i] = i;\n        }\n        int[] arr28 = new int[n];\n        for(int i=0;i<n;i++){\n            arr28[i] = i;\n        }\n        int[] arr29 = new int[n];\n        for(int i=0;i<n;i++){\n            arr29[i] = i;\n        }\n        int[] arr30 = new int[n];\n        for(int i=0;i<n;i++){\n            arr30[i] = i;\n        }\n        int[] arr31 = new int[n];\n        for(int i=0;i<n;i++){\n            arr31[i] = i;\n        }\n        int[] arr32 = new int[n];\n        for(int i=0;i<n;i++){\n            arr32[i] = i;\n        }\n        int[] arr33 = new int[n];\n        for(int i=0;i<n;i++){\n            arr33[i] = i;\n        }\n        int[] arr34 = new int[n];\n        for(int i=0;i<n;i++){\n            arr34[i] = i;\n        }\n        int[] arr35 = new int[n];\n        for(int i=0;i<n;i++){\n            arr35[i] = i;\n        }\n        int[] arr36 = new int[n];\n        for(int i=0;i<n;i++){\n            arr36[i] = i;\n        }\n        int[] arr37 = new int[n];\n        for(int i=0;i<n;i++){\n            arr37[i] = i;\n        }\n        int[] arr38 = new int[n];\n        for(int i=0;i<n;i++){\n            arr38[i] = i;\n        }\n        int[] arr39 = new int[n];\n        for(int i=0;i<n;i++){\n            arr39[i] = i;\n        }\n        int[] arr40 = new int[n];\n        for(int i=0;i<n;i++){\n            arr40[i] = i;\n        }\n        int[] arr41 = new int[n];\n        for(int i=0;i<n;i++){\n            arr41[i] = i;\n        }\n        int[] arr42 = new int[n];\n        for(int i=0;i<n;i++){\n            arr42[i] = i;\n        }\n        int[] arr43 = new int[n];\n        for(int i=0;i<n;i++){\n            arr43[i] = i;\n        }\n        int[] arr44 = new int[n];\n        for(int i=0;i<n;i++){\n            arr44[i] = i;\n        }\n        int[] arr45 = new int[n];\n        for(int i=0;i<n;i++){\n            arr45[i] = i;\n        }\n        int[] arr46 = new int[n];\n        for(int i=0;i<n;i++){\n            arr46[i] = i;\n        }\n        int[] arr47 = new int[n];\n        for(int i=0;i<n;i++){\n            arr47[i] = i;\n        }\n        int[] arr48 = new int[n];\n        for(int i=0;i<n;i++){\n            arr48[i] = i;\n        }\n        int[] arr49 = new int[n];\n        for(int i=0;i<n;i++){\n            arr49[i] = i;\n        }\n        int[] arr50 = new int[n];\n        for(int i=0;i<n;i++){\n            arr50[i] = i;\n        }\n        int[] arr51 = new int[n];\n        for(int i=0;i<n;i++){\n            arr51[i] = i;\n        }\n        int[] arr52 = new int[n];\n        for(int i=0;i<n;i++){\n            arr52[i] = i;\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int[] cars = new int[n];\n        for (int i = 0; i < n; i++) {\n            cars[i] = i + 1;\n        }\n        Arrays.sort(cars);\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (cars[i] == cars[i + 1]) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int[] speeds = new int[n];\n        int[] speeds2 = new int[n];\n        int[] speeds3 = new int[n];\n        int[] speeds4 = new int[n];\n        int[] speeds5 = new int[n];\n        int[] speeds6 = new int[n];\n        int[] speeds7 = new int[n];\n        int[] speeds8 = new int[n];\n        int[] speeds9 = new int[n];\n        int[] speeds10 = new int[n];\n        int[] speeds11 = new int[n];\n        int[] speeds12 = new int[n];\n        int[] speeds13 = new int[n];\n        int[] speeds14 = new int[n];\n        int[] speeds15 = new int[n];\n        int[] speeds16 = new int[n];\n        int[] speeds17 = new int[n];\n        int[] speeds18 = new int[n];\n        int[] speeds19 = new int[n];\n        int[] speeds20 = new int[n];\n        int[] speeds21 = new int[n];\n        int[] speeds22 = new int[n];\n        int[] speeds23 = new int[n];\n        int[] speeds24 = new int[n];\n        int[] speeds25 = new int[n];\n        int[] speeds26 = new int[n];\n        int[] speeds27 = new int[n];\n        int[] speeds28 = new int[n];\n        int[] speeds29 = new int[n];\n        int[] speeds30 = new int[n];\n        int[] speeds31 = new int[n];\n        int[] speeds32 = new int[n];\n        int[] speeds33 = new int[n];\n        int[] speeds34 = new int[n];\n        int[] speeds35 = new int[n];\n        int[] speeds36 = new int[n];\n        int[] speeds37 = new int[n];\n        int[] speeds38 = new int[n];\n        int[] speeds39 = new int[n];\n        int[] speeds40 = new int[n];\n        int[] speeds41 = new int[n];\n        int[] speeds42 = new int[n];\n        int[] speeds43 = new int[n];\n        int[] speeds44 = new int[n];\n        int[] speeds45 = new int[n];\n        int[] speeds46 = new int[n];\n        int[] speeds47 = new int[n];\n        int[] speeds48 = new int[n];\n        int[] speeds49 = new int[n];\n        int[] speeds50 = new int[n];\n        int[] speeds51 = new int[n];\n        int[] speeds52 = new int[n];\n        int[] speeds53 = new int[n];\n        int[] speeds54 = new int[n];\n        int[] speeds55 = new int[n];\n        int[] speeds56 = new int[n];\n        int[] speeds57 = new int[n];\n        int[] speeds58 = new int[n];\n        int[] speeds59 = new int[n];\n        int[] speeds60 = new int[n];\n        int[] speeds61 = new int[n];\n        int[] speeds62 = new int[n];\n        int[] speeds63 = new int[n];\n        int[] speeds64 = new int[n];\n        int[] speeds65 = new int[n];\n        int[] speeds66 = new int[n];\n        int[] speeds67 = new int[n];\n        int[] speeds68 = new int[n];\n        int[] speeds69 = new int[n];\n        int[] speeds70 = new int[n];\n        int[] speeds71 = new int[n];\n        int[] speeds72 = new int[n];\n        int[] speeds73 = new int[n];\n        int[] speeds74 = new int[n];\n        int[] speeds75 = new int[n];\n        int[] speeds76 = new int[n];\n        int[] speeds77 = new int[n];\n        int[] speeds78 = new int[n];\n        int[] speeds79 = new int[n];\n        int[] speeds80 = new int[n];\n        int[] speeds81 = new int[n];\n        int[] speeds82 = new int[n];\n        int[] speeds83 = new int[n];\n        int[] speeds84 = new int[n];\n        int[] speeds85 = new int[n];\n        int[] speeds86 = new int[n];\n        int[] speeds87 = new int[n];\n        int[] speeds88 = new int[n];\n        int[] speeds89 = new int[n];\n        int[] speeds90 = new int[n];\n        int[] speeds91 = new int[n];\n        int[] speeds92 = new int[n];\n        int[] speeds93 = new int[n];\n        int[] speeds94 = new int[n];\n        int[] speeds95 = new int[n];\n        int[] speeds96 = new int[n];\n        int[] speeds97 = new int[n];\n        int[] speeds98 = new int[n];\n        int[] speeds99 = new int[n];\n        int[] speeds100 = new int[n];\n        int[] speeds101 = new int[n];\n        int[] speeds102 = new int[n];\n        int[] speeds103 = new int[n];\n        int[] speeds104 = new int[n];\n        int[] speeds105 = new int[n];\n        int[] speeds106 = new int[n];\n        int[] speeds107 = new int[n];\n        int[] speeds108 = new int[n];\n        int[] speeds109 = new int[n];\n        int[] speeds110 = new int[n];\n        int[] speeds111 = new int["], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int[] cars = new int[n];\n        for(int i = 0; i < n; i++) {\n            cars[i] = i;\n        }\n        Arrays.sort(cars);\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            if(cars[i] == i) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            res.add(l.get(i) + 1);\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            res.add(l.get(i) + 1);\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        int median = l.get(l.size()/2);\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) > median) {\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            res.add(l.get(i) + 1);\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        l.forEach(x -> x++);\n        return l;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            res.add(l.get(i) + 1);\n        }\n        return res;\n    }\n\n    public int maxProfit(int[] prices) {\n        List<Integer> l = Arrays.stream(prices).boxed().collect(Collectors.toList());\n        l = incrList(l);\n        int res = 0;\n        for (int i = 0; i < l.size(); i++) {\n            res = Math.max(res, l.get(i) - prices[i]);\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            res.add(l.get(i) + 1);\n        }\n        return res;\n    }\n\n    public int romanToInt(String s) {\n        List<Integer> l = s.chars().map(c -> {\n            switch (c) {\n                case 'I': return 1;\n                case 'V': return 5;\n                case 'X': return 10;\n                case 'L': return 50;\n                case 'C': return 100;\n                case 'D': return 500;\n                case 'M': return 1000;\n                default: return 0;\n            }\n        }).collect(Collectors.toList());\n        return incrList(l).stream().reduce(0, Integer::sum);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            res.add(l.get(i) + 1);\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            res.add(l.get(i) + 1);\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n\n```\n\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            res.add(l.get(i) + 1);\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        l.add(0, 1);\n        return l;\n    }\n\n    public int lengthOfLongestSubstring(String s) {\n        int len = s.length();\n        int[] map = new int[256];\n        int maxLen = 0;\n        for (int i = 0; i < len; i++) {\n            map[s.charAt(i)]++;\n            maxLen = Math.max(maxLen, map[s.charAt(i)]);\n        }\n        List<Integer> l = new ArrayList<>();\n        for (int i = 0; i < len; i++) {\n            if (map[s.charAt(i)] == 1) {\n                l.add(i);\n            }\n        }\n        l = incrList(l);\n        return l.stream().mapToInt(i -> i).max().getAsInt();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            res.add(l.get(i) + 1);\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream.map(x -> x + 1).collect(Collectors.toList());\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            res.add(l.get(i) + 1);\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            res.add(l.get(i) + 1);\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            res.add(l.get(i) + 1);\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        l.forEach(i -> i++);\n        return l;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            res.add(l.get(i) + 1);\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        int n = l.size();\n        int[] arr = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr[i] = l.get(i);\n        }\n        Arrays.sort(arr);\n        for(int i = 0; i < n; i++) {\n            l.set(i, arr[i] + 1);\n        }\n        return l;\n    }\n    public int minSteps(int n) {\n        List<Integer> l = new ArrayList<>();\n        for(int i = 0; i < n; i++) {\n            l.add(0);\n        }\n        return incrList(l).stream().mapToInt(i -> i).sum();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        return sum == 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for(int i = 0; i < l.size(); i++){\n            sum += l.get(i);\n        }\n        return sum == 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for(int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        return sum == 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum % 2 == 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Integer> l = new ArrayList<>();\n        l.add(3);\n        l.add(2);\n        l.add(3);\n        System.out.println(s.pairsSumToZero(l));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        return sum == 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        return sum == 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        return sum == 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        return sum == 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        for (int i = 0; i < l.size(); i++) {\n            if (sum - l.get(i) == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        return sum == 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        return sum == 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        return sum == 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for(int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        return sum == 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        return sum == 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for(int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if(sum == 0) {\n            return true;\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String s = Integer.toBinaryString(x);\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i--) {\n            sb.append(s.charAt(i));\n        }\n        return sb.toString();\n    }\n\n    public boolean isPermutation(String s, String t) {\n        if (s.length() != t.length()) {\n            return false;\n        }\n        int[] sArr = new int[26];\n        int[] tArr = new int[26];\n        for (int i = 0; i < s.length(); i++) {\n            sArr[s.charAt(i) - 'a']++;\n            tArr[t.charAt(i) - 'a']++;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (sArr[i] != tArr[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n            int rem = x % base;\n            x /= base;\n            sb.append(rem);\n        }\n        return sb.reverse().toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String str = Integer.toString(x, base);\n        StringBuilder sb = new StringBuilder();\n        for (int i = str.length() - 1; i >= 0; i--) {\n            sb.append(str.charAt(i));\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String str = Integer.toBinaryString(x);\n        StringBuilder sb = new StringBuilder();\n        for (int i = str.length() - 1; i >= 0; i--) {\n            sb.append(str.charAt(i));\n        }\n        return sb.reverse().toString();\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.changeBase(123456789, 2));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String str = Integer.toString(x);\n        StringBuilder sb = new StringBuilder();\n        for (int i = str.length() - 1; i >= 0; i--) {\n            sb.append(str.charAt(i));\n        }\n        int result = 0;\n        for (int i = sb.length() - 1; i >= 0; i--) {\n            result = result * base + sb.charAt(i) - '0';\n        }\n        return Integer.toString(result);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String res = \"\";\n        while (x != 0) {\n            res = (char) (x % base + '0') + res;\n            x /= base;\n        }\n        return res;\n    }\n\n    public int maxPathSum(TreeNode root) {\n        if (root == null) {\n            return 0;\n        }\n\n        int left = maxPathSum(root.left);\n        int right = maxPathSum(root.right);\n\n        int res = Math.max(left, right) + root.val;\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        \n        while (x > 0) {\n            \n            x /\n\n```\n\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String str = Integer.toBinaryString(x);\n        StringBuilder sb = new StringBuilder();\n        for (int i = str.length() - 1; i >= 0; i--) {\n            sb.append(str.charAt(i));\n        }\n        int result = 0;\n        for (int i = 0; i < sb.length(); i++) {\n            result = result * base + sb.charAt(i) - '0';\n        }\n        return Integer.toBinaryString(result);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String s = Integer.toBinaryString(x);\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i--) {\n            if (s.charAt(i) == '1') {\n                sb.append(base);\n            }\n            base = base / 2;\n        }\n        return sb.reverse().toString();\n    }\n\n    public int longestCommonSubsequence(String s1, String s2) {\n        int m = s1.length();\n        int n = s2.length();\n        int[][] dp = new int[m + 1][n + 1];\n        for (int i = 1; i <= m; i++) {\n            for (int j = 1; j <= n; j++) {\n                if (s1.charAt(i - 1) == s2.charAt(j - 1)) {\n                    dp[i][j] = dp[i - 1][j - 1] + 1;\n                } else {\n                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n        return dp[m][n];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String str = Integer.toString(x, base);\n        StringBuilder sb = new StringBuilder();\n        for (int i = str.length() - 1; i >= 0; i--) {\n            sb.append(str.charAt(i));\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String s = Integer.toBinaryString(x);\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i--) {\n            sb.append(s.charAt(i));\n        }\n        int pow = 1;\n        while (base > 1) {\n            base /= 2;\n            pow *= 2;\n        }\n        int result = 0;\n        for (int i = 0; i < sb.length(); i++) {\n            int digit = sb.charAt(i) - '0';\n            result += pow * digit;\n            pow /= 2;\n        }\n        return Integer.toBinaryString(result);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String s = Integer.toBinaryString(x);\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i--) {\n            sb.append(s.charAt(i));\n        }\n        int result = 0;\n        for (int i = 0; i < sb.length(); i++) {\n            result = result * base + sb.charAt(i) - '0';\n        }\n        return Integer.toBinaryString(result);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        \n        while (x > 0) {\n            \n            x %\n\n```\n\n## 11.1.2.2.2.1.2.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String s = Integer.toBinaryString(x);\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i--) {\n            sb.append(s.charAt(i));\n        }\n        String result = sb.reverse().toString();\n        int len = result.length();\n        int carry = 0;\n        StringBuilder sb2 = new StringBuilder();\n        for (int i = 0; i < len; i++) {\n            int digit = Integer.parseInt(result.charAt(i) + \"\");\n            int sum = digit + carry;\n            carry = sum / base;\n            sb2.append(sum % base);\n        }\n        if (carry != 0) {\n            sb2.append(carry);\n        }\n        return sb2.reverse().toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String res = \"\";\n        while (x != 0) {\n            res = (char) ('0' + (x % base)) + res;\n            x /= base;\n        }\n        return res;\n    }\n\n    public List<List<Integer>> threeSum(int[] nums) {\n        List<List<Integer>> res = new ArrayList<>();\n        Arrays.sort(nums);\n        for (int i = 0; i < nums.length - 2; i++) {\n            if (i > 0 && nums[i] == nums[i - 1]) continue;\n            int l = i + 1, r = nums.length - 1;\n            while (l < r) {\n                if (nums[i] + nums[l] + nums[r] == target) {\n                    List<Integer> list = new ArrayList<>();\n                    list.add(nums[i]);\n                    list.add(nums[l]);\n                    list.add(nums[r]);\n                    res.add(list);\n                    while (l < r && nums[l] == nums[l + 1]) l++;\n                    while (l < r && nums[r] == nums[r - 1]) r--;\n                    l++;\n                    r--;\n                } else if (nums[i] + nums[l] + nums[r] < target) {\n                    l++;\n                } else {\n                    r--;\n                }\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        if (x == 0)\n            return \"0\";\n        String result = \"\";\n        while (x > 0) {\n            result = (char) ('0' + x % base) + result;\n            x /= base;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String s = Integer.toString(x);\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i--) {\n            sb.append(s.charAt(i));\n        }\n        int result = 0;\n        for (int i = sb.length() - 1; i >= 0; i--) {\n            result = result * base + sb.charAt(i) - '0';\n        }\n        return Integer.toString(result);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String result = \"\";\n        while (x > 0) {\n            result = (x % base) + result;\n            x /= base;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String ret = \"\";\n        while (x > 0) {\n            ret = (x % base) + ret;\n            x /= base;\n        }\n        return ret.reverse();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String result = \"\";\n        while (x > 0) {\n            result = (x % base) + result;\n            x /= base;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return a * h / 2;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return a / 2 * h;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return a / 2.0 * h;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return a * h / 2;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return a * h / 2;\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        Solution solution = new Solution();\n        double a = scanner.nextDouble();\n        double h = scanner.nextDouble();\n        double area = solution.triangleArea(a, h);\n        System.out.println(area);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return a * h / 2;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return a / 2 * h;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return a / 2 * h;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return a * (a + h) / 2;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return (a * h) / 2.0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        double area = a/2;\n        return area*h;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return a / 2.0 * h;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return a / 2 * h;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return a / 2 * h;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return a * h / 2;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return a / 2 * h;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return a * h / 2;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return a * h / 2;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return a * h / 2;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        double area = a * h / 2;\n        return area;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] fib = new int[n + 1];\n        fib[0] = 0;\n        fib[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2];\n        }\n        return fib[n];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        int a = 1;\n        int b = 1;\n        int c = 0;\n        int d = 0;\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum = a + b;\n            a = b;\n            b = sum;\n            c = a + b;\n            d = c + d;\n        }\n        return d;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if(n == 0)\n            return 0;\n        if(n == 1)\n            return 1;\n        int a = 1;\n        int b = 1;\n        int c = 0;\n        int d = 0;\n        for(int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        return fib4(n - 1) + fib4(n - 2);\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        Solution s = new Solution();\n        System.out.println(s.fib4(n));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        int a = 1;\n        int b = 1;\n        int c = 0;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        Solution s = new Solution();\n        System.out.println(s.fib4(n));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] fib = new int[n + 1];\n        fib[0] = 1;\n        fib[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2];\n        }\n        return fib[n];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        return fib4(n - 1) + fib4(n - 2);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(new Solution().fib4(4));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] f = new int[n + 1];\n        f[0] = 0;\n        f[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            f[i] = f[i - 1] + f[i - 2];\n        }\n        return f[n];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 5;\n        }\n        if (n == 6) {\n            return 6;\n        }\n        if (n == 7) {\n            return 7;\n        }\n        if (n == 8) {\n            return 8;\n        }\n        if (n == 9) {\n            return 9;\n        }\n        if (n == 10) {\n            return 10;\n        }\n        if (n == 11) {\n            return 11;\n        }\n        if (n == 12) {\n            return 12;\n        }\n        if (n == 13) {\n            return 13;\n        }\n        if (n == 14) {\n            return 14;\n        }\n        if (n == 15) {\n            return 15;\n        }\n        if (n == 16) {\n            return 16;\n        }\n        if (n == 17) {\n            return 17;\n        }\n        if (n == 18) {\n            return 18;\n        }\n        if (n == 19) {\n            return 19;\n        }\n        if (n == 20) {\n            return 20;\n        }\n        if (n == 21) {\n            return 21;\n        }\n        if (n == 22) {\n            return 22;\n        }\n        if (n == 23) {\n            return 23;\n        }\n        if (n == 24) {\n            return 24;\n        }\n        if (n == 25) {\n            return 25;\n        }\n        if (n == 26) {\n            return 26;\n        }\n        if (n == 27) {\n            return 27;\n        }\n        if (n == 28) {\n            return 28;\n        }\n        if (n == 29) {\n            return 29;\n        }\n        if (n == 30) {\n            return 30;\n        }\n        if (n == 31) {\n            return 31;\n        }\n        if (n == 32) {\n            return 32;\n        }\n        if (n == 33) {\n            return 33;\n        }\n        if (n == 34) {\n            return 34;\n        }\n        if (n == 35) {\n            return 35;\n        }\n        if (n == 36) {\n            return 36;\n        }\n        if (n == 37) {\n            return 37;\n        }\n        if (n == 38) {\n            return 38;\n        }\n        if (n == 39) {\n            return 39;\n        }\n        if (n == 40) {\n            return 40;\n        }\n        if (n == 41) {\n            return 41;\n        }\n        if (n == 42) {\n            return 42;\n        }\n        if (n == 43) {\n            return 43;\n        }\n        if (n == 44) {\n            return 44;\n        }\n        if (n == 45) {\n            return 45;\n        }\n        if (n == 46) {\n            return 46;\n        }\n        if (n == 47) {\n            return 47;\n        }\n        if (n == 48) {\n            return 48;\n        }\n        if (n == 49) {\n            return 49;\n        }\n        if (n == 50) {\n            return 50;\n        }\n        if (n == 51) {\n            return 51;\n        }\n        if (n == 52) {\n            return 52;\n        }\n        if (n == 53) {\n            return 53;\n        }\n        if (n == 54) {\n            return 54;\n        }\n        if (n == 55) {\n            return 55;\n        }\n        if (n == 56) {\n            return 56;\n        }\n        if (n == 57) {\n            return 57;\n        }\n        if (n == 58) {\n            return 58;\n        }\n        if (n == 59) {\n            return 59;\n        }\n        if (n == 60) {\n            return 60;\n        }\n        if (n == 61) {\n            return 61;\n        }\n        if (n == 62) {\n            return 62;\n        }\n        if (n == 63) {\n            return 63;\n        }\n        if (n == 64) {\n            return 64;\n        }\n        if (n == 65) {\n            return 65;\n        }\n        if (n == 66) {\n            return 66;\n        }\n        if (n == 67) {\n            return 67;\n        }\n        if (n == 68) {\n            return 68;\n        }\n        if (n == 69) {\n            return 69;\n        }\n        if (n == 70) {\n            return 70;\n        }\n        if (n == 71) {\n            return 71;\n        }\n        if (n == 72) {\n            return 72;\n        }\n        if (n == 73) {\n            return 73;\n        }\n        if (n == 74) {\n            return 74;\n        }\n        if (n == 75) {\n            return 75;\n        }\n        if (n == 76) {\n            return 76;\n        }\n        if (n == 77) {\n            return 77;\n        }\n        if (n == 78) {\n            return 78;\n        }\n        if (n == 79) {\n            return 79;\n        }\n        if (n == 80) {\n            return 80;\n        }\n        if (n == 81) {\n            return 81;\n        }\n        if (n == 82) {\n            return 82;\n        }\n        if (n == 83) {\n            return 83;\n        }\n        if (n == 84) {\n            return 84;\n        }\n        if (n == 85) {\n            return 85;\n        }\n        if (n == 86) {\n            return 86;\n        }\n        if (n == 87) {\n            return 87;\n        }\n        if (n == 88) {\n            return 88;\n        }\n        if (n == 89) {\n            return 89;\n        }\n        if (n == 90) {\n            return 90;\n        }\n        if (n == 91) {\n            return 91;\n        }\n        if (n == 92) {\n            return 92;\n        }\n        if (n == 93) {\n            return 93;\n        }\n        if (n == 94) {\n            return 94;\n        }\n        if (n == 95) {\n            return 95;\n        }\n        if (n == 96) {\n            return 96;\n        }\n        if (n == 97) {\n            return 97;\n        }\n        if (n == 98) {\n            return 98;\n        }\n        if (n == 99) {\n            return 99;\n        }\n        if (n == 100) {\n            return 100;\n        }\n        if (n == 101) {\n            return 101;\n        }\n        if (n == 102) {\n            return 102;\n        }\n        if (n == 103) {\n            return 103;\n        }\n        if (n == 104) {\n            return 104;\n        }\n        if (n == 105) {\n            return 105;\n        }\n        if (n == 106) {\n            return 106;\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] f = new int[n + 1];\n        f[0] = 0;\n        f[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            f[i] = f[i - 1] + f[i - 2];\n        }\n        return f[n];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n < 2) {\n            return n;\n        }\n        int[] fib = new int[n + 1];\n        fib[0] = 1;\n        fib[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2];\n        }\n        return fib[n];\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.fib4(12));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n == 0)\n            return 0;\n        if (n == 1)\n            return 1;\n        int a = 0, b = 1;\n        for (int i = 2; i <= n; i++) {\n            int temp = a;\n            a = b;\n            b = temp + b;\n        }\n        return b;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if(n <= 1)\n            return n;\n        int a = 1;\n        int b = 1;\n        int c = 0;\n        int d = 0;\n        for(int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        Solution s = new Solution();\n        System.out.println(s.fib4(n));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] fib = new int[n + 1];\n        fib[0] = 0;\n        fib[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2];\n        }\n        return fib[n];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        int a = 0;\n        int b = 1;\n        for (int i = 2; i <= n; i++) {\n            int temp = a;\n            a = b;\n            b = temp + b;\n        }\n        return b;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        int a = 0;\n        int b = 1;\n        for (int i = 2; i <= n; i++) {\n            int temp = a;\n            a = b;\n            b = temp + b;\n        }\n        return b;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        int[] stack = new int[n];\n        stack[0] = 0;\n        stack[1] = 1;\n        for (int i = 2; i < n; i++) {\n            stack[i] = stack[i - 1] + stack[i - 2];\n        }\n        return stack[n - 1];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] dp = new int[n + 1];\n        dp[0] = 0;\n        dp[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            dp[i] = dp[i - 1] + dp[i - 2];\n        }\n        return dp[n];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n <= 1)\n            return n;\n        int a = 0, b = 1, c = 0, d = 1;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0, b = 1, c = 0, d = 1;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        if (l.size() == 0) {\n            return 0;\n        }\n        int n = l.size();\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = l.get(i);\n        }\n        Arrays.sort(arr);\n        if (n % 2 == 0) {\n            return (arr[n / 2] + arr[n / 2 - 1]) / 2.0;\n        } else {\n            return arr[n / 2];\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n / 2 - 1) + l.get(n / 2)) / 2.0;\n        } else {\n            return l.get(n / 2);\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        List<Integer> list = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            list.add(l.get(i));\n        }\n        Collections.sort(list);\n        if (list.size() % 2 == 0) {\n            return (list.get(list.size() / 2) + list.get(list.size() / 2 - 1)) / 2.0;\n        } else {\n            return list.get(list.size() / 2);\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n / 2 - 1) + l.get(n / 2)) / 2.0;\n        } else {\n            return l.get(n / 2);\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n / 2) + l.get(n / 2 - 1)) / 2.0;\n        } else {\n            return l.get(n / 2);\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        if (l.size() % 2 == 0) {\n            return (l.get(l.size() / 2) + l.get(l.size() / 2 - 1)) / 2.0;\n        } else {\n            return l.get(l.size() / 2);\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        if (l.size() % 2 == 0) {\n            return (l.get(l.size() / 2) + l.get(l.size() / 2 - 1)) / 2.0;\n        } else {\n            return l.get(l.size() / 2);\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        if (l.size() % 2 == 0) {\n            return (l.get(l.size() / 2 - 1) + l.get(l.size() / 2)) / 2.0;\n        } else {\n            return l.get(l.size() / 2);\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        if (l.size() % 2 == 0) {\n            return (l.get(l.size() / 2) + l.get(l.size() / 2 - 1)) / 2.0;\n        } else {\n            return l.get(l.size() / 2);\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n / 2) + l.get(n / 2 - 1)) / 2.0;\n        } else {\n            return l.get(n / 2);\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        if (l.size() == 0) {\n            return 0;\n        }\n        int n = l.size();\n        int mid = n / 2;\n        if (l.get(mid) > l.get(n - 1)) {\n            return median(l.subList(0, mid));\n        } else {\n            return median(l.subList(mid + 1, n));\n        }\n    }\n\n    public double sumRootToLeaf(TreeNode root) {\n        if (root == null) {\n            return 0;\n        }\n        double left = sumRootToLeaf(root.left);\n        double right = sumRootToLeaf(root.right);\n        return left + right + root.val;\n    }\n\n    public double sumRootToLeaf(TreeNode root) {\n        if (root == null) {\n            return 0;\n        }\n        double left = sumRootToLeaf(root.left);\n        double right = sumRootToLeaf(root.right);\n        return left + right + root.val;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        if (l.size() % 2 == 0) {\n            return (l.get(l.size() / 2) + l.get(l.size() / 2 - 1)) / 2.0;\n        } else {\n            return l.get(l.size() / 2);\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        int n = l.size();\n        int i = n / 2;\n        if (n % 2 == 0) {\n            return (l.get(i - 1) + l.get(i)) / 2.0;\n        } else {\n            return l.get(i);\n        }\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        List<Integer> l = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            l.add(in.nextInt());\n        }\n        Solution s = new Solution();\n        System.out.println(s.median(l));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n / 2 - 1) + l.get(n / 2)) / 2.0;\n        } else {\n            return l.get(n / 2);\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        if (l.size() == 0) {\n            return 0;\n        }\n        int n = l.size();\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = l.get(i);\n        }\n        Arrays.sort(arr);\n        int mid = arr[n / 2];\n        int left = 0, right = n - 1;\n        while (left < right) {\n            int mid_left = arr[left];\n            int mid_right = arr[right];\n            if (mid_left == mid) {\n                return mid_right;\n            }\n            if (mid_left > mid) {\n                right--;\n            } else {\n                left++;\n            }\n        }\n        return arr[n / 2];\n    }\n\n    public List<List<Integer>> levelOrder(TreeNode root) {\n        List<List<Integer>> res = new ArrayList<>();\n        if (root == null) {\n            return res;\n        }\n        Queue<TreeNode> q = new LinkedList<>();\n        q.offer(root);\n        while (!q.isEmpty()) {\n            int size = q.size();\n            List<Integer> level = new ArrayList<>();\n            for (int i = 0; i < size; i++) {\n                TreeNode node = q.poll();\n                level.add(node.val);\n                if (node.left != null) {\n                    q.offer(node.left);\n                }\n                if (node.right != null) {\n                    q.offer(node.right);\n                }\n            }\n            res.add(level);\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        if (l.size() % 2 == 0) {\n            return (l.get(l.size() / 2) + l.get(l.size() / 2 - 1)) / 2.0;\n        } else {\n            return l.get(l.size() / 2);\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n / 2 - 1) + l.get(n / 2)) / 2.0;\n        } else {\n            return l.get(n / 2);\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        int n = l.size();\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = l.get(i);\n        }\n        Arrays.sort(arr);\n        int mid = n / 2;\n        if (n % 2 == 0) {\n            return (arr[mid - 1] + arr[mid]) / 2.0;\n        } else {\n            return arr[mid];\n        }\n    }\n\n    public int maxDepth(TreeNode root) {\n        if (root == null) {\n            return 0;\n        }\n        int left = maxDepth(root.left);\n        int right = maxDepth(root.right);\n        return Math.max(left, right) + 1;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n / 2) + l.get(n / 2 - 1)) / 2.0;\n        } else {\n            return l.get(n / 2);\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        if(l.size() == 0) return 0;\n        int n = l.size();\n        int[] arr = new int[n];\n        for(int i = 0; i < n; i++) arr[i] = l.get(i);\n        Arrays.sort(arr);\n        if(n % 2 == 0) {\n            return (arr[n/2] + arr[n/2-1])/2.0;\n        }\n        else {\n            return arr[n/2];\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        char[] textArray = text.toCharArray();\n        Arrays.sort(textArray);\n        return textArray[0] == textArray[textArray.length - 1];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if (text == null || text.length() == 0) {\n            return true;\n        }\n        char[] arr = text.toCharArray();\n        int i = 0;\n        int j = arr.length - 1;\n        while (i < j) {\n            if (arr[i] != arr[j]) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        char[] arr = text.toCharArray();\n        int start = 0;\n        int end = arr.length - 1;\n        while (start < end) {\n            if (arr[start] != arr[end]) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        char[] arr = text.toCharArray();\n        int start = 0;\n        int end = arr.length - 1;\n        while (start < end) {\n            if (arr[start] != arr[end]) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        char[] arr = text.toCharArray();\n        int i = 0;\n        int j = arr.length - 1;\n        while (i < j) {\n            if (arr[i] != arr[j]) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if (text == null || text.length() == 0) {\n            return false;\n        }\n        char[] chars = text.toCharArray();\n        int left = 0;\n        int right = chars.length - 1;\n        while (left < right) {\n            if (chars[left] != chars[right]) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        char[] textArray = text.toCharArray();\n        int start = 0;\n        int end = textArray.length - 1;\n        while (start < end) {\n            if (textArray[start] != textArray[end]) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        char[] arr = text.toCharArray();\n        int i = 0;\n        int j = arr.length - 1;\n        while (i < j) {\n            if (arr[i] != arr[j]) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if (text == null || text.length() == 0)\n            return false;\n        char[] arr = text.toCharArray();\n        int start = 0;\n        int end = arr.length - 1;\n        while (start < end) {\n            if (arr[start] != arr[end])\n                return false;\n            start++;\n            end--;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        char[] ch = text.toCharArray();\n        int n = ch.length;\n        int i = 0;\n        int j = n - 1;\n        while (i < j) {\n            if (ch[i] != ch[j]) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        String str = \"A man, a plan, a canal: Panama\";\n        System.out.println(s.isPalindrome(str));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if (text == null || text.length() == 0) {\n            return true;\n        }\n        char[] arr = text.toCharArray();\n        Arrays.sort(arr);\n        for (int i = 0; i < arr.length / 2; i++) {\n            if (arr[i] != arr[arr.length - i - 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        char[] arr = text.toCharArray();\n        int len = arr.length;\n        int i = 0;\n        int j = len - 1;\n        while (i < j) {\n            if (arr[i] != arr[j]) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if (text == null || text.length() == 0)\n            return true;\n        char[] chars = text.toCharArray();\n        int left = 0, right = chars.length - 1;\n        while (left < right) {\n            if (chars[left] != chars[right])\n                return false;\n            left++;\n            right--;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        char[] arr = text.toCharArray();\n        int len = arr.length;\n        int i = 0;\n        int j = len - 1;\n        while (i < j) {\n            if (arr[i] != arr[j]) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        char[] arr = text.toCharArray();\n        int i = 0, j = arr.length - 1;\n        while (i < j) {\n            if (arr[i] != arr[j]) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if (text == null || text.length() == 0) {\n            return true;\n        }\n        char[] arr = text.toCharArray();\n        Arrays.sort(arr);\n        for (int i = 0; i < arr.length / 2; i++) {\n            if (arr[i] != arr[arr.length - 1 - i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        // Write your code here\n        String reverse = \"\";\n        for (int i = text.length() - 1; i >= 0; i--) {\n            reverse = reverse + text.charAt(i);\n        }\n        return text.equals(reverse);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if (text == null || text.length() == 0) {\n            return true;\n        }\n        char[] arr = text.toCharArray();\n        int start = 0;\n        int end = arr.length - 1;\n        while (start < end) {\n            if (arr[start] != arr[end]) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        char[] arr = text.toCharArray();\n        Arrays.sort(arr);\n        return text.equals(new String(arr));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        char[] arr = text.toCharArray();\n        int i = 0;\n        int j = arr.length - 1;\n        while (i < j) {\n            if (arr[i] != arr[j]) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int ret = 1;\n        while(p != 0) {\n            if(p % 2 == 1) {\n                ret = ret * n % p;\n            }\n            p = p / 2;\n            n = n * n % p;\n        }\n        return ret;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int mod = n % p;\n        if (mod == 0) {\n            return 0;\n        } else {\n            return mod;\n        }\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int p = sc.nextInt();\n        int mod = modp(n, p);\n        System.out.println(mod);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int mod = n % p;\n        if (mod == 0)\n            return p;\n        else\n            return modp(mod, p);\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int p = sc.nextInt();\n        int mod = modp(n, p);\n        System.out.println(mod);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int ret = 1;\n        while (p != 0) {\n            if (p % 2 == 1) {\n                ret = ret * n % p;\n            }\n            p = p / 2;\n            n = n * n % p;\n        }\n        return ret;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        return (n % p + p) % p;\n    }\n\n    public int sumNumbers(TreeNode root) {\n        if (root == null) {\n            return 0;\n        }\n\n        int left = sumNumbers(root.left);\n        int right = sumNumbers(root.right);\n\n        int val = root.val;\n        int sum = val + left + right;\n        return modp(sum, 1000000007);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int ret = 1;\n        while(p > 0) {\n            if(p % 2 == 1) {\n                ret = ret * n % p;\n            }\n            p = p / 2;\n            n = n * n % p;\n        }\n        return ret;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int ret = 1;\n        while (p != 0) {\n            if ((p & 1) == 1) {\n                ret = (ret * n) % p;\n            }\n            p >>= 1;\n            n = (n * n) % p;\n        }\n        return ret;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int ret = 1;\n        for (int i = 0; i < p; i++) {\n            ret = (ret * n) % p;\n        }\n        return ret;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int ret = 1;\n        while (p > 0) {\n            if (p & 1 == 1) {\n                ret = ret * n % p;\n            }\n            p = p >> 1;\n            n = n * n % p;\n        }\n        return ret;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int ret = 1;\n        while (p > 0) {\n            if (p & 1 == 1) {\n                ret = ret * n % p;\n            }\n            p = p >> 1;\n            n = n * n % p;\n        }\n        return ret;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int ret = 1;\n        for (int\n\n```\n"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int ret = 1;\n        while (p != 0) {\n            if (p & 1 == 1) {\n                ret = (ret * n) % p;\n            }\n            p = p >> 1;\n            n = (n * n) % p;\n        }\n        return ret;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        return n % p;\n    }\n\n    public int mod(int n, int p) {\n        return modp(n, p) == 0 ? n : modp(n, p);\n    }\n\n    public int gcd(int a, int b) {\n        return b == 0 ? a : gcd(b, a % b);\n    }\n\n    public int lcm(int a, int b) {\n        return a * b / gcd(a, b);\n    }\n\n    public int lcm(int a, int b, int c) {\n        return lcm(a, lcm(b, c));\n    }\n\n    public int gcd(int a, int b, int c) {\n        return gcd(gcd(a, b), c);\n    }\n\n    public int gcd(int a, int b, int c, int d) {\n        return gcd(gcd(gcd(a, b), c), d);\n    }\n\n    public int gcd(int a, int b, int c, int d, int e) {\n        return gcd(gcd(gcd(gcd(a, b), c), d), e);\n    }\n\n    public int gcd(int a, int b, int c, int d, int e, int f) {\n        return gcd(gcd(gcd(gcd(gcd(a, b), c), d), e), f);\n    }\n\n    public int gcd(int a, int b, int c, int d, int e, int f, int g) {\n        return gcd(gcd(gcd(gcd(gcd(gcd(a, b), c), d), e), f), g);\n    }\n\n    public int gcd(int a, int b, int c, int d, int e, int f, int g, int h) {\n        return gcd(gcd(gcd(gcd(gcd(gcd(gcd(a, b), c), d), e), f), g), h);\n    }\n\n    public int gcd(int a, int b, int c, int d, int e, int f, int g, int h, int i) {\n        return gcd(gcd(gcd(gcd(gcd(gcd(gcd(gcd(a, b), c), d), e), f), g), h, i);\n    }\n\n    public int gcd(int a, int b, int c, int d, int e, int f, int g, int h, int i, int j) {\n        return gcd(gcd(gcd(gcd(gcd(gcd(gcd(gcd(gcd(gcd(gcd(a, b), c), d), e), f), g), h), i), j);\n    }\n\n    public int gcd(int a, int b, int c, int d, int e, int f, int g, int h, int i, int j, int k) {\n        return gcd(gcd(gcd(gcd(gcd(gcd(gcd(gcd(gcd(gcd(gcd(gcd(gcd(gcd(a, b), c), d), e), f), g), h), i), j), k);\n    }\n\n    public int gcd(int a, int b, int c, int d, int e, int f, int g, int h, int i, int j, int k, int l) {\n        return gcd(gcd(gcd(gcd(gcd(gcd(gcd(gcd(gcd(gcd(gcd(gcd(gcd(gcd(gcd(gcd(a, b), c), d), e), f), g), h), i), j), k), l);\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        return (n % p + p) % p;\n    }\n\n    public int solution(int n, int k) {\n        int p = 1000000007;\n        int ans = 0;\n        int i = 0;\n        while (i < k) {\n            int x = modp(n, p);\n            n = x;\n            ans = (ans + x) % p;\n            i++;\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        return (n % p + p) % p;\n    }\n\n    public int solution(int n, int k) {\n        int p = 1000000007;\n        int[] dp = new int[k + 1];\n        dp[0] = 1;\n        for (int i = 1; i <= k; i++) {\n            dp[i] = 0;\n            for (int j = 0; j < i; j++) {\n                dp[i] = (dp[i] + dp[j]) % p;\n            }\n        }\n        return dp[n];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int ret = 1;\n        \n            ret = (ret *\n\n```\n"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        return (n % p + p) % p;\n    }\n\n    public int mod(int n, int p) {\n        return modp(n, p);\n    }\n\n    public int modinv(int n, int p) {\n        return modp(p, modp(n, p));\n    }\n\n    public int modinv(int n) {\n        return modinv(n, 1000000007);\n    }\n\n    public int modinv(int n, int p) {\n        return modp(modinv(n, p), p);\n    }\n\n    public int modinv(int n, int p, int m) {\n        return modp(modinv(n, p), m);\n    }\n\n    public int modinv(int n, int p, int m, int k) {\n        return modp(modinv(n, p, m), k);\n    }\n\n    public int modinv(int n, int p, int m, int k, int l) {\n        return modp(modinv(n, p, m, k), l);\n    }\n\n    public int modinv(int n, int p, int m, int k, int l, int r) {\n        return modp(modinv(n, p, m, k, l), r);\n    }\n\n    public int modinv(int n, int p, int m, int k, int l, int r, int s) {\n        return modp(modinv(n, p, m, k, l, r), s);\n    }\n\n    public int modinv(int n, int p, int m, int k, int l, int r, int s, int t) {\n        return modp(modinv(n, p, m, k, l, r, s), t);\n    }\n\n    public int modinv(int n, int p, int m, int k, int l, int r, int s, int t, int u) {\n        return modp(modinv(n, p, m, k, l, r, s, t), u);\n    }\n\n    public int modinv(int n, int p, int m, int k, int l, int r, int s, int t, int u, int v) {\n        return modp(modinv(n, p, m, k, l, r, s, t, u), v);\n    }\n\n    public int modinv(int n, int p, int m, int k, int l, int r, int s, int t, int u, int v, int w) {\n        return modp(modinv(n, p, m, k, l, r, s, t, u, v), w);\n    }\n\n    public int modinv(int n, int p, int m, int k, int l, int r, int s, int t, int u, int v, int w, int x) {\n        return modp(modinv(n, p, m, k, l, r, s, t, u, v, w), x);\n    }\n\n    public int modinv(int n, int p, int m, int k, int l, int r, int s, int t, int u, int v, int w, int x, int y) {\n        return modp(modinv(n, p, m, k, l, r, s, t, u, v, w, x), y);\n    }\n\n    public int modinv(int n, int p, int m, int k, int l, int r, int s, int t, int u, int v, int w, int x, int y, int z) {\n        return modp(modinv(n, p, m, k, l, r, s, t, u, v, w, x, y), z);\n    }\n\n    public int modinv(int n, int p, int m, int k, int l, int r, int s, int t, int u, int v, int w, int x, int y, int z, int a) {\n        return modp(modinv(n, p, m, k, l, r, s, t, u, v, w, x, y, z), a);\n    }\n\n    public int modinv(int n, int p, int m, int k, int l, int r, int s, int t, int u, int v, int w, int x, int y, int z, int a, int b) {\n        return modp(modinv(n, p, m, k, l, r, s, t, u, v, w, x, y, z, a), b);\n    }\n\n    public int modinv(int n, int p, int m, int k, int l, int r, int s, int t, int u, int v, int w, int x, int y, int z, int a, int b, int c) {\n        return modp(modinv(n, p, m, k, l, r, s, t, u, v, w, x, y, z, a, b), c);\n    }\n\n    public int modinv(int n, int p, int m, int k, int l, int r, int s, int t, int u, int v, int w, int x, int y, int z, int a, int b, int c, int d) {\n        return modp(modinv(n, p, m, k, l, r, s, t, u, v, w, x, y, z, a, b, c), d);\n    }\n\n    public int modinv(int n, int p, int m, int k, int l, int r, int s, int t, int u, int v, int w, int x, int y, int z, int a, int b, int c, int d, int e) {\n        return modp(modinv(n, p, m, k, l, r, s, t, u, v, w, x, y, z, a, b, c, d), e);\n    }\n\n    public int modinv(int n, int p, int m, int k, int l, int r, int s, int t, int u, int v, int w, int x, int y, int z, int a, int b, int c, int d, int e, int f) {\n        return modp(modinv(n, p, m, k, l, r, s, t, u, v, w, x, y, z, a, b, c, d, e), f);\n    }\n\n    public int modinv(int n, int p, int m, int k, int l, int r, int s, int t, int u, int v, int w, int x, int y, int z, int a, int b, int c, int d, int e, int f, int g) {\n        return modp(modinv(n, p, m, k, l, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f), g);\n    }\n\n    public int modinv(int n, int p, int m, int k, int l, int r, int s, int t, int u, int v, int w, int x, int y, int z, int a, int b, int c, int d, int e, int f, int g, int h) {\n        return modp(modinv(n, p, m, k, l, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g), h);\n    }\n\n    public int modinv(int n, int p, int m, int k, int l, int r, int s, int t, int u, int v, int w, int x, int y, int z, int a, int b, int c, int d, int e, int f, int g, int h, int i) {\n        return modp(modinv(n, p, m, k, l, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h), i);\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        return (n % p + p) % p;\n    }\n\n    public int minSteps(int n) {\n        int steps = 0;\n        int p = 1000000007;\n        while (n != 0) {\n            n = modp(n, p);\n            steps++;\n        }\n        return steps;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int r = n % p;\n        if (r < 0)\n            r += p;\n        return r;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int ret = 1;\n        for (int i = 0; i < p; i++) {\n            ret = ret * n % p;\n        }\n        return ret;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        String s = \"a\";\n        System.out.println(s);\n        System.out.println(encodeShift(s));\n        System.out.println(decodeShift(encodeShift(s)));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.encodeShift(\"a\"));\n        System.out.println(s.decodeShift(\"a\"));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.encodeShift(\"a\"));\n        System.out.println(s.decodeShift(\"a\"));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        String s = \"a\";\n        Solution solution = new Solution();\n        System.out.println(solution.encodeShift(s));\n        System.out.println(solution.decodeShift(solution.encodeShift(s)));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        String s = \"a\";\n        System.out.println(encodeShift(s));\n        System.out.println(decodeShift(encodeShift(s)));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        String s = \"a\";\n        Solution sol = new Solution();\n        System.out.println(sol.encodeShift(s));\n        System.out.println(sol.decodeShift(sol.encodeShift(s)));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        String s1 = s.encodeShift(\"abc\");\n        String s2 = s.decodeShift(s1);\n        System.out.println(s1);\n        System.out.println(s2);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    returns encoded string by shifting every character by 10 in the alphabet.\n     */\n    public String encodeShift10(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 10 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public String decodeShift10(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    returns encoded string by shifting every character by 15 in the alphabet.\n     */\n    public String encodeShift15(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 15 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public String decodeShift15(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    returns encoded string by shifting every character by 20 in the alphabet.\n     */\n    public String encodeShift20(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 20 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public String decodeShift20(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    returns encoded string by shifting every character by 25 in the alphabet.\n     */\n    public String encodeShift25(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 25 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public String decodeShift25(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    returns encoded string by shifting every character by 30 in the alphabet.\n     */\n    public String encodeShift30(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 30 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public String decodeShift30(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    returns encoded string by shifting every character by 35 in the alphabet.\n     */\n    public String encodeShift35(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 35 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public String decodeShift35(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    returns encoded string by shifting every character by 40 in the alphabet.\n     */\n    public String encodeShift40(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 40 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public String decodeShift40(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    returns encoded string by shifting every character by 45 in the alphabet.\n     */\n    public String encodeShift45(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 45 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public String decodeShift45(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    returns encoded string by shifting every character by 50 in the alphabet.\n     */\n    public String encodeShift50(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 50 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public String decodeShift50(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    returns encoded string by shifting every character by 55 in the alphabet.\n     */\n    public String encodeShift55(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 55 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public String decodeShift55(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    returns encoded string by shifting every character by 60 in the alphabet.\n     */\n    public String encodeShift60(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 60 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public String decodeShift60(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    returns encoded string by shifting every character by 65 in the alphabet.\n     */\n    public String encodeShift65(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 65 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public String decodeShift65(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        char[] arr = text.toCharArray();\n        int i = 0;\n        int j = 0;\n        while (i < arr.length) {\n            if (arr[i] == 'a' || arr[i] == 'e' || arr[i] == 'i' || arr[i] == 'o' || arr[i] == 'u') {\n                arr[j++] = arr[i++];\n            } else {\n                i++;\n            }\n        }\n        return new String(arr, 0, j);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                result += c;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        char[] arr = text.toCharArray();\n        int n = arr.length;\n        int i = 0;\n        int j = 1;\n        while (j < n) {\n            if (arr[j] == 'a' || arr[j] == 'e' || arr[j] == 'i' || arr[j] == 'o' || arr[j] == 'u') {\n                arr[i++] = arr[j++];\n            } else {\n                j++;\n            }\n        }\n        return String.valueOf(i);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                result += c;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                result += c;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        char[] arr = text.toCharArray();\n        int n = arr.length;\n        int i = 0;\n        int j = 0;\n        while (i < n) {\n            if (arr[i] == 'a' || arr[i] == 'e' || arr[i] == 'i' || arr[i] == 'o' || arr[i] == 'u') {\n                arr[j++] = arr[i++];\n            } else {\n                i++;\n            }\n        }\n        return new String(arr, 0, j);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        char[] arr = text.toCharArray();\n        Arrays.sort(arr);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] != 'a' && arr[i] != 'e' && arr[i] != 'i' && arr[i] != 'o' && arr[i] != 'u') {\n                sb.append(arr[i]);\n            }\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        char[] ch = text.toCharArray();\n        for (int i = 0; i < ch.length; i++) {\n            if (ch[i] == 'a' || ch[i] == 'e' || ch[i] == 'i' || ch[i] == 'o' || ch[i] == 'u') {\n                ch[i] = ' ';\n            }\n        }\n        return new String(ch);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        char[] arr = text.toCharArray();\n        int i = 0;\n        int j = 0;\n        char c = 'a';\n        while (i < arr.length) {\n            if (arr[i] == 'a' || arr[i] == 'e' || arr[i] == 'i' || arr[i] == 'o' || arr[i] == 'u') {\n                arr[j++] = arr[i++];\n            } else {\n                i++;\n            }\n        }\n        return new String(arr, 0, j);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char ch = text.charAt(i);\n            if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {\n                result += ch;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        char[] arr = text.toCharArray();\n        int[] count = new int[26];\n        for (char c : arr) {\n            count[c - 'a']++;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < arr.length; i++) {\n            if (count[arr[i] - 'a'] == 0) {\n                sb.append(arr[i]);\n            }\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        char[] arr = text.toCharArray();\n        int count = 0;\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] == 'a' || arr[i] == 'e' || arr[i] == 'i' || arr[i] == 'o' || arr[i] == 'u') {\n                count++;\n            }\n        }\n        if (count == 0) {\n            return text;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] == 'a' || arr[i] == 'e' || arr[i] == 'i' || arr[i] == 'o' || arr[i] == 'u') {\n                sb.append(arr[i]);\n            }\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                result += c;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String result = \"\";\n        char[] ch = text.toCharArray();\n        for (int i = 0; i < ch.length; i++) {\n            if (ch[i] != 'a' && ch[i] != 'e' && ch[i] != 'i' && ch[i] != 'o' && ch[i] != 'u') {\n                result += ch[i];\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String result = \"\";\n        char[] chars = text.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLetter(chars[i])) {\n                result += chars[i];\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                result += c;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        char[] ch = text.toCharArray();\n        char[] result = new char[ch.length];\n        int i = 0;\n        for (char c : ch) {\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                result[i] = c;\n                i++;\n            }\n        }\n        return new String(result);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        char[] textArray = text.toCharArray();\n        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        for (int i = 0; i < textArray.length; i++) {\n            if (vowels[0] == textArray[i]) {\n                textArray[i] = ' ';\n            }\n        }\n        return new String(textArray);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        char[] ch = text.toCharArray();\n        int i = 0, j = 0;\n        while (i < ch.length) {\n            if (ch[i] == 'a' || ch[i] == 'e' || ch[i] == 'i' || ch[i] == 'o' || ch[i] == 'u') {\n                ch[j++] = ch[i++];\n            } else {\n                i++;\n            }\n        }\n        return new String(ch, 0, j);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String result = \"\";\n        char[] chars = text.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] == 'a' || chars[i] == 'e' || chars[i] == 'i' || chars[i] == 'o' || chars[i] == 'u') {\n                continue;\n            }\n            result += chars[i];\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        int n = l.size();\n        int[] dp = new int[n];\n        dp[0] = 1;\n        for (int i = 1; i < n; i++) {\n            dp[i] = 0;\n            for (int j = 0; j < i; j++) {\n                if (l.get(j) <= l.get(i)) {\n                    dp[i] += dp[j];\n                }\n            }\n        }\n        return dp[n - 1] >= t;\n    }\n\n    public boolean isSubsequence(String s, String t) {\n        if (s == null || s.length() == 0 || t == null || t.length() == 0) {\n            return false;\n        }\n        List<Integer> l = new ArrayList<>();\n        for (char c : s.toCharArray()) {\n            l.add(c - 'a');\n        }\n        return belowThreshold(l, t.length());\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        int n = l.size();\n        int i = 0;\n        int j = n - 1;\n        while (i < j) {\n            if (l.get(i) != l.get(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n\n    public String longestPalindrome(String s) {\n        int n = s.length();\n        List<Integer> l = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            l.add(s.charAt(i));\n        }\n        int t = 0;\n        while (t < n) {\n            if (belowThreshold(l, t)) {\n                t++;\n            } else {\n                t--;\n            }\n        }\n        return s.substring(t, t + 1);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        if (l == null || l.size() == 0) {\n            return false;\n        }\n        int n = l.size();\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = l.get(i);\n        }\n        Arrays.sort(arr);\n        for (int i = 0; i < n; i++) {\n            if (arr[i] > t) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public List<List<Integer>> levelOrder(TreeNode root) {\n        List<List<Integer>> res = new ArrayList<>();\n        if (root == null) {\n            return res;\n        }\n        Queue<TreeNode> q = new LinkedList<>();\n        q.offer(root);\n        while (!q.isEmpty()) {\n            int size = q.size();\n            List<Integer> level = new ArrayList<>();\n            for (int i = 0; i < size; i++) {\n                TreeNode node = q.poll();\n                level.add(node.val);\n                if (node.left != null) {\n                    q.offer(node.left);\n                }\n                if (node.right != null) {\n                    q.offer(node.right);\n                }\n            }\n            res.add(level);\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        int n = l.size();\n        int low = 0;\n        int high = n - 1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (l.get(mid) < t) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return l.get(low) >= t;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> l = new ArrayList<Integer>();\n        l.add(1);\n        l.add(2);\n        l.add(3);\n        l.add(4);\n        l.add(5);\n        l.add(6);\n        l.add(7);\n        l.add(8);\n        l.add(9);\n        l.add(10);\n        Solution s = new Solution();\n        System.out.println(s.belowThreshold(l, 11));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        int n = l.size();\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = l.get(i);\n        }\n        Arrays.sort(arr);\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < t) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        int n = l.size();\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = l.get(i);\n        }\n        Arrays.sort(arr);\n        for (int i = 0; i < n; i++) {\n            if (arr[i] >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public List<List<Integer>> levelOrder(TreeNode root) {\n        List<List<Integer>> res = new ArrayList<>();\n        if (root == null) {\n            return res;\n        }\n        Queue<TreeNode> q = new LinkedList<>();\n        q.offer(root);\n        while (!q.isEmpty()) {\n            int size = q.size();\n            List<Integer> level = new ArrayList<>();\n            for (int i = 0; i < size; i++) {\n                TreeNode node = q.poll();\n                level.add(node.val);\n                if (node.left != null) {\n                    q.offer(node.left);\n                }\n                if (node.right != null) {\n                    q.offer(node.right);\n                }\n            }\n            res.add(level);\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        int n = l.size();\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = l.get(i);\n        }\n        Arrays.sort(arr);\n        int left = 0;\n        int right = n - 1;\n        while (left < right) {\n            if (arr[left] + arr[right] < t) {\n                left++;\n            } else {\n                right--;\n            }\n        }\n        return left == right;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        int count = 0;\n        for(int i = 0; i < l.size(); i++) {\n            if(l.get(i) >= t) {\n                count++;\n            }\n        }\n        return count < l.size()/2;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        int n = l.size();\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = l.get(i);\n        }\n        Arrays.sort(arr);\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < t) {\n                count++;\n            }\n        }\n        return count < n / 2;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        int n = l.size();\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = l.get(i);\n        }\n        Arrays.sort(arr);\n        int i = 0;\n        int j = n - 1;\n        while (i < j) {\n            if (arr[i] > t) {\n                j--;\n            } else if (arr[j] < t) {\n                i++;\n            } else {\n                i++;\n                j--;\n            }\n        }\n        return i == n;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        int n = l.size();\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = l.get(i);\n        }\n        Arrays.sort(arr);\n        int i = 0;\n        int j = n - 1;\n        int k = n - 2;\n        while (i < j) {\n            if (arr[i] + arr[j] + arr[k] < t) {\n                i++;\n            } else if (arr[i] + arr[j] + arr[k] > t) {\n                j--;\n            } else {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public List<List<Integer>> threeSum(int[] nums) {\n        List<List<Integer>> res = new ArrayList<>();\n        Arrays.sort(nums);\n        for (int i = 0; i < nums.length - 2; i++) {\n            if (i > 0 && nums[i] == nums[i - 1]) {\n                continue;\n            }\n            int l = i + 1;\n            int r = nums.length - 1;\n            while (l < r) {\n                int sum = nums[i] + nums[l] + nums[r];\n                if (sum < 0) {\n                    l++;\n                } else if (sum > 0) {\n                    r--;\n                } else {\n                    List<Integer> temp = new ArrayList<>();\n                    temp.add(nums[i]);\n                    temp.add(nums[l]);\n                    temp.add(nums[r]);\n                    res.add(temp);\n                    while (l < r && nums[l] == nums[l + 1]) {\n                        l++;\n                    }\n                    while (l < r && nums[r] == nums[r - 1]) {\n                        r--;\n                    }\n                    l++;\n                    r--;\n                }\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        int n = l.size();\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = l.get(i);\n        }\n        Arrays.sort(arr);\n        for (int i = 0; i < n; i++) {\n            if (arr[i] > t) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public void connect(TreeNode root) {\n        if (root == null) {\n            return;\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        int n = l.size();\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = l.get(i);\n        }\n        Arrays.sort(arr);\n        int i = 0;\n        int j = n - 1;\n        while (i < j) {\n            if (arr[i] >= t) {\n                i++;\n            } else if (arr[j] <= t) {\n                j--;\n            } else {\n                return true;\n            }\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        for (int e : l) {\n            if (e >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        for (int e : l) {\n            if (e >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        int n = l.size();\n        if (n == 0) return true;\n        int[] dp = new int[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = 1;\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (l.get(i) < l.get(j) && dp[i] + dp[j] < t) {\n                    dp[i] += dp[j];\n                }\n            }\n        }\n        return dp[n - 1] >= t;\n    }\n\n    public List<String> findDistinctSubsequences(String s1, String s2) {\n        List<String> res = new ArrayList<>();\n        if (s1.length() == 0 || s2.length() == 0) return res;\n        int n = s1.length();\n        int m = s2.length();\n        int[][] dp = new int[n + 1][m + 1];\n        for (int i = 0; i <= n; i++) {\n            dp[i][0] = 1;\n        }\n        for (int i = 0; i <= m; i++) {\n            dp[0][i] = 1;\n        }\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= m; j++) {\n                if (s1.charAt(i - 1) == s2.charAt(j - 1)) {\n                    dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j];\n                } else {\n                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n        for (int i = 0; i <= n; i++) {\n            for (int j = 0; j <= m; j++) {\n                if (dp[i][j] >= 2) {\n                    res.add(s1.substring(i, i + 1) + s2.substring(j, j + 1));\n                }\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        if (l.size() == 0) return true;\n        int i = 0;\n        int j = l.size() - 1;\n        while (i < j) {\n            if (l.get(i) < t) {\n                i++;\n            } else if (l.get(j) > t) {\n                j--;\n            } else {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public TreeNode buildTree(List<Integer> preorder, List<Integer> inorder) {\n        if (preorder.size() == 0 || inorder.size() == 0) return null;\n        TreeNode root = new TreeNode(preorder.get(0));\n        int i = 0;\n        int j = inorder.size() - 1;\n        while (i < j) {\n            if (preorder.get(i) == inorder.get(j)) {\n                root.left = buildTree(preorder, inorder.subList(0, i));\n                root.right = buildTree(preorder, inorder.subList(i + 1, j + 1));\n                i++;\n                j--;\n            } else if (preorder.get(i) < inorder.get(j)) {\n                i++;\n            } else {\n                j--;\n            }\n        }\n        return root;\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Integer> preorder = new ArrayList<>();\n        List<Integer> inorder = new ArrayList<>();\n        preorder.add(1);\n        preorder.add(2);\n        preorder.add(3);\n        preorder.add(4);\n        preorder.add(5);\n        preorder.add(6);\n        preorder.add(7);\n        preorder.add(8);\n        inorder.add(1);\n        inorder.add(2);\n        inorder.add(4);\n        inorder.add(5);\n        inorder.add(6);\n        inorder.add(7);\n        inorder.add(8);\n        TreeNode root = s.buildTree(preorder, inorder);\n        System.out.println(root.val);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        Collections.sort(l);\n        return l.get(0) < t && l.get(l.size() - 1) > t;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        int n = l.size();\n        int[] arr = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr[i] = l.get(i);\n        }\n        Arrays.sort(arr);\n        int sum = 0;\n        for(int i = 0; i < n; i++) {\n            sum += arr[i];\n            if(sum > t) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        if (l.size() == 0) return false;\n        int min = l.get(0);\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < min) min = l.get(i);\n            if (l.get(i) > max) max = l.get(i);\n        }\n        return (max - min) < t;\n    }\n\n    public List<List<Integer>> levelOrderBottomUp(TreeNode root) {\n        List<List<Integer>> res = new ArrayList<>();\n        if (root == null) return res;\n        Queue<TreeNode> q = new LinkedList<>();\n        q.offer(root);\n        while (!q.isEmpty()) {\n            int size = q.size();\n            List<Integer> level = new ArrayList<>();\n            for (int i = 0; i < size; i++) {\n                TreeNode node = q.poll();\n                level.add(node.val);\n                if (node.left != null) q.offer(node.left);\n                if (node.right != null) q.offer(node.right);\n            }\n            if (belowThreshold(level, 2)) res.add(level);\n        }\n        return res;\n    }\n\n    public List<List<Integer>> levelOrderTopDown(TreeNode root) {\n        List<List<Integer>> res = new ArrayList<>();\n        if (root == null) return res;\n        Queue<TreeNode> q = new LinkedList<>();\n        q.offer(root);\n        while (!q.isEmpty()) {\n            int size = q.size();\n            List<Integer> level = new ArrayList<>();\n            for (int i = 0; i < size; i++) {\n                TreeNode node = q.poll();\n                level.add(node.val);\n                if (node.left != null) q.offer(node.left);\n                if (node.right != null) q.offer(node.right);\n            }\n            res.add(level);\n        }\n        return res;\n    }\n\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        int sum = 0;\n        int carry = 0;\n        while (x != 0 || y != 0) {\n            int temp = x ^ y;\n            sum = sum + temp + carry;\n            carry = (x & y) << 1;\n            x = temp;\n            y = carry;\n        }\n        return sum + carry;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        int sum = 0;\n        while (x != 0) {\n            sum += x % 10;\n            x /= 10;\n        }\n        while (y != 0) {\n            sum += y % 10;\n            y /= 10;\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += sc.nextInt();\n        }\n        System.out.println(sum);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        int sum = 0;\n        int carry = 0;\n        while (x != 0 || y != 0) {\n            int temp = x ^ y;\n            sum += temp + carry;\n            carry = temp >> 1;\n            x = y;\n            y = temp;\n        }\n        if (carry == 1) {\n            sum += 1;\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        int sum = 0;\n        while (x != 0) {\n            int temp = x % 10;\n            x /= 10;\n            sum = sum + temp;\n        }\n        while (y != 0) {\n            int temp = y % 10;\n            y /= 10;\n            sum = sum + temp;\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        char[] s0_arr = s0.toCharArray();\n        char[] s1_arr = s1.toCharArray();\n        if (s0_arr.length != s1_arr.length) {\n            return false;\n        }\n        for (int i = 0; i < s0_arr.length; i++) {\n            if (s0_arr[i] != s1_arr[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if(s0.length() != s1.length())\n            return false;\n        char[] s0Chars = s0.toCharArray();\n        char[] s1Chars = s1.toCharArray();\n        Arrays.sort(s0Chars);\n        Arrays.sort(s1Chars);\n        for(int i = 0; i < s0Chars.length; i++)\n            if(s0Chars[i] != s1Chars[i])\n                return false;\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        Set<Character> set0 = new HashSet<>();\n        Set<Character> set1 = new HashSet<>();\n        \n        for(char c: s0.toCharArray()) {\n            set0.add(c);\n        }\n        \n        for(char c: s1.toCharArray()) {\n            set1.add(c);\n        }\n        \n        if(set0.size() != set1.size()) {\n            return false;\n        }\n        \n        for(char c: set0) {\n            if(!set1.contains(c)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        char[] s0Arr = s0.toCharArray();\n        char[] s1Arr = s1.toCharArray();\n        if (s0Arr.length != s1Arr.length) {\n            return false;\n        }\n        for (int i = 0; i < s0Arr.length; i++) {\n            if (s0Arr[i] != s1Arr[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        char[] s0Chars = s0.toCharArray();\n        char[] s1Chars = s1.toCharArray();\n        if (s0Chars.length != s1Chars.length) {\n            return false;\n        }\n        for (int i = 0; i < s0Chars.length; i++) {\n            if (s0Chars[i] != s1Chars[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) return false;\n        int[] arr0 = new int[256];\n        int[] arr1 = new int[256];\n        for (int i = 0; i < s0.length(); i++) {\n            arr0[s0.charAt(i)]++;\n            arr1[s1.charAt(i)]++;\n        }\n        for (int i = 0; i < 256; i++) {\n            if (arr0[i] != arr1[i]) return false;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        Set<Character> set0 = new HashSet<>();\n        Set<Character> set1 = new HashSet<>();\n        \n        for (char c : s0.toCharArray()) {\n            set0.add(c);\n        }\n        \n        for (char c : s1.toCharArray()) {\n            set1.add(c);\n        }\n        \n        if (set0.size() != set1.size()) {\n            return false;\n        }\n        \n        for (char c : set0) {\n            if (!set1.contains(c)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        Set<Character> set0 = new HashSet<>();\n        Set<Character> set1 = new HashSet<>();\n        \n        for (char c : s0.toCharArray()) {\n            set0.add(c);\n        }\n        \n        for (char c : s1.toCharArray()) {\n            set1.add(c);\n        }\n        \n        if (set0.size() != set1.size()) {\n            return false;\n        }\n        \n        for (char c : set0) {\n            if (!set1.contains(c)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        Set<Character> set0 = new HashSet<>();\n        Set<Character> set1 = new HashSet<>();\n        for (int i = 0; i < s0.length(); i++) {\n            char c = s0.charAt(i);\n            if (set0.contains(c)) {\n                return false;\n            }\n            set0.add(c);\n        }\n        for (int i = 0; i < s1.length(); i++) {\n            char c = s1.charAt(i);\n            if (set1.contains(c)) {\n                return false;\n            }\n            set1.add(c);\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        Set<Character> set0 = new HashSet<Character>();\n        Set<Character> set1 = new HashSet<Character>();\n        \n        for (char c : s0.toCharArray()) {\n            set0.add(c);\n        }\n        \n        for (char c : s1.toCharArray()) {\n            set1.add(c);\n        }\n        \n        if (set0.size() != set1.size()) {\n            return false;\n        }\n        \n        for (char c : set0) {\n            if (!set1.contains(c)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        char[] s0_arr = s0.toCharArray();\n        char[] s1_arr = s1.toCharArray();\n        if (s0_arr.length != s1_arr.length)\n            return false;\n        for (int i = 0; i < s0_arr.length; i++) {\n            if (s0_arr[i] != s1_arr[i])\n                return false;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        Set<Character> set0 = new HashSet<Character>();\n        Set<Character> set1 = new HashSet<Character>();\n        \n        for (int i = 0; i < s0.length(); i++) {\n            char c = s0.charAt(i);\n            if (set0.contains(c)) {\n                return false;\n            }\n            set0.add(c);\n        }\n        \n        for (int i = 0; i < s1.length(); i++) {\n            char c = s1.charAt(i);\n            if (set1.contains(c)) {\n                return false;\n            }\n            set1.add(c);\n        }\n        \n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        char[] s0Chars = s0.toCharArray();\n        char[] s1Chars = s1.toCharArray();\n        if (s0Chars.length != s1Chars.length) {\n            return false;\n        }\n        for (int i = 0; i < s0Chars.length; i++) {\n            if (s0Chars[i] != s1Chars[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        char[] s0Chars = s0.toCharArray();\n        char[] s1Chars = s1.toCharArray();\n        if(s0Chars.length != s1Chars.length)\n            return false;\n        for(int i = 0; i < s0Chars.length; i++)\n            if(s0Chars[i] != s1Chars[i])\n                return false;\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        int n0 = s0.length();\n        int n1 = s1.length();\n        if (n0 != n1) {\n            return false;\n        }\n        char[] s0Chars = s0.toCharArray();\n        char[] s1Chars = s1.toCharArray();\n        for (int i = 0; i < n0; i++) {\n            if (s0Chars[i] != s1Chars[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        return s0.equals(s1);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        int[] s0Arr = new int[26];\n        int[] s1Arr = new int[26];\n        for (int i = 0; i < s0.length(); i++) {\n            s0Arr[s0.charAt(i) - 'a']++;\n        }\n        for (int i = 0; i < s1.length(); i++) {\n            s1Arr[s1.charAt(i) - 'a']++;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (s0Arr[i] != s1Arr[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        Set<Character> set0 = new HashSet<Character>();\n        Set<Character> set1 = new HashSet<Character>();\n        \n        for (int i = 0; i < s0.length(); i++) {\n            char c = s0.charAt(i);\n            if (set0.contains(c)) {\n                return false;\n            }\n            set0.add(c);\n        }\n        \n        for (int i = 0; i < s1.length(); i++) {\n            char c = s1.charAt(i);\n            if (set1.contains(c)) {\n                return false;\n            }\n            set1.add(c);\n        }\n        \n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        Set<Character> set0 = new HashSet<>();\n        Set<Character> set1 = new HashSet<>();\n        for (char c : s0.toCharArray()) {\n            set0.add(c);\n        }\n        for (char c : s1.toCharArray()) {\n            set1.add(c);\n        }\n        return set0.equals(set1);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        Set<Character> set0 = new HashSet<>();\n        Set<Character> set1 = new HashSet<>();\n        \n        for (int i = 0; i < s0.length(); i++) {\n            char c = s0.charAt(i);\n            if (set0.contains(c)) {\n                set1.remove(c);\n            } else {\n                set1.add(c);\n            }\n        }\n        \n        for (int i = 0; i < s1.length(); i++) {\n            char c = s1.charAt(i);\n            if (set1.contains(c)) {\n                set0.remove(c);\n            } else {\n                set0.add(c);\n            }\n        }\n        \n        return set0.isEmpty() && set1.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        int d = 1;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        int d = 1;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        return fib(n - 1) + fib(n - 2);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0, b = 1;\n        for (int i = 2; i <= n; i++) {\n            int temp = a;\n            a = b;\n            b = temp + b;\n        }\n        return b;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n == 0)\n            return 0;\n        if (n == 1)\n            return 1;\n        return fib(n - 1) + fib(n - 2);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if(n <= 1) {\n            return n;\n        }\n        int a = 0;\n        int b = 1;\n        for(int i = 2; i <= n; i++) {\n            int temp = a;\n            a = b;\n            b = temp + b;\n        }\n        return b;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        int a = 0, b = 1;\n        for (int i = 2; i <= n; i++) {\n            int temp = a;\n            a = b;\n            b = temp + b;\n        }\n        return b;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        int a = 0;\n        int b = 1;\n        for (int i = 2; i <= n; i++) {\n            int temp = a;\n            a = b;\n            b = temp + b;\n        }\n        return b;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0;\n        int b = 1;\n        int c;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        int a = 0;\n        int b = 1;\n        int c;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        int d = 1;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n == 0)\n            return 0;\n        if (n == 1)\n            return 1;\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        int d = 1;\n        for (int i = 0; i < n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n == 0)\n            return 0;\n        if (n == 1)\n            return 1;\n        return fib(n - 1) + fib(n - 2);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if(n == 0) return 0;\n        if(n == 1) return 1;\n        return fib(n-1) + fib(n-2);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        int d = 1;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] memo = new int[n + 1];\n        memo[0] = 0;\n        memo[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            memo[i] = memo[i - 1] + memo[i - 2];\n        }\n        return memo[n];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        int a = 0;\n        int b = 1;\n        for (int i = 2; i <= n; i++) {\n            int temp = a;\n            a = b;\n            b = temp + b;\n        }\n        return b;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n == 0)\n            return 0;\n        if (n == 1)\n            return 1;\n        return fib(n - 1) + fib(n - 2);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        return fib(n - 1) + fib(n - 2);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(')');\n            } else if (c == '[') {\n                stack.push(']');\n            } else if (c == '{') {\n                stack.push('}');\n            } else {\n                if (stack.isEmpty() || stack.peek() != c) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<Character>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets.length() == 0)\n            return true;\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n            if (c == '(' || c == '{' || c == '[')\n                stack.push(c);\n            else if (c == ')' || c == '}' || c == ']') {\n                if (stack.empty() || stack.peek() != c)\n                    return false;\n                stack.pop();\n            }\n        }\n        return stack.empty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(char c : brackets.toCharArray()) {\n            if(c == '(') {\n                stack.push(c);\n            } else if(c == ')') {\n                if(stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(')');\n            } else if (c == '{') {\n                stack.push('}');\n            } else if (c == '[') {\n                stack.push(']');\n            } else {\n                if (stack.isEmpty() || stack.peek() != c) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack&lt;Character&gt; stack = new Stack&lt;&gt;();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != c) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n</code>\n</pre>\n</div>\n\nThe solution is to use a stack to keep track of the brackets.\n\nFor example, the following code is balanced:\n\n<div class=\"code-bg-light-grey\">\n<pre>\n<code class=\"language-java\">\npublic class Solution {\n    public boolean correctBracketing(String brackets) {\n        Stack&lt;Character&gt; stack = new Stack&lt;&gt;();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != c) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n</code>\n</pre>\n</div>\n\nThe solution is to use a stack to keep track of the brackets.\n\nFor example, the following code is balanced:\n\n<div class=\"code-bg-light-grey\">\n<pre>\n<code class=\"language-java\">\npublic class Solution {\n    public boolean correctBracketing(String brackets) {\n        Stack&lt;Character&gt; stack = new Stack&lt;&gt;();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != c) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n</code>\n</pre>\n</div>\n\nThe solution is to use a stack to keep track of the brackets.\n\nFor example, the following code is balanced:\n\n<div class=\"code-bg-light-grey\">\n<pre>\n<code class=\"language-java\">\npublic class Solution {\n    public boolean correctBracketing(String brackets) {\n        Stack&lt;Character&gt; stack = new Stack&lt;&gt;();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != c) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n</code>\n</pre>\n</div>\n\nThe solution is to use a stack to keep track of the brackets.\n\nFor example, the following code is balanced:\n\n<div class=\"code-bg-light-grey\">\n<pre>\n<code class=\"language-java\">\npublic class Solution {\n    public boolean correctBracketing(String brackets) {\n        Stack&lt;Character&gt; stack = new Stack&lt;&gt;();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != c) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n</code>\n</pre>\n</div>\n\nThe solution is to use a stack to keep track of the brackets.\n\nFor example, the following code is balanced:\n\n<div class=\"code-bg-light-grey\">\n<pre>\n<code class=\"language-java\">\npublic class Solution {\n    public boolean correctBracketing(String brackets) {\n        Stack&lt;Character&gt; stack = new Stack&lt;&gt;();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != c) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n</code>\n</pre>\n</div>\n\nThe solution is to use a stack to keep track of the brackets.\n\nFor example, the following code is balanced:\n\n<div class=\"code-bg-light-grey\">\n<pre>\n<code class=\"language-java\">\npublic class Solution {\n    public boolean correctBracketing(String brackets) {\n        Stack&lt;Character&gt; stack = new Stack&lt;&gt;();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != c) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n</code>\n</pre>\n</div>\n\nThe solution is to use a stack to keep track of the brackets.\n\nFor example, the following code is balanced:\n\n<div class=\"code-bg-light-grey\">\n<pre>\n<code class=\"language-java\">\npublic class Solution {\n    public boolean correctBracketing(String brackets) {\n        Stack&lt;Character&gt; stack = new Stack&lt;&gt;();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != c) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n</code>\n</pre>\n</div>\n\nThe solution is to use a stack to keep track of the brackets.\n\nFor example, the following code is balanced:\n\n<div class=\"code-bg-light-grey\">\n<pre>\n<code class=\"language-java\">\npublic class Solution {\n    public boolean correctBracketing(String brackets) {\n        Stack&lt;Character&gt; stack = new Stack&lt;&gt;();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != c) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n</code>\n</pre>\n</div>\n\nThe solution is to use a stack to keep track of the brackets.\n\nFor example, the following code is balanced:\n\n<div class=\"code-bg-light-grey\">\n<pre>\n<code class=\"language-java\">\npublic class Solution {\n    public boolean correctBracketing(String brackets) {\n        Stack&lt;Character&gt; stack = new Stack&lt;&gt;();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != c) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n</code>\n</pre>\n</div>\n\nThe solution is to use a stack to keep track of the brackets.\n\nFor example, the following code is balanced:\n\n<div class=\"code-bg-light-grey\">\n<pre>\n<code class=\"language-java\">\npublic class Solution {\n    public boolean correctBracketing(String brackets) {\n        Stack&lt;Character&gt; stack = new Stack&lt;&gt;();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != c) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(')');\n            } else if (c == '[') {\n                stack.push(']');\n            } else if (c == '{') {\n                stack.push('}');\n            } else {\n                if (stack.isEmpty() || stack.peek() != c) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(')');\n            } else if (c == '[') {\n                stack.push(']');\n            } else if (c == '{') {\n                stack.push('}');\n            } else if (c == '<') {\n                stack.push('>');\n            } else {\n                if (stack.isEmpty() || stack.peek() != c) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        int depth = 0;\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c == ')' && top != '(') {\n                    return false;\n                }\n                if (c == '}' && top != '{') {\n                    return false;\n                }\n                if (c == ']' && top != '[') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n```\n\n### 2.2 \u6570\u7ec4\u7684\u904d\u5386\n\n#### 2.2.1 \u6570\u7ec4\u7684\u904d\u5386\n\n```java\nint[] a = {1, 2, 3};\nfor (int i = 0; i < a.length; i++) {\n    System.out.println(a[i]);\n}\n```\n\n#### 2.2.2 \u6570\u7ec4\u7684\u904d\u53862\n\n```java\nint[] a = {1, 2, 3};\nfor (int i = 0; i < a.length; i++) {\n    System.out.println(a[i]);\n}\nfor (int i = 0; i < a.length; i++) {\n    System.out.println(a[i]);\n}\nfor (int i = 0; i < a.length; i++) {\n    System.out.println(a[i]);\n}\n```\n\n#### 2.2.3 \u6570\u7ec4\u7684\u904d\u53863\n\n```java\nint[] a = {1, 2, 3};\nfor (int i = 0; i < a.length; i++) {\n    System.out.println(a[i]);\n}\nfor (int i = 0; i < a.length; i++) {\n    System.out.println(a[i]);\n}\nfor (int i = 0; i < a.length; i++) {\n    System.out.println(a[i]);\n}\nfor (int i = 0; i < a.length; i++) {\n    System.out.println(a[i]);\n}\nfor (int i = 0; i < a.length; i++) {\n    System.out.println(a[i]);\n}\nfor (int i = 0; i < a.length; i++) {\n    System.out.println(a[i]);\n}\nfor (int i = 0; i < a.length; i++) {\n    System.out.println(a[i]);\n}\nfor (int i = 0; i < a.length; i++) {\n    System.out.println(a[i]);\n}\nfor (int i = 0; i < a.length; i++) {\n    System.out.println(a[i]);\n}\nfor (int i = 0; i < a.length; i++) {\n    System.out.println(a[i]);\n}\nfor (int i = 0; i < a.length; i++) {\n    System.out.println(a[i]);\n}\nfor (int i = 0; i < a.length; i++) {\n    System.out.println(a[i]);\n}\nfor (int i = 0; i < a.length; i++) {\n    System.out.println(a[i]);\n}\nfor (int i = 0; i < a.length; i++) {\n    System.out.println(a[i]);\n}\nfor (int i = 0; i < a.length; i++) {\n    System.out.println(a[i]);\n}\nfor (int i = 0; i < a.length; i++) {\n    System.out.println(a[i]);\n}\nfor (int i = 0; i < a.length; i++) {\n    System.out.println(a[i]);\n}\nfor (int i = 0; i < a.length; i++) {\n    System.out.println(a[i]);\n}\nfor (int i = 0; i < a.length; i++) {\n    System.out.println(a[i]);\n}\nfor (int i = 0; i < a.length; i++) {\n    System.out.println(a[i]);\n}\nfor (int i = 0; i < a.length; i++) {\n    System.out.println(a[i]);\n}\nfor (int i = 0; i < a.length; i++) {\n    System.out.println(a[i]);\n}\nfor (int i = 0; i < a.length; i++) {\n    System.out.println(a[i]);\n}\nfor (int i = 0; i < a.length; i++) {\n    System.out.println(a[i]);\n}\nfor (int i = 0; i < a.length; i++) {\n    System.out.println(a[i]);\n}\nfor (int i = 0; i < a.length; i++) {\n    System.out.println(a[i]);\n}\nfor (int i = 0; i < a.length; i++) {\n    System.out.println(a[i]);\n}\nfor (int i = 0; i < a.length; i++) {\n    System.out.println(a[i]);\n}\nfor (int i = 0; i < a.length; i++) {\n    System.out.println(a[i]);\n}\nfor (int i = 0; i < a.length; i++) {\n    System.out.println(a[i]);\n}\nfor (int i = 0; i < a.length; i++) {\n    System.out.println(a[i]);\n}\nfor (int i = 0; i < a.length; i++) {\n    System.out.println(a[i]);\n}\nfor (int i = 0; i < a.length; i++) {\n    System.out.println(a[i]);\n}\nfor (int i = 0; i < a.length; i++) {\n    System.out.println(a[i]);\n}\nfor (int i = 0; i < a.length; i++) {\n    System.out.println(a[i]);\n}\nfor (int i = 0; i < a.length; i++) {\n    System.out.println(a[i]);\n}\nfor (int i = 0; i < a.length; i++) {\n    System.out.println(a[i]);\n}\nfor (int i = 0; i < a.length; i++) {\n    System.out.println(a[i]);\n}\nfor (int i = 0; i < a.length; i++) {\n    System.out.println(a[i]);\n}\nfor (int i = 0; i < a.length; i++) {\n    System.out.println(a[i]);\n}\nfor (int i = 0; i < a.length; i++) {\n    System.out.println(a[i]);\n}\nfor (int i = 0; i < a.length; i++) {\n    System.out.println(a[i]);\n}\nfor (int i = 0; i < a.length; i++) {\n    System.out.println(a[i]);\n}\nfor (int i = 0; i < a.length; i++) {\n    System.out.println(a[i]);\n}\nfor (int i = 0; i < a.length; i++) {\n    System.out.println(a[i]);\n}\nfor (int i = 0; i < a.length; i++) {\n    System.out.println(a[i]);\n}\nfor (int i = 0; i < a.length; i++) {\n    System.out.println(a[i]);\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(')');\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(' || c == '[') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != c) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push('(');\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n\n    public int maxSubArray(int[] nums) {\n        int max = nums[0];\n        int sum = nums[0];\n        for (int i = 1; i < nums.length; i++) {\n            sum = Math.max(sum + nums[i], nums[i]);\n            max = Math.max(max, sum);\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '(') {\n                depth++;\n            } else if (b == ')') {\n                depth--;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != c) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != c) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != c) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != c) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != c) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != c) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != c) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != c) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != c) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != c) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != c) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != c) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != c) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != c) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != c) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != c) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets.length() == 0) {\n            return true;\n        }\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '(') {\n                stack.push(brackets.charAt(i));\n            } else if (brackets.charAt(i) == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() <= 1) return true;\n        int min = l.get(0);\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < min) {\n                min = l.get(i);\n            }\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return min <= max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() == 1) return true;\n        int min = l.get(0);\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < min) {\n                min = l.get(i);\n            }\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return min <= max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if(l.size() == 1)\n            return true;\n        int min = l.get(0);\n        int max = l.get(0);\n        for(int i = 1; i < l.size(); i++) {\n            if(l.get(i) < min)\n                min = l.get(i);\n            if(l.get(i) > max)\n                max = l.get(i);\n        }\n        return (max - min) >= 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() < 2) {\n            return true;\n        }\n        int min = l.get(0);\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < min) {\n                min = l.get(i);\n            }\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return min <= max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() == 1) {\n            return true;\n        }\n        int min = l.get(0);\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < min) {\n                min = l.get(i);\n            }\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return min <= max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() == 1) return true;\n        int min = l.get(0);\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < min) {\n                min = l.get(i);\n            }\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return (min < max);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if(l.size() == 0) return true;\n        int min = l.get(0);\n        int max = l.get(0);\n        for(int i = 1; i < l.size(); i++) {\n            if(l.get(i) < min) {\n                return false;\n            }\n            if(l.get(i) > max) {\n                return false;\n            }\n            min = l.get(i);\n            max = l.get(i);\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        Collections.sort(l);\n        for (int i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        int n = l.size();\n        if(n == 0) return true;\n        int min = l.get(0);\n        int max = l.get(0);\n        for(int i = 1; i < n; i++) {\n            if(l.get(i) < min) {\n                min = l.get(i);\n            }\n            if(l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return (min >= max);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() <= 1) {\n            return true;\n        }\n        int min = l.get(0);\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < min) {\n                min = l.get(i);\n            }\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return min <= max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() < 2) return true;\n        int min = l.get(0);\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < min) {\n                min = l.get(i);\n            }\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return min >= max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() == 0) {\n            return true;\n        }\n        int min = l.get(0);\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < min) {\n                min = l.get(i);\n            }\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return (min == max);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() == 0) {\n            return true;\n        }\n        int min = l.get(0);\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < min) {\n                min = l.get(i);\n            }\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return min >= max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() == 1) {\n            return true;\n        }\n        int min = l.get(0);\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < min) {\n                min = l.get(i);\n            }\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return min <= max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() == 1) {\n            return true;\n        }\n        int min = l.get(0);\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < min) {\n                min = l.get(i);\n            }\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return min >= max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if(l.size() == 0)\n            return true;\n        int min = l.get(0);\n        int max = l.get(0);\n        for(int i = 1; i < l.size(); i++) {\n            if(l.get(i) < min)\n                return false;\n            if(l.get(i) > max)\n                return false;\n            min = l.get(i);\n            max = l.get(i);\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if(l.size() == 1)\n            return true;\n        int i = 0;\n        int j = l.size() - 1;\n        while(i < j) {\n            if(l.get(i) > l.get(j))\n                return false;\n            else if(l.get(i) < l.get(j))\n                return true;\n            i++;\n            j--;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() < 2) return true;\n        int min = l.get(0), max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < min) {\n                min = l.get(i);\n            } else if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return min >= max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if(l.size() == 1) return true;\n        int min = l.get(0);\n        int max = l.get(0);\n        for(int i = 1; i < l.size(); i++) {\n            if(l.get(i) < min) min = l.get(i);\n            if(l.get(i) > max) max = l.get(i);\n        }\n        if(min == max) return true;\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() == 0) return true;\n        int min = l.get(0);\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < min) {\n                min = l.get(i);\n            }\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return (max - min) > 1;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        List<Integer> result = new ArrayList<>();\n        Set<Integer> set1 = new HashSet<>();\n        Set<Integer> set2 = new HashSet<>();\n        for(int i = 0; i < l1.size(); i++) {\n            set1.add(l1.get(i));\n        }\n        for(int i = 0; i < l2.size(); i++) {\n            set2.add(l2.get(i));\n        }\n        for(int i = 0; i < set1.size(); i++) {\n            if(set2.contains(set1.get(i))) {\n                result.add(set1.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        List<Integer> result = new ArrayList<>();\n        int n1 = l1.size(), n2 = l2.size();\n        int i = 0, j = 0;\n        while (i < n1 && j < n2) {\n            if (l1.get(i) == l2.get(j)) {\n                result.add(l1.get(i));\n                i++;\n                j++;\n            } else if (l1.get(i) < l2.get(j)) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        List<Integer> result = new ArrayList<>();\n        int n1 = l1.size();\n        int n2 = l2.size();\n        int i = 0;\n        int j = 0;\n        while (i < n1 && j < n2) {\n            if (l1.get(i) == l2.get(j)) {\n                result.add(l1.get(i));\n                i++;\n                j++;\n            } else if (l1.get(i) < l2.get(j)) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        List<Integer> result = new ArrayList<>();\n        int i = 0;\n        int j = 0;\n        while (i < l1.size() && j < l2.size()) {\n            if (l1.get(i) == l2.get(j)) {\n                result.add(l1.get(i));\n                i++;\n                j++;\n            } else if (l1.get(i) < l2.get(j)) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        List<Integer> result = new ArrayList<>();\n        Set<Integer> set1 = new HashSet<>();\n        Set<Integer> set2 = new HashSet<>();\n        for (int i : l1) {\n            set1.add(i);\n        }\n        for (int i : l2) {\n            set2.add(i);\n        }\n        for (int i : set1) {\n            if (set2.contains(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        List<Integer> result = new ArrayList<>();\n        for(int i=0;i<l1.size();i++){\n            for(int j=0;j<l2.size();j++){\n                if(l1.get(i)==l2.get(j)){\n                    result.add(l1.get(i));\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l1.size(); i++) {\n            for (int j = 0; j < l2.size(); j++) {\n                if (l1.get(i) == l2.get(j)) {\n                    result.add(l1.get(i));\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        List<Integer> result = new ArrayList<>();\n        Set<Integer> set1 = new HashSet<>();\n        Set<Integer> set2 = new HashSet<>();\n        for (int i = 0; i < l1.size(); i++) {\n            set1.add(l1.get(i));\n        }\n        for (int i = 0; i < l2.size(); i++) {\n            set2.add(l2.get(i));\n        }\n        for (int i = 0; i < set1.size(); i++) {\n            if (set2.contains(set1.get(i))) {\n                result.add(set1.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < l1.size(); i++) {\n            for (int j = 0; j < l2.size(); j++) {\n                if (l1.get(i) == l2.get(j)) {\n                    result.add(l1.get(i));\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        List<Integer> result = new ArrayList<>();\n        int i = 0;\n        int j = 0;\n        while (i < l1.size() && j < l2.size()) {\n            if (l1.get(i) == l2.get(j)) {\n                result.add(l1.get(i));\n                i++;\n                j++;\n            } else if (l1.get(i) > l2.get(j)) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        List<Integer> result = new ArrayList<>();\n        Set<Integer> set1 = new HashSet<>();\n        Set<Integer> set2 = new HashSet<>();\n        for(int i:l1){\n            set1.add(i);\n        }\n        for(int i:l2){\n            set2.add(i);\n        }\n        for(int i:set1){\n            if(set2.contains(i)){\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        List<Integer> result = new ArrayList<>();\n        Set<Integer> set1 = new HashSet<>();\n        Set<Integer> set2 = new HashSet<>();\n        for (int i = 0; i < l1.size(); i++) {\n            set1.add(l1.get(i));\n        }\n        for (int i = 0; i < l2.size(); i++) {\n            set2.add(l2.get(i));\n        }\n        for (int i = 0; i < set1.size(); i++) {\n            if (set2.contains(set1.get(i))) {\n                result.add(set1.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        List<Integer> result = new ArrayList<>();\n        Set<Integer> set1 = new HashSet<>();\n        Set<Integer> set2 = new HashSet<>();\n        for (int i = 0; i < l1.size(); i++) {\n            set1.add(l1.get(i));\n        }\n        for (int i = 0; i < l2.size(); i++) {\n            set2.add(l2.get(i));\n        }\n        for (int i = 0; i < set1.size(); i++) {\n            if (set2.contains(set1.get(i))) {\n                result.add(set1.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        List<Integer> result = new ArrayList<>();\n        Set<Integer> set1 = new HashSet<>();\n        Set<Integer> set2 = new HashSet<>();\n        for (int i : l1) {\n            set1.add(i);\n        }\n        for (int i : l2) {\n            set2.add(i);\n        }\n        for (int i : set1) {\n            if (set2.contains(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        List<Integer> result = new ArrayList<>();\n        Set<Integer> set1 = new HashSet<>();\n        Set<Integer> set2 = new HashSet<>();\n        for (int i : l1) {\n            set1.add(i);\n        }\n        for (int i : l2) {\n            set2.add(i);\n        }\n        for (int i : set1) {\n            if (set2.contains(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        List<Integer> res = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < l1.size(); i++) {\n            map.put(l1.get(i), i);\n        }\n        for (int i = 0; i < l2.size(); i++) {\n            if (map.containsKey(l2.get(i))) {\n                res.add(map.get(l2.get(i)));\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        List<Integer> result = new ArrayList<>();\n        int i = 0;\n        int j = 0;\n        while(i < l1.size() && j < l2.size()) {\n            if(l1.get(i) == l2.get(j)) {\n                result.add(l1.get(i));\n                i++;\n                j++;\n            } else if(l1.get(i) < l2.get(j)) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        List<Integer> result = new ArrayList<>();\n        int[] l1Arr = new int[l1.size()];\n        int[] l2Arr = new int[l2.size()];\n        for (int i = 0; i < l1.size(); i++) {\n            l1Arr[i] = l1.get(i);\n        }\n        for (int i = 0; i < l2.size(); i++) {\n            l2Arr[i] = l2.get(i);\n        }\n        for (int i = 0; i < l1Arr.length; i++) {\n            for (int j = 0; j < l2Arr.length; j++) {\n                if (l1Arr[i] == l2Arr[j]) {\n                    result.add(l1Arr[i]);\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        List<Integer> result = new ArrayList<>();\n        for(int i = 0; i < l1.size(); i++) {\n            for(int j = 0; j < l2.size(); j++) {\n                if(l1.get(i) == l2.get(j)) {\n                    result.add(l1.get(i));\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        List<Integer> result = new ArrayList<>();\n        Set<Integer> set1 = new HashSet<>();\n        Set<Integer> set2 = new HashSet<>();\n        for (int i : l1) {\n            set1.add(i);\n        }\n        for (int i : l2) {\n            set2.add(i);\n        }\n        for (int i : set1) {\n            if (set2.contains(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int largestPrimeFactor = 1;\n        for (int i = 2; i <= n/2; i++) {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n                n = n / i;\n            }\n        }\n        return largestPrimeFactor;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int largestPrime = 0;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largestPrime = i;\n                break;\n            }\n        }\n        return largestPrime;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int max = 0;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                max = i;\n                break;\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        if (n == 1) return 1;\n        int p = 2;\n        while (p * p <= n) {\n            if (n % p == 0) {\n                n /= p;\n                p++;\n            } else {\n                p++;\n            }\n        }\n        return p;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int prime = 2;\n        while(prime*prime <= n) {\n            if(n%prime == 0) {\n                n /= prime;\n            }\n            else {\n                prime++;\n            }\n        }\n        return prime;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int largestPrime = 0;\n        for (int i = 2; i <= n/2; i++) {\n            if (n % i == 0) {\n                largestPrime = i;\n                n = n / i;\n            }\n        }\n        return largestPrime;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int prime = 2;\n        while(prime*prime <= n){\n            if(n%prime == 0){\n                n /= prime;\n            }\n            else{\n                prime++;\n            }\n        }\n        return prime;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int max = 0;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                max = Math.max(max, i);\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int[] primes = new int[n + 1];\n        primes[0] = 2;\n        primes[1] = 3;\n        for (int i = 2; i <= n; i++) {\n            if (primes[i] == i) {\n                for (int j = i * 2; j <= n; j += i) {\n                    primes[j] = i;\n                }\n            }\n        }\n        int max = 0;\n        for (int i = 0; i < primes.length; i++) {\n            if (primes[i] > max) {\n                max = primes[i];\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int max = 0;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                max = Math.max(max, i);\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int i = 2;\n        while(i*i<=n){\n            if(n%i==0){\n                n/=i;\n                i++;\n            }\n            else{\n                i++;\n            }\n        }\n        return i;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return i;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int[] factors = new int[n];\n        factors[0] = 1;\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                factors[i] = i;\n                while (n % i == 0) {\n                    n /= i;\n                }\n            }\n        }\n        if (n > 1) {\n            factors[n] = n;\n        }\n        int max = 0;\n        for (int i = 0; i < factors.length; i++) {\n            if (factors[i] > max) {\n                max = factors[i];\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int max = 0;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                max = i;\n                break;\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int i = 2;\n        int j = 2;\n        int k = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                j = i;\n                while (n % i == 0) {\n                    n /= i;\n                    k++;\n                }\n            }\n            i++;\n        }\n        if (n > 1) {\n            j = i;\n            while (n > 1) {\n                n /= i;\n                k++;\n            }\n        }\n        return k;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        if (n == 1) return 1;\n        int max = 1;\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                max = Math.max(max, i);\n                n /= i;\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int i = 2;\n        while(i*i <= n){\n            if(n%i == 0){\n                n /= i;\n            }\n            else{\n                i++;\n            }\n        }\n        return n;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int largestPrimeFactor = 2;\n        for (int i = 2; i <= n/2; i++) {\n            if (n % i == 0) {\n                largestPrimeFactor = i;\n                break;\n            }\n        }\n        return largestPrimeFactor;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int i, j, k, l, m, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, n18, n19, n20, n21, n22, n23, n24, n25, n26, n27, n28, n29, n30, n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41, n42, n43, n44, n45, n46, n47, n48, n49, n50, n51, n52, n53, n54, n55, n56, n57, n58, n59, n60, n61, n62, n63, n64, n65, n66, n67, n68, n69, n70, n71, n72, n73, n74, n75, n76, n77, n78, n79, n80, n81, n82, n83, n84, n85, n86, n87, n88, n89, n90, n91, n92, n93, n94, n95, n96, n97, n98, n99, n100, n101, n102, n103, n104, n105, n106, n107, n108, n109, n110, n111, n112, n113, n114, n115, n116, n117, n118, n119, n120, n121, n122, n123, n124, n125, n126, n127, n128, n129, n130, n131, n132, n133, n134, n135, n136, n137, n138, n139, n140, n141, n142, n143, n144, n145, n146, n147, n148, n149, n150, n151, n152, n153, n154, n155, n156, n157, n158, n159, n160, n161, n162, n163, n164, n165, n166, n167, n168, n169, n170, n171, n172, n173, n174, n175, n176, n177, n178, n179, n180, n181, n182, n183, n184, n185, n186, n187, n188, n189, n190, n191, n192, n193, n194, n195, n196, n197, n198, n199, n200, n201, n202, n203, n204, n205, n206, n207, n208, n209, n210, n211, n212, n213, n214, n215, n216, n217, n218, n219, n220, n221, n222, n223, n224, n225, n226, n227, n228, n229, n230, n231, n232, n233, n234, n235, n236, n237, n238, n239, n240, n241, n242, n243, n244, n245, n246, n247, n248, n249, n250, n251, n252, n253, n254, n255, n256, n257, n258, n259, n260, n261, n262, n263, n264, n265, n266, n267, n268, n269, n270, n271, n272, n273, n274, n275, n276, n277, n278, n279, n280, n281, n282, n283, n284, n285, n286, n287, n288, n289, n290, n291, n292, n293, n294, n295, n296, n297, n298, n299, n300, n301, n302, n303, n304, n305, n306, n307, n308, n309, n310, n311, n312, n313, n314, n315, n316, n317, n318, n319, n320, n321, n322, n323, n324, n325, n326, n327, n328, n329, n330, n331, n332, n333, n334, n335, n336, n337, n338, n339, n340, n341, n342, n343, n344, n345, n346, n347, n348, n349, n350, n351, n352, n353, n354, n355, n356, n357, n358, n359, n360, n361, n362, n363, n364, n365, n366, n367, n368, n369, n370, n371, n372, n373, n374, n375, n376, n377, n378, n379, n380, n381, n382, n383, n384, n385, n386, n387, n388, n389, n390, n391, n392, n393, n394, n395, n396, n397, n398, n399, n400, n401, n402, n403, n404, n405, n406, n407, n408"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int largestPrime = 0;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largestPrime = i;\n                break;\n            }\n        }\n        return largestPrime;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int result = 0;\n        int i = 1;\n        while(i <= n) {\n            result += i;\n            i++;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int result = 0;\n        for (int i = 1; i <= n; i++) {\n            result += i;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int result = 0;\n        for (int i = 1; i <= n; i++) {\n            result += i;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int result = 0;\n        for (int i = 1; i <= n; i++) {\n            result += i;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = i;\n        }\n        int maxSum = Integer.MIN_VALUE;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                int sum = arr[i] + arr[j];\n                if (sum > maxSum) {\n                    maxSum = sum;\n                }\n            }\n        }\n        return maxSum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        while (n != 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        System.out.println(sumToN(n));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int result = 0;\n        int i = 0;\n        while(i < n) {\n            result += i;\n            i++;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        while (n > 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int[] arr = new int[n];\n        arr[0] = 0;\n        for (int i = 1; i < n; i++) {\n            arr[i] = arr[i - 1] + arr[i - 2];\n        }\n        return arr[n - 1];\n    }\n\n    public int maxProfit(int[] prices) {\n        int n = prices.length;\n        int min = prices[0];\n        int max = prices[0];\n        for (int i = 1; i < n; i++) {\n            min = Math.min(min, prices[i]);\n            max = Math.max(max, prices[i] - min);\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty() || stack.peek() != c) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(char c : brackets.toCharArray()) {\n            if(c == '(') {\n                stack.push(c);\n            } else if(c == ')') {\n                if(stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<Character>();\n        for(char c : brackets.toCharArray()) {\n            if(c == '(') {\n                stack.push(c);\n            }\n            else if(c == ')') {\n                if(stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != c) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets == null || brackets.length() == 0) {\n            return false;\n        }\n        char[] bracketsArr = brackets.toCharArray();\n        Stack<Character> stack = new Stack<Character>();\n        for (char c : bracketsArr) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(char c : brackets.toCharArray()) {\n            if(c == '(') {\n                stack.push(c);\n            }\n            else if(c == ')') {\n                if(stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<Character>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets == null || brackets.length() == 0) {\n            return false;\n        }\n        Stack<Character> stack = new Stack<Character>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == '}' || c == ']') {\n                if (stack.isEmpty() || stack.peek() != c) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets == null || brackets.length() == 0) return true;\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '(') {\n                stack.push(brackets.charAt(i));\n            } else if (brackets.charAt(i) == ')') {\n                if (stack.isEmpty() || stack.peek() != brackets.charAt(i)) return false;\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<Character>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push('(');\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(')');\n            } else if (c == '{') {\n                stack.push('}');\n            } else if (c == '[') {\n                stack.push(']');\n            } else {\n                if (stack.isEmpty() || stack.peek() != c) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<Character>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        int depth = 0;\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            } else if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(' || c == '[') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != c) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets == null || brackets.length() == 0) {\n            return true;\n        }\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            } else if (c == '{') {\n                stack.push(c);\n            } else if (c == '}') {\n                if (stack.isEmpty() || stack.peek() != '{') {\n                    return false;\n                }\n                stack.pop();\n            } else if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n\n## 3. \u89e3\u7b54\n\n```java\nclass Solution {\n    public boolean correctBracketing(String brackets) {\n        if (brackets == null || brackets.length() == 0) {\n            return true;\n        }\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            } else if (c == '{') {\n                stack.push(c);\n            } else if (c == '}') {\n                if (stack.isEmpty() || stack.peek() != '{') {\n                    return false;\n                }\n                stack.pop();\n            } else if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(char c : brackets.toCharArray()) {\n            if(c == '(') {\n                stack.push(c);\n            }\n            else if(c == ')') {\n                if(stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets.length() % 2 != 0) {\n            return false;\n        }\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> res = new ArrayList<>();\n        int n = xs.size();\n        for (int i = 0; i < n; i++) {\n            int x = xs.get(i);\n            for (int j = 1; j <= 3; j++) {\n                int y = x * j;\n                if (y >= 10) {\n                    res.add(y / 10);\n                    res.add(y % 10);\n                } else {\n                    res.add(y);\n                }\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> ans = new ArrayList<>();\n        int n = xs.size();\n        int[] dx = {1, -1, 0, 0};\n        int[] dy = {0, 0, 1, -1};\n        for (int i = 0; i < n; i++) {\n            int x = xs.get(i);\n            int y = 0;\n            for (int j = 0; j < 4; j++) {\n                int nx = x + dx[j];\n                int ny = y + dy[j];\n                if (nx >= 0 && nx < n && ny >= 0 && ny < n) {\n                    y = ny;\n                }\n            }\n            ans.add(y);\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n        if (xs.size() == 0) {\n            return result;\n        }\n        int n = xs.size();\n        int[] dp = new int[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = xs.get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == j) {\n                    continue;\n                }\n                dp[i] = Math.max(dp[i], dp[j] + xs.get(j));\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            result.add(dp[i]);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        \n        \n            result.add(i\n```\n"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> ans = new ArrayList<>();\n        for (int i = 0; i < xs.size() - 1; i++) {\n            ans.add(xs.get(i + 1) - xs.get(i));\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> ans = new ArrayList<>();\n        for (int i = 0; i < xs.size(); i++) {\n            ans.add(0);\n        }\n        for (int i = 1; i < xs.size(); i++) {\n            ans.set(i, ans.get(i - 1) + xs.get(i));\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> ans = new ArrayList<>();\n        int n = xs.size();\n        for(int i = 0; i < n; i++) {\n            ans.add(0);\n        }\n        for(int i = 1; i < n; i++) {\n            ans.set(i, ans.get(i-1) + xs.get(i));\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> ans = new ArrayList<>();\n        int n = xs.size();\n        for (int i = 0; i < n; i++) {\n            ans.add(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                ans.set(j, ans.get(j) + xs.get(j) * (i - j));\n            }\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> ans = new ArrayList<>();\n        for(int i = 0; i < xs.size(); i++) {\n            ans.add(0);\n        }\n        for(int i = 1; i < xs.size(); i++) {\n            ans.set(i, ans.get(i-1) + xs.get(i));\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < xs.size(); i++) {\n            if (i % 2 == 0) {\n                result.add(xs.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n        int n = xs.size();\n        for (int i = 0; i < n; i++) {\n            result.add(xs.get(i) * (i + 1));\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> ans = new ArrayList<>();\n        int n = xs.size();\n        for(int i = 0; i < n; i++) {\n            ans.add(0);\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 0; j < n; j++) {\n                ans.set(j, ans.get(j) + xs.get(i-1) * ans.get(j));\n            }\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> ans = new ArrayList<>();\n        int n = xs.size();\n        for (int i = 0; i < n; i++) {\n            ans.add(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                ans.set(j, ans.get(j) + xs.get(i - 1) * ans.get(j));\n            }\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < xs.size(); i++) {\n            for (int j = i + 1; j < xs.size(); j++) {\n                res.add(xs.get(i) * xs.get(j));\n            }\n        }\n        return res;\n    }\n\n    public boolean isSubsequence(String s, String t) {\n        List<Integer> xs = new ArrayList<>();\n        for (char c : s.toCharArray()) {\n            xs.add(c - 'a');\n        }\n        List<Integer> ys = derivative(xs);\n        for (char c : t.toCharArray()) {\n            if (!ys.contains(c - 'a')) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n        if (xs.size() == 0) return result;\n        int n = xs.size();\n        int[] dx = new int[n];\n        int[] dy = new int[n];\n        dx[0] = 1;\n        dy[0] = 0;\n        for (int i = 1; i < n; i++) {\n            dx[i] = dx[i - 1] * -1;\n            dy[i] = dy[i - 1] * -1;\n        }\n        for (int i = 1; i < n; i++) {\n            result.add(0, xs.get(i) + dx[i] + dy[i]);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> ans = new ArrayList<>();\n        int n = xs.size();\n        for (int i = 0; i < n; i++) {\n            int x = xs.get(i);\n            int y = 0;\n            if (i > 0) {\n                y = xs.get(i - 1);\n            }\n            int z = 0;\n            if (i < n - 1) {\n                z = xs.get(i + 1);\n            }\n            ans.add(y - x);\n            ans.add(z - x);\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n        result.add(0);\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(xs.get(i) - xs.get(i - 1));\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> ans = new ArrayList<>();\n        int n = xs.size();\n        for (int i = 0; i < n; i++) {\n            int x = xs.get(i);\n            int y = 0;\n            if (i > 0) {\n                y = xs.get(i - 1);\n            }\n            ans.add(y - x);\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n        if (xs == null || xs.size() == 0) {\n            return result;\n        }\n        int max = xs.get(0);\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) > max) {\n                max = xs.get(i);\n            }\n        }\n        int depth = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) == max) {\n                depth++;\n            }\n        }\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) == max) {\n                result.add(depth);\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> xs = new ArrayList<>();\n        xs.add(1);\n        xs.add(2);\n        xs.add(3);\n        xs.add(4);\n        xs.add(5);\n        xs.add(6);\n        xs.add(7);\n        xs.add(8);\n        xs.add(9);\n        xs.add(10);\n        Solution s = new Solution();\n        List<Integer> result = s.derivative(xs);\n        for (int i = 0; i < result.size(); i++) {\n            System.out.println(result.get(i));\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> ans = new ArrayList<>();\n        int n = xs.size();\n        for (int i = 0; i < n; i++) {\n            int x = xs.get(i);\n            int y = 0;\n            if (i == 0) {\n                y = 1;\n            } else if (i == 1) {\n                y = 2;\n            } else {\n                y = 2 * xs.get(i - 1);\n            }\n            ans.add(y);\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        int a = 1;\n        int b = 1;\n        int c = 0;\n        for (int i = 0; i < n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0)\n            return 0;\n        if (n == 1)\n            return 1;\n        int[] fib = new int[n + 1];\n        fib[0] = 0;\n        fib[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2];\n        }\n        return fib[n];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        int[] fib = new int[n+1];\n        fib[0] = 1;\n        fib[1] = 1;\n        for(int i=2; i<=n; i++) {\n            fib[i] = fib[i-1] + fib[i-2];\n        }\n        return fib[n];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        int[] fib = new int[n + 1];\n        fib[0] = 1;\n        fib[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2];\n        }\n        return fib[n];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        int a = 0, b = 1, c = 0;\n        for (int i = 3; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if(n == 0)\n            return 0;\n        if(n == 1)\n            return 1;\n        int a = 1;\n        int b = 1;\n        int c = 0;\n        for(int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        int[] fib = new int[n + 1];\n        fib[0] = 1;\n        fib[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2];\n        }\n        return fib[n];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        return fibfib(n - 1) + fibfib(n - 2);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0)\n            return 0;\n        if (n == 1)\n            return 1;\n        int f1 = 1;\n        int f2 = 1;\n        int f3 = 2;\n        int f4 = 3;\n        int f5 = 5;\n        int f6 = 8;\n        int f7 = 13;\n        int f8 = 21;\n        int f9 = 34;\n        int f10 = 55;\n        int f11 = 89;\n        int f12 = 144;\n        if (n == 2)\n            return f1;\n        if (n == 3)\n            return f2;\n        if (n == 4)\n            return f3;\n        if (n == 5)\n            return f4;\n        if (n == 6)\n            return f5;\n        if (n == 7)\n            return f6;\n        if (n == 8)\n            return f7;\n        if (n == 9)\n            return f8;\n        if (n == 10)\n            return f9;\n        if (n == 11)\n            return f10;\n        if (n == 12)\n            return f11;\n        if (n == 13)\n            return f12;\n        if (n == 14)\n            return f1;\n        if (n == 15)\n            return f2;\n        if (n == 16)\n            return f3;\n        if (n == 17)\n            return f4;\n        if (n == 18)\n            return f5;\n        if (n == 19)\n            return f6;\n        if (n == 20)\n            return f7;\n        if (n == 21)\n            return f8;\n        if (n == 22)\n            return f9;\n        if (n == 23)\n            return f10;\n        if (n == 24)\n            return f11;\n        if (n == 25)\n            return f12;\n        if (n == 26)\n            return f1;\n        if (n == 27)\n            return f2;\n        if (n == 28)\n            return f3;\n        if (n == 29)\n            return f4;\n        if (n == 30)\n            return f5;\n        if (n == 31)\n            return f6;\n        if (n == 32)\n            return f7;\n        if (n == 33)\n            return f8;\n        if (n == 34)\n            return f9;\n        if (n == 35)\n            return f10;\n        if (n == 36)\n            return f11;\n        if (n == 37)\n            return f12;\n        if (n == 38)\n            return f1;\n        if (n == 39)\n            return f2;\n        if (n == 40)\n            return f3;\n        if (n == 41)\n            return f4;\n        if (n == 42)\n            return f5;\n        if (n == 43)\n            return f6;\n        if (n == 44)\n            return f7;\n        if (n == 45)\n            return f8;\n        if (n == 46)\n            return f9;\n        if (n == 47)\n            return f10;\n        if (n == 48)\n            return f11;\n        if (n == 49)\n            return f12;\n        if (n == 50)\n            return f1;\n        if (n == 51)\n            return f2;\n        if (n == 52)\n            return f3;\n        if (n == 53)\n            return f4;\n        if (n == 54)\n            return f5;\n        if (n == 55)\n            return f6;\n        if (n == 56)\n            return f7;\n        if (n == 57)\n            return f8;\n        if (n == 58)\n            return f9;\n        if (n == 59)\n            return f10;\n        if (n == 60)\n            return f11;\n        if (n == 61)\n            return f12;\n        if (n == 62)\n            return f1;\n        if (n == 63)\n            return f2;\n        if (n == 64)\n            return f3;\n        if (n == 65)\n            return f4;\n        if (n == 66)\n            return f5;\n        if (n == 67)\n            return f6;\n        if (n == 68)\n            return f7;\n        if (n == 69)\n            return f8;\n        if (n == 70)\n            return f9;\n        if (n == 71)\n            return f10;\n        if (n == 72)\n            return f11;\n        if (n == 73)\n            return f12;\n        if (n == 74)\n            return f1;\n        if (n == 75)\n            return f2;\n        if (n == 76)\n            return f3;\n        if (n == 77)\n            return f4;\n        if (n == 78)\n            return f5;\n        if (n == 79)\n            return f6;\n        if (n == 80)\n            return f7;\n        if (n == 81)\n            return f8;\n        if (n == 82)\n            return f9;\n        if (n == 83)\n            return f10;\n        if (n == 84)\n            return f11;\n        if (n == 85)\n            return f12;\n        if (n == 86)\n            return f1;\n        if (n == 87)\n            return f2;\n        if (n == 88)\n            return f3;\n        if (n == 89)\n            return f4;\n        if (n == 90)\n            return f5;\n        if (n == 91)\n            return f6;\n        if (n == 92)\n            return f7;\n        if (n == 93)\n            return f8;\n        if (n == 94)\n            return f9;\n        if (n == 95)\n            return f10;\n        if (n == 96)\n            return f11;\n        if (n == 97)\n            return f12;\n        if (n == 98)\n            return f1;\n        if (n == 99)\n            return f2;\n        if (n == 100)\n            return f3;\n        if (n == 101)\n            return f4;\n        if (n == 102)\n            return f5;\n        if (n == 103)\n            return f6;\n        if (n == 104)\n            return f7;\n        if (n == 105)\n            return f8;\n        if (n == 106)\n            return f9;\n        if (n == 107)\n            return f10;\n        if (n == 108)\n            return f11;\n        if (n == 109)\n            return f12;\n        if (n == 110)\n            return f1;\n        if (n == 111)\n            return f2;\n        if (n == 112)\n            return f3;\n        if (n == 113)\n            return f4;\n        if (n == 114)\n            return f5;\n        if (n == 115)\n            return f6;\n        if (n == 116)\n            return f7;\n        if (n == 117)\n            return f8;\n        if (n == 118)\n            return f9;\n        if (n == 119)\n            return f10;\n        if (n == 120)\n            return f"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        int a = 1;\n        int b = 1;\n        int c = 0;\n        int d = 0;\n        for (int i = 0; i < n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n            d = c;\n        }\n        return d;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        int[] fib = new int[n + 1];\n        fib[0] = 0;\n        fib[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2];\n        }\n        return fib[n];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        int a = 1;\n        int b = 1;\n        int c = 0;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        int a = 1;\n        int b = 1;\n        int c = 0;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if(n <= 1) return n;\n        int[] fib = new int[n+1];\n        fib[0] = 0;\n        fib[1] = 1;\n        for(int i = 2; i <= n; i++) {\n            fib[i] = fib[i-1] + fib[i-2];\n        }\n        return fib[n];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        int a = 0, b = 1;\n        for (int i = 3; i <= n; i++) {\n            int temp = a;\n            a = b;\n            b = temp + b;\n        }\n        return b;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        int a = 1;\n        int b = 1;\n        int c = 0;\n        int d = 0;\n        for (int i = 0; i < n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if(n == 0)\n            return 0;\n        if(n == 1)\n            return 1;\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        int d = 1;\n        int e = 0;\n        for(int i = 0; i < n; i++) {\n            c = a + b;\n            d = b;\n            b = a;\n            a = c;\n            e = c + d;\n            System.out.println(a + \" \" + b + \" \" + c + \" \" + d + \" \" + e);\n        }\n        return e;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0)\n            return 0;\n        if (n == 1)\n            return 1;\n        return fibfib(n - 1) + fibfib(n - 2);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if(n == 0)\n            return 0;\n        if(n == 1)\n            return 1;\n        int a = 1;\n        int b = 1;\n        int c = 0;\n        for(int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        int a = 1;\n        int b = 1;\n        int c = 0;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int n_vowels = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                n_vowels++;\n            }\n        }\n        return n_vowels;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y' || c == 'Y') {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        String s = in.nextLine();\n        Solution sln = new Solution();\n        System.out.println(sln.vowelsCount(s));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int n_vowels = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                n_vowels += 1;\n            }\n        }\n        return n_vowels;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for(int i = 0; i < s.length(); i++) {\n            if(s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String s = sc.nextLine();\n        Solution ob = new Solution();\n        System.out.println(ob.vowelsCount(s));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        String s = \"aeiou\";\n        Solution solution = new Solution();\n        System.out.println(solution.vowelsCount(s));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int vowelsCount = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                vowelsCount++;\n            }\n        }\n        return vowelsCount;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        String s = \"aeiou\";\n        System.out.println(new Solution().vowelsCount(s));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.vowelsCount(\"aeiou\"));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        int max = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n                if (count > max) {\n                    max = count;\n                }\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        \n        int n_vowels = 0;\n        \n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                n_vowels++;\n            }\n        }\n        \n        return n_vowels;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int vowelsCount = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                vowelsCount++;\n            }\n        }\n        return vowelsCount;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int n_vowels = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                n_vowels++;\n            }\n        }\n        return n_vowels;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int n_vowels = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                n_vowels++;\n            }\n        }\n        return n_vowels;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int n_vowels = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                n_vowels += 1;\n            }\n        }\n        return n_vowels;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        if (shift == 0) return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0) return String.valueOf(x);\n        shift = 360 - shift;\n        int mod = 360;\n        int result = x;\n        while (shift > 0) {\n            result = (result + mod) % 360;\n            shift--;\n        }\n        return String.valueOf(result);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        int n = x % 10;\n        int m = x / 10;\n        int k = shift % 10;\n        int l = shift / 10;\n        int res = (n + m + k + l) % 10;\n        return res + \"\" + (res == 0 ? 10 : res);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        int n = x;\n        int m = shift;\n        int r = 0;\n        int c = 0;\n        while(m > 0) {\n            if(m % 2 == 1) {\n                r = r + n;\n                n = n + 1;\n            }\n            m = m / 2;\n        }\n        if(m == 0) {\n            r = r + n;\n        }\n        return String.valueOf(r);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        if (shift == 0) {\n            return String.valueOf(x);\n        }\n        if (shift > 0) {\n            shift = shift % 10;\n            int carry = 0;\n            StringBuilder sb = new StringBuilder();\n            while (shift > 0) {\n                sb.append(x % 10);\n                x = x / 10;\n                shift--;\n            }\n            sb.append(x);\n            sb.insert(0, carry);\n            return sb.toString();\n        }\n        shift = shift % 10;\n        int carry = 0;\n        StringBuilder sb = new StringBuilder();\n        while (shift > 0) {\n            sb.append(x % 10);\n            x = x / 10;\n            shift--;\n        }\n        sb.append(x);\n        sb.insert(0, carry);\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        StringBuilder sb = new StringBuilder();\n        int n = x;\n        while (n != 0) {\n            sb.append(n % 10);\n            n /= 10;\n            if (shift == 0) {\n                break;\n            }\n            shift--;\n        }\n        if (shift == 0) {\n            return sb.reverse().toString();\n        }\n        return sb.reverse().toString() + sb.reverse().toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        int n = x;\n        int m = shift;\n        String s = \"\";\n        while(m > 0) {\n            if(m % 2 == 0) {\n                n = n + 1;\n            } else {\n                n = n - 1;\n            }\n            m = m / 2;\n            s = n + \" \" + s;\n        }\n        return s;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        int n = x % 10;\n        int m = x / 10;\n        int k = shift % 10;\n        int l = shift / 10;\n        int r = (n + k) % 10;\n        int s = (m + l) % 10;\n        int t = (r + s) % 10;\n        int u = (t + n) % 10;\n        return String.valueOf(u);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        if (shift == 0) return String.valueOf(x);\n        shift %= 360;\n        if (shift == 0) return String.valueOf(x);\n        shift = 360 - shift;\n        int carry = 0;\n        StringBuilder sb = new StringBuilder();\n        while (shift > 0) {\n            sb.append(x % 10);\n            x /= 10;\n            shift--;\n        }\n        if (carry > 0) sb.append(carry);\n        return sb.reverse().toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        int n = x % 10;\n        int m = (x / 10) % 10;\n        int k = (x / 100) % 10;\n        int l = (x / 1000) % 10;\n        int r = (x / 10000) % 10;\n        int s = (x / 100000) % 10;\n        int t = (x / 1000000) % 10;\n        int u = (x / 10000000) % 10;\n        int v = (x / 100000000) % 10;\n        int w = (x / 1000000000) % 10;\n        int x1 = (x / 10000000000) % 10;\n        int y1 = (x / 100000000000) % 10;\n        int z1 = (x / 1000000000000) % 10;\n        int a1 = (x / 10000000000000) % 10;\n        int b1 = (x / 100000000000000) % 10;\n        int c1 = (x / 1000000000000000) % 10;\n        int d1 = (x / 10000000000000000) % 10;\n        int e1 = (x / 1000000000000000000) % 10;\n        int f1 = (x / 100000000000000000000) % 10;\n        int g1 = (x / 1000000000000000000000) % 10;\n        int h1 = (x / 10000000000000000000000) % 10;\n        int i1 = (x / 1000000000000000000000000) % 10;\n        int j1 = (x / 1000000000000000000000000) % 10;\n        int k1 = (x / 10000000000000000000000000) % 10;\n        int l1 = (x / 1000000000000000000000000000) % 10;\n        int m1 = (x / 1000000000000000000000000000) % 10;\n        int n1 = (x / 100000000000000000000000000000) % 10;\n        int o1 = (x / 1000000000000000000000000000000) % 10;\n        int p1 = (x / 1000000000000000000000000000000) % 10;\n        int q1 = (x / 100000000000000000000000000000000) % 10;\n        int r1 = (x / 10000000000000000000000000000000) % 10;\n        int s1 = (x / 1000000000000000000000000000000000) % 10;\n        int t1 = (x / 1000000000000000000000000000000000) % 10;\n        int u1 = (x / 1000000000000000000000000000000000) % 10;\n        int v1 = (x / 100000000000000000000000000000000000) % 10;\n        int w1 = (x / 1000000000000000000000000000000000) % 10;\n        int x2 = (x / 1000000000000000000000000000000000000) % 10;\n        int y2 = (x / 100000000000000000000000000000000000) % 10;\n        int z2 = (x / 1000000000000000000000000000000000000) % 10;\n        int a2 = (x / 100000000000000000000000000000000000000) % 10;\n        int b2 = (x / 10000000000000000000000000000000000000) % 10;\n        int c2 = (x / 1000000000000000000000000000000000000000) % 10;\n        int d2 = (x / 10000000000000000000000000000000000000) % 10;\n        int e2 = (x / 1000000000000000000000000000000000000000) % 10;\n        int f2 = (x / 1000000000000000000000000000000000000) % 10;\n        int g2 = (x / 100000000000000000000000000000000000000) % 10;\n        int h2 = (x / 100000000000000000000000000000000000000) % 10;\n        int i2 = (x / 100000000000000000000000000000000000000) % 10;\n        int j2 = (x / 1000000000000000000000000000000000000000) % 10;\n        int k2 = (x / 10000000000000000000000000000000000000) % 10;\n        int l2 = (x / 10000000000000000"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        if (shift == 0) return String.valueOf(x);\n        if (shift == 1) return String.valueOf(x+1);\n        if (shift == 2) return String.valueOf(x+2);\n        if (shift == 3) return String.valueOf(x+3);\n        if (shift == 4) return String.valueOf(x+4);\n        if (shift == 5) return String.valueOf(x+5);\n        if (shift == 6) return String.valueOf(x+6);\n        if (shift == 7) return String.valueOf(x+7);\n        if (shift == 8) return String.valueOf(x+8);\n        if (shift == 9) return String.valueOf(x+9);\n        if (shift == 10) return String.valueOf(x+10);\n        if (shift == 11) return String.valueOf(x+11);\n        if (shift == 12) return String.valueOf(x+12);\n        if (shift == 13) return String.valueOf(x+13);\n        if (shift == 14) return String.valueOf(x+14);\n        if (shift == 15) return String.valueOf(x+15);\n        if (shift == 16) return String.valueOf(x+16);\n        if (shift == 17) return String.valueOf(x+17);\n        if (shift == 18) return String.valueOf(x+18);\n        if (shift == 19) return String.valueOf(x+19);\n        if (shift == 20) return String.valueOf(x+20);\n        if (shift == 21) return String.valueOf(x+21);\n        if (shift == 22) return String.valueOf(x+22);\n        if (shift == 23) return String.valueOf(x+23);\n        if (shift == 24) return String.valueOf(x+24);\n        if (shift == 25) return String.valueOf(x+25);\n        if (shift == 26) return String.valueOf(x+26);\n        if (shift == 27) return String.valueOf(x+27);\n        if (shift == 28) return String.valueOf(x+28);\n        if (shift == 29) return String.valueOf(x+29);\n        if (shift == 30) return String.valueOf(x+30);\n        if (shift == 31) return String.valueOf(x+31);\n        if (shift == 32) return String.valueOf(x+32);\n        if (shift == 33) return String.valueOf(x+33);\n        if (shift == 34) return String.valueOf(x+34);\n        if (shift == 35) return String.valueOf(x+35);\n        if (shift == 36) return String.valueOf(x+36);\n        if (shift == 37) return String.valueOf(x+37);\n        if (shift == 38) return String.valueOf(x+38);\n        if (shift == 39) return String.valueOf(x+39);\n        if (shift == 40) return String.valueOf(x+40);\n        if (shift == 41) return String.valueOf(x+41);\n        if (shift == 42) return String.valueOf(x+42);\n        if (shift == 43) return String.valueOf(x+43);\n        if (shift == 44) return String.valueOf(x+44);\n        if (shift == 45) return String.valueOf(x+45);\n        if (shift == 46) return String.valueOf(x+46);\n        if (shift == 47) return String.valueOf(x+47);\n        if (shift == 48) return String.valueOf(x+48);\n        if (shift == 49) return String.valueOf(x+49);\n        if (shift == 50) return String.valueOf(x+50);\n        if (shift == 51) return String.valueOf(x+51);\n        if (shift == 52) return String.valueOf(x+52);\n        if (shift == 53) return String.valueOf(x+53);\n        if (shift == 54) return String.valueOf(x+54);\n        if (shift == 55) return String.valueOf(x+55);\n        if (shift == 56) return String.valueOf(x+56);\n        if (shift == 57) return String.valueOf(x+57);\n        if (shift == 58) return String.valueOf(x+58);\n        if (shift == 59) return String.valueOf(x+59);\n        if (shift == 60) return String.valueOf(x+60);\n        if (shift == 61) return String.valueOf(x+61);\n        if (shift == 62) return String.valueOf(x+62);\n        if (shift == 63) return String.valueOf(x+63);\n        if (shift == 64) return String.valueOf(x+64);\n        if (shift == 65) return String.valueOf(x+65);\n        if (shift == 66) return String.valueOf(x+66);\n        if (shift == 67) return String.valueOf(x+67);\n        if (shift == 68) return String.valueOf(x+68);\n        if (shift == 69) return String.valueOf(x+69);\n        if (shift == 70) return String.valueOf(x+70);\n        if (shift == 71) return String.valueOf(x+71);\n        if (shift == 72) return String.valueOf(x+72);\n        if (shift == 73) return String.valueOf(x+73);\n        if (shift == 74) return String.valueOf(x+74);\n        if (shift == 75) return String.valueOf(x+75);\n        if (shift == 76) return String.valueOf(x+76);\n        if (shift == 77) return String.valueOf(x+77);\n        if (shift == 78) return String.valueOf(x+78);\n        if (shift == 79) return String.valueOf(x+79);\n        if (shift == 80) return String.valueOf(x+80);\n        if (shift == 81) return String.valueOf(x+81);\n        if (shift == 82) return String.valueOf(x+82);\n        if (shift == 83) return String.valueOf(x+83);\n        if (shift == 84) return String.valueOf(x+84);\n        if (shift == 85) return String.valueOf(x+85);\n        if (shift == 86) return String.valueOf(x+86);\n        if (shift == 87) return String.valueOf(x+87);\n        if (shift == 88) return String.valueOf(x+88);\n        if (shift == 89) return String.valueOf(x+89);\n        if (shift == 90) return String.valueOf(x+90);\n        if (shift == 91) return String.valueOf(x+91);\n        if (shift == 92) return String.valueOf(x+92);\n        if (shift == 93) return String.valueOf(x+93);\n        if (shift == 94) return String.valueOf(x+94);\n        if (shift == 95) return String.valueOf(x+95);\n        if (shift == 96) return String.valueOf(x+96);\n        if (shift == 97) return String.valueOf(x+97);\n        if (shift == 98) return String.valueOf(x+98);\n        if (shift == 99) return String.valueOf(x+99);\n        if (shift == 100) return String.valueOf(x+100);\n        if (shift == 101) return String.valueOf(x+101);\n        if (shift == 102) return String.valueOf(x+102);\n        if (shift == 103) return String.valueOf(x+103);\n        if (shift == 104) return String.valueOf(x"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        if (shift == 0) {\n            return String.valueOf(x);\n        }\n        int mod = x % shift;\n        int result = (x + shift - mod) % shift;\n        return String.valueOf(result);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        if(shift == 0) return String.valueOf(x);\n        shift = shift % 10;\n        int carry = x / 10;\n        x = x % 10;\n        if(shift == 1) return String.valueOf(x + carry);\n        shift = shift % 10;\n        int carry1 = x / 10;\n        x = x % 10;\n        if(shift == 2) return String.valueOf(x + carry1);\n        shift = shift % 10;\n        int carry2 = x / 10;\n        x = x % 10;\n        if(shift == 3) return String.valueOf(x + carry2);\n        shift = shift % 10;\n        int carry3 = x / 10;\n        x = x % 10;\n        if(shift == 4) return String.valueOf(x + carry3);\n        shift = shift % 10;\n        int carry4 = x / 10;\n        x = x % 10;\n        if(shift == 5) return String.valueOf(x + carry4);\n        shift = shift % 10;\n        int carry5 = x / 10;\n        x = x % 10;\n        if(shift == 6) return String.valueOf(x + carry5);\n        shift = shift % 10;\n        int carry6 = x / 10;\n        x = x % 10;\n        if(shift == 7) return String.valueOf(x + carry6);\n        shift = shift % 10;\n        int carry7 = x / 10;\n        x = x % 10;\n        if(shift == 8) return String.valueOf(x + carry7);\n        shift = shift % 10;\n        int carry8 = x / 10;\n        x = x % 10;\n        if(shift == 9) return String.valueOf(x + carry8);\n        shift = shift % 10;\n        int carry9 = x / 10;\n        x = x % 10;\n        if(shift == 0) return String.valueOf(x + carry9);\n        shift = shift % 10;\n        int carry10 = x / 10;\n        x = x % 10;\n        if(shift == 1) return String.valueOf(x + carry10);\n        shift = shift % 10;\n        int carry11 = x / 10;\n        x = x % 10;\n        if(shift == 2) return String.valueOf(x + carry11);\n        shift = shift % 10;\n        int carry12 = x / 10;\n        x = x % 10;\n        if(shift == 3) return String.valueOf(x + carry12);\n        shift = shift % 10;\n        int carry13 = x / 10;\n        x = x % 10;\n        if(shift == 4) return String.valueOf(x + carry13);\n        shift = shift % 10;\n        int carry14 = x / 10;\n        x = x % 10;\n        if(shift == 5) return String.valueOf(x + carry14);\n        shift = shift % 10;\n        int carry15 = x / 10;\n        x = x % 10;\n        if(shift == 6) return String.valueOf(x + carry15);\n        shift = shift % 10;\n        int carry16 = x / 10;\n        x = x % 10;\n        if(shift == 7) return String.valueOf(x + carry16);\n        shift = shift % 10;\n        int carry17 = x / 10;\n        x = x % 10;\n        if(shift == 8) return String.valueOf(x + carry17);\n        shift = shift % 10;\n        int carry18 = x / 10;\n        x = x % 10;\n        if(shift == 9) return String.valueOf(x + carry18);\n        shift = shift % 10;\n        int carry19 = x / 10;\n        x = x % 10;\n        if(shift == 0) return String.valueOf(x + carry19);\n        shift = shift % 10;\n        int carry20 = x / 10;\n        x = x % 10;\n        if(shift == 1) return String.valueOf(x + carry20);\n        shift = shift % 10;\n        int carry21 = x / 10;\n        x = x % 10;\n        if(shift == 2) return String.valueOf(x + carry21);\n        shift = shift % 10;\n        int carry22 = x / 10;\n        x = x % 10;\n        if(shift == 3) return String.valueOf(x + carry22);\n        shift = shift % 10;\n        int carry23 = x / 10;\n        x = x % 10;\n        if(shift == 4) return String.valueOf(x + carry23);\n        shift = shift % 10;\n        int carry24 = x / 10;\n        x = x % 10;\n        if(shift == 5) return String.valueOf(x + carry24);\n        shift = shift % 10;\n        int carry25 = x / 10;\n        x = x % 10;\n        if(shift == 6) return String.valueOf(x + carry25);\n        shift = shift % 10;\n        int carry26 = x / 10;\n        x = x % 10;\n        if(shift == 7) return String.valueOf(x + carry26);\n        shift = shift % 10;\n        int carry27 = x / 10;\n        x = x % 10;\n        if(shift == 8) return String.valueOf(x + carry27);\n        shift = shift % 10;\n        int carry28 = x / 10;\n        x = x % 10;\n        if(shift == 9) return String.valueOf(x + carry28);\n        shift = shift % 10;\n        int carry29 = x / 10;\n        x = x % 10;\n        if(shift == 0) return String.valueOf(x + carry29);\n        shift = shift % 10;\n        int carry30 = x / 10;\n        x = x % 10;\n        if(shift == 1) return String.valueOf(x + carry30);\n        shift = shift % 10;\n        int carry31 = x / 10;\n        x = x % 10;\n        if(shift == 2) return String.valueOf(x + carry31);\n        shift = shift % 10;\n        int carry32 = x / 10;\n        x = x % 10;\n        if(shift == 3) return String.valueOf(x + carry32);\n        shift = shift % 10;\n        int carry33 = x / 10;\n        x = x % 10;\n        if(shift == 4) return String.valueOf(x + carry33);\n        shift = shift % 10;\n        int carry34 = x / 10;\n        x = x % 10;\n        if(shift == 5) return String.valueOf(x + carry34);\n        shift = shift % 10;\n        int carry35 = x / 10;\n        x = x % 10;\n        if(shift == 6) return String.valueOf(x + carry35);\n        shift = shift % 10;\n        int carry36 = x / 10;\n        x = x % 10;\n        if(shift == 7) return String.valueOf(x + carry36);\n        shift = shift % 10;\n        int carry37 = x / 10;\n        x = x % 10;\n        if(shift == 8) return String.valueOf(x + carry37);\n        shift = shift % 10;\n        int carry38 = x / 10;\n        x = x % 10;\n        if(shift == 9) return String.valueOf(x + carry38);\n        shift = shift % 10;\n        int carry39 = x / 10;\n        x = x % 10;\n        if(shift == 0) return String.valueOf(x + carry39);\n        shift = shift % 10;\n        int carry40 = x / 10;\n        x = x"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift == 0)\n            return String.valueOf(x);\n        shift = shift % 360;\n        if (shift"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        int n = x % 10;\n        int k = x / 10;\n        int ans = 0;\n        if (shift == 0) {\n            return String.valueOf(n);\n        }\n        if (shift > 0) {\n            ans = k + shift;\n        } else {\n            ans = k - shift;\n        }\n        if (ans < 0) {\n            ans += 10;\n        }\n        return String.valueOf(ans);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        if (shift == 0) {\n            return String.valueOf(x);\n        }\n        int n = x % 10;\n        int m = (x - n) / 10;\n        int r = (x - n - m * 10) % 10;\n        return String.valueOf(n) + String.valueOf(m) + String.valueOf(r);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        if(shift == 0) return String.valueOf(x);\n        int carry = x >> 31;\n        x = x & 0x7fffffff;\n        shift = shift & 0x1fffffff;\n        x = (x << shift) | carry;\n        return String.valueOf(x);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        if (shift == 0) {\n            return String.valueOf(x);\n        }\n        int carry = 0;\n        StringBuilder sb = new StringBuilder();\n        while (shift > 0) {\n            int digit = x % 10;\n            x /= 10;\n            if (carry != 0) {\n                digit += carry;\n                carry = 0;\n            }\n            sb.insert(0, digit);\n            shift--;\n        }\n        if (carry != 0) {\n            sb.insert(0, carry);\n        }\n        return sb.reverse().toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        if (shift == 0) {\n            return String.valueOf(x);\n        }\n        int mod = x % 10;\n        int carry = (x / 10) % 10;\n        int result = (mod + shift + carry) % 10;\n        return String.valueOf(result);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        if (shift == 0) return String.valueOf(x);\n        shift = shift % 360;\n        int carry = 0;\n        String result = \"\";\n        while (shift != 0) {\n            carry += x;\n            x = carry % 360;\n            shift--;\n        }\n        result = String.valueOf(x) + result;\n        if (carry > 0) result = \"0\" + result;\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        if(shift == 0) return String.valueOf(x);\n        shift = shift % 360;\n        int mod = 360 - shift;\n        int res = (x + shift) % 360;\n        if(res < 0) res += 360;\n        return String.valueOf(res);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            sum += s.charAt(i) - '0';\n        }\n        return sum;\n    }\n\n    public int lengthOfLongestSubstring(String s) {\n        int m = 0;\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            sum += s.charAt(i) - '0';\n            if (sum > m) {\n                m = sum;\n            }\n        }\n        return m;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            sum += s.charAt(i) - '0';\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            sum += s.charAt(i) - '0';\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int t = sc.nextInt();\n        while (t-- > 0) {\n            String s = sc.next();\n            System.out.println(digitSum(s));\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            sum += Character.getNumericValue(s.charAt(i));\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String s = scanner.nextLine();\n        System.out.println(new Solution().digitSum(s));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        Map<Character, Integer> map = new HashMap<>();\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                map.put(c, map.getOrDefault(c, 0) + 1);\n            }\n        }\n        int sum = 0;\n        for (Integer i : map.values()) {\n            sum += i;\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            sum += s.charAt(i) - '0';\n        }\n        return sum;\n    }\n\n    public String longestCommonPrefix(String[] strs) {\n        if (strs.length == 0) {\n            return \"\";\n        }\n\n        String str = strs[0];\n        for (int i = 1; i < strs.length; i++) {\n            if (strs[i].length() > str.length()) {\n                str = strs[i];\n            }\n        }\n\n        int sum = digitSum(str);\n        int min = sum;\n        for (int i = 0; i < str.length(); i++) {\n            if (str.charAt(i) != '0') {\n                min = Math.min(min, str.charAt(i));\n            }\n        }\n\n        return str.substring(0, min);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            sum += Character.getNumericValue(s.charAt(i));\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String s = scanner.nextLine();\n        System.out.println(digitSum(s));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            sum += (s.charAt(i) - '0');\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        String s = scanner.next();\n        System.out.println(new Solution().digitSum(s));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            sum += s.charAt(i) - '0';\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String s = sc.nextLine();\n        System.out.println(new Solution().digitSum(s));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            sum += s.charAt(i) - '0';\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int t = sc.nextInt();\n        while (t-- > 0) {\n            String s = sc.next();\n            System.out.println(digitSum(s));\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (char c : s.toCharArray()) {\n            sum += c;\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            sum += s.charAt(i) - '0';\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        String s = in.next();\n        int res = new Solution().digitSum(s);\n        System.out.println(res);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            sum += Character.getNumericValue(s.charAt(i));\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            sum += s.charAt(i) - '0';\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            sum += s.charAt(i) - '0';\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        String s = in.next();\n        int res = new Solution().digitSum(s);\n        System.out.println(res);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            sum += Integer.parseInt(s.charAt(i) + \"\");\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (char c : s.toCharArray()) {\n            sum += c - '0';\n        }\n        return sum;\n    }\n\n    public ListNode detectCycle(ListNode head) {\n        if (head == null || head.next == null) {\n            return null;\n        }\n        ListNode slow = head;\n        ListNode fast = head.next;\n        while (fast != null && fast.next != null) {\n            slow = slow.next;\n            fast = fast.next.next;\n            if (slow == fast) {\n                break;\n            }\n        }\n        if (fast == null) {\n            return null;\n        }\n        ListNode slowNode = head;\n        while (slowNode != slow) {\n            slowNode = slowNode.next;\n            slow = slow.next;\n        }\n        return slow;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            sum += (s.charAt(i) - '0');\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        String s = in.next();\n        System.out.println(new Solution().digitSum(s));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            sum += s.charAt(i) - '0';\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String s = sc.nextLine();\n        System.out.println(new Solution().digitSum(s));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            sum += Integer.parseInt(s.charAt(i) + \"\");\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int t = sc.nextInt();\n        while (t-- > 0) {\n            String s = sc.next();\n            System.out.println(digitSum(s));\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int[] arr = new int[26];\n        for(int i = 0; i < s.length(); i++) {\n            arr[s.charAt(i) - 'a']++;\n        }\n        int count = 0;\n        for(int i = 0; i < 26; i++) {\n            if(arr[i] == n) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int[][] dp = new int[n][n];\n        for (int i = 0; i < n; i++) {\n            dp[i][0] = 1;\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j + 1];\n            }\n        }\n        return dp[n - 1][0];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int[] arr = new int[26];\n        for(int i = 0; i < s.length(); i++) {\n            arr[s.charAt(i) - 'a']++;\n        }\n        int count = 0;\n        for(int i = 0; i < arr.length; i++) {\n            if(arr[i] == n) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int fruitDistribution(String s, int n) {\n        \n        \n            try {\n                \n            \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int[] arr = new int[26];\n        for(char c: s.toCharArray())\n            arr[c-'a']++;\n        int count = 0;\n        for(int i=0; i<26; i++)\n            count += arr[i];\n        return count/n;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int[] arr = new int[26];\n        for (char c : s.toCharArray()) {\n            arr[c - 'a']++;\n        }\n        int count = 0;\n        for (int i = 0; i < 26; i++) {\n            if (arr[i] == n) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int[] count = new int[26];\n        for (char c : s.toCharArray()) {\n            count[c - 'a']++;\n        }\n        int res = 0;\n        for (int i = 0; i < n; i++) {\n            int max = 0;\n            for (int j = 0; j < 26; j++) {\n                if (count[j] > max) {\n                    max = count[j];\n                }\n            }\n            res += max;\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int[] count = new int[n];\n        for (char c : s.toCharArray()) {\n            count[c - 'a']++;\n        }\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += count[i];\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int[] arr = new int[n];\n        for(int i = 0; i < s.length(); i++) {\n            arr[s.charAt(i) - 'a']++;\n        }\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            if(arr[i] > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int[] arr = new int[n];\n        for(int i = 0; i < s.length(); i++) {\n            arr[s.charAt(i) - 'a']++;\n        }\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            if(arr[i] == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int[] arr = new int[n];\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            arr[s.charAt(i) - 'a']++;\n            sum += arr[s.charAt(i) - 'a'];\n        }\n        int max = sum;\n        for (int i = 0; i < n; i++) {\n            sum -= arr[i];\n            if (sum > max) {\n                max = sum;\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int[] arr = new int[n];\n        for (int i = 0; i < s.length(); i++) {\n            arr[s.charAt(i) - 'a']++;\n        }\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int[] arr = new int[26];\n        for(int i = 0; i < s.length(); i++) {\n            arr[s.charAt(i) - 'a']++;\n        }\n        int count = 0;\n        for(int i = 0; i < arr.length; i++) {\n            if(arr[i] == n) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int[] arr = new int[26];\n        for (int i = 0; i < s.length(); i++) {\n            arr[s.charAt(i) - 'a']++;\n        }\n        int count = 0;\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] == n) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int count = 0;\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            if (word.equals(\"apple\") || word.equals(\"banana\") || word.equals(\"cherry\") || word.equals(\"grape\") || word.equals(\"kiwi\") || word.equals(\"orange\") || word.equals(\"pineapple\") || word.equals(\"strawberry\") || word.equals(\"watermelon\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int[] arr = new int[n];\n        for(int i = 0; i < s.length(); i++) {\n            arr[s.charAt(i) - 'a']++;\n        }\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            count += arr[i];\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int count = 0;\n        int[] freq = new int[26];\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            freq[c - 'a']++;\n        }\n        for (int i = 0; i < freq.length; i++) {\n            if (freq[i] != n) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int[] f = new int[10];\n        f[0] = 0;\n        f[1] = 1;\n        f[2] = 2;\n        f[3] = 3;\n        f[4] = 4;\n        f[5] = 5;\n        f[6] = 6;\n        f[7] = 7;\n        f[8] = 8;\n        f[9] = 9;\n        int i = 0;\n        while (i < s.length()) {\n            int j = 0;\n            while (j < s.length() && s.charAt(j) != s.charAt(i)) {\n                j++;\n            }\n            if (j == s.length()) {\n                return f[n];\n            }\n            int k = j + 1;\n            while (k < s.length() && s.charAt(k) == s.charAt(i)) {\n                k++;\n            }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int[] fruit = new int[n];\n        int count = 0;\n        for(char c: s.toCharArray()) {\n            fruit[c-'a']++;\n            count++;\n        }\n        for(int i=0; i<n; i++) {\n            if(fruit[i] == 0) {\n                return 0;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            result.add(arr.get(i));\n        }\n        return result;\n    }\n    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {\n        List<List<Integer>> result = new ArrayList<>();\n        if (root == null) {\n            return result;\n        }\n        Queue<TreeNode> queue = new LinkedList<>();\n        queue.add(root);\n        while (!queue.isEmpty()) {\n            int size = queue.size();\n            List<Integer> level = new ArrayList<>();\n            for (int i = 0; i < size; i++) {\n                TreeNode node = queue.poll();\n                if (i % 2 == 0) {\n                    level.add(node.val);\n                } else {\n                    level.add(0, node.val);\n                }\n            }\n            result.add(pluck(level));\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        for (Integer i : arr) {\n            result.add(i);\n        }\n        return result;\n    }\n\n    public List<Integer> pluck(Integer[] arr) {\n        List<Integer> result = new ArrayList<>();\n        for (Integer i : arr) {\n            result.add(i);\n        }\n        return result;\n    }\n\n    public List<Integer> pluck(int[] arr) {\n        List<Integer> result = new ArrayList<>();\n        for (Integer i : arr) {\n            result.add(i);\n        }\n        return result;\n    }\n\n    public List<Integer> pluck(int[][] arr) {\n        List<Integer> result = new ArrayList<>();\n        for (int[] i : arr) {\n            for (Integer j : i) {\n                result.add(j);\n            }\n        }\n        return result;\n    }\n\n    public List<Integer> pluck(int[][][] arr) {\n        List<Integer> result = new ArrayList<>();\n        for (int[][] i : arr) {\n            for (int[] j : i) {\n                for (Integer k : j) {\n                    result.add(k);\n                }\n            }\n        }\n        return result;\n    }\n\n    public List<Integer> pluck(int[][][][] arr) {\n        List<Integer> result = new ArrayList<>();\n        for (int[][][] i : arr) {\n            for (int[][] j : i) {\n                for (int[] k : j) {\n                    for (Integer l : k) {\n                        result.add(l);\n                    }\n                }\n            }\n        }\n        return result;\n    }\n\n    public List<Integer> pluck(int[][][][][] arr) {\n        List<Integer> result = new ArrayList<>();\n        for (int[][][][] i : arr) {\n            for (int[][][] j : i) {\n                for (int[][] k : j) {\n                    for (int[] l : k) {\n                        for (Integer m : l) {\n                            result.add(m);\n                        }\n                    }\n                }\n            }\n        }\n        return result;\n    }\n\n    public List<Integer> pluck(int[][][][][][] arr) {\n        List<Integer> result = new ArrayList<>();\n        for (int[][][][][] i : arr) {\n            for (int[][][][] j : i) {\n                for (int[][][][] k : j) {\n                    for (int[][][] l : k) {\n                        for (int[][] m : l) {\n                            for (Integer n : m) {\n                                result.add(n);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return result;\n    }\n\n    public List<Integer> pluck(int[][][][][][][] arr) {\n        List<Integer> result = new ArrayList<>();\n        for (int[][][][][][] i : arr) {\n            for (int[][][][][][] j : i) {\n                for (int[][][][][][] k : j) {\n                    for (int[][][][][] l : k) {\n                        for (int[][][][] m : l) {\n                            for (int[][] n : m) {\n                                for (Integer o : n) {\n                                    result.add(o);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return result;\n    }\n\n    public List<Integer> pluck(int[][][][][][][][] arr) {\n        List<Integer> result = new ArrayList<>();\n        for (int[][][][][][][][] i : arr) {\n            for (int[][][][][][][][] j : i) {\n                for (int[][][][][][][][] k : j) {\n                    for (int[][][][][][][] l : k) {\n                        for (int[][][][][][] m : l) {\n                            for (int[][][][] n : m) {\n                                for (int[][] o : n) {\n                                    for (Integer p : o) {\n                                        result.add(p);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return result;\n    }\n\n    public List<Integer> pluck(int[][][][][][][][][][] arr) {\n        List<Integer> result = new ArrayList<>();\n        for (int[][][][][][][][][][] i : arr) {\n            for (int[][][][][][][][][][] j : i) {\n                for (int[][][][][][][][][][] k : j) {\n                    for (int[][][][][][][][][][] l : k) {\n                        for (int[][][][][][][][][][] m : l) {\n                            for (int[][][][][][][][][][] n : m) {\n                                for (int[][][][][][][][][][] o : n) {\n                                    for (int[][][][][][][][][][] p : o) {\n                                        for (Integer q : p) {\n                                            result.add(q);\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return result;\n    }\n\n    public List<Integer> pluck(int[][][][][][][][][][][][] arr) {\n        List<Integer> result = new ArrayList<>();\n        for (int[][][][][][][][][][][][] i : arr) {\n            for (int[][][][][][][][][][][][] j : i) {\n                for (int[][][][][][][][][][][][] k : j) {\n                    for (int[][][][][][][][][][][][] l : k) {\n                        for (int[][][][][][][][][][][][] m : l) {\n                            for (int[][][][][][][][][][][][] n : m) {\n                                for (int[][][][][][][][][][][][] o : n) {\n                                    for (int[][][][][][][][][][][][] p : o) {\n                                        for (int[][][][][][][][][][][][] q : p) {\n                                            for (Integer r : q) {\n                                                result.add(r);\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return result;\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            for (int j = 0; j < arr.size(); j++) {\n                if (i == j) {\n                    continue;\n                }\n                if (arr.get(i) == arr.get(j)) {\n                    result.add(i);\n                    result.add(j);\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n\n    public List<List<String>> findLadders(String beginWord, String endWord, List<String> wordList) {\n        List<List<String>> result = new ArrayList<>();\n        if (beginWord.equals(endWord)) {\n            result.add(Arrays.asList(beginWord));\n            return result;\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < wordList.size(); i++) {\n            map.put(wordList.get(i), i);\n        }\n        List<Integer> arr = pluck(map.values());\n        List<String> path = new ArrayList<>();\n        path.add(beginWord);\n        while (arr.size() > 0) {\n            int index = arr.remove(0);\n            path.add(wordList.get(index));\n            if (path.get(path.size() - 1).equals(endWord)) {\n                List<String> temp = new ArrayList<>();\n                for (int i = 0; i < path.size() - 1; i++) {\n                    temp.add(path.get(i));\n                }\n                result.add(temp);\n                break;\n            }\n            for (int i = 0; i < wordList.size(); i++) {\n                if (map.containsKey(wordList.get(i))) {\n                    arr.add(map.get(wordList.get(i)));\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == null) {\n                res.add(null);\n            } else {\n                res.add(arr.get(i).next);\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            result.add(arr.get(i));\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            result.add(arr.get(i));\n        }\n        return result;\n    }\n\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        int min = arr.get(0);\n        int minIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) < min) {\n                min = arr.get(i);\n                minIndex = i;\n            }\n        }\n        return Arrays.asList(minIndex, min);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                result.add(arr.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                result.add(arr.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        for (Integer i : arr) {\n            result.add(i);\n        }\n        return result;\n    }\n\n    public List<Integer> pluck(int[] arr) {\n        List<Integer> result = new ArrayList<>();\n        for (int i : arr) {\n            result.add(i);\n        }\n        return result;\n    }\n\n    public List<Integer> pluck(int[][] arr) {\n        List<Integer> result = new ArrayList<>();\n        for (int[] i : arr) {\n            for (int j : i) {\n                result.add(j);\n            }\n        }\n        return result;\n    }\n\n    public List<Integer> pluck(int[][][] arr) {\n        List<Integer> result = new ArrayList<>();\n        for (int[][] i : arr) {\n            for (int[] j : i) {\n                for (int k : j) {\n                    result.add(k);\n                }\n            }\n        }\n        return result;\n    }\n\n    public List<Integer> pluck(int[][][][] arr) {\n        List<Integer> result = new ArrayList<>();\n        for (int[][][] i : arr) {\n            for (int[][] j : i) {\n                for (int[] k : j) {\n                    for (int l : k) {\n                        result.add(l);\n                    }\n                }\n            }\n        }\n        return result;\n    }\n\n    public List<Integer> pluck(int[][][][][] arr) {\n        List<Integer> result = new ArrayList<>();\n        for (int[][][][] i : arr) {\n            for (int[][][] j : i) {\n                for (int[][] k : j) {\n                    for (int[] l : k) {\n                        for (int m : l) {\n                            result.add(m);\n                        }\n                    }\n                }\n            }\n        }\n        return result;\n    }\n\n    public List<Integer> pluck(int[][][][][][] arr) {\n        List<Integer> result = new ArrayList<>();\n        for (int[][][][][] i : arr) {\n            for (int[][][][] j : i) {\n                for (int[][][][] k : j) {\n                    for (int[][][] l : k) {\n                        for (int[][] m : l) {\n                            for (int[] n : m) {\n                                result.add(n);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return result;\n    }\n\n    public List<Integer> pluck(int[][][][][][][] arr) {\n        List<Integer> result = new ArrayList<>();\n        for (int[][][][][][] i : arr) {\n            for (int[][][][][][] j : i) {\n                for (int[][][][][][] k : j) {\n                    for (int[][][][][] l : k) {\n                        for (int[][][][] m : l) {\n                            for (int[][][] n : m) {\n                                for (int[] o : n) {\n                                    result.add(o);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return result;\n    }\n\n    public List<Integer> pluck(int[][][][][][][][] arr) {\n        List<Integer> result = new ArrayList<>();\n        for (int[][][][][][][][] i : arr) {\n            for (int[][][][][][][][] j : i) {\n                for (int[][][][][][][][] k : j) {\n                    for (int[][][][][][][] l : k) {\n                        for (int[][][][][][] m : l) {\n                            for (int[][][][][] n : m) {\n                                for (int[][][] o : n) {\n                                    for (int[] p : o) {\n                                        result.add(p);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return result;\n    }\n\n    public List<Integer> pluck(int[][][][][][][][][][] arr) {\n        List<Integer> result = new ArrayList<>();\n        for (int[][][][][][][][][][] i : arr) {\n            for (int[][][][][][][][][][] j : i) {\n                for (int[][][][][][][][][][] k : j) {\n                    for (int[][][][][][][][][] l : k) {\n                        for (int[][][][][][][][] m : l) {\n                            for (int[][][][][][][] n : m) {\n                                for (int[][][][][] o : n) {\n                                    for (int[][][] p : o) {\n                                        for (int[] q : p) {\n                                            result.add(q);\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return result;\n    }\n\n    public List<Integer> pluck(int[][][][][][][][][][][][] arr) {\n        List<Integer> result = new ArrayList<>();\n        for (int[][][][][][][][][][][][] i : arr) {\n            for (int[][][][][][][][][][][][] j : i) {\n                for (int[][][][][][][][][][][][] k : j) {\n                    for (int[][][][][][][][][][][] l : k) {\n                        for (int[][][][][][][][][][] m : l) {\n                            for (int[][][][][][][][][] n : m) {\n                                for (int[][][][][][][] o : n) {\n                                    for (int[][][][][] p : o) {\n                                        for (int[][][] q : p) {\n                                            for (int[] r : q) {\n                                                result.add(r);\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return result;\n    }\n\n    public List<Integer> pluck(int[][][][][][][][][][][][][][] arr) {\n        List<Integer> result = new ArrayList<>();\n        for (int[][][][][][][][][][][][][][] i : arr) {\n            for (int[][][][][][][][][][][][][][] j : i) {\n                for (int[][][][][][][][][][][][][][] k : j) {\n                    for (int[][][][][][][][][][][][][][] l : k) {\n                        for (int[][][][][][][][][][][][][][] m : l) {\n                            for (int[][][][][][][][][][][][][][] n : m) {\n                                for (int[][][][][][][][][][][][][][] o : n) {\n                                    for (int[][][][][][][][][][][][][][][] p : o) {\n                                        for (int[][][][][][][][][][][][][][] q : p) {\n                                            for (int[][][][][][][][][][][][][][] r : q) {\n                                                for (int[] s : r) {\n                                                    result.add(s);\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return result;\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            result.add(arr.get(i));\n        }\n        return result;\n    }\n\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                result.add(arr.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> res = new ArrayList<>();\n        for (int i : arr) {\n            res.add(i);\n        }\n        return res;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> arr = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n        List<Integer> res = new Solution().pluck(arr);\n        System.out.println(res);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                result.add(arr.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        if (arr.size() == 0) {\n            return result;\n        }\n        int n = arr.size();\n        int[] nums = new int[n];\n        for (int i = 0; i < n; i++) {\n            nums[i] = arr.get(i);\n        }\n        Arrays.sort(nums);\n        for (int i = 0; i < n; i++) {\n            result.add(nums[i]);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Integer> stack = new Stack<>();\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == 0) {\n                stack.push(i);\n            } else {\n                int top = stack.pop();\n                result.add(arr.get(top));\n                result.add(arr.get(i));\n            }\n        }\n        return result;\n    }\n\n    public TreeNode buildTree(int[] preorder, int[] inorder) {\n        List<Integer> pre = pluck(Arrays.asList(preorder));\n        List<Integer> in = pluck(Arrays.asList(inorder));\n        return build(pre, in);\n    }\n\n    public TreeNode build(List<Integer> pre, List<Integer> in) {\n        if (pre.size() == 0) {\n            return null;\n        }\n        TreeNode root = new TreeNode(pre.get(0));\n        int index = 0;\n        for (int i = 0; i < in.size(); i++) {\n            if (in.get(i) == pre.get(0)) {\n                index = i;\n                break;\n            }\n        }\n        root.left = build(pre.subList(1, index + 1), in.subList(0, index));\n        root.right = build(pre.subList(index + 1, pre.size()), in.subList(index + 1, in.size()));\n        return root;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                result.add(arr.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Integer> stack = new Stack<>();\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == 0) {\n                stack.push(i);\n            } else {\n                result.add(arr.get(i));\n            }\n        }\n        while (!stack.isEmpty()) {\n            int i = stack.pop();\n            result.add(i);\n            if (i < arr.size() - 1) {\n                stack.push(i + 1);\n            }\n            if (i < arr.size() - 2) {\n                stack.push(i + 2);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        int min = arr.get(0);\n        int minIndex = 0;\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) < min) {\n                min = arr.get(i);\n                minIndex = i;\n            }\n        }\n        List<Integer> result = new ArrayList<>();\n        result.add(min);\n        result.add(minIndex);\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                result.add(arr.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int min = Integer.MAX_VALUE;\n        int max = Integer.MIN_VALUE;\n        int mid = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        return max - min;\n    }\n\n    public int maxArea(int[] height) {\n        int max = 0;\n        int left = 0;\n        int right = height.length - 1;\n        while (left < right) {\n            int area = Math.min(height[left], height[right]) * (right - left);\n            if (area > max) {\n                max = area;\n            }\n            if (height[left] < height[right]) {\n                left++;\n            } else {\n                right--;\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int n = lst.size();\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int mid = l + (r - l) / 2;\n            if (lst.get(mid) == mid) {\n                return mid;\n            } else if (lst.get(mid) > mid) {\n                r = mid - 1;\n            } else {\n                l = mid + 1;\n            }\n        }\n        return -1;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int len = lst.size();\n        int left = 0;\n        int right = len - 1;\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            if (lst.get(mid) > lst.get(right)) {\n                right = mid - 1;\n            } else if (lst.get(mid) < lst.get(left)) {\n                left = mid + 1;\n            } else {\n                return lst.get(mid);\n            }\n        }\n        return -1;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int low = 0;\n        int high = lst.size() - 1;\n        int mid;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (lst.get(mid) == 0) {\n                return mid;\n            } else if (lst.get(mid) > 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int n = lst.size();\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int mid = l + (r - l) / 2;\n            if (lst.get(mid) == mid) {\n                return mid;\n            }\n            if (lst.get(mid) < mid) {\n                l = mid + 1;\n            } else {\n                r = mid - 1;\n            }\n        }\n        return -1;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int n = lst.size();\n        int low = 0;\n        int high = n - 1;\n        int mid;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (lst.get(mid) == 0) {\n                return mid;\n            } else if (lst.get(mid) > 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int n = lst.size();\n        int low = 0;\n        int high = n - 1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (lst.get(mid) == 0) {\n                low = mid + 1;\n            } else if (lst.get(mid) == 1) {\n                high = mid - 1;\n            } else {\n                return mid;\n            }\n        }\n        return -1;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        return max;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> lst = new ArrayList<>();\n        lst.add(1);\n        lst.add(2);\n        lst.add(3);\n        lst.add(4);\n        lst.add(5);\n        lst.add(6);\n        lst.add(7);\n        lst.add(8);\n        lst.add(9);\n        lst.add(10);\n        System.out.println(new Solution().search(lst));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int[] freq = new int[lst.size()];\n        for (int i : lst) {\n            freq[i]++;\n        }\n        int ans = -1;\n        for (int i = 0; i < freq.length; i++) {\n            if (freq[i] >= i) {\n                ans = i;\n            }\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int n = lst.size();\n        int low = 0;\n        int high = n - 1;\n        int mid;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (lst.get(mid) == 0) {\n                return mid;\n            }\n            if (lst.get(mid) > 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int n = lst.size();\n        int l = 0;\n        int r = n - 1;\n        int mid;\n        while (l <= r) {\n            mid = l + (r - l) / 2;\n            if (lst.get(mid) > lst.get(n - 1)) {\n                r = mid - 1;\n            } else if (lst.get(mid) < lst.get(n - 1)) {\n                l = mid + 1;\n            } else {\n                return mid;\n            }\n        }\n        return -1;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = 0;\n        int count = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == 1) {\n                count++;\n            } else {\n                if (count > max) {\n                    max = count;\n                }\n                count = 0;\n            }\n        }\n        if (count > max) {\n            max = count;\n        }\n        return max;\n    }\n\n    public int findMaxForm(int[] arr) {\n        int max = 0;\n        int count = 0;\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] == 1) {\n                count++;\n            } else {\n                if (count > max) {\n                    max = count;\n                }\n                count = 0;\n            }\n        }\n        if (count > max) {\n            max = count;\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int n = lst.size();\n        int l = 0;\n        int r = n - 1;\n        int mid;\n        while (l <= r) {\n            mid = l + (r - l) / 2;\n            if (lst.get(mid) == 0) {\n                r = mid - 1;\n            } else if (lst.get(mid) == 1) {\n                l = mid + 1;\n            } else {\n                return mid;\n            }\n        }\n        return -1;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int n = lst.size();\n        int l = 0;\n        int r = n - 1;\n        while (l <= r) {\n            int mid = l + (r - l) / 2;\n            if (lst.get(mid) == mid) {\n                return mid;\n            } else if (lst.get(mid) > mid) {\n                r = mid - 1;\n            } else {\n                l = mid + 1;\n            }\n        }\n        return -1;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int n = lst.size();\n        int low = 0;\n        int high = n - 1;\n        int mid;\n        while (low <= high) {\n            mid = low + (high - low) / 2;\n            if (lst.get(mid) == 0) {\n                return mid;\n            } else if (lst.get(mid) > 0) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return -1;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int n = lst.size();\n        int low = 0;\n        int high = n - 1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (lst.get(mid) == 0) {\n                low = mid + 1;\n            } else if (lst.get(mid) == 1) {\n                high = mid - 1;\n            } else {\n                return mid;\n            }\n        }\n        return -1;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        \n        int[] frq = new int[lst.size()];\n        for (int i : lst) {\n            frq[i] += 1;\n        }\n        int ans = -1;\n        \n            if (frq[i] >= i) {\n                ans = i;\n            }\n        }\n        return ans;\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int n = lst.size();\n        int low = 0;\n        int high = n - 1;\n        int mid;\n        while (low <= high) {\n            mid = (low + high) / 2;\n            if (lst.get(mid) < lst.get(n - 1)) {\n                low = mid + 1;\n            } else if (lst.get(mid) > lst.get(n - 1)) {\n                high = mid - 1;\n            } else {\n                return mid;\n            }\n        }\n        return -1;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int n = lst.size();\n        int l = 0;\n        int r = n - 1;\n        int mid;\n        while (l <= r) {\n            mid = (l + r) / 2;\n            if (lst.get(mid) > lst.get(n - 1)) {\n                r = mid - 1;\n            } else if (lst.get(mid) < lst.get(n - 1)) {\n                l = mid + 1;\n            } else {\n                return mid;\n            }\n        }\n        return -1;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> res = new ArrayList<>();\n        if (_switch) {\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> res = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++) {\n            int temp = lst.get(i);\n            int count = 0;\n            for(int j = 0; j < lst.size(); j++) {\n                if(temp == lst.get(j)) {\n                    count++;\n                }\n            }\n            if(count % 2 == 0) {\n                res.add(temp);\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> odd = new ArrayList<>();\n        List<Integer> even = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                even.add(lst.get(i));\n            } else {\n                odd.add(lst.get(i));\n            }\n        }\n        odd.addAll(even);\n        return odd;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            int j = lst.get(i);\n            if (j % 2 == 0) {\n                res.add(j);\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> res = new ArrayList<>();\n        int n = lst.size();\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = lst.get(i);\n        }\n        Arrays.sort(arr);\n        for (int i = 0; i < n; i++) {\n            res.add(arr[i]);\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        int n = lst.size();\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = lst.get(i);\n        }\n        Arrays.sort(arr);\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            res.add(arr[i]);\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> res = new ArrayList<>();\n        int len = lst.size();\n        for (int i = 0; i < len; i++) {\n            int num = lst.get(i);\n            int j = i + 1;\n            while (j < len && num == lst.get(j)) {\n                j++;\n            }\n            res.add(num);\n            res.add(j - i - 1);\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            int j = lst.get(i);\n            for (int k = 0; k < lst.size(); k++) {\n                if (k != i && j == lst.get(k)) {\n                    lst.remove(k);\n                    break;\n                }\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            res.add(lst.get(i));\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> oddList = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) % 2 == 1) {\n                oddList.add(lst.get(i));\n            }\n        }\n        return oddList;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = lst.size() - 1; i >= 0; i--) {\n            int num = lst.get(i);\n            if (num == 10) {\n                result.add(10);\n                lst.remove(i);\n                continue;\n            }\n            if (num == 9) {\n                result.add(9);\n                lst.remove(i);\n                continue;\n            }\n            if (num == 4) {\n                result.add(4);\n                lst.remove(i);\n                continue;\n            }\n            if (num == 5) {\n                result.add(5);\n                lst.remove(i);\n                continue;\n            }\n            if (num == 6) {\n                result.add(6);\n                lst.remove(i);\n                continue;\n            }\n            if (num == 8) {\n                result.add(8);\n                lst.remove(i);\n                continue;\n            }\n            if (num == 3) {\n                result.add(3);\n                lst.remove(i);\n                continue;\n            }\n            if (num == 2) {\n                result.add(2);\n                lst.remove(i);\n                continue;\n            }\n            if (num == 7) {\n                result.add(7);\n                lst.remove(i);\n                continue;\n            }\n            if (num == 1) {\n                result.add(1);\n                lst.remove(i);\n                continue;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> result = new ArrayList<Integer>();\n        int len = lst.size();\n        for (int i = 0; i < len; i++) {\n            int num = lst.get(i);\n            int j = i + 1;\n            while (j < len && lst.get(j) == num) {\n                j++;\n            }\n            result.add(num);\n            result.add(j);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> ans = new ArrayList<>();\n        int n = lst.size();\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = lst.get(i);\n        }\n        Arrays.sort(arr);\n        for (int i = 0; i < n; i++) {\n            ans.add(arr[i]);\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                res.add(lst.get(i));\n            } else {\n                res.add(lst.get(i));\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        int len = lst.size();\n        for (int i = 0; i < len; i++) {\n            for (int j = 0; j < len; j++) {\n                if (lst.get(i) == lst.get(j)) {\n                    result.add(lst.get(i));\n                    lst.remove(i);\n                    lst.remove(j);\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> res = new ArrayList<>();\n        boolean _switch = false;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == 1) {\n                _switch = true;\n            } else {\n                res.add(lst.get(i));\n            }\n        }\n        if (_switch) {\n            for (int i = 0; i < lst.size(); i++) {\n                res.add(lst.get(i));\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> oddList = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                oddList.add(lst.get(i));\n            }\n        }\n        return oddList;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        int n = lst.size();\n        List<Integer> res = new ArrayList<Integer>();\n        for(int i = 0; i < n; i++) {\n            int j = i;\n            while(j > 0 && lst.get(j) > lst.get(j-1)) {\n                int temp = lst.get(j);\n                lst.set(j, lst.get(j-1));\n                lst.set(j-1, temp);\n                j--;\n            }\n            res.add(lst.get(j));\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            int cur = lst.get(i);\n            int next = lst.get(i + 1);\n            if (cur < next) {\n                res.add(cur);\n                res.add(next);\n                i++;\n            } else {\n                res.add(next);\n                res.add(cur);\n                i++;\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> res = new ArrayList<>();\n        int n = lst.size();\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = lst.get(i);\n        }\n        Arrays.sort(arr);\n        for (int i = 0; i < n; i++) {\n            res.add(arr[i]);\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) {\n            return res;\n        }\n        int len = lst.size();\n        int i = 0;\n        while (i < len) {\n            int j = i + 1;\n            while (j < len && lst.get(j) < lst.get(i)) {\n                j++;\n            }\n            res.add(lst.get(i));\n            i = j;\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double area = Math.sqrt(a * (a - b) * (b - c));\n        return area;\n    }\n\n    public double triangleLength(double a, double b, double c) {\n        double length = Math.sqrt(a * (a - b) * (b - c));\n        return length;\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        double a = 1.0;\n        double b = 2.0;\n        double c = 3.0;\n        double area = s.triangleArea(a, b, c);\n        double length = s.triangleLength(a, b, c);\n        System.out.println(\"The area of the triangle is: \" + area);\n        System.out.println(\"The length of the triangle is: \" + length);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double area = 0;\n        if (a > b && a > c) {\n            area = a * b / 2;\n        } else if (b > a && b > c) {\n            area = b * c / 2;\n        } else {\n            area = c * a / 2;\n        }\n        return area;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        return (a + b + c) / 2.0 * Math.sqrt(a * b * c / 2.0);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double area = 0;\n        if(a > b && a > c) {\n            area = a * b / 2;\n        } else if(b > a && b > c) {\n            area = b * c / 2;\n        } else {\n            area = c * a / 2;\n        }\n        return area;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double area = (a + b + c) / 2;\n        return (double) Math.round(area * 100) / 100;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double area = 0;\n        if (a > b && a > c) {\n            area = a * b / 2;\n        } else if (b > a && b > c) {\n            area = b * c / 2;\n        } else {\n            area = c * a / 2;\n        }\n        return area;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double area = 0;\n        if (a > b && a > c) {\n            area = a * b / 2;\n        } else if (b > a && b > c) {\n            area = b * c / 2;\n        } else {\n            area = c * a / 2;\n        }\n        return area;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double area = (a + b + c) / 2;\n        return (double) Math.round(area * 100) / 100;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double area = 0;\n        if (a > b && a > c) {\n            area = a * b / 2;\n        } else if (b > a && b > c) {\n            area = b * c / 2;\n        } else {\n            area = c * a / 2;\n        }\n        return area;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double area = 0;\n        if(a>b && a>c) {\n            area = a*b/2;\n        }\n        else if(b>a && b>c) {\n            area = b*c/2;\n        }\n        else {\n            area = c*a/2;\n        }\n        return area;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double area = 0;\n        if (a + b > c && a + c > b && b + c > a) {\n            area = (a + b + c) / 2;\n        } else if (a + b > c && a + c > b) {\n            area = a + b;\n        } else if (a + c > b) {\n            area = a + c;\n        }\n        return area;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double area = 0;\n        double s = (a + b + c) / 2;\n        double h = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        area = s * h;\n        return area;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double area = 0;\n        if(a>b && a>c)\n            area = a*b/2;\n        else if(b>a && b>c)\n            area = b*c/2;\n        else\n            area = c*a/2;\n        return area;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double area = (a + b + c) / 2;\n        return (double) Math.round(area * 100) / 100;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double area = 0;\n        if(a>b && a>c)\n        {\n            area = a*b/2;\n        }\n        else if(b>a && b>c)\n        {\n            area = b*c/2;\n        }\n        else\n        {\n            area = c*a/2;\n        }\n        return area;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double area = 0;\n        if(a>b && a>c)\n            area = a*b/2;\n        else if(b>a && b>c)\n            area = b*c/2;\n        else if(c>a && c>b)\n            area = c*a/2;\n        return area;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double s = (a + b + c) / 2;\n        return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double mid = (a + b + c) / 2;\n        double distance = Math.sqrt(Math.pow(mid, 2) - Math.pow(a, 2) - Math.pow(b, 2));\n        return distance;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double area = 0;\n        if (a > b && a > c) {\n            area = a * b / 2;\n        } else if (b > a && b > c) {\n            area = b * c / 2;\n        } else {\n            area = c * a / 2;\n        }\n        return area;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double area = 0;\n        double s = (a + b + c) / 2;\n        double area1 = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        double area2 = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        double area3 = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        area = area1 + area2 + area3;\n        return area;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        int n = q.size();\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = q.get(i);\n        }\n        Arrays.sort(arr);\n        int l = 0, r = n - 1;\n        while (l < r) {\n            if (arr[l] + arr[r] <= w) {\n                l++;\n            } else {\n                r--;\n            }\n        }\n        return l == r;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) return false;\n        if (q.size() == 1) return true;\n        if (q.size() == 2) return q.get(0) <= q.get(1);\n        \n        int mid = (q.size() + 1) / 2;\n        boolean left = willItFly(q.subList(0, mid), w);\n        boolean right = willItFly(q.subList(mid, q.size()), w);\n        return left && right;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        int n = q.size();\n        int[] dp = new int[n];\n        Arrays.fill(dp, -1);\n        dp[0] = 0;\n        for(int i = 1; i < n; i++) {\n            int cur = q.get(i);\n            for(int j = 0; j < i; j++) {\n                if(cur < q.get(j)) {\n                    dp[i] = Math.max(dp[i], dp[j] + 1);\n                }\n            }\n        }\n        return dp[n - 1] >= w;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        return sum > w;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) {\n            return true;\n        }\n        if (q.size() == 1) {\n            return q.get(0) == w;\n        }\n        if (q.get(0) != w) {\n            return false;\n        }\n        q.remove(0);\n        return willItFly(q, w) && willItFly(q, -w);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) {\n            return false;\n        }\n        int i = 0;\n        int j = q.size() - 1;\n        while (i < j) {\n            if (q.get(i) != q.get(j)) {\n                return false;\n            }\n            i += 1;\n            j -= 1;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) {\n            return false;\n        }\n        if (q.size() == 1) {\n            return true;\n        }\n        if (q.size() == 2) {\n            return w == q.get(0) || w == q.get(1);\n        }\n        int mid = q.size() / 2;\n        if (w == q.get(mid)) {\n            return willItFly(q.subList(0, mid), w);\n        }\n        return willItFly(q.subList(0, mid), w) || willItFly(q.subList(mid, q.size()), w);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) {\n            return true;\n        }\n        if (q.size() != w) {\n            return false;\n        }\n        for (int i = 0; i < q.size(); i++) {\n            if (q.get(i) != w - q.get(i)) {\n                return false;\n            }\n        }\n        return willItFly(q.subList(1, q.size()), w - q.get(0));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        int n = q.size();\n        int[] dp = new int[n];\n        Arrays.fill(dp, -1);\n        dp[0] = 0;\n        for (int i = 1; i < n; i++) {\n            int cur = q.get(i);\n            for (int j = 0; j < i; j++) {\n                if (cur + q.get(j) <= w) {\n                    dp[i] = Math.max(dp[i], dp[j] + 1);\n                }\n            }\n        }\n        return dp[n - 1] >= 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) {\n            return false;\n        }\n        int n = q.size();\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = q.get(i);\n        }\n        Arrays.sort(arr);\n        int left = 0;\n        int right = n - 1;\n        while (left < right) {\n            if (arr[left] == w) {\n                left++;\n            } else if (arr[right] == w) {\n                right--;\n            } else {\n                return true;\n            }\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.isEmpty()) {\n            return false;\n        }\n        int root = q.get(0);\n        q.remove(0);\n        if (root == w) {\n            return true;\n        }\n        if (root > w) {\n            return willItFly(q, w);\n        }\n        return willItFly(q, root) || willItFly(q, w - root);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) return false;\n        int n = q.size();\n        int k = w % n;\n        if (k == 0) return false;\n        for (int i = 0; i < k; i++) {\n            q.add(0, q.remove(n - 1));\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        for (int i = 0; i < q.size(); i++) {\n            if (q.get(i) > w) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        int i = 0, j = q.size() - 1;\n        while (i < j) {\n            if (q.get(i) != q.get(j)) {\n                return false;\n            }\n            i += 1;\n            j -= 1;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) return true;\n        if (q.size() == 1) return false;\n        if (q.get(0) == w) return true;\n        if (q.get(0) == q.get(q.size() - 1)) return true;\n        if (q.get(0) == q.get(q.size() / 2)) return true;\n        if (q.get(0) == q.get(q.size() - q.get(q.size() / 2) - 1)) return true;\n        if (q.get(0) == q.get(q.size() / 2 + q.get(q.size() / 2))) return true;\n        if (q.get(0) == q.get(q.size() - q.get(q.size() / 2 + q.get(q.size() / 2)) - 1)) return true;\n        if (q.get(0) == q.get(q.size() / 2 - q.get(q.size() / 2))) return true;\n        if (q.get(0) == q.get(q.size() - q.get(q.size() / 2 - q.get(q.size() / 2)) - 1)) return true;\n        if (q.get(0) == q.get(q.size() / 2 + q.get(q.size() / 2) + 1)) return true;\n        if (q.get(0) == q.get(q.size() - q.get(q.size() / 2 + q.get(q.size() / 2) + 1)) - 1) return true;\n        if (q.get(0) == q.get(q.size() / 2 - q.get(q.size() / 2) + 1)) return true;\n        if (q.get(0) == q.get(q.size() - q.get(q.size() / 2 - q.get(q.size() / 2) + 1)) - 1) return true;\n        if (q.get(0) == q.get(q.size() / 2 + q.get(q.size() / 2) - 1)) return true;\n        if (q.get(0) == q.get(q.size() - q.get(q.size() / 2 + q.get(q.size() / 2) - 1)) - 1) return true;\n        if (q.get(0) == q.get(q.size() / 2 - q.get(q.size() / 2) - 1)) return true;\n        if (q.get(0) == q.get(q.size() - q.get(q.size() / 2 - q.get(q.size() / 2) - 1)) - 1) return true;\n        if (q.get(0) == q.get(q.size() / 2 + q.get(q.size() / 2) + 1)) return true;\n        if (q.get(0) == q.get(q.size() - q.get(q.size() / 2 + q.get(q.size() / 2) + 1)) - 1) return true;\n        if (q.get(0) == q.get(q.size() / 2 - q.get(q.size() / 2) + 1)) return true;\n        if (q.get(0) == q.get(q.size() - q.get(q.size() / 2 - q.get(q.size() / 2) + 1)) - 1) return true;\n        if (q.get(0) == q.get(q.size() / 2 - q.get(q.size() / 2) - 1)) return true;\n        if (q.get(0) == q.get(q.size() - q.get(q.size() / 2 - q.get(q.size() / 2) - 1)) - 1) return true;\n        if (q.get(0) == q.get(q.size() / 2 + q.get(q.size() / 2) - 1)) return true;\n        if (q.get(0) == q.get(q.size() - q.get(q.size() / 2 + q.get(q.size() / 2) - 1)) - 1) return true;\n        if (q.get(0) == q.get(q.size() / 2 + q.get(q.size() / 2) + 1)) return true;\n        if (q.get(0) == q.get(q.size() - q.get(q.size() / 2 + q.get(q.size() / 2) + 1)) - 1) return true;\n        if (q.get(0) == q.get(q.size() / 2 - q.get(q.size() / 2) + 1)) return true;\n        if (q.get(0) == q.get(q.size() - q.get(q.size() / 2 - q.get(q.size() / 2) + 1)) - 1) return true;\n        if (q.get(0) == q.get(q.size() / 2 - q.get(q.size() / 2) - 1)) return true;\n        if (q.get(0) == q.get(q.size() - q.get(q.size() / 2 - q.get(q.size() / 2) - 1)) - 1) return true;\n        if (q.get(0) == q.get(q.size() / 2 + q.get(q.size() / 2) + 1)) return true;\n        if (q.get(0) == q.get(q.size() - q.get(q.size() / 2 + q.get(q.size() / 2) + 1)) - 1) return true;\n        if (q.get(0) == q.get(q.size() / 2 - q.get(q.size() / 2) + 1)) return true;\n        if (q.get(0) == q.get(q.size() - q.get(q.size() / 2 - q.get(q.size() / 2) + 1)) - 1) return true;\n        if (q.get(0) == q.get(q.size() / 2 - q.get(q.size() / 2) - 1)) return true;\n        if (q.get(0) == q.get(q.size() - q.get(q.size() / 2 - q.get(q.size() / 2) - 1)) - 1) return true;\n        if (q.get(0) == q.get(q.size() / 2 + q.get(q.size() / 2) + 1)) return true;\n        if (q.get(0) == q.get(q.size() - q.get(q.size() / 2 + q.get(q.size() / 2) + 1)) - 1) return true;\n        if"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) {\n            return w == 0;\n        }\n        if (q.size() == 1) {\n            return w == q.get(0);\n        }\n        if (q.get(0) == w) {\n            return willItFly(q.subList(1, q.size()), w);\n        }\n        return willItFly(q.subList(1, q.size()), w);\n    }\n\n    public boolean willItFly(int[] q, int w) {\n        if (q.length == 0) {\n            return w == 0;\n        }\n        if (q.length == 1) {\n            return w == q[0];\n        }\n        if (q[0] == w) {\n            return willItFly(q.subList(1, q.length), w);\n        }\n        return willItFly(q.subList(1, q.length), w);\n    }\n\n    public boolean willItFly(String s, String p) {\n        if (p.length() == 0) {\n            return s.length() == 0;\n        }\n        if (p.charAt(0) == '*') {\n            return willItFly(s, p.substring(1)) || willItFly(s, p);\n        }\n        if (p.charAt(0) == '?') {\n            return willItFly(s, p.substring(1)) || s.length() == 0;\n        }\n        if (p.charAt(0) == '+') {\n            return willItFly(s, p.substring(1)) || s.length() > 0 && willItFly(s.substring(1), p);\n        }\n        if (p.charAt(0) == '.') {\n            return s.length() > 0 && p.charAt(1) == s.charAt(0;\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) {\n            return w == 0;\n        }\n        if (q.size() == 1) {\n            return w == q.get(0);\n        }\n        if (q.get(0) == w) {\n            return willItFly(q.subList(1, q.size()), w);\n        }\n        return willItFly(q.subList(1, q.size()), w);\n    }\n\n    public boolean willItFly(int[] q, int w) {\n        if (q.length == 0) {\n            return w == 0;\n        }\n        if (q.length == 1) {\n            return w == q[0];\n        }\n        if (q[0] == w) {\n            return willItFly(q.subList(1, q.length), w);\n        }\n        return willItFly(q.subList(1, q.length), w);\n    }\n\n    public boolean willItFly(String s, String p) {\n        if (p.length() == 0) {\n            return s.length() == 0;\n        }\n        if (p.charAt(0) == '*') {\n            return willItFly(s, p.substring(1)) || willItFly(s, p);\n        }\n        if (p.charAt(0) == '?') {\n            return willItFly(s, p.substring(1)) || s.length() == 0;\n        }\n        if (p.charAt(0) == '+') {\n            return willItFly(s, p.substring(1)) || s.length() > 0 && willItFly(s.substring(1), p);\n        }\n        if (p.charAt(0) == '.') {\n            return s.length() > 0 && p.charAt(1) == s.charAt(0;\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) {\n            return w == 0;\n        }\n        if (q.size() == 1) {\n            return w == q.get(0);\n        }\n        if (q.get(0) == w) {\n            return willItFly(q.subList(1, q.size()), w);\n        }\n        return willItFly(q.subList(1, q.size()), w);\n    }\n\n    public boolean willItFly(int[] q, int w) {\n        if (q.length == 0) {\n            return w == 0;\n        }\n        if (q.length == 1) {\n            return w == q[0];\n        }\n        if (q[0] == w) {\n            return willItFly(q.subList(1, q.length), w);\n        }\n        return willItFly(q.subList(1, q.length), w);\n    }\n\n    public boolean willItFly(String s, String p) {\n        if (p.length() == 0) {\n            return s.length() == 0;\n        }\n        if (p.charAt(0) == '*') {\n            return willItFly(s, p.substring(1)) || willItFly(s, p);\n        }\n        if (p.charAt(0) == '?') {\n            return willItFly(s, p.substring(1)) || s.length() == 0;\n        }\n        if (p.charAt(0) == '+') {\n            return willItFly(s, p.substring(1)) || s.length() > 0 && willItFly(s.substring(1), p);\n        }\n        if (p.charAt(0) == '.') {\n            return s.length() > 0 && p.charAt(1) == s.charAt(0;\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) {\n            return w == 0;\n        }\n        if (q.size() == 1) {\n            return w == q.get(0);\n        }\n        if (q.get(0) == w) {\n            return willItFly(q.subList(1, q.size()), w);\n        }\n        return willItFly(q.subList(1, q.size()), w);\n    }\n\n    public boolean willItFly(int[] q, int w) {\n        if (q.length == 0) {\n            return w == 0;\n        }\n        if (q.length == 1) {\n            return w == q[0];\n        }\n        if (q[0] == w) {\n            return willItFly(q.subList(1, q.length), w);\n        }\n        return willItFly(q.subList(1, q.length), w);\n    }\n\n    public boolean willItFly(String s, String p) {\n        if (p.length() == 0) {\n            return s.length() == 0;\n        }\n        if (p.charAt(0) == '*') {\n            return willItFly(s, p.substring(1)) || willItFly(s, p);\n        }\n        if (p.charAt(0) == '?') {\n            return willItFly(s, p.substring(1)) || s.length() == 0;\n        }\n        if (p.charAt(0) == '+') {\n            return willItFly(s, p.substring(1)) || s.length() > 0 && willItFly(s.substring(1), p);\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) {\n            return true;\n        }\n        int i = 0;\n        int j = q.size() - 1;\n        while (i < j) {\n            if (q.get(i) != q.get(j)) {\n                return false;\n            }\n            i += 1;\n            j -= 1;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if(q.size() == 0)\n            return false;\n        int n = q.size();\n        int[] dp = new int[n];\n        Arrays.fill(dp, 1);\n        for(int i = 1; i < n; i++) {\n            for(int j = 0; j < i; j++) {\n                if(q.get(i) > q.get(j)) {\n                    dp[i] = dp[i] * dp[j];\n                }\n            }\n        }\n        return dp[n-1] == w;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) {\n            return false;\n        }\n        int min = q.get(0);\n        for (int i = 1; i < q.size(); i++) {\n            if (q.get(i) < min) {\n                min = q.get(i);\n            }\n        }\n        return w - min >= 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) {\n            return true;\n        }\n        if (q.size() == 1) {\n            return q.get(0) == w;\n        }\n        if (q.get(0) == w) {\n            return willItFly(q.subList(1, q.size()), w);\n        }\n        return willItFly(q.subList(1, q.size()), w) || willItFly(q.subList(0, q.size() - 1), w);\n    }\n\n    public List<Integer> distinctSubsequences(String s, String t) {\n        List<Integer> res = new ArrayList<>();\n        if (s.length() == 0 || t.length() == 0) {\n            return res;\n        }\n        if (s.length() == 1 && t.length() == 1) {\n            res.add(0);\n            return res;\n        }\n        if (s.charAt(0) == t.charAt(0)) {\n            res.add(0);\n            return res;\n        }\n        List<Integer> q = new ArrayList<>();\n        q.add(0);\n        while (q.size() > 0) {\n            int w = q.get(0);\n            if (willItFly(q, w)) {\n                res.add(w);\n                q.remove(0);\n            } else {\n                q.remove(0);\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            int diff = arr.get(i) - min;\n            if (diff > 1) {\n                return diff;\n            }\n            min = Math.min(min, arr.get(i));\n        }\n        return 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int min = Integer.MAX_VALUE;\n        for(int i = 0; i < arr.size(); i++) {\n            int diff = arr.get(i) - 1;\n            if(diff < 0) {\n                diff = 0;\n            }\n            if(diff < min) {\n                min = diff;\n            }\n        }\n        return min;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int ans = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            for (int j = i + 1; j < arr.size(); j++) {\n                ans = Math.min(ans, arr.get(i) - arr.get(j));\n            }\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int min = Integer.MAX_VALUE;\n        int max = Integer.MIN_VALUE;\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr.get(i) < min) {\n                min = arr.get(i);\n            }\n            if (arr.get(i) > max) {\n                max = arr.get(i);\n            }\n            if (arr.get(i) == min) {\n                count++;\n            }\n        }\n        if (count == 0) {\n            return n;\n        }\n        int res = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr.get(i) == min) {\n                arr.remove(i);\n                res++;\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int min = Integer.MAX_VALUE;\n        for(int i = 0; i < n; i++) {\n            int diff = arr.get(i) - arr.get(i+1);\n            if(diff < 0) {\n                diff = -diff;\n            }\n            min = Math.min(min, diff);\n        }\n        return min;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int min = Integer.MAX_VALUE;\n        for(int i = 0; i < n; i++) {\n            int diff = arr.get(i) - arr.get(i + 1);\n            if(diff < 0) {\n                diff = -diff;\n            }\n            min = Math.min(min, diff);\n        }\n        return min;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int[] arr1 = new int[n];\n        int[] arr2 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr1[i] = arr.get(i);\n            arr2[i] = arr.get(i);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        int min = arr1[0];\n        int max = arr2[0];\n        for (int i = 0; i < n; i++) {\n            if (arr1[i] != arr2[i]) {\n                min = Math.min(min, arr1[i]);\n                max = Math.max(max, arr2[i]);\n            }\n        }\n        return max - min;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int min = Integer.MAX_VALUE;\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            min = Math.min(min, arr.get(i));\n            max = Math.max(max, arr.get(i));\n        }\n        int diff = max - min;\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) - min == diff) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int min = Integer.MAX_VALUE;\n        for(int i = 0; i < n; i++) {\n            int diff = arr.get(i) - arr.get(i+1);\n            if(diff < 0) {\n                diff = -diff;\n            }\n            min = Math.min(min, diff);\n        }\n        return min;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int min = Integer.MAX_VALUE;\n        for(int i = 0; i < n; i++) {\n            int diff = arr.get(i) - min;\n            if(diff < 0) {\n                min = arr.get(i);\n            }\n            else if(diff > 0) {\n                min += diff;\n            }\n        }\n        return min;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int[] dp = new int[n];\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < n; i++) {\n            dp[i] = arr.get(i);\n            for (int j = 0; j < i; j++) {\n                if (arr.get(i) - arr.get(j) < min) {\n                    min = arr.get(i) - arr.get(j);\n                }\n            }\n        }\n        return min;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int min = Integer.MAX_VALUE;\n        int max = Integer.MIN_VALUE;\n        for(int i = 0; i < n; i++) {\n            min = Math.min(min, arr.get(i));\n            max = Math.max(max, arr.get(i));\n        }\n        int diff = max - min;\n        int minChange = Integer.MAX_VALUE;\n        for(int i = 0; i < n; i++) {\n            int change = Math.abs(arr.get(i) - min);\n            if(change < minChange) {\n                minChange = change;\n            }\n        }\n        return diff - minChange;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int min = Integer.MAX_VALUE;\n        int max = Integer.MIN_VALUE;\n        int diff = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            min = Math.min(min, arr.get(i));\n            max = Math.max(max, arr.get(i));\n            diff = Math.abs(min - max);\n        }\n        return diff;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int[] dp = new int[n];\n        dp[0] = arr.get(0);\n        for(int i = 1; i < n; i++) {\n            dp[i] = Math.min(dp[i-1], Math.min(dp[i-2], arr.get(i)));\n        }\n        return dp[n-1];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int min = Integer.MAX_VALUE;\n        int max = Integer.MIN_VALUE;\n        for(int i = 0; i < n; i++) {\n            min = Math.min(min, arr.get(i));\n            max = Math.max(max, arr.get(i));\n        }\n        int diff = max - min;\n        int ans = 0;\n        for(int i = 0; i < n; i++) {\n            if(arr.get(i) == min) {\n                ans++;\n            }\n            else {\n                ans += diff / (arr.get(i) - min);\n            }\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) < min) {\n                min = arr.get(i);\n            }\n        }\n        return min;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int[] dp = new int[n];\n        dp[0] = arr.get(0);\n        for(int i = 1; i < n; i++) {\n            dp[i] = Math.min(dp[i-1], Math.min(dp[i-2], arr.get(i)));\n        }\n        return dp[n-1];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int min = Integer.MAX_VALUE;\n        int max = Integer.MIN_VALUE;\n        int minIndex = -1;\n        int maxIndex = -1;\n        for(int i = 0; i < n; i++) {\n            if(arr.get(i) < min) {\n                min = arr.get(i);\n                minIndex = i;\n            }\n            if(arr.get(i) > max) {\n                max = arr.get(i);\n                maxIndex = i;\n            }\n        }\n        int diff = max - min;\n        int minChange = Integer.MAX_VALUE;\n        int maxChange = Integer.MIN_VALUE;\n        for(int i = 0; i < n; i++) {\n            if(arr.get(i) - min == diff) {\n                minChange = Math.min(minChange, i - minIndex);\n                maxChange = Math.max(maxChange, i - maxIndex);\n            }\n        }\n        return Math.min(minChange, maxChange);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int min = Integer.MAX_VALUE;\n        int max = Integer.MIN_VALUE;\n        for(int i = 0; i < n; i++) {\n            min = Math.min(min, arr.get(i));\n            max = Math.max(max, arr.get(i));\n        }\n        int diff = max - min;\n        int ans = 0;\n        for(int i = 0; i < n; i++) {\n            if(arr.get(i) == min) {\n                ans++;\n            }\n            else {\n                ans += diff / (arr.get(i) - min);\n            }\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int min = Integer.MAX_VALUE;\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) < min) {\n                min = arr.get(i);\n            }\n            if (arr.get(i) > max) {\n                max = arr.get(i);\n            }\n        }\n        return max - min;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> result = new ArrayList<>();\n        if (lst1.size() == 0 || lst2.size() == 0) {\n            return result;\n        }\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < lst1.size(); i++) {\n            map.put(lst1.get(i), i);\n        }\n        for (int i = 0; i < lst2.size(); i++) {\n            if (map.containsKey(lst2.get(i))) {\n                result.add(lst1.get(map.get(lst2.get(i))));\n                map.remove(lst2.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> result = new ArrayList<String>();\n        for (String s1 : lst1) {\n            for (String s2 : lst2) {\n                if (s1.equals(s2)) {\n                    result.add(s1);\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> result = new ArrayList<>();\n        for (String s1 : lst1) {\n            for (String s2 : lst2) {\n                if (s1.equals(s2)) {\n                    result.add(s1);\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> result = new ArrayList<>();\n        for (String s : lst1) {\n            if (lst2.contains(s)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<String> lst1 = new ArrayList<>();\n        lst1.add(\"123\");\n        lst1.add(\"1234\");\n        lst1.add(\"12345\");\n        List<String> lst2 = new ArrayList<>();\n        lst2.add(\"123\");\n        lst2.add(\"1234\");\n        lst2.add(\"12345\");\n        List<String> result = solution.totalMatch(lst1, lst2);\n        for (String s : result) {\n            System.out.println(s);\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> result = new ArrayList<String>();\n        if (lst1.size() == 0 || lst2.size() == 0) {\n            return result;\n        }\n        Map<String, Integer> map1 = new HashMap<String, Integer>();\n        Map<String, Integer> map2 = new HashMap<String, Integer>();\n        for (int i = 0; i < lst1.size(); i++) {\n            map1.put(lst1.get(i), i);\n        }\n        for (int i = 0; i < lst2.size(); i++) {\n            map2.put(lst2.get(i), i);\n        }\n        for (int i = 0; i < lst1.size(); i++) {\n            if (map1.containsKey(lst2.get(i))) {\n                result.add(lst1.get(map1.get(lst2.get(i))));\n                map1.remove(lst2.get(i));\n                map2.remove(lst2.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        int l1 = 0;\n        \n            l1 += st.length();\n        }\n\n        int l2 = 0;\n        \n            l2 += st.length();\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> lst3 = new ArrayList<>();\n        for (String s : lst1) {\n            if (s.equals(lst2.get(0))) {\n                lst3.add(s);\n                lst2.remove(0);\n            }\n        }\n        return lst3;\n    }\n\n    public boolean hasPathSum(TreeNode root, int sum) {\n        if (root == null) return false;\n        if (root.left == null && root.right == null && root.val == sum) return true;\n        List<String> lst1 = new ArrayList<>();\n        List<String> lst2 = new ArrayList<>();\n        lst1.add(String.valueOf(root.val));\n        lst2.add(String.valueOf(root.val));\n        if (root.left != null) {\n            lst1.addAll(totalMatch(lst1, lst2));\n            lst2.add(String.valueOf(root.left.val));\n        }\n        if (root.right != null) {\n            lst1.addAll(totalMatch(lst1, lst2));\n            lst2.add(String.valueOf(root.right.val));\n        }\n        return hasPathSum(root.left, sum - root.val) || hasPathSum(root.right, sum - root.val);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> lst = new ArrayList<String>();\n        for (int i = 0; i < lst1.size(); i++) {\n            for (int j = 0; j < lst2.size(); j++) {\n                if (lst1.get(i).equals(lst2.get(j))) {\n                    lst.add(lst1.get(i));\n                    lst2.remove(j);\n                    lst1.remove(i);\n                    break;\n                }\n            }\n        }\n        return lst;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> res = new ArrayList<>();\n        int len1 = lst1.size();\n        int len2 = lst2.size();\n        int i = 0;\n        int j = 0;\n        while (i < len1 && j < len2) {\n            if (lst1.get(i).equals(lst2.get(j))) {\n                res.add(lst1.get(i));\n                i++;\n                j++;\n            } else if (lst1.get(i).compareTo(lst2.get(j)) < 0) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> res = new ArrayList<>();\n        if (lst1 == null || lst1.size() == 0 || lst2 == null || lst2.size() == 0) {\n            return res;\n        }\n\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < lst1.size(); i++) {\n            map.put(lst1.get(i), i);\n        }\n\n        for (int i = 0; i < lst2.size(); i++) {\n            String key = lst2.get(i);\n            if (map.containsKey(key)) {\n                int index = map.get(key);\n                String temp = lst1.get(index);\n                lst1.set(index, lst1.get(i));\n                lst1.set(i, temp);\n\n                temp = lst2.get(index);\n                lst2.set(index, lst2.get(i));\n                lst2.set(i, temp);\n\n                List<String> tempRes = totalMatch(lst1, lst2);\n                if (tempRes.size() > 0) {\n                    res.addAll(tempRes);\n                }\n\n                lst1.set(index, temp);\n                lst1.set(i, temp);\n            }\n        }\n\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> result = new ArrayList<>();\n        for(String s1 : lst1) {\n            for(String s2 : lst2) {\n                if(s1.equals(s2)) {\n                    result.add(s1);\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> res = new ArrayList<>();\n        Map<String, Integer> map = new HashMap<>();\n        for (String word : lst1) {\n            map.put(word, map.getOrDefault(word, 0) + 1);\n        }\n        for (String word : lst2) {\n            if (map.containsKey(word)) {\n                map.put(word, map.get(word) - 1);\n                if (map.get(word) == 0) {\n                    res.add(word);\n                }\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        int l1 = 0;\n        int l2 = 0;\n        int l3 = 0;\n        int l4 = 0;\n        int l5 = 0;\n        int l6 = 0;\n        int l7 = 0;\n        int l8 = 0;\n        int l9 = 0;\n        int l10 = 0;\n        int l11 = 0;\n        int l12 = 0;\n        int l13 = 0;\n        int l14 = 0;\n        int l15 = 0;\n        int l16 = 0;\n        int l17 = 0;\n        int l18 = 0;\n        int l19 = 0;\n        int l20 = 0;\n        int l21 = 0;\n        int l22 = 0;\n        int l23 = 0;\n        int l24 = 0;\n        int l25 = 0;\n        int l26 = 0;\n        int l27 = 0;\n        int l28 = 0;\n        int l29 = 0;\n        int l30 = 0;\n        int l31 = 0;\n        int l32 = 0;\n        int l33 = 0;\n        int l34 = 0;\n        int l35 = 0;\n        int l36 = 0;\n        int l37 = 0;\n        int l38 = 0;\n        int l39 = 0;\n        int l40 = 0;\n        int l41 = 0;\n        int l42 = 0;\n        int l43 = 0;\n        int l44 = 0;\n        int l45 = 0;\n        int l46 = 0;\n        int l47 = 0;\n        int l48 = 0;\n        int l49 = 0;\n        int l50 = 0;\n        int l51 = 0;\n        int l52 = 0;\n        int l53 = 0;\n        int l54 = 0;\n        int l55 = 0;\n        int l56 = 0;\n        int l57 = 0;\n        int l58 = 0;\n        int l59 = 0;\n        int l60 = 0;\n        int l61 = 0;\n        int l62 = 0;\n        int l63 = 0;\n        int l64 = 0;\n        int l65 = 0;\n        int l66 = 0;\n        int l67 = 0;\n        int l68 = 0;\n        int l69 = 0;\n        int l70 = 0;\n        int l71 = 0;\n        int l72 = 0;\n        int l73 = 0;\n        int l74 = 0;\n        int l75 = 0;\n        int l76 = 0;\n        int l77 = 0;\n        int l78 = 0;\n        int l79 = 0;\n        int l80 = 0;\n        int l81 = 0;\n        int l82 = 0;\n        int l83 = 0;\n        int l84 = 0;\n        int l85 = 0;\n        int l86 = 0;\n        int l87 = 0;\n        int l88 = 0;\n        int l89 = 0;\n        int l90 = 0;\n        int l91 = 0;\n        int l92 = 0;\n        int l93 = 0;\n        int l94 = 0;\n        int l95 = 0;\n        int l96 = 0;\n        int l97 = 0;\n        int l98 = 0;\n        int l99 = 0;\n        int l100 = 0;\n        int l101 = 0;\n        int l102 = 0;\n        int l103 = 0;\n        int l104 = 0;\n        int l105 = 0;\n        int l106 = 0;\n        int l107 = 0;\n        int l108 = 0;\n        int l109 = 0;\n        int l110 = 0;\n        int l111 = 0;\n        int l112 = 0;\n        int l113 = 0;\n        int l114 = 0;\n        int l115 = 0;\n        int l116 = 0;\n        int l117 = 0;\n        int l118 = 0;\n        int l119 = 0;\n        int l120 = 0;\n        int l121 = 0;\n        int l122 = 0;\n        int l123 = 0;\n        int l124 = 0;\n        int l125 = 0;\n        int l126 = 0;\n        int l127 = 0;\n        int l128 = 0;\n        int l129 = 0;\n        int l130 = 0;\n        int l131 = 0;\n        int l132 = 0;\n        int l133 = 0;\n        int l134 = 0;\n        int l135 = 0;\n        int l136 = 0;\n        int l137 = 0;\n        int l138 = 0;\n        int l139 = 0;\n        int l140 = 0;\n        int l141 = 0;\n        int l142 = 0;\n        int l143 = 0;\n        int l144 = 0;\n        int l145 = 0;\n        int l146 = 0;\n        int l147 = 0;\n        int l148 = 0;\n        int l149 = 0;\n        int l150 = 0;\n        int l151 = 0;\n        int l152 = 0;\n        int l153 = 0;\n        int l154 = 0;\n        int l155 = 0;\n        int l156 = 0;\n        int l157 = 0;\n        int l158 = 0;\n        int l159 = 0;\n        int l160 = 0;\n        int l161 = 0;\n        int l162 = 0;\n        int l163 = 0;\n        int l164 = 0;\n        int l165 = 0;\n        int l166 = 0;\n        int l167 = 0;\n        int l168 = 0;\n        int l169 = 0;\n        int l170 = 0;\n        int l171 = 0;\n        int l172 = 0;\n        int l173 = 0;\n        int l174 = 0;\n        int l175 = 0;\n        int l176 = 0;\n        int l177 = 0;\n        int l178 = 0;\n        int l179 = 0;\n        int l180 = 0;\n        int l181 = 0;\n        int l182 = 0;\n        int l183 = 0;\n        int l184 = 0;\n        int l185 = 0;\n        int l186 = 0;\n        int l187 = 0;\n        int l188 = 0;\n        int l189 = 0;\n        int l190 = 0;\n        int l191 = 0;\n        int l192 = 0;\n        int l193 = 0;\n        int l194 = 0;\n        int l195 = 0;\n        int l196 = 0;\n        int l197 = 0;\n        int l198 = 0;\n        int l199 = 0;\n        int l200 = 0;"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> result = new ArrayList<>();\n        for (String s : lst1) {\n            for (String t : lst2) {\n                if (s.equals(t)) {\n                    result.add(s);\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        int l1 = 0;\n        int l2 = 0;\n        int l3 = 0;\n        int l4 = 0;\n        int l5 = 0;\n        int l6 = 0;\n        int l7 = 0;\n        int l8 = 0;\n        int l9 = 0;\n        int l10 = 0;\n        int l11 = 0;\n        int l12 = 0;\n        int l13 = 0;\n        int l14 = 0;\n        int l15 = 0;\n        int l16 = 0;\n        int l17 = 0;\n        int l18 = 0;\n        int l19 = 0;\n        int l20 = 0;\n        int l21 = 0;\n        int l22 = 0;\n        int l23 = 0;\n        int l24 = 0;\n        int l25 = 0;\n        int l26 = 0;\n        int l27 = 0;\n        int l28 = 0;\n        int l29 = 0;\n        int l30 = 0;\n        int l31 = 0;\n        int l32 = 0;\n        int l33 = 0;\n        int l34 = 0;\n        int l35 = 0;\n        int l36 = 0;\n        int l37 = 0;\n        int l38 = 0;\n        int l39 = 0;\n        int l40 = 0;\n        int l41 = 0;\n        int l42 = 0;\n        int l43 = 0;\n        int l44 = 0;\n        int l45 = 0;\n        int l46 = 0;\n        int l47 = 0;\n        int l48 = 0;\n        int l49 = 0;\n        int l50 = 0;\n        int l51 = 0;\n        int l52 = 0;\n        int l53 = 0;\n        int l54 = 0;\n        int l55 = 0;\n        int l56 = 0;\n        int l57 = 0;\n        int l58 = 0;\n        int l59 = 0;\n        int l60 = 0;\n        int l61 = 0;\n        int l62 = 0;\n        int l63 = 0;\n        int l64 = 0;\n        int l65 = 0;\n        int l66 = 0;\n        int l67 = 0;\n        int l68 = 0;\n        int l69 = 0;\n        int l70 = 0;\n        int l71 = 0;\n        int l72 = 0;\n        int l73 = 0;\n        int l74 = 0;\n        int l75 = 0;\n        int l76 = 0;\n        int l77 = 0;\n        int l78 = 0;\n        int l79 = 0;\n        int l80 = 0;\n        int l81 = 0;\n        int l82 = 0;\n        int l83 = 0;\n        int l84 = 0;\n        int l85 = 0;\n        int l86 = 0;\n        int l87 = 0;\n        int l88 = 0;\n        int l89 = 0;\n        int l90 = 0;\n        int l91 = 0;\n        int l92 = 0;\n        int l93 = 0;\n        int l94 = 0;\n        int l95 = 0;\n        int l96 = 0;\n        int l97 = 0;\n        int l98 = 0;\n        int l99 = 0;\n        int l100 = 0;\n        int l101 = 0;\n        int l102 = 0;\n        int l103 = 0;\n        int l104 = 0;\n        int l105 = 0;\n        int l106 = 0;\n        int l107 = 0;\n        int l108 = 0;\n        int l109 = 0;\n        int l110 = 0;\n        int l111 = 0;\n        int l112 = 0;\n        int l113 = 0;\n        int l114 = 0;\n        int l115 = 0;\n        int l116 = 0;\n        int l117 = 0;\n        int l118 = 0;\n        int l119 = 0;\n        int l120 = 0;\n        int l121 = 0;\n        int l122 = 0;\n        int l123 = 0;\n        int l124 = 0;\n        int l125 = 0;\n        int l126 = 0;\n        int l127 = 0;\n        int l128 = 0;\n        int l129 = 0;\n        int l130 = 0;\n        int l131 = 0;\n        int l132 = 0;\n        int l133 = 0;\n        int l134 = 0;\n        int l135 = 0;\n        int l136 = 0;\n        int l137 = 0;\n        int l138 = 0;\n        int l139 = 0;\n        int l140 = 0;\n        int l141 = 0;\n        int l142 = 0;\n        int l143 = 0;\n        int l144 = 0;\n        int l145 = 0;\n        int l146 = 0;\n        int l147 = 0;\n        int l148 = 0;\n        int l149 = 0;\n        int l150 = 0;\n        int l151 = 0;\n        int l152 = 0;\n        int l153 = 0;\n        int l154 = 0;\n        int l155 = 0;\n        int l156 = 0;\n        int l157 = 0;\n        int l158 = 0;\n        int l159 = 0;\n        int l160 = 0;\n        int l161 = 0;\n        int l162 = 0;\n        int l163 = 0;\n        int l164 = 0;\n        int l165 = 0;\n        int l166 = 0;\n        int l167 = 0;\n        int l168 = 0;\n        int l169 = 0;\n        int l170 = 0;\n        int l171 = 0;\n        int l172 = 0;\n        int l173 = 0;\n        int l174 = 0;\n        int l175 = 0;\n        int l"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> ans = new ArrayList<>();\n        int i = 0, j = 0;\n        while (i < lst1.size() && j < lst2.size()) {\n            if (lst1.get(i).equals(lst2.get(j))) {\n                ans.add(lst1.get(i));\n                i++;\n                j++;\n            } else if (lst1.get(i).compareTo(lst2.get(j)) < 0) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        while (i < lst1.size()) {\n            ans.add(lst1.get(i));\n            i++;\n        }\n        while (j < lst2.size()) {\n            ans.add(lst2.get(j));\n            j++;\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        int l1 = 0;\n        int l2 = 0;\n        int l3 = 0;\n        int l4 = 0;\n        int l5 = 0;\n        int l6 = 0;\n        int l7 = 0;\n        int l8 = 0;\n        int l9 = 0;\n        int l10 = 0;\n        int l11 = 0;\n        int l12 = 0;\n        int l13 = 0;\n        int l14 = 0;\n        int l15 = 0;\n        int l16 = 0;\n        int l17 = 0;\n        int l18 = 0;\n        int l19 = 0;\n        int l20 = 0;\n        int l21 = 0;\n        int l22 = 0;\n        int l23 = 0;\n        int l24 = 0;\n        int l25 = 0;\n        int l26 = 0;\n        int l27 = 0;\n        int l28 = 0;\n        int l29 = 0;\n        int l30 = 0;\n        int l31 = 0;\n        int l32 = 0;\n        int l33 = 0;\n        int l34 = 0;\n        int l35 = 0;\n        int l36 = 0;\n        int l37 = 0;\n        int l38 = 0;\n        int l39 = 0;\n        int l40 = 0;\n        int l41 = 0;\n        int l42 = 0;\n        int l43 = 0;\n        int l44 = 0;\n        int l45 = 0;\n        int l46 = 0;\n        int l47 = 0;\n        int l48 = 0;\n        int l49 = 0;\n        int l50 = 0;\n        int l51 = 0;\n        int l52 = 0;\n        int l53 = 0;\n        int l54 = 0;\n        int l55 = 0;\n        int l56 = 0;\n        int l57 = 0;\n        int l58 = 0;\n        int l59 = 0;\n        int l60 = 0;\n        int l61 = 0;\n        int l62 = 0;\n        int l63 = 0;\n        int l64 = 0;\n        int l65 = 0;\n        int l66 = 0;\n        int l67 = 0;\n        int l68 = 0;\n        int l69 = 0;\n        int l70 = 0;\n        int l71 = 0;\n        int l72 = 0;\n        int l73 = 0;\n        int l74 = 0;\n        int l75 = 0;\n        int l76 = 0;\n        int l77 = 0;\n        int l78 = 0;\n        int l79 = 0;\n        int l80 = 0;\n        int l81 = 0;\n        int l82 = 0;\n        int l83 = 0;\n        int l84 = 0;\n        int l85 = 0;\n        int l86 = 0;\n        int l87 = 0;\n        int l88 = 0;\n        int l89 = 0;\n        int l90 = 0;\n        int l91 = 0;\n        int l92 = 0;\n        int l93 = 0;\n        int l94 = 0;\n        int l95 = 0;\n        int l96 = 0;\n        int l97 = 0;\n        int l98 = 0;\n        int l99 = 0;\n        int l100 = 0;\n        int l101 = 0;\n        int l102 = 0;\n        int l103 = 0;\n        int l104 = 0;\n        int l105 = 0;\n        int l106 = 0;\n        int l107 = 0;\n        int l108 = 0;\n        int l109 = 0;\n        int l110 = 0;\n        int l111 = 0;\n        int l112 = 0;\n        int l113 = 0;\n        int l114 = 0;\n        int l115 = 0;\n        int l116 = 0;\n        int l117 = 0;\n        int l118 = 0;\n        int l119 = 0;\n        int l120 = 0;\n        int l121 = 0;\n        int l122 = 0;\n        int l123 = 0;\n        int l124 = 0;\n        int l125 = 0;\n        int l126 = 0;\n        int l127 = 0;\n        int l128 = 0;\n        int l129 = 0;\n        int l130 = 0;\n        int l131 = 0;\n        int l132 = 0;\n        int l133 = 0;\n        int l134 = 0;\n        int l135 = 0;\n        int l136 = 0;\n        int l137 = 0;\n        int l138 = 0;\n        int l139 = 0;\n        int l140 = 0;\n        int l141 = 0;\n        int l142 = 0;\n        int l143 = 0;\n        int l144 = 0;\n        int l145 = 0;\n        int l146 = 0;\n        int l147 = 0;\n        int l148 = 0;\n        int l149 = 0;\n        int l150 = 0;\n        int l151 = 0;\n        int l152 = 0;\n        int l153 = 0;\n        int l154 = 0;\n        int l155 = 0;\n        int l156 = 0;\n        int l157 = 0;\n        int l158 = 0;\n        int l159 = 0;\n        int l160 = 0;\n        int l161 = 0;\n        int l162 = 0;\n        int l163 = 0;\n        int l164 = 0;\n        int l165 = 0;\n        int l166 = 0;\n        int l167 = 0;\n        int l168 = 0;\n        int l169 = 0;\n        int l170 = 0;\n        int l171 = 0;\n        int l172 = 0;\n        int l173 = 0;\n        int l174 = 0;\n        int l175 = 0;\n        int l176 = 0;\n        int l177 = 0;\n        int l178 = 0;\n        int l179 = 0;\n        int l180 = 0;\n        int l181 = 0;\n        int l182 = 0;\n        int l183 = 0;\n        int l184 = 0;\n        int l185 = 0;\n        int l186 = 0;\n        int l187 = 0;\n        int l188 = 0;\n        int l189 = 0;\n        int l190 = 0;\n        int l191 = 0;\n        int l192 = 0;\n        int l193 = 0;\n        int l194 = 0;\n        int l195 = 0;\n        int l196 = 0;\n        int l197 = 0;\n        int l198 = 0;\n        int l199 = 0;\n        int l200 = 0;\n        int l20"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        int l1 = 0;\n        int l2 = 0;\n        int l3 = 0;\n        int l4 = 0;\n        int l5 = 0;\n        int l6 = 0;\n        int l7 = 0;\n        int l8 = 0;\n        int l9 = 0;\n        int l10 = 0;\n        int l11 = 0;\n        int l12 = 0;\n        int l13 = 0;\n        int l14 = 0;\n        int l15 = 0;\n        int l16 = 0;\n        int l17 = 0;\n        int l18 = 0;\n        int l19 = 0;\n        int l20 = 0;\n        int l21 = 0;\n        int l22 = 0;\n        int l23 = 0;\n        int l24 = 0;\n        int l25 = 0;\n        int l26 = 0;\n        int l27 = 0;\n        int l28 = 0;\n        int l29 = 0;\n        int l30 = 0;\n        int l31 = 0;\n        int l32 = 0;\n        int l33 = 0;\n        int l34 = 0;\n        int l35 = 0;\n        int l36 = 0;\n        int l37 = 0;\n        int l38 = 0;\n        int l39 = 0;\n        int l40 = 0;\n        int l41 = 0;\n        int l42 = 0;\n        int l43 = 0;\n        int l44 = 0;\n        int l45 = 0;\n        int l46 = 0;\n        int l47 = 0;\n        int l48 = 0;\n        int l49 = 0;\n        int l50 = 0;\n        int l51 = 0;\n        int l52 = 0;\n        int l53 = 0;\n        int l54 = 0;\n        int l55 = 0;\n        int l56 = 0;\n        int l57 = 0;\n        int l58 = 0;\n        int l59 = 0;\n        int l60 = 0;\n        int l61 = 0;\n        int l62 = 0;\n        int l63 = 0;\n        int l64 = 0;\n        int l65 = 0;\n        int l66 = 0;\n        int l67 = 0;\n        int l68 = 0;\n        int l69 = 0;\n        int l70 = 0;\n        int l71 = 0;\n        int l72 = 0;\n        int l73 = 0;\n        int l74 = 0;\n        int l75 = 0;\n        int l76 = 0;\n        int l77 = 0;\n        int l78 = 0;\n        int l79 = 0;\n        int l80 = 0;\n        int l81 = 0;\n        int l82 = 0;\n        int l83 = 0;\n        int l84 = 0;\n        int l85 = 0;\n        int l86 = 0;\n        int l87 = 0;\n        int l88 = 0;\n        int l89 = 0;\n        int l90 = 0;\n        int l91 = 0;\n        int l92 = 0;\n        int l93 = 0;\n        int l94 = 0;\n        int l95 = 0;\n        int l96 = 0;\n        int l97 = 0;\n        int l98 = 0;\n        int l99 = 0;\n        int l100 = 0;\n        int l101 = 0;\n        int l102 = 0;\n        int l103 = 0;\n        int l104 = 0;\n        int l105 = 0;\n        int l106 = 0;\n        int l107 = 0;\n        int l108 = 0;\n        int l109 = 0;\n        int l110 = 0;\n        int l111 = 0;\n        int l112 = 0;\n        int l113 = 0;\n        int l114 = 0;\n        int l115 = 0;\n        int l116 = 0;\n        int l117 = 0;\n        int l118 = 0;\n        int l119 = 0;\n        int l120 = 0;\n        int l121 = 0;\n        int l122 = 0;\n        int l123 = 0;\n        int l124 = 0;\n        int l125 = 0;\n        int l126 = 0;\n        int l127 = 0;\n        int l128 = 0;\n        int l129 = 0;\n        int l130 = 0;\n        int l131 = 0;\n        int l132 = 0;\n        int l133 = 0;\n        int l134 = 0;\n        int l135 = 0;\n        int l136 = 0;\n        int l137 = 0;\n        int l138 = 0;\n        int l139 = 0;\n        int l140 = 0;\n        int l141 = 0;\n        int l142 = 0;\n        int l143 = 0;\n        int l144 = 0;\n        int l145 = 0;\n        int l146 = 0;\n        int l147 = 0;\n        int l148 = 0;\n        int l149 = 0;\n        int l150 = 0;\n        int l151 = 0;\n        int l152 = 0;\n        int l153 = 0;\n        int l154 = 0;\n        int l155 = 0;\n        int l156 = 0;\n        int l157 = 0;\n        int l158 = 0;\n        int l159 = 0;\n        int l160 = 0;\n        int l161 = 0;\n        int l162 = 0;\n        int l163 = 0;\n        int l164 = 0;\n        int l165 = 0;\n        int l166 = 0;\n        int l167 = 0;\n        int l168 = 0;\n        int l169 = 0;\n        int l170 = 0;\n        int l171 = 0;\n        int l172 = 0;\n        int l173 = 0;\n        int l174 = 0;\n        int l175 = 0;\n        int l176 = 0;\n        int l177 = 0;\n        int l178 = 0;\n        int l179 = 0;\n        int l180 = 0;\n        int l181 = 0;\n        int l182 = 0;\n        int l183 = 0;\n        int l184 = 0;\n        int l185 = 0;\n        int l186 = 0;\n        int l187 = 0;\n        int l188 = 0;\n        int l189 = 0;\n        int l190 = 0;\n        int l191 = 0;\n        int l192 = 0;\n        int l193 = 0;\n        int l194 = 0;\n        int l195 = 0;\n        int l196 = 0;\n        int l197 = 0;\n        int l198 = 0;\n        int l199 = 0;\n        int l200 = 0;\n        int l20"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> lst = new ArrayList<>();\n        for (int i = 0; i < lst1.size(); i++) {\n            for (int j = 0; j < lst2.size(); j++) {\n                if (lst1.get(i).equals(lst2.get(j))) {\n                    lst.add(lst1.get(i));\n                    lst2.remove(j);\n                    lst2.remove(j);\n                    break;\n                }\n            }\n        }\n        return lst;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> result = new ArrayList<String>();\n        if (lst1.size() != lst2.size()) {\n            return result;\n        }\n        Map<String, Integer> map = new HashMap<String, Integer>();\n        for (int i = 0; i < lst1.size(); i++) {\n            map.put(lst1.get(i), i);\n        }\n        for (int i = 0; i < lst2.size(); i++) {\n            String str1 = lst1.get(i);\n            String str2 = lst2.get(i);\n            int index1 = map.get(str1);\n            int index2 = map.get(str2);\n            if (index1 == index2) {\n                result.add(str1);\n            } else if (index1 < index2) {\n                result.add(str1);\n                result.add(str2);\n            } else {\n                result.add(str2);\n                result.add(str1);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if (a < 2)\n            return false;\n        if (a == 2)\n            return true;\n        if (a % 2 == 0)\n            return false;\n        int n = (int) Math.sqrt(a);\n        for (int i = 3; i <= n; i += 2) {\n            if (a % i == 0)\n                return false;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        int n = (int)Math.sqrt(a);\n        for(int i = 2; i <= n; i++) {\n            if(a % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if(a == 1)\n            return false;\n        int n = (int)Math.sqrt(a);\n        for(int i = 2; i <= n; i++)\n            if(a % i == 0)\n                return false;\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if (a == 1)\n            return false;\n        if (a % 2 == 0)\n            return false;\n        int n = (int) Math.sqrt(a);\n        for (int i = 3; i <= n; i += 2) {\n            if (a % i == 0)\n                return false;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if (a == 1) return true;\n        if (a % 2 == 0) return false;\n        int n = (int) Math.sqrt(a);\n        for (int i = 3; i <= n; i += 2) {\n            if (a % i == 0) return false;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        int n = a;\n        int i = 0;\n        while (n > 1) {\n            if (n % 2 == 0) {\n                n /= 2;\n            } else {\n                n = 3 * n + 1;\n            }\n            i++;\n        }\n        return i == nums.length;\n    }\n    public int maxProduct(int[] nums) {\n        int max = Integer.MIN_VALUE;\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < nums.length; i++) {\n            if (nums[i] > max) {\n                max = nums[i];\n            }\n            if (nums[i] < min) {\n                min = nums[i];\n            }\n        }\n        int maxProduct = 1;\n        for (int i = 0; i < nums.length; i++) {\n            maxProduct *= Math.min(nums[i], max);\n        }\n        return maxProduct;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if (a == 1)\n            return true;\n        if (a % 2 == 0)\n            return false;\n        int n = (int) Math.sqrt(a);\n        for (int i = 3; i <= n; i += 2) {\n            if (a % i == 0)\n                return false;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if(a == 1)\n            return false;\n        int n = (int) Math.sqrt(a);\n        for(int i = 2; i <= n; i++) {\n            if(a % i == 0)\n                return false;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        int n = a;\n        int i = 2;\n        while (i <= n) {\n            if (n % i == 0) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        int a = 1000000000;\n        System.out.println(new Solution().isMultiplyPrime(a));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        int b = 0;\n        while(a != 1) {\n            b += a % 2;\n            a /= 2;\n        }\n        return b == 0;\n    }\n\n    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {\n        List<List<Integer>> result = new ArrayList<>();\n        if(root == null) return result;\n        Queue<TreeNode> q = new LinkedList<>();\n        q.offer(root);\n        while(!q.isEmpty()) {\n            int size = q.size();\n            List<Integer> level = new ArrayList<>();\n            for(int i = 0; i < size; i++) {\n                TreeNode node = q.poll();\n                if(node.left != null) q.offer(node.left);\n                if(node.right != null) q.offer(node.right);\n                level.add(node.val);\n            }\n            if(isMultiplyPrime(level.size())) {\n                result.add(level);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        int n = (int) Math.sqrt(a);\n        for (int i = 2; i <= n; i++) {\n            if (a % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if (a == 1) {\n            return false;\n        }\n        int n = (int) Math.sqrt(a);\n        for (int i = 2; i <= n; i++) {\n            if (a % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        int n = (int) Math.sqrt(a);\n        for (int i = 2; i <= n; i++) {\n            if (a % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if (a == 1) {\n            return false;\n        }\n        for (int i = 2; i <= a / 2; i++) {\n            if (a % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        int n = a;\n        int i = 2;\n        while(i*i <= n) {\n            if(n%i == 0) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if(a == 1)\n            return true;\n        if(a % 2 == 0)\n            return false;\n        int n = (int)Math.sqrt(a);\n        for(int i = 3; i <= n; i += 2) {\n            if(a % i == 0)\n                return false;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if(a == 1)\n            return true;\n        if(a % 2 == 0)\n            return false;\n        int n = (int) Math.sqrt(a);\n        for(int i = 3; i <= n; i += 2) {\n            if(a % i == 0)\n                return false;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if (a == 1)\n            return true;\n        if (a % 2 == 0)\n            return false;\n        int i = 3;\n        while (i * i <= a) {\n            if (a % i == 0)\n                return false;\n            i += 2;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        int m = in.nextInt();\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++)\n            arr[i] = in.nextInt();\n        boolean[] isPrime = new boolean[n];\n        for (int i = 0; i < n; i++)\n            isPrime[i] = true;\n        for (int i = 0; i < m; i++) {\n            int a = in.nextInt();\n            int b = in.nextInt();\n            if (isMultiplyPrime(a) && isMultiplyPrime(b)) {\n                System.out.println(\"Yes\");\n            } else {\n                System.out.println(\"No\");\n            }\n        }\n        in.close();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        int n = (int) Math.sqrt(a);\n        for (int i = 2; i <= n; i++) {\n            if (a % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        class IsPrime {\n            \n                \n\n```\n\n### 2. Write a program to find the longest common subsequence of two strings.\n```java\nclass Solution {\n    public String longestCommonSubsequence(String s1, String s2) {\n        class LCS {\n            \n                \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String longestCommonSubsequence(String s1, String s2) {\n        class LCS {\n            \n                \n\n```\n\n### 3. Write a program to find the longest common subsequence of three strings.\n```java\nclass Solution {\n    public String longestCommonSubsequence(String s1, String s2, String s3) {\n        class LCS {\n            \n                \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String longestCommonSubsequence(String s1, String s2, String s3) {\n        class LCS {\n            \n                \n\n```\n\n### 4. Write a program to find the longest common subsequence of four strings.\n```java\nclass Solution {\n    public String longestCommonSubsequence(String s1, String s2, String s3, String s4) {\n        class LCS {\n            \n                \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String longestCommonSubsequence(String s1, String s2, String s3, String s4) {\n        class LCS {\n            \n                \n\n```\n\n### 5. Write a program to find the longest common subsequence of five strings.\n```java\nclass Solution {\n    public String longestCommonSubsequence(String s1, String s2, String s3, String s4, String s5) {\n        class LCS {\n            \n                \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String longestCommonSubsequence(String s1, String s2, String s3, String s4, String s5) {\n        class LCS {\n            \n                \n\n```\n\n### 6. Write a program to find the longest common subsequence of six strings.\n```java\nclass Solution {\n    public String longestCommonSubsequence(String s1, String s2, String s3, String s4, String s5, String s6) {\n        class LCS {\n            \n                \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String longestCommonSubsequence(String s1, String s2, String s3, String s4, String s5, String s6) {\n        class LCS {\n            \n                \n\n```\n\n### 7. Write a program to find the longest common subsequence of seven strings.\n```java\nclass Solution {\n    public String longestCommonSubsequence(String s1, String s2, String s3, String s4, String s5, String s6, String s7) {\n        class LCS {\n            \n                \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String longestCommonSubsequence(String s1, String s2, String s3, String s4, String s5, String s6, String s7) {\n        class LCS {\n            \n                \n\n```\n\n### 8. Write a program to find the longest common subsequence of eight strings.\n```java\nclass Solution {\n    public String longestCommonSubsequence(String s1, String s2, String s3, String s4, String s5, String s6, String s7, String s8) {\n        class LCS {\n            \n                \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String longestCommonSubsequence(String s1, String s2, String s3, String s4, String s5, String s6, String s7, String s8) {\n        class LCS {\n            \n                \n\n```\n\n### 9. Write a program to find the longest common subsequence of nine strings.\n```java\nclass Solution {\n    public String longestCommonSubsequence(String s1, String s2, String s3, String s4, String s5, String s6, String s7, String s8, String s9) {\n        class LCS {\n            \n                \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String longestCommonSubsequence(String s1, String s2, String s3, String s4, String s5, String s6, String s7, String s8, String s9) {\n        class LCS {\n            \n                \n\n```\n\n### 10. Write a program to find the longest common subsequence of ten strings.\n```java\nclass Solution {\n    public String longestCommonSubsequence(String s1, String s2, String s3, String s4, String s5, String s6, String s7, String s8, String s9, String s10) {\n        class LCS {\n            \n                \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String longestCommonSubsequence(String s1, String s2, String s3, String s4, String s5, String s6, String s7, String s8, String s9, String s10) {\n        class LCS {\n            \n                \n\n```\n\n### 11. Write a program to find the longest common subsequence of eleven strings.\n```java\nclass Solution {\n    public String longestCommonSubsequence(String s1, String s2, String s3, String s4, String s5, String s6, String s7, String s8, String s9, String s10, String s11) {\n        class LCS {\n            \n                \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String longestCommonSubsequence(String s1, String s2, String s3, String s4, String s5, String s6, String s7, String s8, String s9, String s10, String s11) {\n        class LCS {\n            \n                \n\n```\n\n### 12. Write a program to find the longest common subsequence of twelve strings.\n```java\nclass Solution {\n    public String longestCommonSubsequence(String s1, String s2, String s3, String s4, String s5, String s6, String s7, String s8, String s9, String s10, String s11, String s12) {\n        class LCS {\n            \n                \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String longestCommonSubsequence(String s1, String s2, String s3, String s4, String s5, String s6, String s7, String s8, String s9, String s10, String s11, String s12) {\n        class LCS {\n            \n                \n\n```\n\n### 13. Write a program to find the longest common subsequence of thirteen strings.\n```java\nclass Solution {\n    public String longestCommonSubsequence(String s1, String s2, String s3, String s4, String s5, String s6, String s7, String s8, String s9, String s10, String s11, String s12, String s13) {\n        class LCS {\n            \n                \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String longestCommonSubsequence(String s1, String s2, String s3, String s4, String s5, String s6, String s7, String s8, String s9, String s10, String s11, String s12, String s13) {\n        class LCS {\n            \n                \n\n```\n\n### 14. Write a program to find the longest common subsequence of fourteen strings.\n```java\nclass Solution {\n    public String longestCommonSubsequence(String s1, String s2, String s3, String s4, String s5, String s6, String s7, String s8, String s9, String s10, String s11, String s12, String s13, String s14) {\n        class LCS {\n            \n                \n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String longestCommonSubsequence(String s1, String s2, String s3, String s4, String s5, String s6, String s7, String s8, String s9, String s10, String s11, String s12, String s13, String s14) {\n        class LCS {\n            \n                \n\n```\n\n### 15. Write a program to find the longest common sub"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 1) {\n            return x == 1;\n        }\n        int power = 1;\n        while (power < x) {\n            power = power * n;\n        }\n        return power == x;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 1) {\n            return x == 1;\n        }\n        int power = 1;\n        while (power < x) {\n            power = power * n;\n        }\n        return power == x;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if(n == 0)\n            return true;\n        if(n == 1)\n            return x == 1;\n        if(n % 2 == 0)\n            return isSimplePower(x * x, n / 2);\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 0)\n            return true;\n        if (n == 1)\n            return x == 1;\n        if (n == 2)\n            return x == 1 || x == 2;\n        if (n == 3)\n            return x == 1 || x == 2 || x == 3;\n        if (n == 4)\n            return x == 1 || x == 2 || x == 3 || x == 4;\n        if (n == 5)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5;\n        if (n == 6)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6;\n        if (n == 7)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7;\n        if (n == 8)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8;\n        if (n == 9)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9;\n        if (n == 10)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10;\n        if (n == 11)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11;\n        if (n == 12)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12;\n        if (n == 13)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13;\n        if (n == 14)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14;\n        if (n == 15)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15;\n        if (n == 16)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16;\n        if (n == 17)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17;\n        if (n == 18)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18;\n        if (n == 19)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19;\n        if (n == 20)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20;\n        if (n == 21)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20 || x == 21;\n        if (n == 22)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20 || x == 21 || x == 22;\n        if (n == 23)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20 || x == 21 || x == 22 || x == 23;\n        if (n == 24)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20 || x == 21 || x == 22 || x == 23 || x == 24;\n        if (n == 25)\n            return x == 1 || x == 2 || x"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 0) return true;\n        if (n == 1) return x == 1;\n        if (n == 2) return x == 1 || x == 2;\n        if (n == 3) return x == 1 || x == 2 || x == 3;\n        if (n == 4) return x == 1 || x == 2 || x == 3 || x == 4;\n        if (n == 5) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5;\n        if (n == 6) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6;\n        if (n == 7) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7;\n        if (n == 8) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8;\n        if (n == 9) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9;\n        if (n == 10) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10;\n        if (n == 11) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11;\n        if (n == 12) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12;\n        if (n == 13) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13;\n        if (n == 14) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14;\n        if (n == 15) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15;\n        if (n == 16) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16;\n        if (n == 17) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17;\n        if (n == 18) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18;\n        if (n == 19) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19;\n        if (n == 20) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20;\n        if (n == 21) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20 || x == 21;\n        if (n == 22) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20 || x == 21 || x == 22;\n        if (n == 23) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20 || x == 21 || x == 22 || x == 23;\n        if (n == 24) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20 || x == 21 || x == 22 || x == 23 || x == 24;\n        if (n == 25) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20 || x == 21 || x == 22 || x"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 1) {\n            return x == 1;\n        }\n        int power = 1;\n        while (power < x) {\n            power = power * n;\n        }\n        return power == x;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 0) return true;\n        if (n == 1) return x == 1;\n        if (n == 2) return x == 1 || x == 2;\n        if (n == 3) return x == 1 || x == 2 || x == 3;\n        if (n == 4) return x == 1 || x == 2 || x == 3 || x == 4;\n        if (n == 5) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5;\n        if (n == 6) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6;\n        if (n == 7) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7;\n        if (n == 8) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8;\n        if (n == 9) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9;\n        if (n == 10) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10;\n        if (n == 11) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11;\n        if (n == 12) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12;\n        if (n == 13) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13;\n        if (n == 14) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14;\n        if (n == 15) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15;\n        if (n == 16) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16;\n        if (n == 17) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17;\n        if (n == 18) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18;\n        if (n == 19) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19;\n        if (n == 20) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20;\n        if (n == 21) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20 || x == 21;\n        if (n == 22) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20 || x == 21 || x == 22;\n        if (n == 23) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20 || x == 21 || x == 22 || x == 23;\n        if (n == 24) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20 || x == 21 || x == 22 || x == 23 || x == 24;\n        if (n == 25) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20 || x == 21 || x == 22 || x"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 1) {\n            return x == 1;\n        }\n        int power = 1;\n        while (power < x) {\n            power = power * n;\n        }\n        return power == x;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 1) {\n            return x == 1;\n        }\n        int power = 1;\n        while (power < x) {\n            power = power * n;\n        }\n        return power == x;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 1) {\n            return x == 1;\n        }\n        int power = 1;\n        while (power < x) {\n            power = power * n;\n        }\n        return power == x;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 0)\n            return true;\n        if (n == 1)\n            return x == 1;\n        if (n % 2 == 0)\n            return isSimplePower(x * x, n / 2);\n        else\n            return isSimplePower(x * x, n - 1);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if(n == 0) return true;\n        if(n == 1) return x == 1;\n        if(n == 2) return x == 1 || x == 2;\n        if(n % 2 == 0) return isSimplePower(x, n/2) && x == 1;\n        return isSimplePower(x, n/2) && isSimplePower(x, n-1);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 0) return true;\n        if (n == 1) return x == 1;\n        if (n == 2) return x == 1 || x == 2;\n        if (n % 2 == 0) {\n            return isSimplePower(x, n / 2) && isSimplePower(x * x, n / 2);\n        }\n        return isSimplePower(x * x, n / 2) && isSimplePower(x, n - 1);\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int x = sc.nextInt();\n        System.out.println(isSimplePower(x, n));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 0) return true;\n        if (n == 1) return x == 1;\n        if (n % 2 == 0) {\n            return isSimplePower(x * x, n / 2);\n        } else {\n            return isSimplePower(x * x, n - 1) && x == 1;\n        }\n    }\n\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        int n = input.nextInt();\n        int x = input.nextInt();\n        System.out.println(isSimplePower(x, n));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 1) {\n            return x == 1;\n        }\n        int power = 1;\n        while (power < x) {\n            power = power * n;\n        }\n        return power == x;\n    }\n\n    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {\n        List<List<Integer>> res = new ArrayList<>();\n        if (root == null) {\n            return res;\n        }\n        Queue<TreeNode> q = new LinkedList<>();\n        q.offer(root);\n        while (!q.isEmpty()) {\n            int size = q.size();\n            List<Integer> level = new ArrayList<>();\n            for (int i = 0; i < size; i++) {\n                TreeNode node = q.poll();\n                level.add(node.val);\n                if (node.left != null) {\n                    q.offer(node.left);\n                }\n                if (node.right != null) {\n                    q.offer(node.right);\n                }\n            }\n            res.add(level);\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if(n == 0)\n            return true;\n        if(n == 1)\n            return x == 1;\n        if(n == 2)\n            return x == 2;\n        if(n % 2 == 0)\n            return isSimplePower(x, n/2);\n        else\n            return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 0) return true;\n        if (n == 1) return x == 1;\n        if (n == 2) return x == 1 || x == 2;\n        if (n == 3) return x == 1 || x == 2 || x == 3;\n        if (n == 4) return x == 1 || x == 2 || x == 3 || x == 4;\n        if (n == 5) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5;\n        if (n == 6) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6;\n        if (n == 7) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7;\n        if (n == 8) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8;\n        if (n == 9) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9;\n        if (n == 10) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10;\n        if (n == 11) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11;\n        if (n == 12) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12;\n        if (n == 13) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13;\n        if (n == 14) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14;\n        if (n == 15) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15;\n        if (n == 16) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16;\n        if (n == 17) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17;\n        if (n == 18) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18;\n        if (n == 19) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19;\n        if (n == 20) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20;\n        if (n == 21) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20 || x == 21;\n        if (n == 22) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20 || x == 21 || x == 22;\n        if (n == 23) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20 || x == 21 || x == 22 || x == 23;\n        if (n == 24"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 0) return true;\n        if (n == 1) return x == 1;\n        if (n % 2 == 1) {\n            return isSimplePower(x * x, n / 2);\n        }\n        return isSimplePower(x * x, n / 2) && x != 1;\n    }\n\n    public int[] rotate(int[] nums, int k) {\n        if (nums == null || nums.length == 0) return nums;\n        int n = nums.length;\n        int[] res = new int[n];\n        for (int i = 0; i < n; i++) {\n            res[i] = nums[i];\n        }\n        int index = 0;\n        for (int i = 0; i < n; i++) {\n            if (i >= k) {\n                res[index] = nums[i - k];\n                index++;\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 0) return true;\n        if (n == 1) return x == 1;\n        if (n == 2) return x == 1 || x == 2;\n        if (n == 3) return x == 1 || x == 2 || x == 3;\n        if (n == 4) return x == 1 || x == 2 || x == 3 || x == 4;\n        if (n == 5) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5;\n        if (n == 6) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6;\n        if (n == 7) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7;\n        if (n == 8) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8;\n        if (n == 9) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9;\n        if (n == 10) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10;\n        if (n == 11) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11;\n        if (n == 12) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12;\n        if (n == 13) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13;\n        if (n == 14) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14;\n        if (n == 15) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15;\n        if (n == 16) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16;\n        if (n == 17) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17;\n        if (n == 18) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18;\n        if (n == 19) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19;\n        if (n == 20) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20;\n        if (n == 21) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20 || x == 21;\n        if (n == 22) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20 || x == 21 || x == 22;\n        if (n == 23) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20 || x == 21 || x == 22 || x == 23;\n        if (n == 24) return x == 1 || x =="], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 0) return true;\n        if (n == 1) return x == 1;\n        if (n == 2) return x == 1 || x == 2;\n        if (n == 3) return x == 1 || x == 2 || x == 3;\n        if (n == 4) return x == 1 || x == 2 || x == 3 || x == 4;\n        if (n == 5) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5;\n        if (n == 6) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6;\n        if (n == 7) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7;\n        if (n == 8) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8;\n        if (n == 9) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9;\n        if (n == 10) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10;\n        if (n == 11) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11;\n        if (n == 12) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12;\n        if (n == 13) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13;\n        if (n == 14) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14;\n        if (n == 15) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15;\n        if (n == 16) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16;\n        if (n == 17) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17;\n        if (n == 18) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18;\n        if (n == 19) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19;\n        if (n == 20) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20;\n        if (n == 21) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20 || x == 21;\n        if (n == 22) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20 || x == 21 || x == 22;\n        if (n == 23) return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if(a==0)\n            return true;\n        if(a%2==0)\n            return iscube(a/2);\n        else\n            return iscube(a/2+1);\n    }\n    public boolean isSubsequence(String s1, String s2) {\n        if(s1.length()==0)\n            return true;\n        if(s1.length()==s2.length())\n            return true;\n        if(s1.charAt(0)!=s2.charAt(0))\n            return false;\n        if(iscube(s1.length()))\n            return isSubsequence(s1.substring(1),s2.substring(1));\n        else\n            return isSubsequence(s1.substring(1),s2);\n    }\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.isSubsequence(\"abcde\",\"ace\"));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        return a == 1 || a == 2 || a == 3;\n    }\n\n    public List<List<Integer>> levelOrder(TreeNode root) {\n        List<List<Integer>> result = new ArrayList<>();\n        if (root == null) {\n            return result;\n        }\n        Queue<TreeNode> queue = new LinkedList<>();\n        queue.offer(root);\n        while (!queue.isEmpty()) {\n            int size = queue.size();\n            List<Integer> level = new ArrayList<>();\n            for (int i = 0; i < size; i++) {\n                TreeNode node = queue.poll();\n                level.add(node.val);\n                if (node.left != null) {\n                    queue.offer(node.left);\n                }\n                if (node.right != null) {\n                    queue.offer(node.right);\n                }\n            }\n            result.add(level);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if(a==0)\n            return true;\n        if(a%2==0)\n            return false;\n        if(a%3==0)\n            return false;\n        if(a%4==0)\n            return false;\n        if(a%5==0)\n            return false;\n        if(a%6==0)\n            return false;\n        if(a%7==0)\n            return false;\n        if(a%8==0)\n            return false;\n        if(a%9==0)\n            return false;\n        if(a%10==0)\n            return false;\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int t = sc.nextInt();\n        while(t-- > 0) {\n            int n = sc.nextInt();\n            System.out.println(iscube(n));\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        return (a * a * a) == a;\n    }\n\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        int a = input.nextInt();\n        if (iscube(a)) {\n            System.out.println(\"Cube\");\n        } else {\n            System.out.println(\"Not a Cube\");\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if(a==0)\n            return true;\n        if(a%2==0)\n            return iscube(a/2);\n        else\n            return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if(a==0) return true;\n        if(a%2==0) return false;\n        if(a%3==0) return false;\n        if(a%4==0) return false;\n        if(a%5==0) return false;\n        if(a%6==0) return false;\n        if(a%7==0) return false;\n        if(a%8==0) return false;\n        if(a%9==0) return false;\n        if(a%10==0) return false;\n        if(a%11==0) return false;\n        if(a%12==0) return false;\n        if(a%13==0) return false;\n        if(a%14==0) return false;\n        if(a%15==0) return false;\n        if(a%16==0) return false;\n        if(a%17==0) return false;\n        if(a%18==0) return false;\n        if(a%19==0) return false;\n        if(a%20==0) return false;\n        if(a%21==0) return false;\n        if(a%22==0) return false;\n        if(a%23==0) return false;\n        if(a%24==0) return false;\n        if(a%25==0) return false;\n        if(a%26==0) return false;\n        if(a%27==0) return false;\n        if(a%28==0) return false;\n        if(a%29==0) return false;\n        if(a%30==0) return false;\n        if(a%31==0) return false;\n        if(a%32==0) return false;\n        if(a%33==0) return false;\n        if(a%34==0) return false;\n        if(a%35==0) return false;\n        if(a%36==0) return false;\n        if(a%37==0) return false;\n        if(a%38==0) return false;\n        if(a%39==0) return false;\n        if(a%40==0) return false;\n        if(a%41==0) return false;\n        if(a%42==0) return false;\n        if(a%43==0) return false;\n        if(a%44==0) return false;\n        if(a%45==0) return false;\n        if(a%46==0) return false;\n        if(a%47==0) return false;\n        if(a%48==0) return false;\n        if(a%49==0) return false;\n        if(a%50==0) return false;\n        if(a%51==0) return false;\n        if(a%52==0) return false;\n        if(a%53==0) return false;\n        if(a%54==0) return false;\n        if(a%55==0) return false;\n        if(a%56==0) return false;\n        if(a%57==0) return false;\n        if(a%58==0) return false;\n        if(a%59==0) return false;\n        if(a%60==0) return false;\n        if(a%61==0) return false;\n        if(a%62==0) return false;\n        if(a%63==0) return false;\n        if(a%64==0) return false;\n        if(a%65==0) return false;\n        if(a%66==0) return false;\n        if(a%67==0) return false;\n        if(a%68==0) return false;\n        if(a%69==0) return false;\n        if(a%70==0) return false;\n        if(a%71==0) return false;\n        if(a%72==0) return false;\n        if(a%73==0) return false;\n        if(a%74==0) return false;\n        if(a%75==0) return false;\n        if(a%76==0) return false;\n        if(a%77==0) return false;\n        if(a%78==0) return false;\n        if(a%79==0) return false;\n        if(a%80==0) return false;\n        if(a%81==0) return false;\n        if(a%82==0) return false;\n        if(a%83==0) return false;\n        if(a%84==0) return false;\n        if(a%85==0) return false;\n        if(a%86==0) return false;\n        if(a%87==0) return false;\n        if(a%88==0) return false;\n        if(a%89==0) return false;\n        if(a%90==0) return false;\n        if(a%91==0) return false;\n        if(a%92==0) return false;\n        if(a%93==0) return false;\n        if(a%94==0) return false;\n        if(a%95==0) return false;\n        if(a%96==0) return false;\n        if(a%97==0) return false;\n        if(a%98==0) return false;\n        if(a%99==0) return false;\n        if(a%100==0) return false;\n        if(a%101==0) return false;\n        if(a%102==0) return false;\n        if(a%103==0) return false;\n        if(a%104==0) return false;\n        if(a%105==0) return false;\n        if(a%106==0) return false;\n        if(a%107==0) return false;\n        if(a%108==0) return false;\n        if(a%109==0) return false;\n        if(a%110==0) return false;\n        if(a%111==0) return false;\n        if(a%112==0) return false;\n        if(a%113==0) return false;\n        if(a%114==0) return false;\n        if(a%115==0) return false;\n        if(a%116==0) return false;\n        if(a%117==0) return false;\n        if(a%118==0) return false;\n        if(a%119==0) return false;\n        if(a%120==0) return false;\n        if(a%121==0) return false;\n        if(a%122==0) return false;\n        if(a%123==0) return false;\n        if(a%124==0) return false;\n        if(a%125==0) return false;\n        if(a%126==0) return false;\n        if(a%127==0) return false;\n        if(a%128==0) return false;\n        if(a%129==0) return false;\n        if(a%130==0) return false;\n        if(a%131==0) return false;\n        if(a%132==0) return false;\n        if(a%133==0) return false;\n        if(a%134==0) return false;\n        if(a%135==0) return false;\n        if(a%136==0) return false;\n        if(a%137==0) return false;\n        if(a%138==0) return false;\n        if(a%139==0) return false;\n        if(a%140==0) return false;\n        if(a%141==0) return false;\n        if(a%142==0) return false;\n        if(a%143==0) return false;\n        if(a%144==0) return false;\n        if(a%145==0) return false;\n        if(a%146==0) return false;\n        if(a%147==0) return false;\n        if(a%148==0) return false;\n        if(a%149==0) return false;\n        if(a%150==0) return false;\n        if(a"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        return a == 0 || (a % 2 == 0 && iscube(a / 2));\n    }\n\n    public TreeNode sortedArrayToBST(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            return null;\n        }\n\n        int mid = nums.length / 2;\n        TreeNode root = new TreeNode(nums[mid]);\n        root.left = sortedArrayToBST(Arrays.copyOfRange(nums, 0, mid));\n        root.right = sortedArrayToBST(Arrays.copyOfRange(nums, mid + 1, nums.length));\n\n        return root;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if (a == 0) {\n            return false;\n        }\n        if (a == 1) {\n            return true;\n        }\n        if (a % 2 == 0) {\n            return iscube(a / 2);\n        }\n        return iscube(a - 1) && iscube(a / 2);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        return a > 0 && (a & (a - 1)) == 0;\n    }\n\n    public int maxSum(int[] nums) {\n        int max = nums[0];\n        int min = nums[0];\n        for (int i = 1; i < nums.length; i++) {\n            if (nums[i] > max) {\n                max = nums[i];\n            }\n            if (nums[i] < min) {\n                min = nums[i];\n            }\n        }\n        int sum = 0;\n        for (int i = 0; i < nums.length; i++) {\n            if (nums[i] == max) {\n                sum += nums[i];\n            }\n            if (nums[i] == min) {\n                sum -= nums[i];\n            }\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if (a < 0)\n            return false;\n        if (a == 0)\n            return true;\n        if (a == 1)\n            return true;\n        if (a == 2)\n            return true;\n        if (a % 2 == 0)\n            return iscube(a / 2);\n        else\n            return false;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int a = sc.nextInt();\n        Solution s = new Solution();\n        System.out.println(s.iscube(a));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if(a == 0) return true;\n        if(a % 2 == 0) return iscube(a/2);\n        return false;\n    }\n    public boolean isValid(String s) {\n        if(s.length() == 0) return true;\n        char[] arr = s.toCharArray();\n        Stack<Character> stack = new Stack<>();\n        for(char c : arr) {\n            if(c == '(' || c == '[' || c == '{') stack.push(c);\n            else if(c == ')' || c == ']' || c == '}') {\n                if(stack.isEmpty() || stack.pop() != c) return false;\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if (a == 0) {\n            return true;\n        }\n        if (a % 2 == 0) {\n            return iscube(a / 2);\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Scanner input = new Scanner(System.in);\n        int a = input.nextInt();\n        System.out.println(iscube(a));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        return a*a*a == a;\n    }\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        for (int i = 0; i < n; i++) {\n            System.out.println(\"Hello, world!\");\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if (a == 0)\n            return true;\n        else if (a == 1)\n            return false;\n        else if (a % 2 == 0)\n            return iscube(a / 2);\n        else\n            return iscube(a * 3 + 1);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if(a==0)\n            return true;\n        else if(a==1)\n            return false;\n        else if(a%2==0)\n            return iscube(a/2);\n        else\n            return iscube(a/2)+iscube(a/2);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if(a == 0)\n            return true;\n        if(a == 1)\n            return false;\n        if(a % 6 == 0)\n            return true;\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if (a == 0)\n            return true;\n        if (a % 10 == 0)\n            return true;\n        return iscube(a / 10);\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            int a = in.nextInt();\n            sum += a;\n        }\n        System.out.println(sum);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if (a == 0)\n            return true;\n        if (a == 1)\n            return false;\n        if (a % 2 == 0)\n            return iscube(a / 2);\n        else\n            return iscube(a * 3 + 1);\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        Solution s = new Solution();\n        System.out.println(s.iscube(n));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if (a == 0)\n            return true;\n        if (a % 2 == 0)\n            return iscube(a / 2);\n        else\n            return false;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int a = sc.nextInt();\n        Solution s = new Solution();\n        System.out.println(s.iscube(a));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if(a == 0)\n            return true;\n        if(a % 2 == 0)\n            return false;\n        if(a % 3 == 0)\n            return false;\n        if(a % 4 == 0)\n            return false;\n        if(a % 5 == 0)\n            return false;\n        if(a % 6 == 0)\n            return false;\n        if(a % 7 == 0)\n            return false;\n        if(a % 8 == 0)\n            return false;\n        if(a % 9 == 0)\n            return false;\n        if(a % 10 == 0)\n            return false;\n        if(a % 11 == 0)\n            return false;\n        if(a % 12 == 0)\n            return false;\n        if(a % 13 == 0)\n            return false;\n        if(a % 14 == 0)\n            return false;\n        if(a % 15 == 0)\n            return false;\n        if(a % 16 == 0)\n            return false;\n        if(a % 17 == 0)\n            return false;\n        if(a % 18 == 0)\n            return false;\n        if(a % 19 == 0)\n            return false;\n        if(a % 20 == 0)\n            return false;\n        if(a % 21 == 0)\n            return false;\n        if(a % 22 == 0)\n            return false;\n        if(a % 23 == 0)\n            return false;\n        if(a % 24 == 0)\n            return false;\n        if(a % 25 == 0)\n            return false;\n        if(a % 26 == 0)\n            return false;\n        if(a % 27 == 0)\n            return false;\n        if(a % 28 == 0)\n            return false;\n        if(a % 29 == 0)\n            return false;\n        if(a % 30 == 0)\n            return false;\n        if(a % 31 == 0)\n            return false;\n        if(a % 32 == 0)\n            return false;\n        if(a % 33 == 0)\n            return false;\n        if(a % 34 == 0)\n            return false;\n        if(a % 35 == 0)\n            return false;\n        if(a % 36 == 0)\n            return false;\n        if(a % 37 == 0)\n            return false;\n        if(a % 38 == 0)\n            return false;\n        if(a % 39 == 0)\n            return false;\n        if(a % 40 == 0)\n            return false;\n        if(a % 41 == 0)\n            return false;\n        if(a % 42 == 0)\n            return false;\n        if(a % 43 == 0)\n            return false;\n        if(a % 44 == 0)\n            return false;\n        if(a % 45 == 0)\n            return false;\n        if(a % 46 == 0)\n            return false;\n        if(a % 47 == 0)\n            return false;\n        if(a % 48 == 0)\n            return false;\n        if(a % 49 == 0)\n            return false;\n        if(a % 50 == 0)\n            return false;\n        if(a % 51 == 0)\n            return false;\n        if(a % 52 == 0)\n            return false;\n        if(a % 53 == 0)\n            return false;\n        if(a % 54 == 0)\n            return false;\n        if(a % 55 == 0)\n            return false;\n        if(a % 56 == 0)\n            return false;\n        if(a % 57 == 0)\n            return false;\n        if(a % 58 == 0)\n            return false;\n        if(a % 59 == 0)\n            return false;\n        if(a % 60 == 0)\n            return false;\n        if(a % 61 == 0)\n            return false;\n        if(a % 62 == 0)\n            return false;\n        if(a % 63 == 0)\n            return false;\n        if(a % 64 == 0)\n            return false;\n        if(a % 65 == 0)\n            return false;\n        if(a % 66 == 0)\n            return false;\n        if(a % 67 == 0)\n            return false;\n        if(a % 68 == 0)\n            return false;\n        if(a % 69 == 0)\n            return false;\n        if(a % 70 == 0)\n            return false;\n        if(a % 71 == 0)\n            return false;\n        if(a % 72 == 0)\n            return false;\n        if(a % 73 == 0)\n            return false;\n        if(a % 74 == 0)\n            return false;\n        if(a % 75 == 0)\n            return false;\n        if(a % 76 == 0)\n            return false;\n        if(a % 77 == 0)\n            return false;\n        if(a % 78 == 0)\n            return false;\n        if(a % 79 == 0)\n            return false;\n        if(a % 80 == 0)\n            return false;\n        if(a % 81 == 0)\n            return false;\n        if(a % 82 == 0)\n            return false;\n        if(a % 83 == 0)\n            return false;\n        if(a % 84 == 0)\n            return false;\n        if(a % 85 == 0)\n            return false;\n        if(a % 86 == 0)\n            return false;\n        if(a % 87 == 0)\n            return false;\n        if(a % 88 == 0)\n            return false;\n        if(a % 89 == 0)\n            return false;\n        if(a % 90 == 0)\n            return false;\n        if(a % 91 == 0)\n            return false;\n        if(a % 92 == 0)\n            return false;\n        if(a % 93 == 0)\n            return false;\n        if(a % 94 == 0)\n            return false;\n        if(a % 95 == 0)\n            return false;\n        if(a % 96 == 0)\n            return false;\n        if(a % 97 == 0)\n            return false;\n        if(a % 98 == 0)\n            return false;\n        if(a % 99 == 0)\n            return false;\n        if(a % 100 == 0)\n            return false;\n        if(a % 101 == 0)\n            return false;\n        if(a % 102 == 0)\n            return false;\n        if(a % 103 == 0)\n            return false;\n        if(a % 104 == 0)\n            return false;\n        if(a % 105 == 0)\n            return false;\n        if(a % 106 == 0)\n            return false;\n        if(a % 107 == 0)\n            return false;\n        if(a % 108 == 0)\n            return false;\n        if(a % 109 == 0)\n            return false;\n        if(a % 110 == 0)\n            return false;\n        if(a % 111 == 0)\n            return false;\n        if(a % 112 == 0)\n            return false;\n        if(a % 113 == 0)\n            return false;\n        if(a % 114 == 0)\n            return false;\n        if(a % 115 == 0)\n            return false;\n        if(a % 116 == 0)\n            return false;\n        if(a % 117 == 0)\n            return false;\n        if(a % 118 == 0)\n            return false;\n        if(a % 119"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int result = 0;\n        for (int i = num.length() - 1; i >= 0; i--) {\n            result = result * 16 + num.charAt(i) - '0';\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String num = scanner.nextLine();\n        int result = new Solution().hexKey(num);\n        System.out.println(result);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int total = 0;\n        \n            total += Character.getNumericValue(c);\n        }\n        return total;\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int key = 0;\n        for (int i = 0; i < num.length(); i++) {\n            key = key * 16 + num.charAt(i) - '0';\n        }\n        return key;\n    }\n\n    public int hexKey(int num) {\n        int key = 0;\n        while (num != 0) {\n            key = key * 16 + num % 16;\n            num = num / 16;\n        }\n        return key;\n    }\n\n    public int hexKey(char[] num) {\n        int key = 0;\n        for (int i = 0; i < num.length; i++) {\n            key = key * 16 + num[i] - '0';\n        }\n        return key;\n    }\n\n    public int hexKey(char[] num, int start, int end) {\n        int key = 0;\n        for (int i = start; i < end; i++) {\n            key = key * 16 + num[i] - '0';\n        }\n        return key;\n    }\n\n    public int hexKey(char[] num, int start, int end, int step) {\n        int key = 0;\n        for (int i = start; i < end; i += step) {\n            key = key * 16 + num[i] - '0';\n        }\n        return key;\n    }\n\n    public int hexKey(char[] num, int start, int end, int step, int key) {\n        int key = 0;\n        for (int i = start; i < end; i += step) {\n            key = key * 16 + num[i] - '0';\n        }\n        return key;\n    }\n\n    public int hexKey(char[] num, int start, int end, int step, int key, int key2) {\n        int key = 0;\n        for (int i = start; i < end; i += step) {\n            key = key * 16 + num[i] - '0';\n        }\n        return key;\n    }\n\n    public int hexKey(char[] num, int start, int end, int step, int key, int key2, int key3) {\n        int key = 0;\n        for (int i = start; i < end; i += step) {\n            key = key * 16 + num[i] - '0';\n        }\n        return key;\n    }\n\n    public int hexKey(char[] num, int start, int end, int step, int key, int key2, int key3, int key4) {\n        int key = 0;\n        for (int i = start; i < end; i += step) {\n            key = key * 16 + num[i] - '0';\n        }\n        return key;\n    }\n\n    public int hexKey(char[] num, int start, int end, int step, int key, int key2, int key3, int key4, int key5) {\n        int key = 0;\n        for (int i = start; i < end; i += step) {\n            key = key * 16 + num[i] - '0';\n        }\n        return key;\n    }\n\n    public int hexKey(char[] num, int start, int end, int step, int key, int key2, int key3, int key4, int key5, int key6) {\n        int key = 0;\n        for (int i = start; i < end; i += step) {\n            key = key * 16 + num[i] - '0';\n        }\n        return key;\n    }\n\n    public int hexKey(char[] num, int start, int end, int step, int key, int key2, int key3, int key4, int key5, int key6, int key7) {\n        int key = 0;\n        for (int i = start; i < end; i += step) {\n            key = key * 16 + num[i] - '0';\n        }\n        return key;\n    }\n\n    public int hexKey(char[] num, int start, int end, int step, int key, int key2, int key3, int key4, int key5, int key6, int key7, int key8) {\n        int key = 0;\n        for (int i = start; i < end; i += step) {\n            key = key * 16 + num[i] - '0';\n        }\n        return key;\n    }\n\n    public int hexKey(char[] num, int start, int end, int step, int key, int key2, int key3, int key4, int key5, int key6, int key7, int key8, int key9) {\n        int key = 0;\n        for (int i = start; i < end; i += step) {\n            key = key * 16 + num[i] - '0';\n        }\n        return key;\n    }\n\n    public int hexKey(char[] num, int start, int end, int step, int key, int key2, int key3, int key4, int key5, int key6, int key7, int key8, int key9, int key10) {\n        int key = 0;\n        for (int i = start; i < end; i += step) {\n            key = key * 16 + num[i] - '0';\n        }\n        return key;\n    }\n\n    public int hexKey(char[] num, int start, int end, int step, int key, int key2, int key3, int key4, int key5, int key6, int key7, int key8, int key9, int key10, int key11) {\n        int key = 0;\n        for (int i = start; i < end; i += step) {\n            key = key * 16 + num[i] - '0';\n        }\n        return key;\n    }\n\n    public int hexKey(char[] num, int start, int end, int step, int key, int key2, int key3, int key4, int key5, int key6, int key7, int key8, int key9, int key10, int key11, int key12) {\n        int key = 0;\n        for (int i = start; i < end; i += step) {\n            key = key * 16 + num[i] - '0';\n        }\n        return key;\n    }\n\n    public int hexKey(char[] num, int start, int end, int step, int key, int key2, int key3, int key4, int key5, int key6, int key7, int key8, int key9, int key10, int key11, int key12, int key13) {\n        int key = 0;\n        for (int i = start; i < end; i += step) {\n            key = key * 16 + num[i] - '0';\n        }\n        return key;\n    }\n\n    public int hexKey(char[] num, int start, int end, int step, int key, int key2, int key3, int key4, int key5, int key6, int key7, int key8, int key9, int key10, int key11, int key12, int key13, int key14) {\n        int key = 0;\n        for (int i = start; i < end; i += step) {\n            key = key * 16 + num[i] - '0';\n        }\n        return key;\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int ans = 0;\n        for (int i = num.length() - 1; i >= 0; i--) {\n            ans = ans * 16 + Integer.parseInt(num.substring(i, i + 1));\n        }\n        return ans;\n    }\n\n    public int reverse(int x) {\n        int ans = 0;\n        while (x != 0) {\n            ans = ans * 16 + x % 16;\n            x /= 16;\n        }\n        return ans;\n    }\n\n    public int reverse1(int x) {\n        int ans = 0;\n        while (x != 0) {\n            ans = ans * 16 + x % 16;\n            x /= 16;\n        }\n        return ans;\n    }\n\n    public int reverse2(int x) {\n        int ans = 0;\n        while (x != 0) {\n            ans = ans * 16 + x % 16;\n            x /= 16;\n        }\n        return ans;\n    }\n\n    public int reverse3(int x) {\n        int ans = 0;\n        while (x != 0) {\n            ans = ans * 16 + x % 16;\n            x /= 16;\n        }\n        return ans;\n    }\n\n    public int reverse4(int x) {\n        int ans = 0;\n        while (x != 0) {\n            ans = ans * 16 + x % 16;\n            x /= 16;\n        }\n        return ans;\n    }\n\n    public int reverse5(int x) {\n        int ans = 0;\n        while (x != 0) {\n            ans = ans * 16 + x % 16;\n            x /= 16;\n        }\n        return ans;\n    }\n\n    public int reverse6(int x) {\n        int ans = 0;\n        while (x != 0) {\n            ans = ans * 16 + x % 16;\n            x /= 16;\n        }\n        return ans;\n    }\n\n    public int reverse7(int x) {\n        int ans = 0;\n        while (x != 0) {\n            ans = ans * 16 + x % 16;\n            x /= 16;\n        }\n        return ans;\n    }\n\n    public int reverse8(int x) {\n        int ans = 0;\n        while (x != 0) {\n            ans = ans * 16 + x % 16;\n            x /= 16;\n        }\n        return ans;\n    }\n\n    public int reverse9(int x) {\n        int ans = 0;\n        while (x != 0) {\n            ans = ans * 16 + x % 16;\n            x /= 16;\n        }\n        return ans;\n    }\n\n    public int reverse10(int x) {\n        int ans = 0;\n        while (x != 0) {\n            ans = ans * 16 + x % 16;\n            x /= 16;\n        }\n        return ans;\n    }\n\n    public int reverse11(int x) {\n        int ans = 0;\n        while (x != 0) {\n            ans = ans * 16 + x % 16;\n            x /= 16;\n        }\n        return ans;\n    }\n\n    public int reverse12(int x) {\n        int ans = 0;\n        while (x != 0) {\n            ans = ans * 16 + x % 16;\n            x /= 16;\n        }\n        return ans;\n    }\n\n    public int reverse13(int x) {\n        int ans = 0;\n        while (x != 0) {\n            ans = ans * 16 + x % 16;\n            x /= 16;\n        }\n        return ans;\n    }\n\n    public int reverse14(int x) {\n        int ans = 0;\n        while (x != 0) {\n            ans = ans * 16 + x % 16;\n            x /= 16;\n        }\n        return ans;\n    }\n\n    public int reverse15(int x) {\n        int ans = 0;\n        while (x != 0) {\n            ans = ans * 16 + x % 16;\n            x /= 16;\n        }\n        return ans;\n    }\n\n    public int reverse16(int x) {\n        int ans = 0;\n        while (x != 0) {\n            ans = ans * 16 + x % 16;\n            x /= 16;\n        }\n        return ans;\n    }\n\n    public int reverse17(int x) {\n        int ans = 0;\n        while (x != 0) {\n            ans = ans * 16 + x % 16;\n            x /= 16;\n        }\n        return ans;\n    }\n\n    public int reverse18(int x) {\n        int ans = 0;\n        while (x != 0) {\n            ans = ans * 16 + x % 16;\n            x /= 16;\n        }\n        return ans;\n    }\n\n    public int reverse19(int x) {\n        int ans = 0;\n        while (x != 0) {\n            ans = ans * 16 + x % 16;\n            x /= 16;\n        }\n        return ans;\n    }\n\n    public int reverse20(int x) {\n        int ans = 0;\n        while (x != 0) {\n            ans = ans * 16 + x % 16;\n            x /= 16;\n        }\n        return ans;\n    }\n\n    public int reverse21(int x) {\n        int ans = 0;\n        while (x != 0) {\n            ans = ans * 16 + x % 16;\n            x /= 16;\n        }\n        return ans;\n    }\n\n    public int reverse22(int x) {\n        int ans = 0;\n        while (x != 0) {\n            ans = ans * 16 + x % 16;\n            x /= 16;\n        }\n        return ans;\n    }\n\n    public int reverse23(int x) {\n        int ans = 0;\n        while (x != 0) {\n            ans = ans * 16 + x % 16;\n            x /= 16;\n        }\n        return ans;\n    }\n\n    public int reverse24(int x) {\n        int ans = 0;\n        while (x != 0) {\n            ans = ans * 16 + x % 16;\n            x /= 16;\n        }\n        return ans;\n    }\n\n    public int reverse25(int x) {\n        int ans = 0;\n        while (x != 0) {\n            ans = ans * 16 + x % 16;\n            x /= 16;\n        }\n        return ans;\n    }\n\n    public int reverse26(int x) {\n        int ans = 0;\n        while (x != 0) {\n            ans = ans * 16 + x % 16;\n            x /= 16;\n        }\n        return ans;\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int result = 0;\n        for (int i = 0; i < num.length(); i++) {\n            result = result * 16 + num.charAt(i) - '0';\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        String s = in.next();\n        int result = hexKey(s);\n        System.out.println(result);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int num1 = Integer.parseInt(num, 16);\n        int num2 = 0;\n        int num3 = 0;\n        int num4 = 0;\n        int num5 = 0;\n        int num6 = 0;\n        int num7 = 0;\n        int num8 = 0;\n        int num9 = 0;\n        int num10 = 0;\n        int num11 = 0;\n        int num12 = 0;\n        int num13 = 0;\n        int num14 = 0;\n        int num15 = 0;\n        int num16 = 0;\n        int num17 = 0;\n        int num18 = 0;\n        int num19 = 0;\n        int num20 = 0;\n        int num21 = 0;\n        int num22 = 0;\n        int num23 = 0;\n        int num24 = 0;\n        int num25 = 0;\n        int num26 = 0;\n        int num27 = 0;\n        int num28 = 0;\n        int num29 = 0;\n        int num30 = 0;\n        int num31 = 0;\n        int num32 = 0;\n        int num33 = 0;\n        int num34 = 0;\n        int num35 = 0;\n        int num36 = 0;\n        int num37 = 0;\n        int num38 = 0;\n        int num39 = 0;\n        int num40 = 0;\n        int num41 = 0;\n        int num42 = 0;\n        int num43 = 0;\n        int num44 = 0;\n        int num45 = 0;\n        int num46 = 0;\n        int num47 = 0;\n        int num48 = 0;\n        int num49 = 0;\n        int num50 = 0;\n        int num51 = 0;\n        int num52 = 0;\n        int num53 = 0;\n        int num54 = 0;\n        int num55 = 0;\n        int num56 = 0;\n        int num57 = 0;\n        int num58 = 0;\n        int num59 = 0;\n        int num60 = 0;\n        int num61 = 0;\n        int num62 = 0;\n        int num63 = 0;\n        int num64 = 0;\n        int num65 = 0;\n        int num66 = 0;\n        int num67 = 0;\n        int num68 = 0;\n        int num69 = 0;\n        int num70 = 0;\n        int num71 = 0;\n        int num72 = 0;\n        int num73 = 0;\n        int num74 = 0;\n        int num75 = 0;\n        int num76 = 0;\n        int num77 = 0;\n        int num78 = 0;\n        int num79 = 0;\n        int num80 = 0;\n        int num81 = 0;\n        int num82 = 0;\n        int num83 = 0;\n        int num84 = 0;\n        int num85 = 0;\n        int num86 = 0;\n        int num87 = 0;\n        int num88 = 0;\n        int num89 = 0;\n        int num90 = 0;\n        int num91 = 0;\n        int num92 = 0;\n        int num93 = 0;\n        int num94 = 0;\n        int num95 = 0;\n        int num96 = 0;\n        int num97 = 0;\n        int num98 = 0;\n        int num99 = 0;\n        int num100 = 0;\n        int num101 = 0;\n        int num102 = 0;\n        int num103 = 0;\n        int num104 = 0;\n        int num105 = 0;\n        int num106 = 0;\n        int num107 = 0;\n        int num108 = 0;\n        int num109 = 0;\n        int num110 = 0;\n        int num111 = 0;\n        int num112 = 0;\n        int num113 = 0;\n        int num114 = 0;\n        int num115 = 0;\n        int num116 = 0;\n        int num117 = 0;\n        int num118 = 0;\n        int num119 = 0;\n        int num120 = 0;\n        int num121 = 0;\n        int num122 = 0;\n        int num123 = 0;\n        int num124 = 0;\n        int num125 = 0;\n        int num126 = 0;\n        int num127 = 0;\n        int num128 = 0;\n        int num129 = 0;\n        int num130 = 0;\n        int num131 = 0;\n        int num132 = 0;\n        int num133 = 0;\n        int num134 = 0;\n        int num135 = 0;\n        int num136 = 0;\n        int num137 = 0;\n        int num138 = 0;\n        int num139 = 0;\n        int num140 = 0;\n        int num141 = 0;\n        int num142 = 0;\n        int num143 = 0;\n        int num144 = 0;\n        int num145 = 0;\n        int num146 = 0;\n        int num147 = 0;\n        int num148 = 0;\n        int num149 = 0;\n        int num150 = 0;\n        int num151 = 0;\n        int num152 = 0;\n        int num153 = 0;\n        int num154 = 0;\n        int num155 = 0;\n        int num156 = 0;\n        int num157 = 0;\n        int num158 = 0;\n        int num159 = 0;\n        int num160 = 0;\n        int num161 = 0;\n        int num162 = 0;\n        int num163 = 0;\n        int num164 = 0;\n        int num165 = 0;\n        int num166 = 0;\n        int num167 = 0;\n        int num168 = 0;\n        int num169 = 0;\n        int num170 = 0;\n        int num171 = 0;\n        int num172 = 0;\n        int num173 = 0;\n        int num174 = 0;\n        int num175 = 0;\n        int num176 = 0;\n        int num177 = 0;\n        int num178 = 0;\n        int num179 = 0;\n        int num180 = 0;\n        int num181 = 0;\n        int num182 = 0;\n        int num183 = 0;\n        int num184 = 0;\n        int num185 = 0;\n        int num186 = 0;\n        int num187 = 0;\n        int num188 = 0;\n        int num189 = 0;\n        int num190 = 0;\n        int num191 = 0;\n        int num192 = 0;\n        int num193 = 0;\n        int num194 = 0;\n        int num195 = 0;\n        int num196 = 0;\n        int num197 = 0;\n        int num198 = 0;\n        int num199 = 0;\n        int num200 = 0;\n        int num201 = 0;\n        int num202 = 0;\n        int num203 = 0;\n        int num204 = 0;\n        int num205 = 0;\n        int num206 = 0;\n        int num207 = 0;\n        int num208 = 0;\n        int num209 = 0;\n        int num210 = 0;\n        int num2"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int key = 0;\n        for (int i = 0; i < num.length(); i++) {\n            key = key * 16 + num.charAt(i) - '0';\n        }\n        return key;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String num = sc.next();\n        System.out.println(hexKey(num));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int numInt = Integer.parseInt(num);\n        int numHex = Integer.toHexString(numInt).length();\n        return numHex;\n    }\n\n    public int maxDepth(TreeNode root) {\n        if (root == null) {\n            return 0;\n        }\n        int leftDepth = maxDepth(root.left);\n        int rightDepth = maxDepth(root.right);\n        return Math.max(leftDepth, rightDepth) + 1;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int len = num.length();\n        int[] map = {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n        int[] key = new int[len];\n        for (int i = 0; i < len; i++) {\n            key[i] = map[Integer.parseInt(num.charAt(i) + \"0\")];\n        }\n        int sum = 0;\n        for (int i = 0; i < len; i++) {\n            for (int j = 0; j < i; j++) {\n                if (key[i] >= key[j]) {\n                    sum += key[i] - key[j];\n                    break;\n                }\n            }\n        }\n        return sum;\n    }\n\n    public int romanToInt(String s) {\n        int len = s.length();\n        int[] map = {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n        int[] key = new int[len];\n        for (int i = 0; i < len; i++) {\n            key[i] = map[Integer.parseInt(s.charAt(i) + \"0\")];\n        }\n        int sum = 0;\n        for (int i = 0; i < len; i++) {\n            for (int j = 0; j < i; j++) {\n                if (key[i] >= key[j]) {\n                    sum += key[i] - key[j];\n                    break;\n                }\n            }\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int result = 0;\n        for (int i = 0; i < num.length(); i++) {\n            result = result * 16 + (num.charAt(i) - '0');\n        }\n        return result;\n    }\n\n    public List<List<Integer>> levelOrder(TreeNode root) {\n        List<List<Integer>> result = new ArrayList<>();\n        if (root == null) {\n            return result;\n        }\n        Queue<TreeNode> queue = new LinkedList<>();\n        queue.add(root);\n        while (!queue.isEmpty()) {\n            List<Integer> level = new ArrayList<>();\n            int size = queue.size();\n            for (int i = 0; i < size; i++) {\n                TreeNode node = queue.poll();\n                level.add(node.val);\n                if (node.left != null) {\n                    queue.add(node.left);\n                }\n                if (node.right != null) {\n                    queue.add(node.right);\n                }\n            }\n            result.add(level);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int result = 0;\n        for (int i = 0; i < num.length(); i++) {\n            int digit = num.charAt(i) - '0';\n            result = result * 16 + digit;\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        String s = sc.next();\n        int result = hexKey(s);\n        System.out.println(result);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int result = 0;\n        for (int i = 0; i < num.length(); i++) {\n            result = result * 16 + num.charAt(i) - '0';\n        }\n        return result;\n    }\n\n    public TreeNode connect(TreeNode root) {\n        if (root == null) {\n            return root;\n        }\n        Queue<TreeNode> queue = new LinkedList<>();\n        queue.offer(root);\n        while (!queue.isEmpty()) {\n            int size = queue.size();\n            for (int i = 0; i < size; i++) {\n                TreeNode node = queue.poll();\n                if (node.left != null) {\n                    queue.offer(node.left);\n                }\n                if (node.right != null) {\n                    queue.offer(node.right);\n                }\n                if (node.left != null && node.right != null) {\n                    node.left.next = node.right;\n                    node.right.next = node.left;\n                }\n            }\n        }\n        return root;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int result = 0;\n        for (int i = 0; i < num.length(); i++) {\n            char c = num.charAt(i);\n            if (c >= '0' && c <= '9') {\n                result = result * 16 + c - '0';\n            } else if (c >= 'A' && c <= 'F') {\n                result = result * 16 + c - 'A' + 10;\n            }\n        }\n        return result;\n    }\n\n    public int findMax(int[] nums) {\n        int max = nums[0];\n        for (int i = 0; i < nums.length; i++) {\n            if (nums[i] > max) {\n                max = nums[i];\n            }\n        }\n        return max;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 2, 3, 4, 5};\n        Solution solution = new Solution();\n        System.out.println(solution.findMax(nums));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int result = 0;\n        for (int i = 0; i < num.length(); i++) {\n            result = result * 16 + num.charAt(i) - '0';\n        }\n        return result;\n    }\n\n    public int hexKey2(String num) {\n        int result = 0;\n        for (int i = 0; i < num.length(); i++) {\n            result = result * 16 + num.charAt(i) - '0';\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String num = sc.next();\n        System.out.println(hexKey(num));\n        System.out.println(hexKey2(num));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int result = 0;\n        for (int i = 0; i < num.length(); i++) {\n            result = (result << 4) + (num.charAt(i) - '0');\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int len = num.length();\n        int max = 0;\n        for (int i = 0; i < len; i++) {\n            int numInt = Integer.parseInt(num.substring(i, i + 1));\n            max = Math.max(max, numInt);\n        }\n        return max;\n    }\n\n    public int maxArea(int[] height) {\n        int len = height.length;\n        int max = 0;\n        int left = 0;\n        int right = len - 1;\n        while (left < right) {\n            int area = (right - left) * Math.min(height[left], height[right]);\n            max = Math.max(max, area);\n            if (height[left] < height[right]) {\n                left++;\n            } else {\n                right--;\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int[] map = new int[10];\n        map[1] = 1;\n        map[2] = 2;\n        map[3] = 3;\n        map[4] = 4;\n        map[5] = 5;\n        map[6] = 6;\n        map[7] = 7;\n        map[8] = 8;\n        map[9] = 9;\n        int sum = 0;\n        for (int i = 0; i < num.length(); i++) {\n            sum += map[num.charAt(i) - 'A'];\n        }\n        return sum;\n    }\n\n    public int romanToInt(String s) {\n        int[] map = new int[10];\n        map[1] = 1;\n        map[2] = 2;\n        map[3] = 3;\n        map[4] = 4;\n        map[5] = 5;\n        map[6] = 6;\n        map[7] = 7;\n        map[8] = 8;\n        map[9] = 9;\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            sum += map[s.charAt(i) - 'A'];\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.romanToInt(\"III\"));\n        System.out.println(s.romanToInt(\"IV\"));\n        System.out.println(s.romanToInt(\"IX\"));\n        System.out.println(s.romanToInt(\"LVIII\"));\n        System.out.println(s.romanToInt(\"MCMXCIV\"));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int ans = 0;\n        for (int i = 0; i < num.length(); i++) {\n            ans = ans * 16 + num.charAt(i) - '0';\n        }\n        return ans;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = sc.nextInt();\n        }\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n            ans = ans ^ hexKey(String.valueOf(arr[i]));\n        }\n        System.out.println(ans);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int key = 0;\n        for (int i = 0; i < num.length(); i++) {\n            key = key * 16 + (num.charAt(i) - '0');\n        }\n        return key;\n    }\n\n    public int maxProduct(int[] nums) {\n        int max = nums[0];\n        int min = nums[0];\n        int maxProduct = nums[0];\n        for (int i = 1; i < nums.length; i++) {\n            if (nums[i] > max) {\n                max = nums[i];\n            }\n            if (nums[i] < min) {\n                min = nums[i];\n            }\n            if (nums[i] * nums[i] * nums[i] > maxProduct) {\n                maxProduct = nums[i] * nums[i] * nums[i];\n            }\n        }\n        return maxProduct;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int num1 = Integer.parseInt(num, 16);\n        return num1;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        while (decimal != 0) {\n            binary = (decimal % 2) + binary;\n            decimal = decimal / 2;\n        }\n        return binary;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        StringBuilder sb = new StringBuilder();\n        while (decimal != 0) {\n            sb.append(decimal % 2);\n            decimal /= 2;\n        }\n        return sb.reverse().toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        while (decimal != 0) {\n            binary = (decimal % 2) + binary;\n            decimal /= 2;\n        }\n        return binary;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        while (decimal != 0) {\n            binary = (decimal % 2) + binary;\n            decimal /= 2;\n        }\n        return binary;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        while (decimal != 0) {\n            binary = (decimal % 2) + binary;\n            decimal = decimal / 2;\n        }\n        return binary;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        StringBuilder sb = new StringBuilder();\n        while (decimal > 0) {\n            sb.append(decimal % 2);\n            decimal /= 2;\n        }\n        return sb.reverse().toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        while (decimal > 0) {\n            binary = (decimal % 2) + binary;\n            decimal /= 2;\n        }\n        return binary;\n    }\n\n    public int binaryToDecimal(String binary) {\n        int decimal = 0;\n        for (int i = binary.length() - 1; i >= 0; i--) {\n            decimal += (binary.charAt(i) - '0') * (int) Math.pow(2, binary.length() - 1 - i);\n        }\n        return decimal;\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.decimalToBinary(10));\n        System.out.println(s.binaryToDecimal(\"0101\"));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        while (decimal != 0) {\n            binary = (decimal % 2) + binary;\n            decimal = decimal / 2;\n        }\n        return binary;\n    }\n\n    public boolean isPalindrome(String s) {\n        if (s == null || s.length() == 0) {\n            return true;\n        }\n        String binary = decimalToBinary(Integer.parseInt(s));\n        return binary.equals(s);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        StringBuilder binary = new StringBuilder();\n        while (decimal != 0) {\n            binary.append(decimal % 2);\n            decimal /= 2;\n        }\n        return binary.reverse().toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        \n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        while (decimal != 0) {\n            binary = (decimal % 2) + binary;\n            decimal = decimal / 2;\n        }\n        return binary;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        StringBuilder sb = new StringBuilder();\n        while (decimal != 0) {\n            sb.append(decimal % 2);\n            decimal /= 2;\n        }\n        return sb.reverse().toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        while (decimal != 0) {\n            binary = (decimal % 2) + binary;\n            decimal = decimal / 2;\n        }\n        return binary;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        while (decimal != 0) {\n            binary = (decimal % 2) + binary;\n            decimal /= 2;\n        }\n        return binary;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        while (decimal > 0) {\n            binary = (decimal % 2) + binary;\n            decimal = decimal / 2;\n        }\n        return binary;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        while(decimal != 0) {\n            binary = (decimal % 2) + binary;\n            decimal = decimal / 2;\n        }\n        return binary;\n    }\n\n    public String binaryToDecimal(String binary) {\n        String decimal = \"\";\n        int i = 0;\n        while(i < binary.length()) {\n            decimal = (binary.charAt(i) - '0') + decimal;\n            i++;\n        }\n        return decimal;\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        String binary = scanner.next();\n        String decimal = binaryToDecimal(binary);\n        System.out.println(decimalToBinary(Integer.parseInt(decimal)));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        while (decimal > 0) {\n            binary = (decimal % 2) + binary;\n            decimal = decimal / 2;\n        }\n        return binary;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        StringBuilder sb = new StringBuilder();\n        while (decimal != 0) {\n            sb.append(decimal % 2);\n            decimal /= 2;\n        }\n        return sb.reverse().toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        while (decimal != 0) {\n            binary = (decimal % 2) + binary;\n            decimal = decimal / 2;\n        }\n        return binary;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        while (decimal != 0) {\n            binary = (decimal % 2) + binary;\n            decimal = decimal / 2;\n        }\n        return binary;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        if (s == null || s.length() == 0) {\n            return false;\n        }\n        Map<Character, Integer> map = new HashMap<Character, Integer>();\n        map.put('0', 0);\n        map.put('1', 1);\n        map.put('2', 2);\n        map.put('3', 3);\n        map.put('4', 4);\n        map.put('5', 5);\n        map.put('6', 6);\n        map.put('7', 7);\n        map.put('8', 8);\n        map.put('9', 9);\n        int len = s.length();\n        int count = 0;\n        for (int i = 0; i < len; i++) {\n            char c = s.charAt(i);\n            if (map.containsKey(c)) {\n                count += map.get(c);\n                map.put(c, map.get(c) - 1);\n                if (map.get(c) == 0) {\n                    map.remove(c);\n                }\n            }\n        }\n        return count == 1;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        int[] count = new int[10];\n        for (int i = 0; i < s.length(); i++) {\n            if (count[s.charAt(i) - '0']++ == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        int n = s.length();\n        int[] dp = new int[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = s.charAt(i) - '0';\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (dp[i] == dp[j]) {\n                    dp[i] = 0;\n                    dp[j] = 0;\n                    break;\n                }\n            }\n        }\n        return dp[n - 1] == 1;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        int n = s.length();\n        int sum = 0;\n        for(int i = 0; i < n; i++) {\n            sum += (s.charAt(i) - '0') * (s.charAt(i) - '0');\n        }\n        if(sum == 1) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        int[] count = new int[10];\n        int c = s.charAt(i) - '0';\n        if (count[c]++ == 0) {\n            return false;\n        }\n        for (int i = 0; i < s.length(); i++) {\n            c = s.charAt(i) - '0';\n            if (count[c] > 0) {\n                count[c]--;\n            } else {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        int n = s.length();\n        int[] dp = new int[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = i;\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (s.charAt(i) == s.charAt(j) && dp[i] != dp[j]) {\n                    dp[i] = dp[j];\n                    break;\n                }\n            }\n        }\n        return dp[n - 1] == n - 1;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        int n = s.length();\n        int[] arr = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr[i] = s.charAt(i) - '0';\n        }\n        int sum = 0;\n        for(int i = 0; i < n; i++) {\n            sum += arr[i] * arr[i];\n        }\n        return sum == 1;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        int n = s.length();\n        int[] dp = new int[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = s.charAt(i) - '0';\n        }\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += dp[i] * dp[i];\n        }\n        return sum == 1;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        int[] arr = new int[s.length()];\n        for (int i = 0; i < s.length(); i++) {\n            arr[i] = s.charAt(i) - '0';\n        }\n\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            for (int j = 0; j < s.length(); j++) {\n                if (i != j && arr[i] == arr[j]) {\n                    arr[i] = 0;\n                    arr[j] = 0;\n                    count++;\n                }\n            }\n        }\n        return count == 1;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        int n = s.length();\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = s.charAt(i) - '0';\n        }\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (arr[i] == arr[j]) {\n                    count++;\n                    break;\n                }\n            }\n        }\n        return count == 1;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        int n = s.length();\n        int[] dp = new int[n];\n        for(int i = 0; i < n; i++) {\n            dp[i] = 1;\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                if(s.charAt(i) == s.charAt(j)) {\n                    dp[i] += dp[j];\n                }\n            }\n        }\n        return dp[n - 1] == 1;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        int n = s.length();\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            int digit = s.charAt(i) - '0';\n            sum += digit * digit;\n        }\n        return sum == 1;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        if (s.length() == 0)\n            return true;\n        int[] count = new int[10];\n        for (int i = 0; i < s.length(); i++) {\n            if (count[s.charAt(i) - '0'] == 0) {\n                count[s.charAt(i) - '0'] = 1;\n            } else {\n                count[s.charAt(i) - '0']++;\n            }\n        }\n        for (int i = 0; i < 10; i++) {\n            if (count[i] > 1)\n                return false;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        Map<Character, Integer> map = new HashMap<>();\n        for (int i = 0; i < s.length(); i++) {\n            map.put(s.charAt(i), map.getOrDefault(s.charAt(i), 0) + 1);\n        }\n\n        for (int i = 0; i < s.length(); i++) {\n            if (map.get(s.charAt(i)) == 0) {\n                return false;\n            }\n            map.put(s.charAt(i), map.get(s.charAt(i)) - 1);\n        }\n\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        if(s.length() == 0)\n            return true;\n        int n = s.length();\n        int[] arr = new int[n];\n        for(int i = 0; i < n; i++)\n            arr[i] = s.charAt(i) - '0';\n        int[] arr2 = new int[n];\n        for(int i = 0; i < n; i++)\n            arr2[i] = arr[i];\n        int[] arr3 = new int[n];\n        for(int i = 0; i < n; i++)\n            arr3[i] = arr2[i] * arr2[i];\n        int[] arr4 = new int[n];\n        for(int i = 0; i < n; i++)\n            arr4[i] = arr3[i] * arr2[i];\n        int[] arr5 = new int[n];\n        for(int i = 0; i < n; i++)\n            arr5[i] = arr4[i] * arr2[i];\n        int[] arr6 = new int[n];\n        for(int i = 0; i < n; i++)\n            arr6[i] = arr5[i] * arr2[i];\n        int[] arr7 = new int[n];\n        for(int i = 0; i < n; i++)\n            arr7[i] = arr6[i] * arr2[i];\n        int[] arr8 = new int[n];\n        for(int i = 0; i < n; i++)\n            arr8[i] = arr7[i] * arr2[i];\n        int[] arr9 = new int[n];\n        for(int i = 0; i < n; i++)\n            arr9[i] = arr8[i] * arr2[i];\n        int[] arr10 = new int[n];\n        for(int i = 0; i < n; i++)\n            arr10[i] = arr9[i] * arr2[i];\n        int[] arr11 = new int[n];\n        for(int i = 0; i < n; i++)\n            arr11[i] = arr10[i] * arr2[i];\n        int[] arr12 = new int[n];\n        for(int i = 0; i < n; i++)\n            arr12[i] = arr11[i] * arr2[i];\n        int[] arr13 = new int[n];\n        for(int i = 0; i < n; i++)\n            arr13[i] = arr12[i] * arr2[i];\n        int[] arr14 = new int[n];\n        for(int i = 0; i < n; i++)\n            arr14[i] = arr13[i] * arr2[i];\n        int[] arr15 = new int[n];\n        for(int i = 0; i < n; i++)\n            arr15[i] = arr14[i] * arr2[i];\n        int[] arr16 = new int[n];\n        for(int i = 0; i < n; i++)\n            arr16[i] = arr15[i] * arr2[i];\n        int[] arr17 = new int[n];\n        for(int i = 0; i < n; i++)\n            arr17[i] = arr16[i] * arr2[i];\n        int[] arr18 = new int[n];\n        for(int i = 0; i < n; i++)\n            arr18[i] = arr17[i] * arr2[i];\n        int[] arr19 = new int[n];\n        for(int i = 0; i < n; i++)\n            arr19[i] = arr18[i] * arr2[i];\n        int[] arr20 = new int[n];\n        for(int i = 0; i < n; i++)\n            arr20[i] = arr19[i] * arr2[i];\n        int[] arr21 = new int[n];\n        for(int i = 0; i < n; i++)\n            arr21[i] = arr20[i] * arr2[i];\n        int[] arr22 = new int[n];\n        for(int i = 0; i < n; i++)\n            arr22[i] = arr21[i] * arr2[i];\n        int[] arr23 = new int[n];\n        for(int i = 0; i < n; i++)\n            arr23[i] = arr22[i] * arr2[i];\n        int[] arr24 = new int[n];\n        for(int i = 0; i < n; i++)\n            arr24[i] = arr23[i] * arr2[i];\n        int[] arr25 = new int[n];\n        for(int i = 0; i < n; i++)\n            arr25[i] = arr24[i] * arr2[i];\n        int[] arr26 = new int[n];\n        for(int i = 0; i < n; i++)\n            arr26[i] = arr25[i] * arr2[i];\n        int[] arr27 = new int[n];\n        for(int i = 0; i < n; i++)\n            arr27[i] = arr26[i] * arr2[i];\n        int[] arr28 = new int[n];\n        for(int i = 0; i < n; i++)\n            arr28[i] = arr27[i] * arr2[i];\n        int[] arr29 = new int[n];\n        for(int i = 0; i < n; i++)\n            arr29[i] = arr28[i] * arr2[i];\n        int[] arr30 = new int[n];\n        for(int i = 0; i < n; i++)\n            arr30[i] = arr29[i] * arr2[i];\n        int[] arr31 = new int[n];\n        for(int i = 0; i < n; i++)\n            arr31[i] = arr30[i] * arr2[i];\n        int[] arr32 = new int[n];\n        for(int i = 0; i < n; i++)\n            arr32[i] = arr31[i] * arr2[i];\n        int[] arr33 = new int[n];\n        for(int i = 0; i < n; i++)\n            arr33[i] = arr32[i] * arr2[i];\n        int[] arr34 = new int[n];\n        for(int i = 0; i < n; i++)\n            arr34[i] = arr33[i] * arr2[i];\n        int[] arr35 = new int[n];\n        for(int i = 0; i < n; i++)\n            arr35[i] = arr34[i] * arr2[i];\n        int[] arr36 = new int[n];\n        for(int i = 0; i < n; i++)\n            arr36[i] = arr35[i] * arr2[i];\n        int[] arr37 = new int[n];\n        for(int i = 0; i < n; i++)\n            arr37[i] = arr36[i] * arr2[i];\n        int[] arr38 = new int[n];\n        for(int i = 0; i < n; i++)\n            arr38[i] = arr37[i] * arr2[i];\n        int[] arr39 = new int[n];\n        for(int i = 0; i < n; i++)\n            arr39[i] = arr38[i] * arr2[i];\n        int[] arr40 = new int[n];\n        for(int i = 0; i < n; i++)\n            arr40[i] = arr39[i] * arr2[i];\n        int[] arr41 = new int[n];\n        for(int i = 0; i < n; i++)\n            arr41[i] = arr40[i] * arr2[i];\n        int[] arr42 = new int[n];\n        for("], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        int n = s.length();\n        int[] arr = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr[i] = s.charAt(i) - '0';\n        }\n        int i = 0;\n        while(i < n) {\n            if(arr[i] == arr[i]) {\n                i++;\n            } else {\n                break;\n            }\n        }\n        return i == n;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        Stack<Integer> stack = new Stack<Integer>();\n        int n = s.length();\n        for (int i = 0; i < n; i++) {\n            int digit = s.charAt(i) - '0';\n            if (stack.empty() || stack.peek() != digit) {\n                stack.push(digit);\n            } else {\n                stack.pop();\n            }\n        }\n        return stack.empty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        if (s == null || s.length() == 0) {\n            return true;\n        }\n        int n = s.length();\n        int[] dp = new int[n];\n        Arrays.fill(dp, 1);\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (s.charAt(i) == s.charAt(j)) {\n                    dp[i] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (dp[i] == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        int n = s.length();\n        int[] arr = new int[n];\n        for(int i = 0; i < n; i++)\n            arr[i] = s.charAt(i) - '0';\n        int sum = 0;\n        for(int i = 0; i < n; i++)\n            sum += arr[i] * arr[i];\n        return sum == 1;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        int n = s.length();\n        int[] arr = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr[i] = s.charAt(i) - '0';\n        }\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                if(arr[i] == arr[j]) {\n                    arr[j] = 0;\n                    count++;\n                }\n            }\n        }\n        return count == 1;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> result = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 90.0) {\n                result.add(\"A\");\n            } else if (grade >= 80.0) {\n                result.add(\"B\");\n            } else if (grade >= 70.0) {\n                result.add(\"C\");\n            } else if (grade >= 60.0) {\n                result.add(\"D\");\n            } else if (grade >= 50.0) {\n                result.add(\"F\");\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> result = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 90.0 && grade <= 100.0) {\n                result.add(\"A\");\n            } else if (grade >= 80.0 && grade <= 89.9) {\n                result.add(\"B\");\n            } else if (grade >= 70.0 && grade <= 79.9) {\n                result.add(\"C\");\n            } else if (grade >= 60.0 && grade <= 69.9) {\n                result.add(\"D\");\n            } else if (grade >= 0.0 && grade <= 59.9) {\n                result.add(\"F\");\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> result = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 90) {\n                result.add(\"A\");\n            } else if (grade >= 80) {\n                result.add(\"B\");\n            } else if (grade >= 70) {\n                result.add(\"C\");\n            } else if (grade >= 60) {\n                result.add(\"D\");\n            } else if (grade >= 50) {\n                result.add(\"F\");\n            } else {\n                result.add(grade + \"\");\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> result = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 90) {\n                result.add(\"A+\");\n            } else if (grade >= 80) {\n                result.add(\"A\");\n            } else if (grade >= 70) {\n                result.add(\"A-\");\n            } else if (grade >= 60) {\n                result.add(\"B+\");\n            } else if (grade >= 50) {\n                result.add(\"B\");\n            } else if (grade >= 40) {\n                result.add(\"B-\");\n            } else if (grade >= 30) {\n                result.add(\"C+\");\n            } else if (grade >= 20) {\n                result.add(\"C\");\n            } else if (grade >= 10) {\n                result.add(\"C-\");\n            } else if (grade >= 0) {\n                result.add(\"D\");\n            } else {\n                result.add(\"F\");\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> result = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 90.0 && grade <= 100.0) {\n                result.add(\"A\");\n            } else if (grade >= 80.0 && grade <= 89.9) {\n                result.add(\"B\");\n            } else if (grade >= 70.0 && grade <= 79.9) {\n                result.add(\"C\");\n            } else if (grade >= 60.0 && grade <= 69.9) {\n                result.add(\"D\");\n            } else if (grade >= 0.0 && grade <= 59.9) {\n                result.add(\"F\");\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> result = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 90.0 && grade <= 100.0) {\n                result.add(\"A\");\n            } else if (grade >= 80.0 && grade <= 89.9) {\n                result.add(\"B\");\n            } else if (grade >= 70.0 && grade <= 79.9) {\n                result.add(\"C\");\n            } else if (grade >= 60.0 && grade <= 69.9) {\n                result.add(\"D\");\n            } else if (grade >= 0.0 && grade <= 59.9) {\n                result.add(\"F\");\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> result = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 90.0 && grade <= 100.0) {\n                result.add(\"A\");\n            } else if (grade >= 80.0 && grade <= 89.9) {\n                result.add(\"B\");\n            } else if (grade >= 70.0 && grade <= 79.9) {\n                result.add(\"C\");\n            } else if (grade >= 60.0 && grade <= 69.9) {\n                result.add(\"D\");\n            } else if (grade >= 0.0 && grade <= 59.9) {\n                result.add(\"F\");\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> result = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 90.0) {\n                result.add(\"A\");\n            } else if (grade >= 80.0) {\n                result.add(\"B\");\n            } else if (grade >= 70.0) {\n                result.add(\"C\");\n            } else if (grade >= 60.0) {\n                result.add(\"D\");\n            } else if (grade >= 50.0) {\n                result.add(\"E\");\n            } else {\n                result.add(\"F\");\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> result = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 90.0 && grade <= 100.0) {\n                result.add(\"A\");\n            } else if (grade >= 80.0 && grade <= 89.9) {\n                result.add(\"A-\");\n            } else if (grade >= 70.0 && grade <= 79.9) {\n                result.add(\"B\");\n            } else if (grade >= 60.0 && grade <= 69.9) {\n                result.add(\"B-\");\n            } else if (grade >= 50.0 && grade <= 59.9) {\n                result.add(\"C\");\n            } else if (grade >= 40.0 && grade <= 49.9) {\n                result.add(\"C-\");\n            } else if (grade >= 30.0 && grade <= 39.9) {\n                result.add(\"D\");\n            } else if (grade >= 20.0 && grade <= 29.9) {\n                result.add(\"D-\");\n            } else {\n                result.add(\"F\");\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> result = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 90.0) {\n                result.add(\"A+\");\n            } else if (grade >= 80.0) {\n                result.add(\"A\");\n            } else if (grade >= 70.0) {\n                result.add(\"A-\");\n            } else if (grade >= 60.0) {\n                result.add(\"B+\");\n            } else if (grade >= 50.0) {\n                result.add(\"B\");\n            } else if (grade >= 40.0) {\n                result.add(\"B-\");\n            } else if (grade >= 30.0) {\n                result.add(\"C+\");\n            } else if (grade >= 20.0) {\n                result.add(\"C\");\n            } else if (grade >= 10.0) {\n                result.add(\"C-\");\n            } else {\n                result.add(\"D\");\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> result = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 90.0 && grade <= 100.0) {\n                result.add(\"A\");\n            } else if (grade >= 80.0 && grade <= 89.9) {\n                result.add(\"B\");\n            } else if (grade >= 70.0 && grade <= 79.9) {\n                result.add(\"C\");\n            } else if (grade >= 60.0 && grade <= 69.9) {\n                result.add(\"D\");\n            } else if (grade >= 0.0 && grade <= 59.9) {\n                result.add(\"F\");\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> result = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 90.0) {\n                result.add(\"A+\");\n            } else if (grade >= 80.0) {\n                result.add(\"A\");\n            } else if (grade >= 70.0) {\n                result.add(\"A-\");\n            } else if (grade >= 60.0) {\n                result.add(\"B+\");\n            } else if (grade >= 50.0) {\n                result.add(\"B\");\n            } else if (grade >= 40.0) {\n                result.add(\"B-\");\n            } else if (grade >= 30.0) {\n                result.add(\"C+\");\n            } else if (grade >= 20.0) {\n                result.add(\"C\");\n            } else if (grade >= 10.0) {\n                result.add(\"C-\");\n            } else if (grade >= 0.0) {\n                result.add(\"D\");\n            } else {\n                result.add(\"F\");\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> result = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 3.8) {\n                result.add(\"A\");\n            } else if (grade >= 3.0 && grade < 3.8) {\n                result.add(\"B\");\n            } else if (grade >= 2.0 && grade < 3.0) {\n                result.add(\"C\");\n            } else if (grade >= 1.0 && grade < 2.0) {\n                result.add(\"D\");\n            } else if (grade >= 0.0 && grade < 1.0) {\n                result.add(\"F\");\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> result = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 90) {\n                result.add(\"A+\");\n            } else if (grade >= 80) {\n                result.add(\"A\");\n            } else if (grade >= 70) {\n                result.add(\"A-\");\n            } else if (grade >= 60) {\n                result.add(\"B+\");\n            } else if (grade >= 50) {\n                result.add(\"B\");\n            } else if (grade >= 40) {\n                result.add(\"B-\");\n            } else if (grade >= 30) {\n                result.add(\"C+\");\n            } else if (grade >= 20) {\n                result.add(\"C\");\n            } else if (grade >= 10) {\n                result.add(\"C-\");\n            } else if (grade >= 0) {\n                result.add(\"D\");\n            } else {\n                result.add(\"F\");\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> result = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 38.0) {\n                result.add(\"A\");\n            } else if (grade >= 33.0) {\n                result.add(\"A-\");\n            } else if (grade >= 28.0) {\n                result.add(\"B+\");\n            } else if (grade >= 23.0) {\n                result.add(\"B\");\n            } else if (grade >= 18.0) {\n                result.add(\"B-\");\n            } else if (grade >= 13.0) {\n                result.add(\"C+\");\n            } else if (grade >= 9.0) {\n                result.add(\"C\");\n            } else if (grade >= 4.0) {\n                result.add(\"C-\");\n            } else if (grade >= 0.0) {\n                result.add(\"D\");\n            } else {\n                result.add(\"F\");\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> result = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 90) {\n                result.add(\"A\");\n            } else if (grade >= 80) {\n                result.add(\"B\");\n            } else if (grade >= 70) {\n                result.add(\"C\");\n            } else if (grade >= 60) {\n                result.add(\"D\");\n            } else if (grade >= 50) {\n                result.add(\"F\");\n            } else {\n                result.add(\"F\");\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> result = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 90.0) {\n                result.add(\"A+\");\n            } else if (grade >= 80.0) {\n                result.add(\"A\");\n            } else if (grade >= 70.0) {\n                result.add(\"A-\");\n            } else if (grade >= 60.0) {\n                result.add(\"B+\");\n            } else if (grade >= 50.0) {\n                result.add(\"B\");\n            } else if (grade >= 40.0) {\n                result.add(\"B-\");\n            } else if (grade >= 30.0) {\n                result.add(\"C+\");\n            } else if (grade >= 20.0) {\n                result.add(\"C\");\n            } else if (grade >= 10.0) {\n                result.add(\"C-\");\n            } else if (grade >= 0.0) {\n                result.add(\"D\");\n            } else {\n                result.add(\"F\");\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> result = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 90) {\n                result.add(\"A\");\n            } else if (grade >= 80) {\n                result.add(\"B\");\n            } else if (grade >= 70) {\n                result.add(\"C\");\n            } else if (grade >= 60) {\n                result.add(\"D\");\n            } else if (grade >= 50) {\n                result.add(\"F\");\n            } else {\n                result.add(\"F\");\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> result = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 90) {\n                result.add(\"A\");\n            } else if (grade >= 80) {\n                result.add(\"B\");\n            } else if (grade >= 70) {\n                result.add(\"C\");\n            } else if (grade >= 60) {\n                result.add(\"D\");\n            } else if (grade >= 50) {\n                result.add(\"F\");\n            } else {\n                result.add(\"F\");\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> result = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 90.0) {\n                result.add(\"A\");\n            } else if (grade >= 80.0) {\n                result.add(\"B\");\n            } else if (grade >= 70.0) {\n                result.add(\"C\");\n            } else if (grade >= 60.0) {\n                result.add(\"D\");\n            } else if (grade >= 50.0) {\n                result.add(\"F\");\n            } else {\n                result.add(\"F\");\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int l = string.length();\n        int i = 2;\n        while (i < l) {\n            if (string.charAt(i) == string.charAt(i + 1)) {\n                i++;\n            } else {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int length = string.length();\n        int[] prime = new int[length];\n        for (int i = 2; i < length; i++) {\n            if (string.charAt(i) == '0') {\n                prime[i] = 0;\n            } else {\n                prime[i] = 1;\n            }\n        }\n        for (int i = 2; i < length; i++) {\n            if (prime[i] == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int l = string.length();\n        int i = 2;\n        while (l % i == 0) {\n            i++;\n        }\n        return l == i;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int len = string.length();\n        if (len <= 1) {\n            return false;\n        }\n        int count = 0;\n        for (int i = 0; i < len; i++) {\n            if (string.charAt(i) == string.charAt(len - 1 - i)) {\n                count++;\n            }\n        }\n        return count % 2 == 0;\n    }\n\n    public boolean isPalindrome(String string) {\n        if (string == null || string.length() == 0) {\n            return false;\n        }\n        int len = string.length();\n        if (len <= 1) {\n            return false;\n        }\n        int count = 0;\n        for (int i = 0; i < len / 2; i++) {\n            if (string.charAt(i) == string.charAt(len - 1 - i)) {\n                count++;\n            }\n        }\n        return count % 2 == 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int n = string.length();\n        boolean[] prime = new boolean[n];\n        prime[0] = prime[1] = true;\n        for (int i = 2; i < n; i++) {\n            if (prime[i]) {\n                for (int j = 2 * i; j < n; j += i) {\n                    prime[j] = false;\n                }\n            }\n        }\n        return prime[n - 1];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int l = string.length();\n        int i = 2;\n        while (i < l) {\n            if (l % i == 0) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int length = string.length();\n        if (length < 2) {\n            return false;\n        }\n        int i = 2;\n        while (i < length) {\n            if (string.charAt(i) == string.charAt(i - 1)) {\n                i++;\n            } else {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == '0') {\n                return false;\n            }\n        }\n        return true;\n    }\n    public List<List<Integer>> threeSum(int[] nums) {\n        List<List<Integer>> result = new ArrayList<>();\n        Arrays.sort(nums);\n        for (int i = 0; i < nums.length; i++) {\n            if (i > 0 && nums[i] == nums[i - 1]) {\n                continue;\n            }\n            int left = i + 1;\n            int right = nums.length - 1;\n            while (left < right) {\n                if (nums[i] + nums[left] + nums[right] == 0) {\n                    List<Integer> list = new ArrayList<>();\n                    list.add(nums[i]);\n                    list.add(nums[left]);\n                    list.add(nums[right]);\n                    result.add(list);\n                    while (left < right && nums[left] == nums[left + 1]) {\n                        left++;\n                    }\n                    while (left < right && nums[right] == nums[right - 1]) {\n                        right--;\n                    }\n                    left++;\n                    right--;\n                } else if (nums[i] + nums[left] + nums[right] > 0) {\n                    right--;\n                } else {\n                    left++;\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int l = string.length();\n        int i = 2;\n        while (i <= l) {\n            if (l % i == 0) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int length = string.length();\n        int count = 0;\n        for (int i = 0; i < length; i++) {\n            if (string.charAt(i) == '0') {\n                count++;\n            } else {\n                break;\n            }\n        }\n        if (count == length) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int n = string.length();\n        int[] prime = new int[n];\n        prime[0] = 2;\n        for (int i = 2; i < n; i++) {\n            if (prime[i - 1] == 0) {\n                for (int j = 2 * i; j < n; j += i) {\n                    prime[j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (prime[i] == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int len = string.length();\n        if (len == 0) {\n            return false;\n        }\n        char[] chars = string.toCharArray();\n        int[] nums = new int[len];\n        for (int i = 0; i < len; i++) {\n            nums[i] = Integer.parseInt(String.valueOf(chars[i]));\n        }\n        for (int i = 2; i <= len; i++) {\n            if (nums[0] % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public String romanToInt(String s) {\n        if (s == null || s.length() == 0) {\n            return \"\";\n        }\n        if (s.length() == 1) {\n            return s;\n        }\n        if (s.length() == 2) {\n            return s;\n        }\n        if (s.length() == 3) {\n            if (s.compareTo(\"I\") == 0) {\n                return \"I\";\n            }\n            if (s.compareTo(\"II\") == 0) {\n                return \"II\";\n            }\n            if (s.compareTo(\"III\") == 0) {\n                return \"III\";\n            }\n        }\n        if (s.length() == 4) {\n            if (s.compareTo(\"IV\") == 0) {\n                return \"IV\";\n            }\n            if (s.compareTo(\"V\") == 0) {\n                return \"V\";\n            }\n            if (s.compareTo(\"VI\") == 0) {\n                return \"VI\";\n            }\n            if (s.compareTo(\"VII\") == 0) {\n                return \"VII\";\n            }\n            if (s.compareTo(\"VIII\") == 0) {\n                return \"VIII\";\n            }\n            if (s.compareTo(\"IX\") == 0) {\n                return \"IX\";\n            }\n            if (s.compareTo(\"X\") == 0) {\n                return \"X\";\n            }\n            if (s.compareTo(\"XI\") == 0) {\n                return \"XI\";\n            }\n            if (s.compareTo(\"XII\") == 0) {\n                return \"XII\";\n            }\n        }\n        if (s.length() == 5) {\n            if (s.compareTo(\"LV\") == 0) {\n                return \"LV\";\n            }\n            if (s.compareTo(\"L\") == 0) {\n                return \"L\";\n            }\n            if (s.compareTo(\"LI\") == 0) {\n                return \"LI\";\n            }\n            if (s.compareTo(\"LII\") == 0) {\n                return \"LII\";\n            }\n            if (s.compareTo(\"LVII\") == 0) {\n                return \"LVII\";\n            }\n            if (s.compareTo(\"LVIII\") == 0) {\n                return \"LVIII\";\n            }\n            if (s.compareTo(\"LIX\") == 0) {\n                return \"LIX\";\n            }\n            if (s.compareTo(\"LX\") == 0) {\n                return \"LX\";\n            }\n            if (s.compareTo(\"LXX\") == 0) {\n                return \"LXX\";\n            }\n            if (s.compareTo(\"LXXX\") == 0) {\n                return \"LXXX\";\n            }\n        }\n        if (s.length() == 6) {\n            if (s.compareTo(\"XC\") == 0) {\n                return \"XC\";\n            }\n            if (s.compareTo(\"C\") == 0) {\n                return \"C\";\n            }\n            if (s.compareTo(\"CI\") == 0) {\n                return \"CI\";\n            }\n            if (s.compareTo(\"CII\") == 0) {\n                return \"CII\";\n            }\n            if (s.compareTo(\"CV\") == 0) {\n                return \"CV\";\n            }\n            if (s.compareTo(\"CVS\") == 0) {\n                return \"CVS\";\n            }\n            if (s.compareTo(\"CVX\") == 0) {\n                return \"CVX\";\n            }\n            if (s.compareTo(\"CX\") == 0) {\n                return \"CX\";\n            }\n            if (s.compareTo(\"CXX\") == 0) {\n                return \"CXX\";\n            }\n            if (s.compareTo(\"CXXX\") == 0) {\n                return \"CXXX\";\n            }\n        }\n        if (s.length() == 7) {\n            if (s.compareTo(\"CC\") == 0) {\n                return \"CC\";\n            }\n            if (s.compareTo(\"CCS\") == 0) {\n                return \"CCS\";\n            }\n            if (s.compareTo(\"CCX\") == 0) {\n                return \"CCX\";\n            }\n            if (s.compareTo(\"CCXX\") == 0) {\n                return \"CCXX\";\n            }\n            if (s.compareTo(\"CCXXX\") == 0) {\n                return \"CCXXX\";\n            }\n            if (s.compareTo(\"CD\") == 0) {\n                return \"CD\";\n            }\n            if (s.compareTo(\"CDS\") == 0) {\n                return \"CDS\";\n            }\n            if (s.compareTo(\"CDX\") == 0) {\n                return \"CDX\";\n            }\n            if (s.compareTo(\"CDXX\") == 0) {\n                return \"CDXX\";\n            }\n            if (s.compareTo(\"CDXXX\") == 0) {\n                return \"CDXXX\";\n            }\n            if (s.compareTo(\"D\") == 0) {\n                return \"D\";\n            }\n            if (s.compareTo(\"DS\") == 0) {\n                return \"DS\";\n            }\n            if (s.compareTo(\"DX\") == 0) {\n                return \"DX\";\n            }\n            if (s.compareTo(\"DXX\") == 0) {\n                return \"DXX\";\n            }\n            if (s.compareTo(\"DXXX\") == 0) {\n                return \"DXXX\";\n            }\n            if (s.compareTo(\"DC\") == 0) {\n                return \"DC\";\n            }\n            if (s.compareTo(\"DCS\") == 0) {\n                return \"DCS\";\n            }\n            if (s.compareTo(\"DCX\") == 0) {\n                return \"DCX\";\n            }\n            if (s.compareTo(\"DCXX\") == 0) {\n                return \"DCXX\";\n            }\n            if (s.compareTo(\"DCXXX\") == 0) {\n                return \"DCXXX\";\n            }\n            if (s.compareTo(\"DCC\") == 0) {\n                return \"DCC\";\n            }\n            if (s.compareTo(\"DCCS\") == 0) {\n                return \"DCCS\";\n            }\n            if (s.compareTo(\"DCCX\") == 0) {\n                return \"DCCX\";\n            }\n            if (s.compareTo(\"DCCXX\") == 0) {\n                return \"DCCXX\";\n            }\n            if (s.compareTo(\"DCCXXX\") == 0) {\n                return \"DCCXXX\";\n            }\n            if (s.compareTo(\"DCCC\") == 0) {\n                return \"DCCC\";\n            }\n            if (s.compareTo(\"DCCCC\") == 0) {\n                return \"DCCCC\";\n            }\n        }\n        if (s.length() == 8) {\n            if (s.compareTo(\"DCCC\") == 0) {\n                return \"DCCC\";\n            }\n            if (s.compareTo(\"DCCCC\") == 0) {\n                return \"DCCCC\";\n            }\n            if (s.compareTo(\"DCCXXX\") == 0) {\n                return \"DCCXXX\";\n            }\n            if (s.compareTo(\"DCCXX\") == 0) {\n                return \"DCCXX\";\n            }\n            if (s.compareTo(\"DCCX\") == 0) {\n                return \"DCCX\";\n            }\n            if (s.compareTo(\"DCCS\") == 0) {\n                return \"DCCS\";\n            }\n            if (s.compareTo(\"DCC\") == 0) {\n                return \"DCC\";\n            }\n            if (s.compareTo(\"DCS\") == 0) {\n                return \"DCS\";\n            }\n            if (s.compareTo(\"DC\") == 0) {\n                return \"DC\";\n            }\n            if (s.compareTo(\"CD\") == 0) {\n                return \"CD\";\n            }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int n = string.length();\n        int[] prime = new int[n];\n        for (int i = 2; i < n; i++) {\n            if (string.charAt(i) == '0') {\n                prime[i] = 0;\n            } else {\n                prime[i] = 1;\n            }\n        }\n        for (int i = 2; i < n; i++) {\n            if (prime[i] == 1) {\n                for (int j = i + 1; j < n; j++) {\n                    if (string.charAt(j) == '0') {\n                        prime[j] = 0;\n                    } else {\n                        prime[j] = 1;\n                    }\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (prime[i] == 1) {\n                max = Math.max(max, i - left + 1);\n            }\n        }\n        return max == 0;\n    }\n\n    public int maxArea(int[] height) {\n        int max = 0;\n        int left = 0;\n        int right = height.length - 1;\n        while (left < right) {\n            if (height[left] < height[right]) {\n                max = Math.max(max, right - left + 1);\n                left++;\n            } else {\n                right--;\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int len = string.length();\n        int i = 2;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int a = 0;\n        int b = 0;\n        int c ="], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int l = string.length();\n        int i = 2;\n        while (i <= l) {\n            if (l % i == 0) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int length = string.length();\n        if (length == 1) {\n            return false;\n        }\n        int i = 2;\n        while (i <= length) {\n            if (string.charAt(i - 1) == string.charAt(length - i + 1)) {\n                i++;\n            } else {\n                break;\n            }\n        }\n        return i == length;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int n = string.length();\n        int[] prime = new int[n];\n        for (int i = 2; i <= n; i++) {\n            if (prime[i - 1] == 0) {\n                for (int j = 2; j * i <= n; j++) {\n                    prime[i - 1] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (prime[i] == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int n = string.length();\n        int[] prime = new int[n];\n        for (int i = 2; i <= n; i++) {\n            if (prime[i - 1] == 0) {\n                for (int j = 2; j * i <= n; j++) {\n                    prime[i - 1] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (prime[i] == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int n = string.length();\n        boolean[] prime = new boolean[n];\n        prime[0] = prime[1] = true;\n        for (int i = 2; i < n; i++) {\n            if (prime[i]) {\n                for (int j = 2 * i; j < n; j += i) {\n                    prime[j] = false;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (prime[i]) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int l = string.length();\n        int i = 2;\n        while (i < l) {\n            if (string.charAt(i) == string.charAt(i + 1)) {\n                i++;\n            } else {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = i;\n        }\n        Arrays.sort(arr);\n        int start = 0;\n        int end = n - 1;\n        while (start < end) {\n            if (arr[start] == arr[end]) {\n                start++;\n                end--;\n            } else {\n                return arr[start] == arr[end] ? 1 : 0;\n            }\n        }\n        return arr[start] == arr[end] ? 1 : 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        int start = 0;\n        int end = 0;\n        int temp = 0;\n        while (n > 0) {\n            temp = n % 2;\n            n = n / 2;\n            if (temp == 1) {\n                count++;\n                start++;\n            } else {\n                count--;\n                end++;\n            }\n        }\n        return count;\n    }\n\n    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {\n        List<List<Integer>> result = new ArrayList<>();\n        if (root == null) {\n            return result;\n        }\n        List<Integer> level1 = new ArrayList<>();\n        List<Integer> level2 = new ArrayList<>();\n        level1.add(root.val);\n        level2.add(root.val);\n        result.add(level1);\n        result.add(level2);\n        if (root.left != null) {\n            level1.add(root.left.val);\n            level2.add(root.left.val);\n            result.add(level1);\n            result.add(level2);\n        }\n        if (root.right != null) {\n            level1.add(root.right.val);\n            level2.add(root.right.val);\n            result.add(level1);\n            result.add(level2);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int ans = 0;\n        for (int i = 1; i <= n; i++) {\n            ans += (int) Math.pow(10, i);\n        }\n        return ans;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        Solution s = new Solution();\n        System.out.println(s.startsOneEnds(n));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = i + 1;\n        }\n        Arrays.sort(arr);\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == 1) {\n                ans++;\n            }\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        String s = \"ababab\";\n        int start = 0;\n        int end = 0;\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            if (s.charAt(i) == 'a') {\n                start = i;\n            }\n            if (s.charAt(i) == 'b') {\n                end = i;\n            }\n            if (start != end) {\n                int len = end - start + 1;\n                if (len > max) {\n                    max = len;\n                }\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        int start = 0;\n        int end = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                start = i;\n            } else {\n                end = i;\n            }\n            if (start == end) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            count += (i == 1) ? 1 : 0;\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = i;\n        }\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for(int i = 1; i <= n; i++) {\n            if(i % 2 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int[] roman = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        int i = 0;\n        while (n >= roman[i]) {\n            n -= roman[i];\n            i++;\n        }\n        return i;\n    }\n\n    public String intToRoman(int num) {\n        String[] roman = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String result = \"\";\n        int i = startsOneEnds(num);\n        for (int j = 0; j < i; j++) {\n            result += roman[j];\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int[] dp = new int[n];\n        dp[0] = 1;\n        for (int i = 1; i < n; i++) {\n            dp[i] = 1;\n            for (int j = 0; j < i; j++) {\n                if (s.charAt(j) == s.charAt(i)) {\n                    dp[i] = Math.max(dp[i], dp[j] + 2);\n                }\n            }\n        }\n        return dp[n - 1];\n    }\n\n    public String longestPalindrome(String s) {\n        int n = s.length();\n        int[] dp = new int[n];\n        dp[0] = 1;\n        for (int i = 1; i < n; i++) {\n            dp[i] = 1;\n            for (int j = 0; j < i; j++) {\n                if (s.charAt(j) == s.charAt(i)) {\n                    dp[i] = Math.max(dp[i], dp[j] + 2);\n                }\n            }\n        }\n        int max = 0;\n        String res = \"\";\n        for (int i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n                res = s.substring(i - max + 1, i + 1);\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int[] preorder = new int[n];\n        int[] inorder = new int[n];\n        for (int i = 0; i < n; i++) {\n            preorder[i] = i;\n            inorder[i] = i;\n        }\n        int i = 0;\n        int j = n - 1;\n        while (i < j) {\n            if (preorder[i] < preorder[j]) {\n                i++;\n            } else {\n                j--;\n            }\n        }\n        return i;\n    }\n\n    public TreeNode buildTree(int[] preorder, int[] inorder) {\n        return buildTree(preorder, inorder, 0, preorder.length - 1, 0, inorder.length - 1);\n    }\n\n    public TreeNode buildTree(int[] preorder, int[] inorder, int start, int end, int preStart, int preEnd) {\n        if (start > end) {\n            return null;\n        }\n        int rootIndex = (start + end) / 2;\n        TreeNode root = new TreeNode(preorder[rootIndex]);\n        root.left = buildTree(preorder, inorder, start, rootIndex - 1, preStart, preStart + rootIndex - start);\n        root.right = buildTree(preorder, inorder, rootIndex + 1, end, preStart + rootIndex - start + 1, preEnd);\n        return root;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= n; j++) {\n                if (i + j == n) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int[] arr = {0, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824, 2147483648, 4294967296, 8589934592, 17179869184, 34359738368, 68719476736, 137438953472, 274877906944, 549755813888, 1099511627776, 2199023255552, 4398046511104, 8796093022208, 17592186044416, 35184372088832, 70368744177664, 140737488355328, 281474976710656, 562949953421312, 1125899906842624, 2251799813685248, 4503599627370496, 9007199254740992, 18014398509481984, 36028797018963968, 72057594037927936, 144115188075855872, 288230376151711744, 576460752303423488, 1152921504606846976, 2305843009213693952, 4611686018427387904, 9223372036854775808, 18446744073709551616, 36893488147419103232, 73786976294838206464, 147573952589676412928, 295147905179352825856, 590295810358705651712, 1180591620717411303424, 2361183241434822606848, 4722366482869645213696, 9444732965739290427392, 18889465931478580854784, 37778931862957161709568, 75557863725914323419136, 151115727451828646838272, 302231454903657293676544, 604462909807314587353088, 1208925819614629174706176, 2417851639229258349412352, 4835703278458516698824704, 9671406556917033397649408, 19342813113834066795298816, 38685626227668133590597632, 77371252455336267181195264, 154742504910672534362390528, 309485009821345068724781056, 618970019642690137449562112, 1237940039285380274899124224, 2475880078570760549798248448, 4951760157141521099596496896, 9903520314283042199192993792, 19807040628566084398385987584, 39614081257132168796771975168, 79228162514264337593543950336, 158456325028528675187087900672, 316912650057057350374175801344, 633825300114114700748351602688, 1267650600228229401496703205376, 2535301200456458802993406410752, 5070602400912917605986812821504, 10141204801825835211973625643008, 20282409603651670423947251286016, 40564819207303340847894502572032, 8112963841460\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int ans = 0;\n        for(int i = 1; i <= n; i++) {\n            if(i % 2 == 0) {\n                ans += i;\n            }\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = i;\n        }\n        int start = 0, end = 0;\n        int max = 0;\n        while (end < n) {\n            int count = 0;\n            for (int i = start; i < end; i++) {\n                if (arr[i] == arr[i + 1]) {\n                    count++;\n                } else {\n                    break;\n                }\n            }\n            if (count > max) {\n                max = count;\n                start = end - max + 1;\n                end = start + max - 1;\n            } else {\n                end++;\n            }\n        }\n        return end - start + 1;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int ans = 0;\n        int i = 1;\n        while(i <= n) {\n            if(i % 2 == 0) {\n                ans += i;\n            }\n            i++;\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int ans = 0;\n        int i = 1;\n        while(i <= n) {\n            if(i % 2 == 0) {\n                ans += i;\n            }\n            i++;\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int[] dp = new int[n];\n        dp[0] = 1;\n        for (int i = 1; i < n; i++) {\n            dp[i] = 1;\n            for (int j = 0; j < i; j++) {\n                if (i - j >= 2 && (i - j) % 2 == 0 && (i - j) / 2 == j) {\n                    dp[i] = Math.max(dp[i], dp[j] + 2);\n                }\n            }\n        }\n        return dp[n - 1];\n    }\n\n    public String longestPalindrome(String s) {\n        int n = s.length();\n        int[] dp = new int[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = 1;\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (i - j >= 2 && (i - j) % 2 == 0 && (i - j) / 2 == j) {\n                    dp[i] = Math.max(dp[i], dp[j] + 2);\n                }\n            }\n        }\n        int max = 0;\n        String res = \"\";\n        for (int i = 0; i < n; i++) {\n            if (dp[i] > max) {\n                max = dp[i];\n                res = s.substring(i - max + 1, i + 1);\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String[] arr = new String[N];\n        for (int i = 0; i < N; i++) {\n            arr[i] = \"0\";\n        }\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < N; j++) {\n                if (i == j) {\n                    arr[i] = \"1\";\n                }\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < N; i++) {\n            sb.append(arr[i]);\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String[] arr = new String[N];\n        for(int i = 0; i < N; i++) {\n            arr[i] = String.valueOf(i+1);\n        }\n        return Arrays.toString(arr);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        if (N == 0) return \"\";\n        String[] pre = new String[N];\n        String[] in = new String[N];\n        for (int i = 0; i < N; i++) {\n            pre[i] = String.valueOf(i);\n            in[i] = String.valueOf(i);\n        }\n        return solve(N, pre, in);\n    }\n\n    public String solve(int N, String[] pre, String[] in) {\n        if (N == 0) return \"\";\n        String[] left = new String[N];\n        String[] right = new String[N];\n        for (int i = 0; i < N; i++) {\n            if (i < N / 2) {\n                left[i] = pre[i];\n                right[i] = in[i];\n            } else {\n                left[i] = in[i];\n                right[i] = pre[i];\n            }\n        }\n        return solve(N / 2, left, right) + \"->\" + solve(N / 2, right, left);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        StringBuilder sb = new StringBuilder();\n        Queue<TreeNode> q = new LinkedList<>();\n        q.add(new TreeNode(N));\n        while(!q.isEmpty()) {\n            int size = q.size();\n            for(int i = 0; i < size; i++) {\n                TreeNode node = q.poll();\n                if(node.left != null) q.add(node.left);\n                if(node.right != null) q.add(node.right);\n                sb.append(node.val).append(\",\");\n            }\n            sb.deleteCharAt(sb.length()-1);\n            sb.append(\"\\n\");\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String s = \"\";\n        for (int i = 0; i < N; i++) {\n            s += (i + 1) + \" \";\n        }\n        return s;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String s = \"\";\n        for (int i = 0; i < N; i++) {\n            s += \"0\";\n        }\n        return s;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String[] primeFactors = { \"2\", \"3\", \"5\", \"7\", \"11\", \"13\", \"17\", \"19\", \"23\", \"29\", \"31\", \"37\", \"41\", \"43\", \"47\", \"53\", \"59\", \"61\", \"67\", \"71\", \"73\", \"79\", \"83\", \"89\", \"97\" };\n        String[] primeFactors2 = { \"2\", \"3\", \"5\", \"7\", \"11\", \"13\", \"17\", \"19\", \"23\", \"29\", \"31\", \"37\", \"41\", \"43\", \"47\", \"53\", \"59\", \"61\", \"67\", \"71\", \"73\", \"79\", \"83\", \"89\", \"97\" };\n        String[] primeFactors3 = { \"2\", \"3\", \"5\", \"7\", \"11\", \"13\", \"17\", \"19\", \"23\", \"29\", \"31\", \"37\", \"41\", \"43\", \"47\", \"53\", \"59\", \"61\", \"67\", \"71\", \"73\", \"79\", \"83\", \"89\", \"97\" };\n        String[] primeFactors4 = { \"2\", \"3\", \"5\", \"7\", \"11\", \"13\", \"17\", \"19\", \"23\", \"29\", \"31\", \"37\", \"41\", \"43\", \"47\", \"53\", \"59\", \"61\", \"67\", \"71\", \"73\", \"79\", \"83\", \"89\", \"97\" };\n        String[] primeFactors5 = { \"2\", \"3\", \"5\", \"7\", \"11\", \"13\", \"17\", \"19\", \"23\", \"29\", \"31\", \"37\", \"41\", \"43\", \"47\", \"53\", \"59\", \"61\", \"67\", \"71\", \"73\", \"79\", \"83\", \"89\", \"97\" };\n        String[] primeFactors6 = { \"2\", \"3\", \"5\", \"7\", \"11\", \"13\", \"17\", \"19\", \"23\", \"29\", \"31\", \"37\", \"41\", \"43\", \"47\", \"53\", \"59\", \"61\", \"67\", \"71\", \"73\", \"79\", \"83\", \"89\", \"97\" };\n        String[] primeFactors7 = { \"2\", \"3\", \"5\", \"7\", \"11\", \"13\", \"17\", \"19\", \"23\", \"29\", \"31\", \"37\", \"41\", \"43\", \"47\", \"53\", \"59\", \"61\", \"67\", \"71\", \"73\", \"79\", \"83\", \"89\", \"97\" };\n        String[] primeFactors8 = { \"2\", \"3\", \"5\", \"7\", \"11\", \"13\", \"17\", \"19\", \"23\", \"29\", \"31\", \"37\", \"41\", \"43\", \"47\", \"53\", \"59\", \"61\", \"67\", \"71\", \"73\", \"79\", \"83\", \"89\", \"97\" };\n        String[] primeFactors9 = { \"2\", \"3\", \"5\", \"7\", \"11\", \"13\", \"17\", \"19\", \"23\", \"29\", \"31\", \"37\", \"41\", \"43\", \"47\", \"53\", \"59\", \"61\", \"67\", \"71\", \"73\", \"79\", \"83\", \"89\", \"97\" };\n        String[] primeFactors10 = { \"2\", \"3\", \"5\", \"7\", \"11\", \"13\", \"17\", \"19\", \"23\", \"29\", \"31\", \"37\", \"41\", \"43\", \"47\", \"53\", \"59\", \"61\", \"67\", \"71\", \"73\", \"79\", \"83\", \"89\", \"97\" };\n        String[] primeFactors11 = { \"2\", \"3\", \"5\", \"7\", \"11\", \"13\", \"17\", \"19\", \"23\", \"29\", \"31\", \"37\", \"41\", \"43\", \"47\", \"53\", \"59\", \"61\", \"67\", \"71\", \"73\", \"79\", \"83\", \"89\", \"97\" };\n        String[] primeFactors12 = { \"2\", \"3\", \"5\", \"7\", \"11\", \"13\", \"17\", \"19\", \"23\", \"29\", \"31\", \"37\", \"41\", \"43\", \"47\", \"53\", \"59\", \"61\", \"67\", \"71\", \"73\", \"79\", \"83\", \"89\", \"97\" };\n        String[] primeFactors13 = { \"2\", \"3\", \"5\", \"7\", \"11\", \"13\", \"17\", \"19\", \"23\", \"29\", \"31\", \"37\", \"41\", \"43\", \"47\", \"53\", \"59\", \"61\", \"67\", \"71\", \"73\", \"79\", \"83\", \"89\", \"97\" };\n        String[] primeFactors14 = { \"2\", \"3\", \"5\", \"7\", \"11\", \"13\", \"17\", \"19\", \"23\", \"29\", \"31\", \"37\", \"41\", \"43\", \"47\", \"53\", \"59\", \"61\", \"67\", \"71\", \"73\", \"79\", \"83\", \"89\", \"97\" };\n        String[] primeFactors15 = { \"2\", \"3\", \"5\", \"7\", \"11\", \"13\", \"17\", \"19\", \"23\", \"29\", \"31\", \"37\", \"41\", \"43\", \"47\", \"53\", \"59\", \"61\", \"67\", \"71\", \"73\", \"79\", \"83\", \"89\", \"97\" };\n        String[] primeFactors16 = { \"2\", \"3\", \"5\", \"7\", \"11\", \"13\", \"17\", \"19\", \"23\", \"29\", \"31\", \"37\", \"41\", \"43\", \"47\", \"53\", \"59\", \"61\", \"67\", \"71\", \"73\", \"79\", \"83\", \"89\", \"97\" };\n        String[] primeFactors17 = { \"2\", \"3\", \"5\", \"7\", \"11\", \"13\", \"17\", \"19\", \"23\", \"29\", \"31\", \"37\", \"41\", \"43\", \"47\", \"53\", \"59\", \"61\", \"67\", \"71\", \"73\", \"79\", \"83\", \"89\", \"97\" }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String ans = \"\";\n        Queue<TreeNode> q = new LinkedList<>();\n        for (int i = 0; i < N; i++) {\n            q.offer(null);\n        }\n        while (!q.isEmpty()) {\n            int size = q.size();\n            for (int i = 0; i < size; i++) {\n                TreeNode node = q.poll();\n                if (node == null) {\n                    continue;\n                }\n                ans += node.val + \" \";\n                q.offer(node.left);\n                q.offer(node.right);\n            }\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String[] arr = new String[N];\n        for (int i = 0; i < N; i++) {\n            arr[i] = String.valueOf(i);\n        }\n        Arrays.sort(arr);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < N; i++) {\n            if (i > 0 && arr[i] == arr[i - 1]) {\n                continue;\n            }\n            int j = i + 1;\n            int k = N - 1;\n            while (j < k) {\n                if (arr[i] + arr[j] + arr[k] == 0) {\n                    sb.append(arr[i]).append(\" \").append(arr[j]).append(\" \").append(arr[k]).append(\"\\n\");\n                    j++;\n                    k--;\n                } else if (arr[i] + arr[j] + arr[k] < 0) {\n                    j++;\n                } else {\n                    k--;\n                }\n            }\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String[] s = new String[N];\n        for (int i = 0; i < N; i++) {\n            s[i] = String.valueOf(i + 1);\n        }\n        return s[0];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String[] arr = new String[N];\n        for(int i = 0; i < N; i++) {\n            arr[i] = \"0\";\n        }\n        for(int i = 0; i < N; i++) {\n            for(int j = 0; j < N; j++) {\n                if(i == j) {\n                    arr[i] = \"1\";\n                }\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < N; i++) {\n            for(int j = 0; j < N; j++) {\n                if(i == j) {\n                    sb.append(\"1\");\n                } else {\n                    sb.append(\"0\");\n                }\n            }\n            sb.append(\" \");\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String[] roman = {\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\", \"X\", \"XI\", \"XII\"};\n        String result = \"\";\n        while (N > 0) {\n            int index = roman.length - 1;\n            while (N >= roman[index].length()) {\n                result = roman[index] + result;\n                N -= roman[index].length();\n            }\n            index--;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String[] str = new String[N];\n        for (int i = 0; i < N; i++) {\n            str[i] = String.valueOf(i + 1);\n        }\n        return String.join(\"\", str);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String[] str = new String[N];\n        for (int i = 0; i < N; i++) {\n            str[i] = String.valueOf(i);\n        }\n        return str[0];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        int sum = 0;\n        StringBuild\n\n```\n\n----------------------------------------------\n<div style=\"display: flex;justify-content: space-between;align-items: center;\">\n<p><a href=\"https://books.halfrost.com/leetcode/ChapterFour/0001.TwoSum/\">\u2b05\ufe0f\u4e0a\u4e00\u9875</a></p>\n<p><a href=\"https://books.halfrost.com/leetcode/ChapterFour/0003.LongestIncreasingSubsequence/\">\u4e0b\u4e00\u9875\u27a1\ufe0f</a></p>\n</div>\n"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String[] arr = new String[N];\n        for(int i = 0; i < N; i++) {\n            arr[i] = String.valueOf(i + 1);\n        }\n        return Arrays.toString(arr);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String[] arr = new String[N];\n        for(int i = 0; i < N; i++) {\n            arr[i] = String.valueOf(i);\n        }\n        Arrays.sort(arr);\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < N; i++) {\n            sb.append(arr[i]);\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        StringBuilder sb = new StringBuilder();\n        while (N != 0) {\n            sb.append(N % 2);\n            N /= 2;\n        }\n        return sb.reverse().toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String[] arr = new String[N];\n        for (int i = 0; i < N; i++) {\n            arr[i] = String.valueOf(i + 1);\n        }\n        return String.join(\"\", arr);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String[] str = new String[N];\n        for(int i = 0; i < N; i++) {\n            str[i] = String.valueOf(i + 1);\n        }\n        return str[0];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> lst = new ArrayList<>();\n        lst.add(1);\n        lst.add(2);\n        lst.add(3);\n        lst.add(4);\n        lst.add(5);\n        System.out.println(solution.add(lst));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 1; i < lst.size(); i++) {\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 1; i < lst.size(); i++) {\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 1; i < lst.size(); i++) {\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 1; i < lst.size(); i++) {\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Integer> lst = new ArrayList<Integer>();\n        lst.add(1);\n        lst.add(2);\n        lst.add(3);\n        System.out.println(s.add(lst));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        char[] arr = s.toCharArray();\n        Arrays.sort(arr);\n        return new String(arr);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        char[] arr = s.toCharArray();\n        int n = arr.length;\n        for (int i = 0; i < n; i++) {\n            int j = (int) (Math.random() * n);\n            char temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n        }\n        return new String(arr);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        char[] chars = s.toCharArray();\n        Arrays.sort(chars);\n        StringBuilder result = new StringBuilder();\n        for (char c : chars) {\n            result.append(c);\n        }\n        return result.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        char[] chars = s.toCharArray();\n        Arrays.sort(chars);\n        StringBuilder result = new StringBuilder();\n        for (char c : chars) {\n            result.append(c);\n        }\n        return result.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        char[] arr = s.toCharArray();\n        int n = arr.length;\n        int[] count = new int[26];\n        for (int i = 0; i < n; i++) {\n            count[arr[i] - 'a']++;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (count[i] > 0) {\n                count[i]--;\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n; i++) {\n            sb.append(arr[i]);\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        char[] arr = s.toCharArray();\n        Arrays.sort(arr);\n        return new String(arr);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        char[] arr = s.toCharArray();\n        Arrays.sort(arr);\n        return new String(arr);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        char[] chars = s.toCharArray();\n        Arrays.sort(chars);\n        StringBuilder result = new StringBuilder();\n        result.append(String.valueOf(chars));\n        return result.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        char[] arr = s.toCharArray();\n        int n = arr.length;\n        int[] count = new int[26];\n        for (int i = 0; i < n; i++) {\n            count[arr[i] - 'a']++;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (count[i] == 0) {\n                count[i] = n;\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n; i++) {\n            sb.append(arr[count[arr[i] - 'a'] - 1]);\n            count[arr[i] - 'a']--;\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] arr = s.split(\"\");\n        int n = arr.length;\n        int[] arr2 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr2[i] = arr[i].charAt(0) - 'a';\n        }\n        Arrays.sort(arr2);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n; i++) {\n            sb.append(arr[arr2[i]]);\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        char[] arr = s.toCharArray();\n        int n = arr.length;\n        for (int i = 0; i < n; i++) {\n            int j = (int) (Math.random() * n);\n            char temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n        }\n        return new String(arr);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        char[] arr = s.toCharArray();\n        Arrays.sort(arr);\n        StringBuilder sb = new StringBuilder();\n        for (char c : arr) {\n            sb.append(c);\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] arr = s.split(\"\");\n        Arrays.sort(arr);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < arr.length; i++) {\n            sb.append(arr[i]);\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        char[] arr = s.toCharArray();\n        Arrays.sort(arr);\n        return new String(arr);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        char[] arr = s.toCharArray();\n        Arrays.sort(arr);\n        return new String(arr);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        char[] arr = s.toCharArray();\n        Arrays.sort(arr);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < arr.length; i++) {\n            sb.append(arr[i]);\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        char[] arr = s.toCharArray();\n        Arrays.sort(arr);\n        return new String(arr);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        char[] arr = s.toCharArray();\n        Arrays.sort(arr);\n        return new String(arr);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] arr = s.split(\"\");\n        Arrays.sort(arr);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < arr.length; i++) {\n            sb.append(arr[i]);\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        char[] arr = s.toCharArray();\n        Arrays.sort(arr);\n        StringBuilder sb = new StringBuilder();\n        for (char c : arr) {\n            sb.append(c);\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> res = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++) {\n            List<Integer> row = new ArrayList<>();\n            for(int j = 0; j < lst.get(i).size(); j++) {\n                if(j == x) {\n                    row.add(lst.get(i).get(j));\n                } else {\n                    row.add(0);\n                }\n            }\n            res.add(row);\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> coords = new ArrayList<>();\n        if(lst.size() == 0) return coords;\n        int n = lst.size();\n        for(int i = 0; i < n; i++) {\n            List<Integer> row = new ArrayList<>();\n            for(int j = 0; j < x; j++) {\n                row.add(lst.get(i).get(j));\n            }\n            coords.add(row);\n        }\n        return coords;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = new ArrayList<>();\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (j == x) {\n                    row.add(lst.get(i).get(j));\n                } else {\n                    row.add(0);\n                }\n            }\n            result.add(row);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = new ArrayList<>();\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (j == x) {\n                    row.add(lst.get(i).get(j));\n                } else {\n                    row.add(0);\n                }\n            }\n            result.add(row);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> res = new ArrayList<>();\n        if (x == 0) {\n            res.add(lst);\n            return res;\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = new ArrayList<>();\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                row.add(lst.get(i).get(j));\n            }\n            row.add(lst.get(i).get(x - 1));\n            res.add(row);\n        }\n        return res;\n    }\n\n    public String longestPalindrome(String s) {\n        List<List<Integer>> lst = new ArrayList<>();\n        for (int i = 0; i < s.length(); i++) {\n            List<Integer> row = new ArrayList<>();\n            row.add(i);\n            lst.add(row);\n        }\n        for (int i = 0; i < s.length(); i++) {\n            for (int j = 0; j < s.length() - i; j++) {\n                int x = j + 1;\n                if (s.charAt(j) == s.charAt(j + 1)) {\n                    lst = getRow(lst, x);\n                }\n            }\n        }\n        String res = \"\";\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                res += lst.get(i).get(j);\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> coords = new ArrayList<>();\n        if (lst == null || lst.size() == 0) {\n            return coords;\n        }\n        List<Integer> row = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            row.add(lst.get(i).get(x));\n        }\n        coords.addAll(row);\n        row = new ArrayList<>();\n        for (int i = lst.size() - 1; i >= 0; i--) {\n            row.add(lst.get(i).get(x));\n        }\n        coords.addAll(row);\n        return coords;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        if (x == 0) {\n            result.add(lst);\n        } else {\n            for (int i = 0; i < lst.size(); i++) {\n                List<Integer> row = new ArrayList<>();\n                row.add(lst.get(i).get(x - 1));\n                row.addAll(getRow(lst.get(i), x - 1));\n                result.add(row);\n            }\n        }\n        return result;\n    }\n\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> coords = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = new ArrayList<>();\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (j == x) {\n                    row.add(lst.get(i).get(j));\n                } else {\n                    row.add(0);\n                }\n            }\n            coords.add(row);\n        }\n        return coords;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> coords = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = new ArrayList<>();\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    row.add(i);\n                    row.add(j);\n                }\n            }\n            coords.add(row);\n        }\n        return coords;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> res = new ArrayList<>();\n        if (x >= lst.size()) return res;\n        for (int i = 0; i < lst.get(x).size(); i++) {\n            List<Integer> row = new ArrayList<>();\n            for (int j = 0; j < lst.size(); j++) {\n                if (j == x) continue;\n                row.add(lst.get(j).get(i));\n            }\n            res.add(row);\n        }\n        return res;\n    }\n    public int longestCommonPre(String s) {\n        List<List<Integer>> lst = new ArrayList<>();\n        for (int i = 0; i < s.length(); i++) {\n            lst.add(new ArrayList<>());\n            lst.get(i).add(i);\n        }\n        for (int i = 1; i < s.length(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                for (int k = j + 1; k < lst.get(i).size(); k++) {\n                    lst.get(i).set(j, lst.get(i).get(j) + lst.get(i).get(k));\n                }\n            }\n        }\n        return lst.get(0).get(0);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> coords = new ArrayList<>();\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            int sum = 0;\n            for (int j = 0; j < row.size(); j++) {\n                sum += row.get(j);\n            }\n            if (sum > max) {\n                max = sum;\n            }\n        }\n        coords.add(new ArrayList<Integer>());\n        coords.get(0).add(max);\n        return coords;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> res = new ArrayList<>();\n        if (x == 0) {\n            res.add(lst);\n            return res;\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = new ArrayList<>();\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (j == x - 1) {\n                    row.add(lst.get(i).get(j));\n                } else {\n                    row.add(lst.get(i).get(j));\n                }\n            }\n            res.add(row);\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> res = new ArrayList<>();\n        List<Integer> temp = new ArrayList<>();\n        getRow(lst, x, temp, res);\n        return res;\n    }\n\n    private void getRow(List<List<Integer>> lst, int x, List<Integer> temp, List<List<Integer>> res) {\n        if (x == lst.size()) {\n            res.add(new ArrayList<>(temp));\n            return;\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            temp.add(lst.get(i).get(x));\n            getRow(lst, x + 1, temp, res);\n            temp.remove(temp.size() - 1);\n        }\n    }\n\n    public static void main(String[] args) {\n        List<List<Integer>> lst = new ArrayList<>();\n        lst.add(new ArrayList<>(Arrays.asList(1, 2, 3)));\n        lst.add(new ArrayList<>(Arrays.asList(1, 3, 2)));\n        lst.add(new ArrayList<>(Arrays.asList(2, 1, 3)));\n        lst.add(new ArrayList<>(Arrays.asList(2, 3, 1)));\n        lst.add(new ArrayList<>(Arrays.asList(3, 1, 2)));\n        lst.add(new ArrayList<>(Arrays.asList(3, 2, 1)));\n\n        List<List<Integer>> res = new Solution().getRow(lst, 0);\n        for (List<Integer> l : res) {\n            System.out.println(l);\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        if (lst == null || lst.size() == 0) {\n            return result;\n        }\n        if (x == 0) {\n            result.add(lst.get(0));\n            return result;\n        }\n        int len = lst.size();\n        for (int i = 0; i < len; i++) {\n            List<Integer> row = new ArrayList<>();\n            row.add(lst.get(i).get(0));\n            for (int j = 1; j < x; j++) {\n                row.add(lst.get(i).get(j));\n            }\n            result.add(row);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> coords = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = new ArrayList<>();\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (j == x) {\n                    row.add(lst.get(i).get(j));\n                } else {\n                    row.add(lst.get(i).get(j));\n                }\n            }\n            coords.add(row);\n        }\n        return coords;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> coords = new ArrayList<>();\n        if (x == 0) {\n            coords.add(lst);\n            return coords;\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = new ArrayList<>();\n            row.add(lst.get(i).get(x));\n            row.addAll(getRow(lst.get(i).subList(0, x), x - 1));\n            coords.add(row);\n        }\n        return coords;\n    }\n    public int maxDepth(TreeNode root) {\n        if (root == null) {\n            return 0;\n        }\n        int left = maxDepth(root.left);\n        int right = maxDepth(root.right);\n        return Math.max(left, right) + 1;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<List<Integer>>();\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            if (row.get(x) == 1) {\n                row.set(x, 0);\n                result.add(row);\n            }\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int m = sc.nextInt();\n        List<List<Integer>> lst = new ArrayList<List<Integer>>();\n        for (int i = 0; i < n; i++) {\n            lst.add(new ArrayList<Integer>());\n            for (int j = 0; j < m; j++) {\n                lst.get(i).add(sc.nextInt());\n            }\n        }\n        int x = sc.nextInt();\n        List<List<Integer>> result = getRow(lst, x);\n        for (int i = 0; i < result.size(); i++) {\n            for (int j = 0; j < result.get(i).size(); j++) {\n                System.out.print(result.get(i).get(j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<List<Integer>>();\n        if (lst.size() == 0) {\n            return result;\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            if (i == x) {\n                result.add(row);\n            } else {\n                row.add(0, 0);\n                result.add(row);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> res = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            if (row.get(x) == 0) {\n                continue;\n            }\n            row.set(x, row.get(x) - 1);\n            res.add(row);\n        }\n        return res;\n    }\n\n    public List<List<Integer>> getCol(List<List<Integer>> lst, int x) {\n        List<List<Integer>> res = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            if (row.get(x) == 0) {\n                continue;\n            }\n            row.set(x, row.get(x) - 1);\n            res.add(row);\n        }\n        return res;\n    }\n\n    public List<List<Integer>> getDiagonal(List<List<Integer>> lst, int x) {\n        List<List<Integer>> res = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            if (row.get(x) == 0) {\n                continue;\n            }\n            row.set(x, row.get(x) - 1);\n            res.add(row);\n        }\n        return res;\n    }\n\n    public List<List<Integer>> getSubMatrix(List<List<Integer>> lst, int x, int y, int w, int h) {\n        List<List<Integer>> res = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            List<Integer> row = lst.get(i);\n            if (row.get(x) == 0 || row.get(y) == 0) {\n                continue;\n            }\n            row.set(x, row.get(x) - 1);\n            row.set(y, row.get(y) - 1);\n            if (row.get(x) + row.get(y) == w * h) {\n                res.add(row);\n            }\n        }\n        return res;\n    }\n\n    public int getSum(List<List<Integer>> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == 1) {\n                    sum++;\n                }\n            }\n        }\n        return sum;\n    }\n\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> coords = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++) {\n            List<Integer> row = new ArrayList<>();\n            for(int j = 0; j < lst.get(i).size(); j++) {\n                if(j == x) {\n                    row.add(lst.get(i).get(j));\n                } else {\n                    row.add(0);\n                }\n            }\n            coords.add(row);\n        }\n        return coords;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        if (array.size() == 0) {\n            return array;\n        }\n        int min = array.get(0);\n        int max = array.get(0);\n        for (int i = 1; i < array.size(); i++) {\n            if (array.get(i) < min) {\n                min = array.get(i);\n            }\n            if (array.get(i) > max) {\n                max = array.get(i);\n            }\n        }\n        List<Integer> result = new ArrayList<>();\n        for (int i = min; i <= max; i++) {\n            int count = 0;\n            for (int j = 0; j < array.size(); j++) {\n                if (array.get(j) == i) {\n                    count++;\n                }\n            }\n            result.add(count);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < array.size(); i++) {\n            for (int j = 0; j < array.size() - i - 1; j++) {\n                if (array.get(j) > array.get(j + 1)) {\n                    int temp = array.get(j);\n                    array.set(j, array.get(j + 1));\n                    array.set(j + 1, temp);\n                }\n            }\n        }\n        for (int i = 0; i < array.size(); i++) {\n            result.add(array.get(i));\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        if (array == null || array.size() == 0) {\n            return array;\n        }\n        List<Integer> result = new ArrayList<>();\n        int left = 0;\n        int right = array.size() - 1;\n        while (left < right) {\n            if (array.get(left) > array.get(right)) {\n                result.add(array.get(left));\n                left++;\n            } else {\n                result.add(array.get(right));\n                right--;\n            }\n        }\n        result.add(array.get(left));\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Integer> stack = new Stack<>();\n        for (int i = 0; i < array.size(); i++) {\n            while (!stack.isEmpty() && array.get(i) > array.get(stack.peek())) {\n                result.add(stack.pop());\n            }\n            stack.push(i);\n        }\n        while (!stack.isEmpty()) {\n            result.add(stack.pop());\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        List<Integer> result = new ArrayList<>();\n        if (array == null || array.size() == 0) {\n            return result;\n        }\n        Arrays.sort(array.toArray());\n        for (int i = 0; i < array.size(); i++) {\n            result.add(array.get(i));\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        if (array == null || array.size() == 0) {\n            return array;\n        }\n        Arrays.sort(array.toArray());\n        return array;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        int n = array.size();\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (array.get(i) > array.get(j)) {\n                    int temp = array.get(i);\n                    array.set(i, array.get(j));\n                    array.set(j, temp);\n                }\n            }\n        }\n        return array;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < array.size(); i++) {\n            for (int j = 0; j < array.size() - i - 1; j++) {\n                if (array.get(j) > array.get(j + 1)) {\n                    int temp = array.get(j);\n                    array.set(j, array.get(j + 1));\n                    array.set(j + 1, temp);\n                }\n            }\n        }\n        for (int i = 0; i < array.size(); i++) {\n            result.add(array.get(i));\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        List<Integer> result = new ArrayList<>();\n        if (array == null || array.size() == 0) {\n            return result;\n        }\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n        if (sum == 0) {\n            result.add(array.get(0));\n        }\n        if (sum == 0) {\n            result.add(array.get(0));\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        if (array == null || array.size() == 0) {\n            return array;\n        }\n        int len = array.size();\n        int[] arr = new int[len];\n        for (int i = 0; i < len; i++) {\n            arr[i] = array.get(i);\n        }\n        Arrays.sort(arr);\n        for (int i = 0; i < len; i++) {\n            array.set(i, arr[i]);\n        }\n        return array;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        int n = array.size();\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = array.get(i);\n        }\n        Arrays.sort(arr);\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            result.add(arr[i]);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        int max = 0;\n        int maxIndex = 0;\n        for (int i = 0; i < array.size(); i++) {\n            if (array.get(i) > max) {\n                max = array.get(i);\n                maxIndex = i;\n            }\n        }\n        List<Integer> result = new ArrayList<>();\n        result.add(array.get(maxIndex));\n        for (int i = maxIndex + 1; i < array.size(); i++) {\n            if (array.get(i) > max) {\n                max = array.get(i);\n                maxIndex = i;\n            }\n        }\n        result.add(array.get(maxIndex));\n        for (int i = maxIndex + 1; i < array.size(); i++) {\n            if (array.get(i) > max) {\n                max = array.get(i);\n                maxIndex = i;\n            }\n        }\n        result.add(array.get(maxIndex));\n        for (int i = maxIndex + 1; i < array.size(); i++) {\n            if (array.get(i) > max) {\n                max = array.get(i);\n                maxIndex = i;\n            }\n        }\n        result.add(array.get(maxIndex));\n        for (int i = maxIndex + 1; i < array.size(); i++) {\n            if (array.get(i) > max) {\n                max = array.get(i);\n                maxIndex = i;\n            }\n        }\n        result.add(array.get(maxIndex));\n        for (int i = maxIndex + 1; i < array.size(); i++) {\n            if (array.get(i) > max) {\n                max = array.get(i);\n                maxIndex = i;\n            }\n        }\n        result.add(array.get(maxIndex));\n        for (int i = maxIndex + 1; i < array.size(); i++) {\n            if (array.get(i) > max) {\n                max = array.get(i);\n                maxIndex = i;\n            }\n        }\n        result.add(array.get(maxIndex));\n        for (int i = maxIndex + 1; i < array.size(); i++) {\n            if (array.get(i) > max) {\n                max = array.get(i);\n                maxIndex = i;\n            }\n        }\n        result.add(array.get(maxIndex));\n        for (int i = maxIndex + 1; i < array.size(); i++) {\n            if (array.get(i) > max) {\n                max = array.get(i);\n                maxIndex = i;\n            }\n        }\n        result.add(array.get(maxIndex));\n        for (int i = maxIndex + 1; i < array.size(); i++) {\n            if (array.get(i) > max) {\n                max = array.get(i);\n                maxIndex = i;\n            }\n        }\n        result.add(array.get(maxIndex));\n        for (int i = maxIndex + 1; i < array.size(); i++) {\n            if (array.get(i) > max) {\n                max = array.get(i);\n                maxIndex = i;\n            }\n        }\n        result.add(array.get(maxIndex));\n        for (int i = maxIndex + 1; i < array.size(); i++) {\n            if (array.get(i) > max) {\n                max = array.get(i);\n                maxIndex = i;\n            }\n        }\n        result.add(array.get(maxIndex));\n        for (int i = maxIndex + 1; i < array.size(); i++) {\n            if (array.get(i) > max) {\n                max = array.get(i);\n                maxIndex = i;\n            }\n        }\n        result.add(array.get(maxIndex));\n        for (int i = maxIndex + 1; i < array.size(); i++) {\n            if (array.get(i) > max) {\n                max = array.get(i);\n                maxIndex = i;\n            }\n        }\n        result.add(array.get(maxIndex));\n        for (int i = maxIndex + 1; i < array.size(); i++) {\n            if (array.get(i) > max) {\n                max = array.get(i);\n                maxIndex = i;\n            }\n        }\n        result.add(array.get(maxIndex));\n        for (int i = maxIndex + 1; i < array.size(); i++) {\n            if (array.get(i) > max) {\n                max = array.get(i);\n                maxIndex = i;\n            }\n        }\n        result.add(array.get(maxIndex));\n        for (int i = maxIndex + 1; i < array.size(); i++) {\n            if (array.get(i) > max) {\n                max = array.get(i);\n                maxIndex = i;\n            }\n        }\n        result.add(array.get(maxIndex));\n        for (int i = maxIndex + 1; i < array.size(); i++) {\n            if (array.get(i) > max) {\n                max = array.get(i);\n                maxIndex = i;\n            }\n        }\n        result.add(array.get(maxIndex));\n        for (int i = maxIndex + 1; i < array.size(); i++) {\n            if (array.get(i) > max) {\n                max = array.get(i);\n                maxIndex = i;\n            }\n        }\n        result.add(array.get(maxIndex));\n        for (int i = maxIndex + 1; i < array.size(); i++) {\n            if (array.get(i) > max) {\n                max = array.get(i);\n                maxIndex = i;\n            }\n        }\n        result.add(array.get(maxIndex));\n        for (int i = maxIndex + 1; i < array.size(); i++) {\n            if (array.get(i) > max) {\n                max = array.get(i);\n                maxIndex = i;\n            }\n        }\n        result.add(array.get(maxIndex));\n        for (int i = maxIndex + 1; i < array.size(); i++) {\n            if (array.get(i) > max) {\n                max = array.get(i);\n                maxIndex = i;\n            }\n        }\n        result.add(array.get(maxIndex));\n        for (int i = maxIndex + 1; i < array.size(); i++) {\n            if (array.get(i) > max) {\n                max = array.get(i);\n                maxIndex = i;\n            }\n        }\n        result.add(array.get(maxIndex));\n        for (int i = maxIndex + 1; i < array.size(); i++) {\n            if (array.get(i) > max) {\n                max = array.get(i);\n                maxIndex = i;\n            }\n        }\n        result.add(array.get(maxIndex));\n        for (int i = maxIndex + 1; i < array.size(); i++) {\n            if (array.get(i) > max) {\n                max = array.get(i);\n                maxIndex = i;\n            }\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        List<Integer> result = new ArrayList<Integer>();\n        Map<Integer, Integer> map = new HashMap<Integer, Integer>();\n        for (int i = 0; i < array.size(); i++) {\n            if (map.containsKey(array.get(i))) {\n                int index = map.get(array.get(i));\n                result.add(index);\n            } else {\n                map.put(array.get(i), i);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        int n = array.size();\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (array.get(i) > array.get(j)) {\n                    int temp = array.get(i);\n                    array.set(i, array.get(j));\n                    array.set(j, temp);\n                }\n            }\n        }\n        return array;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        List<Integer> result = new ArrayList<>();\n        if (array != null && array.size() > 0) {\n            int n = array.size();\n            for (int i = 0; i < n; i++) {\n                int min = i;\n                for (int j = i + 1; j < n; j++) {\n                    if (array.get(j) < array.get(min)) {\n                        min = j;\n                    }\n                }\n                int temp = array.get(i);\n                array.set(i, array.get(min));\n                array.set(min, temp);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        int n = array.size();\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = array.get(i);\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] > arr[j]) {\n                    int temp = arr[i];\n                    arr[i] = arr[j];\n                    arr[j] = temp;\n                }\n            }\n        }\n        return Arrays.asList(arr);\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        List<Integer> array = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            array.add(scanner.nextInt());\n        }\n        System.out.println(Arrays.toString(sortArray(array).toArray()));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < array.size(); i++) {\n            result.add(array.get(i));\n        }\n        Collections.sort(result);\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        int n = array.size();\n        if (n == 0)\n            return array;\n        \n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++)\n            arr[i] = array.get(i);\n        \n        Arrays.sort(arr);\n        \n        for (int i = 0; i < n; i++)\n            array.set(i, arr[i]);\n        \n        return array;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        List<Integer> result = new ArrayList<>();\n        if (array == null || array.size() == 0) {\n            return result;\n        }\n        Arrays.sort(array.toArray());\n        int mid = array.size() / 2;\n        result.add(array.get(mid));\n        result.add(array.get(array.size() - 1 - mid));\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        int n = array.size();\n        if (n == 0) {\n            return array;\n        }\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = array.get(i);\n        }\n        Arrays.sort(arr);\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            result.add(arr[i]);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] arr = s.toCharArray();\n        int n = arr.length;\n        char[] res = new char[n];\n        int[] cnt = new int[26];\n        for (int i = 0; i < n; i++) {\n            cnt[arr[i] - 'a']++;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (cnt[i] > 0) {\n                res[cnt[i] - 1] = (char) ('a' + i);\n            }\n        }\n        return new String(res);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] arr = s.toCharArray();\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] == ' ') {\n                arr[i] = 'A';\n            } else {\n                arr[i] = 'a';\n            }\n        }\n        return new String(arr);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] arr = s.toCharArray();\n        int n = arr.length;\n        char[] res = new char[n];\n        int[] cnt = new int[26];\n        for (int i = 0; i < n; i++) {\n            cnt[arr[i] - 'a']++;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (cnt[i] > 0) {\n                res[cnt[i] - 1] = (char) ('a' + i);\n            }\n        }\n        return new String(res);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] arr = s.toCharArray();\n        char[] arr1 = new char[arr.length];\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] == ' ') {\n                arr1[i] = '0';\n            } else {\n                arr1[i] = arr[i];\n            }\n        }\n        return String.valueOf(arr1);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] arr = s.toCharArray();\n        for(int i=0;i<arr.length;i++) {\n            if(arr[i] == ' ') {\n                arr[i] = '0';\n            } else {\n                arr[i] = '1';\n            }\n        }\n        return String.valueOf(arr);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        if (s == null || s.length() == 0) {\n            return s;\n        }\n        Map<Character, Integer> map = new HashMap<>();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (map.containsKey(c)) {\n                int count = map.get(c);\n                while (count > 0) {\n                    sb.append(c);\n                    count--;\n                }\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c >= 'a' && c <= 'z') {\n                c += 32;\n            }\n            sb.append(c);\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] arr = s.toCharArray();\n        int n = arr.length;\n        char[] res = new char[n];\n        for(int i = 0; i < n; i++) {\n            if(i % 2 == 0) {\n                res[i] = arr[i];\n            } else {\n                res[i] = (char) (arr[i] + 13);\n            }\n        }\n        return new String(res);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] arr = s.toCharArray();\n        int n = arr.length;\n        int[] arr2 = new int[n];\n        int[] arr3 = new int[n];\n        int[] arr4 = new int[n];\n        int[] arr5 = new int[n];\n        int[] arr6 = new int[n];\n        int[] arr7 = new int[n];\n        int[] arr8 = new int[n];\n        int[] arr9 = new int[n];\n        int[] arr10 = new int[n];\n        int[] arr11 = new int[n];\n        int[] arr12 = new int[n];\n        int[] arr13 = new int[n];\n        int[] arr14 = new int[n];\n        int[] arr15 = new int[n];\n        int[] arr16 = new int[n];\n        int[] arr17 = new int[n];\n        int[] arr18 = new int[n];\n        int[] arr19 = new int[n];\n        int[] arr20 = new int[n];\n        int[] arr21 = new int[n];\n        int[] arr22 = new int[n];\n        int[] arr23 = new int[n];\n        int[] arr24 = new int[n];\n        int[] arr25 = new int[n];\n        int[] arr26 = new int[n];\n        int[] arr27 = new int[n];\n        int[] arr28 = new int[n];\n        int[] arr29 = new int[n];\n        int[] arr30 = new int[n];\n        int[] arr31 = new int[n];\n        int[] arr32 = new int[n];\n        int[] arr33 = new int[n];\n        int[] arr34 = new int[n];\n        int[] arr35 = new int[n];\n        int[] arr36 = new int[n];\n        int[] arr37 = new int[n];\n        int[] arr38 = new int[n];\n        int[] arr39 = new int[n];\n        int[] arr40 = new int[n];\n        int[] arr41 = new int[n];\n        int[] arr42 = new int[n];\n        int[] arr43 = new int[n];\n        int[] arr44 = new int[n];\n        int[] arr45 = new int[n];\n        int[] arr46 = new int[n];\n        int[] arr47 = new int[n];\n        int[] arr48 = new int[n];\n        int[] arr49 = new int[n];\n        int[] arr50 = new int[n];\n        int[] arr51 = new int[n];\n        int[] arr52 = new int[n];\n        int[] arr53 = new int[n];\n        int[] arr54 = new int[n];\n        int[] arr55 = new int[n];\n        int[] arr56 = new int[n];\n        int[] arr57 = new int[n];\n        int[] arr58 = new int[n];\n        int[] arr59 = new int[n];\n        int[] arr60 = new int[n];\n        int[] arr61 = new int[n];\n        int[] arr62 = new int[n];\n        int[] arr63 = new int[n];\n        int[] arr64 = new int[n];\n        int[] arr65 = new int[n];\n        int[] arr66 = new int[n];\n        int[] arr67 = new int[n];\n        int[] arr68 = new int[n];\n        int[] arr69 = new int[n];\n        int[] arr70 = new int[n];\n        int[] arr71 = new int[n];\n        int[] arr72 = new int[n];\n        int[] arr73 = new int[n];\n        int[] arr74 = new int[n];\n        int[] arr75 = new int[n];\n        int[] arr76 = new int[n];\n        int[] arr77 = new int[n];\n        int[] arr78 = new int[n];\n        int[] arr79 = new int[n];\n        int[] arr80 = new int[n];\n        int[] arr81 = new int[n];\n        int[] arr82 = new int[n];\n        int[] arr83 = new int[n];\n        int[] arr84 = new int[n];\n        int[] arr85 = new int[n];\n        int[] arr86 = new int[n];\n        int[] arr87 = new int[n];\n        int[] arr88 = new int[n];\n        int[] arr89 = new int[n];\n        int[] arr90 = new int[n];\n        int[] arr91 = new int[n];\n        int[] arr92 = new int[n];\n        int[] arr93 = new int[n];\n        int[] arr94 = new int[n];\n        int[] arr95 = new int[n];\n        int[] arr96 = new int[n];\n        int[] arr97 = new int[n];\n        int[] arr98 = new int[n];\n        int[] arr99 = new int[n];\n        int[] arr100 = new int[n];\n        int[] arr101 = new int[n];\n        int[] arr102 = new int[n];\n        int[] arr103 = new int[n];\n        int[] arr104 = new int[n];\n        int[] arr105 = new int[n];\n        int[] arr106 = new int[n];\n        int[] arr107 = new int[n];\n        int[] arr108 = new int[n];\n        int[] arr109 = new int[n];\n        int[] arr110 = new int[n];\n        int[] arr111 = new int[n];\n        int[] arr112 = new int[n];\n        int[] arr113 = new int[n];\n        int[] arr114 = new int[n];\n        int[] arr115 = new int[n];\n        int[] arr116 = new int[n];\n        int[] arr117 = new int[n];\n        int[] arr118 = new int[n];\n        int[] arr119 = new int[n];\n        int[] arr120 = new int[n];\n        int[] arr121 = new int[n];\n        int[] arr122 = new int[n];\n        int[] arr123 = new int[n];\n        int[] arr124 = new int[n];\n        int[] arr125 = new int[n];\n        int[] arr126 = new int[n];\n        int[] arr127 = new int[n];\n        int[] arr128 = new int[n];\n        int[] arr129 = new int[n];\n        int[] arr130 = new int[n];\n        int[] arr131 = new int[n];\n        int[] arr132 = new int[n];\n        int[] arr133 = new int[n];\n        int[] arr134 = new int[n];\n        int[] arr135 = new int[n];\n        int[] arr136 = new int[n];\n        int[] arr137 = new int[n];\n        int[] arr138 = new int[n];\n        int[] arr139 = new int[n];\n        int[] arr140 = new int[n];\n        int[] arr141 = new int[n];\n        int[] arr142 = new int[n];\n        int[] arr143 = new int[n];\n        int[] arr144 = new int[n];\n        int[] arr145 = new int[n];\n        int[] arr146 = new int[n];\n        int[] arr147 = new int[n];\n        int[] arr148 = new int[n];\n        int[] arr149 = new int[n];\n        int[] arr150 = new int[n];\n        int[] arr151 = new int[n];\n        int[] arr152 = new int[n];\n        int[] arr153 = new int[n];\n        int[] arr154 = new int[n];\n        int[] arr155 = new int[n];\n        int[] arr156 = new int[n];\n        int[] arr157 = new int[n];\n        int[] arr158 = new int[n];\n        int[] arr159 = new int[n];\n        int[] arr160 = new int[n];\n        int[] arr161 = new int[n];\n        int[] arr162 = new int"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] arr = s.toCharArray();\n        int n = arr.length;\n        char[] res = new char[n];\n        for (int i = 0; i < n; i++) {\n            if (i % 2 == 0) {\n                res[i] = (char) (arr[i] + 1);\n            } else {\n                res[i] = (char) (arr[i] - 1);\n            }\n        }\n        return new String(res);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c >= 'a' && c <= 'z') {\n                c = (char) (c - 'a' + 'A');\n            }\n            sb.append(c);\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] arr = s.toCharArray();\n        for(int i = 0; i < arr.length; i++) {\n            if(arr[i] == ' ') {\n                arr[i] = 'A';\n            } else {\n                arr[i] = 'a';\n            }\n        }\n        return new String(arr);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        String result = \"\";\n        char[] chars = s.toCharArray();\n        for(int i = 0; i < chars.length; i++) {\n            if(i % 2 == 0) {\n                result += chars[i];\n            } else {\n                result += (char)(chars[i] - 13);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] arr = s.toCharArray();\n        int n = arr.length;\n        char[] res = new char[n];\n        int[] cnt = new int[26];\n        for (int i = 0; i < n; i++) {\n            cnt[arr[i] - 'a']++;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (cnt[i] > 0) {\n                res[n - cnt[i] + i] = (char) ('a' + i);\n            }\n        }\n        return new String(res);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] arr = s.toCharArray();\n        int n = arr.length;\n        char[] res = new char[n];\n        for (int i = 0; i < n; i++) {\n            res[i] = (char) (arr[i] + 1);\n        }\n        return new String(res);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] arr = s.toCharArray();\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] >= 'a' && arr[i] <= 'z') {\n                arr[i] -= 32;\n            }\n            if (arr[i] >= 'A' && arr[i] <= 'Z') {\n                arr[i] -= 32;\n            }\n            if (arr[i] >= '0' && arr[i] <= '9') {\n                arr[i] -= 32;\n            }\n        }\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] >= 'a' && arr[i] <= 'z') {\n                arr[i] += 32;\n            }\n            if (arr[i] >= 'A' && arr[i] <= 'Z') {\n                arr[i] += 32;\n            }\n            if (arr[i] >= '0' && arr[i] <= '9') {\n                arr[i] += 32;\n            }\n        }\n        return new String(arr);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] arr = s.toCharArray();\n        int n = arr.length;\n        int[] count = new int[26];\n        for(int i = 0; i < n; i++) {\n            count[arr[i] - 'a']++;\n        }\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < n; i++) {\n            if(count[arr[i] - 'a'] == 1) {\n                sb.append(arr[i]);\n            }\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] arr = s.toCharArray();\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] >= 'a' && arr[i] <= 'z') {\n                arr[i] -= 32;\n            }\n        }\n        return new String(arr);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] arr = s.toCharArray();\n        int n = arr.length;\n        char[] res = new char[n];\n        for(int i = 0; i < n; i++) {\n            res[i] = arr[i];\n        }\n        for(int i = 0; i < n; i++) {\n            if(i % 2 == 0) {\n                res[i] = (char)(res[i] - 32);\n            }\n            else {\n                res[i] = (char)(res[i] + 32);\n            }\n        }\n        return new String(res);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] arr = s.toCharArray();\n        int n = arr.length;\n        char[] arr2 = new char[n];\n        for(int i = 0; i < n; i++) {\n            if(arr[i] == 'a') {\n                arr2[i] = 'b';\n            }\n            else if(arr[i] == 'b') {\n                arr2[i] = 'a';\n            }\n            else {\n                arr2[i] = arr[i];\n            }\n        }\n        return new String(arr2);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return Optional.empty();\n        }\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        return Optional.of(max - min + 1);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        // Write your code here\n        int n = lst.size();\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = lst.get(i);\n        }\n        Arrays.sort(arr);\n        if (n < 2) {\n            return Optional.empty();\n        }\n        return Optional.of(arr[1]);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        int min = Integer.MAX_VALUE;\n        int minIndex = -1;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n                minIndex = i;\n            }\n        }\n        return Optional.of(minIndex);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n        int min = lst.get(0);\n        int next = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n                next = lst.get(i);\n            }\n            else if (lst.get(i) == min) {\n                next++;\n            }\n        }\n        return Optional.of(next);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return Optional.empty();\n        }\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        if (max - min == 1) {\n            return Optional.of(min);\n        }\n        return Optional.of(max);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.size() == 0) return Optional.empty();\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) min = lst.get(i);\n            if (lst.get(i) > max) max = lst.get(i);\n        }\n        return Optional.of(max - min + 1);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        return Optional.of(min);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return Optional.empty();\n        }\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        return Optional.of(max - min);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        int min = lst.get(0);\n        int next = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) > min) {\n                min = lst.get(i);\n                next = lst.get(i);\n            }\n        }\n        return Optional.of(next);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        Collections.sort(lst);\n        if (lst.size() < 2) {\n            return Optional.empty();\n        } else {\n            return Optional.of(lst.get(1));\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        Collections.sort(lst);\n        if (lst.size() < 2) {\n            return Optional.empty();\n        } else {\n            return Optional.of(lst.get(1));\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        int min = lst.get(0);\n        int max = lst.get(0);\n        int next = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n                next = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n                next = lst.get(i);\n            }\n        }\n        return Optional.of(next);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        \n        \n        Collections.sort(l);\n        if (l.size() < 2) {\n            \n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        return Optional.of(max - min + 1);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        return Optional.of(min);\n    }\n\n    public List<List<Integer>> threeSum(int[] nums) {\n        List<List<Integer>> result = new ArrayList<>();\n        if (nums == null || nums.length < 3) {\n            return result;\n        }\n        Arrays.sort(nums);\n        for (int i = 0; i < nums.length - 2; i++) {\n            if (i > 0 && nums[i] == nums[i - 1]) {\n                continue;\n            }\n            int left = i + 1;\n            int right = nums.length - 1;\n            while (left < right) {\n                if (nums[i] + nums[left] + nums[right] == 0) {\n                    result.add(Arrays.asList(nums[i], nums[left], nums[right]));\n                    while (left < right && nums[left] == nums[left + 1]) {\n                        left++;\n                    }\n                    while (left < right && nums[right] == nums[right - 1]) {\n                        right--;\n                    }\n                    left++;\n                    right--;\n                } else if (nums[i] + nums[left] + nums[right] < 0) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return Optional.empty();\n        }\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        return Optional.of(max - min);\n    }\n\n    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {\n        List<List<Integer>> res = new ArrayList<>();\n        if (root == null) {\n            return res;\n        }\n        Queue<TreeNode> q = new LinkedList<>();\n        q.add(root);\n        while (!q.isEmpty()) {\n            int size = q.size();\n            List<Integer> level = new ArrayList<>();\n            for (int i = 0; i < size; i++) {\n                TreeNode node = q.poll();\n                if (i % 2 == 0) {\n                    level.add(node.val);\n                } else {\n                    level.add(0, node.val);\n                }\n                if (node.left != null) {\n                    q.add(node.left);\n                }\n                if (node.right != null) {\n                    q.add(node.right);\n                }\n            }\n            res.add(level);\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return Optional.empty();\n        }\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        return Optional.of(max - min + 1);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return Optional.empty();\n        }\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        return Optional.of(max);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        if (max == min) {\n            return Optional.empty();\n        }\n        return Optional.of(max);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst == null || lst.size() == 0) {\n            return Optional.empty();\n        }\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        return Optional.of(max);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        char[] arr = S.toCharArray();\n        int n = arr.length;\n        int[] dp = new int[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = 1;\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] == arr[j]) {\n                    dp[i] += dp[j];\n                }\n            }\n        }\n        return dp[n - 1];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int n = S.length();\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            if(S.charAt(i) == 'B') {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        char[] ch = S.toCharArray();\n        int count = 0;\n        for(int i = 0; i < ch.length; i++) {\n            if(ch[i] == 'B') {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int n = S.length();\n        int[] dp = new int[n];\n        dp[0] = 1;\n        for (int i = 1; i < n; i++) {\n            dp[i] = 0;\n            for (int j = 0; j < i; j++) {\n                if (S.charAt(i) == S.charAt(j)) {\n                    dp[i] += dp[j];\n                }\n            }\n        }\n        return dp[n - 1];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int count = 0;\n        for(int i=0;i<S.length();i++)\n        {\n            if(S.charAt(i)=='B')\n            {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int n = S.length();\n        int[] dp = new int[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = 0;\n            for (int j = 0; j < i; j++) {\n                if (S.charAt(j) == S.charAt(i)) {\n                    dp[i] += 1;\n                }\n            }\n        }\n        return dp[n - 1];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int count = 0;\n        for (int i = 0; i < S.length(); i++) {\n            if (S.charAt(i) == 'B') {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int n = S.length();\n        int[] arr = new int[26];\n        for(int i = 0; i < n; i++) {\n            arr[S.charAt(i) - 'a']++;\n        }\n        int count = 0;\n        for(int i = 0; i < 26; i++) {\n            if(arr[i] == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int n = S.length();\n        int[] dp = new int[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = 1;\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (S.charAt(i) == S.charAt(j)) {\n                    dp[i] = Math.max(dp[i], dp[j] + 1);\n                }\n            }\n        }\n        return dp[n - 1];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int count = 0;\n        for (int i = 0; i < S.length(); i++) {\n            if (S.charAt(i) == 'B') {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        char[] arr = S.toCharArray();\n        int count = 0;\n        for(int i = 0; i < arr.length; i++) {\n            if(arr[i] == 'B') {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int count = 0;\n        for (int i = 0; i < S.length(); i++) {\n            if (S.charAt(i) == 'B') {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int count = 0;\n        for(int i = 0; i < S.length(); i++) {\n            if(S.charAt(i) == 'B') {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int n = S.length();\n        int[] dp = new int[n];\n        dp[0] = 1;\n        for(int i = 1; i < n; i++) {\n            int prev = dp[i-1];\n            int next = dp[i-2];\n            if(S.charAt(i) == 'B') {\n                dp[i] = prev + next;\n            } else {\n                dp[i] = prev;\n            }\n        }\n        return dp[n-1];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int count = 0;\n        for(int i = 0; i < S.length(); i++) {\n            if(S.charAt(i) == 'B') {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int count = 0;\n        for (int i = 0; i < S.length(); i++) {\n            if (S.charAt(i) == 'B') {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int n = S.length();\n        int[] arr = new int[26];\n        for(int i = 0; i < n; i++) {\n            arr[S.charAt(i) - 'a']++;\n        }\n        int count = 0;\n        for(int i = 0; i < 26; i++) {\n            if(arr[i] > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int n = S.length();\n        int[] dp = new int[n];\n        dp[0] = 1;\n        for (int i = 1; i < n; i++) {\n            if (S.charAt(i) == 'B') {\n                dp[i] = dp[i - 1];\n            } else {\n                dp[i] = dp[i - 1] + 1;\n            }\n        }\n        return dp[n - 1];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int n = S.length();\n        int[] dp = new int[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = i;\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (S.charAt(i) == S.charAt(j)) {\n                    dp[i] = Math.min(dp[i], dp[j] + 1);\n                }\n            }\n        }\n        return dp[n - 1];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int n = S.length();\n        int[] dp = new int[n];\n        for(int i = 0; i < n; i++) {\n            dp[i] = 1;\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 0; j < i; j++) {\n                if(S.charAt(i) == S.charAt(j)) {\n                    dp[i] += dp[j];\n                }\n            }\n        }\n        return dp[n-1];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            return true;\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        return x instanceof Integer && y instanceof Integer && z instanceof Integer;\n    }\n\n    public boolean anyInt(int x, int y, int z) {\n        return x == y && x == z;\n    }\n\n    public boolean anyInt(int x, int y) {\n        return x == y;\n    }\n\n    public boolean anyInt(int x) {\n        return x == 0;\n    }\n\n    public boolean anyInt(int x, int y, int z) {\n        return x == y && x == z;\n    }\n\n    public boolean anyInt(int x, int y, int z, int w) {\n        return x == y && x == z && x == w;\n    }\n\n    public boolean anyInt(int x, int y, int z, int w, int z) {\n        return x == y && x == z && x == w && x == z;\n    }\n\n    public boolean anyInt(int x, int y, int z, int w, int z, int w) {\n        return x == y && x == z && x == w && x == z && x == w;\n    }\n\n    public boolean anyInt(int x, int y, int z, int w, int z, int w, int z) {\n        return x == y && x == z && x == w && x == z && x == w && x == z;\n    }\n\n    public boolean anyInt(int x, int y, int z, int w, int z, int w, int z, int w) {\n        return x == y && x == z && x == w && x == z && x == w && x == z && x == w;\n    }\n\n    public boolean anyInt(int x, int y, int z, int w, int z, int w, int z, int w, int z) {\n        return x == y && x == z && x == w && x == z && x == w && x == z && x == w && x == z;\n    }\n\n    public boolean anyInt(int x, int y, int z, int w, int z, int w, int z, int w, int z, int w) {\n        return x == y && x == z && x == w && x == z && x == w && x == z && x == w && x == z && x == w;\n    }\n\n    public boolean anyInt(int x, int y, int z, int w, int z, int w, int z, int w, int z, int w, int z) {\n        return x == y && x == z && x == w && x == z && x == w && x == z && x == w && x == z && x == w && x == z;\n    }\n\n    public boolean anyInt(int x, int y, int z, int w, int z, int w, int z, int w, int z, int w, int z, int w) {\n        return x == y && x == z && x == w && x == z && x == w && x == z && x == w && x == z && x == w && x == z && x == w;\n    }\n\n    public boolean anyInt(int x, int y, int z, int w, int z, int w, int z, int w, int z, int w, int z, int w, int z) {\n        return x == y && x == z && x == w && x == z && x == w && x == z && x == w && x == z && x == w && x == z && x == w && x == z;\n    }\n\n    public boolean anyInt(int x, int y, int z, int w, int z, int w, int z, int w, int z, int w, int z, int w, int z, int w) {\n        return x == y && x == z && x == w && x == z && x == w && x == z && x == w && x == z && x == w && x == z && x == w && x == z && x == w;\n    }\n\n    public boolean anyInt(int x, int y, int z, int w, int z, int w, int z, int w, int z, int w, int z, int w, int z, int w, int z) {\n        return x == y && x == z && x == w && x == z && x == w && x == z && x == w && x == z && x == w && x == z && x == w && x == z && x == w && x == z;\n    }\n\n    public boolean anyInt(int x, int y, int z, int w, int z, int w, int z, int w, int z, int w, int z, int w, int z, int w, int z, int w) {\n        return x == y && x == z && x == w && x == z && x == w && x == z && x == w && x == z && x == w && x == z && x == w && x == z && x == w && x == z && x == w;\n    }\n\n    public boolean anyInt(int x, int y, int z, int w, int z, int w, int z, int w, int z, int w, int z, int w, int z, int w, int z, int w, int z) {\n        return x == y && x == z && x == w && x == z && x == w && x == z && x == w && x == z && x == w && x == z && x == w && x == z && x == w && x == z && x == w && x == z;\n    }\n\n    public boolean anyInt(int x, int y, int z, int w, int z, int w, int z, int w, int z, int w, int z, int w, int z, int w, int z, int w, int z, int w) {\n        return x == y && x == z && x == w && x == z && x == w && x == z && x == w && x == z && x == w && x == z && x == w && x == z && x == w && x == z && x == w && x == z && x == w;\n    }\n\n    public boolean anyInt(int x, int y, int z, int w, int z, int w, int z, int w, int z, int w, int z, int w, int z, int w, int z, int w, int z, int w, int z) {\n        return x == y && x == z && x == w && x == z && x == w && x == z && x == w && x == z && x == w && x == z && x == w && x == z && x == w && x == z && x == w && x == z && x == w && x == z;\n    }\n\n    public boolean anyInt(int x, int y, int z, int w, int z, int w, int z, int w, int z, int w, int z, int w, int z, int w, int z, int w, int z, int w, int z, int w) {\n        return x == y && x == z && x == w && x == z && x == w && x == z && x == w && x == z && x == w && x == z && x == w && x == z && x == w && x == z && x == w && x == z && x == w && x == z;\n    }\n\n    public boolean anyInt(int x, int y, int z, int w, int z, int w, int z, int w, int z, int w, int z, int w, int z, int w, int z, int w, int z, int w, int z, int w, int z) {\n        return x == y && x == z && x == w && x == z && x == w && x == z && x == w && x == z && x == w && x == z && x == w && x == z && x == w && x == z && x == w && x == z && x == w && x == z && x == w;\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        return x == null || y == null || z == null;\n    }\n    public boolean anyInt(int x, int y, int z) {\n        return x == 0 || y == 0 || z == 0;\n    }\n    public boolean anyInt(int x, int y, int z, int w) {\n        return x == 0 || y == 0 || z == 0 || w == 0;\n    }\n    public boolean anyInt(int x, int y, int z, int w, int z) {\n        return x == 0 || y == 0 || z == 0 || w == 0 || z == 0;\n    }\n    public boolean anyInt(int x, int y, int z, int w, int z, int w) {\n        return x == 0 || y == 0 || z == 0 || w == 0 || z == 0 || w == 0;\n    }\n    public boolean anyInt(int x, int y, int z, int w, int z, int w, int z) {\n        return x == 0 || y == 0 || z == 0 || w == 0 || z == 0 || w == 0 || z == 0;\n    }\n    public boolean anyInt(int x, int y, int z, int w, int z, int w, int z, int w) {\n        return x == 0 || y == 0 || z == 0 || w == 0 || z == 0 || w == 0 || z == 0 || w == 0;\n    }\n    public boolean anyInt(int x, int y, int z, int w, int z, int w, int z, int w, int z) {\n        return x == 0 || y == 0 || z == 0 || w == 0 || z == 0 || w == 0 || z == 0 || w == 0 || z == 0;\n    }\n    public boolean anyInt(int x, int y, int z, int w, int z, int w, int z, int w, int z, int w) {\n        return x == 0 || y == 0 || z == 0 || w == 0 || z == 0 || w == 0 || z == 0 || w == 0 || z == 0 || w == 0;\n    }\n    public boolean anyInt(int x, int y, int z, int w, int z, int w, int z, int w, int z, int w, int z) {\n        return x == 0 || y == 0 || z == 0 || w == 0 || z == 0 || w == 0 || z == 0 || w == 0 || z == 0 || w == 0 || z == 0;\n    }\n    public boolean anyInt(int x, int y, int z, int w, int z, int w, int z, int w, int z, int w, int z, int w) {\n        return x == 0 || y == 0 || z == 0 || w == 0 || z == 0 || w == 0 || z == 0 || w == 0 || z == 0 || w == 0 || z == 0 || w == 0;\n    }\n    public boolean anyInt(int x, int y, int z, int w, int z, int w, int z, int w, int z, int w, int z, int w, int z) {\n        return x == 0 || y == 0 || z == 0 || w == 0 || z == 0 || w == 0 || z == 0 || w == 0 || z == 0 || w == 0 || z == 0 || w == 0 || z == 0;\n    }\n    public boolean anyInt(int x, int y, int z, int w, int z, int w, int z, int w, int z, int w, int z, int w, int z, int w) {\n        return x == 0 || y == 0 || z == 0 || w == 0 || z == 0 || w == 0 || z == 0 || w == 0 || z == 0 || w == 0 || z == 0 || w == 0 || z == 0 || w == 0;\n    }\n    public boolean anyInt(int x, int y, int z, int w, int z, int w, int z, int w, int z, int w, int z, int w, int z, int w, int z) {\n        return x == 0 || y == 0 || z == 0 || w == 0 || z == 0 || w == 0 || z == 0 || w == 0 || z == 0 || w == 0 || z == 0 || w == 0 || z == 0 || w == 0 || z == 0;\n    }\n    public boolean anyInt(int x, int y, int z, int w, int z, int w, int z, int w, int z, int w, int z, int w, int z, int w, int z, int w) {\n        return x == 0 || y == 0 || z == 0 || w == 0 || z == 0 || w == 0 || z == 0 || w == 0 || z == 0 || w == 0 || z == 0 || w == 0 || z == 0 || w == 0 || z == 0 || w == 0;\n    }\n    public boolean anyInt(int x, int y, int z, int w, int z, int w, int z, int w, int z, int w, int z, int w, int z, int w, int z, int w, int z, int w) {\n        return x == 0 || y == 0 || z == 0 || w == 0 || z == 0 || w == 0 || z == 0 || w == 0 || z == 0 || w == 0 || z == 0 || w == 0 || z == 0 || w == 0 || z == 0 || w == 0 || z == 0 || w == 0;\n    }\n    public boolean anyInt(int x, int y, int z, int w, int z, int w, int z, int w, int z, int w, int z, int w, int z, int w, int z, int w, int z, int w, int z, int w) {\n        return x == 0 || y == 0 || z == 0 || w == 0 || z == 0 || w == 0 || z == 0 || w == 0 || z == 0 || w == 0 || z == 0 || w == 0 || z == 0 || w == 0 || z == 0 || w == 0 || z == 0 || w == 0 || z == 0 || w == 0 || z == 0;\n    }\n    public boolean anyInt(int x, int y, int z, int w, int z, int w, int z, int w, int z, int w, int z, int w, int z, int w, int z, int w, int z, int w, int z, int w, int z) {\n        return x == 0 || y == 0 || z == 0 || w == 0 || z == 0 || w == 0 || z == 0 || w == 0 || z == 0 || w == 0 || z == 0 || w == 0 || z == 0 || w == 0 || z == 0 || w == 0 || z == 0 || w == 0 || z == 0 || w == 0;\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            return true;\n        }\n        return false;\n    }\n\n    public boolean anyString(Object x, Object y, Object z) {\n        if (x instanceof String && y instanceof String && z instanceof String) {\n            return true;\n        }\n        return false;\n    }\n\n    public boolean anyBoolean(Object x, Object y, Object z) {\n        if (x instanceof Boolean && y instanceof Boolean && z instanceof Boolean) {\n            return true;\n        }\n        return false;\n    }\n\n    public boolean anyDouble(Object x, Object y, Object z) {\n        if (x instanceof Double && y instanceof Double && z instanceof Double) {\n            return true;\n        }\n        return false;\n    }\n\n    public boolean anyLong(Object x, Object y, Object z) {\n        if (x instanceof Long && y instanceof Long && z instanceof Long) {\n            return true;\n        }\n        return false;\n    }\n\n    public boolean anyFloat(Object x, Object y, Object z) {\n        if (x instanceof Float && y instanceof Float && z instanceof Float) {\n            return true;\n        }\n        return false;\n    }\n\n    public boolean anyChar(Object x, Object y, Object z) {\n        if (x instanceof Character && y instanceof Character && z instanceof Character) {\n            return true;\n        }\n        return false;\n    }\n\n    public boolean anyObject(Object x, Object y, Object z) {\n        if (x instanceof Object && y instanceof Object && z instanceof Object) {\n            return true;\n        }\n        return false;\n    }\n\n    public boolean anyCollection(Object x, Object y, Object z) {\n        if (x instanceof Collection && y instanceof Collection && z instanceof Collection) {\n            return true;\n        }\n        return false;\n    }\n\n    public boolean anyMap(Object x, Object y, Object z) {\n        if (x instanceof Map && y instanceof Map && z instanceof Map) {\n            return true;\n        }\n        return false;\n    }\n\n    public boolean anyIterable(Object x, Object y, Object z) {\n        if (x instanceof Iterable && y instanceof Iterable && z instanceof Iterable) {\n            return true;\n        }\n        return false;\n    }\n\n    public boolean anyIterator(Object x, Object y, Object z) {\n        if (x instanceof Iterator && y instanceof Iterator && z instanceof Iterator) {\n            return true;\n        }\n        return false;\n    }\n\n    public boolean anyFunction(Object x, Object y, Object z) {\n        if (x instanceof Function && y instanceof Function && z instanceof Function) {\n            return true;\n        }\n        return false;\n    }\n\n    public boolean anyPredicate(Object x, Object y, Object z) {\n        if (x instanceof Predicate && y instanceof Predicate && z instanceof Predicate) {\n            return true;\n        }\n        return false;\n    }\n\n    public boolean anyConsumer(Object x, Object y, Object z) {\n        if (x instanceof Consumer && y instanceof Consumer && z instanceof Consumer) {\n            return true;\n        }\n        return false;\n    }\n\n    public boolean anySupplier(Object x, Object y, Object z) {\n        if (x instanceof Supplier && y instanceof Supplier && z instanceof Supplier) {\n            return true;\n        }\n        return false;\n    }\n\n    public boolean anyBiFunction(Object x, Object y, Object z) {\n        if (x instanceof BiFunction && y instanceof BiFunction && z instanceof BiFunction) {\n            return true;\n        }\n        return false;\n    }\n\n    public boolean anyBiPredicate(Object x, Object y, Object z) {\n        if (x instanceof BiPredicate && y instanceof BiPredicate && z instanceof BiPredicate) {\n            return true;\n        }\n        return false;\n    }\n\n    public boolean anyBiConsumer(Object x, Object y, Object z) {\n        if (x instanceof BiConsumer && y instanceof BiConsumer && z instanceof BiConsumer) {\n            return true;\n        }\n        return false;\n    }\n\n    public boolean anyBiSupplier(Object x, Object y, Object z) {\n        if (x instanceof BiSupplier && y instanceof BiSupplier && z instanceof BiSupplier) {\n            return true;\n        }\n        return false;\n    }\n\n    public boolean anyFunction1(Object x, Object y, Object z) {\n        if (x instanceof Function1 && y instanceof Function1 && z instanceof Function1) {\n            return true;\n        }\n        return false;\n    }\n\n    public boolean anyFunction2(Object x, Object y, Object z) {\n        if (x instanceof Function2 && y instanceof Function2 && z instanceof Function2) {\n            return true;\n        }\n        return false;\n    }\n\n    public boolean anyFunction3(Object x, Object y, Object z) {\n        if (x instanceof Function3 && y instanceof Function3 && z instanceof Function3) {\n            return true;\n        }\n        return false;\n    }\n\n    public boolean anyFunction4(Object x, Object y, Object z) {\n        if (x instanceof Function4 && y instanceof Function4 && z instanceof Function4) {\n            return true;\n        }\n        return false;\n    }\n\n    public boolean anyFunction5(Object x, Object y, Object z) {\n        if (x instanceof Function5 && y instanceof Function5 && z instanceof Function5) {\n            return true;\n        }\n        return false;\n    }\n\n    public boolean anyFunction6(Object x, Object y, Object z) {\n        if (x instanceof Function6 && y instanceof Function6 && z instanceof Function6) {\n            return true;\n        }\n        return false;\n    }\n\n    public boolean anyFunction7(Object x, Object y, Object z) {\n        if (x instanceof Function7 && y instanceof Function7 && z instanceof Function7) {\n            return true;\n        }\n        return false;\n    }\n\n    public boolean anyFunction8(Object x, Object y, Object z) {\n        if (x instanceof Function8 && y instanceof Function8 && z instanceof Function8) {\n            return true;\n        }\n        return false;\n    }\n\n    public boolean anyFunction9(Object x, Object y, Object z) {\n        if (x instanceof Function9 && y instanceof Function9 && z instanceof Function9) {\n            return true;\n        }\n        return false;\n    }\n\n    public boolean anyFunction10(Object x, Object y, Object z) {\n        if (x instanceof Function10 && y instanceof Function10 && z instanceof Function10) {\n            return true;\n        }\n        return false;\n    }\n\n    public boolean anyFunction11(Object x, Object y, Object z) {\n        if (x instanceof Function11 && y instanceof Function11 && z instanceof Function11) {\n            return true;\n        }\n        return false;\n    }\n\n    public boolean anyFunction12(Object x, Object y, Object z) {\n        if (x instanceof Function12 && y instanceof Function12 && z instanceof Function12) {\n            return true;\n        }\n        return false;\n    }\n\n    public boolean anyFunction13(Object x, Object y, Object z) {\n        if (x instanceof Function13 && y instanceof Function13 && z instanceof Function13) {\n            return true;\n        }\n        return false;\n    }\n\n    public boolean anyFunction14(Object x, Object y, Object z) {\n        if (x instanceof Function14 && y instanceof Function14 && z instanceof Function14) {\n            return true;\n        }\n        return false;\n    }\n\n    public boolean anyFunction15(Object x, Object y, Object z) {\n        if (x instanceof Function15 && y instanceof Function15 && z instanceof Function15) {\n            return true;\n        }\n        return false;\n    }\n\n    public boolean anyFunction16(Object x, Object y, Object z) {\n        if (x instanceof Function16 && y instanceof Function16 && z instanceof Function16) {\n            return true;\n        }\n        return false;\n    }\n\n    public boolean anyFunction17(Object x, Object y, Object z) {\n        if (x instanceof Function17 && y instanceof Function17 && z instanceof Function17) {\n            return true;\n        }\n        return false;\n    }\n\n    public boolean anyFunction18(Object x, Object y, Object z) {\n        if (x instanceof Function18 && y instanceof Function18 && z instanceof Function18) {\n            return true;\n        }\n        return false;\n    }\n\n    public boolean anyFunction19(Object x, Object y, Object z) {\n        if (x instanceof Function19 && y instanceof Function19 && z instanceof Function19) {\n            return true;\n        }\n        return false;\n    }\n\n    public boolean anyFunction20(Object x, Object y, Object z) {\n        if (x instanceof Function20 && y instanceof Function20 && z instanceof Function20) {\n            return true;\n        }\n        return false;\n    }\n\n    public boolean anyFunction21(Object x, Object y, Object z) {\n        if (x instanceof Function21 && y instanceof Function21 && z instanceof Function21) {\n            return true;\n        }\n        return false;\n    }\n\n    public boolean anyFunction22(Object x, Object y, Object z) {\n        if (x instanceof Function22 && y instanceof Function22 && z instanceof Function22) {\n            return true;\n        }\n        return false;\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        return (x instanceof Integer) || (y instanceof Integer) || (z instanceof Integer);\n    }\n\n    public boolean anyString(Object x, Object y, Object z) {\n        return (x instanceof String) || (y instanceof String) || (z instanceof String);\n    }\n\n    public boolean anyBoolean(Object x, Object y, Object z) {\n        return (x instanceof Boolean) || (y instanceof Boolean) || (z instanceof Boolean);\n    }\n\n    public boolean anyDouble(Object x, Object y, Object z) {\n        return (x instanceof Double) || (y instanceof Double) || (z instanceof Double);\n    }\n\n    public boolean anyChar(Object x, Object y, Object z) {\n        return (x instanceof Character) || (y instanceof Character) || (z instanceof Character);\n    }\n\n    public boolean anyObject(Object x, Object y, Object z) {\n        return (x instanceof Object) || (y instanceof Object) || (z instanceof Object);\n    }\n\n    public boolean anyNull(Object x, Object y, Object z) {\n        return (x == null) || (y == null) || (z == null);\n    }\n\n    public boolean any(Object x, Object y, Object z) {\n        return anyInt(x, y, z) || anyString(x, y, z) || anyBoolean(x, y, z) || anyDouble(x, y, z) || anyChar(x, y, z) || anyObject(x, y, z) || anyNull(x, y, z);\n    }\n\n    public boolean any(Object x, Object y, Object z, Object w) {\n        return anyInt(x, y, z) || anyString(x, y, z) || anyBoolean(x, y, z) || anyDouble(x, y, z) || anyChar(x, y, z) || anyObject(x, y, z) || anyNull(x, y, z) || any(x, y, z);\n    }\n\n    public boolean any(Object x, Object y, Object z, Object w, Object v) {\n        return anyInt(x, y, z) || anyString(x, y, z) || anyBoolean(x, y, z) || anyDouble(x, y, z) || anyChar(x, y, z) || anyObject(x, y, z) || anyNull(x, y, z) || any(x, y, z) || any(x, y, z, w);\n    }\n\n    public boolean any(Object x, Object y, Object z, Object w, Object v, Object u) {\n        return anyInt(x, y, z) || anyString(x, y, z) || anyBoolean(x, y, z) || anyDouble(x, y, z) || anyChar(x, y, z) || anyObject(x, y, z) || anyNull(x, y, z) || any(x, y, z) || any(x, y, z, w) || any(x, y, z, w, v);\n    }\n\n    public boolean any(Object x, Object y, Object z, Object w, Object v, Object u, Object t) {\n        return anyInt(x, y, z) || anyString(x, y, z) || anyBoolean(x, y, z) || anyDouble(x, y, z) || anyChar(x, y, z) || anyObject(x, y, z) || anyNull(x, y, z) || any(x, y, z) || any(x, y, z, w) || any(x, y, z, w, v) || any(x, y, z, w, v, u);\n    }\n\n    public boolean any(Object x, Object y, Object z, Object w, Object v, Object u, Object t, Object s) {\n        return anyInt(x, y, z) || anyString(x, y, z) || anyBoolean(x, y, z) || anyDouble(x, y, z) || anyChar(x, y, z) || anyObject(x, y, z) || anyNull(x, y, z) || any(x, y, z) || any(x, y, z, w) || any(x, y, z, w, v) || any(x, y, z, w, v, u) || any(x, y, z, w, v, u, t);\n    }\n\n    public boolean any(Object x, Object y, Object z, Object w, Object v, Object u, Object t, Object s, Object r) {\n        return anyInt(x, y, z) || anyString(x, y, z) || anyBoolean(x, y, z) || anyDouble(x, y, z) || anyChar(x, y, z) || anyObject(x, y, z) || anyNull(x, y, z) || any(x, y, z) || any(x, y, z, w) || any(x, y, z, w, v) || any(x, y, z, w, v, u) || any(x, y, z, w, v, u, t) || any(x, y, z, w, v, u, t, s);\n    }\n\n    public boolean any(Object x, Object y, Object z, Object w, Object v, Object u, Object t, Object s, Object r, Object q) {\n        return anyInt(x, y, z) || anyString(x, y, z) || anyBoolean(x, y, z) || anyDouble(x, y, z) || anyChar(x, y, z) || anyObject(x, y, z) || anyNull(x, y, z) || any(x, y, z) || any(x, y, z, w) || any(x, y, z, w, v) || any(x, y, z, w, v, u) || any(x, y, z, w, v, u, t) || any(x, y, z, w, v, u, t, s) || any(x, y, z, w, v, u, t, s, r);\n    }\n\n    public boolean any(Object x, Object y, Object z, Object w, Object v, Object u, Object t, Object s, Object r, Object q, Object p) {\n        return anyInt(x, y, z) || anyString(x, y, z) || anyBoolean(x, y, z) || anyDouble(x, y, z) || anyChar(x, y, z) || anyObject(x, y, z) || anyNull(x, y, z) || any(x, y, z) || any(x, y, z, w) || any(x, y, z, w, v) || any(x, y, z, w, v, u) || any(x, y, z, w, v, u, t) || any(x, y, z, w, v, u, t, s) || any(x, y, z, w, v, u, t, s, r) || any(x, y, z, w, v, u, t, s, r, q);\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        return x instanceof Integer && y instanceof Integer && z instanceof Integer;\n    }\n\n    public boolean anyString(Object x, Object y, Object z) {\n        return x instanceof String && y instanceof String && z instanceof String;\n    }\n\n    public boolean anyDouble(Object x, Object y, Object z) {\n        return x instanceof Double && y instanceof Double && z instanceof Double;\n    }\n\n    public boolean anyBoolean(Object x, Object y, Object z) {\n        return x instanceof Boolean && y instanceof Boolean && z instanceof Boolean;\n    }\n\n    public boolean anyObject(Object x, Object y, Object z) {\n        return x instanceof Object && y instanceof Object && z instanceof Object;\n    }\n\n    public boolean anyArray(Object x, Object y, Object z) {\n        return x instanceof Object[] && y instanceof Object[] && z instanceof Object[];\n    }\n\n    public boolean anyCollection(Object x, Object y, Object z) {\n        return x instanceof Collection && y instanceof Collection && z instanceof Collection;\n    }\n\n    public boolean anyMap(Object x, Object y, Object z) {\n        return x instanceof Map && y instanceof Map && z instanceof Map;\n    }\n\n    public boolean anyIterable(Object x, Object y, Object z) {\n        return x instanceof Iterable && y instanceof Iterable && z instanceof Iterable;\n    }\n\n    public boolean anyIterator(Object x, Object y, Object z) {\n        return x instanceof Iterator && y instanceof Iterator && z instanceof Iterator;\n    }\n\n    public boolean anyEnumeration(Object x, Object y, Object z) {\n        return x instanceof Enumeration && y instanceof Enumeration && z instanceof Enumeration;\n    }\n\n    public boolean anyList(Object x, Object y, Object z) {\n        return x instanceof List && y instanceof List && z instanceof List;\n    }\n\n    public boolean anySet(Object x, Object y, Object z) {\n        return x instanceof Set && y instanceof Set && z instanceof Set;\n    }\n\n    public boolean anyCollectionIterator(Object x, Object y, Object z) {\n        return x instanceof CollectionIterator && y instanceof CollectionIterator && z instanceof CollectionIterator;\n    }\n\n    public boolean anyMapIterator(Object x, Object y, Object z) {\n        return x instanceof MapIterator && y instanceof MapIterator && z instanceof MapIterator;\n    }\n\n    public boolean anyListIterator(Object x, Object y, Object z) {\n        return x instanceof ListIterator && y instanceof ListIterator && z instanceof ListIterator;\n    }\n\n    public boolean anyDeque(Object x, Object y, Object z) {\n        return x instanceof Deque && y instanceof Deque && z instanceof Deque;\n    }\n\n    public boolean anyQueue(Object x, Object y, Object z) {\n        return x instanceof Queue && y instanceof Queue && z instanceof Queue;\n    }\n\n    public boolean anyStack(Object x, Object y, Object z) {\n        return x instanceof Stack && y instanceof Stack && z instanceof Stack;\n    }\n\n    public boolean anyLinkedList(Object x, Object y, Object z) {\n        return x instanceof LinkedList && y instanceof LinkedList && z instanceof LinkedList;\n    }\n\n    public boolean anyPriorityQueue(Object x, Object y, Object z) {\n        return x instanceof PriorityQueue && y instanceof PriorityQueue && z instanceof PriorityQueue;\n    }\n\n    public boolean anyTreeSet(Object x, Object y, Object z) {\n        return x instanceof TreeSet && y instanceof TreeSet && z instanceof TreeSet;\n    }\n\n    public boolean anyNavigableSet(Object x, Object y, Object z) {\n        return x instanceof NavigableSet && y instanceof NavigableSet && z instanceof NavigableSet;\n    }\n\n    public boolean anyNavigableMap(Object x, Object y, Object z) {\n        return x instanceof NavigableMap && y instanceof NavigableMap && z instanceof NavigableMap;\n    }\n\n    public boolean anySortedSet(Object x, Object y, Object z) {\n        return x instanceof SortedSet && y instanceof SortedSet && z instanceof SortedSet;\n    }\n\n    public boolean anyNavigableSortedSet(Object x, Object y, Object z) {\n        return x instanceof NavigableSortedSet && y instanceof NavigableSortedSet && z instanceof NavigableSortedSet;\n    }\n\n    public boolean anyNavigableMap(Object x, Object y, Object z) {\n        return x instanceof NavigableMap && y instanceof NavigableMap && z instanceof NavigableMap;\n    }\n\n    public boolean anySetIterator(Object x, Object y, Object z) {\n        return x instanceof SetIterator && y instanceof SetIterator && z instanceof SetIterator;\n    }\n\n    public boolean anyListIterator(Object x, Object y, Object z) {\n        return x instanceof ListIterator && y instanceof ListIterator && z instanceof ListIterator;\n    }\n\n    public boolean anyDequeIterator(Object x, Object y, Object z) {\n        return x instanceof DequeIterator && y instanceof DequeIterator && z instanceof DequeIterator;\n    }\n\n    public boolean anyQueueIterator(Object x, Object y, Object z) {\n        return x instanceof QueueIterator && y instanceof QueueIterator && z instanceof QueueIterator;\n    }\n\n    public boolean anyStackIterator(Object x, Object y, Object z) {\n        return x instanceof StackIterator && y instanceof StackIterator && z instanceof StackIterator;\n    }\n\n    public boolean anyLinkedListIterator(Object x, Object y, Object z) {\n        return x instanceof LinkedListIterator && y instanceof LinkedListIterator && z instanceof LinkedListIterator;\n    }\n\n    public boolean anyPriorityQueueIterator(Object x, Object y, Object z) {\n        return x instanceof PriorityQueueIterator && y instanceof PriorityQueueIterator && z instanceof PriorityQueueIterator;\n    }\n\n    public boolean anyTreeSetIterator(Object x, Object y, Object z) {\n        return x instanceof TreeSetIterator && y instanceof TreeSetIterator && z instanceof TreeSetIterator;\n    }\n\n    public boolean anyNavigableSetIterator(Object x, Object y, Object z) {\n        return x instanceof NavigableSetIterator && y instanceof NavigableSetIterator && z instanceof NavigableSetIterator;\n    }\n\n    public boolean anyNavigableMapIterator(Object x, Object y, Object z) {\n        return x instanceof NavigableMapIterator && y instanceof NavigableMapIterator && z instanceof NavigableMapIterator;\n    }\n\n    public boolean anySortedSetIterator(Object x, Object y, Object z) {\n        return x instanceof SortedSetIterator && y instanceof SortedSetIterator && z instanceof SortedSetIterator;\n    }\n\n    public boolean anyNavigableSortedSetIterator(Object x, Object y, Object z) {\n        return x instanceof NavigableSortedSetIterator && y instanceof NavigableSortedSetIterator && z instanceof NavigableSortedSetIterator;\n    }\n\n    public boolean anyNavigableMapIterator(Object x, Object y, Object z) {\n        return x instanceof NavigableMapIterator && y instanceof NavigableMapIterator && z instanceof NavigableMapIterator;\n    }\n\n    public boolean anyCollectionIterator(Object x, Object y, Object z) {\n        return x instanceof CollectionIterator && y instanceof CollectionIterator && z instanceof CollectionIterator;\n    }\n\n    public boolean anyMapIterator(Object x, Object y, Object z) {\n        return x instanceof MapIterator && y instanceof MapIterator && z instanceof MapIterator;\n    }\n\n    public boolean anyListIterator(Object x, Object y, Object z) {\n        return x instanceof ListIterator && y instanceof ListIterator && z instanceof ListIterator;\n    }\n\n    public boolean anyDequeIterator(Object x, Object y, Object z) {\n        return x instanceof DequeIterator && y instanceof DequeIterator && z instanceof DequeIterator;\n    }\n\n    public boolean anyQueueIterator(Object x, Object y, Object z) {\n        return x instanceof QueueIterator && y instanceof QueueIterator && z instanceof QueueIterator;\n    }\n\n    public boolean anyStackIterator(Object x, Object y, Object z) {\n        return x instanceof StackIterator && y instanceof StackIterator && z instanceof StackIterator;\n    }\n\n    public boolean anyLinkedListIterator(Object x, Object y, Object z) {\n        return x instanceof LinkedListIterator && y instanceof LinkedListIterator && z instanceof LinkedListIterator;\n    }\n\n    public boolean anyPriorityQueueIterator(Object x, Object y, Object z) {\n        return x instanceof PriorityQueueIterator && y instanceof PriorityQueueIterator && z instanceof PriorityQueueIterator;\n    }\n\n    public boolean anyTreeSetIterator(Object x, Object y, Object z) {\n        return x instanceof TreeSetIterator && y instanceof TreeSetIterator && z instanceof TreeSetIterator;\n    }\n\n    public boolean anyNavigableSetIterator(Object x, Object y, Object z) {\n        return x instanceof NavigableSetIterator && y instanceof NavigableSetIterator && z instanceof NavigableSetIterator;\n    }\n\n    public boolean anyNavigableMapIterator(Object x, Object y, Object z) {\n        return x instanceof NavigableMapIterator && y instanceof NavigableMapIterator && z instanceof NavigableMapIterator;\n    }\n\n    public boolean anySortedSetIterator(Object x, Object y, Object z) {\n        return x instanceof SortedSetIterator && y instanceof SortedSetIterator && z instanceof SortedSetIterator;\n    }\n\n    public boolean anyNavigableSortedSetIterator(Object x, Object y, Object z) {\n        return x instanceof NavigableSortedSetIterator && y instanceof NavigableSortedSetIterator && z instanceof NavigableSortedSetIterator;\n    }\n\n    public boolean anyNavigableMapIterator(Object x, Object y, Object z) {\n        return x instanceof NavigableMapIterator && y instanceof NavigableMapIterator && z instanceof NavigableMapIterator;\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            return true;\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        return x instanceof Integer && y instanceof Integer && z instanceof Integer;\n    }\n\n    public boolean anyString(Object x, Object y, Object z) {\n        return x instanceof String && y instanceof String && z instanceof String;\n    }\n\n    public boolean anyDouble(Object x, Object y, Object z) {\n        return x instanceof Double && y instanceof Double && z instanceof Double;\n    }\n\n    public boolean anyBoolean(Object x, Object y, Object z) {\n        return x instanceof Boolean && y instanceof Boolean && z instanceof Boolean;\n    }\n\n    public boolean anyObject(Object x, Object y, Object z) {\n        return x instanceof Object && y instanceof Object && z instanceof Object;\n    }\n\n    public boolean anyArray(Object x, Object y, Object z) {\n        return x instanceof Object[] && y instanceof Object[] && z instanceof Object[];\n    }\n\n    public boolean anyCollection(Object x, Object y, Object z) {\n        return x instanceof Collection && y instanceof Collection && z instanceof Collection;\n    }\n\n    public boolean anyMap(Object x, Object y, Object z) {\n        return x instanceof Map && y instanceof Map && z instanceof Map;\n    }\n\n    public boolean anyIterable(Object x, Object y, Object z) {\n        return x instanceof Iterable && y instanceof Iterable && z instanceof Iterable;\n    }\n\n    public boolean anyIterator(Object x, Object y, Object z) {\n        return x instanceof Iterator && y instanceof Iterator && z instanceof Iterator;\n    }\n\n    public boolean anyEnumeration(Object x, Object y, Object z) {\n        return x instanceof Enumeration && y instanceof Enumeration && z instanceof Enumeration;\n    }\n\n    public boolean anyList(Object x, Object y, Object z) {\n        return x instanceof List && y instanceof List && z instanceof List;\n    }\n\n    public boolean anySet(Object x, Object y, Object z) {\n        return x instanceof Set && y instanceof Set && z instanceof Set;\n    }\n\n    public boolean anyCollection(Object x, Object y, Object z) {\n        return x instanceof Collection && y instanceof Collection && z instanceof Collection;\n    }\n\n    public boolean anyMap(Object x, Object y, Object z) {\n        return x instanceof Map && y instanceof Map && z instanceof Map;\n    }\n\n    public boolean anyIterable(Object x, Object y, Object z) {\n        return x instanceof Iterable && y instanceof Iterable && z instanceof Iterable;\n    }\n\n    public boolean anyIterator(Object x, Object y, Object z) {\n        return x instanceof Iterator && y instanceof Iterator && z instanceof Iterator;\n    }\n\n    public boolean anyEnumeration(Object x, Object y, Object z) {\n        return x instanceof Enumeration && y instanceof Enumeration && z instanceof Enumeration;\n    }\n\n    public boolean anyList(Object x, Object y, Object z) {\n        return x instanceof List && y instanceof List && z instanceof List;\n    }\n\n    public boolean anySet(Object x, Object y, Object z) {\n        return x instanceof Set && y instanceof Set && z instanceof Set;\n    }\n\n    public boolean anyCollection(Object x, Object y, Object z) {\n        return x instanceof Collection && y instanceof Collection && z instanceof Collection;\n    }\n\n    public boolean anyMap(Object x, Object y, Object z) {\n        return x instanceof Map && y instanceof Map && z instanceof Map;\n    }\n\n    public boolean anyIterable(Object x, Object y, Object z) {\n        return x instanceof Iterable && y instanceof Iterable && z instanceof Iterable;\n    }\n\n    public boolean anyIterator(Object x, Object y, Object z) {\n        return x instanceof Iterator && y instanceof Iterator && z instanceof Iterator;\n    }\n\n    public boolean anyEnumeration(Object x, Object y, Object z) {\n        return x instanceof Enumeration && y instanceof Enumeration && z instanceof Enumeration;\n    }\n\n    public boolean anyList(Object x, Object y, Object z) {\n        return x instanceof List && y instanceof List && z instanceof List;\n    }\n\n    public boolean anySet(Object x, Object y, Object z) {\n        return x instanceof Set && y instanceof Set && z instanceof Set;\n    }\n\n    public boolean anyCollection(Object x, Object y, Object z) {\n        return x instanceof Collection && y instanceof Collection && z instanceof Collection;\n    }\n\n    public boolean anyMap(Object x, Object y, Object z) {\n        return x instanceof Map && y instanceof Map && z instanceof Map;\n    }\n\n    public boolean anyIterable(Object x, Object y, Object z) {\n        return x instanceof Iterable && y instanceof Iterable && z instanceof Iterable;\n    }\n\n    public boolean anyIterator(Object x, Object y, Object z) {\n        return x instanceof Iterator && y instanceof Iterator && z instanceof Iterator;\n    }\n\n    public boolean anyEnumeration(Object x, Object y, Object z) {\n        return x instanceof Enumeration && y instanceof Enumeration && z instanceof Enumeration;\n    }\n\n    public boolean anyList(Object x, Object y, Object z) {\n        return x instanceof List && y instanceof List && z instanceof List;\n    }\n\n    public boolean anySet(Object x, Object y, Object z) {\n        return x instanceof Set && y instanceof Set && z instanceof Set;\n    }\n\n    public boolean anyCollection(Object x, Object y, Object z) {\n        return x instanceof Collection && y instanceof Collection && z instanceof Collection;\n    }\n\n    public boolean anyMap(Object x, Object y, Object z) {\n        return x instanceof Map && y instanceof Map && z instanceof Map;\n    }\n\n    public boolean anyIterable(Object x, Object y, Object z) {\n        return x instanceof Iterable && y instanceof Iterable && z instanceof Iterable;\n    }\n\n    public boolean anyIterator(Object x, Object y, Object z) {\n        return x instanceof Iterator && y instanceof Iterator && z instanceof Iterator;\n    }\n\n    public boolean anyEnumeration(Object x, Object y, Object z) {\n        return x instanceof Enumeration && y instanceof Enumeration && z instanceof Enumeration;\n    }\n\n    public boolean anyList(Object x, Object y, Object z) {\n        return x instanceof List && y instanceof List && z instanceof List;\n    }\n\n    public boolean anySet(Object x, Object y, Object z) {\n        return x instanceof Set && y instanceof Set && z instanceof Set;\n    }\n\n    public boolean anyCollection(Object x, Object y, Object z) {\n        return x instanceof Collection && y instanceof Collection && z instanceof Collection;\n    }\n\n    public boolean anyMap(Object x, Object y, Object z) {\n        return x instanceof Map && y instanceof Map && z instanceof Map;\n    }\n\n    public boolean anyIterable(Object x, Object y, Object z) {\n        return x instanceof Iterable && y instanceof Iterable && z instanceof Iterable;\n    }\n\n    public boolean anyIterator(Object x, Object y, Object z) {\n        return x instanceof Iterator && y instanceof Iterator && z instanceof Iterator;\n    }\n\n    public boolean anyEnumeration(Object x, Object y, Object z) {\n        return x instanceof Enumeration && y instanceof Enumeration && z instanceof Enumeration;\n    }\n\n    public boolean anyList(Object x, Object y, Object z) {\n        return x instanceof List && y instanceof List && z instanceof List;\n    }\n\n    public boolean anySet(Object x, Object y, Object z) {\n        return x instanceof Set && y instanceof Set && z instanceof Set;\n    }\n\n    public boolean anyCollection(Object x, Object y, Object z) {\n        return x instanceof Collection && y instanceof Collection && z instanceof Collection;\n    }\n\n    public boolean anyMap(Object x, Object y, Object z) {\n        return x instanceof Map && y instanceof Map && z instanceof Map;\n    }\n\n    public boolean anyIterable(Object x, Object y, Object z) {\n        return x instanceof Iterable && y instanceof Iterable && z instanceof Iterable;\n    }\n\n    public boolean anyIterator(Object x, Object y, Object z) {\n        return x instanceof Iterator && y instanceof Iterator && z instanceof Iterator;\n    }\n\n    public boolean anyEnumeration(Object x, Object y, Object z) {\n        return x instanceof Enumeration && y instanceof Enumeration && z instanceof Enumeration;\n    }\n\n    public boolean anyList(Object x, Object y, Object z) {\n        return x instanceof List && y instanceof List && z instanceof List;\n    }\n\n    public boolean anySet(Object x, Object y, Object z) {\n        return x instanceof Set && y instanceof Set && z instanceof Set;\n    }\n\n    public boolean anyCollection(Object x, Object y, Object z) {\n        return x instanceof Collection && y instanceof Collection && z instanceof Collection;\n    }\n\n    public boolean anyMap(Object x, Object y, Object z) {\n        return x instanceof Map && y instanceof Map && z instanceof Map;\n    }\n\n    public boolean anyIterable(Object x, Object y, Object z) {\n        return x instanceof Iterable && y instanceof Iterable && z instanceof Iterable;\n    }\n\n    public boolean anyIterator(Object x, Object y, Object z) {\n        return x instanceof Iterator && y instanceof Iterator && z instanceof Iterator;\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        return x instanceof Integer && y instanceof Integer && z instanceof Integer;\n    }\n\n    public boolean anyDouble(Object x, Object y, Object z) {\n        return x instanceof Double && y instanceof Double && z instanceof Double;\n    }\n\n    public boolean anyString(Object x, Object y, Object z) {\n        return x instanceof String && y instanceof String && z instanceof String;\n    }\n\n    public boolean anyBoolean(Object x, Object y, Object z) {\n        return x instanceof Boolean && y instanceof Boolean && z instanceof Boolean;\n    }\n\n    public boolean anyObject(Object x, Object y, Object z) {\n        return x instanceof Object && y instanceof Object && z instanceof Object;\n    }\n\n    public boolean anyArray(Object x, Object y, Object z) {\n        return x instanceof Object[] && y instanceof Object[] && z instanceof Object[];\n    }\n\n    public boolean anyCollection(Object x, Object y, Object z) {\n        return x instanceof Collection && y instanceof Collection && z instanceof Collection;\n    }\n\n    public boolean anyMap(Object x, Object y, Object z) {\n        return x instanceof Map && y instanceof Map && z instanceof Map;\n    }\n\n    public boolean anyIterable(Object x, Object y, Object z) {\n        return x instanceof Iterable && y instanceof Iterable && z instanceof Iterable;\n    }\n\n    public boolean anyIterator(Object x, Object y, Object z) {\n        return x instanceof Iterator && y instanceof Iterator && z instanceof Iterator;\n    }\n\n    public boolean anyList(Object x, Object y, Object z) {\n        return x instanceof List && y instanceof List && z instanceof List;\n    }\n\n    public boolean anySet(Object x, Object y, Object z) {\n        return x instanceof Set && y instanceof Set && z instanceof Set;\n    }\n\n    public boolean anyCollectionIterator(Object x, Object y, Object z) {\n        return x instanceof CollectionIterator && y instanceof CollectionIterator && z instanceof CollectionIterator;\n    }\n\n    public boolean anyMapIterator(Object x, Object y, Object z) {\n        return x instanceof MapIterator && y instanceof MapIterator && z instanceof MapIterator;\n    }\n\n    public boolean anyListIterator(Object x, Object y, Object z) {\n        return x instanceof ListIterator && y instanceof ListIterator && z instanceof ListIterator;\n    }\n\n    public boolean anySetIterator(Object x, Object y, Object z) {\n        return x instanceof SetIterator && y instanceof SetIterator && z instanceof SetIterator;\n    }\n\n    public boolean anyCollectionSpliterator(Object x, Object y, Object z) {\n        return x instanceof CollectionSpliterator && y instanceof CollectionSpliterator && z instanceof CollectionSpliterator;\n    }\n\n    public boolean anyMapSpliterator(Object x, Object y, Object z) {\n        return x instanceof MapSpliterator && y instanceof MapSpliterator && z instanceof MapSpliterator;\n    }\n\n    public boolean anyListSpliterator(Object x, Object y, Object z) {\n        return x instanceof ListSpliterator && y instanceof ListSpliterator && z instanceof ListSpliterator;\n    }\n\n    public boolean anySetSpliterator(Object x, Object y, Object z) {\n        return x instanceof SetSpliterator && y instanceof SetSpliterator && z instanceof SetSpliterator;\n    }\n\n    public boolean anySpliterator(Object x, Object y, Object z) {\n        return x instanceof Spliterator && y instanceof Spliterator && z instanceof Spliterator;\n    }\n\n    public boolean anyFunction(Object x, Object y, Object z) {\n        return x instanceof Function && y instanceof Function && z instanceof Function;\n    }\n\n    public boolean anyBiFunction(Object x, Object y, Object z) {\n        return x instanceof BiFunction && y instanceof BiFunction && z instanceof BiFunction;\n    }\n\n    public boolean anyConsumer(Object x, Object y, Object z) {\n        return x instanceof Consumer && y instanceof Consumer && z instanceof Consumer;\n    }\n\n    public boolean anyFunctionConsumer(Object x, Object y, Object z) {\n        return x instanceof FunctionConsumer && y instanceof FunctionConsumer && z instanceof FunctionConsumer;\n    }\n\n    public boolean anyBiFunctionConsumer(Object x, Object y, Object z) {\n        return x instanceof BiFunctionConsumer && y instanceof BiFunctionConsumer && z instanceof BiFunctionConsumer;\n    }\n\n    public boolean anyPredicate(Object x, Object y, Object z) {\n        return x instanceof Predicate && y instanceof Predicate && z instanceof Predicate;\n    }\n\n    public boolean anyFunctionPredicate(Object x, Object y, Object z) {\n        return x instanceof FunctionPredicate && y instanceof FunctionPredicate && z instanceof FunctionPredicate;\n    }\n\n    public boolean anyBiFunctionPredicate(Object x, Object y, Object z) {\n        return x instanceof BiFunctionPredicate && y instanceof BiFunctionPredicate && z instanceof BiFunctionPredicate;\n    }\n\n    public boolean anyConsumerBiPredicate(Object x, Object y, Object z) {\n        return x instanceof ConsumerBiPredicate && y instanceof ConsumerBiPredicate && z instanceof ConsumerBiPredicate;\n    }\n\n    public boolean anyFunctionConsumerBiPredicate(Object x, Object y, Object z) {\n        return x instanceof FunctionConsumerBiPredicate && y instanceof FunctionConsumerBiPredicate && z instanceof FunctionConsumerBiPredicate;\n    }\n\n    public boolean anyBiFunctionConsumerBiPredicate(Object x, Object y, Object z) {\n        return x instanceof BiFunctionConsumerBiPredicate && y instanceof BiFunctionConsumerBiPredicate && z instanceof BiFunctionConsumerBiPredicate;\n    }\n\n    public boolean anyFunctionBiPredicate(Object x, Object y, Object z) {\n        return x instanceof FunctionBiPredicate && y instanceof FunctionBiPredicate && z instanceof FunctionBiPredicate;\n    }\n\n    public boolean anyBiFunctionFunction(Object x, Object y, Object z) {\n        return x instanceof BiFunctionFunction && y instanceof BiFunctionFunction && z instanceof BiFunctionFunction;\n    }\n\n    public boolean anyFunctionFunctionBiPredicate(Object x, Object y, Object z) {\n        return x instanceof FunctionFunctionBiPredicate && y instanceof FunctionFunctionBiPredicate && z instanceof FunctionFunctionBiPredicate;\n    }\n\n    public boolean anyBiFunctionFunctionFunction(Object x, Object y, Object z) {\n        return x instanceof BiFunctionFunctionFunction && y instanceof BiFunctionFunctionFunction && z instanceof BiFunctionFunctionFunction;\n    }\n\n    public boolean anyFunctionFunctionFunctionBiPredicate(Object x, Object y, Object z) {\n        return x instanceof FunctionFunctionFunctionBiPredicate && y instanceof FunctionFunctionFunctionBiPredicate && z instanceof FunctionFunctionFunctionBiPredicate;\n    }\n\n    public boolean anyBiFunctionFunctionFunctionFunction(Object x, Object y, Object z) {\n        return x instanceof BiFunctionFunctionFunctionFunction && y instanceof BiFunctionFunctionFunctionFunction && z instanceof BiFunctionFunctionFunctionFunction;\n    }\n\n    public boolean anyFunctionFunctionFunctionFunctionBiPredicate(Object x, Object y, Object z) {\n        return x instanceof FunctionFunctionFunctionFunctionBiPredicate && y instanceof FunctionFunctionFunctionFunctionBiPredicate && z instanceof FunctionFunctionFunctionFunctionBiPredicate;\n    }\n\n    public boolean anyBiFunctionFunctionFunctionFunctionFunction(Object x, Object y, Object z) {\n        return x instanceof BiFunctionFunctionFunctionFunctionFunction && y instanceof BiFunctionFunctionFunctionFunctionFunction && z instanceof BiFunctionFunctionFunctionFunctionFunction;\n    }\n\n    public boolean anyFunctionFunctionFunctionFunctionFunctionBiPredicate(Object x, Object y, Object z) {\n        return x instanceof FunctionFunctionFunctionFunctionFunctionBiPredicate && y instanceof FunctionFunctionFunctionFunctionFunctionBiPredicate && z instanceof FunctionFunctionFunctionFunctionFunctionBiPredicate;\n    }\n\n    public boolean anyBiFunctionFunctionFunctionFunctionFunctionFunctionFunction(Object x, Object y, Object z) {\n        return x instanceof BiFunctionFunctionFunctionFunctionFunctionFunction && y instanceof BiFunctionFunctionFunctionFunctionFunctionFunction && z instanceof BiFunctionFunctionFunctionFunctionFunctionFunction;\n    }\n\n    public boolean anyFunctionFunctionFunctionFunctionFunctionFunctionFunctionBiPredicate(Object x, Object y, Object z) {\n        return x instanceof FunctionFunctionFunctionFunctionFunctionFunctionBiPredicate && y instanceof FunctionFunctionFunctionFunctionFunctionFunctionBiPredicate && z instanceof FunctionFunctionFunctionFunctionFunctionFunctionBiPredicate;\n    }\n\n    public boolean anyBiFunctionFunctionFunctionFunctionFunctionFunctionFunctionFunction(Object x, Object y, Object z) {\n        return x instanceof BiFunctionFunctionFunctionFunctionFunctionFunctionFunction && y instanceof BiFunctionFunctionFunctionFunctionFunctionFunctionFunction && z instanceof BiFunctionFunctionFunctionFunctionFunctionFunctionFunction;\n    }\n\n    public boolean anyFunctionFunctionFunctionFunctionFunctionFunctionFunctionFunctionBiPredicate(Object x, Object y, Object z) {\n        return x instanceof FunctionFunctionFunctionFunctionFunctionFunctionFunctionFunctionBiPredicate && y instanceof FunctionFunctionFunctionFunctionFunctionFunctionFunctionFunctionBiPredicate && z instanceof FunctionFunctionFunctionFunctionFunctionFunctionFunctionBiPredicate;\n    }\n\n    public boolean anyBiFunctionFunctionFunctionFunctionFunctionFunctionFunctionFunctionFunction(Object x, Object y, Object z) {\n        return x instanceof BiFunctionFunctionFunctionFunctionFunctionFunctionFunctionFunction && y instanceof BiFunctionFunctionFunctionFunctionFunctionFunctionFunctionFunction && z instanceof BiFunctionFunctionFunctionFunctionFunctionFunctionFunctionFunction;\n    }\n\n    public boolean anyFunctionFunctionFunctionFunctionFunctionFunctionFunctionFunctionFunctionBiPredicate(Object x, Object y, Object z) {\n        return x instanceof FunctionFunctionFunctionFunctionFunctionFunctionFunctionFunctionFunctionBiPredicate && y instanceof FunctionFunctionFunctionFunctionFunctionFunctionFunctionFunctionBiPredicate && z instanceof FunctionFunctionFunctionFunctionFunctionFunctionFunctionBiPredicate;\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        return (int) x + (int) y == (int) z || (int) x + (int) z == (int) y;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        return x instanceof Integer && y instanceof Integer && z instanceof Integer;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        return x instanceof Integer && y instanceof Integer && z instanceof Integer;\n    }\n\n    public boolean anyString(Object x, Object y, Object z) {\n        return x instanceof String && y instanceof String && z instanceof String;\n    }\n\n    public boolean anyDouble(Object x, Object y, Object z) {\n        return x instanceof Double && y instanceof Double && z instanceof Double;\n    }\n\n    public boolean anyBoolean(Object x, Object y, Object z) {\n        return x instanceof Boolean && y instanceof Boolean && z instanceof Boolean;\n    }\n\n    public boolean anyChar(Object x, Object y, Object z) {\n        return x instanceof Character && y instanceof Character && z instanceof Character;\n    }\n\n    public boolean anyObject(Object x, Object y, Object z) {\n        return x instanceof Object && y instanceof Object && z instanceof Object;\n    }\n\n    public boolean anyCollection(Object x, Object y, Object z) {\n        return x instanceof Collection && y instanceof Collection && z instanceof Collection;\n    }\n\n    public boolean anyMap(Object x, Object y, Object z) {\n        return x instanceof Map && y instanceof Map && z instanceof Map;\n    }\n\n    public boolean anyList(Object x, Object y, Object z) {\n        return x instanceof List && y instanceof List && z instanceof List;\n    }\n\n    public boolean anySet(Object x, Object y, Object z) {\n        return x instanceof Set && y instanceof Set && z instanceof Set;\n    }\n\n    public boolean anyIterable(Object x, Object y, Object z) {\n        return x instanceof Iterable && y instanceof Iterable && z instanceof Iterable;\n    }\n\n    public boolean anyIterator(Object x, Object y, Object z) {\n        return x instanceof Iterator && y instanceof Iterator && z instanceof Iterator;\n    }\n\n    public boolean anyEnumeration(Object x, Object y, Object z) {\n        return x instanceof Enumeration && y instanceof Enumeration && z instanceof Enumeration;\n    }\n\n    public boolean anyCollectionIterator(Object x, Object y, Object z) {\n        return x instanceof CollectionIterator && y instanceof CollectionIterator && z instanceof CollectionIterator;\n    }\n\n    public boolean anyMapIterator(Object x, Object y, Object z) {\n        return x instanceof MapIterator && y instanceof MapIterator && z instanceof MapIterator;\n    }\n\n    public boolean anyListIterator(Object x, Object y, Object z) {\n        return x instanceof ListIterator && y instanceof ListIterator && z instanceof ListIterator;\n    }\n\n    public boolean anySpliterator(Object x, Object y, Object z) {\n        return x instanceof Spliterator && y instanceof Spliterator && z instanceof Spliterator;\n    }\n\n    public boolean anyStream(Object x, Object y, Object z) {\n        return x instanceof Stream && y instanceof Stream && z instanceof Stream;\n    }\n\n    public boolean anyParallelStream(Object x, Object y, Object z) {\n        return x instanceof ParallelStream && y instanceof ParallelStream && z instanceof ParallelStream;\n    }\n\n    public boolean anyFunction(Object x, Object y, Object z) {\n        return x instanceof Function && y instanceof Function && z instanceof Function;\n    }\n\n    public boolean anyPredicate(Object x, Object y, Object z) {\n        return x instanceof Predicate && y instanceof Predicate && z instanceof Predicate;\n    }\n\n    public boolean anyConsumer(Object x, Object y, Object z) {\n        return x instanceof Consumer && y instanceof Consumer && z instanceof Consumer;\n    }\n\n    public boolean anyBiConsumer(Object x, Object y, Object z) {\n        return x instanceof BiConsumer && y instanceof BiConsumer && z instanceof BiConsumer;\n    }\n\n    public boolean anyFunctionToBoolean(Object x, Object y, Object z) {\n        return x instanceof FunctionToBoolean && y instanceof FunctionToBoolean && z instanceof FunctionToBoolean;\n    }\n\n    public boolean anyFunctionToByte(Object x, Object y, Object z) {\n        return x instanceof FunctionToByte && y instanceof FunctionToByte && z instanceof FunctionToByte;\n    }\n\n    public boolean anyFunctionToChar(Object x, Object y, Object z) {\n        return x instanceof FunctionToChar && y instanceof FunctionToChar && z instanceof FunctionToChar;\n    }\n\n    public boolean anyFunctionToShort(Object x, Object y, Object z) {\n        return x instanceof FunctionToShort && y instanceof FunctionToShort && z instanceof FunctionToShort;\n    }\n\n    public boolean anyFunctionToInt(Object x, Object y, Object z) {\n        return x instanceof FunctionToInt && y instanceof FunctionToInt && z instanceof FunctionToInt;\n    }\n\n    public boolean anyFunctionToLong(Object x, Object y, Object z) {\n        return x instanceof FunctionToLong && y instanceof FunctionToLong && z instanceof FunctionToLong;\n    }\n\n    public boolean anyFunctionToFloat(Object x, Object y, Object z) {\n        return x instanceof FunctionToFloat && y instanceof FunctionToFloat && z instanceof FunctionToFloat;\n    }\n\n    public boolean anyFunctionToDouble(Object x, Object y, Object z) {\n        return x instanceof FunctionToDouble && y instanceof FunctionToDouble && z instanceof FunctionToDouble;\n    }\n\n    public boolean anyFunctionToBooleanSupplier(Object x, Object y, Object z) {\n        return x instanceof FunctionToBooleanSupplier && y instanceof FunctionToBooleanSupplier && z instanceof FunctionToBooleanSupplier;\n    }\n\n    public boolean anyFunctionToByteSupplier(Object x, Object y, Object z) {\n        return x instanceof FunctionToByteSupplier && y instanceof FunctionToByteSupplier && z instanceof FunctionToByteSupplier;\n    }\n\n    public boolean anyFunctionToCharSupplier(Object x, Object y, Object z) {\n        return x instanceof FunctionToCharSupplier && y instanceof FunctionToCharSupplier && z instanceof FunctionToCharSupplier;\n    }\n\n    public boolean anyFunctionToShortSupplier(Object x, Object y, Object z) {\n        return x instanceof FunctionToShortSupplier && y instanceof FunctionToShortSupplier && z instanceof FunctionToShortSupplier;\n    }\n\n    public boolean anyFunctionToIntSupplier(Object x, Object y, Object z) {\n        return x instanceof FunctionToIntSupplier && y instanceof FunctionToIntSupplier && z instanceof FunctionToIntSupplier;\n    }\n\n    public boolean anyFunctionToLongSupplier(Object x, Object y, Object z) {\n        return x instanceof FunctionToLongSupplier && y instanceof FunctionToLongSupplier && z instanceof FunctionToLongSupplier;\n    }\n\n    public boolean anyFunctionToFloatSupplier(Object x, Object y, Object z) {\n        return x instanceof FunctionToFloatSupplier && y instanceof FunctionToFloatSupplier && z instanceof FunctionToFloatSupplier;\n    }\n\n    public boolean anyFunctionToDoubleSupplier(Object x, Object y, Object z) {\n        return x instanceof FunctionToDoubleSupplier && y instanceof FunctionToDoubleSupplier && z instanceof FunctionToDoubleSupplier;\n    }\n\n    public boolean anyFunctionToBooleanBiFunction(Object x, Object y, Object z) {\n        return x instanceof FunctionToBooleanBiFunction && y instanceof FunctionToBooleanBiFunction && z instanceof FunctionToBooleanBiFunction;\n    }\n\n    public boolean anyFunctionToByteBiFunction(Object x, Object y, Object z) {\n        return x instanceof FunctionToByteBiFunction && y instanceof FunctionToByteBiFunction && z instanceof FunctionToByteBiFunction;\n    }\n\n    public boolean anyFunctionToCharBiFunction(Object x, Object y, Object z) {\n        return x instanceof FunctionToCharBiFunction && y instanceof FunctionToCharBiFunction && z instanceof FunctionToCharBiFunction;\n    }\n\n    public boolean anyFunctionToShortBiFunction(Object x, Object y, Object z) {\n        return x instanceof FunctionToShortBiFunction && y instanceof FunctionToShortBiFunction && z instanceof FunctionToShortBiFunction;\n    }\n\n    public boolean anyFunctionToIntBiFunction(Object x, Object y, Object z) {\n        return x instanceof FunctionToIntBiFunction && y instanceof FunctionToIntBiFunction && z instanceof FunctionToIntBiFunction;\n    }\n\n    public boolean anyFunctionToLongBiFunction(Object x, Object y, Object z) {\n        return x instanceof FunctionToLongBiFunction && y instanceof FunctionToLongBiFunction && z instanceof FunctionToLongBiFunction;\n    }\n\n    public boolean anyFunctionToFloatBiFunction(Object x, Object y, Object z) {\n        return x instanceof FunctionToFloatBiFunction && y instanceof FunctionToFloatBiFunction && z instanceof FunctionToFloatBiFunction;\n    }\n\n    public boolean anyFunctionToDoubleBiFunction(Object x, Object y, Object z) {\n        return x instanceof FunctionToDoubleBiFunction && y instanceof FunctionToDoubleBiFunction && z instanceof FunctionToDoubleBiFunction;\n    }\n\n    public boolean anyFunctionToBooleanFunction(Object x, Object y, Object z) {\n        return x instanceof FunctionToBooleanFunction && y instanceof FunctionToBooleanFunction && z instanceof FunctionToBooleanFunction;\n    }\n\n    public boolean anyFunctionToByteFunction(Object x, Object y, Object z) {\n        return x instanceof FunctionToByteFunction && y instanceof FunctionToByteFunction && z instanceof FunctionToByteFunction;\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        return x == y || x == z || y == z;\n    }\n\n    public String longestPalindrome(String s) {\n        if (s == null || s.length() == 0) {\n            return \"\";\n        }\n\n        int len = s.length();\n        int[][] dp = new int[len][len];\n        for (int i = 0; i < len; i++) {\n            dp[i][i] = 1;\n        }\n\n        for (int i = 1; i < len; i++) {\n            for (int j = 0; j < i; j++) {\n                if (anyInt(s.charAt(j), s.charAt(i), s.charAt(j)) && dp[j + 1][i - 1] + 2 >= dp[j][i]) {\n                    dp[j + 1][i] = dp[j][i] + 2;\n                }\n            }\n        }\n\n        return s.substring(dp[0][len - 1] / 2, dp[0][len - 1] / 2 + 1);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            return true;\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        return x == null || y == null || z == null;\n    }\n\n    public boolean anyInt(int x, int y, int z) {\n        return x == 0 || y == 0 || z == 0;\n    }\n\n    public boolean anyInt(long x, long y, long z) {\n        return x == 0 || y == 0 || z == 0;\n    }\n\n    public boolean anyInt(double x, double y, double z) {\n        return x == 0 || y == 0 || z == 0;\n    }\n\n    public boolean anyInt(float x, float y, float z) {\n        return x == 0 || y == 0 || z == 0;\n    }\n\n    public boolean anyInt(char x, char y, char z) {\n        return x == 0 || y == 0 || z == 0;\n    }\n\n    public boolean anyInt(boolean x, boolean y, boolean z) {\n        return x == false || y == false || z == false;\n    }\n\n    public boolean anyInt(String x, String y, String z) {\n        return x == null || y == null || z == null;\n    }\n\n    public boolean anyInt(Object x, Object y, Object z, Object w) {\n        return x == null || y == null || z == null || w == null;\n    }\n\n    public boolean anyInt(int x, int y, int z, int w) {\n        return x == 0 || y == 0 || z == 0 || w == 0;\n    }\n\n    public boolean anyInt(long x, long y, long z, long w) {\n        return x == 0 || y == 0 || z == 0 || w == 0;\n    }\n\n    public boolean anyInt(double x, double y, double z, double w) {\n        return x == 0 || y == 0 || z == 0 || w == 0;\n    }\n\n    public boolean anyInt(float x, float y, float z, float w) {\n        return x == 0 || y == 0 || z == 0 || w == 0;\n    }\n\n    public boolean anyInt(char x, char y, char z, char w) {\n        return x == 0 || y == 0 || z == 0 || w == 0;\n    }\n\n    public boolean anyInt(boolean x, boolean y, boolean z, boolean w) {\n        return x == false || y == false || z == false || w == false;\n    }\n\n    public boolean anyInt(String x, String y, String z, String w) {\n        return x == null || y == null || z == null || w == null;\n    }\n\n    public boolean anyInt(Object x, Object y, Object z, Object w, Object v) {\n        return x == null || y == null || z == null || w == null || v == null;\n    }\n\n    public boolean anyInt(int x, int y, int z, int w, int v) {\n        return x == 0 || y == 0 || z == 0 || w == 0 || v == 0;\n    }\n\n    public boolean anyInt(long x, long y, long z, long w, long v) {\n        return x == 0 || y == 0 || z == 0 || w == 0 || v == 0;\n    }\n\n    public boolean anyInt(double x, double y, double z, double w, double v) {\n        return x == 0 || y == 0 || z == 0 || w == 0 || v == 0;\n    }\n\n    public boolean anyInt(float x, float y, float z, float w, float v) {\n        return x == 0 || y == 0 || z == 0 || w == 0 || v == 0;\n    }\n\n    public boolean anyInt(char x, char y, char z, char w, char v) {\n        return x == 0 || y == 0 || z == 0 || w == 0 || v == 0;\n    }\n\n    public boolean anyInt(boolean x, boolean y, boolean z, boolean w, boolean v) {\n        return x == false || y == false || z == false || w == false || v == false;\n    }\n\n    public boolean anyInt(String x, String y, String z, String w, String v) {\n        return x == null || y == null || z == null || w == null || v == null;\n    }\n\n    public boolean anyInt(Object x, Object y, Object z, Object w, Object v, Object u) {\n        return x == null || y == null || z == null || w == null || v == null || u == null;\n    }\n\n    public boolean anyInt(int x, int y, int z, int w, int v, int u) {\n        return x == 0 || y == 0 || z == 0 || w == 0 || v == 0 || u == 0;\n    }\n\n    public boolean anyInt(long x, long y, long z, long w, long v, long u) {\n        return x == 0 || y == 0 || z == 0 || w == 0 || v == 0 || u == 0;\n    }\n\n    public boolean anyInt(double x, double y, double z, double w, double v, double u) {\n        return x == 0 || y == 0 || z == 0 || w == 0 || v == 0 || u == 0;\n    }\n\n    public boolean anyInt(float x, float y, float z, float w, float v, float u) {\n        return x == 0 || y == 0 || z == 0 || w == 0 || v == 0 || u == 0;\n    }\n\n    public boolean anyInt(char x, char y, char z, char w, char v, char u) {\n        return x == 0 || y == 0 || z == 0 || w == 0 || v == 0 || u == 0;\n    }\n\n    public boolean anyInt(boolean x, boolean y, boolean z, boolean w, boolean v, boolean u) {\n        return x == false || y == false || z == false || w == false || v == false || u == false;\n    }\n\n    public boolean anyInt(String x, String y, String z, String w, String v, String u) {\n        return x == null || y == null || z == null || w == null || v == null || u == null;\n    }\n\n    public boolean anyInt(Object x, Object y, Object z, Object w, Object v, Object u, Object v1) {\n        return x == null || y == null || z == null || w == null || v == null || u == null || v1 == null;\n    }\n\n    public boolean anyInt(int x, int y, int z, int w, int v, int u, int v1) {\n        return x == 0 || y == 0 || z == 0 || w == 0 || v == 0 || u == 0 || v1 == 0;\n    }\n\n    public boolean anyInt(long x, long y, long z, long w, long v, long u, long v1) {\n        return x == 0 || y == 0 || z == 0 || w == 0 || v == 0 || u == 0 || v1 == 0;\n    }\n\n    public boolean anyInt(double x, double y, double z, double w, double v, double u, double v1) {\n        return x == 0 || y == 0 || z == 0 || w == 0 || v == 0 || u == 0 || v1 == 0;\n    }\n\n    public boolean anyInt(float x, float y, float z, float w, float v, float u, float v1) {\n        return x == 0 || y == 0 || z == 0 || w == 0 || v == 0 || u == 0 || v1 == 0;\n    }\n\n    public boolean anyInt(char x, char y, char z, char w, char v, char u, char v1) {\n        return x == 0 || y == 0 || z == 0 || w == 0 || v == 0 || u == 0 || v1 == 0;\n    }\n\n    public boolean anyInt(boolean x, boolean y, boolean z, boolean w, boolean v, boolean u, boolean v1) {\n        return x == false || y == false || z == false || w == false || v == false || u == false || v1 == false;\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            return true;\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        if (x == null || y == null || z == null) {\n            return false;\n        }\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            return true;\n        }\n        if (x instanceof Integer && y instanceof Integer && z instanceof String) {\n            return true;\n        }\n        if (x instanceof Integer && y instanceof String && z instanceof Integer) {\n            return true;\n        }\n        if (x instanceof Integer && y instanceof String && z instanceof String) {\n            return true;\n        }\n        if (x instanceof String && y instanceof Integer && z instanceof Integer) {\n            return true;\n        }\n        if (x instanceof String && y instanceof Integer && z instanceof String) {\n            return true;\n        }\n        if (x instanceof String && y instanceof String && z instanceof Integer) {\n            return true;\n        }\n        if (x instanceof String && y instanceof String && z instanceof String) {\n            return true;\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        return x instanceof Integer && y instanceof Integer && z instanceof Integer;\n    }\n\n    public boolean anyString(Object x, Object y, Object z) {\n        return x instanceof String && y instanceof String && z instanceof String;\n    }\n\n    public boolean anyDouble(Object x, Object y, Object z) {\n        return x instanceof Double && y instanceof Double && z instanceof Double;\n    }\n\n    public boolean anyBoolean(Object x, Object y, Object z) {\n        return x instanceof Boolean && y instanceof Boolean && z instanceof Boolean;\n    }\n\n    public boolean anyChar(Object x, Object y, Object z) {\n        return x instanceof Character && y instanceof Character && z instanceof Character;\n    }\n\n    public boolean anyObject(Object x, Object y, Object z) {\n        return x instanceof Object && y instanceof Object && z instanceof Object;\n    }\n\n    public boolean anyCollection(Object x, Object y, Object z) {\n        return x instanceof Collection && y instanceof Collection && z instanceof Collection;\n    }\n\n    public boolean anyMap(Object x, Object y, Object z) {\n        return x instanceof Map && y instanceof Map && z instanceof Map;\n    }\n\n    public boolean anyIterable(Object x, Object y, Object z) {\n        return x instanceof Iterable && y instanceof Iterable && z instanceof Iterable;\n    }\n\n    public boolean anyIterator(Object x, Object y, Object z) {\n        return x instanceof Iterator && y instanceof Iterator && z instanceof Iterator;\n    }\n\n    public boolean anyRunnable(Object x, Object y, Object z) {\n        return x instanceof Runnable && y instanceof Runnable && z instanceof Runnable;\n    }\n\n    public boolean anyFunction(Object x, Object y, Object z) {\n        return x instanceof Function && y instanceof Function && z instanceof Function;\n    }\n\n    public boolean anySupplier(Object x, Object y, Object z) {\n        return x instanceof Supplier && y instanceof Supplier && z instanceof Supplier;\n    }\n\n    public boolean anyConsumer(Object x, Object y, Object z) {\n        return x instanceof Consumer && y instanceof Consumer && z instanceof Consumer;\n    }\n\n    public boolean anyPredicate(Object x, Object y, Object z) {\n        return x instanceof Predicate && y instanceof Predicate && z instanceof Predicate;\n    }\n\n    public boolean anyBiPredicate(Object x, Object y, Object z) {\n        return x instanceof BiPredicate && y instanceof BiPredicate && z instanceof BiPredicate;\n    }\n\n    public boolean anyFunctionToBoolean(Object x, Object y, Object z) {\n        return x instanceof FunctionToBoolean && y instanceof FunctionToBoolean && z instanceof FunctionToBoolean;\n    }\n\n    public boolean anyFunctionToByte(Object x, Object y, Object z) {\n        return x instanceof FunctionToByte && y instanceof FunctionToByte && z instanceof FunctionToByte;\n    }\n\n    public boolean anyFunctionToChar(Object x, Object y, Object z) {\n        return x instanceof FunctionToChar && y instanceof FunctionToChar && z instanceof FunctionToChar;\n    }\n\n    public boolean anyFunctionToInt(Object x, Object y, Object z) {\n        return x instanceof FunctionToInt && y instanceof FunctionToInt && z instanceof FunctionToInt;\n    }\n\n    public boolean anyFunctionToLong(Object x, Object y, Object z) {\n        return x instanceof FunctionToLong && y instanceof FunctionToLong && z instanceof FunctionToLong;\n    }\n\n    public boolean anyFunctionToShort(Object x, Object y, Object z) {\n        return x instanceof FunctionToShort && y instanceof FunctionToShort && z instanceof FunctionToShort;\n    }\n\n    public boolean anyFunctionToFloat(Object x, Object y, Object z) {\n        return x instanceof FunctionToFloat && y instanceof FunctionToFloat && z instanceof FunctionToFloat;\n    }\n\n    public boolean anyFunctionToDouble(Object x, Object y, Object z) {\n        return x instanceof FunctionToDouble && y instanceof FunctionToDouble && z instanceof FunctionToDouble;\n    }\n\n    public boolean anyFunctionToBooleanSupplier(Object x, Object y, Object z) {\n        return x instanceof FunctionToBooleanSupplier && y instanceof FunctionToBooleanSupplier && z instanceof FunctionToBooleanSupplier;\n    }\n\n    public boolean anyFunctionToByteSupplier(Object x, Object y, Object z) {\n        return x instanceof FunctionToByteSupplier && y instanceof FunctionToByteSupplier && z instanceof FunctionToByteSupplier;\n    }\n\n    public boolean anyFunctionToCharSupplier(Object x, Object y, Object z) {\n        return x instanceof FunctionToCharSupplier && y instanceof FunctionToCharSupplier && z instanceof FunctionToCharSupplier;\n    }\n\n    public boolean anyFunctionToIntSupplier(Object x, Object y, Object z) {\n        return x instanceof FunctionToIntSupplier && y instanceof FunctionToIntSupplier && z instanceof FunctionToIntSupplier;\n    }\n\n    public boolean anyFunctionToLongSupplier(Object x, Object y, Object z) {\n        return x instanceof FunctionToLongSupplier && y instanceof FunctionToLongSupplier && z instanceof FunctionToLongSupplier;\n    }\n\n    public boolean anyFunctionToShortSupplier(Object x, Object y, Object z) {\n        return x instanceof FunctionToShortSupplier && y instanceof FunctionToShortSupplier && z instanceof FunctionToShortSupplier;\n    }\n\n    public boolean anyFunctionToFloatSupplier(Object x, Object y, Object z) {\n        return x instanceof FunctionToFloatSupplier && y instanceof FunctionToFloatSupplier && z instanceof FunctionToFloatSupplier;\n    }\n\n    public boolean anyFunctionToDoubleSupplier(Object x, Object y, Object z) {\n        return x instanceof FunctionToDoubleSupplier && y instanceof FunctionToDoubleSupplier && z instanceof FunctionToDoubleSupplier;\n    }\n\n    public boolean anyFunctionToBooleanBiPredicate(Object x, Object y, Object z) {\n        return x instanceof FunctionToBooleanBiPredicate && y instanceof FunctionToBooleanBiPredicate && z instanceof FunctionToBooleanBiPredicate;\n    }\n\n    public boolean anyFunctionToByteBiPredicate(Object x, Object y, Object z) {\n        return x instanceof FunctionToByteBiPredicate && y instanceof FunctionToByteBiPredicate && z instanceof FunctionToByteBiPredicate;\n    }\n\n    public boolean anyFunctionToCharBiPredicate(Object x, Object y, Object z) {\n        return x instanceof FunctionToCharBiPredicate && y instanceof FunctionToCharBiPredicate && z instanceof FunctionToCharBiPredicate;\n    }\n\n    public boolean anyFunctionToIntBiPredicate(Object x, Object y, Object z) {\n        return x instanceof FunctionToIntBiPredicate && y instanceof FunctionToIntBiPredicate && z instanceof FunctionToIntBiPredicate;\n    }\n\n    public boolean anyFunctionToLongBiPredicate(Object x, Object y, Object z) {\n        return x instanceof FunctionToLongBiPredicate && y instanceof FunctionToLongBiPredicate && z instanceof FunctionToLongBiPredicate;\n    }\n\n    public boolean anyFunctionToShortBiPredicate(Object x, Object y, Object z) {\n        return x instanceof FunctionToShortBiPredicate && y instanceof FunctionToShortBiPredicate && z instanceof FunctionToShortBiPredicate;\n    }\n\n    public boolean anyFunctionToFloatBiPredicate(Object x, Object y, Object z) {\n        return x instanceof FunctionToFloatBiPredicate && y instanceof FunctionToFloatBiPredicate && z instanceof FunctionToFloatBiPredicate;\n    }\n\n    public boolean anyFunctionToDoubleBiPredicate(Object x, Object y, Object z) {\n        return x instanceof FunctionToDoubleBiPredicate && y instanceof FunctionToDoubleBiPredicate && z instanceof FunctionToDoubleBiPredicate;\n    }\n\n    public boolean anyFunctionToBooleanFunction(Object x, Object y, Object z) {\n        return x instanceof FunctionToBooleanFunction && y instanceof FunctionToBooleanFunction && z instanceof FunctionToBooleanFunction;\n    }\n\n    public boolean anyFunctionToByteFunction(Object x, Object y, Object z) {\n        return x instanceof FunctionToByteFunction && y instanceof FunctionToByteFunction && z instanceof FunctionToByteFunction;\n    }\n\n    public boolean anyFunctionToCharFunction(Object x, Object y, Object z) {\n        return x instanceof FunctionToCharFunction && y instanceof FunctionToCharFunction && z instanceof FunctionToCharFunction;\n    }\n\n    public boolean anyFunctionToIntFunction(Object x, Object y, Object z) {\n        return x instanceof FunctionToIntFunction && y instanceof FunctionToIntFunction && z instanceof FunctionToIntFunction;\n    }\n\n    public boolean anyFunctionToLongFunction(Object x, Object y, Object z) {\n        return x instanceof FunctionToLongFunction && y instanceof FunctionToLongFunction && z instanceof FunctionToLongFunction;\n    }\n\n    public boolean anyFunctionToShortFunction(Object x, Object y, Object z) {\n        return x instanceof FunctionToShortFunction && y instanceof FunctionToShortFunction && z instanceof FunctionToShortFunction;\n    }\n\n    public boolean anyFunctionToFloatFunction(Object x, Object y, Object z) {\n        return x instanceof FunctionToFloatFunction && y instanceof FunctionToFloatFunction && z instanceof FunctionToFloatFunction;\n    }\n\n    public boolean anyFunctionToDoubleFunction(Object x, Object y, Object z) {\n        return x instanceof FunctionToDoubleFunction && y instanceof FunctionToDoubleFunction && z instanceof FunctionToDoubleFunction;\n    }\n\n    public boolean anyFunctionToBooleanSupplierFunction(Object x, Object y, Object z) {\n        return x instanceof FunctionToBooleanSupplierFunction && y instanceof FunctionToBooleanSupplierFunction && z instanceof FunctionToBooleanSupplierFunction;\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        return x instanceof Integer && y instanceof Integer && z instanceof Integer;\n    }\n\n    public boolean anyString(Object x, Object y, Object z) {\n        return x instanceof String && y instanceof String && z instanceof String;\n    }\n\n    public boolean anyBoolean(Object x, Object y, Object z) {\n        return x instanceof Boolean && y instanceof Boolean && z instanceof Boolean;\n    }\n\n    public boolean anyDouble(Object x, Object y, Object z) {\n        return x instanceof Double && y instanceof Double && z instanceof Double;\n    }\n\n    public boolean anyLong(Object x, Object y, Object z) {\n        return x instanceof Long && y instanceof Long && z instanceof Long;\n    }\n\n    public boolean anyFloat(Object x, Object y, Object z) {\n        return x instanceof Float && y instanceof Float && z instanceof Float;\n    }\n\n    public boolean anyChar(Object x, Object y, Object z) {\n        return x instanceof Character && y instanceof Character && z instanceof Character;\n    }\n\n    public boolean anyObject(Object x, Object y, Object z) {\n        return x instanceof Object && y instanceof Object && z instanceof Object;\n    }\n\n    public boolean anyCollection(Object x, Object y, Object z) {\n        return x instanceof Collection && y instanceof Collection && z instanceof Collection;\n    }\n\n    public boolean anyMap(Object x, Object y, Object z) {\n        return x instanceof Map && y instanceof Map && z instanceof Map;\n    }\n\n    public boolean anyIterable(Object x, Object y, Object z) {\n        return x instanceof Iterable && y instanceof Iterable && z instanceof Iterable;\n    }\n\n    public boolean anyIterator(Object x, Object y, Object z) {\n        return x instanceof Iterator && y instanceof Iterator && z instanceof Iterator;\n    }\n\n    public boolean anyEnumeration(Object x, Object y, Object z) {\n        return x instanceof Enumeration && y instanceof Enumeration && z instanceof Enumeration;\n    }\n\n    public boolean anyFunction(Object x, Object y, Object z) {\n        return x instanceof Function && y instanceof Function && z instanceof Function;\n    }\n\n    public boolean anyPredicate(Object x, Object y, Object z) {\n        return x instanceof Predicate && y instanceof Predicate && z instanceof Predicate;\n    }\n\n    public boolean anyConsumer(Object x, Object y, Object z) {\n        return x instanceof Consumer && y instanceof Consumer && z instanceof Consumer;\n    }\n\n    public boolean anySupplier(Object x, Object y, Object z) {\n        return x instanceof Supplier && y instanceof Supplier && z instanceof Supplier;\n    }\n\n    public boolean anyBiConsumer(Object x, Object y, Object z) {\n        return x instanceof BiConsumer && y instanceof BiConsumer && z instanceof BiConsumer;\n    }\n\n    public boolean anyBiFunction(Object x, Object y, Object z) {\n        return x instanceof BiFunction && y instanceof BiFunction && z instanceof BiFunction;\n    }\n\n    public boolean anyBiPredicate(Object x, Object y, Object z) {\n        return x instanceof BiPredicate && y instanceof BiPredicate && z instanceof BiPredicate;\n    }\n\n    public boolean anyConsumer(Object x, Object y, Object z) {\n        return x instanceof Consumer && y instanceof Consumer && z instanceof Consumer;\n    }\n\n    public boolean anyFunction(Object x, Object y, Object z) {\n        return x instanceof Function && y instanceof Function && z instanceof Function;\n    }\n\n    public boolean anyPredicate(Object x, Object y, Object z) {\n        return x instanceof Predicate && y instanceof Predicate && z instanceof Predicate;\n    }\n\n    public boolean anySupplier(Object x, Object y, Object z) {\n        return x instanceof Supplier && y instanceof Supplier && z instanceof Supplier;\n    }\n\n    public boolean anyFunction(Object x, Object y, Object z) {\n        return x instanceof Function && y instanceof Function && z instanceof Function;\n    }\n\n    public boolean anyPredicate(Object x, Object y, Object z) {\n        return x instanceof Predicate && y instanceof Predicate && z instanceof Predicate;\n    }\n\n    public boolean anyBiConsumer(Object x, Object y, Object z) {\n        return x instanceof BiConsumer && y instanceof BiConsumer && z instanceof BiConsumer;\n    }\n\n    public boolean anyBiFunction(Object x, Object y, Object z) {\n        return x instanceof BiFunction && y instanceof BiFunction && z instanceof BiFunction;\n    }\n\n    public boolean anyBiPredicate(Object x, Object y, Object z) {\n        return x instanceof BiPredicate && y instanceof BiPredicate && z instanceof BiPredicate;\n    }\n\n    public boolean anyFunction(Object x, Object y, Object z) {\n        return x instanceof Function && y instanceof Function && z instanceof Function;\n    }\n\n    public boolean anyPredicate(Object x, Object y, Object z) {\n        return x instanceof Predicate && y instanceof Predicate && z instanceof Predicate;\n    }\n\n    public boolean anyBiConsumer(Object x, Object y, Object z) {\n        return x instanceof BiConsumer && y instanceof BiConsumer && z instanceof BiConsumer;\n    }\n\n    public boolean anyBiFunction(Object x, Object y, Object z) {\n        return x instanceof BiFunction && y instanceof BiFunction && z instanceof BiFunction;\n    }\n\n    public boolean anyBiPredicate(Object x, Object y, Object z) {\n        return x instanceof BiPredicate && y instanceof BiPredicate && z instanceof BiPredicate;\n    }\n\n    public boolean anyFunction(Object x, Object y, Object z) {\n        return x instanceof Function && y instanceof Function && z instanceof Function;\n    }\n\n    public boolean anyPredicate(Object x, Object y, Object z) {\n        return x instanceof Predicate && y instanceof Predicate && z instanceof Predicate;\n    }\n\n    public boolean anyBiConsumer(Object x, Object y, Object z) {\n        return x instanceof BiConsumer && y instanceof BiConsumer && z instanceof BiConsumer;\n    }\n\n    public boolean anyBiFunction(Object x, Object y, Object z) {\n        return x instanceof BiFunction && y instanceof BiFunction && z instanceof BiFunction;\n    }\n\n    public boolean anyBiPredicate(Object x, Object y, Object z) {\n        return x instanceof BiPredicate && y instanceof BiPredicate && z instanceof BiPredicate;\n    }\n\n    public boolean anyFunction(Object x, Object y, Object z) {\n        return x instanceof Function && y instanceof Function && z instanceof Function;\n    }\n\n    public boolean anyPredicate(Object x, Object y, Object z) {\n        return x instanceof Predicate && y instanceof Predicate && z instanceof Predicate;\n    }\n\n    public boolean anyBiConsumer(Object x, Object y, Object z) {\n        return x instanceof BiConsumer && y instanceof BiConsumer && z instanceof BiConsumer;\n    }\n\n    public boolean anyBiFunction(Object x, Object y, Object z) {\n        return x instanceof BiFunction && y instanceof BiFunction && z instanceof BiFunction;\n    }\n\n    public boolean anyBiPredicate(Object x, Object y, Object z) {\n        return x instanceof BiPredicate && y instanceof BiPredicate && z instanceof BiPredicate;\n    }\n\n    public boolean anyFunction(Object x, Object y, Object z) {\n        return x instanceof Function && y instanceof Function && z instanceof Function;\n    }\n\n    public boolean anyPredicate(Object x, Object y, Object z) {\n        return x instanceof Predicate && y instanceof Predicate && z instanceof Predicate;\n    }\n\n    public boolean anyBiConsumer(Object x, Object y, Object z) {\n        return x instanceof BiConsumer && y instanceof BiConsumer && z instanceof BiConsumer;\n    }\n\n    public boolean anyBiFunction(Object x, Object y, Object z) {\n        return x instanceof BiFunction && y instanceof BiFunction && z instanceof BiFunction;\n    }\n\n    public boolean anyBiPredicate(Object x, Object y, Object z) {\n        return x instanceof BiPredicate && y instanceof BiPredicate && z instanceof BiPredicate;\n    }\n\n    public boolean anyFunction(Object x, Object y, Object z) {\n        return x instanceof Function && y instanceof Function && z instanceof Function;\n    }\n\n    public boolean anyPredicate(Object x, Object y, Object z) {\n        return x instanceof Predicate && y instanceof Predicate && z instanceof Predicate;\n    }\n\n    public boolean anyBiConsumer(Object x, Object y, Object z) {\n        return x instanceof BiConsumer && y instanceof BiConsumer && z instanceof BiConsumer;\n    }\n\n    public boolean anyBiFunction(Object x, Object y, Object z) {\n        return x instanceof BiFunction && y instanceof BiFunction && z instanceof BiFunction;\n    }\n\n    public boolean anyBiPredicate(Object x, Object y, Object z) {\n        return x instanceof BiPredicate && y instanceof BiPredicate && z instanceof BiPredicate;\n    }\n\n    public boolean anyFunction(Object x, Object y, Object z) {\n        return x instanceof Function && y instanceof Function && z instanceof Function;\n    }\n\n    public boolean anyPredicate(Object x, Object y, Object z) {\n        return x instanceof Predicate && y instanceof Predicate && z instanceof Predicate;\n    }\n\n    public boolean anyBiConsumer(Object x, Object y, Object z) {\n        return x instanceof BiConsumer && y instanceof BiConsumer && z instanceof BiConsumer;\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        return x != null && y != null && z != null;\n    }\n    public boolean hasPathSum(TreeNode root, int sum) {\n        if (root == null) {\n            return false;\n        }\n        if (root.left == null && root.right == null && root.val == sum) {\n            return true;\n        }\n        return hasPathSum(root.left, sum - root.val) || hasPathSum(root.right, sum - root.val);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        char[] chars = message.toCharArray();\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] == ' ') {\n                sb.append(\"%20\");\n            } else {\n                sb.append(chars[i]);\n            }\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        String result = \"\";\n        for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n            if (c == ' ') {\n                result += \" \";\n            } else {\n                result += c;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        char[] messageArray = message.toCharArray();\n        char[] encodedArray = new char[messageArray.length];\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int A = 0;\n        int B = 0;\n        int C = 0;\n        int D = 0;\n        int E = 0;\n        int F = 0;\n        int G = 0;\n        int H = 0;\n        int I = 0;\n        int J = 0;\n        int K = 0;\n        int L = 0;\n        int M = 0;\n        int N = 0;\n        int O = 0;\n        int P = 0;\n        int Q = 0;\n        int R = 0;\n        int S = 0;\n        int T = 0;\n        int U = 0;\n        int V = 0;\n        int W = 0;\n        int X = 0;\n        int Y = 0;\n        int Z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i1 = 0;\n        int i2 = 0;\n        int i3 = 0;\n        int i4 = 0;\n        int i5 = 0;\n        int i6 = 0;\n        int i7 = 0;\n        int i8 = 0;\n        int i9 = 0;\n        int i10 = 0;\n        int i11 = 0;\n        int i12 = 0;\n        int i13 = 0;\n        int i14 = 0;\n        int i15 = 0;\n        int i16 = 0;\n        int i17 = 0;\n        int i18 = 0;\n        int i19 = 0;\n        int i20 = 0;\n        int i21 = 0;\n        int i22 = 0;\n        int i23 = 0;\n        int i24 = 0;\n        int i25 = 0;\n        int i26 = 0;\n        int i27 = 0;\n        int i28 = 0;\n        int i29 = 0;\n        int i30 = 0;\n        int i31 = 0;\n        int i32 = 0;\n        int i33 = 0;\n        int i34 = 0;\n        int i35 = 0;\n        int i36 = 0;\n        int i37 = 0;\n        int i38 = 0;\n        int i39 = 0;\n        int i40 = 0;\n        int i41 = 0;\n        int i42 = 0;\n        int i43 = 0;\n        int i44 = 0;\n        int i45 = 0;\n        int i46 = 0;\n        int i47 = 0;\n        int i48 = 0;\n        int i49 = 0;\n        int i50 = 0;\n        int i51 = 0;\n        int i52 = 0;\n        int i53 = 0;\n        int i54 = 0;\n        int i55 = 0;\n        int i56 = 0;\n        int i57 = 0;\n        int i58 = 0;\n        int i59 = 0;\n        int i60 = 0;\n        int i61 = 0;\n        int i62 = 0;\n        int i63 = 0;\n        int i64 = 0;\n        int i65 = 0;\n        int i66 = 0;\n        int i67 = 0;\n        int i68 = 0;\n        int i69 = 0;\n        int i70 = 0;\n        int i71 = 0;\n        int i72 = 0;\n        int i73 = 0;\n        int i74 = 0;\n        int i75 = 0;\n        int i76 = 0;\n        int i77 = 0;\n        int i78 = 0;\n        int i79 = 0;\n        int i80 = 0;\n        int i81 = 0;\n        int i82 = 0;\n        int i83 = 0;\n        int i84 = 0;\n        int i85 = 0;\n        int i86 = 0;\n        int i87 = 0;\n        int i88 = 0;\n        int i89 = 0;\n        int i90 = 0;\n        int i91 = 0;\n        int i92 = 0;\n        int i93 = 0;\n        int i94 = 0;\n        int i95 = 0;\n        int i96 = 0;\n        int i97 = 0;\n        int i98 = 0;\n        int i99 = 0;\n        int i100 = 0;\n        int i101 = 0;\n        int i102 = 0;\n        int i103 = 0;\n        int i104 = 0;\n        int i105 = 0;\n        int i106 = 0;\n        int i107 = 0;\n        int i108 = 0;\n        int i109 = 0;\n        int i110 = 0;\n        int i111 = 0;\n        int i112 = 0;\n        int i113 = 0;\n        int i114 = 0;\n        int i115 = 0;\n        int i116 = 0;\n        int i117 = 0;\n        int i118 = 0;\n        int i119 = 0;\n        int i120 = 0;\n        int i121 = 0;\n        int i122 = 0;\n        int i123 = 0;\n        int i124 = 0;\n        int i125 = 0;\n        int i126 = 0;\n        int i127 = 0;\n        int i128 = 0;\n        int i129 = 0;\n        int i130 = 0;\n        int i131 = 0;\n        int i132 = 0;\n        int i133 = 0;\n        int i134 = 0;\n        int i135 = 0;\n        int i136 = 0;\n        int i137 = 0;\n        int i138 = 0;\n        int i139 = 0;\n        int i140 = 0;\n        int i141 = 0;\n        int i142 = 0;\n        int i143 = 0;\n        int i144 = 0;\n        int i145 = 0;\n        int i146 = 0;\n        int i147 = 0;\n        int i148 = 0;\n        int i149 = 0;\n        int i150 = 0;\n        int i151 = 0;\n        int i152 = 0;\n        int i153 = 0;\n        int i154 = 0;\n        int i155 = 0;\n        int i156 = 0;\n        int i157 = 0;\n        int i158 = 0;\n        int i159 = 0;\n        int i160 = 0;\n        int i161 = 0;\n        int i162 = 0;\n        int i163 = 0;\n        int i164 = 0;\n        int i165 = 0;\n        int i166 = 0;\n        int i167 = 0;\n        int i168 = 0;\n        int i169 = 0;\n        int i170 = 0;\n        int i171 = 0;\n        int i172 = 0;\n        int i1"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        char ch = c;\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n            if (c == ch) {\n                sb.append(c);\n            } else {\n                sb.append(c);\n                sb.append(ch);\n            }\n            ch = c;\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        String result = \"\";\n        for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n            if (c == ' ') {\n                result += \"0\";\n            } else {\n                result += \"1\";\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        char[] messageArray = message.toCharArray();\n        int[] messageArrayInt = new int[messageArray.length];\n        for(int i = 0; i < messageArray.length; i++) {\n            messageArrayInt[i] = messageArray[i] - 'a';\n        }\n        int[] messageArrayIntReverse = new int[messageArrayInt.length];\n        for(int i = 0; i < messageArrayInt.length; i++) {\n            messageArrayIntReverse[i] = messageArrayInt[messageArrayInt.length - 1 - i];\n        }\n        StringBuilder stringBuilder = new StringBuilder();\n        for(int i = 0; i < messageArrayIntReverse.length; i++) {\n            stringBuilder.append(messageArrayIntReverse[i]);\n        }\n        return stringBuilder.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        char[] messageArray = message.toCharArray();\n        int[] messageArrayInt = new int[messageArray.length];\n        for (int i = 0; i < messageArray.length; i++) {\n            messageArrayInt[i] = messageArray[i] - 'a';\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < messageArrayInt.length; i++) {\n            sb.append(messageArrayInt[i]);\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        String encoded = \"\";\n        for (int i = 0; i < message.length(); i++) {\n            encoded += (char) (message.charAt(i) + 1);\n        }\n        return encoded;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        char[] messageArray = message.toCharArray();\n        char[] encodedArray = new char[messageArray.length];\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int A = 0;\n        int B = 0;\n        int C = 0;\n        int D = 0;\n        int E = 0;\n        int F = 0;\n        int G = 0;\n        int H = 0;\n        int I = 0;\n        int J = 0;\n        int K = 0;\n        int L = 0;\n        int M = 0;\n        int N = 0;\n        int O = 0;\n        int P = 0;\n        int Q = 0;\n        int R = 0;\n        int S = 0;\n        int T = 0;\n        int U = 0;\n        int V = 0;\n        int W = 0;\n        int X = 0;\n        int Y = 0;\n        int Z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int A = 0;\n        int B = 0;\n        int C = 0;\n        int D = 0;\n        int E = 0;\n        int F = 0;\n        int G = 0;\n        int H = 0;\n        int I = 0;\n        int J = 0;\n        int K = 0;\n        int L = 0;\n        int M = 0;\n        int N = 0;\n        int O = 0;\n        int P = 0;\n        int Q = 0;\n        int R = 0;\n        int S = 0;\n        int T = 0;\n        int U = 0;\n        int V = 0;\n        int W = 0;\n        int X = 0;\n        int Y = 0;\n        int Z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int A = 0;\n        int B = 0;\n        int C = 0;\n        int D = 0;\n        int E = 0;\n        int F = 0;\n        int G = 0;\n        int H = 0;\n        int I = 0;\n        int J = 0;\n        int K = 0;\n        int L = 0;\n        int M = 0;\n        int N = 0;\n        int O = 0;\n        int P = 0;\n        int Q = 0;\n        int R = 0;\n        int S = 0;\n        int T = 0;\n        int U = 0;\n        int V = 0;\n        int W = 0;\n        int X = 0;\n        int Y = 0;\n        int Z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int A = 0;\n        int B = 0;\n        int C = 0;\n        int D = 0;\n        int E = 0;\n        int F = 0;\n        int G = 0;\n        int H = 0;\n        int I = 0;\n        int J = 0;\n        int K = 0;\n        int L = 0;\n        int M = 0;\n        int N = 0;\n        int O = 0;\n        int P = 0;\n        int Q = 0;\n        int R = 0;\n        int S = 0;\n        int T = 0;\n        int U = 0;\n        int V = 0;\n        int W = 0;\n        int X = 0;\n        int Y = 0;\n        int Z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int A = 0;\n        int B = 0;\n        int C = 0;\n        int D = 0;\n        int E = 0;\n        int F = 0;\n        int G = 0;\n        int H = 0;\n        int I = 0;\n        int J = 0;\n        int K = 0;\n        int L = 0;\n        int M = 0;\n        int N = 0;\n        int O = 0;\n        int P = 0;\n        int Q = 0;\n        int R = 0;\n        int S = 0;\n        int T = 0;\n        int U = 0;\n        int V = 0;\n        int W = 0;\n        int X = 0;\n        int Y = 0;\n        int Z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int A = 0;\n        int B = 0;\n        int C = 0;\n        int D = 0;\n        int E"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        String result = \"\";\n        for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n            if (c >= 'a' && c <= 'z') {\n                c = (char) (c - 'a' + 'A');\n            }\n            result += c;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        String encoded = \"\";\n        for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n            if (c >= 'a' && c <= 'z') {\n                encoded += (char) (c + 13);\n            } else if (c >= 'A' && c <= 'Z') {\n                encoded += (char) (c + 29);\n            } else {\n                encoded += c;\n            }\n        }\n        return encoded;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        char ch = 'a';\n        char[] arr = message.toCharArray();\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < arr.length; i++) {\n            if(arr[i] == ch) {\n                sb.append(ch);\n            }\n            else {\n                sb.append(arr[i]);\n            }\n            ch++;\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        String encodedMessage = \"\";\n        int count = 0;\n        for (int i = 0; i < message.length(); i++) {\n            if (message.charAt(i) == '0') {\n                count++;\n            } else {\n                encodedMessage += count;\n                encodedMessage += message.charAt(i);\n                count = 0;\n            }\n        }\n        if (count > 0) {\n            encodedMessage += count;\n        }\n        return encodedMessage;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        String result = \"\";\n        for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n            if (c == ' ') {\n                result += \" \";\n            } else {\n                result += c;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        char[] messageArray = message.toCharArray();\n        char[] encodedArray = new char[messageArray.length];\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i1 = 0;\n        int i2 = 0;\n        int i3 = 0;\n        int i4 = 0;\n        int i5 = 0;\n        int i6 = 0;\n        int i7 = 0;\n        int i8 = 0;\n        int i9 = 0;\n        int i10 = 0;\n        int i11 = 0;\n        int i12 = 0;\n        int i13 = 0;\n        int i14 = 0;\n        int i15 = 0;\n        int i16 = 0;\n        int i17 = 0;\n        int i18 = 0;\n        int i19 = 0;\n        int i20 = 0;\n        int i21 = 0;\n        int i22 = 0;\n        int i23 = 0;\n        int i24 = 0;\n        int i25 = 0;\n        int i26 = 0;\n        int i27 = 0;\n        int i28 = 0;\n        int i29 = 0;\n        int i30 = 0;\n        int i31 = 0;\n        int i32 = 0;\n        int i33 = 0;\n        int i34 = 0;\n        int i35 = 0;\n        int i36 = 0;\n        int i37 = 0;\n        int i38 = 0;\n        int i39 = 0;\n        int i40 = 0;\n        int i41 = 0;\n        int i42 = 0;\n        int i43 = 0;\n        int i44 = 0;\n        int i45 = 0;\n        int i46 = 0;\n        int i47 = 0;\n        int i48 = 0;\n        int i49 = 0;\n        int i50 = 0;\n        int i51 = 0;\n        int i52 = 0;\n        int i53 = 0;\n        int i54 = 0;\n        int i55 = 0;\n        int i56 = 0;\n        int i57 = 0;\n        int i58 = 0;\n        int i59 = 0;\n        int i60 = 0;\n        int i61 = 0;\n        int i62 = 0;\n        int i63 = 0;\n        int i64 = 0;\n        int i65 = 0;\n        int i66 = 0;\n        int i67 = 0;\n        int i68 = 0;\n        int i69 = 0;\n        int i70 = 0;\n        int i71 = 0;\n        int i72 = 0;\n        int i73 = 0;\n        int i74 = 0;\n        int i75 = 0;\n        int i76 = 0;\n        int i77 = 0;\n        int i78 = 0;\n        int i79 = 0;\n        int i80 = 0;\n        int i81 = 0;\n        int i82 = 0;\n        int i83 = 0;\n        int i84 = 0;\n        int i85 = 0;\n        int i86 = 0;\n        int i87 = 0;\n        int i88 = 0;\n        int i89 = 0;\n        int i90 = 0;\n        int i91 = 0;\n        int i92 = 0;\n        int i93 = 0;\n        int i94 = 0;\n        int i95 = 0;\n        int i96 = 0;\n        int i97 = 0;\n        int i98 = 0;\n        int i99 = 0;\n        int i100 = 0;\n        int i101 = 0;\n        int i102 = 0;\n        int i103 = 0;\n        int i104 = 0;\n        int i105 = 0;\n        int i106 = 0;\n        int i107 = 0;\n        int i108 = 0;\n        int i109 = 0;\n        int i110 = 0;\n        int i111 = 0;\n        int i112 = 0;\n        int i113 = 0;\n        int i114 = 0;\n        int i115 = 0;\n        int i116 = 0;\n        int i117 = 0;\n        int i118 = 0;\n        int i119 = 0;\n        int i120 = 0;\n        int i121 = 0;\n        int i122 = 0;\n        int i123 = 0;\n        int i124 = 0;\n        int i125 = 0;\n        int i126 = 0;\n        int i127 = 0;\n        int i128 = 0;\n        int i129 = 0;\n        int i130 = 0;\n        int i131 = 0;\n        int i132 = 0;\n        int i133 = 0;\n        int i134 = 0;\n        int i135 = 0;\n        int i136 = 0;\n        int i137 = 0;\n        int i138 = 0;\n        int i139 = 0;\n        int i140 = 0;\n        int i141 = 0;\n        int i142 = 0;\n        int i143 = 0;\n        int i144 = 0;\n        int i145 = 0;\n        int i146 = 0;\n        int i147 = 0;\n        int i148 = 0;\n        int i149 = 0;\n        int i150 = 0;\n        int i151 = 0;\n        int i152 = 0;\n        int i153 = 0;\n        int i154 = 0;\n        int i155 = 0;\n        int i156 = 0;\n        int i157 = 0;\n        int i158 = 0;\n        int i159 = 0;\n        int i160 = 0;\n        int i161 = 0;\n        int i162 = 0;\n        int i163 = 0;\n        int i164 = 0;\n        int i165 = 0;\n        int i166 = 0;\n        int i167 = 0;\n        int i168 = 0;\n        int i169 = 0;\n        int i170 = 0;\n        int i171 = 0;\n        int i172 = 0;\n        int i173 = 0;\n        int i174 = 0;\n        int i175 = 0;\n        int i176 = 0;\n        int i177 = 0;\n        int i178 = 0;\n        int i179 = 0;\n        int i180 = 0;\n        int i181 = 0;\n        int i182 = 0;\n        int i183 = 0;\n        int i184 = 0;\n        int i185 = 0;\n        int i186 = 0;\n        int i187 = 0;\n        int i188 = 0;\n        int i189 = 0;\n        int i190 = 0;\n        int i191"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        String[] words = message.split(\" \");\n        String encoded = \"\";\n        for(int i = 0; i < words.length; i++) {\n            encoded += words[i].charAt(0);\n        }\n        return encoded;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        char[] messageArray = message.toCharArray();\n        StringBuilder encodedMessage = new StringBuilder();\n        for (int i = 0; i < messageArray.length; i++) {\n            encodedMessage.append(encodeChar(messageArray[i]));\n        }\n        return encodedMessage.toString();\n    }\n\n    private char encodeChar(char c) {\n        if (c >= 'a' && c <= 'z') {\n            return (char) (c - 'a' + 'A');\n        }\n        return c;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        String result = \"\";\n        for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n            if (c == ' ') {\n                result += \" \";\n            } else {\n                result += (char) (c + 1);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        char[] messageArray = message.toCharArray();\n        int[] messageArrayInt = new int[messageArray.length];\n        for(int i = 0; i < messageArray.length; i++) {\n            messageArrayInt[i] = messageArray[i] - 'a';\n        }\n        StringBuilder stringBuilder = new StringBuilder();\n        for(int i = 0; i < messageArrayInt.length; i++) {\n            stringBuilder.append(messageArrayInt[i]);\n        }\n        return stringBuilder.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        char[] ch = message.toCharArray();\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < ch.length; i++) {\n            if(ch[i] == c) {\n                sb.append(c);\n            } else {\n                sb.append(ch[i]);\n            }\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int n = lst.size();\n        int[] dp = new int[n];\n        for (int i = 0; i < n; i++) {\n            int num = lst.get(i);\n            for (int j = 0; j < 10; j++) {\n                int k = num * j;\n                if (k >= 10) {\n                    continue;\n                }\n                dp[i] = Math.max(dp[i], dp[i + 1] + 1);\n            }\n        }\n        return dp[0];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        if (lst == null || lst.size() == 0) {\n            return 0;\n        }\n        if (lst.size() == 1) {\n            return 1;\n        }\n        int[] arr = new int[lst.size()];\n        for (int i = 0; i < lst.size(); i++) {\n            arr[i] = lst.get(i);\n        }\n        Arrays.sort(arr);\n        int left = 0;\n        int right = lst.size() - 1;\n        while (left < right) {\n            if (arr[left] == arr[right]) {\n                left++;\n                right--;\n            } else {\n                return 0;\n            }\n        }\n        return 1;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int n = lst.size();\n        int[] dp = new int[n];\n        Arrays.fill(dp, 1);\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (lst.get(i) == lst.get(j)) {\n                    dp[i] += dp[j];\n                }\n            }\n        }\n        return dp[n - 1];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int n = lst.size();\n        int[] dp = new int[n];\n        Arrays.fill(dp, -1);\n        dp[0] = 0;\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (lst.get(i) > lst.get(j)) {\n                    dp[i] = Math.max(dp[i], dp[j] + 1);\n                }\n            }\n        }\n        return dp[n - 1];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int n = lst.size();\n        int[] arr = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr[i] = lst.get(i);\n        }\n        Arrays.sort(arr);\n        int ans = 0;\n        for(int i = 0; i < n; i++) {\n            if(arr[i] == arr[i+1]) {\n                ans++;\n            }\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int n = lst.size();\n        int[] arr = new int[n];\n        for(int i = 0; i < n; i++)\n            arr[i] = lst.get(i);\n        Arrays.sort(arr);\n        int ans = 0;\n        for(int i = 0; i < n; i++)\n            ans += arr[i];\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        for (int i = 2; i < lst.size(); i++) {\n            if (lst.get(i) % lst.get(0) == 0) {\n                max = Math.max(max, lst.get(i));\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int n = lst.size();\n        int[] dp = new int[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = lst.get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (dp[j] < dp[i] + lst.get(j)) {\n                    dp[i] = dp[j];\n                }\n            }\n        }\n        return dp[n - 1];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return 0;\n        }\n        int len = lst.size();\n        int[] pre = new int[len];\n        int[] in = new int[len];\n        for (int i = 0; i < len; i++) {\n            pre[i] = lst.get(i);\n            in[i] = i;\n        }\n        Arrays.sort(pre);\n        Arrays.sort(in);\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int[] pre_in = new int[len];\n        int[] in_pre = new int[len];\n        for (int l = 0; l < len; l++) {\n            if (pre[l] == in[l]) {\n                pre_in[k] = pre[l];\n                in_pre[k] = in[l];\n                k++;\n            }\n        }\n        int[] pre_in_copy = new int[k];\n        for (int l = 0; l < k; l++) {\n            pre_in_copy[l] = pre_in[l];\n        }\n        int[] in_pre_copy = new int[k];\n        for (int l = 0; l < k; l++) {\n            in_pre_copy[l] = in_pre[l];\n        }\n        return buildTree(pre_in_copy, in_pre_copy);\n    }\n\n    public TreeNode buildTree(int[] pre, int[] in) {\n        if (pre.length == 0 || in.length == 0) {\n            return null;\n        }\n        TreeNode root = new TreeNode(pre[0]);\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int[] pre_in = new int[pre.length];\n        int[] in_pre = new int[pre.length];\n        for (int l = 0; l < pre.length; l++) {\n            if (pre[l] == in[l]) {\n                pre_in[k] = pre[l];\n                in_pre[k] = in[l];\n                k++;\n            }\n        }\n        int[] pre_in_copy = new int[k];\n        for (int l = 0; l < k; l++) {\n            pre_in_copy[l] = pre_in[l];\n        }\n        int[] in_pre_copy = new int[k];\n        for (int l = 0; l < k; l++) {\n            in_pre_copy[l] = in_pre[l];\n        }\n        root.left = buildTree(pre_in_copy, in_pre_copy);\n        root.right = buildTree(pre, in);\n        return root;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int len = lst.size();\n        int[] arr = new int[len];\n        for (int i = 0; i < len; i++) {\n            arr[i] = lst.get(i);\n        }\n        Arrays.sort(arr);\n        int res = 0;\n        for (int i = 0; i < len; i++) {\n            if (arr[i] == lst.get(i)) {\n                res++;\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int n = lst.size();\n        int[] arr = new int[n];\n        for(int i = 0; i < n; i++)\n            arr[i] = lst.get(i);\n        Arrays.sort(arr);\n        int ans = 0;\n        for(int i = 0; i < n; i++)\n            ans += arr[i];\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int n = lst.size();\n        int[] arr = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr[i] = lst.get(i);\n        }\n        Arrays.sort(arr);\n        int ans = 0;\n        for(int i = 0; i < n; i++) {\n            if(arr[i] == arr[i+1]) {\n                ans++;\n            }\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int n = lst.size();\n        int[] arr = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr[i] = lst.get(i);\n        }\n        Arrays.sort(arr);\n        int ans = 0;\n        for(int i = 0; i < n; i++) {\n            if(arr[i] == arr[i+1]) {\n                ans++;\n            }\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int maxx = 0;\n        for (int i : lst) {\n            if (i > maxx) {\n                if (i % j == 0) {\n                    isPrime = false;\n                    break;\n                }\n                if (isPrime) {\n                    maxx = i;\n                }\n            }\n        }\n        int sum = 0;\n        for (char c : s) {\n            sum += c;\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int n = lst.size();\n        int[] arr = new int[n];\n        for(int i = 0; i < n; i++)\n            arr[i] = lst.get(i);\n        Arrays.sort(arr);\n        int ans = 0;\n        for(int i = 0; i < n; i++)\n            ans += arr[i];\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int n = lst.size();\n        int[] arr = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr[i] = lst.get(i);\n        }\n        Arrays.sort(arr);\n        int ans = 0;\n        for(int i = 0; i < n; i++) {\n            ans += arr[i];\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int n = lst.size();\n        int[] arr = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr[i] = lst.get(i);\n        }\n        Arrays.sort(arr);\n        int ans = 0;\n        for(int i = 0; i < n; i++) {\n            if(arr[i] == arr[i+1]) {\n                ans++;\n            }\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int n = lst.size();\n        int[] dp = new int[n];\n        dp[0] = lst.get(0);\n        for (int i = 1; i < n; i++) {\n            dp[i] = Math.max(dp[i - 1], lst.get(i));\n        }\n        return dp[n - 1];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        if (lst.size() < 3) {\n            return 0;\n        }\n\n        int min = lst.get(0);\n        int max = lst.get(0);\n        int sum = lst.get(0);\n\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n            sum += lst.get(i);\n        }\n\n        return sum - target;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict == null || dict.isEmpty()) {\n            return false;\n        }\n        for (Map.Entry<Object, Object> entry : dict.entrySet()) {\n            String key = (String) entry.getKey();\n            String value = (String) entry.getValue();\n            if (key.length() != 1 || !Character.isUpperCase(key.charAt(0))) {\n                return false;\n            }\n            if (value.length() != 1 || !Character.isUpperCase(value.charAt(0))) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict == null)\n            return false;\n        Iterator<Object> it = dict.keySet().iterator();\n        while (it.hasNext()) {\n            Object key = it.next();\n            Object value = dict.get(key);\n            if (key.equals(value))\n                continue;\n            if (key.toString().equalsIgnoreCase(value.toString()))\n                return false;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict == null)\n            return false;\n        for (Map.Entry<Object, Object> entry : dict.entrySet()) {\n            if (entry.getKey() == null || entry.getValue() == null)\n                return false;\n            if (!(entry.getKey() instanceof String) || !(entry.getValue() instanceof String))\n                return false;\n            if (!((String) entry.getKey()).equals((String) entry.getValue()))\n                return false;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        return dict.containsKey(dict.keySet().iterator().next());\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        for (Object key : dict.keySet()) {\n            if (key.toString().toLowerCase().equals(key.toString())) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict == null) {\n            return false;\n        }\n        for (Object key : dict.keySet()) {\n            if (key.toString().toLowerCase().equals(key.toString())) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        boolean result = true;\n        for (Object key : dict.keySet()) {\n            if (key.toString().toLowerCase().equals(key.toString())) {\n                result = false;\n                break;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.size() == 0) {\n            return true;\n        }\n        for (Object key : dict.keySet()) {\n            if (!key.toString().toLowerCase().equals(key.toString())) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        boolean is_upper = false;\n        for (Map.Entry<Object, Object> entry : dict.entrySet()) {\n            String key = (String) entry.getKey();\n            String value = (String) entry.getValue();\n            if (key.equals(\"upper\")) {\n                is_upper = true;\n            }\n        }\n        return is_upper;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict == null) {\n            return false;\n        }\n        Iterator<Object> it = dict.keySet().iterator();\n        while (it.hasNext()) {\n            Object key = it.next();\n            Object value = dict.get(key);\n            if (key.equals(value)) {\n                continue;\n            }\n            if (key.equals(value.toString())) {\n                continue;\n            }\n            if (key.equals(value.toString().toLowerCase())) {\n                continue;\n            }\n            if (key.equals(value.toString().toUpperCase())) {\n                continue;\n            }\n            return false;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict == null) {\n            return false;\n        }\n        Iterator<Object> it = dict.keySet().iterator();\n        while (it.hasNext()) {\n            Object key = it.next();\n            if (key.toString().toLowerCase().equals(key.toString())) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        Set<Object> keys = dict.keySet();\n        for (Object key : keys) {\n            if (key.toString().toLowerCase().equals(key.toString())) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict == null) {\n            return false;\n        }\n        for (Map.Entry<Object, Object> entry : dict.entrySet()) {\n            if (entry.getKey() instanceof String && entry.getValue() instanceof String) {\n                String key = (String) entry.getKey();\n                String value = (String) entry.getValue();\n                if (!key.equals(value)) {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        for (Object key : dict.keySet()) {\n            if (key.toString().toLowerCase().equals(key.toString())) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        for (Object key : dict.keySet()) {\n            if (!key.toString().toLowerCase().equals(key.toString())) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        for (Map.Entry<Object, Object> entry : dict.entrySet()) {\n            if (entry.getKey() instanceof String && entry.getValue() instanceof String) {\n                String key = (String) entry.getKey();\n                String value = (String) entry.getValue();\n                if (key.length() != value.length()) {\n                    return false;\n                }\n                for (int i = 0; i < key.length(); i++) {\n                    char c1 = key.charAt(i);\n                    char c2 = value.charAt(i);\n                    if (c1 != c2) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        boolean flag = true;\n        for (Object key : dict.keySet()) {\n            char c = (char) key;\n            if (c >= 'A' && c <= 'Z') {\n                continue;\n            }\n            if (c >= 'a' && c <= 'z') {\n                continue;\n            }\n            flag = false;\n            break;\n        }\n        return flag;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict == null) {\n            return false;\n        }\n        for (Object key : dict.keySet()) {\n            if (key == null) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict == null) {\n            return false;\n        }\n        for (Object key : dict.keySet()) {\n            if (key.toString().toLowerCase().equals(key.toString())) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict == null) {\n            return false;\n        }\n        for (Object key : dict.keySet()) {\n            if (key.toString().toLowerCase().equals(key.toString())) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            result.add(i);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<>();\n        ListNode node = head;\n        while (node != null) {\n            if (node.val == n) {\n                result.add(node.val);\n            }\n            node = node.next;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        \n        \n            \n            \n                if (i % j == 0) {\n                    is_prime = false;\n\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n\n    public boolean isPrime(int n) {\n        if (n == 1 || n == 0) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            result.add(i);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> primes = new ArrayList<>();\n        primes.add(2);\n        for (int i = 3; i < n; i += 2) {\n            if (isPrime(i)) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n\n    public boolean isPrime(int n) {\n        if (n == 1) {\n            return false;\n        }\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            result.add(i);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            result.add(i);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            result.add(0);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (s.charAt(j) == s.charAt(i)) {\n                    result.set(i, result.get(i) + 1);\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.countUpTo(10));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            result.add(i);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Integer> result = s.countUpTo(10);\n        for (int i : result) {\n            System.out.println(i);\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            result.add(i);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            result.add(i);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            res.add(i);\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> primeNumbers = new ArrayList<Integer>();\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                primeNumbers.add(i);\n            }\n        }\n        return primeNumbers;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<>();\n        int[] count = new int[n + 1];\n        for (int i = 0; i < n; i++) {\n            count[i + 1] = count[i] + 1;\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (count[j] > count[i]) {\n                    count[j] = count[i];\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            result.add(count[i]);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                result.add(i);\n            }\n        }\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i) && isDivisibleBy(i, n)) {\n                result.add(i);\n            }\n        }\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i) && isDivisibleBy(i, n) && isDivisibleBy(i, n)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private boolean isDivisibleBy(int n, int m) {\n        return n % m == 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> list = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            list.add(i);\n        }\n        return list;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            result.add(i);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            result.add(i);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int result = 0;\n        while (b != 0) {\n            if ((b & 1) == 1) {\n                result += a;\n            }\n            a *= 10;\n            b >>= 1;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int ans = 0;\n        while (b != 0) {\n            if ((b & 1) == 1) {\n                ans += a;\n            }\n            a *= 10;\n            b >>= 1;\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        if (a == 0) return 0;\n        if (b == 0) return 0;\n        if (a == 1) return b;\n        if (b == 1) return a;\n        if (a < 0) {\n            a = -a;\n            b = -b;\n        }\n        int res = 0;\n        while (a != 0) {\n            if ((a & 1) == 1) {\n                res = res + b;\n            }\n            a = a >> 1;\n            b = b << 1;\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int result = 0;\n        while (b > 0) {\n            if ((b & 1) == 1) {\n                result = result * a;\n            }\n            a = a * a;\n            b = b >> 1;\n        }\n        return result;\n    }\n\n    public ListNode reverseList(ListNode head) {\n        ListNode prev = null;\n        ListNode curr = head;\n        ListNode next = null;\n        while (curr != null) {\n            next = curr.next;\n            curr.next = prev;\n            prev = curr;\n            curr = next;\n        }\n        return prev;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int result = 0;\n        int carry = 0;\n        while (a != 0) {\n            int temp = a % b;\n            a = a / b;\n            result += temp + carry;\n            carry = temp / b;\n        }\n        if (carry != 0) {\n            result += carry;\n        }\n        return result;\n    }\n\n    public ListNode reorderList(ListNode head) {\n        if (head == null || head.next == null) {\n            return head;\n        }\n        ListNode slow = head;\n        ListNode fast = head;\n        while (fast != null && fast.next != null) {\n            slow = slow.next;\n            fast = fast.next.next;\n        }\n        ListNode temp = slow.next;\n        slow.next = null;\n        ListNode result = reorderList(head);\n        slow.next = temp;\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int result = 0;\n        for (int i = 0; i < a; i++) {\n            for (int j = 0; j < b; j++) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int result = 0;\n        while (b != 0) {\n            if (b % 2 == 1) {\n                result = result + a;\n            }\n            a = a * 10;\n            b = b / 2;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int result = 0;\n        while (b > 0) {\n            if (b % 2 == 1) {\n                result += a;\n            }\n            a *= 10;\n            b /= 2;\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int a = sc.nextInt();\n        int b = sc.nextInt();\n        System.out.println(multiply(a, b));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        if (a == 0 || b == 0) {\n            return 0;\n        }\n        int result = 0;\n        while (b != 0) {\n            if (b % 2 == 1) {\n                result = result * a;\n            }\n            a = a * a;\n            b = b / 2;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int result = 0;\n        while (b > 0) {\n            if ((b & 1) == 1) {\n                result = result * a;\n            }\n            a = a * a;\n            b >>= 1;\n        }\n        return result;\n    }\n\n    public String reverseWords(String s) {\n        String[] words = s.split(\" \");\n        StringBuilder sb = new StringBuilder();\n        for (int i = words.length - 1; i >= 0; i--) {\n            sb.append(words[i]).append(\" \");\n        }\n        return sb.toString().trim();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int ans = 0;\n        while (b != 0) {\n            if (b % 2 == 1) {\n                ans += a;\n            }\n            a *= 10;\n            b /= 2;\n        }\n        return ans;\n    }\n\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\n        List<List<Integer>> res = new ArrayList<>();\n        if (root == null) {\n            return res;\n        }\n        Queue<TreeNode> q = new LinkedList<>();\n        q.offer(root);\n        while (!q.isEmpty()) {\n            int size = q.size();\n            List<Integer> level = new ArrayList<>();\n            for (int i = 0; i < size; i++) {\n                TreeNode node = q.poll();\n                level.add(node.val);\n                if (node.left != null) {\n                    q.offer(node.left);\n                }\n                if (node.right != null) {\n                    q.offer(node.right);\n                }\n            }\n            res.add(level);\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int result = 0;\n        while (b != 0) {\n            if (b % 2 == 1) {\n                result += a;\n            }\n            a *= 10;\n            b /= 2;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int result = 0;\n        while (b != 0) {\n            if ((b & 1) == 1) {\n                result = result + a;\n            }\n            a = a * 10;\n            b = b >> 1;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int max = a;\n        int min = b;\n        if (a > b) {\n            max = b;\n            min = a;\n        }\n        int product = 1;\n        while (max >= min) {\n            product *= max;\n            max--;\n        }\n        return product;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int c = 0;\n        while (b != 0) {\n            if (b % 2 == 1) {\n                c = c + a;\n            }\n            a = a * 10;\n            b = b / 2;\n        }\n        return c;\n    }\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = sc.nextInt();\n        }\n        int max = arr[0];\n        for (int i = 0; i < n; i++) {\n            if (arr[i] > max) {\n                max = arr[i];\n            }\n        }\n        System.out.println(max);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int result = 0;\n        while (b != 0) {\n            if ((b & 1) == 1) {\n                result = result * a;\n            }\n            a = a * a;\n            b >>= 1;\n        }\n        return result;\n    }\n\n    public int lengthOfLongestSubstring(String s) {\n        int max = 0;\n        int start = 0;\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == s.charAt(start)) {\n                count++;\n                while (s.charAt(i) == s.charAt(start)) {\n                    count++;\n                    i++;\n                }\n                if (count > max) {\n                    max = count;\n                    start = i - max + 1;\n                }\n            } else {\n                count = 1;\n                start = i + 1;\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int result = 0;\n        while (b != 0) {\n            if ((b & 1) == 1) {\n                result += a;\n            }\n            a *= 2;\n            b >>= 1;\n        }\n        return result;\n    }\n\n    public int canCompleteCircuit(int[] cost) {\n        int n = cost.length;\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += cost[i];\n        }\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            max = Math.max(max, multiply(sum, i));\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        if(a == 0) return 0;\n        if(b == 0) return 0;\n        if(a == 1) return b;\n        if(b == 1) return a;\n        int result = 0;\n        while(a != 0) {\n            if(a % 2 == 1) {\n                result = result * b;\n            }\n            a = a / 2;\n            b = b * 2;\n        }\n        return result;\n    }\n\n    public List<List<Integer>> levelOrder(TreeNode root) {\n        List<List<Integer>> result = new ArrayList<>();\n        if(root == null) return result;\n        Queue<TreeNode> queue = new LinkedList<>();\n        queue.add(root);\n        while(!queue.isEmpty()) {\n            int size = queue.size();\n            List<Integer> level = new ArrayList<>();\n            for(int i = 0; i < size; i++) {\n                TreeNode node = queue.poll();\n                level.add(node.val);\n                if(node.left != null) queue.add(node.left);\n                if(node.right != null) queue.add(node.right);\n            }\n            result.add(level);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int result = 0;\n        while(b != 0) {\n            if(b % 2 == 1) {\n                result += a;\n            }\n            a *= 10;\n            b /= 2;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        if (a == 0 || b == 0) {\n            return 0;\n        }\n        int res = 0;\n        while (a != 0) {\n            if ((a & 1) == 1) {\n                res = res + b;\n            }\n            a = a >> 1;\n            b = b << 1;\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.countUpper(\"Hello World\"));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        int i = 0;\n        int j = s.length() - 1;\n        while (i <= j) {\n            if (s.charAt(i) == '1') {\n                count++;\n                i++;\n            } else {\n                j--;\n            }\n        }\n        return count;\n    }\n\n    public TreeNode buildTree(int[] preorder, int[] inorder) {\n        return buildTree(preorder, inorder, 0, preorder.length - 1, inorder.length - 1);\n    }\n\n    public TreeNode buildTree(int[] preorder, int[] inorder, int preStart, int preEnd, int inStart) {\n        if (preStart > preEnd || inStart > inEnd) {\n            return null;\n        }\n        TreeNode root = new TreeNode(preorder[preStart]);\n        int inIndex = inStart;\n        int preIndex = preStart;\n        while (inIndex <= inEnd && preIndex <= preEnd) {\n            if (preorder[preIndex] == inorder[inIndex]) {\n                preIndex++;\n                inIndex++;\n            } else if (preorder[preIndex] < inorder[inIndex]) {\n                root.left = buildTree(preorder, inorder, preStart, preIndex - 1, inStart);\n                preIndex++;\n            } else {\n                root.right = buildTree(preorder, inorder, preIndex + 1, preEnd, inIndex + 1);\n                inIndex++;\n            }\n        }\n        return root;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String s = sc.nextLine();\n        Solution sln = new Solution();\n        int count = sln.countUpper(s);\n        System.out.println(count);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.countUpper(\"Hello\"));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        int max = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n                count++;\n                if (count > max) {\n                    max = count;\n                }\n            }\n        }\n        return max;\n    }\n\n    public int countLower(String s) {\n        int count = 0;\n        int max = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n                count++;\n                if (count > max) {\n                    max = count;\n                }\n            }\n        }\n        return max;\n    }\n\n    public int lengthOfLongestSubstring(String s) {\n        int countUpper = countUpper(s);\n        int countLower = countLower(s);\n        int max = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n                countUpper--;\n            }\n            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n                countLower--;\n            }\n            if (countUpper == 0 && countLower == 0) {\n                max = i - max + 1;\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.countUpper(\"Hello World\"));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        char[] arr = s.toCharArray();\n        Arrays.sort(arr);\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] == arr[i + 1]) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public int countLower(String s) {\n        int count = 0;\n        char[] arr = s.toCharArray();\n        Arrays.sort(arr);\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] == arr[i + 1]) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public int countDigit(String s) {\n        int count = 0;\n        char[] arr = s.toCharArray();\n        Arrays.sort(arr);\n        for (int i = 0; i < arr.length; i++) {\n            if (Character.isDigit(arr[i])) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public int countSpecial(String s) {\n        int count = 0;\n        char[] arr = s.toCharArray();\n        Arrays.sort(arr);\n        for (int i = 0; i < arr.length; i++) {\n            if (Character.isLetter(arr[i])) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public int countAll(String s) {\n        int count = 0;\n        char[] arr = s.toCharArray();\n        Arrays.sort(arr);\n        for (int i = 0; i < arr.length; i++) {\n            count++;\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.countUpper(\"abc\"));\n        System.out.println(s.countLower(\"abc\"));\n        System.out.println(s.countDigit(\"abc\"));\n        System.out.println(s.countSpecial(\"abc\"));\n        System.out.println(s.countAll(\"abc\"));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.countUpper(\"Hello World\"));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String s = sc.nextLine();\n        System.out.println(new Solution().countUpper(s));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.countUpper(\"Hello\"));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.countUpper(\"Hello World\"));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        String s = in.next();\n        Solution obj = new Solution();\n        System.out.println(obj.countUpper(s));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.countUpper(\"Hello World\"));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int res = 0;\n        for (int i = 0; i < value.length(); i++) {\n            if (Character.isUpperCase(value.charAt(i))) {\n                res++;\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int count = 0;\n        for (int i = 0; i < value.length(); i++) {\n            if (Character.isUpperCase(value.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.countUpper(\"Hello World\"));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int count = 0;\n        for (int i = 0; i < value.length(); i++) {\n            if (value.charAt(i) == 'I') {\n                count++;\n            } else if (value.charAt(i) == 'V') {\n                count += 5;\n            } else if (value.charAt(i) == 'X') {\n                count += 10;\n            } else if (value.charAt(i) == 'L') {\n                count += 50;\n            } else if (value.charAt(i) == 'C') {\n                count += 100;\n            } else if (value.charAt(i) == 'D') {\n                count += 500;\n            } else if (value.charAt(i) == 'M') {\n                count += 1000;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.countUpper(\"II\"));\n        System.out.println(solution.countUpper(\"XII\"));\n        System.out.println(solution.countUpper(\"XXVII\"));\n        System.out.println(solution.countUpper(\"XLIX\"));\n        System.out.println(solution.countUpper(\"XCVI\"));\n        System.out.println(solution.countUpper(\"XL\"));\n        System.out.println(solution.countUpper(\"XC\"));\n        System.out.println(solution.countUpper(\"CD\"));\n        System.out.println(solution.countUpper(\"DCMI\"));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int count = 0;\n        for (int i = 0; i < value.length(); i++) {\n            if (value.charAt(i) >= 'A' && value.charAt(i) <= 'Z') {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public TreeNode buildTree(int[] preorder, int[] inorder) {\n        if (preorder == null || preorder.length == 0) {\n            return null;\n        }\n        int rootVal = preorder[0];\n        TreeNode root = new TreeNode(rootVal);\n        int index = 0;\n        for (int i = 0; i < inorder.length; i++) {\n            if (inorder[i] == rootVal) {\n                index = i;\n                break;\n            }\n        }\n        root.left = buildTree(preorder, Arrays.copyOfRange(preorder, 1, index + 1));\n        root.right = buildTree(preorder, Arrays.copyOfRange(preorder, index + 1, preorder.length));\n        return root;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int count = 0;\n        for (int i = 0; i < value.length(); i++) {\n            if (Character.isUpperCase(value.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int count = 0;\n        for (int i = 0; i < value.length(); i++) {\n            if (Character.isUpperCase(value.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String value = scanner.nextLine();\n        System.out.println(countUpper(value));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int count = 0;\n        for (int i = 0; i < value.length(); i++) {\n            if (Character.isUpperCase(value.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        String value = in.next();\n        Solution solution = new Solution();\n        System.out.println(solution.countUpper(value));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int res = 0;\n        if (value.length() > 0) {\n            for (int i = 0; i < value.length(); i++) {\n                if (Character.isUpperCase(value.charAt(i))) {\n                    res++;\n                }\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int count = 0;\n        for (int i = 0; i < value.length(); i++) {\n            if (Character.isUpperCase(value.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        String s = in.nextLine();\n        System.out.println(new Solution().countUpper(s));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int count = 0;\n        for (int i = 0; i < value.length(); i++) {\n            if (value.charAt(i) == 'U') {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public int maxDepth(TreeNode root) {\n        if (root == null) {\n            return 0;\n        }\n        int left = maxDepth(root.left);\n        int right = maxDepth(root.right);\n        return Math.max(left, right) + 1;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int res = 0;\n        for (int i = 0; i < value.length(); i++) {\n            if (Character.isUpperCase(value.charAt(i))) {\n                res++;\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int count = 0;\n        for (int i = 0; i < value.length(); i++) {\n            if (Character.isUpperCase(value.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String value = sc.nextLine();\n        System.out.println(new Solution().countUpper(value));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int count = 0;\n        for (int i = 0; i < value.length(); i++) {\n            if (Character.isUpperCase(value.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.countUpper(\"Hello World\"));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int count = 0;\n        for (int i = 0; i < value.length(); i++) {\n            if (value.charAt(i) >= 'A' && value.charAt(i) <= 'Z') {\n                count++;\n            }\n        }\n        if (value.endsWith(\".\")) {\n            return (int) Math.ceil(count);\n        } else {\n            return count;\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int res = 0;\n        for (int i = 0; i < value.length(); i++) {\n            if (value.charAt(i) >= 'A' && value.charAt(i) <= 'Z') {\n                res++;\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int count = 0;\n        for (int i = 0; i < value.length(); i++) {\n            if (Character.isUpperCase(value.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String value = scanner.nextLine();\n        System.out.println(new Solution().countUpper(value));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int res = 0;\n        for (int i = 0; i < value.length(); i++) {\n            if (value.charAt(i) >= 'A' && value.charAt(i) <= 'Z') {\n                res++;\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int res = 0;\n        for (int i = 0; i < value.length(); i++) {\n            if (value.charAt(i) >= 'A' && value.charAt(i) <= 'Z') {\n                res++;\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int res = 0;\n        for (int i = 0; i < value.length(); i++) {\n            if (Character.isUpperCase(value.charAt(i))) {\n                res++;\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int count = 0;\n        for (int i = 0; i < value.length(); i++) {\n            if (Character.isUpperCase(value.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.countUpper(\"Hello\"));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            pile.add(2 * i + 1);\n        }\n        return pile;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            result.add(i);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        if (n == 0) {\n            return result;\n        }\n        Queue<TreeNode> queue = new LinkedList<TreeNode>();\n        queue.offer(new TreeNode(0));\n        while (!queue.isEmpty()) {\n            int size = queue.size();\n            for (int i = 0; i < size; i++) {\n                TreeNode node = queue.poll();\n                if (node.left != null) {\n                    queue.offer(node.left);\n                }\n                if (node.right != null) {\n                    queue.offer(node.right);\n                }\n                result.add(node.val);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> res = new ArrayList<>();\n        if (n <= 0) {\n            return res;\n        }\n        int[][] matrix = new int[n][n];\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int m = n - 1;\n        int n1 = 0;\n        int n2 = 0;\n        int n3 = 0;\n        int n4 = 0;\n        while (i <= m && j <= n && k <= n) {\n            matrix[i][j] = k;\n            k++;\n            i++;\n            j++;\n        }\n        while (i <= m && j <= n && k <= n) {\n            matrix[i][j] = k;\n            k++;\n            i++;\n            j++;\n        }\n        while (i <= m && j <= n && k <= n) {\n            matrix[i][j] = k;\n            k++;\n            i++;\n            j++;\n        }\n        while (i <= m && j <= n && k <= n) {\n            matrix[i][j] = k;\n            k++;\n            i++;\n            j++;\n        }\n        while (i <= m && j <= n && k <= n) {\n            matrix[i][j] = k;\n            k++;\n            i++;\n            j++;\n        }\n        while (i <= m && j <= n && k <= n) {\n            matrix[i][j] = k;\n            k++;\n            i++;\n            j++;\n        }\n        while (i <= m && j <= n && k <= n) {\n            matrix[i][j] = k;\n            k++;\n            i++;\n            j++;\n        }\n        while (i <= m && j <= n && k <= n) {\n            matrix[i][j] = k;\n            k++;\n            i++;\n            j++;\n        }\n        while (i <= m && j <= n && k <= n) {\n            matrix[i][j] = k;\n            k++;\n            i++;\n            j++;\n        }\n        while (i <= m && j <= n && k <= n) {\n            matrix[i][j] = k;\n            k++;\n            i++;\n            j++;\n        }\n        while (i <= m && j <= n && k <= n) {\n            matrix[i][j] = k;\n            k++;\n            i++;\n            j++;\n        }\n        while (i <= m && j <= n && k <= n) {\n            matrix[i][j] = k;\n            k++;\n            i++;\n            j++;\n        }\n        while (i <= m && j <= n && k <= n) {\n            matrix[i][j] = k;\n            k++;\n            i++;\n            j++;\n        }\n        while (i <= m && j <= n && k <= n) {\n            matrix[i][j] = k;\n            k++;\n            i++;\n            j++;\n        }\n        while (i <= m && j <= n && k <= n) {\n            matrix[i][j] = k;\n            k++;\n            i++;\n            j++;\n        }\n        while (i <= m && j <= n && k <= n) {\n            matrix[i][j] = k;\n            k++;\n            i++;\n            j++;\n        }\n        while (i <= m && j <= n && k <= n) {\n            matrix[i][j] = k;\n            k++;\n            i++;\n            j++;\n        }\n        while (i <= m && j <= n && k <= n) {\n            matrix[i][j] = k;\n            k++;\n            i++;\n            j++;\n        }\n        while (i <= m && j <= n && k <= n) {\n            matrix[i][j] = k;\n            k++;\n            i++;\n            j++;\n        }\n        while (i <= m && j <= n && k <= n) {\n            matrix[i][j] = k;\n            k++;\n            i++;\n            j++;\n        }\n        while (i <= m && j <= n && k <= n) {\n            matrix[i][j] = k;\n            k++;\n            i++;\n            j++;\n        }\n        while (i <= m && j <= n && k <= n) {\n            matrix[i][j] = k;\n            k++;\n            i++;\n            j++;\n        }\n        while (i <= m && j <= n && k <= n) {\n            matrix[i][j] = k;\n            k++;\n            i++;\n            j++;\n        }\n        while (i <= m && j <= n && k <= n) {\n            matrix[i][j] = k;\n            k++;\n            i++;\n            j++;\n        }\n        while (i <= m && j <= n && k <= n) {\n            matrix[i][j] = k;\n            k++;\n            i++;\n            j++;\n        }\n        while (i <= m && j <= n && k <= n) {\n            matrix[i][j] = k;\n            k++;\n            i++;\n            j++;\n        }\n        while (i <= m && j <= n && k <= n) {\n            matrix[i][j] = k;\n            k++;\n            i++;\n            j++;\n        }\n        while (i <= m && j <= n && k <= n) {\n            matrix[i][j] = k;\n            k++;\n            i++;\n            j++;\n        }\n        while (i <= m && j <= n && k <= n) {\n            matrix[i][j] = k;\n            k++;\n            i++;\n            j++;\n        }\n        while (i <= m && j <= n && k <= n) {\n            matrix[i][j] = k;\n            k++;\n            i++;\n            j++;\n        }\n        while (i <= m && j <= n && k <= n) {\n            matrix[i][j] = k;\n            k++;\n            i++;\n            j++;\n        }\n        while (i <= m && j <= n && k <= n) {\n            matrix[i][j] = k;\n            k++;\n            i++;\n            j++;\n        }\n        while (i <= m && j <= n && k <= n) {\n            matrix[i][j] = k;\n            k++;\n            i++;\n            j++;\n        }\n        while (i <= m && j <= n && k <= n) {\n            matrix[i][j] = k;\n            k++;\n            i++;\n            j++;\n        }\n        while (i <= m && j <= n && k <= n) {\n            matrix[i][j] = k;\n            k++;\n            i++;\n            j++;\n        }\n        while (i <= m && j <= n && k <= n) {\n            matrix[i][j] = k;\n            k++;\n            i++;\n            j++;\n        }\n        while (i <= m && j <= n && k <= n) {\n            matrix[i][j] = k;\n            k++;\n            i++;\n            j++;\n        }\n        while (i <= m && j <= n && k <= n) {\n            matrix[i][j] = k;\n            k++;\n            i++;\n            j++;\n        }\n        while (i <= m && j <= n && k <= n) {\n            matrix[i][j] = k;\n            k++;\n            i++;\n            j++;\n        }\n        while (i <= m && j <= n && k <= n) {\n            matrix[i][j] = k;\n            k++;\n            i++;\n            j++;\n        }\n        while (i <= m && j <= n && k <= n) {\n            matrix[i][j] = k;\n            k++;\n            i++;\n            j++;\n        }\n        while (i <= m && j <= n && k <= n) {\n            matrix[i][j] = k;\n            k++;\n            i++;\n            j++;\n        }\n        while (i <= m && j <= n && k <= n) {\n            matrix[i][j] = k;\n            k++;\n            i++;\n            j++;\n        }\n        while (i <= m && j <= n && k <= n) {\n            matrix[i][j] = k;\n            k++;\n            i++;\n            j++;\n        }\n        while (i <= m && j <= n && k <= n) {\n            matrix[i][j] = k;\n            k++;\n            i++;\n            j++;\n        }\n        while (i <= m && j <= n && k <= n) {\n            matrix[i][j] = k;\n            k++;\n            i++;\n            j++;\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        \n        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 0; i < n; i++) {\n            result.add(0);\n        }\n        \n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            pile.add(i);\n        }\n        return pile;\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Integer> pile = s.makeAPile(5);\n        for (int i : pile) {\n            System.out.print(i + \" \");\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        for(int i = 0; i < n; i++) {\n            pile.add(0);\n        }\n        return pile;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            pile.add(0);\n        }\n        return pile;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            result.add(n + 2 * i);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            pile.add(0);\n        }\n        return pile;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            pile.add(0);\n        }\n        return pile;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            pile.add(0);\n        }\n        return pile;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            pile.add(0);\n        }\n        return pile;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            result.add(0);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            result.add(i);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            pile.add(i);\n        }\n        return pile;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            pile.add(0);\n        }\n        return pile;\n    }\n\n    public int longestCommonSubsequence(String s1, String s2) {\n        int[][] dp = new int[s1.length() + 1][s2.length() + 1];\n        for (int i = 0; i < s1.length(); i++) {\n            for (int j = 0; j < s2.length(); j++) {\n                if (s1.charAt(i) == s2.charAt(j)) {\n                    dp[i + 1][j + 1] = dp[i][j] + 1;\n                } else {\n                    dp[i + 1][j + 1] = Math.max(dp[i][j], dp[i + 1][j]);\n                }\n            }\n        }\n        return dp[s1.length()][s2.length()];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            pile.add(i);\n        }\n        return pile;\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Integer> pile = s.makeAPile(5);\n        for (int i : pile) {\n            System.out.print(i + \" \");\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            pile.add(0);\n        }\n        return pile;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            pile.add(0);\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                for (int k = 0; k < n; k++) {\n                    if (i != j && i != k && j != k) {\n                        pile.set(i, pile.get(i) + pile.get(j) + pile.get(k));\n                    }\n                }\n            }\n        }\n        return pile;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        List<String> res = new ArrayList<>();\n        if (s == null || s.length() == 0) return res;\n        char[] arr = s.toCharArray();\n        int n = arr.length;\n        int[][] dp = new int[n][n];\n        for (int i = 0; i < n; i++) {\n            dp[i][i] = 1;\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (arr[i] == arr[j]) {\n                    dp[i][j] = dp[i - 1][j] + dp[i - 1][j + 1];\n                }\n            }\n        }\n        for (int i = n - 2; i >= 0; i--) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] == arr[j]) {\n                    dp[i][j] = dp[i + 1][j] + dp[i + 1][j + 1];\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (dp[i][j] == n) {\n                    res.add(String.valueOf(arr[i]));\n                }\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        List<String> res = new ArrayList<>();\n        if (s == null || s.length() == 0) {\n            return res;\n        }\n        char[] chars = s.toCharArray();\n        int len = chars.length;\n        int[] count = new int[26];\n        for (int i = 0; i < len; i++) {\n            count[chars[i] - 'a']++;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (count[i] > 0) {\n                res.add(String.valueOf((char) ('a' + i)));\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        List<String> result = new ArrayList<>();\n        if (s == null || s.length() == 0) {\n            return result;\n        }\n        char[] chars = s.toCharArray();\n        int n = chars.length;\n        int[] dp = new int[n];\n        Arrays.fill(dp, -1);\n        Arrays.fill(dp, 1);\n        for (int i = 0; i < n; i++) {\n            if (dp[i] == -1) {\n                result.add(String.valueOf(chars[i]));\n            }\n            for (int j = i + 1; j < n; j++) {\n                if (chars[i] == chars[j] && dp[j] == -1) {\n                    dp[j] = dp[i] + 1;\n                    result.add(String.valueOf(chars[i]) + \" \" + String.valueOf(chars[j]));\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        List<String> result = new ArrayList<>();\n        if (s == null || s.length() == 0) {\n            return result;\n        }\n        char[] chars = s.toCharArray();\n        int n = chars.length;\n        boolean[][] visited = new boolean[n][n];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == j) {\n                    continue;\n                }\n                if (chars[i] == chars[j]) {\n                    if (dfs(chars, i, j, visited)) {\n                        result.add(s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1, n));\n                    }\n                }\n            }\n        }\n        return result;\n    }\n\n    private boolean dfs(char[] chars, int i, int j, boolean[][] visited) {\n        if (i == j) {\n            return true;\n        }\n        if (visited[i][j]) {\n            return false;\n        }\n        visited[i][j] = true;\n        if (chars[i] == chars[j]) {\n            return dfs(chars, i + 1, j + 1, visited);\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        List<String> result = new ArrayList<>();\n        if(s.length() == 0) return result;\n        char[] arr = s.toCharArray();\n        int n = arr.length;\n        int[][] dp = new int[n][n];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < n; j++) {\n                if(i == j) dp[i][j] = 1;\n                else dp[i][j] = 0;\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < n; j++) {\n                if(arr[i] == arr[j]) {\n                    dp[i][j] = dp[i+1][j] + dp[i][j+1];\n                }\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < n; j++) {\n                if(dp[i][j] == n) result.add(s.substring(i, j+1));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        List<String> result = new ArrayList<>();\n        if (s == null || s.length() == 0) {\n            return result;\n        }\n        char[] chars = s.toCharArray();\n        int len = chars.length;\n        int[] count = new int[26];\n        for (int i = 0; i < len; i++) {\n            count[chars[i] - 'a']++;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (count[i] > 0) {\n                result.add(String.valueOf((char) ('a' + i)));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        List<String> result = new ArrayList<>();\n        if (s == null || s.length() == 0)\n            return result;\n        char[] arr = s.toCharArray();\n        int len = arr.length;\n        int[][] dp = new int[len][len];\n        for (int i = 0; i < len; i++) {\n            for (int j = 0; j < len; j++) {\n                if (i == j)\n                    dp[i][j] = 1;\n                else\n                    dp[i][j] = dp[i + 1][j] + dp[i][j + 1];\n            }\n        }\n        for (int i = 0; i < len; i++) {\n            if (dp[i][i] == len)\n                result.add(String.valueOf(arr[i]));\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        List<String> result = new ArrayList<>();\n        if (s.length() == 0) {\n            return result;\n        }\n        char[] arr = s.toCharArray();\n        int len = arr.length;\n        int[][] dp = new int[len][len];\n        for (int i = 0; i < len; i++) {\n            dp[i][i] = 1;\n        }\n        for (int i = 0; i < len; i++) {\n            for (int j = i + 1; j < len; j++) {\n                if (arr[i] == arr[j]) {\n                    dp[i][j] = dp[i + 1][j - 1] + 1;\n                }\n            }\n        }\n        for (int i = 0; i < len; i++) {\n            for (int j = i + 1; j < len; j++) {\n                if (arr[i] == arr[j]) {\n                    if (dp[i][j] == 1) {\n                        result.add(String.valueOf(arr[i]));\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        List<String> result = new ArrayList<>();\n        if (s == null || s.length() == 0) {\n            return result;\n        }\n        char[] chars = s.toCharArray();\n        int n = chars.length;\n        int[][] dp = new int[n][n];\n        for (int i = 0; i < n; i++) {\n            dp[i][i] = 1;\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (chars[i] == chars[j]) {\n                    dp[i][j] = dp[i - 1][j] + dp[i - 1][j + 1];\n                }\n            }\n        }\n        for (int i = n - 2; i >= 0; i--) {\n            for (int j = 0; j < i + 1; j++) {\n                if (chars[i] == chars[j]) {\n                    result.add(String.valueOf(chars[i]));\n                    result.add(String.valueOf(chars[j]));\n                    result.add(String.valueOf(chars[i] + chars[j]));\n                    result.add(String.valueOf(chars[i] + chars[j] + chars[i + 1]));\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        List<String> result = new ArrayList<>();\n        if (s == null || s.length() == 0) {\n            return result;\n        }\n        char[] chars = s.toCharArray();\n        char[] stack = new char[chars.length];\n        stack[0] = chars[0];\n        for (int i = 1; i < chars.length; i++) {\n            if (chars[i] == chars[i - 1]) {\n                stack[i] = chars[i];\n            } else {\n                if (stack.length > 0) {\n                    result.add(new String(stack));\n                    stack = new char[chars.length];\n                    stack[0] = chars[i];\n                }\n            }\n        }\n        if (stack.length > 0) {\n            result.add(new String(stack));\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        List<String> res = new ArrayList<>();\n        if(s.length() == 0) return res;\n        char[] arr = s.toCharArray();\n        int n = arr.length;\n        int[][] dp = new int[n][n];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < n; j++) {\n                if(i == j) dp[i][j] = 1;\n                else dp[i][j] = 0;\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < n; j++) {\n                if(arr[i] == arr[j]) {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < n; j++) {\n                if(dp[i][j] == 1) {\n                    res.add(String.valueOf(arr[i]));\n                    res.add(String.valueOf(arr[j]));\n                }\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        List<String> res = new ArrayList<>();\n        if (s == null || s.length() == 0) {\n            return res;\n        }\n        char[] arr = s.toCharArray();\n        int len = arr.length;\n        int[][] dp = new int[len][len];\n        for (int i = 0; i < len; i++) {\n            dp[i][i] = 1;\n        }\n        for (int i = 0; i < len; i++) {\n            for (int j = i + 1; j < len; j++) {\n                if (arr[i] == arr[j]) {\n                    dp[i][j] = dp[i + 1][j - 1] + 1;\n                }\n            }\n        }\n        for (int i = 0; i < len; i++) {\n            for (int j = i + 1; j < len; j++) {\n                if (arr[i] != arr[j]) {\n                    dp[i][j] = Math.max(dp[i][j], dp[i + 1][j] + dp[i][j - 1]);\n                }\n            }\n        }\n        for (int i = 0; i < len; i++) {\n            for (int j = i + 1; j < len; j++) {\n                if (arr[i] == arr[j]) {\n                    res.add(String.valueOf(arr[i]));\n                    res.add(String.valueOf(arr[j]));\n                }\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        List<String> result = new ArrayList<>();\n        if (s == null || s.length() == 0) return result;\n        char[] chars = s.toCharArray();\n        int n = chars.length;\n        char[][] dp = new char[n][n];\n        for (int i = 0; i < n; i++) {\n            dp[i][i] = '1';\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (chars[i] == chars[j]) {\n                    dp[i][j] = '0';\n                } else {\n                    dp[i][j] = '1';\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (dp[i][j] == '0') {\n                    result.add(String.valueOf(chars[i]));\n                    result.add(String.valueOf(chars[j]));\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        List<String> result = new ArrayList<>();\n        char[] chars = s.toCharArray();\n        int len = chars.length;\n        int[] count = new int[26];\n        for (int i = 0; i < len; i++) {\n            count[chars[i] - 'a']++;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (count[i] > 0) {\n                result.add(String.valueOf((char) ('a' + i)));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        List<String> res = new ArrayList<String>();\n        if (s == null || s.length() == 0) return res;\n        char[] arr = s.toCharArray();\n        Arrays.sort(arr);\n        for (int i = 0; i < arr.length; i++) {\n            if (i == 0 || arr[i] != arr[i - 1]) {\n                res.add(s.substring(0, i) + arr[i]);\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        List<String> res = new ArrayList<>();\n        if (s == null || s.length() == 0) return res;\n        char[] chars = s.toCharArray();\n        int len = chars.length;\n        int[] dp = new int[len];\n        Arrays.fill(dp, -1);\n        Arrays.fill(dp, 1);\n        for (int i = 0; i < len; i++) {\n            for (int j = 0; j < len; j++) {\n                if (i == j) continue;\n                if (chars[i] == chars[j]) {\n                    dp[i] = dp[i] + dp[j];\n                    if (dp[i] == 1) res.add(String.valueOf(chars[i]));\n                }\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        List<String> result = new ArrayList<>();\n        if (s == null || s.length() == 0) {\n            return result;\n        }\n        char[] chars = s.toCharArray();\n        int n = chars.length;\n        int[][] dp = new int[n][n];\n        for (int i = 0; i < n; i++) {\n            dp[i][i] = 1;\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (chars[i] == chars[j]) {\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1];\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (dp[i][j] == n - 1) {\n                    result.add(String.valueOf(chars[i]));\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        List<String> result = new ArrayList<>();\n        if (s.length() == 0) {\n            return result;\n        }\n        char[] chars = s.toCharArray();\n        int n = chars.length;\n        int[][] dp = new int[n][n];\n        for (int i = 0; i < n; i++) {\n            dp[i][i] = 1;\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (chars[i] == chars[j]) {\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1];\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (dp[i][j] == n - 1) {\n                    result.add(String.valueOf(chars[i]));\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        List<String> res = new ArrayList<>();\n        if (s == null || s.length() == 0) {\n            return res;\n        }\n        char[] arr = s.toCharArray();\n        char[] arr2 = new char[arr.length];\n        for (int i = 0; i < arr.length; i++) {\n            arr2[i] = arr[i];\n        }\n        backtrack(arr2, 0, res);\n        return res;\n    }\n\n    private void backtrack(char[] arr, int index, List<String> res) {\n        if (index == arr.length) {\n            res.add(new String(arr));\n            return;\n        }\n        for (int i = index; i < arr.length; i++) {\n            arr[index] = arr[i];\n            backtrack(arr, index + 1, res);\n            arr[index] = arr2[i];\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        List<String> res = new ArrayList<>();\n        if (s == null || s.length() == 0) {\n            return res;\n        }\n        char[] chs = s.toCharArray();\n        int n = chs.length;\n        int[][] dp = new int[n][n];\n        for (int i = 0; i < n; i++) {\n            dp[i][i] = 1;\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (chs[i] == chs[j]) {\n                    dp[i][j] = dp[i + 1][j - 1] + 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (dp[i][j] > 0) {\n                    res.add(String.valueOf(chs[i]) + String.valueOf(chs[j]));\n                }\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        int[] arr = new int[x];\n        for (int i = 0; i < x; i++) {\n            arr[i] = i + 1;\n        }\n        int[] arr2 = new int[y];\n        for (int i = 0; i < y; i++) {\n            arr2[i] = i + 1;\n        }\n        int[] arr3 = new int[x];\n        for (int i = 0; i < x; i++) {\n            arr3[i] = i + 1;\n        }\n        int[] arr4 = new int[y];\n        for (int i = 0; i < y; i++) {\n            arr4[i] = i + 1;\n        }\n        int[] arr5 = new int[x];\n        for (int i = 0; i < x; i++) {\n            arr5[i] = i + 1;\n        }\n        int[] arr6 = new int[y];\n        for (int i = 0; i < y; i++) {\n            arr6[i] = i + 1;\n        }\n        int[] arr7 = new int[x];\n        for (int i = 0; i < x; i++) {\n            arr7[i] = i + 1;\n        }\n        int[] arr8 = new int[y];\n        for (int i = 0; i < y; i++) {\n            arr8[i] = i + 1;\n        }\n        int[] arr9 = new int[x];\n        for (int i = 0; i < x; i++) {\n            arr9[i] = i + 1;\n        }\n        int[] arr10 = new int[y];\n        for (int i = 0; i < y; i++) {\n            arr10[i] = i + 1;\n        }\n        int[] arr11 = new int[x];\n        for (int i = 0; i < x; i++) {\n            arr11[i] = i + 1;\n        }\n        int[] arr12 = new int[y];\n        for (int i = 0; i < y; i++) {\n            arr12[i] = i + 1;\n        }\n        int[] arr13 = new int[x];\n        for (int i = 0; i < x; i++) {\n            arr13[i] = i + 1;\n        }\n        int[] arr14 = new int[y];\n        for (int i = 0; i < y; i++) {\n            arr14[i] = i + 1;\n        }\n        int[] arr15 = new int[x];\n        for (int i = 0; i < x; i++) {\n            arr15[i] = i + 1;\n        }\n        int[] arr16 = new int[y];\n        for (int i = 0; i < y; i++) {\n            arr16[i] = i + 1;\n        }\n        int[] arr17 = new int[x];\n        for (int i = 0; i < x; i++) {\n            arr17[i] = i + 1;\n        }\n        int[] arr18 = new int[y];\n        for (int i = 0; i < y; i++) {\n            arr18[i] = i + 1;\n        }\n        int[] arr19 = new int[x];\n        for (int i = 0; i < x; i++) {\n            arr19[i] = i + 1;\n        }\n        int[] arr20 = new int[y];\n        for (int i = 0; i < y; i++) {\n            arr20[i] = i + 1;\n        }\n        int[] arr21 = new int[x];\n        for (int i = 0; i < x; i++) {\n            arr21[i] = i + 1;\n        }\n        int[] arr22 = new int[y];\n        for (int i = 0; i < y; i++) {\n            arr22[i] = i + 1;\n        }\n        int[] arr23 = new int[x];\n        for (int i = 0; i < x; i++) {\n            arr23[i] = i + 1;\n        }\n        int[] arr24 = new int[y];\n        for (int i = 0; i < y; i++) {\n            arr24[i] = i + 1;\n        }\n        int[] arr25 = new int[x];\n        for (int i = 0; i < x; i++) {\n            arr25[i] = i + 1;\n        }\n        int[] arr26 = new int[y];\n        for (int i = 0; i < y; i++) {\n            arr26[i] = i + 1;\n        }\n        int[] arr27 = new int[x];\n        for (int i = 0; i < x; i++) {\n            arr27[i] = i + 1;\n        }\n        int[] arr28 = new int[y];\n        for (int i = 0; i < y; i++) {\n            arr28[i] = i + 1;\n        }\n        int[] arr29 = new int[x];\n        for (int i = 0; i < x; i++) {\n            arr29[i] = i + 1;\n        }\n        int[] arr30 = new int[y];\n        for (int i = 0; i < y; i++) {\n            arr30[i] = i + 1;\n        }\n        int[] arr31 = new int[x];\n        for (int i = 0; i < x; i++) {\n            arr31[i] = i + 1;\n        }\n        int[] arr32 = new int[y];\n        for (int i = 0; i < y; i++) {\n            arr32[i] = i + 1;\n        }\n        int[] arr33 = new int[x];\n        for (int i = 0; i < x; i++) {\n            arr33[i] = i + 1;\n        }\n        int[] arr34 = new int[y];\n        for (int i = 0; i < y; i++) {\n            arr34[i] = i + 1;\n        }\n        int[] arr35 = new int[x];\n        for (int i = 0; i < x; i++) {\n            arr35[i] = i + 1;\n        }\n        int[] arr36 = new int[y];\n        for (int i = 0; i < y; i++) {\n            arr36[i] = i + 1;\n        }\n        int[] arr37 = new int[x];\n        for (int i = 0; i < x; i++) {\n            arr37[i] = i + 1;\n        }\n        int[] arr38 = new int[y];\n        for (int i = 0; i < y; i++) {\n            arr38[i] = i + 1;\n        }\n        int[] arr39 = new int[x];\n        for (int i = 0; i < x; i++) {\n            arr39[i] = i + 1;\n        }\n        int[] arr40 = new int[y];\n        for (int i = 0; i < y; i++) {\n            arr40[i] = i + 1;\n        }\n        int[] arr41 = new int[x];\n        for (int i = 0; i < x; i++) {\n            arr41[i] = i + 1;\n        }\n        int[] arr42 = new int[y];\n        for (int i = 0; i < y; i++) {\n            arr42[i] = i + 1;\n        }\n        int[] arr43 = new int[x];\n        for (int i = 0; i < x; i++) {\n            arr43[i] = i + 1;\n        }\n        int[] arr44 = new int[y];\n        for (int i = 0; i < y; i++) {\n            arr44[i] = i + 1;\n        }\n        int[] arr45 = new int[x];\n        for (int i = 0; i < x; i++) {\n            arr45[i] = i + 1;\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        int count = 0;\n        for (int i = 0; i < x; i++) {\n            if (x % i == 0 && y % i == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        int ans = 0;\n        int n = x + y;\n        for (int i = 1; i <= n; i++) {\n            ans += i;\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        int result = 0;\n        for (int i = 0; i < x; i++) {\n            result += y;\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int x = scanner.nextInt();\n        int y = scanner.nextInt();\n        int result = new Solution().chooseNum(x, y);\n        System.out.println(result);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        if (x == 0) {\n            return y;\n        }\n        if (y == 0) {\n            return x;\n        }\n        int max = Math.max(x, y);\n        int min = Math.min(x, y);\n        int num = 0;\n        while (max >= min) {\n            num++;\n            max = max / 10;\n            min = min / 10;\n        }\n        return num;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        if (x == 0) {\n            return 1;\n        }\n        if (y == 0) {\n            return 1;\n        }\n        if (x == y) {\n            return x;\n        }\n        if (x < y) {\n            return chooseNum(x - 1, y);\n        }\n        return chooseNum(x, y - 1);\n    }\n\n    public int[] addTwoNumbers(ListNode l1, ListNode l2) {\n        ListNode dummy = new ListNode(0);\n        ListNode cur = dummy;\n        int carry = 0;\n        while (l1 != null || l2 != null) {\n            int sum = 0;\n            if (l1 != null) {\n                sum += l1.val;\n                l1 = l1.next;\n            }\n            if (l2 != null) {\n                sum += l2.val;\n                l2 = l2.next;\n            }\n            sum += carry;\n            carry = sum / 10;\n            sum %= 10;\n            cur.next = new ListNode(sum);\n            cur = cur.next;\n        }\n        if (carry > 0) {\n            cur.next = new ListNode(carry);\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        int ans = 0;\n        while (x > 0 && y > 0) {\n            if (x % 2 == 0) {\n                x /= 2;\n                ans++;\n            } else {\n                y /= 2;\n                ans++;\n            }\n        }\n        return ans;\n    }\n\n    public String longestPalindrome(String s) {\n        if (s == null || s.length() == 0) {\n            return \"\";\n        }\n        int len = s.length();\n        int[][] dp = new int[len][len];\n        for (int i = 0; i < len; i++) {\n            dp[i][i] = 1;\n        }\n        for (int i = 0; i < len - 1; i++) {\n            for (int j = i + 1; j < len; j++) {\n                if (s.charAt(i) == s.charAt(j)) {\n                    dp[i][j] = dp[i + 1][j - 1] + 2;\n                } else {\n                    dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n        int ans = 0;\n        for (int i = 0; i < len; i++) {\n            for (int j = i + 1; j < len; j++) {\n                if (dp[i][j] > ans) {\n                    ans = dp[i][j];\n                }\n            }\n        }\n        return s.substring(0, ans);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        int num = 0;\n        if (x == 0) {\n            num = 1;\n        } else {\n            num = chooseNum(x - 1, y) + chooseNum(x - 1, y - 1);\n        }\n        if (y == 0) {\n            num = num + 1;\n        } else {\n            num = num + chooseNum(x - 1, y - 1);\n        }\n        return num;\n    }\n\n    public int maxDepth(TreeNode root) {\n        if (root == null) {\n            return 0;\n        }\n        int left = maxDepth(root.left);\n        int right = maxDepth(root.right);\n        return Math.max(left, right) + 1;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        if (x > y) {\n            return -1;\n        }\n        if (y % 2 == 0) {\n            return y;\n        }\n        if (x == y) {\n            return -1;\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        if (x == 0) {\n            return y;\n        }\n        return chooseNum(x - 1, y);\n    }\n\n    public int longestCommonSubsequence(String s1, String s2) {\n        if (s1 == null || s2 == null) {\n            return 0;\n        }\n        int m = s1.length();\n        int n = s2.length();\n        int[][] dp = new int[m + 1][n + 1];\n        for (int i = 1; i <= m; i++) {\n            for (int j = 1; j <= n; j++) {\n                if (s1.charAt(i - 1) == s2.charAt(j - 1)) {\n                    dp[i][j] = dp[i - 1][j - 1] + 1;\n                } else {\n                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n        return dp[m][n];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        int result = 0;\n        int num = 1;\n        while (x > 0) {\n            if (x % 2 == 1) {\n                result += num;\n            }\n            x /= 2;\n            num *= 2;\n        }\n        if (y > 0) {\n            result += num;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        int[] dp = new int[x + 1];\n        dp[0] = 1;\n        for (int i = 1; i <= x; i++) {\n            for (int j = 1; j <= y; j++) {\n                dp[i] += dp[i - j];\n            }\n        }\n        return dp[x];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        if (x == 0 || y == 0) {\n            return 0;\n        }\n        int[][] dp = new int[x + 1][y + 1];\n        for (int i = 1; i <= x; i++) {\n            for (int j = 1; j <= y; j++) {\n                if (i == 1 || j == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1];\n                }\n            }\n        }\n        return dp[x][y];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        if (x > y) {\n            return -1;\n        }\n        if (y % 2 == 0) {\n            return y;\n        }\n        if (x == y) {\n            return -1;\n        }\n        return x + y;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        if (x == 0) {\n            return 0;\n        }\n        if (y == 0) {\n            return 1;\n        }\n        if (x == 1) {\n            return 1;\n        }\n        if (y == 1) {\n            return 1;\n        }\n        if (x == 2) {\n            return 2;\n        }\n        if (y == 2) {\n            return 2;\n        }\n        if (x == 3) {\n            return 3;\n        }\n        if (y == 3) {\n            return 3;\n        }\n        if (x == 4) {\n            return 4;\n        }\n        if (y == 4) {\n            return 4;\n        }\n        if (x == 5) {\n            return 5;\n        }\n        if (y == 5) {\n            return 5;\n        }\n        if (x == 6) {\n            return 6;\n        }\n        if (y == 6) {\n            return 6;\n        }\n        if (x == 7) {\n            return 7;\n        }\n        if (y == 7) {\n            return 7;\n        }\n        if (x == 8) {\n            return 8;\n        }\n        if (y == 8) {\n            return 8;\n        }\n        if (x == 9) {\n            return 9;\n        }\n        if (y == 9) {\n            return 9;\n        }\n        if (x == 10) {\n            return 10;\n        }\n        if (y == 10) {\n            return 10;\n        }\n        if (x == 11) {\n            return 11;\n        }\n        if (y == 11) {\n            return 11;\n        }\n        if (x == 12) {\n            return 12;\n        }\n        if (y == 12) {\n            return 12;\n        }\n        if (x == 13) {\n            return 13;\n        }\n        if (y == 13) {\n            return 13;\n        }\n        if (x == 14) {\n            return 14;\n        }\n        if (y == 14) {\n            return 14;\n        }\n        if (x == 15) {\n            return 15;\n        }\n        if (y == 15) {\n            return 15;\n        }\n        if (x == 16) {\n            return 16;\n        }\n        if (y == 16) {\n            return 16;\n        }\n        if (x == 17) {\n            return 17;\n        }\n        if (y == 17) {\n            return 17;\n        }\n        if (x == 18) {\n            return 18;\n        }\n        if (y == 18) {\n            return 18;\n        }\n        if (x == 19) {\n            return 19;\n        }\n        if (y == 19) {\n            return 19;\n        }\n        if (x == 20) {\n            return 20;\n        }\n        if (y == 20) {\n            return 20;\n        }\n        if (x == 21) {\n            return 21;\n        }\n        if (y == 21) {\n            return 21;\n        }\n        if (x == 22) {\n            return 22;\n        }\n        if (y == 22) {\n            return 22;\n        }\n        if (x == 23) {\n            return 23;\n        }\n        if (y == 23) {\n            return 23;\n        }\n        if (x == 24) {\n            return 24;\n        }\n        if (y == 24) {\n            return 24;\n        }\n        if (x == 25) {\n            return 25;\n        }\n        if (y == 25) {\n            return 25;\n        }\n        if (x == 26) {\n            return 26;\n        }\n        if (y == 26) {\n            return 26;\n        }\n        if (x == 27) {\n            return 27;\n        }\n        if (y == 27) {\n            return 27;\n        }\n        if (x == 28) {\n            return 28;\n        }\n        if (y == 28) {\n            return 28;\n        }\n        if (x == 29) {\n            return 29;\n        }\n        if (y == 29) {\n            return 29;\n        }\n        if (x == 30) {\n            return 30;\n        }\n        if (y == 30) {\n            return 30;\n        }\n        if (x == 31) {\n            return 31;\n        }\n        if (y == 31) {\n            return 31;\n        }\n        if (x == 32) {\n            return 32;\n        }\n        if (y == 32) {\n            return 32;\n        }\n        if (x == 33) {\n            return 33;\n        }\n        if (y == 33) {\n            return 33;\n        }\n        if (x == 34) {\n            return 34;\n        }\n        if (y == 34) {\n            return 34;\n        }\n        if (x == 35) {\n            return 35;\n        }\n        if (y == 35) {\n            return 35;\n        }\n        if (x == 36) {\n            return 36;\n        }\n        if (y == 36) {\n            return 36;\n        }\n        if (x == 37) {\n            return 37;\n        }\n        if (y == 37) {\n            return 37;\n        }\n        if (x == 38) {\n            return 38;\n        }\n        if (y == 38) {\n            return 38;\n        }\n        if (x == 39) {\n            return 39;\n        }\n        if (y == 39) {\n            return 39;\n        }\n        if (x == 40) {\n            return 40;\n        }\n        if (y == 40) {\n            return 40;\n        }\n        if (x == 41) {\n            return 41;\n        }\n        if (y == 41) {\n            return 41;\n        }\n        if (x == 42) {\n            return 42;\n        }\n        if (y == 42) {\n            return 42;\n        }\n        if (x == 43) {\n            return 43;\n        }\n        if (y == 43) {\n            return 43;\n        }\n        if (x == 44) {\n            return 44;\n        }\n        if (y == 44) {\n            return 44;\n        }\n        if (x == 45) {\n            return 45;\n        }\n        if (y == 45) {\n            return 45;\n        }\n        if (x == 46) {\n            return 46;\n        }\n        if (y == 46) {\n            return 46;\n        }\n        if (x == 47) {\n            return 47;\n        }\n        if (y == 47) {\n            return 47;\n        }\n        if (x == 48) {\n            return 48;\n        }\n        if (y == 48) {\n            return 48;\n        }\n        if (x == 49) {\n            return 49;\n        }\n        if (y == 49) {\n            return 49;\n        }\n        if (x == 50) {\n            return 50;\n        }\n        if (y == 50) {\n            return 50;\n        }\n        if (x == 51) {\n            return 51;\n        }\n        if (y == 51) {\n            return 51;\n        }\n        if (x == 52) {\n            return 52;\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        if (x > y) {\n            return -1;\n        }\n        if (y % 2 == 0) {\n            return y;\n        }\n        if (x == y) {\n            return -1;\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        int[] dp = new int[x + 1];\n        dp[0] = 1;\n        for (int i = 1; i <= x; i++) {\n            for (int j = 1; j <= y; j++) {\n                dp[i] += dp[i - j];\n            }\n        }\n        return dp[x];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        return (x + y) % 2;\n    }\n\n    public int findRepeatNumber(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            return -1;\n        }\n        int result = 0;\n        for (int i = 0; i < nums.length; i++) {\n            result ^= nums[i];\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        int[] dp = new int[x + 1];\n        dp[0] = 1;\n        for (int i = 1; i <= x; i++) {\n            dp[i] = dp[i - 1] + dp[i - x];\n        }\n        return dp[y];\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int m = sc.nextInt();\n        int[][] points = new int[m][2];\n        for (int i = 0; i < m; i++) {\n            points[i][0] = sc.nextInt();\n            points[i][1] = sc.nextInt();\n        }\n        int max = 0;\n        int x1 = 0;\n        int y1 = 0;\n        int x2 = 0;\n        int y2 = 0;\n        for (int i = 0; i < m; i++) {\n            if (points[i][0] < x1) {\n                x1 = points[i][0];\n            }\n            if (points[i][0] > x2) {\n                x2 = points[i][0];\n            }\n            if (points[i][1] < y1) {\n                y1 = points[i][1];\n            }\n            if (points[i][1] > y2) {\n                y2 = points[i][1];\n            }\n        }\n        int num = chooseNum(x2 - x1, y2 - y1);\n        System.out.println(num);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        int ans = 1;\n        while (x > 0) {\n            if (x % 2 == 1) {\n                ans *= y;\n            }\n            x /= 2;\n            y *= 2;\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if (n == 0 || m == 0) {\n            return 0;\n        }\n        int[] arr = new int[n + 1];\n        arr[0] = 0;\n        for (int i = 1; i <= n; i++) {\n            arr[i] = arr[i - 1] + m;\n        }\n        return arr[n];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        \n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        // Write your code here\n        int[] arr = new int[n];\n        for(int i=0;i<n;i++)\n            arr[i] = i+1;\n        Arrays.sort(arr);\n        int sum = 0;\n        int count = 0;\n        for(int i=0;i<n;i++)\n        {\n            if(arr[i]%m==0)\n            {\n                sum += arr[i];\n                count++;\n            }\n        }\n        return (double)sum/count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = i + 1;\n        }\n        int[] arr2 = new int[m];\n        for (int i = 0; i < m; i++) {\n            arr2[i] = i + 1;\n        }\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += arr[i];\n        }\n        int sum2 = 0;\n        for (int i = 0; i < m; i++) {\n            sum2 += arr2[i];\n        }\n        return (double) sum / n + (double) sum2 / m;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        int num = n;\n        int den = m;\n        int ans = 0;\n        while (num > 0) {\n            ans += num % den;\n            num /= den;\n        }\n        return ans / den;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        \n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = i + 1;\n        }\n        Arrays.sort(arr);\n        int sum = 0;\n        int count = 0;\n        for (int i = 0; i < m; i++) {\n            sum += arr[i];\n            count++;\n        }\n        return (double) sum / count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = i + 1;\n        }\n        int[] arr2 = new int[m];\n        for (int i = 0; i < m; i++) {\n            arr2[i] = i + 1;\n        }\n        int[] arr3 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr3[i] = arr[i] + arr2[i];\n        }\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += arr3[i];\n        }\n        return (double) sum / (double) (n + m);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = i + 1;\n        }\n        Arrays.sort(arr);\n        int sum = 0;\n        int count = 0;\n        for (int i = 0; i < m; i++) {\n            int index = arr[i] - 1;\n            if (index >= 0) {\n                sum += arr[index];\n                count++;\n            }\n        }\n        return (double) sum / count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = i + 1;\n        }\n        Arrays.sort(arr);\n        int sum = 0;\n        int count = 0;\n        for (int i = 0; i < m; i++) {\n            sum += arr[i];\n            count++;\n        }\n        return (double) sum / count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = i + 1;\n        }\n        Arrays.sort(arr);\n        int sum = 0;\n        int count = 0;\n        for (int i = 0; i < m; i++) {\n            sum += arr[i];\n            count++;\n        }\n        return (double) sum / count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        return Math.round(n / m) * m;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        // write your code here\n        int[] arr = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr[i] = i + 1;\n        }\n        int sum = 0;\n        for(int i = 0; i < m; i++) {\n            sum += arr[i];\n        }\n        return (double)sum / m;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = i + 1;\n        }\n        int sum = 0;\n        for (int i = 0; i < m; i++) {\n            sum += arr[i];\n        }\n        return (double) sum / m;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        \n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        int sum = 0;\n        int count = 0;\n        for (int i = n; i >= m; i--) {\n            sum += i;\n            count++;\n        }\n        return (double) sum / count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = i + 1;\n        }\n        Arrays.sort(arr);\n        int sum = 0;\n        int count = 0;\n        for (int i = 0; i < m; i++) {\n            sum += arr[i];\n            count++;\n        }\n        return (double) sum / count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        return (n + m) / 2;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = i + 1;\n        }\n        Arrays.sort(arr);\n        int left = 0;\n        int right = n - 1;\n        while (left < right) {\n            int mid = left + (right - left) / 2;\n            if (arr[mid] == m) {\n                return mid;\n            } else if (arr[mid] > m) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return left;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        return Math.round(n/m);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < x.size(); i++) {\n            map.put(x.get(i), i);\n        }\n        List<Integer> oddDigits = new ArrayList<>();\n        for (int i = 0; i < x.size(); i++) {\n            if (map.get(x.get(i)) % 2 == 1) {\n                oddDigits.add(x.get(i));\n            }\n        }\n        return oddDigits;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < x.size(); i++) {\n            if (map.containsKey(x.get(i))) {\n                map.put(x.get(i), map.get(x.get(i)) + 1);\n            } else {\n                map.put(x.get(i), 1);\n            }\n        }\n        for (int i = 0; i < x.size(); i++) {\n            if (map.get(x.get(i)) == 1) {\n                result.add(x.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> res = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < x.size(); i++) {\n            if (map.containsKey(x.get(i))) {\n                map.put(x.get(i), map.get(x.get(i)) + 1);\n            } else {\n                map.put(x.get(i), 1);\n            }\n        }\n        for (int i = 0; i < x.size(); i++) {\n            if (map.get(x.get(i)) == 1) {\n                res.add(x.get(i));\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> res = new ArrayList<>();\n        for(int i = 0; i < x.size(); i++) {\n            int num = x.get(i);\n            if(num >= 10) {\n                res.add(num);\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < x.size(); i++) {\n            map.put(x.get(i), i);\n        }\n        for (int i = 0; i < x.size(); i++) {\n            if (map.containsKey(x.get(i))) {\n                result.add(x.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n        for (int i = 0; i < x.size(); i++) {\n            if (set.contains(x.get(i))) {\n                result.add(x.get(i));\n            } else {\n                set.add(x.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        int max = 0;\n        for (int i = 0; i < x.size(); i++) {\n            if (x.get(i) > max) {\n                max = x.get(i);\n            }\n        }\n        for (int i = 0; i < x.size(); i++) {\n            if (x.get(i) == max) {\n                result.add(x.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> res = new ArrayList<>();\n        int n = x.size();\n        int[][] dp = new int[n][n];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == j) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == j) {\n                    continue;\n                }\n                int max = 0;\n                for (int k = 0; k < n; k++) {\n                    if (i == k || j == k) {\n                        continue;\n                    }\n                    if (dp[i][k] + dp[k][j] > max) {\n                        max = dp[i][k] + dp[k][j];\n                    }\n                }\n                if (max > 0) {\n                    res.add(i + 1);\n                    res.add(j + 1);\n                }\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < x.size(); i++) {\n            map.put(x.get(i), i);\n        }\n        for (int i = 0; i < x.size(); i++) {\n            if (map.containsKey(x.get(i))) {\n                result.add(x.get(i));\n                map.remove(x.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        int n = x.size();\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = x.get(i);\n        }\n        Arrays.sort(arr);\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if (arr[i] + arr[j] + arr[k] == target) {\n                        result.add(arr[i]);\n                        result.add(arr[j]);\n                        result.add(arr[k]);\n                        break;\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> res = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < x.size(); i++) {\n            map.put(x.get(i), i);\n        }\n        for (int i = 0; i < x.size(); i++) {\n            if (map.containsKey(x.get(i))) {\n                res.add(x.get(i));\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> result = new ArrayList<Integer>();\n        int len = x.size();\n        int max = 0;\n        int min = 0;\n        for (int i = 0; i < len; i++) {\n            if (x.get(i) > max) {\n                max = x.get(i);\n            }\n            if (x.get(i) < min) {\n                min = x.get(i);\n            }\n        }\n        for (int i = 0; i < len; i++) {\n            if (x.get(i) == max) {\n                result.add(max);\n            }\n            if (x.get(i) == min) {\n                result.add(min);\n            }\n        }\n        return result;\n    }\n\n    public String longestCommonPrefix(String[] strs) {\n        if (strs == null || strs.length == 0) {\n            return \"\";\n        }\n        List<Integer> result = uniqueDigits(Arrays.asList(strs));\n        int len = result.size();\n        if (len == 0) {\n            return \"\";\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < len; i++) {\n            sb.append(result.get(i));\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> res = new ArrayList<>();\n        if (x == null || x.size() == 0) return res;\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < x.size(); i++) {\n            map.put(x.get(i), i);\n        }\n        int len = x.size();\n        int[] arr = new int[len];\n        for (int i = 0; i < len; i++) {\n            arr[i] = x.get(i);\n        }\n        Arrays.sort(arr);\n        int start = 0;\n        int end = 0;\n        while (start < len) {\n            if (arr[start] == arr[end]) {\n                res.add(arr[start]);\n                start++;\n                end++;\n            } else {\n                end++;\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        \n        for (int i : x) {\n            \n            \n                if ((c - '0"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        int n = x.size();\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = x.get(i);\n        }\n        Arrays.sort(arr);\n        for (int i = 0; i < n; i++) {\n            result.add(arr[i]);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> res = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < x.size(); i++) {\n            if (map.containsKey(x.get(i))) {\n                map.put(x.get(i), map.get(x.get(i)) + 1);\n            } else {\n                map.put(x.get(i), 1);\n            }\n        }\n        for (int i = 0; i < x.size(); i++) {\n            if (map.get(x.get(i)) == 1) {\n                res.add(x.get(i));\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n        for (int i = 0; i < x.size(); i++) {\n            if (set.contains(x.get(i))) {\n                continue;\n            }\n            set.add(x.get(i));\n            result.add(x.get(i));\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        int len = x.size();\n        int i = 0;\n        int j = 1;\n        while (j < len) {\n            if (x.get(j) == x.get(j - 1)) {\n                x.remove(j);\n                j--;\n            } else {\n                j++;\n            }\n        }\n        return x;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        int n = x.size();\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = x.get(i);\n        }\n        Arrays.sort(arr);\n        for (int i = 0; i < n; i++) {\n            result.add(arr[i]);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> result = new ArrayList<String>();\n        int len = arr.size();\n        for (int i = 0; i < len; i++) {\n            int num = arr.get(i);\n            if (num == 1) {\n                result.add(\"One\");\n            } else if (num == 2) {\n                result.add(\"Two\");\n            } else if (num == 3) {\n                result.add(\"Three\");\n            } else if (num == 4) {\n                result.add(\"Four\");\n            } else if (num == 5) {\n                result.add(\"Five\");\n            } else if (num == 6) {\n                result.add(\"Six\");\n            } else if (num == 7) {\n                result.add(\"Seven\");\n            } else if (num == 8) {\n                result.add(\"Eight\");\n            } else if (num == 9) {\n                result.add(\"Nine\");\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> res = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            int len = arr.get(i);\n            if (len == 1) {\n                res.add(\"1\");\n            } else if (len == 2) {\n                res.add(\"2\");\n            } else if (len == 3) {\n                res.add(\"3\");\n            } else if (len == 4) {\n                res.add(\"4\");\n            } else if (len == 5) {\n                res.add(\"5\");\n            } else if (len == 6) {\n                res.add(\"6\");\n            } else if (len == 7) {\n                res.add(\"7\");\n            } else if (len == 8) {\n                res.add(\"8\");\n            } else if (len == 9) {\n                res.add(\"9\");\n            } else if (len == 10) {\n                res.add(\"10\");\n            } else if (len == 11) {\n                res.add(\"11\");\n            } else if (len == 12) {\n                res.add(\"12\");\n            } else if (len == 13) {\n                res.add(\"13\");\n            } else if (len == 14) {\n                res.add(\"14\");\n            } else if (len == 15) {\n                res.add(\"15\");\n            } else if (len == 16) {\n                res.add(\"16\");\n            } else if (len == 17) {\n                res.add(\"17\");\n            } else if (len == 18) {\n                res.add(\"18\");\n            } else if (len == 19) {\n                res.add(\"19\");\n            } else if (len == 20) {\n                res.add(\"20\");\n            } else if (len == 21) {\n                res.add(\"21\");\n            } else if (len == 22) {\n                res.add(\"22\");\n            } else if (len == 23) {\n                res.add(\"23\");\n            } else if (len == 24) {\n                res.add(\"24\");\n            } else if (len == 25) {\n                res.add(\"25\");\n            } else if (len == 26) {\n                res.add(\"26\");\n            } else if (len == 27) {\n                res.add(\"27\");\n            } else if (len == 28) {\n                res.add(\"28\");\n            } else if (len == 29) {\n                res.add(\"29\");\n            } else if (len == 30) {\n                res.add(\"30\");\n            } else if (len == 31) {\n                res.add(\"31\");\n            } else if (len == 32) {\n                res.add(\"32\");\n            } else if (len == 33) {\n                res.add(\"33\");\n            } else if (len == 34) {\n                res.add(\"34\");\n            } else if (len == 35) {\n                res.add(\"35\");\n            } else if (len == 36) {\n                res.add(\"36\");\n            } else if (len == 37) {\n                res.add(\"37\");\n            } else if (len == 38) {\n                res.add(\"38\");\n            } else if (len == 39) {\n                res.add(\"39\");\n            } else if (len == 40) {\n                res.add(\"40\");\n            } else if (len == 41) {\n                res.add(\"41\");\n            } else if (len == 42) {\n                res.add(\"42\");\n            } else if (len == 43) {\n                res.add(\"43\");\n            } else if (len == 44) {\n                res.add(\"44\");\n            } else if (len == 45) {\n                res.add(\"45\");\n            } else if (len == 46) {\n                res.add(\"46\");\n            } else if (len == 47) {\n                res.add(\"47\");\n            } else if (len == 48) {\n                res.add(\"48\");\n            } else if (len == 49) {\n                res.add(\"49\");\n            } else if (len == 50) {\n                res.add(\"50\");\n            } else if (len == 51) {\n                res.add(\"51\");\n            } else if (len == 52) {\n                res.add(\"52\");\n            } else if (len == 53) {\n                res.add(\"53\");\n            } else if (len == 54) {\n                res.add(\"54\");\n            } else if (len == 55) {\n                res.add(\"55\");\n            } else if (len == 56) {\n                res.add(\"56\");\n            } else if (len == 57) {\n                res.add(\"57\");\n            } else if (len == 58) {\n                res.add(\"58\");\n            } else if (len == 59) {\n                res.add(\"59\");\n            } else if (len == 60) {\n                res.add(\"60\");\n            } else if (len == 61) {\n                res.add(\"61\");\n            } else if (len == 62) {\n                res.add(\"62\");\n            } else if (len == 63) {\n                res.add(\"63\");\n            } else if (len == 64) {\n                res.add(\"64\");\n            } else if (len == 65) {\n                res.add(\"65\");\n            } else if (len == 66) {\n                res.add(\"66\");\n            } else if (len == 67) {\n                res.add(\"67\");\n            } else if (len == 68) {\n                res.add(\"68\");\n            } else if (len == 69) {\n                res.add(\"69\");\n            } else if (len == 70) {\n                res.add(\"70\");\n            } else if (len == 71) {\n                res.add(\"71\");\n            } else if (len == 72) {\n                res.add(\"72\");\n            } else if (len == 73) {\n                res.add(\"73\");\n            } else if (len == 74) {\n                res.add(\"74\");\n            } else if (len == 75) {\n                res.add(\"75\");\n            } else if (len == 76) {\n                res.add(\"76\");\n            } else if (len == 77) {\n                res.add(\"77\");\n            } else if (len == 78) {\n                res.add(\"78\");\n            } else if (len == 79) {\n                res.add(\"79\");\n            } else if (len == 80) {\n                res.add(\"80\");\n            } else if (len == 81) {\n                res.add(\"81\");\n            } else if (len == 82) {\n                res.add(\"82\");\n            } else if (len == 83) {\n                res.add(\"83\");\n            } else if (len == 84) {\n                res.add(\"84\");\n            } else if (len == 85) {\n                res.add(\"85\");\n            } else if (len == 86) {\n                res.add(\"86\");\n            } else if (len == 87) {\n                res.add(\"87\");\n            } else if (len == 88) {\n                res.add(\"88\");\n            } else if (len == 89) {\n                res.add(\"89\");\n            } else if (len == 90) {\n                res.add(\"90\");\n            } else if (len == 91) {\n                res.add(\"91\");\n            } else if (len == 92) {\n                res.add(\"92\");\n            } else if (len == 93) {\n                res.add(\"93\");\n            } else if (len == 94) {\n                res.add(\"94\");\n            } else if (len == 95) {\n                res.add(\"95\");\n            } else if (len == 96) {\n                res.add(\"96\");\n            } else if (len == 97) {\n                res.add(\"97\");\n            }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> res = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == 0) {\n                res.add(\"0\");\n            } else {\n                int len = 0;\n                while (arr.get(i) != 0) {\n                    len++;\n                    arr.set(i, arr.get(i) % 10);\n                }\n                res.add(String.valueOf(len));\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> ans = new ArrayList<>();\n        int len = arr.size();\n        for(int i = 0; i < len; i++) {\n            int num = arr.get(i);\n            String str = \"\";\n            while(num > 0) {\n                str = (char)('0' + num % 10) + str;\n                num /= 10;\n            }\n            ans.add(str);\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> ans = new ArrayList<>();\n        for(int i = 0; i < arr.size(); i++) {\n            int len = arr.get(i);\n            for(int j = 0; j < len; j++) {\n                ans.add(String.valueOf(arr.get(i)));\n            }\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> res = new ArrayList<>();\n        for(int i = 0; i < arr.size(); i++) {\n            int len = arr.get(i);\n            for(int j = 0; j < len; j++) {\n                res.add(String.valueOf(arr.get(i)));\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> res = new ArrayList<>();\n        for(int i = 0; i < arr.size(); i++) {\n            res.add(String.valueOf(arr.get(i)));\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == 1) {\n                result.add(\"One\");\n            } else if (arr.get(i) == 2) {\n                result.add(\"Two\");\n            } else if (arr.get(i) == 3) {\n                result.add(\"Three\");\n            } else if (arr.get(i) == 4) {\n                result.add(\"Four\");\n            } else if (arr.get(i) == 5) {\n                result.add(\"Five\");\n            } else if (arr.get(i) == 6) {\n                result.add(\"Six\");\n            } else if (arr.get(i) == 7) {\n                result.add(\"Seven\");\n            } else if (arr.get(i) == 8) {\n                result.add(\"Eight\");\n            } else if (arr.get(i) == 9) {\n                result.add(\"Nine\");\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> result = new ArrayList<>();\n        for(int i=0;i<arr.size();i++)\n        {\n            int len = arr.get(i);\n            for(int j=0;j<len;j++)\n            {\n                result.add(String.valueOf(arr.get(i)));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            int len = arr.get(i);\n            for (int j = 0; j < len; j++) {\n                result.add(String.valueOf(arr.get(i)));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> res = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == 1) {\n                res.add(String.valueOf(i + 1));\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> ans = new ArrayList<>();\n        for(int i=0;i<arr.size();i++) {\n            String s = \"\";\n            for(int j=0;j<arr.get(i);j++) {\n                s = s + \"1\";\n            }\n            ans.add(s);\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> result = new ArrayList<>();\n        int len = arr.size();\n        int count = 0;\n        for(int i = 0; i < len; i++) {\n            if(arr.get(i) == 0) {\n                count++;\n            }\n            else {\n                result.add(String.valueOf(count));\n                count = 1;\n            }\n        }\n        if(count > 0) {\n            result.add(String.valueOf(count));\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> result = new ArrayList<>();\n        if (arr == null || arr.size() == 0) {\n            return result;\n        }\n        int len = arr.size();\n        int[] count = new int[26];\n        for (int i = 0; i < len; i++) {\n            count[arr.get(i) - 'a']++;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (count[i] > 0) {\n                result.add(String.valueOf((char) ('a' + i)));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> res = new ArrayList<>();\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) == 1) {\n                res.add(\"One\");\n            }\n            else if(arr.get(i) == 2) {\n                res.add(\"Two\");\n            }\n            else if(arr.get(i) == 3) {\n                res.add(\"Three\");\n            }\n            else if(arr.get(i) == 4) {\n                res.add(\"Four\");\n            }\n            else if(arr.get(i) == 5) {\n                res.add(\"Five\");\n            }\n            else if(arr.get(i) == 6) {\n                res.add(\"Six\");\n            }\n            else if(arr.get(i) == 7) {\n                res.add(\"Seven\");\n            }\n            else if(arr.get(i) == 8) {\n                res.add(\"Eight\");\n            }\n            else if(arr.get(i) == 9) {\n                res.add(\"Nine\");\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> res = new ArrayList<>();\n        for(int i = 0; i < arr.size(); i++) {\n            for(int j = i + 1; j < arr.size(); j++) {\n                if(arr.get(i) + arr.get(j) == arr.get(i) * arr.get(j)) {\n                    res.add(String.valueOf(arr.get(i)) + \" \" + String.valueOf(arr.get(j)));\n                }\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> result = new ArrayList<>();\n        for(int i=0;i<arr.size();i++){\n            int len = arr.get(i);\n            for(int j=0;j<len;j++){\n                result.add(String.valueOf(arr.get(i)));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> res = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            int len = arr.get(i);\n            for (int j = 0; j < len; j++) {\n                res.add(String.valueOf(arr.get(i)));\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> ans = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            ans.add(String.valueOf(arr.get(i)));\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> res = new ArrayList<>();\n        for(int i = 0; i < arr.size(); i++) {\n            String s = \"\";\n            for(int j = 0; j < arr.get(i); j++) {\n                s += \" \";\n            }\n            s += arr.get(i);\n            res.add(s);\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> ret = new ArrayList<>();\n        int i = 0;\n        int j = 0;\n        while (i < n) {\n            if (i % 2 == 0) {\n                int x = 1;\n                while (j < i) {\n                    x *= j;\n                    j++;\n                }\n                ret.add(x);\n            } else {\n                int x = 1;\n                while (j < i) {\n                    x *= j;\n                    j++;\n                }\n                ret.add(x);\n            }\n            i++;\n        }\n        return ret;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            res.add(0);\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == 0 || j == 0) {\n                    res.set(i, j);\n                } else {\n                    if (s1.charAt(i - 1) == s2.charAt(j - 1)) {\n                        res.set(i, j);\n                    } else {\n                        res.set(i, Math.max(res.get(i), res.get(j)));\n                    }\n                }\n            }\n        }\n        return res;\n    }\n\n    public int findLCS(String s1, String s2) {\n        int m = s1.length();\n        int n = s2.length();\n        int[][] dp = new int[m + 1][n + 1];\n        for (int i = 0; i < m + 1; i++) {\n            dp[i][0] = 0;\n        }\n        for (int j = 0; j < n + 1; j++) {\n            dp[0][j] = 0;\n        }\n        for (int i = 1; i < m + 1; i++) {\n            for (int j = 1; j < n + 1; j++) {\n                if (s1.charAt(i - 1) == s2.charAt(j - 1)) {\n                    dp[i][j] = dp[i - 1][j - 1] + 1;\n                } else {\n                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n        return dp[m][n];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> list = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                list.add(i);\n            }\n        }\n        return list;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            result.add(i);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Integer> result = s.f(10);\n        for (Integer i : result) {\n            System.out.println(i);\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> res = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            if(isPrime(i)) {\n                res.add(i);\n            }\n        }\n        return res;\n    }\n\n    public boolean isPrime(int n) {\n        if(n == 1) return false;\n        if(n == 2) return true;\n        if(n % 2 == 0) return false;\n        for(int i = 3; i * i <= n; i += 2) {\n            if(n % i == 0) return false;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(new Solution().f(10));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> ans = new ArrayList<Integer>();\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                ans.add(i);\n            }\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> res = new ArrayList<>();\n        if (n == 0)\n            return res;\n        int[][] dp = new int[n + 1][n + 1];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == 0 || j == 0)\n                    dp[i + 1][j + 1] = 0;\n                else if (s1.charAt(i - 1) == s2.charAt(j - 1))\n                    dp[i + 1][j + 1] = dp[i][j] + 1;\n                else\n                    dp[i + 1][j + 1] = Math.max(dp[i][j], dp[i + 1][j]);\n            }\n        }\n        return res;\n    }\n\n    public int longestCommonSubsequence(String s1, String s2) {\n        List<Integer> res = f(s1.length());\n        for (int i = 0; i < s1.length(); i++) {\n            for (int j = 0; j < s2.length(); j++) {\n                if (s1.charAt(i) == s2.charAt(j))\n                    res.set(i + j + 1, res.get(i + j + 1) + 1);\n            }\n        }\n        return res.get(s1.length());\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            res.add(i);\n        }\n        return res;\n    }\n\n    public List<Integer> f2(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            res.add(i);\n        }\n        return res;\n    }\n\n    public List<Integer> f3(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            res.add(i);\n        }\n        return res;\n    }\n\n    public List<Integer> f4(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            res.add(i);\n        }\n        return res;\n    }\n\n    public List<Integer> f5(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            res.add(i);\n        }\n        return res;\n    }\n\n    public List<Integer> f6(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            res.add(i);\n        }\n        return res;\n    }\n\n    public List<Integer> f7(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            res.add(i);\n        }\n        return res;\n    }\n\n    public List<Integer> f8(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            res.add(i);\n        }\n        return res;\n    }\n\n    public List<Integer> f9(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            res.add(i);\n        }\n        return res;\n    }\n\n    public List<Integer> f10(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            res.add(i);\n        }\n        return res;\n    }\n\n    public List<Integer> f11(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            res.add(i);\n        }\n        return res;\n    }\n\n    public List<Integer> f12(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            res.add(i);\n        }\n        return res;\n    }\n\n    public List<Integer> f13(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            res.add(i);\n        }\n        return res;\n    }\n\n    public List<Integer> f14(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            res.add(i);\n        }\n        return res;\n    }\n\n    public List<Integer> f15(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            res.add(i);\n        }\n        return res;\n    }\n\n    public List<Integer> f16(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            res.add(i);\n        }\n        return res;\n    }\n\n    public List<Integer> f17(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            res.add(i);\n        }\n        return res;\n    }\n\n    public List<Integer> f18(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            res.add(i);\n        }\n        return res;\n    }\n\n    public List<Integer> f19(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            res.add(i);\n        }\n        return res;\n    }\n\n    public List<Integer> f20(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            res.add(i);\n        }\n        return res;\n    }\n\n    public List<Integer> f21(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            res.add(i);\n        }\n        return res;\n    }\n\n    public List<Integer> f22(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            res.add(i);\n        }\n        return res;\n    }\n\n    public List<Integer> f23(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            res.add(i);\n        }\n        return res;\n    }\n\n    public List<Integer> f24(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            res.add(i);\n        }\n        return res;\n    }\n\n    public List<Integer> f25(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            res.add(i);\n        }\n        return res;\n    }\n\n    public List<Integer> f26(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            res.add(i);\n        }\n        return res;\n    }\n\n    public List<Integer> f27(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            res.add(i);\n        }\n        return res;\n    }\n\n    public List<Integer> f28(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            res.add(i);\n        }\n        return res;\n    }\n\n    public List<Integer> f29(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            res.add(i);\n        }\n        return res;\n    }\n\n    public List<Integer> f30(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            res.add(i);\n        }\n        return res;\n    }\n\n    public List<Integer> f31(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            res.add(i);\n        }\n        return res;\n    }\n\n    public List<Integer> f32(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            res.add(i);\n        }\n        return res;\n    }\n\n    public List<Integer> f33(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            res.add(i);\n        }\n        return res;\n    }\n\n    public List<Integer> f34(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            res.add(i);\n        }\n        return res;\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> ret = new ArrayList<>();\n        int i = 0;\n        int j = 1;\n        while (i < n) {\n            if (i % 2 == 0) {\n                int x = 1;\n                x *= j;\n                ret.add(x);\n            } else {\n                int x = 1;\n                x *= j;\n                ret.add(x);\n            }\n            i++;\n            j++;\n        }\n        return ret;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> res = new ArrayList<>();\n        if (n < 3) return res;\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = i + 1;\n        }\n        Arrays.sort(arr);\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if (arr[i] + arr[j] + arr[k] == 0) {\n                        res.add(arr[i]);\n                        res.add(arr[j]);\n                        res.add(arr[k]);\n                    }\n                }\n            }\n        }\n        return res;\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.f(3));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> res = new ArrayList<>();\n        String str = String.valueOf(n);\n        for (int i = 0; i < str.length(); i++) {\n            if (str.charAt(i) == '0') {\n                res.add(0);\n            } else {\n                res.add(1);\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            res.add(i);\n        }\n        return res;\n    }\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.f(10));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> ret = new ArrayList<>();\n        if (n == 0) {\n            return ret;\n        }\n        int i = 0;\n        int j = 0;\n        int x = 1;\n        while (n > 0) {\n            if (n % 2 == 0) {\n                j = 1;\n            } else {\n                j = 0;\n            }\n            n /= 2;\n            x *= j;\n            ret.add(x);\n        }\n        return ret;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> ans = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            ans.add(i);\n        }\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= n; j++) {\n                if (i == j) {\n                    continue;\n                }\n                ans.add(i * j);\n            }\n        }\n        return ans;\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        int n = 5;\n        System.out.println(s.f(n));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> res = new ArrayList<>();\n        if(n == 0) return res;\n        ListNode head = new ListNode(0);\n        ListNode cur = head;\n        ListNode pre = head;\n        while(n > 0) {\n            cur.next = new ListNode(n % 10);\n            cur = cur.next;\n            n /= 10;\n        }\n        cur.next = null;\n        while(head != null) {\n            if(head == pre) {\n                res.add(head.val);\n                head = head.next;\n            } else {\n                pre = pre.next;\n                head = head.next;\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> ans = new ArrayList<>();\n        while (n != 0) {\n            ans.add(n % 10);\n            n /= 10;\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> ret = new ArrayList<Integer>();\n        int i = 0;\n        int j = 1;\n        while (i < n) {\n            if (i % 2 == 0) {\n                int x = 1;\n                x *= j;\n                ret.add(x);\n            } else {\n                int x = 1;\n                x *= j;\n                ret.add(x);\n            }\n            i++;\n            j++;\n        }\n        return ret;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> ans = new ArrayList<>();\n        int[] dp = new int[n+1];\n        dp[0] = 0;\n        for(int i = 1; i <= n; i++) {\n            for(int j = 0; j < i; j++) {\n                if(prices[j] < prices[i]) {\n                    dp[i] = Math.max(dp[i], dp[j] + prices[i] - prices[j]);\n                }\n            }\n        }\n        ans.add(dp[n]);\n        for(int i = n; i >= 0; i--) {\n            ans.add(dp[i]);\n        }\n        return ans;\n    }\n    public int maxProfit(int[] prices) {\n        return f(prices.length).get(0);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> ret = new ArrayList<Integer>();\n        if (n == 0) {\n            return ret;\n        }\n        if (n % 2 == 0) {\n            int x = 1;\n            x *= f(n / 2);\n            ret.add(x);\n        } else {\n            int x = 1;\n            x *= f(n / 2);\n            ret.add(x);\n        }\n        return ret;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> list = new ArrayList<Integer>();\n        for(int i = 1; i <= n; i++) {\n            if(i % 2 == 0 && i % 3 == 0) {\n                list.add(i);\n            }\n        }\n        return list;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> ans = new ArrayList<>();\n        int n1 = n;\n        while (n1 > 0) {\n            int rem = n1 % 2;\n            ans.add(rem);\n            n1 /= 2;\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> ans = new ArrayList<>();\n        int start = 0;\n        int end = n;\n        while(start < end) {\n            if(isPalindrome(start)) {\n                ans.add(start);\n                start++;\n            } else {\n                ans.add(end);\n                end--;\n            }\n        }\n        return ans;\n    }\n\n    private boolean isPalindrome(int num) {\n        int reverse = 0;\n        while(num != 0) {\n            reverse = reverse * 10 + num % 10;\n            num /= 10;\n        }\n        return reverse == num;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> ans = new ArrayList<>();\n        int i = 0;\n        while(i < n){\n            if(isEven(i)){\n                ans.add(i);\n            }\n            i++;\n        }\n        return ans;\n    }\n    \n    public boolean isEven(int n){\n        return (n % 2 == 0);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int num = n;\n        while(num > 0) {\n            int digit = num % 10;\n            if(digit % 2 == 0) {\n                result.add(digit);\n            }\n            num /= 10;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int i = 0;\n        while(i < n) {\n            if(isEven(i)) {\n                result.add(i);\n            }\n            i++;\n        }\n        return result;\n    }\n\n    public boolean isEven(int n) {\n        return (n % 2) == 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int start = 0;\n        int end = n;\n        while(start < end){\n            int mid = (start + end) / 2;\n            if(isPalindrome(mid)){\n                result.add(mid);\n                start = mid + 1;\n            }\n            else{\n                end = mid;\n            }\n        }\n        return result;\n    }\n\n    private boolean isPalindrome(int n){\n        String str = Integer.toString(n);\n        return str.equals(str.reverse());\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> ans = new ArrayList<>();\n        int start = 0;\n        int end = n;\n        while(start < end){\n            if(isPalindrome(start) && isPalindrome(end)){\n                ans.add(start);\n                ans.add(end);\n                start++;\n                end--;\n            }\n            else if(isPalindrome(start) && !isPalindrome(end)){\n                ans.add(start);\n                start++;\n            }\n            else if(!isPalindrome(start) && isPalindrome(end)){\n                ans.add(end);\n                end--;\n            }\n            else if(!isPalindrome(start) && !isPalindrome(end)){\n                ans.add(start);\n                start++;\n                end--;\n            }\n        }\n        return ans;\n    }\n\n    private boolean isPalindrome(int n){\n        int start = 0;\n        int end = n;\n        while(start < end){\n            if(n % 10 == start % 10){\n                n /= 10;\n                start++;\n            }\n            else{\n                n /= 10;\n                end--;\n            }\n        }\n        return n == 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> list = new ArrayList<>();\n        int start = 0;\n        int end = n;\n        while (start < end) {\n            int mid = (start + end) / 2;\n            if (isEven(mid)) {\n                list.add(mid);\n                start = mid + 1;\n            } else {\n                end = mid;\n            }\n        }\n        return list;\n    }\n\n    public boolean isEven(int num) {\n        return num % 2 == 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> res = new ArrayList<>();\n        int i = 0;\n        int j = n;\n        while (i < j) {\n            if (i % 2 == 0) {\n                res.add(i);\n            }\n            i++;\n            j--;\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> ans = new ArrayList<>();\n        int i = 0;\n        while(i < n) {\n            int j = i;\n            while(j < n && n % j == 0) {\n                ans.add(j);\n                j++;\n            }\n            i++;\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> res = new ArrayList<>();\n        int i = 0;\n        while (i < n) {\n            int num = i;\n            while (num > 0) {\n                int rem = num % 10;\n                if (rem % 2 == 0) {\n                    res.add(num);\n                }\n                num /= 10;\n            }\n            i++;\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> res = new ArrayList<>();\n        int i = 1;\n        while(i <= n){\n            if(isEven(i)){\n                res.add(i);\n            }\n            i++;\n        }\n        return res;\n    }\n\n    private boolean isEven(int n){\n        return n % 2 == 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> res = new ArrayList<>();\n        int num = n;\n        while(num > 0){\n            int rem = num % 2;\n            num = num / 2;\n            if(rem == 0){\n                res.add(num);\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int start = 0;\n        int end = n;\n        while (start < end) {\n            int mid = (start + end) / 2;\n            if (isEven(mid)) {\n                start = mid + 1;\n            } else {\n                end = mid;\n            }\n        }\n        while (start <= end) {\n            int mid = (start + end) / 2;\n            if (isOdd(mid)) {\n                result.add(mid);\n            }\n            if (isEven(mid)) {\n                start = mid + 1;\n            } else {\n                end = mid - 1;\n            }\n        }\n        return result;\n    }\n\n    private boolean isEven(int num) {\n        return num % 2 == 0;\n    }\n\n    private boolean isOdd(int num) {\n        return num % 2 != 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> ans = new ArrayList<>();\n        int i = 0;\n        while(i < n){\n            if(isEven(i)){\n                ans.add(i);\n            }\n            i++;\n        }\n        return ans;\n    }\n\n    public boolean isEven(int n){\n        return (n % 2 == 0);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> ans = new ArrayList<>();\n        int start = 0;\n        int end = n;\n        while(start < end){\n            if(isPalindrome(start)){\n                ans.add(start);\n                start++;\n            }else{\n                ans.add(end);\n                end--;\n            }\n        }\n        return ans;\n    }\n\n    public boolean isPalindrome(int n){\n        int start = 0;\n        int end = n;\n        while(start < end){\n            if(n % 10 != (n / 10) % 10){\n                return false;\n            }\n            n /= 10;\n            start++;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> ans = new ArrayList<>();\n        int i = 0;\n        while(i < n){\n            if(isEven(i)){\n                ans.add(i);\n            }\n            i++;\n        }\n        return ans;\n    }\n\n    public boolean isEven(int n){\n        return (n%2 == 0);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int start = 0;\n        int end = n;\n        while (start < end) {\n            int num = start;\n            while (num < end && num % 2 == 0) {\n                num++;\n            }\n            result.add(num);\n            start = num;\n            num = end;\n            while (num > start && num % 2 == 1) {\n                num--;\n            }\n            result.add(num);\n            end = num;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> list = new ArrayList<>();\n        int num = n;\n        while (num > 0) {\n            int rem = num % 2;\n            list.add(rem);\n            num = num / 2;\n        }\n        return list;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> res = new ArrayList<>();\n        int low = 0, high = n;\n        while (low < high) {\n            int mid = (low + high) / 2;\n            if (isEven(mid)) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (isOdd(mid)) {\n                res.add(mid);\n            }\n            if (isEven(mid)) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return res;\n    }\n\n    public boolean isEven(int num) {\n        return num % 2 == 0;\n    }\n\n    public boolean isOdd(int num) {\n        return num % 2 != 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) % 2 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        int max = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            for (int j = i + 1; j < arr.size(); j++) {\n                if (arr.get(i) == arr.get(j)) {\n                    count++;\n                    if (count > max) {\n                        max = count;\n                    }\n                }\n            }\n        }\n        return max;\n    }\n\n    public String longestPalindrome(String s) {\n        List<Integer> arr = new ArrayList<>();\n        for (int i = 0; i < s.length(); i++) {\n            arr.add(s.charAt(i));\n        }\n        return String.valueOf(arr.get(0));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            for (int j = i + 1; j < arr.size(); j++) {\n                if (arr.get(i) == arr.get(j)) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n\n    public String longestPalindrome(String s) {\n        int len = s.length();\n        if (len == 0) {\n            return \"\";\n        }\n        int[][] dp = new int[len][len];\n        int maxCount = 0;\n        int start = 0;\n        int end = 0;\n        for (int i = 0; i < len; i++) {\n            for (int j = i + 1; j < len; j++) {\n                if (s.charAt(i) == s.charAt(j)) {\n                    dp[i][j] = 1 + dp[i + 1][j - 1];\n                    if (dp[i][j] > maxCount) {\n                        maxCount = dp[i][j];\n                        start = i - maxCount + 1;\n                        end = j + 1 - maxCount;\n                    }\n                }\n            }\n        }\n        return s.substring(start, end + 1);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int len = arr.size();\n        int[] nums = new int[len];\n        for (int i = 0; i < len; i++) {\n            nums[i] = arr.get(i);\n        }\n        int[] arr2 = new int[len];\n        for (int i = 0; i < len; i++) {\n            for (int j = 0; j < len; j++) {\n                if (nums[i] == nums[j]) {\n                    arr2[i] += nums[j];\n                }\n            }\n        }\n        int len2 = arr2.length;\n        int[] nums2 = new int[len2];\n        for (int i = 0; i < len2; i++) {\n            nums2[i] = arr2[i];\n        }\n        int len3 = nums2.length;\n        int[] nums3 = new int[len3];\n        for (int i = 0; i < len3; i++) {\n            nums3[i] = nums2[i];\n        }\n        int len4 = nums3.length;\n        int[] nums4 = new int[len4];\n        for (int i = 0; i < len4; i++) {\n            nums4[i] = nums3[i];\n        }\n        int len5 = nums4.length;\n        int[] nums5 = new int[len5];\n        for (int i = 0; i < len5; i++) {\n            nums5[i] = nums4[i];\n        }\n        int len6 = nums5.length;\n        int[] nums6 = new int[len6];\n        for (int i = 0; i < len6; i++) {\n            nums6[i] = nums5[i];\n        }\n        int len7 = nums6.length;\n        int[] nums7 = new int[len7];\n        for (int i = 0; i < len7; i++) {\n            nums7[i] = nums6[i];\n        }\n        int len8 = nums7.length;\n        int[] nums8 = new int[len8];\n        for (int i = 0; i < len8; i++) {\n            nums8[i] = nums7[i];\n        }\n        int len9 = nums8.length;\n        int[] nums9 = new int[len9];\n        for (int i = 0; i < len9; i++) {\n            nums9[i] = nums8[i];\n        }\n        int len10 = nums9.length;\n        int[] nums10 = new int[len10];\n        for (int i = 0; i < len10; i++) {\n            nums10[i] = nums9[i];\n        }\n        int len11 = nums10.length;\n        int[] nums11 = new int[len11];\n        for (int i = 0; i < len11; i++) {\n            nums11[i] = nums10[i];\n        }\n        int len12 = nums11.length;\n        int[] nums12 = new int[len12];\n        for (int i = 0; i < len12; i++) {\n            nums12[i] = nums11[i];\n        }\n        int len13 = nums12.length;\n        int[] nums13 = new int[len13];\n        for (int i = 0; i < len13; i++) {\n            nums13[i] = nums12[i];\n        }\n        int len14 = nums13.length;\n        int[] nums14 = new int[len14];\n        for (int i = 0; i < len14; i++) {\n            nums14[i] = nums13[i];\n        }\n        int len15 = nums14.length;\n        int[] nums15 = new int[len15];\n        for (int i = 0; i < len15; i++) {\n            nums15[i] = nums14[i];\n        }\n        int len16 = nums15.length;\n        int[] nums16 = new int[len16];\n        for (int i = 0; i < len16; i++) {\n            nums16[i] = nums15[i];\n        }\n        int len17 = nums16.length;\n        int[] nums17 = new int[len17];\n        for (int i = 0; i < len17; i++) {\n            nums17[i] = nums16[i];\n        }\n        int len18 = nums17.length;\n        int[] nums18 = new int[len18];\n        for (int i = 0; i < len18; i++) {\n            nums18[i] = nums17[i];\n        }\n        int len19 = nums18.length;\n        int[] nums19 = new int[len19];\n        for (int i = 0; i < len19; i++) {\n            nums19[i] = nums18[i];\n        }\n        int len20 = nums19.length;\n        int[] nums20 = new int[len20];\n        for (int i = 0; i < len20; i++) {\n            nums20[i] = nums19[i];\n        }\n        int len21 = nums20.length;\n        int[] nums21 = new int[len21];\n        for (int i = 0; i < len21; i++) {\n            nums21[i] = nums20[i];\n        }\n        int len22 = nums21.length;\n        int[] nums22 = new int[len22];\n        for (int i = 0; i < len22; i++) {\n            nums22[i] = nums21[i];\n        }\n        int len23 = nums22.length;\n        int[] nums23 = new int[len23];\n        for (int i = 0; i < len23; i++) {\n            nums23[i] = nums22[i];\n        }\n        int len24 = nums23.length;\n        int[] nums24 = new int[len24];\n        for (int i = 0; i < len24; i++) {\n            nums24[i] = nums23[i];\n        }\n        int len25 = nums24.length;\n        int[] nums25 = new int[len25];\n        for (int i = 0; i < len25; i++) {\n            nums25[i] = nums24[i];\n        }\n        int len26 = nums25.length;\n        int[] nums26 = new int[len26];\n        for (int i = 0; i < len26; i++) {\n            nums26[i] = nums25[i];\n        }\n        int len27 = nums26.length;\n        int[] nums27 = new int[len27];\n        for (int i = 0; i < len27; i++) {\n            nums27[i] = nums26[i];\n        }\n        int len28 = nums27.length;\n        int[] nums28 = new int[len28];\n        for (int i = 0; i < len28; i++) {\n            nums28[i] = nums27[i];\n        }\n        int len29 = nums28.length;\n        int[] nums29 = new int[len29];\n        for (int i = 0; i < len29; i++) {\n            nums29[i] = nums28[i];\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int n: arr) {\n            int neg = 1;\n            if (n < 0) {\n                n = -n;\n                neg = -1;\n            }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        int n = arr.size();\n        int[] arr1 = new int[n];\n        int[] arr2 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr1[i] = arr.get(i);\n            arr2[i] = arr.get(i);\n        }\n        int[] arr3 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr3[i] = arr.get(i);\n        }\n        int[] arr4 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr4[i] = arr.get(i);\n        }\n        int[] arr5 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr5[i] = arr.get(i);\n        }\n        int[] arr6 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr6[i] = arr.get(i);\n        }\n        int[] arr7 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr7[i] = arr.get(i);\n        }\n        int[] arr8 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr8[i] = arr.get(i);\n        }\n        int[] arr9 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr9[i] = arr.get(i);\n        }\n        int[] arr10 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr10[i] = arr.get(i);\n        }\n        int[] arr11 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr11[i] = arr.get(i);\n        }\n        int[] arr12 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr12[i] = arr.get(i);\n        }\n        int[] arr13 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr13[i] = arr.get(i);\n        }\n        int[] arr14 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr14[i] = arr.get(i);\n        }\n        int[] arr15 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr15[i] = arr.get(i);\n        }\n        int[] arr16 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr16[i] = arr.get(i);\n        }\n        int[] arr17 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr17[i] = arr.get(i);\n        }\n        int[] arr18 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr18[i] = arr.get(i);\n        }\n        int[] arr19 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr19[i] = arr.get(i);\n        }\n        int[] arr20 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr20[i] = arr.get(i);\n        }\n        int[] arr21 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr21[i] = arr.get(i);\n        }\n        int[] arr22 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr22[i] = arr.get(i);\n        }\n        int[] arr23 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr23[i] = arr.get(i);\n        }\n        int[] arr24 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr24[i] = arr.get(i);\n        }\n        int[] arr25 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr25[i] = arr.get(i);\n        }\n        int[] arr26 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr26[i] = arr.get(i);\n        }\n        int[] arr27 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr27[i] = arr.get(i);\n        }\n        int[] arr28 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr28[i] = arr.get(i);\n        }\n        int[] arr29 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr29[i] = arr.get(i);\n        }\n        int[] arr30 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr30[i] = arr.get(i);\n        }\n        int[] arr31 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr31[i] = arr.get(i);\n        }\n        int[] arr32 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr32[i] = arr.get(i);\n        }\n        int[] arr33 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr33[i] = arr.get(i);\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        int n = arr.size();\n        int[] dp = new int[n];\n        dp[0] = 1;\n        for(int i = 1; i < n; i++) {\n            dp[i] = dp[i-1] + dp[i-2];\n        }\n        int ans = 0;\n        for(int i = 0; i < n; i++) {\n            if(dp[i] == 1) {\n                ans++;\n            }\n        }\n        return ans == 1;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        int n = arr.size();\n        int[] dx = {0, 0, 1, -1};\n        int[] dy = {1, -1, 0, 0};\n        int[] dp = new int[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = arr.get(i);\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        int n = arr.size();\n        int i = 0;\n        int j = n - 1;\n        while (i < j) {\n            if (arr.get(i) > arr.get(j)) {\n                int temp = arr.get(i);\n                arr.set(i, arr.get(j));\n                arr.set(j, temp);\n                i++;\n                j--;\n            }\n            else {\n                j--;\n            }\n        }\n        return i == j;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        int n = arr.size();\n        int[] arr1 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr1[i] = arr.get(i);\n        }\n        int[] arr2 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr2[i] = arr.get(i);\n        }\n        int[] arr3 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr3[i] = arr.get(i);\n        }\n        int[] arr4 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr4[i] = arr.get(i);\n        }\n        int[] arr5 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr5[i] = arr.get(i);\n        }\n        int[] arr6 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr6[i] = arr.get(i);\n        }\n        int[] arr7 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr7[i] = arr.get(i);\n        }\n        int[] arr8 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr8[i] = arr.get(i);\n        }\n        int[] arr9 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr9[i] = arr.get(i);\n        }\n        int[] arr10 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr10[i] = arr.get(i);\n        }\n        int[] arr11 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr11[i] = arr.get(i);\n        }\n        int[] arr12 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr12[i] = arr.get(i);\n        }\n        int[] arr13 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr13[i] = arr.get(i);\n        }\n        int[] arr14 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr14[i] = arr.get(i);\n        }\n        int[] arr15 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr15[i] = arr.get(i);\n        }\n        int[] arr16 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr16[i] = arr.get(i);\n        }\n        int[] arr17 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr17[i] = arr.get(i);\n        }\n        int[] arr18 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr18[i] = arr.get(i);\n        }\n        int[] arr19 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr19[i] = arr.get(i);\n        }\n        int[] arr20 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr20[i] = arr.get(i);\n        }\n        int[] arr21 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr21[i] = arr.get(i);\n        }\n        int[] arr22 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr22[i] = arr.get(i);\n        }\n        int[] arr23 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr23[i] = arr.get(i);\n        }\n        int[] arr24 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr24[i] = arr.get(i);\n        }\n        int[] arr25 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr25[i] = arr.get(i);\n        }\n        int[] arr26 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr26[i] = arr.get(i);\n        }\n        int[] arr27 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr27[i] = arr.get(i);\n        }\n        int[] arr28 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr28[i] = arr.get(i);\n        }\n        int[] arr29 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr29[i] = arr.get(i);\n        }\n        int[] arr30 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr30[i] = arr.get(i);\n        }\n        int[] arr31 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr31[i] = arr.get(i);\n        }\n        int[] arr32 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr32[i] = arr.get(i);\n        }\n        int[] arr33 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr33[i] = arr.get(i);\n        }\n        int[] arr34 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr34[i] = arr.get(i);\n        }\n        int[] arr35 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr35[i] = arr.get(i);\n        }\n        int[] arr36 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr36[i] = arr.get(i);\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        int len = arr.size();\n        if (len < 3) {\n            return false;\n        }\n        int min = Integer.MAX_VALUE;\n        int minIndex = -1;\n        for (int i = 0; i < len; i++) {\n            for (int j = i + 1; j < len; j++) {\n                for (int k = j + 1; k < len; k++) {\n                    int sum = arr.get(i) + arr.get(j) + arr.get(k);\n                    if (sum < min) {\n                        min = sum;\n                        minIndex = i;\n                        j = len;\n                        k = len;\n                    }\n                }\n            }\n        }\n        if (minIndex == -1) {\n            return false;\n        }\n        int[] arr1 = new int[len];\n        int[] arr2 = new int[len];\n        int[] arr3 = new int[len];\n        for (int i = 0; i < len; i++) {\n            arr1[i] = arr.get(i);\n        }\n        for (int i = 0; i < len; i++) {\n            arr2[i] = arr.get(i);\n        }\n        for (int i = 0; i < len; i++) {\n            arr3[i] = arr.get(i);\n        }\n        arr1[minIndex] = -1;\n        arr2[minIndex] = -1;\n        arr3[minIndex] = -1;\n        int minDistance = Integer.MAX_VALUE;\n        for (int i = 0; i < len; i++) {\n            for (int j = 0; j < len; j++) {\n                for (int k = 0; k < len; k++) {\n                    int distance = Math.abs(arr1[i] - arr2[j]) + Math.abs(arr1[i] - arr3[k]) + Math.abs(arr2[j] - arr3[k]);\n                    if (distance < minDistance) {\n                        minDistance = distance;\n                    }\n                }\n            }\n        }\n        return minDistance == Integer.MAX_VALUE;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        int n = arr.size();\n        int[] arr1 = new int[n];\n        for(int i=0;i<n;i++)\n            arr1[i] = arr.get(i);\n        int[] arr2 = new int[n];\n        for(int i=0;i<n;i++)\n            arr2[i] = arr.get(n-1-i);\n        int[] arr3 = new int[n];\n        for(int i=0;i<n;i++)\n            arr3[i] = arr.get(i);\n        int[] arr4 = new int[n];\n        for(int i=0;i<n;i++)\n            arr4[i] = arr.get(n-1-i);\n        int[] arr5 = new int[n];\n        for(int i=0;i<n;i++)\n            arr5[i] = arr.get(i);\n        int[] arr6 = new int[n];\n        for(int i=0;i<n;i++)\n            arr6[i] = arr.get(n-1-i);\n        int[] arr7 = new int[n];\n        for(int i=0;i<n;i++)\n            arr7[i] = arr.get(i);\n        int[] arr8 = new int[n];\n        for(int i=0;i<n;i++)\n            arr8[i] = arr.get(n-1-i);\n        int[] arr9 = new int[n];\n        for(int i=0;i<n;i++)\n            arr9[i] = arr.get(i);\n        int[] arr10 = new int[n];\n        for(int i=0;i<n;i++)\n            arr10[i] = arr.get(n-1-i);\n        int[] arr11 = new int[n];\n        for(int i=0;i<n;i++)\n            arr11[i] = arr.get(i);\n        int[] arr12 = new int[n];\n        for(int i=0;i<n;i++)\n            arr12[i] = arr.get(n-1-i);\n        int[] arr13 = new int[n];\n        for(int i=0;i<n;i++)\n            arr13[i] = arr.get(i);\n        int[] arr14 = new int[n];\n        for(int i=0;i<n;i++)\n            arr14[i] = arr.get(n-1-i);\n        int[] arr15 = new int[n];\n        for(int i=0;i<n;i++)\n            arr15[i] = arr.get(i);\n        int[] arr16 = new int[n];\n        for(int i=0;i<n;i++)\n            arr16[i] = arr.get(n-1-i);\n        int[] arr17 = new int[n];\n        for(int i=0;i<n;i++)\n            arr17[i] = arr.get(i);\n        int[] arr18 = new int[n];\n        for(int i=0;i<n;i++)\n            arr18[i] = arr.get(n-1-i);\n        int[] arr19 = new int[n];\n        for(int i=0;i<n;i++)\n            arr19[i] = arr.get(i);\n        int[] arr20 = new int[n];\n        for(int i=0;i<n;i++)\n            arr20[i] = arr.get(n-1-i);\n        int[] arr21 = new int[n];\n        for(int i=0;i<n;i++)\n            arr21[i] = arr.get(i);\n        int[] arr22 = new int[n];\n        for(int i=0;i<n;i++)\n            arr22[i] = arr.get(n-1-i);\n        int[] arr23 = new int[n];\n        for(int i=0;i<n;i++)\n            arr23[i] = arr.get(i);\n        int[] arr24 = new int[n];\n        for(int i=0;i<n;i++)\n            arr24[i] = arr.get(n-1-i);\n        int[] arr25 = new int[n];\n        for(int i=0;i<n;i++)\n            arr25[i] = arr.get(i);\n        int[] arr26 = new int[n];\n        for(int i=0;i<n;i++)\n            arr26[i] = arr.get(n-1-i);\n        int[] arr27 = new int[n];\n        for(int i=0;i<n;i++)\n            arr27[i] = arr.get(i);\n        int[] arr28 = new int[n];\n        for(int i=0;i<n;i++)\n            arr28[i] = arr.get(n-1-i);\n        int[] arr29 = new int[n];\n        for(int i=0;i<n;i++)\n            arr29[i] = arr.get(i);\n        int[] arr30 = new int[n];\n        for(int i=0;i<n;i++)\n            arr30[i] = arr.get(n-1-i);\n        int[] arr31 = new int[n];\n        for(int i=0;i<n;i++)\n            arr31[i] = arr.get(i);\n        int[] arr32 = new int[n];\n        for(int i=0;i<n;i++)\n            arr32[i] = arr.get(n-1-i);\n        int[] arr33 = new int[n];\n        for(int i=0;i<n;i++)\n            arr33[i] = arr.get(i);\n        int[] arr34 = new int[n];\n        for(int i=0;i<n;i++)\n            arr34[i] = arr.get(n-1-i);\n        int[] arr35 = new int[n];\n        for(int i=0;i<n;i++)\n            arr35[i] = arr.get(i);\n        int[] arr36 = new int[n];\n        for(int i=0;i<n;i++)\n            arr36[i] = arr.get(n-1-i);\n        int[] arr37 = new int[n];\n        for(int i=0;i<n;i++)\n            arr37[i] = arr.get(i);\n        int[] arr38 = new int[n];\n        for(int i=0;i<n;i++)\n            arr38[i] = arr.get(n-1-i);\n        int[] arr39 = new int[n];\n        for(int i=0;i<n;i++)\n            arr39[i] = arr.get(i);\n        int[] arr40 = new int[n];\n        for(int i=0;i<n;i++)\n            arr40[i] = arr.get(n-1-i);\n        int[] arr41 = new int[n];\n        for(int i=0;i<n;i++)\n            arr41[i] = arr.get(i);\n        int[] arr42 = new int[n];\n        for(int i=0;i<n;i++)\n            arr42[i] = arr.get(n-1-i);\n        int[] arr43 = new int[n];\n        for(int i=0;"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        int n = arr.size();\n        int[] arr1 = new int[n];\n        int[] arr2 = new int[n];\n        int[] arr3 = new int[n];\n        int[] arr4 = new int[n];\n        int[] arr5 = new int[n];\n        int[] arr6 = new int[n];\n        int[] arr7 = new int[n];\n        int[] arr8 = new int[n];\n        int[] arr9 = new int[n];\n        int[] arr10 = new int[n];\n        int[] arr11 = new int[n];\n        int[] arr12 = new int[n];\n        int[] arr13 = new int[n];\n        int[] arr14 = new int[n];\n        int[] arr15 = new int[n];\n        int[] arr16 = new int[n];\n        int[] arr17 = new int[n];\n        int[] arr18 = new int[n];\n        int[] arr19 = new int[n];\n        int[] arr20 = new int[n];\n        int[] arr21 = new int[n];\n        int[] arr22 = new int[n];\n        int[] arr23 = new int[n];\n        int[] arr24 = new int[n];\n        int[] arr25 = new int[n];\n        int[] arr26 = new int[n];\n        int[] arr27 = new int[n];\n        int[] arr28 = new int[n];\n        int[] arr29 = new int[n];\n        int[] arr30 = new int[n];\n        int[] arr31 = new int[n];\n        int[] arr32 = new int[n];\n        int[] arr33 = new int[n];\n        int[] arr34 = new int[n];\n        int[] arr35 = new int[n];\n        int[] arr36 = new int[n];\n        int[] arr37 = new int[n];\n        int[] arr38 = new int[n];\n        int[] arr39 = new int[n];\n        int[] arr40 = new int[n];\n        int[] arr41 = new int[n];\n        int[] arr42 = new int[n];\n        int[] arr43 = new int[n];\n        int[] arr44 = new int[n];\n        int[] arr45 = new int[n];\n        int[] arr46 = new int[n];\n        int[] arr47 = new int[n];\n        int[] arr48 = new int[n];\n        int[] arr49 = new int[n];\n        int[] arr50 = new int[n];\n        int[] arr51 = new int[n];\n        int[] arr52 = new int[n];\n        int[] arr53 = new int[n];\n        int[] arr54 = new int[n];\n        int[] arr55 = new int[n];\n        int[] arr56 = new int[n];\n        int[] arr57 = new int[n];\n        int[] arr58 = new int[n];\n        int[] arr59 = new int[n];\n        int[] arr60 = new int[n];\n        int[] arr61 = new int[n];\n        int[] arr62 = new int[n];\n        int[] arr63 = new int[n];\n        int[] arr64 = new int[n];\n        int[] arr65 = new int[n];\n        int[] arr66 = new int[n];\n        int[] arr67 = new int[n];\n        int[] arr68 = new int[n];\n        int[] arr69 = new int[n];\n        int[] arr70 = new int[n];\n        int[] arr71 = new int[n];\n        int[] arr72 = new int[n];\n        int[] arr73 = new int[n];\n        int[] arr74 = new int[n];\n        int[] arr75 = new int[n];\n        int[] arr76 = new int[n];\n        int[] arr77 = new int[n];\n        int[] arr78 = new int[n];\n        int[] arr79 = new int[n];\n        int[] arr80 = new int[n];\n        int[] arr81 = new int[n];\n        int[] arr82 = new int[n];\n        int[] arr83 = new int[n];\n        int[] arr84 = new int[n];\n        int[] arr85 = new int[n];\n        int[] arr86 = new int[n];\n        int[] arr87 = new int[n];\n        int[] arr88 = new int[n];\n        int[] arr89 = new int[n];\n        int[] arr90 = new int[n];\n        int[] arr91 = new int[n];\n        int[] arr92 = new int[n];\n        int[] arr93 = new int[n];\n        int[] arr94 = new int[n];\n        int[] arr95 = new int[n];\n        int[] arr96 = new int[n];\n        int[] arr97 = new int[n];\n        int[] arr98 = new int[n];\n        int[] arr99 = new int[n];\n        int[] arr100 = new int[n];\n        int[] arr101 = new int[n];\n        int[] arr102 = new int[n];\n        int[] arr103 = new int[n];\n        int[] arr104 = new"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        int n = arr.size();\n        int[] arr1 = new int[n];\n        int[] arr2 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr1[i] = arr.get(i);\n            arr2[i] = arr.get(n - i - 1);\n        }\n        int[] arr3 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr3[i] = arr1[i] + arr2[i];\n        }\n        int[] arr4 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr4[i] = arr3[i] - arr1[i];\n        }\n        int[] arr5 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr5[i] = arr4[i] + arr2[i];\n        }\n        int[] arr6 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr6[i] = arr5[i] - arr4[i];\n        }\n        int[] arr7 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr7[i] = arr6[i] + arr1[i];\n        }\n        int[] arr8 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr8[i] = arr7[i] - arr6[i];\n        }\n        int[] arr9 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr9[i] = arr8[i] + arr2[i];\n        }\n        int[] arr10 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr10[i] = arr9[i] - arr8[i];\n        }\n        int[] arr11 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr11[i] = arr10[i] + arr1[i];\n        }\n        int[] arr12 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr12[i] = arr11[i] - arr10[i];\n        }\n        int[] arr13 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr13[i] = arr12[i] + arr3[i];\n        }\n        int[] arr14 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr14[i] = arr13[i] - arr12[i];\n        }\n        int[] arr15 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr15[i] = arr14[i] + arr1[i];\n        }\n        int[] arr16 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr16[i] = arr15[i] - arr14[i];\n        }\n        int[] arr17 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr17[i] = arr16[i] + arr2[i];\n        }\n        int[] arr18 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr18[i] = arr17[i] - arr16[i];\n        }\n        int[] arr19 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr19[i] = arr18[i] + arr3[i];\n        }\n        int[] arr20 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr20[i] = arr19[i] - arr18[i];\n        }\n        int[] arr21 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr21[i] = arr20[i] + arr1[i];\n        }\n        int[] arr22 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr22[i] = arr21[i] - arr20[i];\n        }\n        int[] arr23 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr23[i] = arr22[i] + arr4[i];\n        }\n        int[] arr24 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr24[i] = arr23[i] - arr22[i];\n        }\n        int[] arr25 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr25[i] = arr24[i] + arr1[i];\n        }\n        int[] arr26 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr26[i] = arr25[i] - arr24[i];\n        }\n        int[] arr27 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr27[i] = arr26[i] + arr2[i];\n        }\n        int[] arr28 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr28[i] = arr27[i] - arr26[i];\n        }\n        int[] arr29 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr29[i] = arr28[i] + arr3[i];\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        int n = arr.size();\n        int[] arr1 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr1[i] = arr.get(i);\n        }\n        int[] arr2 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr2[i] = arr.get(i);\n        }\n        int[] arr3 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr3[i] = arr.get(i);\n        }\n        int[] arr4 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr4[i] = arr.get(i);\n        }\n        int[] arr5 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr5[i] = arr.get(i);\n        }\n        int[] arr6 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr6[i] = arr.get(i);\n        }\n        int[] arr7 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr7[i] = arr.get(i);\n        }\n        int[] arr8 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr8[i] = arr.get(i);\n        }\n        int[] arr9 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr9[i] = arr.get(i);\n        }\n        int[] arr10 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr10[i] = arr.get(i);\n        }\n        int[] arr11 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr11[i] = arr.get(i);\n        }\n        int[] arr12 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr12[i] = arr.get(i);\n        }\n        int[] arr13 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr13[i] = arr.get(i);\n        }\n        int[] arr14 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr14[i] = arr.get(i);\n        }\n        int[] arr15 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr15[i] = arr.get(i);\n        }\n        int[] arr16 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr16[i] = arr.get(i);\n        }\n        int[] arr17 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr17[i] = arr.get(i);\n        }\n        int[] arr18 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr18[i] = arr.get(i);\n        }\n        int[] arr19 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr19[i] = arr.get(i);\n        }\n        int[] arr20 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr20[i] = arr.get(i);\n        }\n        int[] arr21 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr21[i] = arr.get(i);\n        }\n        int[] arr22 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr22[i] = arr.get(i);\n        }\n        int[] arr23 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr23[i] = arr.get(i);\n        }\n        int[] arr24 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr24[i] = arr.get(i);\n        }\n        int[] arr25 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr25[i] = arr.get(i);\n        }\n        int[] arr26 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr26[i] = arr.get(i);\n        }\n        int[] arr27 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr27[i] = arr.get(i);\n        }\n        int[] arr28 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr28[i] = arr.get(i);\n        }\n        int[] arr29 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr29[i] = arr.get(i);\n        }\n        int[] arr30 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr30[i] = arr.get(i);\n        }\n        int[] arr31 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr31[i] = arr.get(i);\n        }\n        int[] arr32 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr32[i] = arr.get(i);\n        }\n        int[] arr33 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr33[i] = arr.get(i);\n        }\n        int[] arr34 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr34[i] = arr.get(i);\n        }\n        int[] arr35 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr35[i] = arr.get(i);\n        }\n        int[] arr36 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr36[i] = arr.get(i);\n        }\n        int[] arr37 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr37[i] = arr.get(i);\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        int n = arr.size();\n        int[] arr2 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr2[i] = arr.get(i);\n        }\n        int[] arr3 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr3[i] = arr2[i];\n        }\n        int[] arr4 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr4[i] = arr3[i];\n        }\n        int[] arr5 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr5[i] = arr4[i];\n        }\n        int[] arr6 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr6[i] = arr5[i];\n        }\n        int[] arr7 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr7[i] = arr6[i];\n        }\n        int[] arr8 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr8[i] = arr7[i];\n        }\n        int[] arr9 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr9[i] = arr8[i];\n        }\n        int[] arr10 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr10[i] = arr9[i];\n        }\n        int[] arr11 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr11[i] = arr10[i];\n        }\n        int[] arr12 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr12[i] = arr11[i];\n        }\n        int[] arr13 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr13[i] = arr12[i];\n        }\n        int[] arr14 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr14[i] = arr13[i];\n        }\n        int[] arr15 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr15[i] = arr14[i];\n        }\n        int[] arr16 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr16[i] = arr15[i];\n        }\n        int[] arr17 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr17[i] = arr16[i];\n        }\n        int[] arr18 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr18[i] = arr17[i];\n        }\n        int[] arr19 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr19[i] = arr18[i];\n        }\n        int[] arr20 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr20[i] = arr19[i];\n        }\n        int[] arr21 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr21[i] = arr20[i];\n        }\n        int[] arr22 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr22[i] = arr21[i];\n        }\n        int[] arr23 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr23[i] = arr22[i];\n        }\n        int[] arr24 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr24[i] = arr23[i];\n        }\n        int[] arr25 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr25[i] = arr24[i];\n        }\n        int[] arr26 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr26[i] = arr25[i];\n        }\n        int[] arr27 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr27[i] = arr26[i];\n        }\n        int[] arr28 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr28[i] = arr27[i];\n        }\n        int[] arr29 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr29[i] = arr28[i];\n        }\n        int[] arr30 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr30[i] = arr29[i];\n        }\n        int[] arr31 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr31[i] = arr30[i];\n        }\n        int[] arr32 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr32[i] = arr31[i];\n        }\n        int[] arr33 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr33[i] = arr32[i];\n        }\n        int[] arr34 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr34[i] = arr33[i];\n        }\n        int[] arr35 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr35[i] = arr34[i];\n        }\n        int[] arr36 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr36[i] = arr35[i];\n        }\n        int[] arr37 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr37[i] = arr36[i];\n        }\n        int[] arr38 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr38[i] = arr37[i];\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        int n = arr.size();\n        int i = 0;\n        int j = n - 1;\n        while (i < j) {\n            if (arr.get(i) == arr.get(j)) {\n                arr.remove(i);\n                arr.remove(j);\n                i--;\n                j--;\n            } else if (arr.get(i) > arr.get(j)) {\n                i++;\n            } else {\n                j--;\n            }\n        }\n        return arr.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        int n = arr.size();\n        int[] dx = {0, 0, 1, -1};\n        int[] dy = {1, -1, 0, 0};\n        int x = 0, y = 0;\n        for (int i = 0; i < n; i++) {\n            x += dx[arr.get(i)];\n            y += dy[arr.get(i)];\n        }\n        return x == 0 && y == 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        int n = arr.size();\n        int[] arr1 = new int[n];\n        for(int i=0;i<n;i++){\n            arr1[i] = arr.get(i);\n        }\n        int[] arr2 = new int[n];\n        for(int i=0;i<n;i++){\n            arr2[i] = arr.get(i);\n        }\n        int[] arr3 = new int[n];\n        for(int i=0;i<n;i++){\n            arr3[i] = arr.get(i);\n        }\n        int[] arr4 = new int[n];\n        for(int i=0;i<n;i++){\n            arr4[i] = arr.get(i);\n        }\n        int[] arr5 = new int[n];\n        for(int i=0;i<n;i++){\n            arr5[i] = arr.get(i);\n        }\n        int[] arr6 = new int[n];\n        for(int i=0;i<n;i++){\n            arr6[i] = arr.get(i);\n        }\n        int[] arr7 = new int[n];\n        for(int i=0;i<n;i++){\n            arr7[i] = arr.get(i);\n        }\n        int[] arr8 = new int[n];\n        for(int i=0;i<n;i++){\n            arr8[i] = arr.get(i);\n        }\n        int[] arr9 = new int[n];\n        for(int i=0;i<n;i++){\n            arr9[i] = arr.get(i);\n        }\n        int[] arr10 = new int[n];\n        for(int i=0;i<n;i++){\n            arr10[i] = arr.get(i);\n        }\n        int[] arr11 = new int[n];\n        for(int i=0;i<n;i++){\n            arr11[i] = arr.get(i);\n        }\n        int[] arr12 = new int[n];\n        for(int i=0;i<n;i++){\n            arr12[i] = arr.get(i);\n        }\n        int[] arr13 = new int[n];\n        for(int i=0;i<n;i++){\n            arr13[i] = arr.get(i);\n        }\n        int[] arr14 = new int[n];\n        for(int i=0;i<n;i++){\n            arr14[i] = arr.get(i);\n        }\n        int[] arr15 = new int[n];\n        for(int i=0;i<n;i++){\n            arr15[i] = arr.get(i);\n        }\n        int[] arr16 = new int[n];\n        for(int i=0;i<n;i++){\n            arr16[i] = arr.get(i);\n        }\n        int[] arr17 = new int[n];\n        for(int i=0;i<n;i++){\n            arr17[i] = arr.get(i);\n        }\n        int[] arr18 = new int[n];\n        for(int i=0;i<n;i++){\n            arr18[i] = arr.get(i);\n        }\n        int[] arr19 = new int[n];\n        for(int i=0;i<n;i++){\n            arr19[i] = arr.get(i);\n        }\n        int[] arr20 = new int[n];\n        for(int i=0;i<n;i++){\n            arr20[i] = arr.get(i);\n        }\n        int[] arr21 = new int[n];\n        for(int i=0;i<n;i++){\n            arr21[i] = arr.get(i);\n        }\n        int[] arr22 = new int[n];\n        for(int i=0;i<n;i++){\n            arr22[i] = arr.get(i);\n        }\n        int[] arr23 = new int[n];\n        for(int i=0;i<n;i++){\n            arr23[i] = arr.get(i);\n        }\n        int[] arr24 = new int[n];\n        for(int i=0;i<n;i++){\n            arr24[i] = arr.get(i);\n        }\n        int[] arr25 = new int[n];\n        for(int i=0;i<n;i++){\n            arr25[i] = arr.get(i);\n        }\n        int[] arr26 = new int[n];\n        for(int i=0;i<n;i++){\n            arr26[i] = arr.get(i);\n        }\n        int[] arr27 = new int[n];\n        for(int i=0;i<n;i++){\n            arr27[i] = arr.get(i);\n        }\n        int[] arr28 = new int[n];\n        for(int i=0;i<n;i++){\n            arr28[i] = arr.get(i);\n        }\n        int[] arr29 = new int[n];\n        for(int i=0;i<n;i++){\n            arr29[i] = arr.get(i);\n        }\n        int[] arr30 = new int[n];\n        for(int i=0;i<n;i++){\n            arr30[i] = arr.get(i);\n        }\n        int[] arr31 = new int[n];\n        for(int i=0;i<n;i++){\n            arr31[i] = arr.get(i);\n        }\n        int[] arr32 = new int[n];\n        for(int i=0;i<n;i++){\n            arr32[i] = arr.get(i);\n        }\n        int[] arr33 = new int[n];\n        for(int i=0;i<n;i++){\n            arr33[i] = arr.get(i);\n        }\n        int[] arr34 = new int[n];\n        for(int i=0;i<n;i++){\n            arr34[i] = arr.get(i);\n        }\n        int[] arr35 = new int[n];\n        for(int i=0;i<n;i++){\n            arr35[i] = arr.get(i);\n        }\n        int[] arr36 = new int[n];\n        for(int i=0;i<n;i++){\n            arr36[i] = arr.get(i);\n        }\n        int[] arr37 = new int[n];\n        for(int i=0;i<n;i++){\n            arr37[i] = arr.get(i);\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        int min = arr.get(0);\n        int minIndex = 0;\n        for(int i = 1; i < arr.size(); i++) {\n            if(arr.get(i) < min) {\n                min = arr.get(i);\n                minIndex = i;\n            }\n        }\n        if(minIndex == 0) {\n            return false;\n        }\n        arr.set(0, arr.get(minIndex));\n        arr.set(minIndex, min);\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        int n = arr.size();\n        int[] arr1 = new int[n];\n        int[] arr2 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr1[i] = arr.get(i);\n        }\n        for(int i = 0; i < n; i++) {\n            arr2[i] = arr.get(n-1-i);\n        }\n        int[] arr3 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr3[i] = arr1[i] + arr2[i];\n        }\n        for(int i = 0; i < n; i++) {\n            if(arr3[i] != arr.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        int n = arr.size();\n        int[] arr1 = new int[n];\n        int[] arr2 = new int[n];\n        for(int i=0;i<n;i++)\n        {\n            arr1[i] = arr.get(i);\n            arr2[i] = arr.get(i);\n        }\n        int i = 0;\n        int j = 0;\n        while(i<n)\n        {\n            if(arr1[i]==arr2[i])\n            {\n                arr1[i] = arr1[i] + 1;\n                arr2[i] = arr2[i] + 1;\n                i++;\n                j++;\n            }\n            else\n            {\n                if(arr1[i] == arr2[i])\n                {\n                    arr1[i] = arr1[i] + 1;\n                    arr2[i] = arr2[i] + 1;\n                    i++;\n                }\n                else\n                {\n                    if(arr1[i] == arr2[i])\n                    {\n                        arr1[i] = arr1[i] + 1;\n                        arr2[i] = arr2[i] + 1;\n                        i++;\n                    }\n                    else\n                    {\n                        if(arr1[i] == arr2[i])\n                        {\n                            arr1[i] = arr1[i] + 1;\n                            arr2[i] = arr2[i] + 1;\n                            i++;\n                        }\n                        else\n                        {\n                            if(arr1[i] == arr2[i])\n                            {\n                                arr1[i] = arr1[i] + 1;\n                                arr2[i] = arr2[i] + 1;\n                                i++;\n                            }\n                            else\n                            {\n                                if(arr1[i] == arr2[i])\n                                {\n                                    arr1[i] = arr1[i] + 1;\n                                    arr2[i] = arr2[i] + 1;\n                                    i++;\n                                }\n                                else\n                                {\n                                    if(arr1[i] == arr2[i])\n                                    {\n                                        arr1[i] = arr1[i] + 1;\n                                        arr2[i] = arr2[i] + 1;\n                                        i++;\n                                    }\n                                    else\n                                    {\n                                        if(arr1[i] == arr2[i])\n                                        {\n                                            arr1[i] = arr1[i] + 1;\n                                            arr2[i] = arr2[i] + 1;\n                                            i++;\n                                        }\n                                        else\n                                        {\n                                            if(arr1[i] == arr2[i])\n                                            {\n                                                arr1[i] = arr1[i] + 1;\n                                                arr2[i] = arr2[i] + 1;\n                                                i++;\n                                            }\n                                            else\n                                            {\n                                                if(arr1[i] == arr2[i])\n                                                {\n                                                    arr1[i] = arr1[i] + 1;\n                                                    arr2[i] = arr2[i] + 1;\n                                                    i++;\n                                                }\n                                                else\n                                                {\n                                                    if(arr1[i] == arr2[i])\n                                                    {\n                                                        arr1[i] = arr1[i] + 1;\n                                                        arr2[i] = arr2[i] + 1;\n                                                        i++;\n                                                    }\n                                                    else\n                                                    {\n                                                        if(arr1[i] == arr2[i])\n                                                        {\n                                                            arr1[i] = arr1[i] + 1;\n                                                            arr2[i] = arr2[i] + 1;\n                                                            i++;\n                                                        }\n                                                        else\n                                                        {\n                                                            if(arr1[i] == arr2[i])\n                                                            {\n                                                                arr1[i] = arr1[i] + 1;\n                                                                arr2[i] = arr2[i] + 1;\n                                                                i++;\n                                                            }\n                                                            else\n                                                            {\n                                                                if(arr1[i] == arr2[i])\n                                                                {\n                                                                    arr1[i] = arr1[i] + 1;\n                                                                    arr2[i] = arr2[i] + 1;\n                                                                    i++;\n                                                                }\n                                                                else\n                                                                {\n                                                                    if(arr1[i] == arr2[i])\n                                                                    {\n                                                                        arr1[i] = arr1[i] + 1;\n                                                                        arr2[i] = arr2[i] + 1;\n                                                                        i++;\n                                                                    }\n                                                                    else\n                                                                    {\n                                                                        if(arr1[i] == arr2[i])\n                                                                        {\n                                                                            arr1[i] = arr1[i] + 1;\n                                                                            arr2[i] = arr2[i] + 1;\n                                                                            i++;\n                                                                        }\n                                                                        else\n                                                                        {\n                                                                            if(arr1[i] == arr2[i])\n                                                                            {\n                                                                                arr1[i] = arr1[i] + 1;\n                                                                                arr2[i] = arr2[i] + 1;\n                                                                                i++;\n                                                                            }\n                                                                            else\n                                                                            {\n                                                                                if(arr1[i] == arr2[i])\n                                                                                {\n                                                                                    arr1[i] = arr1[i] + 1;\n                                                                                    arr2[i] = arr2[i] + 1;\n                                                                                    i++;\n                                                                                }\n                                                                                else\n                                                                                {\n                                                                                    if(arr1[i] == arr2[i])\n                                                                                    {\n                                                                                        arr1[i] = arr1[i] + 1;\n                                                                                        arr2[i] = arr2[i] + 1;\n                                                                                        i++;\n                                                                                    }\n                                                                                    else\n                                                                                    {\n                                                                                        if(arr1[i] == arr2[i])\n                                                                                        {\n                                                                                            arr1[i] = arr1[i] + 1;\n                                                                                            arr2[i] = arr2[i] + 1;\n                                                                                            i++;\n                                                                                        }\n                                                                                        else\n                                                                                        {\n                                                                                            if(arr1[i] == arr2[i])\n                                                                                            {\n                                                                                                arr1[i] = arr1[i] + 1;\n                                                                                                arr2[i] = arr2[i] + 1;\n                                                                                                i++;\n                                                                                            }\n                                                                                            else\n                                                                                            {\n                                                                                                if(arr1[i] == arr2[i])\n                                                                                                {\n                                                                                                    arr1[i] = arr1[i] + 1;\n                                                                                                    arr2[i] = arr2[i] + 1;\n                                                                                                    i++;\n                                                                                                }\n                                                                                                else\n                                                                                                {\n                                                                                                    if(arr1[i] == arr2[i])\n                                                                                                    {\n                                                                                                        arr1[i] = arr1[i] + 1;\n                                                                                                        arr2[i] = arr2[i] + 1;\n                                                                                                        i++;\n                                                                                                    }\n                                                                                                    else\n                                                                                                    {\n                                                                                                        if(arr1[i] == arr2[i])\n                                                                                                        {\n                                                                                                            arr1[i] = arr1[i] + 1;\n                                                                                                            arr2[i] = arr2[i] + 1;\n                                                                                                            i++;\n                                                                                                        }\n                                                                                                        else\n                                                                                                        {\n                                                                                                            if(arr1[i] == arr2[i])\n                                                                                                            {\n                                                                                                                arr1[i] = arr1[i] + 1;\n                                                                                                                arr2[i] = arr2[i] + 1;\n                                                                                                                i++;\n                                                                                                            }\n                                                                                                            else\n                                                                                                            {\n                                                                                                                if(arr1[i] == arr2[i])\n                                                                                                                {\n                                                                                                                    arr1[i] = arr1[i] + 1;\n                                                                                                                    arr2[i] = arr2[i] + 1;\n                                                                                                                    i++;\n                                                                                                                }\n                                                                                                                else\n                                                                                                                {\n                                                                                                                    if(arr1[i] == arr2[i])\n                                                                                                                    {\n                                                                                                                        arr1[i] = arr1[i] + 1;\n                                                                                                                        arr2[i] = arr2[i] + 1;\n                                                                                                                        i++;\n                                                                                                                    }\n                                                                                                                    else\n                                                                                                                    {\n                                                                                                                        if(arr1[i] == arr2[i])\n                                                                                                                        {\n                                                                                                                            arr1[i] = arr1[i] + 1;\n                                                                                                                            arr2[i] = arr2[i] + 1;\n                                                                                                                            i++;\n                                                                                                                        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        int n = arr.size();\n        int[] arr1 = new int[n];\n        int[] arr2 = new int[n];\n        int[] arr3 = new int[n];\n        int[] arr4 = new int[n];\n        int[] arr5 = new int[n];\n        int[] arr6 = new int[n];\n        int[] arr7 = new int[n];\n        int[] arr8 = new int[n];\n        int[] arr9 = new int[n];\n        int[] arr10 = new int[n];\n        int[] arr11 = new int[n];\n        int[] arr12 = new int[n];\n        int[] arr13 = new int[n];\n        int[] arr14 = new int[n];\n        int[] arr15 = new int[n];\n        int[] arr16 = new int[n];\n        int[] arr17 = new int[n];\n        int[] arr18 = new int[n];\n        int[] arr19 = new int[n];\n        int[] arr20 = new int[n];\n        int[] arr21 = new int[n];\n        int[] arr22 = new int[n];\n        int[] arr23 = new int[n];\n        int[] arr24 = new int[n];\n        int[] arr25 = new int[n];\n        int[] arr26 = new int[n];\n        int[] arr27 = new int[n];\n        int[] arr28 = new int[n];\n        int[] arr29 = new int[n];\n        int[] arr30 = new int[n];\n        int[] arr31 = new int[n];\n        int[] arr32 = new int[n];\n        int[] arr33 = new int[n];\n        int[] arr34 = new int[n];\n        int[] arr35 = new int[n];\n        int[] arr36 = new int[n];\n        int[] arr37 = new int[n];\n        int[] arr38 = new int[n];\n        int[] arr39 = new int[n];\n        int[] arr40 = new int[n];\n        int[] arr41 = new int[n];\n        int[] arr42 = new int[n];\n        int[] arr43 = new int[n];\n        int[] arr44 = new int[n];\n        int[] arr45 = new int[n];\n        int[] arr46 = new int[n];\n        int[] arr47 = new int[n];\n        int[] arr48 = new int[n];\n        int[] arr49 = new int[n];\n        int[] arr50 = new int[n];\n        int[] arr51 = new int[n];\n        int[] arr52 = new int[n];\n        int[] arr53 = new int[n];\n        int[] arr54 = new int[n];\n        int[] arr55 = new int[n];\n        int[] arr56 = new int[n];\n        int[] arr57 = new int[n];\n        int[] arr58 = new int[n];\n        int[] arr59 = new int[n];\n        int[] arr60 = new int[n];\n        int[] arr61 = new int[n];\n        int[] arr62 = new int[n];\n        int[] arr63 = new int[n];\n        int[] arr64 = new int[n];\n        int[] arr65 = new int[n];\n        int[] arr66 = new int[n];\n        int[] arr67 = new int[n];\n        int[] arr68 = new int[n];\n        int[] arr69 = new int[n];\n        int[] arr70 = new int[n];\n        int[] arr71 = new int[n];\n        int[] arr72 = new int[n];\n        int[] arr73 = new int[n];\n        int[] arr74 = new int[n];\n        int[] arr75 = new int[n];\n        int[] arr76 = new int[n];\n        int[] arr77 = new int[n];\n        int[] arr78 = new int[n];\n        int[] arr79 = new int[n];\n        int[] arr80 = new int[n];\n        int[] arr81 = new int[n];\n        int[] arr82 = new int[n];\n        int[] arr83 = new int[n];\n        int[] arr84 = new int[n];\n        int[] arr85 = new int[n];\n        int[] arr86 = new int[n];\n        int[] arr87 = new int[n];\n        int[] arr88 = new int[n];\n        int[] arr89 = new int[n];\n        int[] arr90 = new int[n];\n        int[] arr91 = new int[n];\n        int[] arr92 = new int[n];\n        int[] arr93 = new int[n];\n        int[] arr94 = new int[n];\n        int[] arr95 = new int[n];\n        int[] arr96 = new int[n];\n        int[] arr97 = new int[n];\n        int[] arr98 = new int[n];\n        int[] arr99 = new int[n];\n        int[] arr100 = new int[n];\n        int[] arr101 = new int[n];\n        int[] arr102 = new int[n];\n        int[] arr103 = new int[n];\n        int[] arr104 = new int[n];\n        int[] arr105 = new int[n];\n        int[] arr106 = new int[n];\n        int[] arr107 = new int[n];\n        int[] arr108 = new int[n];\n        int[] arr109 = new int[n];\n        int[] arr110 = new int[n];\n        int[] arr111 = new int[n];\n        int[] arr112 = new int[n];\n        int[] arr113 = new int[n];\n        int[] arr114 = new int[n];\n        int[] arr115 = new int[n];\n        int[] arr116 = new"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        int n = arr.size();\n        int[] arr1 = new int[n];\n        int[] arr2 = new int[n];\n        int[] arr3 = new int[n];\n        int[] arr4 = new int[n];\n        int[] arr5 = new int[n];\n        int[] arr6 = new int[n];\n        int[] arr7 = new int[n];\n        int[] arr8 = new int[n];\n        int[] arr9 = new int[n];\n        int[] arr10 = new int[n];\n        int[] arr11 = new int[n];\n        int[] arr12 = new int[n];\n        int[] arr13 = new int[n];\n        int[] arr14 = new int[n];\n        int[] arr15 = new int[n];\n        int[] arr16 = new int[n];\n        int[] arr17 = new int[n];\n        int[] arr18 = new int[n];\n        int[] arr19 = new int[n];\n        int[] arr20 = new int[n];\n        int[] arr21 = new int[n];\n        int[] arr22 = new int[n];\n        int[] arr23 = new int[n];\n        int[] arr24 = new int[n];\n        int[] arr25 = new int[n];\n        int i = 0;\n        for (int j = 0; j < n; j++) {\n            arr1[j] = arr.get(j);\n        }\n        for (int j = 0; j < n; j++) {\n            arr2[j] = arr1[j];\n        }\n        for (int j = 0; j < n; j++) {\n            arr3[j] = arr2[j];\n        }\n        for (int j = 0; j < n; j++) {\n            arr4[j] = arr3[j];\n        }\n        for (int j = 0; j < n; j++) {\n            arr5[j] = arr4[j];\n        }\n        for (int j = 0; j < n; j++) {\n            arr6[j] = arr5[j];\n        }\n        for (int j = 0; j < n; j++) {\n            arr7[j] = arr6[j];\n        }\n        for (int j = 0; j < n; j++) {\n            arr8[j] = arr7[j];\n        }\n        for (int j = 0; j < n; j++) {\n            arr9[j] = arr8[j];\n        }\n        for (int j = 0; j < n; j++) {\n            arr10[j] = arr9[j];\n        }\n        for (int j = 0; j < n; j++) {\n            arr11[j] = arr10[j];\n        }\n        for (int j = 0; j < n; j++) {\n            arr12[j] = arr11[j];\n        }\n        for (int j = 0; j < n; j++) {\n            arr13[j] = arr12[j];\n        }\n        for (int j = 0; j < n; j++) {\n            arr14[j] = arr13[j];\n        }\n        for (int j = 0; j < n; j++) {\n            arr15[j] = arr14[j];\n        }\n        for (int j = 0; j < n; j++) {\n            arr16[j] = arr15[j];\n        }\n        for (int j = 0; j < n; j++) {\n            arr17[j] = arr16[j];\n        }\n        for (int j = 0; j < n; j++) {\n            arr18[j] = arr17[j];\n        }\n        for (int j = 0; j < n; j++) {\n            arr19[j] = arr18[j];\n        }\n        for (int j = 0; j < n; j++) {\n            arr20[j] = arr19[j];\n        }\n        for (int j = 0; j < n; j++) {\n            arr21[j] = arr20[j];\n        }\n        for (int j = 0; j < n; j++) {\n            arr22[j] = arr21[j];\n        }\n        for (int j = 0; j < n; j++) {\n            arr23[j] = arr22[j];\n        }\n        for (int j = 0; j < n; j++) {\n            arr24[j] = arr23[j];\n        }\n        for (int j = 0; j < n; j++) {\n            arr25[j] = arr24[j];\n        }\n        for (int j = 0; j < n; j++) {\n            if (arr1[j] == 1) {\n                arr1[j] = 0;\n            }\n        }\n        for (int j = 0; j < n; j++) {\n            if (arr2[j] == 1) {\n                arr2[j] = 0;\n            }\n        }\n        for (int j = 0; j < n; j++) {\n            if (arr3[j] == 1) {\n                arr3[j] = 0;\n            }\n        }\n        for (int j = 0; j < n; j++) {\n            if (arr4[j] == 1) {\n                arr4[j] = 0;\n            }\n        }\n        for (int j = 0; j < n; j++) {\n            if (arr5[j] == 1) {\n                arr5[j] = 0;\n            }\n        }\n        for (int j = 0; j < n; j++) {\n            if (arr6[j] == 1) {\n                arr6[j] = 0;\n            }\n        }\n        for (int j = 0; j < n; j++) {\n            if (arr7[j] == 1) {\n                arr7[j] = 0;\n            }\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        int n = arr.size();\n        int i = 0;\n        int j = n-1;\n        while(i<j){\n            if(arr.get(i)==arr.get(j)){\n                arr.set(i,arr.get(j));\n                arr.set(j,0);\n                j--;\n            }\n            else{\n                i++;\n            }\n        }\n        return arr.get(0)==0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int n = lst1.size();\n        int m = lst2.size();\n        int[] arr1 = new int[n];\n        int[] arr2 = new int[m];\n        for (int i = 0; i < n; i++) {\n            arr1[i] = lst1.get(i);\n        }\n        for (int i = 0; i < m; i++) {\n            arr2[i] = lst2.get(i);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n; i++) {\n            sb.append(arr1[i]);\n            sb.append(\" \");\n        }\n        for (int i = 0; i < m; i++) {\n            sb.append(arr2[i]);\n            sb.append(\" \");\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        String s1 = \"\";\n        String s2 = \"\";\n        for (int i = 0; i < lst1.size(); i++) {\n            s1 += lst1.get(i);\n            s2 += lst2.get(i);\n        }\n        return s1 + s2;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int n = lst1.size();\n        int[] arr1 = new int[n];\n        int[] arr2 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr1[i] = lst1.get(i);\n            arr2[i] = lst2.get(i);\n        }\n        int[] temp = arr1;\n        arr1 = arr2;\n        arr2 = temp;\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < n; i++) {\n            sb.append(arr1[i]).append(\" \");\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int n = lst1.size();\n        int m = lst2.size();\n        int[] arr1 = new int[n];\n        int[] arr2 = new int[m];\n        for(int i = 0; i < n; i++) {\n            arr1[i] = lst1.get(i);\n        }\n        for(int i = 0; i < m; i++) {\n            arr2[i] = lst2.get(i);\n        }\n        int[] arr3 = new int[n];\n        int[] arr4 = new int[m];\n        for(int i = 0; i < n; i++) {\n            arr3[i] = arr1[i];\n        }\n        for(int i = 0; i < m; i++) {\n            arr4[i] = arr2[i];\n        }\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int temp = 0;\n        while(i < n && j < m) {\n            if(arr3[i] > arr4[j]) {\n                temp = arr3[i];\n                arr3[i] = arr4[j];\n                arr4[j] = temp;\n                i++;\n            } else {\n                j++;\n            }\n        }\n        while(i < n) {\n            arr3[k] = arr3[i];\n            i++;\n            k++;\n        }\n        while(j < m) {\n            arr4[l] = arr4[j];\n            j++;\n            l++;\n        }\n        String str = \"\";\n        for(int i = 0; i < n; i++) {\n            str += arr3[i] + \" \";\n        }\n        return str;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int n = lst1.size();\n        int m = lst2.size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == j) {\n                    dp[i][j] = lst1.get(i);\n                } else {\n                    dp[i][j] = Math.max(dp[i][j - 1], dp[i - 1][j]);\n                }\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == j) {\n                    sb.append(lst2.get(j));\n                } else {\n                    sb.append(Math.max(dp[i][j], dp[i - 1][j]));\n                }\n            }\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int n = lst1.size();\n        int m = lst2.size();\n        int[] arr1 = new int[n];\n        int[] arr2 = new int[m];\n        for (int i = 0; i < n; i++) {\n            arr1[i] = lst1.get(i);\n        }\n        for (int i = 0; i < m; i++) {\n            arr2[i] = lst2.get(i);\n        }\n        int[] arr3 = new int[n];\n        int[] arr4 = new int[m];\n        for (int i = 0; i < n; i++) {\n            arr3[i] = arr1[i];\n        }\n        for (int i = 0; i < m; i++) {\n            arr4[i] = arr2[i];\n        }\n        for (int i = 0; i < n; i++) {\n            arr1[i] = arr3[i];\n        }\n        for (int i = 0; i < m; i++) {\n            arr2[i] = arr4[i];\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n; i++) {\n            sb.append(arr1[i]).append(\" \");\n        }\n        for (int i = 0; i < m; i++) {\n            sb.append(arr2[i]).append(\" \");\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < lst1.size(); i++) {\n            sb.append(lst1.get(i));\n            sb.append(lst2.get(i));\n        }\n        return sb.toString();\n    }\n\n    public String solve(char[][] board) {\n        if (board == null || board.length == 0) {\n            return \"\";\n        }\n        int m = board.length;\n        int n = board[0].length;\n        int[][] dp = new int[m][n];\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (board[i][j] == 'O') {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (board[i][j] == 'O') {\n                    if (i > 0 && j > 0 && board[i][j] == board[i - 1][j - 1]) {\n                        dp[i][j] += dp[i - 1][j] + dp[i][j - 1];\n                    }\n                    if (i > 0 && j < n - 1 && board[i][j] == board[i - 1][j + 1]) {\n                        dp[i][j] += dp[i - 1][j] + dp[i][j + 1];\n                    }\n                    if (i < m - 1 && j > 0 && board[i][j] == board[i + 1][j - 1]) {\n                        dp[i][j] += dp[i + 1][j] + dp[i][j - 1];\n                    }\n                    if (i < m - 1 && j < n - 1 && board[i][j] == board[i + 1][j + 1]) {\n                        dp[i][j] += dp[i + 1][j] + dp[i][j + 1];\n                    }\n                }\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (board[i][j] == 'O') {\n                    sb.append(dp[i][j]);\n                }\n            }\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        StringBuilder sb = new StringBuilder();\n        for (int i : lst1) {\n            sb.append(i).append(\",\");\n        }\n        for (int i : lst2) {\n            sb.append(i).append(\",\");\n        }\n        sb.deleteCharAt(sb.length() - 1);\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < lst1.size(); i++) {\n            sb.append(lst2.get(lst1.get(i) - 1));\n        }\n        return sb.toString();\n    }\n\n    public boolean isMatch(String s, String p) {\n        if (p.length() == 0) {\n            return s.length() == 0;\n        }\n        if (p.charAt(0) == '.') {\n            return s.charAt(0) == p.charAt(1);\n        }\n        if (p.charAt(p.length() - 1) == '*') {\n            return s.length() >= p.length() && isMatch(s.substring(0, s.length() - p.length() + 1), p.substring(0, p.length() - 2))\n                    || isMatch(s.substring(0, s.length() - p.length() + 1), p.substring(1));\n        }\n        return s.charAt(0) == p.charAt(0) && isMatch(s.substring(1), p.substring(1));\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.isMatch(\"mississippi\", \"mis*is*p*.\"));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int n = lst1.size();\n        int m = lst2.size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 || j == 0) {\n                    dp[i][j] = lst1.get(i);\n                } else {\n                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + lst1.get(i);\n                }\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < m; i++) {\n            sb.append(lst2.get(i));\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int n = lst1.size();\n        int[] arr1 = new int[n];\n        int[] arr2 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr1[i] = lst1.get(i);\n            arr2[i] = lst2.get(i);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n; i++) {\n            sb.append(arr1[i]).append(arr2[i]);\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int n = lst1.size();\n        int m = lst2.size();\n        if (n == 0 || m == 0) {\n            return \"\";\n        }\n        int[] arr1 = new int[n];\n        int[] arr2 = new int[m];\n        for (int i = 0; i < n; i++) {\n            arr1[i] = lst1.get(i);\n        }\n        for (int i = 0; i < m; i++) {\n            arr2[i] = lst2.get(i);\n        }\n        int[] arr3 = new int[n];\n        int[] arr4 = new int[m];\n        int i = 0;\n        int j = 0;\n        while (i < n && j < m) {\n            if (arr1[i] < arr2[j]) {\n                arr3[i] = arr1[i];\n                i++;\n            } else {\n                arr3[i] = arr2[j];\n                j++;\n            }\n        }\n        while (i < n) {\n            arr3[i] = arr1[i];\n            i++;\n        }\n        while (j < m) {\n            arr3[i] = arr2[j];\n            j++;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int k = 0; k < n; k++) {\n            sb.append(arr3[k]);\n            sb.append(\" \");\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int n = lst1.size();\n        int m = lst2.size();\n        int[] arr1 = new int[n];\n        int[] arr2 = new int[m];\n        for (int i = 0; i < n; i++) {\n            arr1[i] = lst1.get(i);\n        }\n        for (int i = 0; i < m; i++) {\n            arr2[i] = lst2.get(i);\n        }\n        int[] arr3 = new int[n];\n        int[] arr4 = new int[m];\n        for (int i = 0; i < n; i++) {\n            arr3[i] = arr1[i];\n        }\n        for (int i = 0; i < m; i++) {\n            arr4[i] = arr2[i];\n        }\n        int[] arr5 = new int[n];\n        int[] arr6 = new int[m];\n        for (int i = 0; i < n; i++) {\n            arr5[i] = arr3[i];\n        }\n        for (int i = 0; i < m; i++) {\n            arr6[i] = arr4[i];\n        }\n        int[] arr7 = new int[n];\n        int[] arr8 = new int[m];\n        for (int i = 0; i < n; i++) {\n            arr7[i] = arr5[i];\n        }\n        for (int i = 0; i < m; i++) {\n            arr8[i] = arr6[i];\n        }\n        int[] arr9 = new int[n];\n        int[] arr10 = new int[m];\n        for (int i = 0; i < n; i++) {\n            arr9[i] = arr7[i];\n        }\n        for (int i = 0; i < m; i++) {\n            arr10[i] = arr8[i];\n        }\n        int[] arr11 = new int[n];\n        int[] arr12 = new int[m];\n        for (int i = 0; i < n; i++) {\n            arr11[i] = arr9[i];\n        }\n        for (int i = 0; i < m; i++) {\n            arr12[i] = arr10[i];\n        }\n        int[] arr13 = new int[n];\n        int[] arr14 = new int[m];\n        for (int i = 0; i < n; i++) {\n            arr13[i] = arr11[i];\n        }\n        for (int i = 0; i < m; i++) {\n            arr14[i] = arr12[i];\n        }\n        int[] arr15 = new int[n];\n        int[] arr16 = new int[m];\n        for (int i = 0; i < n; i++) {\n            arr15[i] = arr13[i];\n        }\n        for (int i = 0; i < m; i++) {\n            arr16[i] = arr14[i];\n        }\n        int[] arr17 = new int[n];\n        int[] arr18 = new int[m];\n        for (int i = 0; i < n; i++) {\n            arr17[i] = arr15[i];\n        }\n        for (int i = 0; i < m; i++) {\n            arr18[i] = arr16[i];\n        }\n        int[] arr19 = new int[n];\n        int[] arr20 = new int[m];\n        for (int i = 0; i < n; i++) {\n            arr19[i] = arr17[i];\n        }\n        for (int i = 0; i < m; i++) {\n            arr20[i] = arr18[i];\n        }\n        int[] arr21 = new int[n];\n        int[] arr22 = new int[m];\n        for (int i = 0; i < n; i++) {\n            arr21[i] = arr19[i];\n        }\n        for (int i = 0; i < m; i++) {\n            arr22[i] = arr20[i];\n        }\n        int[] arr23 = new int[n];\n        int[] arr24 = new int[m];\n        for (int i = 0; i < n; i++) {\n            arr23[i] = arr21[i];\n        }\n        for (int i = 0; i < m; i++) {\n            arr24[i] = arr22[i];\n        }\n        int[] arr25 = new int[n];\n        int[] arr26 = new int[m];\n        for (int i = 0; i < n; i++) {\n            arr25[i] = arr23[i];\n        }\n        for (int i = 0; i < m; i++) {\n            arr26[i] = arr24[i];\n        }\n        int[] arr27 = new int[n];\n        int[] arr28 = new int[m];\n        for (int i = 0; i < n; i++) {\n            arr27[i] = arr25[i];\n        }\n        for (int i = 0; i < m; i++) {\n            arr28[i] = arr26[i];\n        }\n        int[] arr29 = new int[n];\n        int[] arr30 = new int[m];\n        for (int i = 0; i < n; i++) {\n            arr29[i] = arr27[i];\n        }\n        for (int i = 0; i < m; i++) {\n            arr30[i] = arr28[i];\n        }\n        int[] arr31 = new int[n];\n        int[] arr32 = new int[m];\n        for (int i = 0; i < n; i++) {\n            arr31[i] = arr29[i];\n        }\n        for (int i = 0; i < m; i++) {\n            arr32[i] = arr30[i];\n        }\n        int[] arr33 = new int[n];\n        int[] arr34 = new int[m];\n        for (int i = 0; i < n; i++) {\n            arr33[i] = arr31[i];\n        }\n        for (int i = 0; i < m; i++) {\n            arr34[i] = arr32[i];\n        }\n        int[] arr35 = new int[n];\n        int[] arr36 = new int[m];\n        for (int i = 0; i < n; i++) {\n            arr35[i] = arr33[i];\n        }\n        for (int i = 0; i < m; i++) {\n            arr36[i] = arr34[i];\n        }\n        int[] arr37 = new int[n];\n        int[] arr38 = new int[m];\n        for (int i = 0; i < n; i++) {\n            arr37[i] = arr35[i];\n        }\n        for (int i = 0; i < m; i++) {\n            arr38[i] = arr36[i];\n        }\n        int[] arr39 = new int[n];\n        int[] arr40 = new int[m];\n        for (int i = 0; i < n; i++) {\n            arr39[i] = arr37[i];\n        }\n        for (int i = 0; i < m; i++) {\n            arr40[i] = arr38[i];\n        }\n        int[] arr41 = new int[n];\n        int[] arr42 = new int[m];\n        for (int i = 0; i < n; i++) {\n            arr41[i] = arr39[i];\n        }\n        for (int i = 0; i < m; i++) {\n            arr42[i] = arr40[i];\n        }\n        int[] arr43 = new int[n];\n        int[] arr44 = new int[m];\n        for (int i = 0; i < n; i++) {\n            arr43[i] = arr41[i];\n        }\n        for (int i = 0; i < m; i++) {\n            arr44[i] = arr42[i];\n        }\n        int[] arr45 = new int[n];\n        int[] arr46 = new int[m];\n        for (int i = 0; i < n; i++) {\n            arr45[i] = arr43[i];\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int n = lst1.size();\n        int m = lst2.size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == j) {\n                    dp[i][j] = lst1.get(i);\n                } else {\n                    dp[i][j] = Math.max(dp[i][j - 1], dp[i + 1][j]);\n                }\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < m; i++) {\n            sb.append(lst2.get(i)).append(\" \");\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        if (lst1.size() != lst2.size()) {\n            return \"No\";\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < lst1.size(); i++) {\n            sb.append(lst1.get(i)).append(lst2.get(i));\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        String result = \"\";\n        for (int i = 0; i < lst1.size(); i++) {\n            result += lst2.get(i);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int n1 = lst1.size();\n        int n2 = lst2.size();\n        int[] dp = new int[n1+1];\n        int[] dp2 = new int[n2+1];\n        for(int i = 1; i <= n1; i++) {\n            dp[i] = lst1.get(i-1);\n        }\n        for(int i = 1; i <= n2; i++) {\n            dp2[i] = lst2.get(i-1);\n        }\n        for(int i = 1; i <= n1; i++) {\n            for(int j = 1; j <= n2; j++) {\n                if(dp[i] < dp2[j]) {\n                    dp[i] = Math.max(dp[i], dp[i-1] + dp2[j]);\n                }\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for(int i = n1; i >= 1; i--) {\n            sb.append(dp[i]).append(\" \");\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int n = lst1.size();\n        int[] arr1 = new int[n];\n        int[] arr2 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr1[i] = lst1.get(i);\n            arr2[i] = lst2.get(i);\n        }\n        int max = Integer.MIN_VALUE;\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < n; i++) {\n            max = Math.max(max, arr1[i]);\n            min = Math.min(min, arr1[i]);\n        }\n        for (int i = 0; i < n; i++) {\n            arr1[i] = max - arr1[i];\n            arr2[i] = min - arr2[i];\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n; i++) {\n            sb.append(arr1[i]).append(\" \").append(arr2[i]);\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        String str1 = \"\";\n        String str2 = \"\";\n        for (int i = 0; i < lst1.size(); i++) {\n            str1 += lst1.get(i) + \" \";\n        }\n        for (int i = 0; i < lst2.size(); i++) {\n            str2 += lst2.get(i) + \" \";\n        }\n        return str1 + \" \" + str2;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int n = lst1.size();\n        int[] arr1 = new int[n];\n        int[] arr2 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr1[i] = lst1.get(i);\n            arr2[i] = lst2.get(i);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        StringBuilder sb = new StringBuilder();\n        int i = 0;\n        int j = 0;\n        while (i < n && j < n) {\n            if (arr1[i] == arr2[j]) {\n                sb.append(arr1[i]);\n                i++;\n                j++;\n            } else if (arr1[i] < arr2[j]) {\n                sb.append(arr1[i]);\n                i++;\n            } else {\n                sb.append(arr2[j]);\n                j++;\n            }\n        }\n        while (i < n) {\n            sb.append(arr1[i]);\n            i++;\n        }\n        while (j < n) {\n            sb.append(arr2[j]);\n            j++;\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> map = new HashMap<>();\n        for (char c : test.toCharArray()) {\n            map.put(String.valueOf(c), map.getOrDefault(String.valueOf(c), 0) + 1);\n        }\n        return map;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String test = sc.nextLine();\n        Solution s = new Solution();\n        Map<String, Integer> map = s.histogram(test);\n        for (String key : map.keySet()) {\n            System.out.println(key + \" \" + map.get(key));\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < test.length(); i++) {\n            char c = test.charAt(i);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        return map;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        \n        List<String> list1 = Arrays.asList(test.split(\" \"));\n        int t = 0;\n        \n            \n                \n            }\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < test.length(); i++) {\n            char c = test.charAt(i);\n            if (map.containsKey(c.toString())) {\n                map.put(c.toString(), map.get(c.toString()) + 1);\n            } else {\n                map.put(c.toString(), 1);\n            }\n        }\n        return map;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> map = new HashMap<>();\n        char[] ch = test.toCharArray();\n        for (char c : ch) {\n            if (map.containsKey(c.toString())) {\n                map.put(c.toString(), map.get(c.toString()) + 1);\n            } else {\n                map.put(c.toString(), 1);\n            }\n        }\n        return map;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> map = new HashMap<String, Integer>();\n        char[] ch = test.toCharArray();\n        for (char c : ch) {\n            if (map.containsKey(c.toString())) {\n                map.put(c.toString(), map.get(c.toString()) + 1);\n            } else {\n                map.put(c.toString(), 1);\n            }\n        }\n        return map;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> map = new HashMap<String, Integer>();\n        for (int i = 0; i < test.length(); i++) {\n            if (map.containsKey(test.substring(i, i + 1))) {\n                map.put(test.substring(i, i + 1), map.get(test.substring(i, i + 1)) + 1);\n            } else {\n                map.put(test.substring(i, i + 1), 1);\n            }\n        }\n        return map;\n    }\n\n    public List<String> findWords(String test, Map<String, Integer> map) {\n        List<String> list = new ArrayList<String>();\n        for (String key : map.keySet()) {\n            if (map.get(key) > 0) {\n                list.add(key);\n            }\n        }\n        return list;\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        String test = \"the quick brown fox jumps over the lazy dog\";\n        Map<String, Integer> map = s.histogram(test);\n        List<String> list = s.findWords(test, map);\n        for (String word : list) {\n            System.out.println(word);\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> map = new HashMap<String, Integer>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            map.put(word, map.getOrDefault(word, 0) + 1);\n        }\n        return map;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> map = new HashMap<String, Integer>();\n        for (int i = 0; i < test.length(); i++) {\n            char c = test.charAt(i);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        return map;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < test.length(); i++) {\n            char c = test.charAt(i);\n            if (map.containsKey(c.toString())) {\n                map.put(c.toString(), map.get(c.toString()) + 1);\n            } else {\n                map.put(c.toString(), 1);\n            }\n        }\n        return map;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> map = new HashMap<>();\n        for (char c : test.toCharArray()) {\n            map.put(String.valueOf(c), map.getOrDefault(String.valueOf(c), 0) + 1);\n        }\n        return map;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < test.length(); i++) {\n            char c = test.charAt(i);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        return map;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int t = sc.nextInt();\n        while (t-- > 0) {\n            String test = sc.next();\n            Map<String, Integer> map = new Solution().histogram(test);\n            for (String key : map.keySet()) {\n                System.out.println(key + \" \" + map.get(key));\n            }\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> map = new HashMap<>();\n        for (char c : test.toCharArray()) {\n            map.put(String.valueOf(c), map.getOrDefault(String.valueOf(c), 0) + 1);\n        }\n        return map;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> map = new HashMap<>();\n        for (char c : test.toCharArray()) {\n            map.put(String.valueOf(c), map.getOrDefault(String.valueOf(c), 0) + 1);\n        }\n        return map;\n    }\n\n    public static void main(String[] args) {\n        String test = \"aab\";\n        Solution solution = new Solution();\n        Map<String, Integer> map = solution.histogram(test);\n        System.out.println(map);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> map = new HashMap<>();\n        for (char c : test.toCharArray()) {\n            map.put(String.valueOf(c), map.getOrDefault(String.valueOf(c), 0) + 1);\n        }\n        return map;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> map = new HashMap<String, Integer>();\n        for (int i = 0; i < test.length(); i++) {\n            char c = test.charAt(i);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        return map;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> dict = new HashMap<>();\n        int count = 0;\n        for (char c : test.toCharArray()) {\n            if (Character.isLetter(c)) {\n                count++;\n            }\n        }\n        if (count > 0) {\n            for (char c : test.toCharArray()) {\n                if (Character.isLetter(c)) {\n                    dict.put(String.valueOf(c), count);\n                    count = 0;\n                }\n            }\n        }\n        return dict;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < test.length(); i++) {\n            char c = test.charAt(i);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        return map;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < test.length(); i++) {\n            char c = test.charAt(i);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        return map;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        \n        List<String> list1 = Arrays.asList(test.split(\" \"));\n        int t = 0;\n        \n            \n                \n            }\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.toCharArray()) {\n            if (ch == c.charAt(0)) {\n                sb.append(ch);\n            } else {\n                sb.append(ch);\n            }\n        }\n        return sb.toString().chars().mapToObj(i -> (char) i).collect(Collectors.toList());\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        int i = 0;\n        int j = 0;\n        while(i < s.length()) {\n            if(s.charAt(i) == c.charAt(j)) {\n                i++;\n                j++;\n            }\n            else {\n                result.add(s.charAt(i));\n                i++;\n                j = 0;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        char[] sArray = s.toCharArray();\n        char[] cArray = c.toCharArray();\n        int i = 0;\n        int j = sArray.length - 1;\n        while (i < j) {\n            if (sArray[i] == cArray[j]) {\n                result.add(sArray[i]);\n                i++;\n                j--;\n            } else if (sArray[i] > cArray[j]) {\n                result.add(sArray[i]);\n                i++;\n            } else {\n                result.add(sArray[j]);\n                j--;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int n = s.length();\n        int m = c.length();\n        while (i < n) {\n            if (c.charAt(j) == s.charAt(i)) {\n                result.add(s.charAt(i));\n                i++;\n                j++;\n            } else {\n                result.add(c.charAt(j));\n                j++;\n            }\n        }\n        while (j < m) {\n            result.add(c.charAt(j));\n            j++;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> res = new ArrayList<>();\n        int i = 0;\n        int j = s.length() - 1;\n        while (i < j) {\n            if (s.charAt(i) == c.charAt(0)) {\n                i++;\n            } else {\n                res.add(s.charAt(i));\n                i++;\n            }\n            if (s.charAt(j) == c.charAt(0)) {\n                j--;\n            } else {\n                res.add(s.charAt(j));\n                j--;\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> res = new ArrayList<>();\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s1 = 0;\n        int s2 = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int a = 0;\n        int b = 0;\n        int c1 = 0;\n        int c2 = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i1 = 0;\n        int j1 = 0;\n        int k1 = 0;\n        int l1 = 0;\n        int m1 = 0;\n        int n1 = 0;\n        int o1 = 0;\n        int p1 = 0;\n        int q1 = 0;\n        int r1 = 0;\n        int s11 = 0;\n        int s21 = 0;\n        int t1 = 0;\n        int u1 = 0;\n        int v1 = 0;\n        int w1 = 0;\n        int x1 = 0;\n        int y1 = 0;\n        int z1 = 0;\n        int a1 = 0;\n        int b1 = 0;\n        int c11 = 0;\n        int c21 = 0;\n        int d1 = 0;\n        int e1 = 0;\n        int f1 = 0;\n        int g1 = 0;\n        int h1 = 0;\n        int i11 = 0;\n        int j11 = 0;\n        int k11 = 0;\n        int l11 = 0;\n        int m11 = 0;\n        int n11 = 0;\n        int o11 = 0;\n        int p11 = 0;\n        int q11 = 0;\n        int r11 = 0;\n        int s111 = 0;\n        int s211 = 0;\n        int t11 = 0;\n        int u11 = 0;\n        int v11 = 0;\n        int w11 = 0;\n        int x11 = 0;\n        int y11 = 0;\n        int z11 = 0;\n        int a11 = 0;\n        int b11 = 0;\n        int c111 = 0;\n        int c211 = 0;\n        int d11 = 0;\n        int e11 = 0;\n        int f11 = 0;\n        int g11 = 0;\n        int h11 = 0;\n        int i111 = 0;\n        int j111 = 0;\n        int k111 = 0;\n        int l111 = 0;\n        int m111 = 0;\n        int n111 = 0;\n        int o111 = 0;\n        int p111 = 0;\n        int q111 = 0;\n        int r111 = 0;\n        int s1111 = 0;\n        int s2111 = 0;\n        int t111 = 0;\n        int u111 = 0;\n        int v111 = 0;\n        int w111 = 0;\n        int x111 = 0;\n        int y111 = 0;\n        int z111 = 0;\n        int a111 = 0;\n        int b111 = 0;\n        int c1111 = 0;\n        int c2111 = 0;\n        int d111 = 0;\n        int e111 = 0;\n        int f111 = 0;\n        int g111 = 0;\n        int h111 = 0;\n        int i1111 = 0;\n        int j1111 = 0;\n        int k1111 = 0;\n        int l1111 = 0;\n        int m1111 = 0;\n        int n1111 = 0;\n        int o1111 = 0;\n        int p1111 = 0;\n        int q1111 = 0;\n        int r1111 = 0;\n        int s11111 = 0;\n        int s21111 = 0;\n        int t1111 = 0;\n        int u1111 = 0;\n        int v1111 = 0;\n        int w1111 = 0;\n        int x1111 = 0;\n        int y1111 = 0;\n        int z1111 = 0;\n        int a1111 = 0;\n        int b1111 = 0;\n        int c11111 = 0;\n        int c21111 = 0;\n        int d1111 = 0;\n        int e1111 = 0;\n        int f1111 = 0;\n        int g1111 = 0;\n        int h1111 = 0;\n        int i11111 = 0;\n        int j11111 = 0;\n        int k11111 = 0;\n        int l11111 = 0;\n        int m11111 = 0;\n        int n11111 = 0;\n        int o11111 = 0;\n        int p11111 = 0;\n        int q11111 = 0;\n        int r11111 = 0;\n        int s111111 = 0;\n        int s211111 = 0;\n        int t11111 = 0;\n        int u11111 = 0;\n        int v11111 = 0;\n        int w11111 = 0;\n        int x11111 = 0;\n        int y11111 = 0;\n        int z11111 = 0;\n        int a11111 = 0;\n        int b11111 = 0;\n        int c111111 = 0;\n        int c211111 = 0;\n        int d11111 = 0;\n        int e11111 = 0;\n        int f11111 = 0;\n        int g11111 = 0;\n        int h11111 = 0;\n        int i111111 = 0;\n        int j111111 = 0;\n        int k111111 = 0;\n        int l111111 = 0;\n        int m111111 = 0;\n        int n111111 = 0;\n        int o111111 = 0;\n        int p111111 = 0;\n        int q111111 = 0;\n        int r111111 = 0;\n        int s1111111 = 0;\n        int s2111111 = 0;\n        int t111111 = 0;\n        int u111111 = 0;\n        int v111111 = 0;\n        int w111111 = 0;\n        int x111111 = 0;\n        int y111111 = 0;\n        int z111111 = 0;\n        int a111111 = 0;\n        int b111111 = 0;\n        int c1111111 = 0;\n        int c2111111 = 0;\n        int d1111111 = 0;\n        int e1111111 = 0;\n        int f1111111 = 0;\n        int g1111111 = 0;\n        int h11"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        int start = 0;\n        int end = 0;\n        int count = 0;\n        while (start < s.length()) {\n            if (s.charAt(start) == c.charAt(0)) {\n                count++;\n                start++;\n            } else {\n                if (count == 1) {\n                    result.add(s.charAt(start));\n                    start++;\n                } else {\n                    result.add(s.charAt(start));\n                    start++;\n                    count--;\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        int i = 0;\n        int j = s.length() - 1;\n        while (i < j) {\n            if (s.charAt(i).equals(c.charAt(0))) {\n                result.add(s.charAt(i));\n                i++;\n            } else {\n                result.add(s.charAt(i));\n                i++;\n            }\n            if (s.charAt(j).equals(c.charAt(0))) {\n                result.add(s.charAt(j));\n                j--;\n            } else {\n                result.add(s.charAt(j));\n                j--;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> res = new ArrayList<Object>();\n        int i = 0;\n        int j = s.length() - 1;\n        while (i < j) {\n            if (s.charAt(i) == c.charAt(0)) {\n                i++;\n            } else {\n                res.add(s.charAt(i));\n            }\n            if (s.charAt(j) == c.charAt(0)) {\n                j--;\n            } else {\n                res.add(s.charAt(j));\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.toCharArray()) {\n            if (ch == c.charAt(0)) {\n                sb.append(ch);\n            } else {\n                sb.append(ch);\n            }\n        }\n        \n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> res = new ArrayList<>();\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s1 = 0;\n        int s2 = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int aa = 0;\n        int bb = 0;\n        int cc = 0;\n        int dd = 0;\n        int ee = 0;\n        int ff = 0;\n        int gg = 0;\n        int hh = 0;\n        int ii = 0;\n        int jj = 0;\n        int kk = 0;\n        int ll = 0;\n        int mm = 0;\n        int nn = 0;\n        int oo = 0;\n        int pp = 0;\n        int qq = 0;\n        int rr = 0;\n        int ss = 0;\n        int tt = 0;\n        int uu = 0;\n        int vv = 0;\n        int ww = 0;\n        int xx = 0;\n        int yy = 0;\n        int zz = 0;\n        int aa1 = 0;\n        int bb1 = 0;\n        int cc1 = 0;\n        int dd1 = 0;\n        int ee1 = 0;\n        int ff1 = 0;\n        int gg1 = 0;\n        int hh1 = 0;\n        int ii1 = 0;\n        int jj1 = 0;\n        int kk1 = 0;\n        int ll1 = 0;\n        int mm1 = 0;\n        int nn1 = 0;\n        int oo1 = 0;\n        int pp1 = 0;\n        int qq1 = 0;\n        int rr1 = 0;\n        int ss1 = 0;\n        int tt1 = 0;\n        int uu1 = 0;\n        int vv1 = 0;\n        int ww1 = 0;\n        int xx1 = 0;\n        int yy1 = 0;\n        int zz1 = 0;\n        int aa2 = 0;\n        int bb2 = 0;\n        int cc2 = 0;\n        int dd2 = 0;\n        int ee2 = 0;\n        int ff2 = 0;\n        int gg2 = 0;\n        int hh2 = 0;\n        int ii2 = 0;\n        int jj2 = 0;\n        int kk2 = 0;\n        int ll2 = 0;\n        int mm2 = 0;\n        int nn2 = 0;\n        int oo2 = 0;\n        int pp2 = 0;\n        int qq2 = 0;\n        int rr2 = 0;\n        int ss2 = 0;\n        int tt2 = 0;\n        int uu2 = 0;\n        int vv2 = 0;\n        int ww2 = 0;\n        int xx2 = 0;\n        int yy2 = 0;\n        int zz2 = 0;\n        int aa3 = 0;\n        int bb3 = 0;\n        int cc3 = 0;\n        int dd3 = 0;\n        int ee3 = 0;\n        int ff3 = 0;\n        int gg3 = 0;\n        int hh3 = 0;\n        int ii3 = 0;\n        int jj3 = 0;\n        int kk3 = 0;\n        int ll3 = 0;\n        int mm3 = 0;\n        int nn3 = 0;\n        int oo3 = 0;\n        int pp3 = 0;\n        int qq3 = 0;\n        int rr3 = 0;\n        int ss3 = 0;\n        int tt3 = 0;\n        int uu3 = 0;\n        int vv3 = 0;\n        int ww3 = 0;\n        int xx3 = 0;\n        int yy3 = 0;\n        int zz3 = 0;\n        int aa4 = 0;\n        int bb4 = 0;\n        int cc4 = 0;\n        int dd4 = 0;\n        int ee4 = 0;\n        int ff4 = 0;\n        int gg4 = 0;\n        int hh4 = 0;\n        int ii4 = 0;\n        int jj4 = 0;\n        int kk4 = 0;\n        int ll4 = 0;\n        int mm4 = 0;\n        int nn4 = 0;\n        int oo4 = 0;\n        int pp4 = 0;\n        int qq4 = 0;\n        int rr4 = 0;\n        int ss4 = 0;\n        int tt4 = 0;\n        int uu4 = 0;\n        int vv4 = 0;\n        int ww4 = 0;\n        int xx4 = 0;\n        int yy4 = 0;\n        int zz4 = 0;\n        int aa5 = 0;\n        int bb5 = 0;\n        int cc5 = 0;\n        int dd5 = 0;\n        int ee5 = 0;\n        int ff5 = 0;\n        int gg5 = 0;\n        int hh5 = 0;\n        int ii5 = 0;\n        int jj5 = 0;\n        int kk5 = 0;\n        int ll5 = 0;\n        int mm5 = 0;\n        int nn5 = 0;\n        int oo5 = 0;\n        int pp5 = 0;\n        int qq5 = 0;\n        int rr5 = 0;\n        int ss5 = 0;\n        int tt5 = 0;\n        int uu5 = 0;\n        int vv5 = 0;\n        int ww5 = 0;\n        int xx5 = 0;\n        int yy5 = 0;\n        int zz5 = 0;\n        int aa6 = 0;\n        int bb6 = 0;\n        int cc6 = 0;\n        int dd6 = 0;\n        int ee6 = 0;\n        int ff6 = 0;\n        int gg6 = 0;\n        int hh6 = 0;\n        int ii6 = 0;\n        int jj6 = 0;\n        int kk6 = 0;\n        int ll6 = 0;\n        int mm6 = 0;\n        int nn6 = 0;\n        int oo6 = 0;\n        int pp6 = 0;\n        int qq6 = 0;\n        int rr6 = 0;\n        int ss6 = 0;\n        int tt6 = 0;\n        int uu6 = 0;\n        int vv6 = 0;\n        int ww6 = 0;\n        int xx6 = 0;\n        int yy6 = 0;\n        int zz6 = 0;\n        int aa7 = 0;\n        int bb7 = 0;\n        int cc7 = 0;\n        int dd7 = 0;\n        int ee7 = 0;\n        int ff7 = 0;\n        int gg7 = 0;\n        int hh7 = 0;\n        int ii7 = 0;\n        int jj7 = 0;\n        int kk7 = 0;\n        int ll7 = 0;"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<Object>();\n        if (s.length() == 0 || c.length() == 0) {\n            result.add(0, s);\n            result.add(1, c);\n            return result;\n        }\n        char[] sArr = s.toCharArray();\n        char[] cArr = c.toCharArray();\n        int i = 0;\n        int j = sArr.length - 1;\n        while (i < sArr.length && j >= 0) {\n            if (sArr[i] == cArr[j]) {\n                sArr[i] = cArr[j];\n                sArr[j] = cArr[i];\n                j--;\n                i++;\n            } else {\n                i++;\n            }\n        }\n        result.add(0, sArr);\n        result.add(1, cArr);\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        int i = 0, j = 0;\n        while (i < s.length()) {\n            if (s.charAt(i) == c.charAt(j)) {\n                i++;\n                j++;\n            } else {\n                result.add(s.charAt(i));\n                i++;\n                j = 0;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```\nclass Solution {\n    public List<Object> reverseDelete(String s, String c) {\n        \n        for (char ch : s.\n```\n\n```"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        int i = 0;\n        int j = s.length() - 1;\n        while (i < j) {\n            if (s.charAt(i) == c.charAt(0)) {\n                i++;\n            } else {\n                result.add(s.charAt(i));\n                i++;\n            }\n            if (s.charAt(j) == c.charAt(0)) {\n                j--;\n            } else {\n                result.add(s.charAt(j));\n                j--;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        int i = 0;\n        int j = s.length() - 1;\n        while (i < j) {\n            if (s.charAt(i) == c.charAt(0)) {\n                i++;\n                continue;\n            }\n            if (s.charAt(j) == c.charAt(0)) {\n                j--;\n                continue;\n            }\n            result.add(s.charAt(i));\n            result.add(s.charAt(j));\n            i++;\n            j--;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        char[] ch = s.toCharArray();\n        char[] ch2 = c.toCharArray();\n        int i = 0;\n        int j = 0;\n        while (i < ch.length && j < ch2.length) {\n            if (ch[i] == ch2[j]) {\n                i++;\n                j++;\n            } else {\n                result.add(ch[i]);\n                i++;\n            }\n        }\n        while (i < ch.length) {\n            result.add(ch[i]);\n            i++;\n        }\n        while (j < ch2.length) {\n            result.add(ch2[j]);\n            j++;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        int i = 0;\n        int j = s.length() - 1;\n        while (i < j) {\n            if (s.charAt(i) == c.charAt(0)) {\n                result.add(s.charAt(i));\n                i++;\n            } else {\n                result.add(s.charAt(j));\n                j--;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        int i = 0;\n        int j = s.length() - 1;\n        while (i < j) {\n            if (s.charAt(i) == c.charAt(0)) {\n                result.add(c.charAt(0));\n                i++;\n            } else {\n                result.add(s.charAt(i));\n                i++;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        char[] sArr = s.toCharArray();\n        char[] cArr = c.toCharArray();\n        int i = 0;\n        int j = sArr.length - 1;\n        while (i < j) {\n            if (cArr[0] == sArr[i]) {\n                result.add(sArr[i]);\n                i++;\n            } else {\n                result.add(sArr[j]);\n                j--;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> odd = new ArrayList<String>();\n        for(String s : lst) {\n            if(s.length() % 2 == 1) {\n                odd.add(s);\n            }\n        }\n        return odd;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> odd = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++) {\n            String str = lst.get(i);\n            int count = 0;\n            for(int j = 0; j < str.length(); j++) {\n                if(str.charAt(j) % 2 == 1) {\n                    count++;\n                }\n            }\n            if(count % 2 == 1) {\n                odd.add(str);\n            }\n        }\n        return odd;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> odd = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++) {\n            if(lst.get(i).charAt(0) % 2 == 1) {\n                odd.add(lst.get(i));\n            }\n        }\n        return odd;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> odd = new ArrayList<String>();\n        for (String s : lst) {\n            int count = 0;\n            for (char c : s.toCharArray()) {\n                if (c % 2 == 1) {\n                    count++;\n                }\n            }\n            if (count % 2 == 1) {\n                odd.add(s);\n            }\n        }\n        return odd;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> odd = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).charAt(0) % 2 != 0) {\n                odd.add(lst.get(i));\n            }\n        }\n        return odd;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> odd = new ArrayList<String>();\n        for (String s : lst) {\n            if (s.length() % 2 == 1) {\n                odd.add(s);\n            }\n        }\n        return odd;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> odd = new ArrayList<>();\n        for(String s : lst){\n            if(s.charAt(0) % 2 == 1){\n                odd.add(s);\n            }\n        }\n        return odd;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> ans = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            String s = lst.get(i);\n            int n = s.length();\n            int odd = 0;\n            for (int j = 0; j < n; j++) {\n                if (s.charAt(j) % 2 == 1) {\n                    odd++;\n                }\n            }\n            if (odd % 2 == 1) {\n                ans.add(s);\n            }\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> odd = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            String s = lst.get(i);\n            int count = 0;\n            for (int j = 0; j < s.length(); j++) {\n                if (s.charAt(j) % 2 == 1) {\n                    count++;\n                }\n            }\n            if (count % 2 == 1) {\n                odd.add(s);\n            }\n        }\n        return odd;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> odd = new ArrayList<>();\n        for (String s : lst) {\n            if (s.charAt(0) % 2 == 1) {\n                odd.add(s);\n            }\n        }\n        return odd;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> odd = new ArrayList<>();\n        for(String s : lst) {\n            if(s.length() % 2 == 1) {\n                odd.add(s);\n            }\n        }\n        return odd;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> odd = new ArrayList<>();\n        for(String s : lst) {\n            if(s.length() % 2 == 1) {\n                odd.add(s);\n            }\n        }\n        return odd;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> odd = new ArrayList<String>();\n        for(int i = 0; i < lst.size(); i++) {\n            if(lst.get(i).charAt(0) % 2 == 1) {\n                odd.add(lst.get(i));\n            }\n        }\n        return odd;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> odd = new ArrayList<>();\n        for (String s : lst) {\n            if (s.length() % 2 == 1) {\n                odd.add(s);\n            }\n        }\n        return odd;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> odd = new ArrayList<String>();\n        for (String s : lst) {\n            if (s.charAt(0) % 2 != 0) {\n                odd.add(s);\n            }\n        }\n        return odd;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> odd = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            String str = lst.get(i);\n            int count = 0;\n            for (int j = 0; j < str.length(); j++) {\n                if (str.charAt(j) % 2 != 0) {\n                    count++;\n                }\n            }\n            if (count % 2 == 1) {\n                odd.add(str);\n            }\n        }\n        return odd;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> odd = new ArrayList<String>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).charAt(0) % 2 == 1) {\n                odd.add(lst.get(i));\n            }\n        }\n        return odd;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> odd = new ArrayList<String>();\n        for(int i = 0; i < lst.size(); i++) {\n            String s = lst.get(i);\n            int count = 0;\n            for(int j = 0; j < s.length(); j++) {\n                if(s.charAt(j) % 2 == 1) {\n                    count++;\n                }\n            }\n            if(count % 2 == 1) {\n                odd.add(s);\n            }\n        }\n        return odd;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> odd = new ArrayList<String>();\n        for (String s : lst) {\n            if (s.length() % 2 == 1) {\n                odd.add(s);\n            }\n        }\n        return odd;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> odd = new ArrayList<>();\n        for (String s : lst) {\n            if (s.length() % 2 == 1) {\n                odd.add(s);\n            }\n        }\n        return odd;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int maxSum = Integer.MIN_VALUE;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            maxSum = Math.max(maxSum, sum);\n        }\n        return maxSum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        \n        for(int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n        }\n        \n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int min = Integer.MAX_VALUE;\n        for(int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if(sum < 0) {\n                sum = 0;\n            }\n            if(sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int minSum = Integer.MAX_VALUE;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum >= 0) {\n                minSum = Math.min(minSum, sum);\n            }\n        }\n        return minSum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        for(int i=0; i<nums.size(); i++) {\n            sum += nums.get(i);\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int minSum = Integer.MAX_VALUE;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum < 0) {\n                sum = 0;\n            }\n            if (sum < minSum) {\n                minSum = sum;\n            }\n        }\n        return minSum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int min = Integer.MAX_VALUE;\n        for(int num : nums) {\n            sum += num;\n            if(sum < 0) {\n                sum = 0;\n            }\n            if(sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum < 0) {\n                sum = 0;\n            }\n            if (sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum < 0) {\n                sum = 0;\n            }\n            if (sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int min = Integer.MAX_VALUE;\n        for(int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if(sum < 0) {\n                sum = 0;\n            }\n            if(sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        for(int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum < 0) {\n                sum = 0;\n            }\n            if (sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        for(int i=0;i<nums.size();i++){\n            sum += nums.get(i);\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int min = Integer.MAX_VALUE;\n        for(int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if(sum < 0) {\n                sum = 0;\n            }\n            if(sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum < 0) {\n                sum = 0;\n            }\n            if (sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int minSum = Integer.MAX_VALUE;\n        for (int num : nums) {\n            sum += num;\n            if (sum < 0) {\n                sum = 0;\n            }\n            if (sum < minSum) {\n                minSum = sum;\n            }\n        }\n        return minSum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        for(int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int min = Integer.MAX_VALUE;\n        for(int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if(sum < 0) {\n                sum = 0;\n            }\n            if(sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum < 0) {\n                sum = 0;\n            }\n            if (sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int maxSum = Integer.MIN_VALUE;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            maxSum = Math.max(maxSum, sum);\n        }\n        return maxSum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int m = grid.size(), n = grid.get(0).size();\n        int[][] dp = new int[m][n];\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == 0 || j == 0) {\n                    dp[i][j] = grid.get(i).get(j);\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid.get(i).get(j);\n                }\n            }\n        }\n        return dp[m - 1][n - 1];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int sum = 0;\n        for(int i = 0; i < grid.size(); i++) {\n            for(int j = 0; j < grid[i].size(); j++) {\n                if(grid[i][j] == 0) {\n                    sum += capacity;\n                    grid[i][j] = 1;\n                }\n            }\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid.get(i).get(j) == 0) {\n                    dp[i][j] = 0;\n                } else {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid.get(i).get(j) == 0) {\n                    continue;\n                }\n                int max = 0;\n                for (int k = 0; k < 4; k++) {\n                    int x = i + dx[k];\n                    int y = j + dy[k];\n                    if (x < 0 || x >= n || y < 0 || y >= m || grid.get(x).get(y) == 0) {\n                        continue;\n                    }\n                    max = Math.max(max, dp[x][y]);\n                }\n                dp[i][j] = max + 1;\n            }\n        }\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid.get(i).get(j) == 0) {\n                    continue;\n                }\n                max = Math.max(max, dp[i][j]);\n            }\n        }\n        return max;\n    }\n\n    private static final int[][] dx = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n    private static final int[][] dy = {{1, 0}, {1, 0}, {0, 1}, {0, -1}};\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int sum = 0;\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    sum++;\n                    if (sum > capacity) {\n                        sum = 0;\n                    }\n                    if (sum == capacity) {\n                        return s.substring(i - capacity + 1, i + 1);\n                    }\n                }\n            }\n        }\n        return \"\";\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int m = grid.size();\n        int n = grid.get(0).size();\n        int[][] dp = new int[m][n];\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 1; i < m; i++) {\n            for (int j = 1; j < n; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        return dp[m - 1][n - 1];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        int[][] dp2 = new int[n][m];\n        int[][] dp3 = new int[n][m];\n        int[][] dp4 = new int[n][m];\n        int[][] dp5 = new int[n][m];\n        int[][] dp6 = new int[n][m];\n        int[][] dp7 = new int[n][m];\n        int[][] dp8 = new int[n][m];\n        int[][] dp9 = new int[n][m];\n        int[][] dp10 = new int[n][m];\n        int[][] dp11 = new int[n][m];\n        int[][] dp12 = new int[n][m];\n        int[][] dp13 = new int[n][m];\n        int[][] dp14 = new int[n][m];\n        int[][] dp15 = new int[n][m];\n        int[][] dp16 = new int[n][m];\n        int[][] dp17 = new int[n][m];\n        int[][] dp18 = new int[n][m];\n        int[][] dp19 = new int[n][m];\n        int[][] dp20 = new int[n][m];\n        int[][] dp21 = new int[n][m];\n        int[][] dp22 = new int[n][m];\n        int[][] dp23 = new int[n][m];\n        int[][] dp24 = new int[n][m];\n        int[][] dp25 = new int[n][m];\n        int[][] dp26 = new int[n][m];\n        int[][] dp27 = new int[n][m];\n        int[][] dp28 = new int[n][m];\n        int[][] dp29 = new int[n][m];\n        int[][] dp30 = new int[n][m];\n        int[][] dp31 = new int[n][m];\n        int[][] dp32 = new int[n][m];\n        int[][] dp33 = new int[n][m];\n        int[][] dp34 = new int[n][m];\n        int[][] dp35 = new int[n][m];\n        int[][] dp36 = new int[n][m];\n        int[][] dp37 = new int[n][m];\n        int[][] dp38 = new int[n][m];\n        int[][] dp39 = new int[n][m];\n        int[][] dp40 = new int[n][m];\n        int[][] dp41 = new int[n][m];\n        int[][] dp42 = new int[n][m];\n        int[][] dp43 = new int[n][m];\n        int[][] dp44 = new int[n][m];\n        int[][] dp45 = new int[n][m];\n        int[][] dp46 = new int[n][m];\n        int[][] dp47 = new int[n][m];\n        int[][] dp48 = new int[n][m];\n        int[][] dp49 = new int[n][m];\n        int[][] dp50 = new int[n][m];\n        int[][] dp51 = new int[n][m];\n        int[][] dp52 = new int[n][m];\n        int[][] dp53 = new int[n][m];\n        int[][] dp54 = new int[n][m];\n        int[][] dp55 = new int[n][m];\n        int[][] dp56 = new int[n][m];\n        int[][] dp57 = new int[n][m];\n        int[][] dp58 = new int[n][m];\n        int[][] dp59 = new int[n][m];\n        int[][] dp60 = new int[n][m];\n        int[][] dp61 = new int[n][m];\n        int[][] dp62 = new int[n][m];\n        int[][] dp63 = new int[n][m];\n        int[][] dp64 = new int[n][m];\n        int[][] dp65 = new int[n][m];\n        int[][] dp66 = new int[n][m];\n        int[][] dp67 = new int[n][m];\n        int[][] dp68 = new int[n][m];\n        int[][] dp69 = new int[n][m];\n        int[][] dp70 = new int[n][m];\n        int[][] dp71 = new int[n][m];\n        int[][] dp72 = new int[n][m];\n        int[][] dp73 = new int[n][m];\n        int[][] dp74 = new int[n][m];\n        int[][] dp75 = new int[n][m];\n        int[][] dp76 = new int[n][m];\n        int[][] dp77 = new int[n][m];\n        int[][] dp78 = new int[n][m];\n        int[][] dp79 = new int[n][m];\n        int[][] dp80 = new int[n][m];\n        int[][] dp81 = new int[n][m];\n        int[][] dp82 = new int[n][m];\n        int[][] dp83 = new int[n][m];\n        int[][] dp84 = new int[n][m];\n        int[][] dp85 = new int[n][m];\n        int[][] dp86 = new int[n][m];\n        int[][] dp87 = new int[n][m];\n        int[][] dp88 = new int[n][m];\n        int[][] dp89 = new int[n][m];\n        int[][] dp90 = new int[n][m];\n        int[][] dp91 = new int[n][m];\n        int[][] dp92 = new int[n][m];\n        int[][] dp93 = new int[n][m];\n        int[][] dp94 = new int[n][m];\n        int[][] dp95 = new int[n][m];\n        int[][] dp96 = new int[n][m];\n        int[][] dp97 = new int[n][m];\n        int[][] dp98 = new int[n][m];\n        int[][] dp99 = new int[n][m];\n        int[][] dp100 = new int[n][m];\n        int[][] dp101 = new int[n][m];\n        int[][] dp102 = new int[n][m];\n        int[][] dp103 = new int[n][m];\n        int[][] dp104 = new int[n][m];\n        int[][] dp105 = new int[n][m];\n        int[][] dp106 = new int[n][m];\n        int[][] dp107 = new int[n][m];\n        int[][] dp108 = new int[n][m];\n        int[][] dp109 = new int[n][m];\n        int[][] dp110 = new int[n][m];\n        int[][] dp111 = new int[n][m];\n        int[][] dp112 = new int[n][m];\n        int[][] dp113 = new int[n][m];\n        int[][] dp114 = new int[n][m];\n        int[][] dp115 = new int[n][m"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int m = grid.size();\n        int n = grid[0].size();\n        int[][] dp = new int[m][n];\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid[i][j] == 0) {\n                    dp[i][j] = 0;\n                } else {\n                    dp[i][j] = Math.max(dp[i][j - 1], dp[i + 1][j]) + 1;\n                }\n            }\n        }\n        return dp[m - 1][n - 1];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int sum = 0;\n        int m = grid.size();\n        int n = grid[0].size();\n        int[][] dp = new int[m][n];\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid[i][j] == 0) {\n                    dp[i][j] = 0;\n                    continue;\n                }\n                if (grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                    continue;\n                }\n                int left = Math.min(dp[i][j - 1], dp[i - 1][j]);\n                int right = Math.min(dp[i][j + 1], dp[i + 1][j]);\n                int top = Math.min(dp[i - 1][j], dp[i][j - 1]);\n                int bottom = Math.min(dp[i + 1][j], dp[i][j + 1]);\n                dp[i][j] = Math.max(left, right, top, bottom) + 1;\n                sum += dp[i][j];\n            }\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int sum = 0;\n        if(grid == null || grid.size() == 0)\n            return 0;\n        if(grid.size() == 1)\n            return 1;\n        if(grid.size() == 2)\n            return 2;\n        if(grid.size() == 3)\n            return 3;\n        if(grid.size() == 4)\n            return 4;\n        if(grid.size() == 5)\n            return 5;\n        if(grid.size() == 6)\n            return 6;\n        if(grid.size() == 7)\n            return 7;\n        if(grid.size() == 8)\n            return 8;\n        if(grid.size() == 9)\n            return 9;\n        if(grid.size() == 10)\n            return 10;\n        if(grid.size() == 11)\n            return 11;\n        if(grid.size() == 12)\n            return 12;\n        if(grid.size() == 13)\n            return 13;\n        if(grid.size() == 14)\n            return 14;\n        if(grid.size() == 15)\n            return 15;\n        if(grid.size() == 16)\n            return 16;\n        if(grid.size() == 17)\n            return 17;\n        if(grid.size() == 18)\n            return 18;\n        if(grid.size() == 19)\n            return 19;\n        if(grid.size() == 20)\n            return 20;\n        if(grid.size() == 21)\n            return 21;\n        if(grid.size() == 22)\n            return 22;\n        if(grid.size() == 23)\n            return 23;\n        if(grid.size() == 24)\n            return 24;\n        if(grid.size() == 25)\n            return 25;\n        if(grid.size() == 26)\n            return 26;\n        if(grid.size() == 27)\n            return 27;\n        if(grid.size() == 28)\n            return 28;\n        if(grid.size() == 29)\n            return 29;\n        if(grid.size() == 30)\n            return 30;\n        if(grid.size() == 31)\n            return 31;\n        if(grid.size() == 32)\n            return 32;\n        if(grid.size() == 33)\n            return 33;\n        if(grid.size() == 34)\n            return 34;\n        if(grid.size() == 35)\n            return 35;\n        if(grid.size() == 36)\n            return 36;\n        if(grid.size() == 37)\n            return 37;\n        if(grid.size() == 38)\n            return 38;\n        if(grid.size() == 39)\n            return 39;\n        if(grid.size() == 40)\n            return 40;\n        if(grid.size() == 41)\n            return 41;\n        if(grid.size() == 42)\n            return 42;\n        if(grid.size() == 43)\n            return 43;\n        if(grid.size() == 44)\n            return 44;\n        if(grid.size() == 45)\n            return 45;\n        if(grid.size() == 46)\n            return 46;\n        if(grid.size() == 47)\n            return 47;\n        if(grid.size() == 48)\n            return 48;\n        if(grid.size() == 49)\n            return 49;\n        if(grid.size() == 50)\n            return 50;\n        if(grid.size() == 51)\n            return 51;\n        if(grid.size() == 52)\n            return 52;\n        if(grid.size() == 53)\n            return 53;\n        if(grid.size() == 54)\n            return 54;\n        if(grid.size() == 55)\n            return 55;\n        if(grid.size() == 56)\n            return 56;\n        if(grid.size() == 57)\n            return 57;\n        if(grid.size() == 58)\n            return 58;\n        if(grid.size() == 59)\n            return 59;\n        if(grid.size() == 60)\n            return 60;\n        if(grid.size() == 61)\n            return 61;\n        if(grid.size() == 62)\n            return 62;\n        if(grid.size() == 63)\n            return 63;\n        if(grid.size() == 64)\n            return 64;\n        if(grid.size() == 65)\n            return 65;\n        if(grid.size() == 66)\n            return 66;\n        if(grid.size() == 67)\n            return 67;\n        if(grid.size() == 68)\n            return 68;\n        if(grid.size() == 69)\n            return 69;\n        if(grid.size() == 70)\n            return 70;\n        if(grid.size() == 71)\n            return 71;\n        if(grid.size() == 72)\n            return 72;\n        if(grid.size() == 73)\n            return 73;\n        if(grid.size() == 74)\n            return 74;\n        if(grid.size() == 75)\n            return 75;\n        if(grid.size() == 76)\n            return 76;\n        if(grid.size() == 77)\n            return 77;\n        if(grid.size() == 78)\n            return 78;\n        if(grid.size() == 79)\n            return 79;\n        if(grid.size() == 80)\n            return 80;\n        if(grid.size() == 81)\n            return 81;\n        if(grid.size() == 82)\n            return 82;\n        if(grid.size() == 83)\n            return 83;\n        if(grid.size() == 84)\n            return 84;\n        if(grid.size() == 85)\n            return 85;\n        if(grid.size() == 86)\n            return 86;\n        if(grid.size() == 87)\n            return 87;\n        if(grid.size() == 88)\n            return 88;\n        if(grid.size() == 89)\n            return 89;\n        if(grid.size() == 90)\n            return 90;\n        if(grid.size() == 91)\n            return 91;\n        if(grid.size() == 92)\n            return 92;\n        if(grid.size() == 93)\n            return 93;\n        if(grid.size() == 94)\n            return 94;\n        if(grid.size() == 95)\n            return 95;\n        if(grid.size() == 96)\n            return 96;\n        if(grid.size() == 97)\n            return 97;\n        if(grid.size() == 98)\n            return 98;\n        if(grid.size() == 99)\n            return 99;\n        if(grid.size() == 100)\n            return 100;\n        if(grid.size() == 101)\n            return 101;\n        if(grid."], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    max++;\n                }\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int m = grid.size();\n        int n = grid[0].size();\n        int[][] dp = new int[m][n];\n        int res = 0;\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid.get(i).get(j) == 0) {\n                    dp[i][j] = 0;\n                    continue;\n                }\n                if (dp[i][j] != 0) {\n                    continue;\n                }\n                int max = 0;\n                for (int k = 0; k < 4; k++) {\n                    int x = i + dx[k];\n                    int y = j + dy[k];\n                    if (x < 0 || x >= m || y < 0 || y >= n) {\n                        continue;\n                    }\n                    if (grid.get(x).get(y) == 0) {\n                        continue;\n                    }\n                    max = Math.max(max, dp[x][y] + 1);\n                }\n                dp[i][j] = max;\n                res = Math.max(res, max);\n            }\n        }\n        return res;\n    }\n\n    private int[] dx = {0, 0, 1, -1};\n    private int[] dy = {1, -1, 0, 0};\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int max = 0;\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid.get(i).size(); j++) {\n                max = Math.max(max, grid.get(i).get(j));\n            }\n        }\n        return max + 1;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int m = grid.size();\n        int n = grid.get(0).size();\n        int[][] dp = new int[m][n];\n        int max = 0;\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid.get(i).get(j) == 0) {\n                    dp[i][j] = 0;\n                } else {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    if (i - 1 >= 0 && dp[i - 1][j] == 1) {\n                        dp[i][j] = dp[i - 1][j];\n                    }\n                    if (j - 1 >= 0 && dp[i][j - 1] == 1) {\n                        dp[i][j] = dp[i][j - 1];\n                    }\n                    if (i + 1 < m && dp[i + 1][j] == 1) {\n                        dp[i][j] = dp[i + 1][j];\n                    }\n                    if (j + 1 < n && dp[i][j + 1] == 1) {\n                        dp[i][j] = dp[i][j + 1];\n                    }\n                }\n            }\n        }\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid.get(i).get(j) == 2) {\n                    if (i - 1 >= 0 && dp[i - 1][j] == 1) {\n                        dp[i][j] = dp[i - 1][j];\n                    }\n                    if (j - 1 >= 0 && dp[i][j - 1] == 1) {\n                        dp[i][j] = dp[i][j - 1];\n                    }\n                    if (i + 1 < m && dp[i + 1][j] == 1) {\n                        dp[i][j] = dp[i + 1][j];\n                    }\n                    if (j + 1 < n && dp[i][j + 1] == 1) {\n                        dp[i][j] = dp[i][j + 1];\n                    }\n                    if (i - 1 >= 0 && j - 1 >= 0 && dp[i - 1][j - 1] == 1) {\n                        dp[i][j] = dp[i - 1][j - 1];\n                    }\n                    if (i - 1 >= 0 && j + 1 < n && dp[i - 1][j + 1] == 1) {\n                        dp[i][j] = dp[i - 1][j + 1];\n                    }\n                    if (i + 1 < m && j - 1 >= 0 && dp[i + 1][j - 1] == 1) {\n                        dp[i][j] = dp[i + 1][j - 1];\n                    }\n                    if (i + 1 < m && j + 1 < n && dp[i + 1][j + 1] == 1) {\n                        dp[i][j] = dp[i + 1][j + 1];\n                    }\n                }\n            }\n        }\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid.get(i).get(j) == 3) {\n                    if (i - 1 >= 0 && dp[i - 1][j] == 1) {\n                        dp[i][j] = dp[i - 1][j];\n                    }\n                    if (j - 1 >= 0 && dp[i][j - 1] == 1) {\n                        dp[i][j] = dp[i][j - 1];\n                    }\n                    if (i + 1 < m && dp[i + 1][j] == 1) {\n                        dp[i][j] = dp[i + 1][j];\n                    }\n                    if (j + 1 < n && dp[i][j + 1] == 1) {\n                        dp[i][j] = dp[i][j + 1];\n                    }\n                    if (i - 1 >= 0 && j - 1 >= 0 && dp[i - 1][j - 1] == 1) {\n                        dp[i][j] = dp[i - 1][j - 1];\n                    }\n                    if (i - 1 >= 0 && j + 1 < n && dp[i - 1][j + 1] == 1) {\n                        dp[i][j] = dp[i - 1][j + 1];\n                    }\n                    if (i + 1 < m && j - 1 >= 0 && dp[i + 1][j - 1] == 1) {\n                        dp[i][j] = dp[i + 1][j - 1];\n                    }\n                    if (i + 1 < m && j + 1 < n && dp[i + 1][j + 1] == 1) {\n                        dp[i][j] = dp[i + 1][j + 1];\n                    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int sum = 0;\n        for (int i = 0; i < grid.size(); i++) {\n            int count = 0;\n            for (int j = 0; j < grid.get(i).size(); j++) {\n                if (grid.get(i).get(j) > 0) {\n                    count++;\n                }\n            }\n            if (count > capacity) {\n                sum += count - capacity;\n            }\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int m = grid.size();\n        int n = grid.get(0).size();\n        int[][] dp = new int[m][n];\n        for(int i=0;i<m;i++){\n            for(int j=0;j<n;j++){\n                if(grid.get(i).get(j) == 0){\n                    dp[i][j] = 0;\n                }else{\n                    dp[i][j] = Math.max(dp[i][j-1],dp[i+1][j]) + 1;\n                }\n            }\n        }\n        return dp[m-1][n-1];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int sum = 0;\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid[i].size(); j++) {\n                if (grid[i][j] == 0) {\n                    continue;\n                }\n                if (grid[i][j] > capacity) {\n                    continue;\n                }\n                sum += grid[i][j];\n                capacity -= grid[i][j];\n            }\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid.get(i).get(j) == 0) {\n                    dp[i][j] = 0;\n                } else {\n                    int maxCount = 0;\n                    for (int k = 0; k < 4; k++) {\n                        int x = i + dx[k];\n                        int y = j + dy[k];\n                        if (x >= 0 && x < n && y >= 0 && y < m && grid.get(x).get(y) == 1) {\n                            maxCount++;\n                        }\n                    }\n                    dp[i][j] = maxCount;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] > max) {\n                    max = dp[i][j];\n                }\n            }\n        }\n        return max;\n    }\n\n    int[] dx = {0, 0, 1, -1};\n    int[] dy = {1, -1, 0, 0};\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int m = grid.size();\n        int n = grid.get(0).size();\n        int[][] dp = new int[m][n];\n        for(int i = 0; i < m; i++) {\n            for(int j = 0; j < n; j++) {\n                if(grid.get(i).get(j) == 0) {\n                    dp[i][j] = 0;\n                } else {\n                    dp[i][j] = Math.max(dp[i][j-1], dp[i+1][j]) + 1;\n                }\n            }\n        }\n        return dp[m-1][n-1];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int m = grid.size();\n        int n = grid.get(0).size();\n        int[][] dp = new int[m][n];\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid.get(i).get(j) == 0) {\n                    dp[i][j] = 0;\n                } else if (grid.get(i).get(j) == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = Math.max(dp[i][j - 1], dp[i - 1][j]) + 1;\n                }\n            }\n        }\n        return dp[m - 1][n - 1];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int m = grid.size();\n        int n = grid[0].size();\n        int[][] dp = new int[m][n];\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid.get(i).get(j) == 0) {\n                    dp[i][j] = 0;\n                } else {\n                    dp[i][j] = Math.max(dp[i][j], dp[i + 1][j] + 1);\n                    dp[i][j] = Math.max(dp[i][j], dp[i][j + 1] + 1);\n                    dp[i][j] = Math.max(dp[i][j], dp[i][j] + 1);\n                }\n            }\n        }\n        return dp[m - 1][n - 1];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            result.add(arrCopy[i]);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> res = new ArrayList<>();\n        for(int i = 0; i < arr.size(); i++) {\n            for(int j = 0; j < arr.size() - i - 1; j++) {\n                if(arr.get(j) > arr.get(j+1)) {\n                    int temp = arr.get(j);\n                    arr.set(j, arr.get(j+1));\n                    arr.set(j+1, temp);\n                }\n            }\n        }\n        for(int i = 0; i < arr.size(); i++) {\n            res.add(arr.get(i));\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> sorted_arr = new ArrayList<>(arr);\n        sorted_arr.sort((o1, o2) -> o1 - o2);\n        return sorted_arr;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            res.add(arrCopy[i]);\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        Arrays.sort(arr);\n        return arr;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> ans = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            for (int j = 0; j < arr.size() - i - 1; j++) {\n                if (arr.get(j) > arr.get(j + 1)) {\n                    int temp = arr.get(j);\n                    arr.set(j, arr.get(j + 1));\n                    arr.set(j + 1, temp);\n                }\n            }\n        }\n        for (int i = 0; i < arr.size(); i++) {\n            ans.add(arr.get(i));\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> ans = new ArrayList<>();\n        for(int i = 0; i < arr.size(); i++) {\n            for(int j = 0; j < arr.size() - i - 1; j++) {\n                if(arr.get(j) > arr.get(j+1)) {\n                    int temp = arr.get(j);\n                    arr.set(j, arr.get(j+1));\n                    arr.set(j+1, temp);\n                }\n            }\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        int n = arr.size();\n        if (n == 0) return arr;\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        for (int i = 0; i < n; i++) {\n            arr.set(i, arrCopy[i]);\n        }\n        return arr;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        if (arr == null || arr.size() == 0) {\n            return arr;\n        }\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        for (int i = 0; i < n; i++) {\n            arr.set(i, arrCopy[i]);\n        }\n        return arr;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        Arrays.sort(arr);\n        return arr;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> sorted_arr = new ArrayList<>(arr);\n        sorted_arr.sort((o1, o2) -> o1 - o2);\n        return sorted_arr;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        int n = arr.size();\n        if(n == 0) return arr;\n        int[] arrCopy = new int[n];\n        for(int i = 0; i < n; i++) arrCopy[i] = arr.get(i);\n        Arrays.sort(arrCopy);\n        for(int i = 0; i < n; i++) arr.set(i, arrCopy[i]);\n        return arr;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        int n = arr.size();\n        int[] arr2 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr2[i] = arr.get(i);\n        }\n        Arrays.sort(arr2);\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            res.add(arr2[i]);\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> ans = new ArrayList<Integer>();\n        for(int i = 0; i < arr.size(); i++) {\n            for(int j = 0; j < arr.size() - 1; j++) {\n                if(arr.get(j) > arr.get(j+1)) {\n                    int temp = arr.get(j);\n                    arr.set(j, arr.get(j+1));\n                    arr.set(j+1, temp);\n                }\n            }\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        int n = arr.size();\n        int[] arr2 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr2[i] = arr.get(i);\n        }\n        Arrays.sort(arr2);\n        List<Integer> ans = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            ans.add(arr2[i]);\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        int n = arr.size();\n        List<Integer> res = new ArrayList<Integer>();\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < n - i - 1; j++) {\n                if(arr.get(j) > arr.get(j+1)) {\n                    int temp = arr.get(j);\n                    arr.set(j, arr.get(j+1));\n                    arr.set(j+1, temp);\n                }\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            result.add(arrCopy[i]);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        int n = arr.size();\n        int i = 0;\n        int j = n - 1;\n        while (i < j) {\n            if (arr.get(i) > arr.get(j)) {\n                int temp = arr.get(i);\n                arr.set(i, arr.get(j));\n                arr.set(j, temp);\n                i++;\n                j--;\n            } else {\n                j--;\n            }\n        }\n        return arr;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        // write your code here\n        int n = arr.size();\n        int[] arr2 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr2[i] = arr.get(i);\n        }\n        Arrays.sort(arr2);\n        List<Integer> ans = new ArrayList<>();\n        for(int i = 0; i < n; i++) {\n            ans.add(arr2[i]);\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> sorted_arr = new ArrayList<>(arr);\n        sorted_arr.sort((Integer o1, Integer o2) -> {\n            int cnt1 = (int) Integer.toBinaryString(Math.abs(o1)).chars().filter(ch ->\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> sorted_arr = new ArrayList<>(arr);\n        sorted_arr.sort((Integer o1, Integer o2) -> {\n            int cnt1 = (int) Integer.toBinaryString(Math.abs(o1)).chars().filter(ch ->\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> sorted_arr = new ArrayList<>(arr);\n        sorted_arr.sort((Integer o1, Integer o2) -> {\n            int cnt1 = (int) Integer.toBinaryString(Math.abs(o1)).chars().filter(ch ->\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> sorted_arr = new ArrayList<>(arr);\n        sorted_arr.sort((Integer o1, Integer o2) -> {\n            int cnt1 = (int) Integer.toBinaryString(Math.abs(o1)).chars().filter(ch ->\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> sorted_arr = new ArrayList<>(arr);\n        sorted_arr.sort((Integer o1, Integer o2) -> {\n            int cnt1 = (int) Integer.toBinaryString(Math.abs(o1)).chars().filter(ch ->\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> sorted_arr = new ArrayList<>(arr);\n        sorted_arr.sort((Integer o1, Integer o2) -> {\n            int cnt1 = (int) Integer.toBinaryString(Math.abs(o1)).chars().filter(ch ->\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> sorted_arr = new ArrayList<>(arr);\n        sorted_arr.sort((Integer o1, Integer o2) -> {\n            int cnt1 = (int) Integer.toBinaryString(Math.abs(o1)).chars().filter(ch ->\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> sorted_arr = new ArrayList<>(arr);\n        sorted_arr.sort((Integer o1, Integer o2) -> {\n            int cnt1 = (int) Integer.toBinaryString(Math.abs(o1)).chars().filter(ch ->\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> sorted_arr = new ArrayList<>(arr);\n        sorted_arr.sort((Integer o1, Integer o2) -> {\n            int cnt1 = (int) Integer.toBinaryString(Math.abs(o1)).chars().filter(ch ->\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> sorted_arr = new ArrayList<>(arr);\n        sorted_arr.sort((Integer o1, Integer o2) -> {\n            int cnt1 = (int) Integer.toBinaryString(Math.abs(o1)).chars().filter(ch ->\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> sorted_arr = new ArrayList<>(arr);\n        sorted_arr.sort((Integer o1, Integer o2) -> {\n            int cnt1 = (int) Integer.toBinaryString(Math.abs(o1)).chars().filter(ch ->\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> sorted_arr = new ArrayList<>(arr);\n        sorted_arr.sort((Integer o1, Integer o2) -> {\n            int cnt1 = (int) Integer.toBinaryString(Math.abs(o1)).chars().filter(ch ->\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> sorted_arr = new ArrayList<>(arr);\n        sorted_arr.sort((Integer o1, Integer o2) -> {\n            int cnt1 = (int) Integer.toBinaryString(Math.abs(o1)).chars().filter(ch ->\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> sorted_arr = new ArrayList<>(arr);\n        sorted_arr.sort((Integer o1, Integer o2) -> {\n            int cnt1 = (int) Integer.toBinaryString(Math.abs(o1)).chars().filter(ch ->\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> sorted_arr = new ArrayList<>(arr);\n        sorted_arr.sort((Integer o1, Integer o2) -> {\n            int cnt1 = (int) Integer.toBinaryString(Math.abs(o1)).chars().filter(ch ->\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> sorted_arr = new ArrayList<>(arr);\n        sorted_arr.sort((Integer o1, Integer o2) -> {\n            int cnt1 = (int) Integer.toBinaryString(Math.abs(o1)).chars().filter(ch ->\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> sorted_arr = new ArrayList<>(arr);\n        sorted_arr.sort((Integer o1, Integer o2) -> {\n            int cnt1 = (int) Integer.toBinaryString(Math.abs(o1)).chars().filter(ch ->\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> sorted_arr = new ArrayList<>(arr);\n        sorted_arr.sort((Integer o1, Integer o2) -> {\n            int cnt1 = (int) Integer.toBinaryString(Math.abs(o1)).chars().filter(ch ->\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> sorted_arr = new ArrayList<>(arr);\n        sorted_arr.sort((Integer o1, Integer o2) -> {\n            int cnt1 = (int) Integer.toBinaryString(Math.abs(o1)).chars().filter(ch ->\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> sorted_arr = new ArrayList<>(arr);\n        sorted_arr.sort((Integer o1, Integer o2) -> {\n            int cnt1 = (int) Integer.toBinaryString(Math.abs(o1)).chars().filter("], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> result = new ArrayList<>();\n        String[] words = s.split(\" \");\n        for (int i = 0; i < n; i++) {\n            result.add(words[i]);\n        }\n        return result;\n    }\n\n    public String longestCommonSuffix(String s1, String s2) {\n        if (s1 == null || s2 == null) {\n            return \"\";\n        }\n        int n1 = s1.length();\n        int n2 = s2.length();\n        int[] dp = new int[n1 + 1];\n        for (int i = 1; i <= n1; i++) {\n            for (int j = 1; j <= n2; j++) {\n                if (s1.charAt(i - 1) == s2.charAt(j - 1)) {\n                    dp[i] = dp[i - 1] + 1;\n                }\n            }\n        }\n        return dp[n1] == n2 ? s1 : \"\";\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> result = new ArrayList<>();\n        if (s == null || s.length() == 0) {\n            return result;\n        }\n        String reg = \"[a-z0-9_\\-\\. ]\";\n        Pattern p = Pattern.compile(reg);\n        Matcher m = p.matcher(s);\n        while (m.find()) {\n            result.add(m.group());\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> result = new ArrayList<>();\n        char[] arr = s.toCharArray();\n        int len = arr.length;\n        int[] count = new int[26];\n        for (int i = 0; i < len; i++) {\n            count[arr[i] - 'a']++;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (count[i] >= n) {\n                result.add(String.valueOf((char) ('a' + i)));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> res = new ArrayList<>();\n        if(s == null || s.length() == 0) return res;\n        int len = s.length();\n        int[] dp = new int[len+1];\n        dp[0] = 1;\n        for(int i = 1; i <= len; i++) {\n            dp[i] = dp[i-1];\n            for(int j = 0; j < i; j++) {\n                if(s.charAt(j) == s.charAt(i-1)) {\n                    dp[i] += dp[j];\n                }\n            }\n        }\n        for(int i = 0; i < len; i++) {\n            if(dp[i] >= n) res.add(s.substring(i, i+1));\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> result = new ArrayList<String>();\n        String pattern = \"([a-zA-Z0-9_\\\\-\\\\.\\\\?\\\\!\\\\*\\\\+\\\\(\\\\)\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}\\\\|\\\\^\\\\$\\\\%\\\\~\\\\`\\\\[\\\\]\\\\{\\\\}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> res = new ArrayList<>();\n        if (s == null || s.length() == 0) return res;\n        if (n < 1) return res;\n        if (n == 1) {\n            res.add(s);\n            return res;\n        }\n        Map<Character, Integer> map = new HashMap<>();\n        for (int i = 0; i < s.length(); i++) {\n            map.put(s.charAt(i), map.getOrDefault(s.charAt(i), 0) + 1);\n        }\n        for (int i = 0; i < n; i++) {\n            StringBuilder sb = new StringBuilder();\n            for (int j = 0; j < s.length(); j++) {\n                if (map.get(s.charAt(j)) > 0) {\n                    map.put(s.charAt(j), map.get(s.charAt(j)) - 1);\n                    sb.append(s.charAt(j));\n                }\n            }\n            res.add(sb.toString());\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> result = new ArrayList<>();\n        String[] words = s.split(\" \");\n        for (int i = 0; i < words.length; i++) {\n            if (i < n) {\n                result.add(words[i]);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> result = new ArrayList<>();\n        if (s == null || s.length() == 0) {\n            return result;\n        }\n        String pattern = \".*\";\n        String reg = pattern + \"{\" + n + \"}\";\n        Pattern p = Pattern.compile(reg);\n        Matcher m = p.matcher(s);\n        while (m.find()) {\n            result.add(m.group());\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> result = new ArrayList<>();\n        if (n == 1) {\n            result.add(s);\n            return result;\n        }\n        String[] roman = {\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\", \"X\", \"XI\", \"XII\"};\n        String[] roman2 = {\"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman3 = {\"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman4 = {\"M\", \"MM\", \"MMM\"};\n        String[] roman5 = {\"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman6 = {\"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman7 = {\"M\", \"MM\", \"MMM\"};\n        String[] roman8 = {\"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman9 = {\"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman10 = {\"M\", \"MM\", \"MMM\"};\n        String[] roman11 = {\"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman12 = {\"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman13 = {\"M\", \"MM\", \"MMM\"};\n        String[] roman14 = {\"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman15 = {\"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman16 = {\"M\", \"MM\", \"MMM\"};\n        String[] roman17 = {\"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman18 = {\"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman19 = {\"M\", \"MM\", \"MMM\"};\n        String[] roman20 = {\"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman21 = {\"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman22 = {\"M\", \"MM\", \"MMM\"};\n        String[] roman23 = {\"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman24 = {\"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman25 = {\"M\", \"MM\", \"MMM\"};\n        String[] roman26 = {\"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman27 = {\"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman28 = {\"M\", \"MM\", \"MMM\"};\n        String[] roman29 = {\"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman30 = {\"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman31 = {\"M\", \"MM\", \"MMM\"};\n        String[] roman32 = {\"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman33 = {\"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman34 = {\"M\", \"MM\", \"MMM\"};\n        String[] roman35 = {\"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman36 = {\"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman37 = {\"M\", \"MM\", \"MMM\"};\n        String[] roman38 = {\"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman39 = {\"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman40 = {\"M\", \"MM\", \"MMM\"};\n        String[] roman41 = {\"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman42 = {\"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman43 = {\"M\", \"MM\", \"MMM\"};\n        String[] roman44 = {\"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman45 = {\"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman46 = {\"M\", \"MM\", \"MMM\"};\n        String[] roman47 = {\"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman48 = {\"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman49 = {\"M\", \"MM\", \"MMM\"};\n        String[] roman50 = {\"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman51 = {\"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman52 = {\"M\", \"MM\", \"MMM\"};\n        String[] roman53 = {\"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman54 = {\"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman55 = {\"M\", \"MM\", \"MMM\"};\n        String[] roman56 = {\"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman57 = {\"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman58 = {\"M\", \"MM\", \"MMM\"};\n        String[] roman59 = {\"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman60 = {\"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman61 = {\"M\", \"MM\", \"MMM\"}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<>();\n        String[] wordsArr = s.split(\" \");\n        for (int i = 0; i < wordsArr.length; i++) {\n            words.add(wordsArr[i]);\n        }\n        Collections.reverse(words);\n        for (int i = 0; i < words.size(); i++) {\n            words.set(i, words.get(i).substring(n));\n        }\n        return words;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> result = new ArrayList<>();\n        int[] count = new int[26];\n        for (int i = 0; i < s.length(); i++) {\n            count[s.charAt(i) - 'a']++;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (count[i] >= n) {\n                result.add(String.valueOf((char)('a' + i)));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> result = new ArrayList<>();\n        String[] words = s.split(\" \");\n        for (int i = 0; i < words.length; i++) {\n            if (i < n) {\n                result.add(words[i]);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> result = new ArrayList<String>();\n        String reg = \"[a-zA-Z]\";\n        Pattern p = Pattern.compile(reg);\n        Matcher m = p.matcher(s);\n        while (m.find()) {\n            result.add(m.group());\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> result = new ArrayList<>();\n        int len = s.length();\n        int[] count = new int[26];\n        for (int i = 0; i < len; i++) {\n            char c = s.charAt(i);\n            count[c - 'a']++;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (count[i] >= n) {\n                result.add(String.valueOf((char) ('a' + i)));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> result = new ArrayList<>();\n        if (s == null || s.length() == 0) {\n            return result;\n        }\n        char[] chars = s.toCharArray();\n        Arrays.sort(chars);\n        int len = chars.length;\n        int[] count = new int[26];\n        for (int i = 0; i < len; i++) {\n            count[chars[i] - 'a']++;\n        }\n        for (int i = 0; i < len; i++) {\n            if (count[i] > n) {\n                result.add(String.valueOf(chars[i]));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> result = new ArrayList<String>();\n        int n_consonants = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                n_consonants += 1;\n            }\n        }\n        if (n_consonants >= n) {\n            for (int i = 0; i < s.length(); i++) {\n                char c = s.charAt(i);\n                if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                    result.add(s.substring(i, i + 1));\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> res = new ArrayList<>();\n        int len = s.length();\n        int[] cnt = new int[26];\n        for (int i = 0; i < len; i++) {\n            cnt[s.charAt(i) - 'a']++;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (cnt[i] > 0) {\n                res.add(String.valueOf((char) ('a' + i)));\n                cnt[i]--;\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> result = new ArrayList<String>();\n        if (s == null || s.length() == 0) {\n            return result;\n        }\n        String[] words = s.split(\" \");\n        for (int i = 0; i < words.length; i++) {\n            if (i < n) {\n                result.add(words[i]);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<String>();\n        String[] wordsArray = s.split(\" \");\n        for (int i = 0; i < n; i++) {\n            words.add(wordsArray[i]);\n        }\n        return words;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        if (s == null || s.length() == 0) {\n            return new ArrayList<>();\n        }\n        Map<Character, Integer> map = new HashMap<>();\n        for (char c : s.toCharArray()) {\n            map.put(c, map.getOrDefault(c, 0) + 1);\n        }\n        List<String> result = new ArrayList<>();\n        for (char c : s.toCharArray()) {\n            if (map.get(c) == n) {\n                result.add(c + \"\");\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String[] vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        int closest = Integer.MAX_VALUE;\n        for (int i = 0; i < vowels.length; i++) {\n            int diff = Math.abs(word.charAt(i) - vowels[i].charAt(0));\n            if (diff < closest) {\n                closest = diff;\n            }\n        }\n        return vowels[closest];\n    }\n\n    public List<String> partition(String s) {\n        List<String> result = new ArrayList<>();\n        if (s == null || s.length() == 0) {\n            return result;\n        }\n        String closest = getClosestVowel(s);\n        for (int i = 0; i < s.length(); i++) {\n            String sub = s.substring(0, i) + closest + s.substring(i + 1);\n            if (sub.equals(s)) {\n                result.add(sub);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String vowels = \"aeiou\";\n        String closestVowel = \"\";\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < vowels.length(); i++) {\n            int diff = Math.abs(word.charAt(i) - vowels.charAt(i));\n            if (diff < min) {\n                min = diff;\n                closestVowel = vowels.charAt(i);\n            }\n        }\n        return closestVowel;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String vowels = \"aeiou\";\n        String closestVowel = \"\";\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < word.length(); i++) {\n            if (vowels.indexOf(word.charAt(i)) != -1) {\n                if (Math.abs(word.charAt(i) - 'a') < min) {\n                    min = Math.abs(word.charAt(i) - 'a');\n                    closestVowel = word.charAt(i) + \"\";\n                }\n            }\n        }\n        return closestVowel;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String vowels = \"aeiou\";\n        String closestVowel = \"\";\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < vowels.length(); i++) {\n            int count = 0;\n            for (int j = 0; j < word.length(); j++) {\n                if (word.charAt(j) == vowels.charAt(i)) {\n                    count++;\n                }\n            }\n            if (count < min) {\n                min = count;\n                closestVowel = vowels.charAt(i);\n            }\n        }\n        return closestVowel;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String result = \"\";\n        char[] arr = word.toCharArray();\n        Arrays.sort(arr);\n        for (int i = 0; i < arr.length; i++) {\n            if (arr[i] == 'a' || arr[i] == 'e' || arr[i] == 'i' || arr[i] == 'o' || arr[i] == 'u') {\n                result = arr[i] + \"\";\n                break;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String[] vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        String closestVowel = \"\";\n        int closestVowelDistance = Integer.MAX_VALUE;\n        for (String vowel : vowels) {\n            int distance = 0;\n            for (int i = 0; i < word.length(); i++) {\n                if (word.charAt(i) == vowel) {\n                    distance++;\n                }\n            }\n            if (distance < closestVowelDistance) {\n                closestVowelDistance = distance;\n                closestVowel = vowel;\n            }\n        }\n        return closestVowel;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String closestVowel = \"\";\n        int closestVowelIndex = 0;\n        for (int i = 0; i < word.length(); i++) {\n            if (word.charAt(i) == 'a' || word.charAt(i) == 'e' || word.charAt(i) == 'i' || word.charAt(i) == 'o' || word.charAt(i) == 'u') {\n                if (i == 0) {\n                    closestVowel = \"a\";\n                    closestVowelIndex = 0;\n                } else if (word.charAt(i - 1) == 'a' || word.charAt(i - 1) == 'e' || word.charAt(i - 1) == 'i' || word.charAt(i - 1) == 'o' || word.charAt(i - 1) == 'u') {\n                    closestVowel = \"a\";\n                    closestVowelIndex = i;\n                } else if (word.charAt(i - 1) == 'e' || word.charAt(i - 1) == 'i' || word.charAt(i - 1) == 'o' || word.charAt(i - 1) == 'u') {\n                    closestVowel = \"e\";\n                    closestVowelIndex = i;\n                } else if (word.charAt(i - 1) == 'i' || word.charAt(i - 1) == 'o' || word.charAt(i - 1) == 'u') {\n                    closestVowel = \"i\";\n                    closestVowelIndex = i;\n                } else if (word.charAt(i - 1) == 'o' || word.charAt(i - 1) == 'u') {\n                    closestVowel = \"o\";\n                    closestVowelIndex = i;\n                } else if (word.charAt(i - 1) == 'u') {\n                    closestVowel = \"u\";\n                    closestVowelIndex = i;\n                }\n            }\n        }\n        return closestVowel;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String vowels = \"aeiou\";\n        String closestVowel = \"\";\n        int closestVowelDistance = Integer.MAX_VALUE;\n        for (int i = 0; i < word.length(); i++) {\n            if (vowels.indexOf(word.charAt(i)) != -1) {\n                int distance = Math.abs(word.charAt(i) - 'a');\n                if (distance < closestVowelDistance) {\n                    closestVowelDistance = distance;\n                    closestVowel = word.charAt(i) + \"\";\n                }\n            }\n        }\n        return closestVowel;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String vowels = \"aeiou\";\n        String closestVowel = \"\";\n        int closestVowelDistance = Integer.MAX_VALUE;\n        for (int i = 0; i < word.length(); i++) {\n            if (vowels.indexOf(word.charAt(i)) != -1) {\n                int distance = Math.abs(word.charAt(i) - 'a');\n                if (distance < closestVowelDistance) {\n                    closestVowelDistance = distance;\n                    closestVowel = word.charAt(i) + \"\";\n                }\n            }\n        }\n        return closestVowel;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String ans = \"\";\n        char[] ch = word.toCharArray();\n        for(int i = 0; i < ch.length; i++) {\n            char c = ch[i];\n            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                ans = c + \"\";\n                break;\n            }\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        HashMap<Character, Integer> map = new HashMap<>();\n        map.put('a', 1);\n        map.put('e', 1);\n        map.put('i', 1);\n        map.put('o', 1);\n        map.put('u', 1);\n        map.put('A', 1);\n        map.put('E', 1);\n        map.put('I', 1);\n        map.put('O', 1);\n        map.put('U', 1);\n        char[] wordArr = word.toCharArray();\n        int min = Integer.MAX_VALUE;\n        char minChar = 'a';\n        for (char c : wordArr) {\n            if (map.containsKey(c)) {\n                int freq = map.get(c);\n                if (freq < min) {\n                    min = freq;\n                    minChar = c;\n                }\n            }\n        }\n        return minChar + \"\";\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String answer = \"\";\n        char[] wordArray = word.toCharArray();\n        for (int i = 0; i < wordArray.length; i++) {\n            if (wordArray[i] == 'a' || wordArray[i] == 'e' || wordArray[i] == 'i' || wordArray[i] == 'o' || wordArray[i] == 'u') {\n                answer = wordArray[i] + \"\";\n            }\n        }\n        return answer;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String closestVowel = \"\";\n        int closestVowelCount = 0;\n        for (int i = 0; i < word.length(); i++) {\n            if (word.charAt(i) == 'a' || word.charAt(i) == 'e' || word.charAt(i) == 'i' || word.charAt(i) == 'o' || word.charAt(i) == 'u') {\n                if (word.charAt(i) == 'a') {\n                    closestVowelCount++;\n                } else if (word.charAt(i) == 'e') {\n                    closestVowelCount++;\n                } else if (word.charAt(i) == 'i') {\n                    closestVowelCount++;\n                } else if (word.charAt(i) == 'o') {\n                    closestVowelCount++;\n                } else if (word.charAt(i) == 'u') {\n                    closestVowelCount++;\n                }\n            }\n        }\n        if (closestVowelCount == 0) {\n            closestVowel = \"a\";\n        } else if (closestVowelCount == 1) {\n            closestVowel = \"e\";\n        } else if (closestVowelCount == 2) {\n            closestVowel = \"i\";\n        } else if (closestVowelCount == 3) {\n            closestVowel = \"o\";\n        } else if (closestVowelCount == 4) {\n            closestVowel = \"u\";\n        }\n        return closestVowel;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        char[] wordArray = word.toCharArray();\n        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        int min = Integer.MAX_VALUE;\n        String closestVowel = \"\";\n        for (int i = 0; i < wordArray.length; i++) {\n            if (vowels[0] == wordArray[i]) {\n                min = i;\n                closestVowel = \"a\";\n            }\n            if (vowels[1] == wordArray[i]) {\n                min = i;\n                closestVowel = \"e\";\n            }\n            if (vowels[2] == wordArray[i]) {\n                min = i;\n                closestVowel = \"i\";\n            }\n            if (vowels[3] == wordArray[i]) {\n                min = i;\n                closestVowel = \"o\";\n            }\n            if (vowels[4] == wordArray[i]) {\n                min = i;\n                closestVowel = \"u\";\n            }\n        }\n        return closestVowel;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String[] vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        String[] vowels2 = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"};\n        String[] vowels3 = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"a\"};\n        String[] vowels4 = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"a\", \"a\"};\n        String[] vowels5 = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"a\", \"a\", \"a\"};\n        String[] vowels6 = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"a\", \"a\", \"a\", \"a\"};\n        String[] vowels7 = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"a\", \"a\", \"a\", \"a\", \"a\"};\n        String[] vowels8 = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"};\n        String[] vowels9 = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"};\n        String[] vowels10 = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"};\n        String[] vowels11 = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"};\n        String[] vowels12 = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"};\n        String[] vowels13 = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"};\n        String[] vowels14 = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"};\n        String[] vowels15 = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"};\n        String[] vowels16 = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"};\n        String[] vowels17 = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"};\n        String[] vowels18 = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"};\n        String[] vowels19 = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"};\n        String[] vowels20 = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"};\n        String[] vowels21 = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"};\n        String[] vowels22 = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"};\n        String[] vowels23 = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"};\n        String[] vowels24 = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"};\n        String[] vowels25 = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"};\n        String[] vowels26 = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String[] vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        String[] vowels2 = {\"A\", \"E\", \"I\", \"O\", \"U\"};\n        String[] vowels3 = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        String[] vowels4 = {\"A\", \"E\", \"I\", \"O\", \"U\"};\n        String[] vowels5 = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        String[] vowels6 = {\"A\", \"E\", \"I\", \"O\", \"U\"};\n        String[] vowels7 = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        String[] vowels8 = {\"A\", \"E\", \"I\", \"O\", \"U\"};\n        String[] vowels9 = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        String[] vowels10 = {\"A\", \"E\", \"I\", \"O\", \"U\"};\n        String[] vowels11 = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        String[] vowels12 = {\"A\", \"E\", \"I\", \"O\", \"U\"};\n        String[] vowels13 = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        String[] vowels14 = {\"A\", \"E\", \"I\", \"O\", \"U\"};\n        String[] vowels15 = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        String[] vowels16 = {\"A\", \"E\", \"I\", \"O\", \"U\"};\n        String[] vowels17 = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        String[] vowels18 = {\"A\", \"E\", \"I\", \"O\", \"U\"};\n        String[] vowels19 = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        String[] vowels20 = {\"A\", \"E\", \"I\", \"O\", \"U\"};\n        String[] vowels21 = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        String[] vowels22 = {\"A\", \"E\", \"I\", \"O\", \"U\"};\n        String[] vowels23 = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        String[] vowels24 = {\"A\", \"E\", \"I\", \"O\", \"U\"};\n        String[] vowels25 = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        String[] vowels26 = {\"A\", \"E\", \"I\", \"O\", \"U\"};\n        String[] vowels27 = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        String[] vowels28 = {\"A\", \"E\", \"I\", \"O\", \"U\"};\n        String[] vowels29 = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        String[] vowels30 = {\"A\", \"E\", \"I\", \"O\", \"U\"};\n        String[] vowels31 = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        String[] vowels32 = {\"A\", \"E\", \"I\", \"O\", \"U\"};\n        String[] vowels33 = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        String[] vowels34 = {\"A\", \"E\", \"I\", \"O\", \"U\"};\n        String[] vowels35 = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        String[] vowels36 = {\"A\", \"E\", \"I\", \"O\", \"U\"};\n        String[] vowels37 = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        String[] vowels38 = {\"A\", \"E\", \"I\", \"O\", \"U\"};\n        String[] vowels39 = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        String[] vowels40 = {\"A\", \"E\", \"I\", \"O\", \"U\"};\n        String[] vowels41 = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        String[] vowels42 = {\"A\", \"E\", \"I\", \"O\", \"U\"};\n        String[] vowels43 = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        String[] vowels44 = {\"A\", \"E\", \"I\", \"O\", \"U\"};\n        String[] vowels45 = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        String[] vowels46 = {\"A\", \"E\", \"I\", \"O\", \"U\"};\n        String[] vowels47 = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        String[] vowels48 = {\"A\", \"E\", \"I\", \"O\", \"U\"};\n        String[] vowels49 = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        String[] vowels50 = {\"A\", \"E\", \"I\", \"O\", \"U\"};\n        String[] vowels51 = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        String[] vowels52 = {\"A\", \"E\", \"I\", \"O\", \"U\"};\n        String[] vowels53 = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        String[] vowels54 = {\"A\", \"E\", \"I\", \"O\", \"U\"};\n        String[] vowels55 = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        String[] vowels56 = {\"A\", \"E\", \"I\", \"O\", \"U\"};\n        String[] vowels57 = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        String[] vowels58 = {\"A\", \"E\", \"I\", \"O\", \"U\"};\n        String[] vowels59 = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        String[] vowels60 = {\"A\", \"E\", \"I\", \"O\", \"U\"};\n        String[] vowels61 = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        String[] vowels62 = {\"A\", \"E\", \"I\", \"O\", \"U\"};\n        String[] vowels63 = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        String[] vowels64 = {\"A\", \"E\", \"I\", \"O\", \"U\"};\n        String[] vowels65 = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        String[] vowels66 = {\"A\", \"E\", \"I\", \"O\", \"U\"};\n        String[] vowels67 = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        String[] vowels68 = {\"A\", \"E\", \"I\", \"O\", \"U\"};\n        String[] vowels69 = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        String[] vowels70 = {\"A\", \"E\", \"I\", \"O\", \"U\"}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String vowels = \"aeiou\";\n        String closestVowel = \"\";\n        int closestVowelDistance = Integer.MAX_VALUE;\n        \n        for(int i = 0; i < word.length(); i++) {\n            if(vowels.indexOf(word.charAt(i)) != -1) {\n                int distance = Math.abs(word.charAt(i) - 'a');\n                if(distance < closestVowelDistance) {\n                    closestVowelDistance = distance;\n                    closestVowel = word.charAt(i) + \"\";\n                }\n            }\n        }\n        \n        return closestVowel;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String vowel = \"a\";\n        String closestVowel = \"a\";\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < word.length(); i++) {\n            if (word.charAt(i) == 'a') {\n                min = i;\n            }\n        }\n        if (word.charAt(min) == 'a') {\n            closestVowel = \"a\";\n        } else if (word.charAt(min) == 'e') {\n            closestVowel = \"e\";\n        } else if (word.charAt(min) == 'i') {\n            closestVowel = \"i\";\n        } else if (word.charAt(min) == 'o') {\n            closestVowel = \"o\";\n        } else if (word.charAt(min) == 'u') {\n            closestVowel = \"u\";\n        }\n        return closestVowel;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String vowels = \"aeiou\";\n        String closestVowel = \"\";\n        for (int i = 0; i < word.length(); i++) {\n            if (vowels.indexOf(word.charAt(i)) != -1) {\n                closestVowel = word.charAt(i) + closestVowel;\n            }\n        }\n        return closestVowel;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String closestVowel = \"a\";\n        if (word.length() == 1) {\n            return word;\n        }\n        for (int i = 0; i < word.length(); i++) {\n            if (word.charAt(i) == 'a' || word.charAt(i) == 'e' || word.charAt(i) == 'i' || word.charAt(i) == 'o' || word.charAt(i) == 'u') {\n                closestVowel = word.charAt(i) + closestVowel;\n            }\n        }\n        return closestVowel;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : lst) {\n            if (s.equals(\"(\")) {\n                sb.append(\"(\");\n            } else if (s.equals(\")\")) {\n                sb.append(\")\");\n            } else {\n                sb.append(s);\n            }\n        }\n        return sb.toString();\n    }\n\n    public int longestCommonSubsequence(String s1, String s2) {\n        int[][] dp = new int[s1.length() + 1][s2.length() + 1];\n        for (int i = 0; i <= s1.length(); i++) {\n            for (int j = 0; j <= s2.length(); j++) {\n                if (i == 0 || j == 0) {\n                    dp[i][j] = 0;\n                } else if (s1.charAt(i - 1) == s2.charAt(j - 1)) {\n                    dp[i][j] = 1 + dp[i - 1][j - 1];\n                } else {\n                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n        return dp[s1.length()][s2.length()];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        String res = \"\";\n        for (String s : lst) {\n            if (s.equals(\"(\")) {\n                res += \"()\";\n            } else if (s.equals(\")\")) {\n                res += \"()\";\n            } else {\n                res += \"(\" + s + \")\";\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        String str = \"\";\n        for (String s : lst) {\n            str += s;\n        }\n        return str;\n    }\n\n    public int lengthOfLongestSubstring(String s) {\n        int n = s.length();\n        int[] map = new int[256];\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            map[s.charAt(i)]++;\n            max = Math.max(max, map[s.charAt(i)]);\n        }\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n            if (map[s.charAt(i)] == max) {\n                ans = Math.max(ans, i - ans + 1);\n            }\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        Stack<Character> stack = new Stack<>();\n        for (String s : lst) {\n            if (s.equals(\"(\")) {\n                stack.push('(');\n            } else if (s.equals(\")\")) {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return \"NO\";\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty() ? \"YES\" : \"NO\";\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        String str = \"\";\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).equals(\"(\")) {\n                str += \"0\";\n            } else {\n                str += \"1\";\n            }\n        }\n        return str;\n    }\n\n    public int maxProfit(int[] prices) {\n        int max = 0;\n        int len = prices.length;\n        for (int i = 0; i < len; i++) {\n            for (int j = i + 1; j < len; j++) {\n                if (prices[i] < prices[j]) {\n                    max = Math.max(max, prices[j] - prices[i]);\n                }\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        String str = \"\";\n        for (String s : lst) {\n            str += s;\n        }\n        return str;\n    }\n\n    public ListNode copyRandomList(ListNode headA, ListNode headB) {\n        if (headA == null) {\n            return headB;\n        }\n\n        ListNode newHead = new ListNode(0);\n        ListNode cur = newHead;\n        while (headA != null) {\n            cur.next = new ListNode(headA.val);\n            cur = cur.next;\n            headA = headA.next;\n        }\n\n        cur.next = headB;\n        return newHead.next;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        if(lst.size() == 0)\n            return \"\";\n        String res = \"\";\n        Stack<Character> stack = new Stack<Character>();\n        for(String s : lst) {\n            if(s.equals(\"(\"))\n                stack.push('(');\n            else if(s.equals(\")\")) {\n                if(stack.isEmpty())\n                    return \"\";\n                else\n                    stack.pop();\n            }\n            else\n                res += s;\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        int open = 0;\n        int close = 0;\n        for (String s : lst) {\n            if (s.equals(\"(\")) {\n                open++;\n            } else if (s.equals(\")\")) {\n                close++;\n            }\n        }\n        if (open == close) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        String str = \"\";\n        for (String s : lst) {\n            if (s.equals(\"(\")) {\n                str += \"()\";\n            } else if (s.equals(\")\")) {\n                str += \"()\";\n            } else if (s.equals(\"{\")) {\n                str += \"()\";\n            } else if (s.equals(\"}\")) {\n                str += \"()\";\n            } else if (s.equals(\"[\") || s.equals(\"]\")) {\n                str += \"()\";\n            } else if (s.equals(\"?\")) {\n                str += \"()\";\n            } else if (s.equals(\"*\")) {\n                str += \"()\";\n            } else if (s.equals(\"+\")) {\n                str += \"()\";\n            } else if (s.equals(\"(\") || s.equals(\")\")) {\n                str += \"()\";\n            } else if (s.equals(\"{\") || s.equals(\"}\")) {\n                str += \"()\";\n            } else if (s.equals(\"[\") || s.equals(\"]\")) {\n                str += \"()\";\n            } else if (s.equals(\"?\")) {\n                str += \"()\";\n            } else if (s.equals(\"*\")) {\n                str += \"()\";\n            } else if (s.equals(\"+\")) {\n                str += \"()\";\n            } else {\n                str += \"()\";\n            }\n        }\n        return str;\n    }\n\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        if(lst.size() == 0)\n            return \"\";\n        String str = lst.get(0);\n        for(int i = 1; i < lst.size(); i++) {\n            if(lst.get(i).charAt(0) == '(')\n                str += lst.get(i);\n            else if(lst.get(i).charAt(0) == ')') {\n                if(str.length() == 0)\n                    return \"\";\n                str = str.substring(0, str.length() - 1);\n            }\n        }\n        return str;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        if (lst.size() == 0) {\n            return \"\";\n        }\n        String ans = \"\";\n        int n = lst.size();\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = Integer.parseInt(lst.get(i));\n        }\n        Arrays.sort(arr);\n        int l = 0, r = n - 1;\n        while (l < r) {\n            int sum = arr[l] + arr[r];\n            if (sum == target) {\n                ans = lst.get(l) + \" \" + lst.get(r);\n                l++;\n                r--;\n            } else if (sum < target) {\n                l++;\n            } else {\n                r--;\n            }\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        String s = \"\";\n        for(String str : lst) {\n            if(str.equals(\"(\")) {\n                s += \"()\";\n            }\n            else if(str.equals(\"[\")) {\n                s += \"[]\";\n            }\n            else if(str.equals(\"{\")) {\n                s += \"{}\";\n            }\n            else {\n                s += str;\n            }\n        }\n        return s;\n    }\n}\n\n// Test case\npublic class MatchParensTest {\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        if(lst.size() == 0)\n            return \"\";\n        String s = lst.get(0);\n        for(int i = 1; i < lst.size(); i++) {\n            if(lst.get(i).charAt(0) != '(')\n                return \"\";\n            s = \"(\" + s;\n        }\n        return s;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        String str = \"\";\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).equals(\"(\")) {\n                str += \"(\";\n            } else if (lst.get(i).equals(\")\")) {\n                str += \")\";\n            } else {\n                str += lst.get(i);\n            }\n        }\n        return str;\n    }\n\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        if (lst.size() == 0) {\n            return \"\";\n        }\n        String ans = \"\";\n        Stack<Character> stack = new Stack<>();\n        for (String s : lst) {\n            if (s.equals(\"(\")) {\n                stack.push('(');\n            } else if (s.equals(\")\")) {\n                if (stack.isEmpty()) {\n                    return \"\";\n                }\n                stack.pop();\n            } else {\n                ans += s;\n            }\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        Stack<Character> stack = new Stack<>();\n        for (String s : lst) {\n            if (s.equals(\"(\")) {\n                stack.push('(');\n            } else if (s.equals(\")\")) {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return \"NO\";\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty() ? \"YES\" : \"NO\";\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        Stack<Character> stack = new Stack<>();\n        for (String s : lst) {\n            if (s.equals(\"(\")) {\n                stack.push('(');\n            } else if (s.equals(\")\")) {\n                if (stack.isEmpty()) {\n                    return \"NO\";\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty() ? \"YES\" : \"NO\";\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        if (lst.size() == 0) {\n            return \"\";\n        }\n        String s = lst.get(0);\n        lst.remove(0);\n        String left = matchParens(lst);\n        String right = matchParens(lst);\n        if (left.length() == 0) {\n            return right;\n        }\n        if (right.length() == 0) {\n            return left;\n        }\n        if (s.charAt(0) == '(') {\n            return \"(\" + left + right;\n        }\n        if (s.charAt(0) == ')') {\n            return \"(\" + right + left;\n        }\n        return \"(\" + left + s + right;\n    }\n\n    public boolean isMatch(String s, String p) {\n        if (p.length() == 0) {\n            return s.length() == 0;\n        }\n        if (p.charAt(0) == '*') {\n            return isMatch(s, p.substring(1)) || isMatch(s, p);\n        }\n        if (p.charAt(0) == '?') {\n            return isMatch(s, p.substring(1)) || s.length() == 0;\n        }\n        if (p.charAt(0) == '+') {\n            return isMatch(s, p.substring(1)) || isMatch(s, p);\n        }\n        if (p.charAt(0) == ']') {\n            return s.charAt(0) == '[' && isMatch(s.substring(1), p.substring(1));\n        }\n        if (p.charAt(0) == '[') {\n            return s.charAt(0) == '[' && isMatch(s.substring(1), p.substring(1));\n        }\n        if (p.charAt(0) == '^') {\n            return s.charAt(0) == '^' && isMatch(s.substring(1), p.substring(1));\n        }\n        if (p.charAt(0) == '$') {\n            return s.charAt(s.length() - 1) == '$' && isMatch(s.substring(0, s.length() - 1), p.substring(1));\n        }\n        if (p.charAt(0) == '.') {\n            return s.charAt(0) == '.' && isMatch(s.substring(1), p.substring(1));\n        }\n        if (p.charAt(0) == '|') {\n            return s.charAt(0) == '.' && isMatch(s.substring(1), p.substring(1));\n        }\n        if (p.charAt(0) == '\\\\') {\n            return s.charAt(0) == '\\\\' && isMatch(s.substring(1), p.substring(1));\n        }\n        if (p.charAt(0) == '!') {\n            return s.charAt(0) == '!' && isMatch(s.substring(1), p.substring(1));\n        }\n        if (p.charAt(0) == '(') {\n            return s.charAt(0) == '(' && isMatch(s.substring(1), p.substring(1));\n        }\n        if (p.charAt(0) == ')') {\n            return s.charAt(0) == ')' && isMatch(s.substring(1), p.substring(1));\n        }\n        if (p.charAt(0) == '{') {\n            return s.charAt(0) == '{' && isMatch(s.substring(1), p.substring(1));\n        }\n        if (p.charAt(0) == '}') {\n            return s.charAt(0) == '}' && isMatch(s.substring(1), p.substring(1));\n        }\n        if (p.charAt(0) == ':') {\n            return s.charAt(0) == ':' && isMatch(s.substring(1), p.substring(1));\n        }\n        if (p.charAt(0) == ';') {\n            return s.charAt(0) == ';' && isMatch(s.substring(1), p.substring(1));\n        }\n        if (p.charAt(0) == ',') {\n            return s.charAt(0) == ',' && isMatch(s.substring(1), p.substring(1));\n        }\n        if (p.charAt(0) == '?') {\n            return s.charAt(0) == '?' && isMatch(s.substring(1), p.substring(1));\n        }\n        if (p.charAt(0) == '*') {\n            return s.charAt(0) == '*' && isMatch(s.substring(1), p.substring(1));\n        }\n        if (p.charAt(0) == '+') {\n            return s.charAt(0) == '+' && isMatch(s.substring(1), p.substring(1));\n        }\n        if (p.charAt(0) == '|') {\n            return s.charAt(0) == '|' && isMatch(s.substring(1), p.substring(1));\n        }\n        if (p.charAt(0) == '^') {\n            return s.charAt(0) == '^' && isMatch(s.substring(1), p.substring(1));\n        }\n        if (p.charAt(0) == '$') {\n            return s.charAt(s.length() - 1) == '$' && isMatch(s.substring(0, s.length() - 1), p.substring(1));\n        }\n        if (p.charAt(0) == '.') {\n            return s.charAt(0) == '.' && isMatch(s.substring(1), p.substring(1));\n        }\n        if (p.charAt(0) == '!') {\n            return s.charAt(0) == '!' && isMatch(s.substring(1), p.substring(1));\n        }\n        if (p.charAt(0) == '(') {\n            return s.charAt(0) == '(' && isMatch(s.substring(1), p.substring(1));\n        }\n        if (p.charAt(0) == ')') {\n            return s.charAt(0) == ')' && isMatch(s.substring(1), p.substring(1));\n        }\n        if (p.charAt(0) == '{') {\n            return s.charAt(0) == '{' && isMatch(s.substring(1), p.substring(1));\n        }\n        if (p.charAt(0) == '}') {\n            return s.charAt(0) == '}' && isMatch(s.substring(1), p.substring(1));\n        }\n        if (p.charAt(0) == ':') {\n            return s.charAt(0) == ':' && isMatch(s.substring(1), p.substring(1));\n        }\n        if (p.charAt(0) == ';') {\n            return s.charAt(0) == ';' && isMatch(s.substring(1), p.substring(1));\n        }\n        if (p.charAt(0) == ',') {\n            return s.charAt(0) == ',' && isMatch(s.substring(1), p.substring(1));\n        }\n        if (p.charAt(0) == '?') {\n            return s.charAt(0) == '?' && isMatch(s.substring(1), p.substring(1));\n        }\n        if (p.charAt(0) == '*') {\n            return s.charAt(0) == '*' && isMatch(s.substring(1), p.substring(1));\n        }\n        if (p.charAt(0) == '+') {\n            return s.charAt(0) == '+' && isMatch(s.substring(1), p.substring(1));\n        }\n        if (p.charAt(0) == '|') {\n            return s.charAt(0) == '|' && isMatch(s.substring(1), p.substring(1));\n        }\n        if (p.charAt(0) == '^') {\n            return s.charAt(0) == '^' && isMatch(s.substring(1), p.substring(1));\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        String s = \"\";\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).equals(\"(\")) {\n                s += \"()\";\n            } else {\n                s += lst.get(i);\n            }\n        }\n        return s;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        String str = \"\";\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).equals(\"(\")) {\n                str += \"(\";\n            } else if (lst.get(i).equals(\")\")) {\n                str += \")\";\n            } else {\n                str += lst.get(i);\n            }\n        }\n        return str;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        if (k == 0) {\n            return List.of();\n        }\n        \n        List<Integer> result = new ArrayList<>();\n        int max = arr.get(0);\n        int count = 1;\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) > max) {\n                max = arr.get(i);\n                count = 1;\n            } else if (arr.get(i) == max) {\n                count++;\n            } else {\n                result.add(max);\n                result.add(count);\n                max = arr.get(i);\n                count = 1;\n            }\n        }\n        result.add(max);\n        result.add(count);\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        if (k == 0) {\n            return List.of();\n        }\n        \n        List<List<Integer>> result = new ArrayList<>();\n        \n        for (int i = 0; i < arr.size(); i++) {\n            List<Integer> subset = new ArrayList<>();\n            subset.add(arr.get(i));\n            result.add(subset);\n        }\n        \n        for (int i = 0; i < result.size(); i++) {\n            List<Integer> subset = new ArrayList<>();\n            subset.add(result.get(i).get(0));\n            result.add(subset);\n        }\n        \n        for (int i = 0; i < result.size(); i++) {\n            List<Integer> subset = new ArrayList<>();\n            subset.add(result.get(i).get(0));\n            subset.add(result.get(i).get(1));\n            result.add(subset);\n        }\n        \n        for (int i = 0; i < result.size(); i++) {\n            List<Integer> subset = new ArrayList<>();\n            subset.add(result.get(i).get(0));\n            subset.add(result.get(i).get(1));\n            subset.add(result.get(i).get(2));\n            result.add(subset);\n        }\n        \n        for (int i = 0; i < result.size(); i++) {\n            List<Integer> subset = new ArrayList<>();\n            subset.add(result.get(i).get(0));\n            subset.add(result.get(i).get(1));\n            subset.add(result.get(i).get(2));\n            subset.add(result.get(i).get(3));\n            result.add(subset);\n        }\n        \n        for (int i = 0; i < result.size(); i++) {\n            List<Integer> subset = new ArrayList<>();\n            subset.add(result.get(i).get(0));\n            subset.add(result.get(i).get(1));\n            subset.add(result.get(i).get(2));\n            subset.add(result.get(i).get(3));\n            subset.add(result.get(i).get(4));\n            result.add(subset);\n        }\n        \n        for (int i = 0; i < result.size(); i++) {\n            List<Integer> subset = new ArrayList<>();\n            subset.add(result.get(i).get(0));\n            subset.add(result.get(i).get(1));\n            subset.add(result.get(i).get(2));\n            subset.add(result.get(i).get(3));\n            subset.add(result.get(i).get(4));\n            subset.add(result.get(i).get(5));\n            result.add(subset);\n        }\n        \n        for (int i = 0; i < result.size(); i++) {\n            List<Integer> subset = new ArrayList<>();\n            subset.add(result.get(i).get(0));\n            subset.add(result.get(i).get(1));\n            subset.add(result.get(i).get(2));\n            subset.add(result.get(i).get(3));\n            subset.add(result.get(i).get(4));\n            subset.add(result.get(i).get(5));\n            subset.add(result.get(i).get(6));\n            result.add(subset);\n        }\n        \n        for (int i = 0; i < result.size(); i++) {\n            List<Integer> subset = new ArrayList<>();\n            subset.add(result.get(i).get(0));\n            subset.add(result.get(i).get(1));\n            subset.add(result.get(i).get(2));\n            subset.add(result.get(i).get(3));\n            subset.add(result.get(i).get(4));\n            subset.add(result.get(i).get(5));\n            subset.add(result.get(i).get(6));\n            subset.add(result.get(i).get(7));\n            result.add(subset);\n        }\n        \n        for (int i = 0; i < result.size(); i++) {\n            List<Integer> subset = new ArrayList<>();\n            subset.add(result.get(i).get(0));\n            subset.add(result.get(i).get(1));\n            subset.add(result.get(i).get(2));\n            subset.add(result.get(i).get(3));\n            subset.add(result.get(i).get(4));\n            subset.add(result.get(i).get(5));\n            subset.add(result.get(i).get(6));\n            subset.add(result.get(i).get(7));\n            subset.add(result.get(i).get(8));\n            result.add(subset);\n        }\n        \n        for (int i = 0; i < result.size(); i++) {\n            List<Integer> subset = new ArrayList<>();\n            subset.add(result.get(i).get(0));\n            subset.add(result.get(i).get(1));\n            subset.add(result.get(i).get(2));\n            subset.add(result.get(i).get(3));\n            subset.add(result.get(i).get(4));\n            subset.add(result.get(i).get(5));\n            subset.add(result.get(i).get(6));\n            subset.add(result.get(i).get(7));\n            subset.add(result.get(i).get(8));\n            subset.add(result.get(i).get(9));\n            result.add(subset);\n        }\n        \n        for (int i = 0; i < result.size(); i++) {\n            List<Integer> subset = new ArrayList<>();\n            subset.add(result.get(i).get(0));\n            subset.add(result.get(i).get(1));\n            subset.add(result.get(i).get(2));\n            subset.add(result.get(i).get(3));\n            subset.add(result.get(i).get(4));\n            subset.add(result.get(i).get(5));\n            subset.add(result.get(i).get(6));\n            subset.add(result.get(i).get(7));\n            subset.add(result.get(i).get(8));\n            subset.add(result.get(i).get(9));\n            subset.add(result.get(i).get(10));\n            result.add(subset);\n        }\n        \n        for (int i = 0; i < result.size(); i++) {\n            List<Integer> subset = new ArrayList<>();\n            subset.add(result.get(i).get(0));\n            subset.add(result.get(i).get(1));\n            subset.add(result.get(i).get(2));\n            subset.add(result.get(i).get(3));\n            subset.add(result.get(i).get(4));\n            subset.add(result.get(i).get(5));\n            subset.add(result.get(i).get(6));\n            subset.add(result.get(i).get(7));\n            subset.add(result.get(i).get(8));\n            subset.add(result.get(i).get(9));\n            subset.add(result.get(i).get(10));\n            subset.add(result.get(i).get(11));\n            result.add(subset);\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        if (k == 0) {\n            return List.of();\n        }\n        \n        int n = arr.size();\n        int[] dp = new int[n];\n        Arrays.fill(dp, Integer.MIN_VALUE);\n        \n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < k; j++) {\n                dp[i] = Math.max(dp[i], arr.get(i) + j);\n            }\n        }\n        \n        List<Integer> res = new ArrayList<>();\n        for (int i = n - 1; i >= 0; i--) {\n            res.add(dp[i]);\n        }\n        \n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        List<Integer> res = new ArrayList<>();\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        for (int i = 0; i < k; i++) {\n            res.add(arrCopy[i]);\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        if (k == 0) {\n            return List.of();\n        }\n        \n        int i = 0;\n        int j = 1;\n        while (j < arr.size()) {\n            if (arr.get(j) == arr.get(j - 1)) {\n                arr.remove(j);\n                j--;\n            } else {\n                j++;\n            }\n        }\n        \n        return arr;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        if (k == 0) {\n            return List.of();\n        }\n        \n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        \n        Arrays.sort(arrCopy);\n        int[] arrCopy2 = new int[k];\n        for (int i = 0; i < k; i++) {\n            arrCopy2[i] = arrCopy[i];\n        }\n        \n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            result.add(arrCopy2[i]);\n        }\n        \n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        List<Integer> ans = new ArrayList<>();\n        int n = arr.size();\n        int[] arr2 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr2[i] = arr.get(i);\n        }\n        Arrays.sort(arr2);\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (count == k) {\n                ans.add(arr2[i]);\n                count = 0;\n            } else {\n                count++;\n            }\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        if (k == 0) {\n            return List.of();\n        }\n        \n        int n = arr.size();\n        int[] dp = new int[n];\n        Arrays.fill(dp, Integer.MIN_VALUE);\n        dp[0] = arr.get(0);\n        \n        for (int i = 1; i < n; i++) {\n            dp[i] = Math.max(dp[i-1], arr.get(i));\n        }\n        \n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            res.add(dp[i]);\n        }\n        \n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        List<Integer> res = new ArrayList<>();\n        int n = arr.size();\n        int[] arr2 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr2[i] = arr.get(i);\n        }\n        Arrays.sort(arr2);\n        int i = 0;\n        int j = 0;\n        while (i < n && j < k) {\n            if (arr2[i] == arr2[j]) {\n                res.add(arr2[i]);\n                i++;\n                j++;\n            } else if (arr2[i] < arr2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        if (k == 0) {\n            return List.of();\n        }\n        \n        List<Integer> result = new ArrayList<>();\n        \n        Queue<TreeNode> queue = new LinkedList<>();\n        queue.add(root);\n        \n        while (!queue.isEmpty()) {\n            int size = queue.size();\n            for (int i = 0; i < size; i++) {\n                TreeNode node = queue.poll();\n                result.add(node.val);\n                if (node.left != null) {\n                    queue.add(node.left);\n                }\n                if (node.right != null) {\n                    queue.add(node.right);\n                }\n            }\n        }\n        \n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        if (k == 0) {\n            return List.of();\n        }\n        \n        int n = arr.size();\n        int[] dp = new int[n];\n        Arrays.fill(dp, Integer.MIN_VALUE);\n        \n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < k; j++) {\n                dp[i] = Math.max(dp[i], arr.get(i) + dp[i - j]);\n            }\n        }\n        \n        List<Integer> res = new ArrayList<>();\n        for (int i = n - 1; i >= 0; i--) {\n            res.add(dp[i]);\n        }\n        \n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        if (k == 0) {\n            return List.of();\n        }\n        int max = arr.get(0);\n        int min = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) > max) {\n                max = arr.get(i);\n            }\n            if (arr.get(i) < min) {\n                min = arr.get(i);\n            }\n        }\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) - min > k) {\n                result.add(arr.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        if (k == 0) {\n            return List.of();\n        }\n        \n        int n = arr.size();\n        int[] dp = new int[n];\n        Arrays.fill(dp, Integer.MIN_VALUE);\n        dp[0] = arr.get(0);\n        \n        for (int i = 1; i < n; i++) {\n            dp[i] = Math.max(dp[i - 1], arr.get(i));\n        }\n        \n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            res.add(dp[i]);\n        }\n        \n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        if (k == 0) {\n            return List.of();\n        }\n        \n        int max = arr.get(0);\n        int maxIndex = 0;\n        \n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) > max) {\n                max = arr.get(i);\n                maxIndex = i;\n            }\n        }\n        \n        List<Integer> result = new ArrayList<>();\n        result.add(max);\n        result.add(maxIndex);\n        \n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        if (k == 0) {\n            return List.of();\n        }\n        \n        List<Integer> result = new ArrayList<>();\n        int max = arr.get(0);\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > max) {\n                max = arr.get(i);\n            }\n        }\n        \n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == max) {\n                result.add(arr.get(i));\n            }\n        }\n        \n        for (int i = 0; i < k; i++) {\n            result.add(max);\n        }\n        \n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        if (k == 0) {\n            return List.of();\n        }\n        \n        int n = arr.size();\n        int[] dp = new int[n];\n        Arrays.fill(dp, Integer.MIN_VALUE);\n        dp[0] = arr.get(0);\n        \n        for (int i = 1; i < n; i++) {\n            dp[i] = Math.max(dp[i - 1], arr.get(i));\n        }\n        \n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            res.add(dp[i]);\n        }\n        \n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        if (k == 0) {\n            return List.of();\n        }\n        \n        int[] arrCopy = new int[arr.size()];\n        for (int i = 0; i < arr.size(); i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        \n        Arrays.sort(arrCopy);\n        \n        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 0; i < k; i++) {\n            result.add(arrCopy[i]);\n        }\n        \n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        List<Integer> res = new ArrayList<>();\n        int n = arr.size();\n        int[] arr2 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr2[i] = arr.get(i);\n        }\n        Arrays.sort(arr2);\n        int i = 0;\n        int j = k - 1;\n        while (i < j) {\n            if (arr2[i] == arr2[j]) {\n                i++;\n                j--;\n            } else if (arr2[i] > arr2[j]) {\n                res.add(arr2[i]);\n                i++;\n            } else {\n                res.add(arr2[j]);\n                j--;\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        if (k == 0) {\n            return List.of();\n        }\n        \n        int[] arrCopy = new int[arr.size()];\n        arr.toArray(arrCopy);\n        \n        Arrays.sort(arrCopy);\n        \n        int[] arrCopy2 = new int[k];\n        for (int i = 0; i < k; i++) {\n            arrCopy2[i] = arrCopy[i];\n        }\n        \n        return Arrays.asList(arrCopy2);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        if (k == 0) {\n            return List.of();\n        }\n        \n        List<Integer> pre = new ArrayList<>();\n        List<Integer> in = new ArrayList<>();\n        \n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == 0) {\n                pre.add(arr.get(i));\n            } else {\n                in.add(arr.get(i));\n            }\n        }\n        \n        List<Integer> pre1 = maximum(pre, k - 1);\n        List<Integer> in1 = maximum(in, k);\n        \n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < pre1.size(); i++) {\n            res.add(pre1.get(i));\n        }\n        for (int i = 0; i < in1.size(); i++) {\n            res.add(in1.get(i));\n        }\n        \n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        Collections.sort(lst);\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int result = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            result += lst.get(i);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int max = Integer.MIN_VALUE;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            sum += lst.get(i);\n            if (sum > max) {\n                max = sum;\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int max = Integer.MIN_VALUE;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            sum += lst.get(i);\n            if (sum > max) {\n                max = sum;\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int count = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(lst.get(i) == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int max = 0;\n        int min = 0;\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            sum += lst.get(i);\n            if(sum > max) {\n                max = sum;\n            }\n            if(sum < min) {\n                min = sum;\n            }\n        }\n        return max - min;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int result = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int sum = 0;\n            for (int j = 0; j < lst.size(); j++) {\n                if (i != j) {\n                    sum += lst.get(j);\n                }\n            }\n            if (sum == lst.get(i)) {\n                result++;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int n = lst.size();\n        int[] arr = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr[i] = lst.get(i);\n        }\n        Arrays.sort(arr);\n        int ans = 0;\n        for(int i = 0; i < n; i++) {\n            ans += arr[i];\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int count = 0;\n        int max = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == max) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        // write your code here\n        int count = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int count = 0;\n        int max = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == max) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int maxSum = 0;\n        int maxIndex = 0;\n        int minIndex = 0;\n        int minSum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i == 0) {\n                maxSum = lst.get(i);\n                maxIndex = i;\n            } else {\n                if (lst.get(i) > maxSum) {\n                    maxSum = lst.get(i);\n                    maxIndex = i;\n                }\n            }\n            if (i == lst.size() - 1) {\n                minSum = lst.get(i);\n                minIndex = i;\n            } else {\n                if (lst.get(i) < minSum) {\n                    minSum = lst.get(i);\n                    minIndex = i;\n                }\n            }\n        }\n        return maxSum - minSum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int n = arr.size();\n        int sum = 0;\n        int carry = 0;\n        for (int i = 0; i < n; i++) {\n            sum += arr.get(i);\n            carry += sum / 10;\n            sum %= 10;\n            if (i == n - 1 && carry != 0) {\n                sum += carry;\n            }\n            if (i == n - 1) {\n                return sum;\n            }\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int n = arr.size();\n        int[] arr2 = new int[n];\n        for(int i = 0; i < n; i++)\n            arr2[i] = arr.get(i);\n        Arrays.sort(arr2);\n        int ans = 0;\n        for(int i = 0; i < n; i++) {\n            if(i >= k)\n                break;\n            ans += arr2[i];\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int n = arr.size();\n        int sum = 0;\n        for(int i = 0; i < n; i++) {\n            sum += arr.get(i);\n        }\n        int diff = k - sum;\n        if(diff >= 0) {\n            return diff;\n        }\n        else {\n            return k + diff;\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int n = arr.size();\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += arr.get(i);\n        }\n        int ans = 0;\n        while (sum >= k) {\n            ans++;\n            sum -= k;\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int n = arr.size();\n        int sum = 0;\n        int carry = 0;\n        for (int i = 0; i < n; i++) {\n            sum += arr.get(i);\n            carry += sum / 10;\n            sum %= 10;\n        }\n        if (carry > 0) {\n            sum++;\n        }\n        if (k > 0) {\n            sum += k;\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int result = 0;\n        for (int i = arr.size() - 1; i >= 0; i--) {\n            result = result + arr.get(i);\n            if (i == k - 1) {\n                break;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int n = arr.size();\n        int[] arr2 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr2[i] = arr.get(i);\n        }\n        Arrays.sort(arr2);\n        int i = 0;\n        int j = 0;\n        int count = 0;\n        int sum = 0;\n        while(i < n && j < k) {\n            if(arr2[i] == arr2[j]) {\n                count++;\n                i++;\n                j++;\n            }\n            else if(arr2[i] < arr2[j]) {\n                i++;\n            }\n            else {\n                j++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        Set<Integer> set = new HashSet<>();\n        for (int i = 0; i < arr.size(); i++) {\n            if (set.contains(arr.get(i))) {\n                set.remove(arr.get(i));\n            } else {\n                set.add(arr.get(i));\n            }\n        }\n        return set.size();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int n = arr.size();\n        int sum = 0;\n        int carry = 0;\n        for(int i = n-1; i >= 0; i--) {\n            int temp = arr.get(i) + carry;\n            carry = temp/10;\n            sum = sum + temp%10;\n            if(i == k-1) {\n                return sum;\n            }\n        }\n        return sum + carry;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int n = arr.size();\n        int[] arr2 = new int[n];\n        for(int i = 0; i < n; i++)\n            arr2[i] = arr.get(i);\n        Arrays.sort(arr2);\n        int ans = 0;\n        for(int i = 0; i < n; i++) {\n            if(i >= k)\n                break;\n            ans += arr2[i];\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int n = arr.size();\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += arr.get(i);\n        }\n        int ans = 0;\n        while (sum >= k) {\n            sum -= k;\n            ans++;\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int carry = 0;\n        int sum = 0;\n        for(int i = arr.size() - 1; i >= 0; i--) {\n            int temp = arr.get(i) + carry;\n            carry = temp / 10;\n            sum = temp % 10 + sum;\n        }\n        if(carry == 1)\n            sum++;\n        if(sum >= k)\n            return sum - k;\n        else\n            return k - sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            int diff = arr.get(i) - arr.get(i + k);\n            if (diff > max) {\n                max = diff;\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int carry = 0;\n        int sum = 0;\n        int i = arr.size() - 1;\n        int j = arr.size() - 1;\n\n        while (i >= 0 || j >= 0) {\n            int sum = 0;\n            if (i >= 0) {\n                sum += arr.get(i);\n                i--;\n            }\n            if (j >= 0) {\n                sum += arr.get(j);\n                j--;\n            }\n            sum += carry;\n            carry = sum / 10;\n            sum %= 10;\n            result.next = new ListNode(sum);\n            result = result.next;\n        }\n        if (carry == 1) {\n            result.next = new ListNode(1);\n        }\n        return result.next;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int n = arr.size();\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += arr.get(i);\n        }\n        int count = 0;\n        while (sum >= k) {\n            sum -= k;\n            count++;\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int n = arr.size();\n        int[] arr2 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr2[i] = arr.get(i);\n        }\n        Arrays.sort(arr2);\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n            if (i >= k) {\n                break;\n            }\n            ans += arr2[i];\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int n = arr.size();\n        int[] dp = new int[n + 1];\n        dp[0] = 1;\n        for (int i = 1; i <= n; i++) {\n            dp[i] = dp[i - 1] + dp[i - 2];\n            if (dp[i] >= k) {\n                dp[i] -= k;\n                k = 0;\n            }\n        }\n        return dp[n];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int n = arr.size();\n        int sum = 0;\n        int carry = 0;\n        for(int i = 0; i < n; i++) {\n            sum += arr.get(i);\n            carry += sum / 10;\n            sum %= 10;\n        }\n        sum += carry;\n        sum %= 10;\n        if(sum == k) {\n            return 1;\n        }\n        return 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int n = arr.size();\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n            ans += arr.get(i);\n            if (ans >= k) {\n                ans -= k;\n                k = 0;\n            }\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int n = arr.size();\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += arr.get(i);\n        }\n        if (sum % k == 0) {\n            return sum / k;\n        } else {\n            return sum / k + 1;\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<>();\n        int i = 0;\n        while (n > 1) {\n            if (n % 2 == 0) {\n                n /= 2;\n            } else {\n                n = 3 * n + 1;\n            }\n            oddCollatz.add(i);\n            i++;\n        }\n        return oddCollatz;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<Integer>();\n        int i = 0;\n        while (n != 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n            oddCollatz.add(i);\n            i++;\n        }\n        return oddCollatz;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> result = new ArrayList<>();\n        int i = 0;\n        while (n > 1) {\n            if (n % 2 == 0) {\n                n /= 2;\n            } else {\n                n = 3 * n + 1;\n            }\n            result.add(i);\n            i++;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<>();\n        if (n <= 1) {\n            oddCollatz.add(n);\n            return oddCollatz;\n        }\n        int i = 1;\n        while (i < n) {\n            if (n % i == 0) {\n                oddCollatz.add(i);\n                n = n / i;\n            } else {\n                i++;\n            }\n        }\n        oddCollatz.add(n);\n        return oddCollatz;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<>();\n        int i = 1;\n        while (i <= n) {\n            if (i % 2 == 0) {\n                i = i / 2;\n            } else {\n                i = 3 * i + 1;\n            }\n            oddCollatz.add(i);\n        }\n        return oddCollatz;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> ans = new ArrayList<>();\n        int i = 1;\n        while (i <= n) {\n            if (i % 2 == 0) {\n                i = i / 2;\n            } else {\n                i = 3 * i + 1;\n            }\n            ans.add(i);\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> result = new ArrayList<>();\n        while (n > 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = n * 3 + 1;\n            }\n            result.add(n);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<>();\n        int i = 1;\n        while (i <= n) {\n            if (n % i == 0) {\n                oddCollatz.add(i);\n                n = n / i;\n            } else {\n                i++;\n            }\n        }\n        oddCollatz.add(n);\n        return oddCollatz;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> result = new ArrayList<>();\n        int i = 1;\n        while (i <= n) {\n            if (n % i == 0) {\n                result.add(i);\n                n = n / i;\n            } else {\n                i++;\n            }\n        }\n        result.add(n);\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<>();\n        int i = 1;\n        while(i <= n) {\n            if(n % i == 0) {\n                oddCollatz.add(i);\n                n = n / i;\n            } else {\n                i++;\n            }\n        }\n        oddCollatz.add(n);\n        return oddCollatz;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<>();\n        int i = 1;\n        while(i < n) {\n            if(n % i == 0) {\n                oddCollatz.add(i);\n                n /= i;\n            }\n            else {\n                i++;\n            }\n        }\n        if(n > 1) {\n            oddCollatz.add(n);\n        }\n        return oddCollatz;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<>();\n        int i = 0;\n        while(n > 1) {\n            if(n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n            oddCollatz.add(i);\n            i++;\n        }\n        return oddCollatz;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> odd_collatz = new ArrayList<Integer>();\n        if (n % 2 == 1) {\n            odd_collatz.add(n);\n        }\n        while (n > 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = n * 3 + 1;\n            }\n            if (n % 2 == 1) {\n                odd_collatz.add(n);\n            }\n        }\n        return odd_collatz;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<>();\n        int i = 1;\n        while (i <= n) {\n            if (n % i == 0) {\n                oddCollatz.add(i);\n                n = n / i;\n            } else {\n                i++;\n            }\n        }\n        oddCollatz.add(n);\n        return oddCollatz;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            oddCollatz.add(i);\n        }\n        for(int i = 0; i < oddCollatz.size(); i++) {\n            int current = oddCollatz.get(i);\n            int next = 2 * current;\n            while(next != current) {\n                oddCollatz.set(i, next);\n                next = 2 * current;\n            }\n        }\n        return oddCollatz;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> result = new ArrayList<>();\n        int i = 1;\n        while (i <= n) {\n            if (i % 2 == 1) {\n                result.add(i);\n            }\n            i = getNext(i);\n        }\n        return result;\n    }\n\n    public int getNext(int n) {\n        int result = 0;\n        while (n > 1) {\n            if (n % 2 == 1) {\n                result += 1;\n            }\n            n = n / 2;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> result = new ArrayList<>();\n        if (n == 0) return result;\n        int[] arr = new int[n];\n        arr[0] = 1;\n        int i = 1;\n        while (i < n) {\n            int j = 0;\n            while (i * 2 <= n && arr[i] * 2 <= n) {\n                arr[i] *= 2;\n                j++;\n            }\n            result.add(arr[i]);\n            i = j;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> result = new ArrayList<>();\n        int i = 1;\n        while (i <= n) {\n            if (n % i == 0) {\n                result.add(i);\n                n = n / i;\n            } else {\n                i++;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        \n        if (n % 2 == 1) {\n            odd_collatz.add(n);\n        }\n        while (n > 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = n * 3 + 1;\n            }\n            if (n % 2 == 1) {\n                odd_collatz.add(n);\n            }\n        }\n        \n        return odd_collatz;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<>();\n        int i = 1;\n        while (i <= n) {\n            if (n % i == 0) {\n                oddCollatz.add(i);\n                n = n / i;\n            } else {\n                i++;\n            }\n        }\n        oddCollatz.add(n);\n        return oddCollatz;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        String[] tokens = date.split(\"-\");\n        int year = Integer.parseInt(tokens[0]);\n        int month = Integer.parseInt(tokens[1]);\n        int day = Integer.parseInt(tokens[2]);\n        if (month < 1 || month > 12) return false;\n        if (day < 1 || day > 31) return false;\n        if (year < 1900 || year > 2099) return false;\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        String[] dateArr = date.split(\"-\");\n        int year = Integer.parseInt(dateArr[0]);\n        int month = Integer.parseInt(dateArr[1]);\n        int day = Integer.parseInt(dateArr[2]);\n        if (month < 1 || month > 12) return false;\n        if (day < 1 || day > 31) return false;\n        if (year < 1900 || year > 2020) return false;\n        if (month == 1 && day == 1 && year % 400 == 0) return false;\n        if (month == 1 && day == 1 && year % 100 == 0) return false;\n        if (month == 1 && day == 1 && year % 4 == 0) return false;\n        if (month == 2 && day == 29 && year % 4 == 0) return false;\n        if (month == 2 && day == 28 && year % 100 == 0) return false;\n        if (month == 2 && day == 28 && year % 400 == 0) return false;\n        if (month == 3 && day == 31 && year % 4 == 0) return false;\n        if (month == 3 && day == 30 && year % 100 == 0) return false;\n        if (month == 3 && day == 30 && year % 400 == 0) return false;\n        if (month == 4 && day == 31 && year % 4 == 0) return false;\n        if (month == 4 && day == 30 && year % 100 == 0) return false;\n        if (month == 4 && day == 30 && year % 400 == 0) return false;\n        if (month == 5 && day == 31 && year % 4 == 0) return false;\n        if (month == 5 && day == 30 && year % 100 == 0) return false;\n        if (month == 5 && day == 30 && year % 400 == 0) return false;\n        if (month == 6 && day == 31 && year % 4 == 0) return false;\n        if (month == 6 && day == 30 && year % 100 == 0) return false;\n        if (month == 6 && day == 30 && year % 400 == 0) return false;\n        if (month == 7 && day == 31 && year % 4 == 0) return false;\n        if (month == 7 && day == 30 && year % 100 == 0) return false;\n        if (month == 7 && day == 30 && year % 400 == 0) return false;\n        if (month == 8 && day == 31 && year % 4 == 0) return false;\n        if (month == 8 && day == 30 && year % 100 == 0) return false;\n        if (month == 8 && day == 30 && year % 400 == 0) return false;\n        if (month == 9 && day == 31 && year % 4 == 0) return false;\n        if (month == 9 && day == 30 && year % 100 == 0) return false;\n        if (month == 9 && day == 30 && year % 400 == 0) return false;\n        if (month == 10 && day == 31 && year % 4 == 0) return false;\n        if (month == 10 && day == 30 && year % 100 == 0) return false;\n        if (month == 10 && day == 30 && year % 400 == 0) return false;\n        if (month == 11 && day == 31 && year % 4 == 0) return false;\n        if (month == 11 && day == 30 && year % 100 == 0) return false;\n        if (month == 11 && day == 30 && year % 400 == 0) return false;\n        if (month == 12 && day == 31 && year % 4 == 0) return false;\n        if (month == 12 && day == 30 && year % 100 == 0) return false;\n        if (month == 12 && day == 30 && year % 400 == 0) return false;\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        String[] dates = date.split(\"-\");\n        int year = Integer.parseInt(dates[0]);\n        int month = Integer.parseInt(dates[1]);\n        int day = Integer.parseInt(dates[2]);\n        \n        if (month == 1 && day == 1 && year % 400 == 0) {\n            return false;\n        } else if (month == 2 && day == 29 && year % 4 == 0) {\n            return false;\n        } else if (month == 2 && day == 28 && year % 100 != 0) {\n            return false;\n        } else if (month == 2 && day == 28 && year % 4 == 0) {\n            return false;\n        } else if (month == 2 && day == 29 && year % 4 == 0) {\n            return false;\n        } else if (month == 2 && day == 29 && year % 100 == 0) {\n            return false;\n        } else if (month == 2 && day == 29 && year % 400 != 0) {\n            return false;\n        } else if (month == 3 && day == 31 && year % 4 == 0) {\n            return false;\n        } else if (month == 3 && day == 30 && year % 100 != 0) {\n            return false;\n        } else if (month == 3 && day == 30 && year % 4 == 0) {\n            return false;\n        } else if (month == 3 && day == 31 && year % 4 == 0) {\n            return false;\n        } else if (month == 3 && day == 31 && year % 100 == 0) {\n            return false;\n        } else if (month == 3 && day == 31 && year % 400 != 0) {\n            return false;\n        } else if (month == 4 && day == 30 && year % 100 != 0) {\n            return false;\n        } else if (month == 4 && day == 30 && year % 4 == 0) {\n            return false;\n        } else if (month == 4 && day == 31 && year % 4 == 0) {\n            return false;\n        } else if (month == 4 && day == 31 && year % 100 == 0) {\n            return false;\n        } else if (month == 4 && day == 31 && year % 400 != 0) {\n            return false;\n        } else if (month == 5 && day == 31 && year % 4 == 0) {\n            return false;\n        } else if (month == 5 && day == 30 && year % 100 != 0) {\n            return false;\n        } else if (month == 5 && day == 30 && year % 4 == 0) {\n            return false;\n        } else if (month == 5 && day == 31 && year % 4 == 0) {\n            return false;\n        } else if (month == 5 && day == 31 && year % 100 == 0) {\n            return false;\n        } else if (month == 5 && day == 31 && year % 400 != 0) {\n            return false;\n        } else if (month == 6 && day == 30 && year % 100 != 0) {\n            return false;\n        } else if (month == 6 && day == 30 && year % 4 == 0) {\n            return false;\n        } else if (month == 6 && day == 31 && year % 4 == 0) {\n            return false;\n        } else if (month == 6 && day == 31 && year % 100 == 0) {\n            return false;\n        } else if (month == 6 && day == 31 && year % 400 != 0) {\n            return false;\n        } else if (month == 7 && day == 31 && year % 4 == 0) {\n            return false;\n        } else if (month == 7 && day == 30 && year % 100 != 0) {\n            return false;\n        } else if (month == 7 && day == 30 && year % 4 == 0) {\n            return false;\n        } else if (month == 7 && day == 31 && year % 4 == 0) {\n            return false;\n        } else if (month == 7 && day == 31 && year % 100 == 0) {\n            return false;\n        } else if (month == 7 && day == 31 && year % 400 != 0) {\n            return false;\n        } else if (month == 8 && day == 31 && year % 4 == 0) {\n            return false;\n        } else if (month == 8 && day == 30 && year % 100 != 0) {\n            return false;\n        } else if (month == 8 && day == 30 && year % 4 == 0) {\n            return false;\n        } else if (month == 8 && day == 31 && year % 4 == 0) {\n            return false;\n        } else if (month == 8 && day == 31 && year % 100 == 0) {\n            return false;\n        } else if (month == 8 && day == 31 && year % 400 != 0) {\n            return false;\n        } else if (month == 9 && day == 30 && year % 100 != 0) {\n            return false;\n        } else if (month == 9 && day == 30 && year % 4 == 0) {\n            return false;\n        } else if (month == 9 && day == 31 && year % 4 == 0) {\n            return false;\n        } else if (month == 9 && day == 31 && year % 100 == 0) {\n            return false;\n        } else if (month == 9 && day == 31 && year % 400 != 0) {\n            return false;\n        } else if (month == 10 && day == 31 && year % 4 == 0) {\n            return false;\n        } else if (month == 10 && day == 30 && year % 100 != 0) {\n            return false;\n        } else if (month == 10 && day == 30 && year % 4 == 0) {\n            return false;\n        } else if (month == 10 && day == 31 && year % 4 == 0) {\n            return false;\n        } else if (month == 10 && day == 31 && year % 100 == 0) {\n            return false;\n        } else if (month == 10 && day == 31 && year % 400 != 0) {\n            return false;\n        } else if (month == 11 && day == 30 && year % 100 != 0) {\n            return false;\n        } else if (month == 11 && day == 30 && year % 4 == 0) {\n            return false;\n        } else if (month == 11 && day == 31 && year % 4 == 0) {\n            return false;\n        } else if (month == 11 && day == 31 && year % 100 == 0) {\n            return false;\n        } else if (month == 11 && day == 31 && year % 400 != 0) {\n            return false;\n        } else if (month == 12 && day == 31 && year % 4 == 0) {\n            return false;\n        } else if (month == 12 && day == 30 && year % 100 != 0) {\n            return false;\n        } else if (month == 12 && day == 30 && year % 4 == 0) {\n            return false;\n        } else if (month == 12 && day == 31 && year % 4 == 0) {\n            return false;\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        String[] arr = date.split(\"-\");\n        int year = Integer.parseInt(arr[0]);\n        int month = Integer.parseInt(arr[1]);\n        int day = Integer.parseInt(arr[2]);\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (day < 1 || day > 31) {\n            return false;\n        }\n        if (year < 1900 || year > 2020) {\n            return false;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        String[] dates = date.split(\"-\");\n        if(dates.length != 3)\n            return false;\n        int year = Integer.parseInt(dates[2]);\n        int month = Integer.parseInt(dates[1]) - 1;\n        int day = Integer.parseInt(dates[0]);\n        if(day < 1 || day > 31)\n            return false;\n        if(month < 0 || month > 11)\n            return false;\n        if(year < 1900 || year > 2099)\n            return false;\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        String[] dates = date.split(\"-\");\n        int year = Integer.parseInt(dates[2]);\n        int month = Integer.parseInt(dates[1]);\n        int day = Integer.parseInt(dates[0]);\n        if(month == 1 && day == 1 && year % 400 == 0 || month == 2 && day == 29 && year % 4 == 0)\n            return false;\n        if(month == 2 && day == 28 && year % 4 == 0)\n            return false;\n        if(month == 2 && day == 29 && year % 100 != 0)\n            return false;\n        if(month == 3 && day == 31 && year % 4 == 0)\n            return false;\n        if(month == 4 && day == 30 && year % 100 != 0)\n            return false;\n        if(month == 5 && day == 31 && year % 4 == 0)\n            return false;\n        if(month == 6 && day == 30 && year % 100 != 0)\n            return false;\n        if(month == 7 && day == 31 && year % 4 == 0)\n            return false;\n        if(month == 8 && day == 31 && year % 100 != 0)\n            return false;\n        if(month == 9 && day == 30 && year % 100 != 0)\n            return false;\n        if(month == 10 && day == 31 && year % 4 == 0)\n            return false;\n        if(month == 11 && day == 30 && year % 100 != 0)\n            return false;\n        if(month == 12 && day == 31 && year % 4 == 0)\n            return false;\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        String[] dates = date.split(\"-\");\n        int month = Integer.parseInt(dates[1]);\n        int day = Integer.parseInt(dates[2]);\n        int year = Integer.parseInt(dates[0]);\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n            if (day < 1 || day > 31) {\n                return false;\n            }\n        }\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 30) {\n                return false;\n            }\n        }\n        if (month == 2) {\n            if (day < 1 || day > 29) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        String[] split = date.split(\"-\");\n        int year = Integer.parseInt(split[0]);\n        int month = Integer.parseInt(split[1]);\n        int day = Integer.parseInt(split[2]);\n        if (month < 1 || month > 12)\n            return false;\n        if (day < 1 || day > 31)\n            return false;\n        if (year < 1900 || year > 2099)\n            return false;\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        String reg = \"\\\\d{4}-\\\\d{2}-\\\\d{2}\";\n        Pattern p = Pattern.compile(reg);\n        Matcher m = p.matcher(date);\n        return m.matches();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        String[] dates = date.split(\"-\");\n        int year = Integer.parseInt(dates[2]);\n        int month = Integer.parseInt(dates[1]);\n        int day = Integer.parseInt(dates[0]);\n        if (month < 1 || month > 12)\n            return false;\n        if (day < 1 || day > 31)\n            return false;\n        if (year < 1900 || year > 2020)\n            return false;\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        String[] dateArray = date.split(\"-\");\n        int year = Integer.parseInt(dateArray[0]);\n        int month = Integer.parseInt(dateArray[1]);\n        int day = Integer.parseInt(dateArray[2]);\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (day < 1 || day > 31) {\n            return false;\n        }\n        if (year < 1900 || year > 2020) {\n            return false;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        String[] split = date.split(\"-\");\n        int month = Integer.parseInt(split[1]);\n        int day = Integer.parseInt(split[2]);\n        int year = Integer.parseInt(split[0]);\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (day < 1 || day > 31) {\n            return false;\n        }\n        if (year < 1 || year > 9999) {\n            return false;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        String[] str = date.split(\"-\");\n        int year = Integer.parseInt(str[0]);\n        int month = Integer.parseInt(str[1]);\n        int day = Integer.parseInt(str[2]);\n        if (month < 1 || month > 12)\n            return false;\n        if (day < 1 || day > 31)\n            return false;\n        if (year < 1900 || year > 2099)\n            return false;\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        String[] arr = date.split(\"-\");\n        int year = Integer.parseInt(arr[0]);\n        int month = Integer.parseInt(arr[1]);\n        int day = Integer.parseInt(arr[2]);\n        if (month < 1 || month > 12) return false;\n        if (day < 1 || day > 31) return false;\n        if (year < 1900 || year > 2050) return false;\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        String[] s = date.split(\"-\");\n        if (s.length != 3)\n            return false;\n        int year = Integer.parseInt(s[0]);\n        int month = Integer.parseInt(s[1]);\n        int day = Integer.parseInt(s[2]);\n        if (month < 1 || month > 12)\n            return false;\n        if (day < 1 || day > 31)\n            return false;\n        if (year < 1900 || year > 2099)\n            return false;\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        String[] arr = date.split(\"-\");\n        int year = Integer.parseInt(arr[0]);\n        int month = Integer.parseInt(arr[1]);\n        int day = Integer.parseInt(arr[2]);\n        if (month < 1 || month > 12) return false;\n        if (day < 1 || day > 31) return false;\n        if (year < 1900 || year > 2099) return false;\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        String[] arr = date.split(\"-\");\n        if(arr.length != 3)\n            return false;\n        int year = Integer.parseInt(arr[0]);\n        int month = Integer.parseInt(arr[1]);\n        int day = Integer.parseInt(arr[2]);\n        if(month < 1 || month > 12)\n            return false;\n        if(day < 1 || day > 31)\n            return false;\n        if(year < 1900 || year > 2099)\n            return false;\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        String[] arr = date.split(\"-\");\n        int year = Integer.parseInt(arr[0]);\n        int month = Integer.parseInt(arr[1]);\n        int day = Integer.parseInt(arr[2]);\n        if (month < 1 || month > 12)\n            return false;\n        if (day < 1 || day > 31)\n            return false;\n        if (year < 1900 || year > 2020)\n            return false;\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        String[] arr = date.split(\"-\");\n        int year = Integer.parseInt(arr[0]);\n        int month = Integer.parseInt(arr[1]);\n        int day = Integer.parseInt(arr[2]);\n        if (month < 1 || month > 12)\n            return false;\n        if (day < 1 || day > 31)\n            return false;\n        if (year < 1900 || year > 2100)\n            return false;\n        if (month == 2 && day == 29)\n            return false;\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        String[] dateArray = date.split(\"-\");\n        if (dateArray.length != 3) {\n            return false;\n        }\n        int year = Integer.parseInt(dateArray[0]);\n        int month = Integer.parseInt(dateArray[1]);\n        int day = Integer.parseInt(dateArray[2]);\n        if (year < 1900 || year > 2099) {\n            return false;\n        }\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (day < 1 || day > 31) {\n            return false;\n        }\n        if (month == 2 && day == 29) {\n            return true;\n        }\n        if (month == 2 && day == 30) {\n            return false;\n        }\n        if (month == 2 && day == 28) {\n            return false;\n        }\n        if (month == 2 && day == 29) {\n            return true;\n        }\n        if (month == 2 && day == 28) {\n            return true;\n        }\n        if (month == 2 && day == 29) {\n            return true;\n        }\n        if (month == 2 && day == 28) {\n            return true;\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\" \");\n        StringBuilder sb = new StringBuilder();\n        for (String word : words) {\n            sb.append(word).append(\" \");\n        }\n        return sb.toString();\n    }\n\n    public boolean isPalindrome(String s) {\n        String s1 = splitWords(s).toLowerCase();\n        String s2 = s1.substring(0, s1.length() / 2).concat(s1.substring(s1.length() / 2));\n        return s1.equals(s2);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\" \"));\n        } else if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\"[,\\s]\"));\n        } else {\n            int count = 0;\n            String[] words = txt.split(\" \");\n            for (String word : words) {\n                if (word.length() > 0) {\n                    count++;\n                }\n            }\n            return Arrays.asList(words);\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\" \");\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < words.length; i++) {\n            int num = Integer.parseInt(words[i]);\n            if (num > max) {\n                max = num;\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\" \");\n        List<String> list = new ArrayList<>();\n        for (String word : words) {\n            if (word.length() > 0) {\n                list.add(word);\n            }\n        }\n        return list;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\" \");\n        return words;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\" \"));\n        } else {\n            int count = 0;\n            for (int i = 0; i < txt.length(); i++) {\n                if (Character.isLetter(txt.charAt(i))) {\n                    count++;\n                } else {\n                    if (count > 0) {\n                        count--;\n                    } else {\n                        return Arrays.asList(txt.substring(0, i).split(\" \"));\n                    }\n                }\n            }\n        }\n        return Arrays.asList(txt.split(\" \"));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\" \");\n        return words;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\" \"));\n        \n            return Arrays.asList(txt.split(\"[,\\s]\"));\n        } else {\n            int count = 0;\n            \n                \n                    c\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Object splitWords(String txt) {\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\" \"));\n        \n            return Arrays.asList(txt.split(\"[,\\s]\"));\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\" \"));\n        \n            return Arrays.asList(txt.split(\"[,\\s]\"));\n        } else {\n            int count = 0;\n            \n                \n                    c\n\nSolution:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public Object splitWords(String txt) {\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\" \"));\n        \n            return Arrays.asList(txt.split(\"[,\\s]\"));\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\" \");\n        return words;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\" \");\n        return words;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\" \");\n        return words;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\" \");\n        return words;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\" \"));\n        } else if (txt.contains(\",\")) {\n            return Arrays.asList(txt.split(\"[,]\"));\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\" \");\n        return words;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\" \");\n        return words;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\" \");\n        return words;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\" \");\n        int[] count = new int[26];\n        for (char c : words[0].toCharArray()) {\n            count[c - 'a']++;\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String str = sc.nextLine();\n        int[] count = new int[26];\n        for (char c : str.toCharArray()) {\n            count[c - 'a']++;\n        }\n        System.out.println(Arrays.toString(count));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        if (txt.contains(\" \")) {\n            return Arrays.asList(txt.split(\" \"));\n        \n            return Arrays.asList(txt.split(\"[,\\s]\"));\n        } else {\n            int count = 0;\n            String[] words = txt.split(\" \");\n            for (String word : words) {\n                if (word.length() > 0) {\n                    count++;\n                }\n            }\n            if (count == 0) {\n                return Arrays.asList(words);\n            } else {\n                String[] words1 = new String[count];\n                int i = 0;\n                for (String word : words) {\n                    if (word.length() > 0) {\n                        words1[i] = word;\n                        i++;\n                    }\n                }\n                return Arrays.asList(words1);\n            }\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\" \");\n        return words;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return true;\n        }\n        int min = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if(lst.size() == 1)\n            return true;\n        int i = 0;\n        int j = lst.size() - 1;\n        while(i < j) {\n            if(lst.get(i) > lst.get(j))\n                return false;\n            i++;\n            j--;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() < 2) {\n            return true;\n        }\n        int i = 0;\n        while (i < lst.size() - 1) {\n            if (lst.get(i) > lst.get(i + 1)) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() == 1) return true;\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < lst.get(i - 1)) return false;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if(lst.size() == 0)\n            return true;\n        int min = lst.get(0);\n        for(int i = 1; i < lst.size(); i++) {\n            if(lst.get(i) < min)\n                return false;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst.get(i) > lst.get(i + 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() <= 1) {\n            return true;\n        }\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < lst.get(i - 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() == 1) {\n            return true;\n        }\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        return (min <= max);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst.get(i) > lst.get(i + 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst.get(i) > lst.get(i + 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return true;\n        }\n        int min = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst.get(i) > lst.get(i + 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return true;\n        }\n        for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst.get(i) > lst.get(i + 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public boolean isSorted(int[] lst) {\n        if (lst.length == 0) {\n            return true;\n        }\n        for (int i = 0; i < lst.length - 1; i++) {\n            if (lst[i] > lst[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public boolean isSorted(int[][] lst) {\n        if (lst.length == 0) {\n            return true;\n        }\n        for (int i = 0; i < lst.length - 1; i++) {\n            for (int j = 0; j < lst[i].length - 1; j++) {\n                if (lst[i][j] > lst[i][j + 1]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    public boolean isSorted(int[][][] lst) {\n        if (lst.length == 0) {\n            return true;\n        }\n        for (int i = 0; i < lst.length - 1; i++) {\n            for (int j = 0; j < lst[i].length - 1; j++) {\n                for (int k = 0; k < lst[i][j].length - 1; k++) {\n                    if (lst[i][j][k] > lst[i][j][k + 1]) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n\n    public boolean isSorted(int[][][][] lst) {\n        if (lst.length == 0) {\n            return true;\n        }\n        for (int i = 0; i < lst.length - 1; i++) {\n            for (int j = 0; j < lst[i].length - 1; j++) {\n                for (int k = 0; k < lst[i][j].length - 1; k++) {\n                    for (int l = 0; l < lst[i][j][k].length - 1; l++) {\n                        if (lst[i][j][k][l] > lst[i][j][k][l + 1]) {\n                            return false;\n                        }\n                    }\n                }\n            }\n        }\n        return true;\n    }\n\n    public boolean isSorted(int[][][][][] lst) {\n        if (lst.length == 0) {\n            return true;\n        }\n        for (int i = 0; i < lst.length - 1; i++) {\n            for (int j = 0; j < lst[i].length - 1; j++) {\n                for (int k = 0; k < lst[i][j].length - 1; k++) {\n                    for (int l = 0; l < lst[i][j][k].length - 1; l++) {\n                        for (int m = 0; m < lst[i][j][k][l].length - 1; m++) {\n                            if (lst[i][j][k][l][m] > lst[i][j][k][l][m + 1]) {\n                                return false;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return true;\n    }\n\n    public boolean isSorted(int[][][][][][] lst) {\n        if (lst.length == 0) {\n            return true;\n        }\n        for (int i = 0; i < lst.length - 1; i++) {\n            for (int j = 0; j < lst[i].length - 1; j++) {\n                for (int k = 0; k < lst[i][j].length - 1; k++) {\n                    for (int l = 0; l < lst[i][j][k].length - 1; l++) {\n                        for (int m = 0; m < lst[i][j][k][l].length - 1; m++) {\n                            for (int n = 0; n < lst[i][j][k][l][m].length - 1; n++) {\n                                if (lst[i][j][k][l][m][n] > lst[i][j][k][l][m][n + 1]) {\n                                    return false;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return true;\n    }\n\n    public boolean isSorted(int[][][][][][][] lst) {\n        if (lst.length == 0) {\n            return true;\n        }\n        for (int i = 0; i < lst.length - 1; i++) {\n            for (int j = 0; j < lst[i].length - 1; j++) {\n                for (int k = 0; k < lst[i][j].length - 1; k++) {\n                    for (int l = 0; l < lst[i][j][k].length - 1; l++) {\n                        for (int m = 0; m < lst[i][j][k][l].length - 1; m++) {\n                            for (int n = 0; n < lst[i][j][k][l][m].length - 1; n++) {\n                                for (int o = 0; o < lst[i][j][k][l][m][n].length - 1; o++) {\n                                    if (lst[i][j][k][l][m][n][o] > lst[i][j][k][l][m][n][o + 1]) {\n                                        return false;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return true;\n    }\n\n    public boolean isSorted(int[][][][][][][][] lst) {\n        if (lst.length == 0) {\n            return true;\n        }\n        for (int i = 0; i < lst.length - 1; i++) {\n            for (int j = 0; j < lst[i].length - 1; j++) {\n                for (int k = 0; k < lst[i][j].length - 1; k++) {\n                    for (int l = 0; l < lst[i][j][k].length - 1; l++) {\n                        for (int m = 0; m < lst[i][j][k][l].length - 1; m++) {\n                            for (int n = 0; n < lst[i][j][k][l][m].length - 1; n++) {\n                                for (int o = 0; o < lst[i][j][k][l][m][n].length - 1; o++) {\n                                    for (int p = 0; p < lst[i][j][k][l][m][n][o].length - 1; p++) {\n                                        if (lst[i][j][k][l][m][n][o][p] > lst[i][j][k][l][m][n][o][p + 1]) {\n                                            return false;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return true;\n    }\n\n    public boolean isSorted(int[][][][][][][][][] lst) {\n        if (lst.length == 0) {\n            return true;\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        for (int i = 0; i < lst.size() - 1; i++) {\n            if (lst.get(i) > lst.get(i + 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if(lst.size() == 0)\n            return true;\n        int i = 0;\n        int j = lst.size() - 1;\n        while(i < j) {\n            if(lst.get(i) > lst.get(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() == 1) {\n            return true;\n        }\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        if (min == max) {\n            return true;\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if(lst.size() == 0)\n            return true;\n        int i = 0;\n        while(i < lst.size() - 1)\n        {\n            if(lst.get(i) > lst.get(i+1))\n                return false;\n            i++;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return true;\n        }\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        return (min == max);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if(lst.size() == 0)\n            return true;\n        for(int i = 0; i < lst.size() - 1; i++)\n            if(lst.get(i) > lst.get(i+1))\n                return false;\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return true;\n        }\n        int min = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        Set<Integer> set1 = new HashSet<>();\n        Set<Integer> set2 = new HashSet<>();\n        for(int i: interval1)\n            set1.add(i);\n        for(int i: interval2)\n            set2.add(i);\n        StringBuilder sb = new StringBuilder();\n        for(int i: set1)\n            if(set2.contains(i))\n                sb.append(i).append(\" \");\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        List<Integer> result = new ArrayList<>();\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int m = interval1.size();\n        int n = interval2.size();\n        while (i < m && j < n) {\n            if (interval1.get(i) <= interval2.get(j)) {\n                result.add(interval1.get(i));\n                i++;\n            } else {\n                result.add(interval2.get(j));\n                j++;\n            }\n        }\n        while (i < m) {\n            result.add(interval1.get(i));\n            i++;\n        }\n        while (j < n) {\n            result.add(interval2.get(j));\n            j++;\n        }\n        return result.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        Set<Integer> set1 = new HashSet<Integer>();\n        Set<Integer> set2 = new HashSet<Integer>();\n        for (int i = 0; i < interval1.size(); i++) {\n            set1.add(interval1.get(i));\n        }\n        for (int i = 0; i < interval2.size(); i++) {\n            set2.add(interval2.get(i));\n        }\n        Iterator<Integer> it1 = set1.iterator();\n        Iterator<Integer> it2 = set2.iterator();\n        while (it1.hasNext() && it2.hasNext()) {\n            if (it1.next() == it2.next()) {\n                it1.remove();\n                it2.remove();\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        while (it1.hasNext()) {\n            sb.append(it1.next());\n        }\n        while (it2.hasNext()) {\n            sb.append(it2.next());\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int len1 = interval1.size();\n        int len2 = interval2.size();\n        int len = len1 + len2;\n        int[] arr = new int[len];\n        int i = 0;\n        for(int j = 0; j < len1; j++) {\n            arr[i] = interval1.get(j);\n            i++;\n        }\n        i = 0;\n        for(int j = 0; j < len2; j++) {\n            arr[i] = interval2.get(j);\n            i++;\n        }\n        Arrays.sort(arr);\n        StringBuilder sb = new StringBuilder();\n        for(int j = 0; j < len; j++) {\n            if(arr[j] == interval1.get(j) || arr[j] == interval2.get(j)) {\n                sb.append(arr[j]);\n            }\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        if (interval1 == null || interval2 == null) {\n            return \"\";\n        }\n        List<Integer> list = new ArrayList<>();\n        for (int i = 0; i < interval1.size(); i++) {\n            list.add(interval1.get(i));\n        }\n        for (int i = 0; i < interval2.size(); i++) {\n            list.remove(interval2.get(i));\n        }\n        return list.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int n = interval1.size();\n        int m = interval2.size();\n        int i = 0, j = 0;\n        int[] arr = new int[n + m];\n        int[] arr1 = new int[n];\n        int[] arr2 = new int[m];\n        while (i < n && j < m) {\n            if (interval1.get(i) <= interval2.get(j)) {\n                arr[i + j] = interval1.get(i);\n                i++;\n            } else {\n                arr[i + j] = interval2.get(j);\n                j++;\n            }\n        }\n        while (i < n) {\n            arr[i + j] = interval1.get(i);\n            i++;\n        }\n        while (j < m) {\n            arr[i + j] = interval2.get(j);\n            j++;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int k = 0; k < n + m; k++) {\n            if (arr[k] != 0) {\n                sb.append(arr[k]).append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int[] arr1 = new int[interval1.size()];\n        int[] arr2 = new int[interval2.size()];\n        int i = 0;\n        int j = 0;\n        for(int k : interval1) {\n            arr1[i++] = k;\n        }\n        for(int k : interval2) {\n            arr2[j++] = k;\n        }\n        int[] arr = new int[i];\n        int k = 0;\n        for(int l = 0; l < i; l++) {\n            if(arr1[l] == arr2[k]) {\n                arr[k++] = arr1[l];\n            }\n        }\n        if(k == 0) {\n            return \"NO\";\n        }\n        StringBuilder sb = new StringBuilder();\n        for(int l = 0; l < k; l++) {\n            sb.append(arr[l] + \" \");\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        // write your code here\n        int[] nums1 = interval1.stream().mapToInt(i -> i).toArray();\n        int[] nums2 = interval2.stream().mapToInt(i -> i).toArray();\n        Arrays.sort(nums1);\n        Arrays.sort(nums2);\n        int i = 0;\n        int j = 0;\n        StringBuilder sb = new StringBuilder();\n        while (i < nums1.length && j < nums2.length) {\n            if (nums1[i] == nums2[j]) {\n                sb.append(nums1[i]);\n                i++;\n                j++;\n            } else if (nums1[i] < nums2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        String ans = \"\";\n        int i = 0;\n        int j = 0;\n        while(i < interval1.size() && j < interval2.size()) {\n            if(interval1.get(i) <= interval2.get(j)) {\n                ans += interval1.get(i) + \" \";\n                i++;\n            }\n            else {\n                ans += interval2.get(j) + \" \";\n                j++;\n            }\n        }\n        while(i < interval1.size()) {\n            ans += interval1.get(i) + \" \";\n            i++;\n        }\n        while(j < interval2.size()) {\n            ans += interval2.get(j) + \" \";\n            j++;\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int i = 0;\n        int j = 0;\n        int start = 0;\n        int end = 0;\n        StringBuilder sb = new StringBuilder();\n        while(i < interval1.size() && j < interval2.size()) {\n            if(interval1.get(i) <= interval2.get(j)) {\n                start = interval1.get(i);\n                end = interval1.get(i);\n                i++;\n            } else {\n                start = interval2.get(j);\n                end = interval2.get(j);\n                j++;\n            }\n            sb.append(start).append(\" \").append(end).append(\" \");\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int len1 = interval1.size();\n        int len2 = interval2.size();\n        int len = len1 + len2;\n        int[] arr = new int[len];\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        while(i < len1 && j < len2) {\n            if(interval1.get(i) <= interval2.get(j)) {\n                arr[k++] = interval1.get(i++);\n            }\n            else {\n                arr[k++] = interval2.get(j++);\n            }\n        }\n        while(i < len1) {\n            arr[k++] = interval1.get(i++);\n        }\n        while(j < len2) {\n            arr[k++] = interval2.get(j++);\n        }\n        StringBuilder sb = new StringBuilder();\n        for(int x : arr) {\n            sb.append(x).append(\" \");\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        String res = \"\";\n        int i = 0;\n        int j = 0;\n        int len1 = interval1.size();\n        int len2 = interval2.size();\n        int len = len1 + len2;\n        int[] arr = new int[len];\n        for(int k = 0; k < len; k++) {\n            if(k < len1) {\n                arr[k] = interval1.get(i);\n                i++;\n            }\n            if(k < len2) {\n                arr[k + len1] = interval2.get(j);\n                j++;\n            }\n        }\n        for(int k = 0; k < len; k++) {\n            if(arr[k] == interval1.get(i)) {\n                res += interval1.get(i) + \" \";\n                i++;\n            }\n            if(arr[k + len1] == interval2.get(j)) {\n                res += interval2.get(j) + \" \";\n                j++;\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        if(interval1.size() == 0 || interval2.size() == 0)\n            return \"\";\n        int i = 0;\n        int j = 0;\n        int n = interval1.size();\n        int m = interval2.size();\n        int count = 0;\n        StringBuilder sb = new StringBuilder();\n        while(i < n && j < m){\n            if(interval1.get(i) <= interval2.get(j))\n                i++;\n            else\n                j++;\n            count++;\n        }\n        if(count == 0)\n            return \"\";\n        while(i < n){\n            sb.append(interval1.get(i));\n            i++;\n        }\n        while(j < m){\n            sb.append(interval2.get(j));\n            j++;\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int i = 0;\n        int j = 0;\n        int n = interval1.size();\n        int m = interval2.size();\n        int[] arr = new int[n + m];\n        for (int i = 0; i < n; i++) {\n            arr[i] = interval1.get(i);\n        }\n        for (int i = 0; i < m; i++) {\n            arr[n + i] = interval2.get(i);\n        }\n        Arrays.sort(arr);\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (arr[i] == arr[n + j]) {\n                    return \"YES\";\n                }\n            }\n        }\n        return \"NO\";\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int n = interval1.size();\n        int m = interval2.size();\n        int[][] map = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                map[i][j] = interval1.get(i) * 1000 + interval2.get(j);\n            }\n        }\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (map[i][j] == 0) {\n                    dp[i][j] = 0;\n                } else {\n                    dp[i][j] = 1;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (map[i][j] == 0) {\n                    continue;\n                }\n                int count = 0;\n                for (int k = 0; k < n; k++) {\n                    for (int l = 0; l < m; l++) {\n                        if (map[k][l] == 0) {\n                            continue;\n                        }\n                        if (i == k && j == l) {\n                            continue;\n                        }\n                        if (dp[k][l] == 1) {\n                            count++;\n                        }\n                    }\n                }\n                dp[i][j] = count;\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 0) {\n                    continue;\n                }\n                sb.append(dp[i][j]);\n                sb.append(\" \");\n            }\n            sb.append(\"\\n\");\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int i = 0;\n        int j = 0;\n        int len1 = interval1.size();\n        int len2 = interval2.size();\n        int len = len1 + len2;\n        int[] arr = new int[len];\n        int[] arr1 = new int[len];\n        int[] arr2 = new int[len];\n        int[] arr3 = new int[len];\n        int[] arr4 = new int[len];\n        int[] arr5 = new int[len];\n        int[] arr6 = new int[len];\n        int[] arr7 = new int[len];\n        int[] arr8 = new int[len];\n        int[] arr9 = new int[len];\n        int[] arr10 = new int[len];\n        int[] arr11 = new int[len];\n        int[] arr12 = new int[len];\n        int[] arr13 = new int[len];\n        int[] arr14 = new int[len];\n        int[] arr15 = new int[len];\n        int[] arr16 = new int[len];\n        int[] arr17 = new int[len];\n        int[] arr18 = new int[len];\n        int[] arr19 = new int[len];\n        int[] arr20 = new int[len];\n        int[] arr21 = new int[len];\n        int[] arr22 = new int[len];\n        int[] arr23 = new int[len];\n        int[] arr24 = new int[len];\n        int[] arr25 = new int[len];\n        int[] arr26 = new int[len];\n        int[] arr27 = new int[len];\n        int[] arr28 = new int[len];\n        int[] arr29 = new int[len];\n        int[] arr30 = new int[len];\n        int[] arr31 = new int[len];\n        int[] arr32 = new int[len];\n        int[] arr33 = new int[len];\n        int[] arr34 = new int[len];\n        int[] arr35 = new int[len];\n        int[] arr36 = new int[len];\n        int[] arr37 = new int[len];\n        int[] arr38 = new int[len];\n        int[] arr39 = new int[len];\n        int[] arr40 = new int[len];\n        int[] arr41 = new int[len];\n        int[] arr42 = new int[len];\n        int[] arr43 = new int[len];\n        int[] arr44 = new int[len];\n        int[] arr45 = new int[len];\n        int[] arr46 = new int[len];\n        int[] arr47 = new int[len];\n        int[] arr48 = new int[len];\n        int[] arr49 = new int[len];\n        int[] arr50 = new int[len];\n        int[] arr51 = new int[len];\n        int[] arr52 = new int[len];\n        int[] arr53 = new int[len];\n        int[] arr54 = new int[len];\n        int[] arr55 = new int[len];\n        int[] arr56 = new int[len];\n        int[] arr57 = new int[len];\n        int[] arr58 = new int[len];\n        int[] arr59 = new int[len];\n        int[] arr60 = new int[len];\n        int[] arr61 = new int[len];\n        int[] arr62 = new int[len];\n        int[] arr63 = new int[len];\n        int[] arr64 = new int[len];\n        int[] arr65 = new int[len];\n        int[] arr66 = new int[len];\n        int[] arr67 = new int[len];\n        int[] arr68 = new int[len];\n        int[] arr69 = new int[len];\n        int[] arr70 = new int[len];\n        int[] arr71 = new int[len];\n        int[] arr72 = new int[len];\n        int[] arr73 = new int[len];\n        int[] arr74 = new int[len];\n        int[] arr75 = new int[len];\n        int[] arr76 = new int[len];\n        int[] arr77 = new int[len];\n        int[] arr78 = new int[len];\n        int[] arr79 = new int[len];\n        int[] arr80 = new int[len];\n        int[] arr81 = new int[len];\n        int[] arr82 = new int[len];\n        int[] arr83 = new int[len];\n        int[] arr84 = new int[len];\n        int[] arr85 = new int[len];\n        int[] arr86 = new int[len];\n        int[] arr87 = new int[len];\n        int[] arr88 = new int[len];\n        int[] arr89 = new int[len];\n        int[] arr90 = new int[len];\n        int[] arr91 = new int[len];\n        int[] arr92 = new int[len];\n        int[] arr93 = new int[len];\n        int[] arr94 = new int[len];\n        int[] arr95 = new int[len];\n        int[] arr96 = new int[len];\n        int[] arr97 = new int[len];\n        int[] arr98 = new int[len];\n        int[] arr99 = new int[len];\n        int[] arr100 = new int[len];\n        int[] arr101 = new int[len];\n        int[] arr102 = new int[len];\n        int[] arr103 = new int[len];\n        int[] arr104 = new int[len];\n        int[] arr105 = new int[len];\n        int[] arr106 = new int[len];\n        int[] arr107 = new int[len];\n        int[] arr108 = new int[len];\n        int[] arr109 = new int[len];\n        int[] arr110 = new int[len];\n        int[] arr111 = new int[len];\n        int[] arr112 = new int[len];\n        int[] arr113 = new int[len];\n        int[] arr114 = new int[len];\n        int[] arr115 = new int[len];\n        int[] arr116 = new int[len];\n        int[] arr117 = new int[len];\n        int[] arr118 = new int[len];\n        int[] arr119 = new int[len];\n        int[] arr120 = new int[len];\n        int[] arr121 = new int[len];\n        int[] arr122 = new int[len];\n        int[] arr123 = new int[len];\n        int[] arr124 = new int[len];\n        int[] arr125 = new int[len];\n        int[] arr126 = new int[len];\n        int[] arr127 = new int[len];\n        int[] arr128 = new int[len];\n        int[] arr129 = new int[len];\n        int[] arr130 = new int[len];\n        int[] arr131 = new int[len];\n        int[] arr132 = new int[len];\n        int[] arr133 = new int[len];\n        int[] arr134 = new int[len];\n        int[] arr135 = new int[len];\n        int[] arr136 = new int[len];\n        int[] arr137 = new int[len];\n        int[] arr138 = new int[len];\n        int[] arr139 = new int[len];\n        int[] arr140 = new int[len];\n        int[] arr141 = new int[len];\n        int[] arr142 = new int[len];\n        int"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        if(interval1.size() == 0 || interval2.size() == 0)\n            return \"\";\n        int i = 0;\n        int j = 0;\n        int min = Integer.MAX_VALUE;\n        int max = Integer.MIN_VALUE;\n        int count = 0;\n        while(i < interval1.size() && j < interval2.size())\n        {\n            if(interval1.get(i) <= interval2.get(j))\n            {\n                min = Math.min(min, interval1.get(i));\n                count++;\n                i++;\n            }\n            else\n            {\n                max = Math.max(max, interval2.get(j));\n                count++;\n                j++;\n            }\n        }\n        if(i == interval1.size())\n        {\n            for(int k = j; k < interval2.size(); k++)\n            {\n                max = Math.max(max, interval2.get(k));\n                count++;\n            }\n        }\n        else if(j == interval2.size())\n        {\n            for(int k = i; k < interval1.size(); k++)\n            {\n                min = Math.min(min, interval1.get(k));\n                count++;\n            }\n        }\n        if(count == 0)\n            return \"\";\n        StringBuilder sb = new StringBuilder();\n        sb.append(min);\n        sb.append(\",\");\n        sb.append(max);\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        if(interval1.size() == 0 || interval2.size() == 0)\n            return \"NO\";\n        int i = 0;\n        int j = 0;\n        int n = interval1.size();\n        int m = interval2.size();\n        int[] arr = new int[n+m];\n        while(i < n && j < m)\n        {\n            if(interval1.get(i) <= interval2.get(j))\n            {\n                arr[i+j] = interval1.get(i);\n                i++;\n            }\n            else\n            {\n                arr[i+j] = interval2.get(j);\n                j++;\n            }\n        }\n        if(i == n)\n            return \"YES\";\n        else\n            return \"NO\";\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        String ans = \"\";\n        int i = 0;\n        int j = 0;\n        while(i < interval1.size() && j < interval2.size()) {\n            if(interval1.get(i) <= interval2.get(j)) {\n                ans += interval1.get(i) + \" \";\n                i++;\n            }\n            else {\n                ans += interval2.get(j) + \" \";\n                j++;\n            }\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int length = interval1.size();\n        int result = 0;\n        for (int i = 0; i < length; i++) {\n            int index = interval1.get(i);\n            int index2 = interval2.get(i);\n            if (index2 < index) {\n                result += index2 - index;\n            } else {\n                result += index - index2;\n            }\n        }\n        return String.valueOf(result);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.size() == 0) {\n            return Optional.empty();\n        }\n        int prod = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            prod *= arr.get(i);\n        }\n        if (prod < 0) {\n            return Optional.empty();\n        }\n        return Optional.of(prod);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        int prod = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            prod *= arr.get(i);\n        }\n        if (prod < 0) {\n            return Optional.empty();\n        }\n        return Optional.of(prod);\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        List<Integer> arr = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            arr.add(in.nextInt());\n        }\n        Optional<Integer> res = new Solution().prodSigns(arr);\n        System.out.println(res.orElse(0));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        int prod = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            prod *= arr.get(i);\n        }\n        if (prod < 0) {\n            return Optional.empty();\n        }\n        return Optional.of(prod);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        int prod = 1;\n        for (int i = arr.size() - 1; i >= 0; i--) {\n            prod *= arr.get(i);\n        }\n        if (prod == 0) {\n            return Optional.empty();\n        }\n        return Optional.of(prod);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        int prod = 1;\n        int sign = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            prod *= arr.get(i);\n            sign *= arr.get(i);\n        }\n        if (prod == 1) {\n            return Optional.of(sign);\n        }\n        return Optional.empty();\n    }\n\n    public String longestCommonPrefix(String[] strs) {\n        if (strs == null || strs.length == 0) {\n            return \"\";\n        }\n        int prod = 1;\n        int sign = 1;\n        for (int i = 0; i < strs.length; i++) {\n            prod *= strs[i].length();\n            sign *= strs[i].length();\n        }\n        if (prod == 1) {\n            return strs[0];\n        }\n        int prodSign = prod / sign;\n        int signSign = sign / prod;\n        int diff = prodSign - signSign;\n        if (diff == 0) {\n            return strs[0];\n        }\n        int len = strs[0].length();\n        for (int i = 0; i < len; i++) {\n            if (strs[0].charAt(i) != strs[1].charAt(i)) {\n                return strs[0].substring(0, i);\n            }\n        }\n        return strs[0];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        int prod = 1;\n        int sign = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            prod *= arr.get(i);\n            sign *= arr.get(i);\n        }\n        if (prod == 0) {\n            return Optional.empty();\n        }\n        if (sign == 0) {\n            return Optional.empty();\n        }\n        return Optional.of(sign);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        int prod = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            prod *= arr.get(i);\n        }\n        if (prod < 0) {\n            return Optional.empty();\n        }\n        return Optional.of(prod);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        int prod = 1;\n        for(int i = arr.size()-1; i >= 0; i--) {\n            prod *= arr.get(i);\n        }\n        return Optional.of(prod);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        int prod = 1;\n        int sign = 1;\n        for (int i = arr.size() - 1; i >= 0; i--) {\n            prod *= arr.get(i);\n            sign *= arr.get(i);\n        }\n        if (prod == 0) {\n            return Optional.empty();\n        }\n        if (sign < 0) {\n            return Optional.of(-1);\n        }\n        return Optional.of(1);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        int prod = 1;\n        for(int i = 0; i < arr.size(); i++){\n            prod *= arr.get(i);\n        }\n        if(prod == 0)\n            return Optional.empty();\n        else if(prod < 0)\n            return Optional.of(-1);\n        else\n            return Optional.of(1);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        int prod = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            prod *= arr.get(i);\n        }\n        if (prod < 0) {\n            return Optional.empty();\n        }\n        return Optional.of(prod);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        int prod = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            prod *= arr.get(i);\n        }\n        if (prod < 0) {\n            return Optional.empty();\n        }\n        return Optional.of(prod);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        int prod = 1;\n        int sign = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            prod *= arr.get(i);\n            sign *= -1;\n        }\n        if (prod == 0) {\n            return Optional.empty();\n        }\n        return Optional.of(sign);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        int n = arr.size();\n        int prod = 1;\n        for (int i = 0; i < n; i++) {\n            prod *= arr.get(i);\n        }\n        if (prod == 0) {\n            return Optional.empty();\n        }\n        int sign = 1;\n        for (int i = 0; i < n; i++) {\n            if (arr.get(i) * sign < 0) {\n                return Optional.empty();\n            }\n            sign *= arr.get(i);\n        }\n        return Optional.of(sign);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        int prod = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            prod *= arr.get(i);\n        }\n        if (prod < 0) {\n            return Optional.empty();\n        }\n        return Optional.of(prod);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        int n = arr.size();\n        int[] arr1 = new int[n];\n        int[] arr2 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr1[i] = arr.get(i);\n            arr2[i] = arr.get(i);\n        }\n        int max = 0;\n        int min = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr1[i] > 0) {\n                max = Math.max(max, arr1[i]);\n            }\n            if (arr2[i] < 0) {\n                min = Math.min(min, arr2[i]);\n            }\n        }\n        if (max == min) {\n            return Optional.empty();\n        }\n        return Optional.of(max - min);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        int sum = 0;\n        int prod = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            sum += arr.get(i);\n            prod *= arr.get(i);\n        }\n        if (sum == prod) {\n            return Optional.of(1);\n        } else if (sum < 0 && prod < 0) {\n            return Optional.of(-1);\n        } else if (sum > 0 && prod > 0) {\n            return Optional.of(0);\n        }\n        return Optional.empty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        int prod = 1;\n        int sign = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            prod *= arr.get(i);\n            sign *= -1;\n        }\n        if (prod == 1) {\n            return Optional.empty();\n        }\n        return Optional.of(sign);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        int prod = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            prod *= arr.get(i);\n        }\n        if (prod == 0) {\n            return Optional.empty();\n        }\n        return Optional.of(prod);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        int prod = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            prod *= arr.get(i);\n        }\n        if (prod < 0) {\n            return Optional.empty();\n        }\n        return Optional.of(prod);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = grid[i][j];\n                } else if(i == 0) {\n                    dp[i][j] = dp[i][j-1] + grid[i][j];\n                } else if(j == 0) {\n                    dp[i][j] = dp[i-1][j] + grid[i][j];\n                } else {\n                    dp[i][j] = Math.min(dp[i-1][j], dp[i][j-1]) + grid[i][j];\n                }\n            }\n        }\n        List<Integer> res = new ArrayList<>();\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    res.add(dp[i][j]);\n                } else if(i == 0) {\n                    res.add(dp[i][j-1]);\n                } else if(j == 0) {\n                    res.add(dp[i-1][j]);\n                } else {\n                    res.add(Math.min(dp[i-1][j], dp[i][j-1]));\n                }\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = grid[i][j];\n                } else {\n                    dp[i][j] = Math.min(dp[i-1][j], dp[i][j-1]) + grid[i][j];\n                }\n            }\n        }\n        List<Integer> res = new ArrayList<>();\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    res.add(dp[i][j]);\n                } else {\n                    res.add(dp[i][j]);\n                }\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int m = grid.size();\n        int n = grid[0].size();\n        int[][] dp = new int[m][n];\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = grid[i][j];\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + grid[i][j];\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + grid[i][j];\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n                }\n            }\n        }\n        List<Integer> res = new ArrayList<>();\n        for (int i = m - 1; i >= 0; i--) {\n            for (int j = n - 1; j >= 0; j--) {\n                res.add(dp[i][j]);\n            }\n        }\n        Collections.reverse(res);\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int val = n * n + 1;\n        List<Integer> ans = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == 0 && j == 0) {\n                    ans.add(1);\n                } else if (i == 0) {\n                    ans.add(val);\n                } else if (j == 0) {\n                    ans.add(val);\n                } else {\n                    if (i == n - 1 && j == n - 1) {\n                        ans.add(1);\n                    } else if (i == n - 1) {\n                        ans.add(val);\n                    } else if (j == n - 1) {\n                        ans.add(val);\n                    } else {\n                        if (i % 2 == 0) {\n                            ans.add(1);\n                        } else {\n                            ans.add(val);\n                        }\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int val = n * n + 1;\n        List<Integer> ans = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == 0 && j == 0) {\n                    ans.add(1);\n                } else if (i == 0) {\n                    ans.add(val);\n                } else if (j == 0) {\n                    ans.add(val);\n                } else if (i == n - 1) {\n                    ans.add(val);\n                } else if (j == n - 1) {\n                    ans.add(val);\n                } else {\n                    if (i % 2 == 0) {\n                        ans.add(1);\n                    } else {\n                        ans.add(val);\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int m = grid.size();\n        int n = grid[0].size();\n        int[][] dp = new int[m][n];\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = grid[i][j];\n                } else {\n                    dp[i][j] = Math.min(Math.min(dp[i - 1][j], dp[i][j - 1]), dp[i - 1][j - 1]) + grid[i][j];\n                }\n            }\n        }\n        return Arrays.asList(dp[m - 1][n - 1], dp[m - 1][n - 1] - k);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int m = grid.size();\n        int n = grid[0].size();\n        int[][] dp = new int[m][n];\n        for(int i = 0; i < m; i++) {\n            for(int j = 0; j < n; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = grid[i][j];\n                } else if(i == 0) {\n                    dp[i][j] = grid[i][j] + dp[i][j-1];\n                } else if(j == 0) {\n                    dp[i][j] = grid[i][j] + dp[i-1][j];\n                } else {\n                    dp[i][j] = Math.min(grid[i][j] + dp[i-1][j], grid[i][j] + dp[i][j-1]);\n                }\n            }\n        }\n        List<Integer> res = new ArrayList<>();\n        for(int i = m-1; i >= 0; i--) {\n            for(int j = n-1; j >= 0; j--) {\n                res.add(dp[i][j]);\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int m = grid.size();\n        int n = grid[0].size();\n        int[][] dp = new int[m][n];\n        for(int i = 0; i < m; i++) {\n            for(int j = 0; j < n; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = grid[i][j];\n                }\n                else if(i == 0) {\n                    dp[i][j] = grid[i][j] + dp[i][j-1];\n                }\n                else if(j == 0) {\n                    dp[i][j] = grid[i][j] + dp[i-1][j];\n                }\n                else {\n                    dp[i][j] = Math.min(grid[i][j] + dp[i-1][j], grid[i][j] + dp[i][j-1]);\n                }\n            }\n        }\n        List<Integer> res = new ArrayList<>();\n        for(int i = 0; i < m; i++) {\n            for(int j = 0; j < n; j++) {\n                if(i == 0 && j == 0) {\n                    res.add(dp[i][j]);\n                }\n                else if(i == 0) {\n                    res.add(dp[i][j] + res.get(i-1));\n                }\n                else if(j == 0) {\n                    res.add(dp[i][j] + res.get(i));\n                }\n                else {\n                    res.add(Math.min(dp[i][j] + res.get(i-1), dp[i][j] + res.get(i)) + res.get(j));\n                }\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int m = grid.size();\n        int n = grid[0].size();\n        int[][] dp = new int[m][n];\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = grid[i][j];\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + grid[i][j];\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + grid[i][j];\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n                }\n            }\n        }\n        List<Integer> path = new ArrayList<>();\n        for (int i = m - 1; i >= 0; i--) {\n            for (int j = n - 1; j >= 0; j--) {\n                if (i == m - 1 && j == n - 1) {\n                    path.add(dp[i][j]);\n                } else if (i == m - 1) {\n                    path.add(dp[i][j] + grid[i][j]);\n                } else if (j == n - 1) {\n                    path.add(dp[i][j] + grid[i][j]);\n                } else {\n                    path.add(Math.min(dp[i][j], dp[i - 1][j]) + grid[i][j]);\n                }\n            }\n        }\n        return path;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int m = grid.size();\n        int n = grid[0].size();\n        int[][] dp = new int[m][n];\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = grid[i][j];\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n                }\n            }\n        }\n        List<Integer> res = new ArrayList<>();\n        for (int i = m - 1; i >= 0; i--) {\n            for (int j = n - 1; j >= 0; j--) {\n                res.add(dp[i][j]);\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int val = n * n + 1;\n        int[][] directions = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};\n        int[][] directions2 = {{-1, 0}, {0, -1}, {1, 0}, {0, 1}};\n        int[][] directions3 = {{-1, -1}, {0, 0}, {1, 1}, {1, 0}, {0, 1}, {-1, 1}};\n        int[][] directions4 = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};\n        int[][] directions5 = {{-1, 1}, {0, 1}, {1, 0}, {0, -1}};\n        int[][] directions6 = {{-1, 1}, {0, 1}, {1, 0}, {0, -1}};\n        int[][] directions7 = {{-1, 1}, {0, 1}, {1, 0}, {0, -1}};\n        int[][] directions8 = {{-1, 1}, {0, 1}, {1, 0}, {0, -1}};\n        int[][] directions9 = {{-1, 1}, {0, 1}, {1, 0}, {0, -1}};\n        int[][] directions10 = {{-1, 1}, {0, 1}, {1, 0}, {0, -1}};\n        int[][] directions11 = {{-1, 1}, {0, 1}, {1, 0}, {0, -1}};\n        int[][] directions12 = {{-1, 1}, {0, 1}, {1, 0}, {0, -1}};\n        int[][] directions13 = {{-1, 1}, {0, 1}, {1, 0}, {0, -1}};\n        int[][] directions14 = {{-1, 1}, {0, 1}, {1, 0}, {0, -1}};\n        int[][] directions15 = {{-1, 1}, {0, 1}, {1, 0}, {0, -1}};\n        int[][] directions16 = {{-1, 1}, {0, 1}, {1, 0}, {0, -1}};\n        int[][] directions17 = {{-1, 1}, {0, 1}, {1, 0}, {0, -1}};\n        int[][] directions18 = {{-1, 1}, {0, 1}, {1, 0}, {0, -1}};\n        int[][] directions19 = {{-1, 1}, {0, 1}, {1, 0}, {0, -1}};\n        int[][] directions20 = {{-1, 1}, {0, 1}, {1, 0}, {0, -1}};\n        int[][] directions21 = {{-1, 1}, {0, 1}, {1, 0}, {0, -1}};\n        int[][] directions22 = {{-1, 1}, {0, 1}, {1, 0}, {0, -1}};\n        int[][] directions23 = {{-1, 1}, {0, 1}, {1, 0}, {0, -1}};\n        int[][] directions24 = {{-1, 1}, {0, 1}, {1, 0}, {0, -1}};\n        int[][] directions25 = {{-1, 1}, {0, 1}, {1, 0}, {0, -1}};\n        int[][] directions26 = {{-1, 1}, {0, 1}, {1, 0}, {0, -1}};\n        int[][] directions27 = {{-1, 1}, {0, 1}, {1, 0}, {0, -1}};\n        int[][] directions28 = {{-1, 1}, {0, 1}, {1, 0}, {0, -1}};\n        int[][] directions29 = {{-1, 1}, {0, 1}, {1, 0}, {0, -1}};\n        int[][] directions30 = {{-1, 1}, {0, 1}, {1, 0}, {0, -1}};\n        int[][] directions31 = {{-1, 1}, {0, 1}, {1, 0}, {0, -1}};\n        int[][] directions32 = {{-1, 1}, {0, 1}, {1, 0}, {0, -1}};\n        int[][] directions33 = {{-1, 1}, {0, 1}, {1, 0}, {0, -1}};\n        int[][] directions34 = {{-1, 1}, {0, 1}, {1, 0}, {0, -1}};\n        int[][] directions35 = {{-1, 1}, {0, 1}, {1, 0}, {0, -1}};\n        int[][] directions36 = {{-1, 1}, {0, 1}, {1, 0}, {0, -1}};\n        int[][] directions37 = {{-1, 1}, {0, 1}, {1, 0}, {0, -1}};\n        int[][] directions38 = {{-1, 1}, {0, 1}, {1, 0}, {0, -1}};\n        int[][] directions39 = {{-1, 1}, {0, 1}, {1, 0}, {0, -1}};\n        int[][] directions40 = {{-1, 1}, {0, 1}, {1, 0}, {0, -1}};\n        int[][] directions41 = {{-1, 1}, {0, 1}, {1, 0}, {0, -1}};\n        int[][] directions42 = {{-1, 1}, {0, 1}, {1, 0}, {0, -1}};\n        int[][] directions43 = {{-1, 1}, {0, 1}, {1, 0}, {0, -1}};\n        int[][] directions44 = {{-1, 1}, {0, 1}, {1, 0}, {0, -1}};\n        int[][] directions45 = {{-1, 1}, {0, 1}, {1, 0}, {0, -1}};\n        int[][] directions46 = {{-1, 1}, {0, 1}, {1, 0}, {0, -1}};\n        int[][] directions47 = {{-1, 1}, {0, 1}, {1, 0}, {0, -1}};\n        int[][] directions48 = {{-1, 1}, {0, 1}, {1, 0}, {0, -1}};\n        int[][] directions49 = {{-1, 1}, {0, 1}, {1, 0}, {0, -1}};\n        int[][] directions50 = {{-1, 1}, {0, 1}, {1, 0}, {0, -1}};\n        int[][] directions51 = {{-1, 1}, {0, 1}, {1, 0}, {0, -1}};\n        int[][] directions52 = {{-1, 1}, {0, 1}, {1, 0}, {0, -1}};\n        int[][] directions53 = {{-1, 1}, {0, 1}, {1, 0}, {0, -1}};\n        int[][] directions54 = {{-1, 1}, {0, 1}, {1, 0}, {0, -1}};\n        int[][] directions55 = {{-1, 1}, {0, 1}, {1, 0}, {0, -1}};\n        int[][] directions56 = {{-1, 1}, {0, 1}, {1, 0}, {0, -1}}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = grid[i][j];\n                } else if(i == 0) {\n                    dp[i][j] = dp[i][j-1] + grid[i][j];\n                } else if(j == 0) {\n                    dp[i][j] = dp[i-1][j] + grid[i][j];\n                } else {\n                    dp[i][j] = Math.min(dp[i-1][j], dp[i][j-1]) + grid[i][j];\n                }\n            }\n        }\n        List<Integer> res = new ArrayList<>();\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                res.add(dp[i][j]);\n            }\n        }\n        Collections.reverse(res);\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int m = grid.size();\n        int n = grid[0].size();\n        int[][] dp = new int[m][n];\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = grid[i][j];\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n                }\n            }\n        }\n        return Arrays.asList(dp[m - 1][n - 1], dp[m - 1][0], dp[0][n - 1], dp[0][0]);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int m = grid.size();\n        int n = grid[0].size();\n        if(m == 0 || n == 0)\n            return new ArrayList<Integer>();\n        List<Integer> path = new ArrayList<Integer>();\n        path.add(0);\n        for(int i = 1; i < m; i++)\n            path.add(path.get(i-1) + grid.get(i).get(0));\n        for(int i = 1; i < n; i++)\n            path.add(path.get(i-1) + grid.get(0).get(i));\n        for(int i = 1; i < m; i++)\n            for(int j = 1; j < n; j++)\n                if(grid.get(i).get(j) == k)\n                    path.add(path.get(i-1) + grid.get(i).get(j));\n        return path;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int m = grid.size();\n        int n = grid.get(0).size();\n        int[][] dp = new int[m][n];\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = grid.get(i).get(j);\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid.get(i).get(j);\n                }\n            }\n        }\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                res.add(dp[i][j]);\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int val = n * n + 1;\n        List<Integer> ans = new ArrayList<Integer>();\n        int i = 0;\n        int j = 0;\n        int x = 0;\n        int y = 0;\n        int x1 = 0;\n        int y1 = 0;\n        int x2 = 0;\n        int y2 = 0;\n        int x3 = 0;\n        int y3 = 0;\n        int x4 = 0;\n        int y4 = 0;\n        int x5 = 0;\n        int y5 = 0;\n        int x6 = 0;\n        int y6 = 0;\n        int x7 = 0;\n        int y7 = 0;\n        int x8 = 0;\n        int y8 = 0;\n        int x9 = 0;\n        int y9 = 0;\n        int x10 = 0;\n        int y10 = 0;\n        int x11 = 0;\n        int y11 = 0;\n        int x12 = 0;\n        int y12 = 0;\n        int x13 = 0;\n        int y13 = 0;\n        int x14 = 0;\n        int y14 = 0;\n        int x15 = 0;\n        int y15 = 0;\n        int x16 = 0;\n        int y16 = 0;\n        int x17 = 0;\n        int y17 = 0;\n        int x18 = 0;\n        int y18 = 0;\n        int x19 = 0;\n        int y19 = 0;\n        int x20 = 0;\n        int y20 = 0;\n        int x21 = 0;\n        int y21 = 0;\n        int x22 = 0;\n        int y22 = 0;\n        int x23 = 0;\n        int y23 = 0;\n        int x24 = 0;\n        int y24 = 0;\n        int x25 = 0;\n        int y25 = 0;\n        int x26 = 0;\n        int y26 = 0;\n        int x27 = 0;\n        int y27 = 0;\n        int x28 = 0;\n        int y28 = 0;\n        int x29 = 0;\n        int y29 = 0;\n        int x30 = 0;\n        int y30 = 0;\n        int x31 = 0;\n        int y31 = 0;\n        int x32 = 0;\n        int y32 = 0;\n        int x33 = 0;\n        int y33 = 0;\n        int x34 = 0;\n        int y34 = 0;\n        int x35 = 0;\n        int y35 = 0;\n        int x36 = 0;\n        int y36 = 0;\n        int x37 = 0;\n        int y37 = 0;\n        int x38 = 0;\n        int y38 = 0;\n        int x39 = 0;\n        int y39 = 0;\n        int x40 = 0;\n        int y40 = 0;\n        int x41 = 0;\n        int y41 = 0;\n        int x42 = 0;\n        int y42 = 0;\n        int x43 = 0;\n        int y43 = 0;\n        int x44 = 0;\n        int y44 = 0;\n        int x45 = 0;\n        int y45 = 0;\n        int x46 = 0;\n        int y46 = 0;\n        int x47 = 0;\n        int y47 = 0;\n        int x48 = 0;\n        int y48 = 0;\n        int x49 = 0;\n        int y49 = 0;\n        int x50 = 0;\n        int y50 = 0;\n        int x51 = 0;\n        int y51 = 0;\n        int x52 = 0;\n        int y52 = 0;\n        int x53 = 0;\n        int y53 = 0;\n        int x54 = 0;\n        int y54 = 0;\n        int x55 = 0;\n        int y55 = 0;\n        int x56 = 0;\n        int y56 = 0;\n        int x57 = 0;\n        int y57 = 0;\n        int x58 = 0;\n        int y58 = 0;\n        int x59 = 0;\n        int y59 = 0;\n        int x60 = 0;\n        int y60 = 0;\n        int x61 = 0;\n        int y61 = 0;\n        int x62 = 0;\n        int y62 = 0;\n        int x63 = 0;\n        int y63 = 0;\n        int x64 = 0;\n        int y64 = 0;\n        int x65 = 0;\n        int y65 = 0;\n        int x66 = 0;\n        int y66 = 0;\n        int x67 = 0;\n        int y67 = 0;\n        int x68 = 0;\n        int y68 = 0;\n        int x69 = 0;\n        int y69 = 0;\n        int x70 = 0;\n        int y70 = 0;\n        int x71 = 0;\n        int y71 = 0;\n        int x72 = 0;\n        int y72 = 0;\n        int x73 = 0;\n        int y73 = 0;\n        int x74 = 0;\n        int y74 = 0;\n        int x75 = 0;\n        int y75 = 0;\n        int x76 = 0;\n        int y76 = 0;\n        int x77 = 0;\n        int y77 = 0;\n        int x78 = 0;\n        int y78 = 0;\n        int x79 = 0;\n        int y79 = 0;\n        int x80 = 0;\n        int y80 = 0;\n        int x81 = 0;\n        int y81 = 0;\n        int x82 = 0;\n        int y82 = 0;\n        int x83 = 0;\n        int y83 = 0;\n        int x84 = 0;\n        int y84 = 0;\n        int x85 = 0;\n        int y85 = 0;\n        int x86 = 0;\n        int y86 = 0;\n        int x87 = 0;\n        int y87 = 0;\n        int x88 = 0;\n        int y88 = 0;\n        int x89 = 0;\n        int y89 = 0;\n        int x90 = 0;\n        int y90 = 0;\n        int x91 = 0;\n        int y91 = 0;\n        int x92 = 0;\n        int y92 = 0;\n        int x93 = 0;\n        int y93 = 0;\n        int x94 = 0;\n        int y94 = 0;\n        int x95 = 0;\n        int y95 = 0;\n        int x96 = 0;\n        int y96 = 0;\n        int x97 = 0;\n        int y97 = 0;\n        int x98 = 0;\n        int y98 = 0;\n        int x99 = 0;\n        int y99 ="], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int m = grid.size();\n        int n = grid[0].size();\n        int[][] dp = new int[m][n];\n        for(int i = 0; i < m; i++) {\n            for(int j = 0; j < n; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = grid[i][j];\n                }\n                else if(i == 0) {\n                    dp[i][j] = dp[i][j-1] + grid[i][j];\n                }\n                else if(j == 0) {\n                    dp[i][j] = dp[i-1][j] + grid[i][j];\n                }\n                else {\n                    dp[i][j] = Math.min(dp[i-1][j], dp[i][j-1]) + grid[i][j];\n                }\n            }\n        }\n        List<Integer> res = new ArrayList<>();\n        for(int i = 0; i < m; i++) {\n            for(int j = 0; j < n; j++) {\n                res.add(dp[i][j]);\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int m = grid.size();\n        int n = grid[0].size();\n        int[][] dp = new int[m][n];\n        for(int i=0; i<m; i++) {\n            for(int j=0; j<n; j++) {\n                if(i==0 && j==0) {\n                    dp[i][j] = grid[i][j];\n                } else if(i==0) {\n                    dp[i][j] = dp[i][j-1] + grid[i][j];\n                } else if(j==0) {\n                    dp[i][j] = dp[i-1][j] + grid[i][j];\n                } else {\n                    dp[i][j] = Math.min(dp[i-1][j], dp[i][j-1]) + grid[i][j];\n                }\n            }\n        }\n        List<Integer> res = new ArrayList<>();\n        for(int i=0; i<m; i++) {\n            for(int j=0; j<n; j++) {\n                res.add(dp[i][j]);\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int m = grid.size();\n        int n = grid[0].size();\n        int[][] dp = new int[m][n];\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = grid[i][j];\n                } else if (i == 0) {\n                    dp[i][j] = grid[i][j] + dp[i][j - 1];\n                } else if (j == 0) {\n                    dp[i][j] = grid[i][j] + dp[i - 1][j];\n                } else {\n                    dp[i][j] = Math.min(grid[i][j] + dp[i - 1][j], grid[i][j] + dp[i][j - 1]);\n                }\n            }\n        }\n        List<Integer> res = new ArrayList<>();\n        for (int i = m - 1; i >= 0; i--) {\n            for (int j = n - 1; j >= 0; j--) {\n                res.add(dp[i][j]);\n            }\n        }\n        Collections.reverse(res);\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int m = grid.size();\n        int n = grid[0].size();\n        int[][] dp = new int[m][n];\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = grid[i][j];\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + grid[i][j];\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + grid[i][j];\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n                }\n            }\n        }\n        List<Integer> res = new ArrayList<>();\n        for (int i = m - 1; i >= 0; i--) {\n            for (int j = n - 1; j >= 0; j--) {\n                res.add(dp[i][j]);\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        if (n == 0) {\n            return List.of(1);\n        }\n        \n        List<Integer> my_tri = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            my_tri.add(my_tri.get(my_tri.size() - 1) + my_tri.get(my_tri.size() - 2));\n        }\n        return my_tri;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> my_tri = new ArrayList<Integer>();\n        my_tri.add(1);\n        my_tri.add(3);\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                my_tri.add(i / 2 + 1);\n            } else {\n                my_tri.add(my_tri.get(i - 1) + my_tri.get(i - 2) + (i + 3) /\n\n## 3. \u5b57\u7b26\u4e32\n\n### 3.1 \u5b57\u7b26\u4e32\u7684\u57fa\u672c\u64cd\u4f5c\n\n```java\n// Question: Provide a concise natural language description of the code using at most 577 characters.\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String reverse(String s) {\n        char[] my_reverse = s.toCharArray();\n        int i = 0;\n        int j = my_reverse.length - 1;\n        while (i < j) {\n            char temp = my_reverse[i];\n            my_reverse[i] = my_reverse[j];\n            my_reverse[j] = temp;\n            i++;\n            j--;\n        }\n        return new String(my_reverse);\n    }\n}\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public String reverse(String s) {\n        char[] my_reverse = s.toCharArray();\n        int i = 0;\n        int j = my_reverse.length - 1;\n        while (i < j) {\n            char temp = my_reverse[i];\n            my_reverse[i] = my_reverse[j];\n            my_reverse[j] = temp;\n            i++;\n            j--;\n        }\n        return new String(my_reverse);\n    }\n}\n\n## 4. \u96c6\u5408\n\n### 4.1 \u96c6\u5408\u7684\u57fa\u672c\u64cd\u4f5c\n\n```java\n// Question: Provide a concise natural language description of the code using at most 577 characters.\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isPalindrome(int[] nums) {\n        if (nums.length == 0) {\n            return true;\n        }\n        int i = 0;\n        int j = nums.length - 1;\n        while (i < j) {\n            if (nums[i] != nums[j]) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public boolean isPalindrome(int[] nums) {\n        if (nums.length == 0) {\n            return true;\n        }\n        int i = 0;\n        int j = nums.length - 1;\n        while (i < j) {\n            if (nums[i] != nums[j]) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}\n\n## 5. \u94fe\u8868\n\n### 5.1 \u94fe\u8868\u7684\u57fa\u672c\u64cd\u4f5c\n\n```java\n// Question: Provide a concise natural language description of the code using at most 577 characters.\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int[] reverse(int[] nums) {\n        if (nums.length == 0) {\n            return new int[0];\n        }\n        int i = 0;\n        int j = nums.length - 1;\n        while (i < j) {\n            int temp = nums[i];\n            nums[i] = nums[j];\n            nums[j] = temp;\n            i++;\n            j--;\n        }\n        return nums;\n    }\n}\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int[] reverse(int[] nums) {\n        if (nums.length == 0) {\n            return new int[0];\n        }\n        int i = 0;\n        int j = nums.length - 1;\n        while (i < j) {\n            int temp = nums[i];\n            nums[i] = nums[j];\n            nums[j] = temp;\n            i++;\n            j--;\n        }\n        return nums;\n    }\n}\n\n## 6. \u6808\n\n### 6.1 \u6808\u7684\u57fa\u672c\u64cd\u4f5c\n\n```java\n// Question: Provide a concise natural language description of the code using at most 577 characters.\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int[] reverse(int[] nums) {\n        if (nums.length == 0) {\n            return new int[0];\n        }\n        int i = 0;\n        int j = nums.length - 1;\n        while (i < j) {\n            int temp = nums[i];\n            nums[i] = nums[j];\n            nums[j] = temp;\n            i++;\n            j--;\n        }\n        return nums;\n    }\n}\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int[] reverse(int[] nums) {\n        if (nums.length == 0) {\n            return new int[0];\n        }\n        int i = 0;\n        int j = nums.length - 1;\n        while (i < j) {\n            int temp = nums[i];\n            nums[i] = nums[j];\n            nums[j] = temp;\n            i++;\n            j--;\n        }\n        return nums;\n    }\n}\n\n## 7. \u961f\u5217\n\n### 7.1 \u961f\u5217\u7684\u57fa\u672c\u64cd\u4f5c\n\n```java\n// Question: Provide a concise natural language description of the code using at most 577 characters.\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int[] reverse(int[] nums) {\n        if (nums.length == 0) {\n            return new int[0];\n        }\n        int i = 0;\n        int j = nums.length - 1;\n        while (i < j) {\n            int temp = nums[i];\n            nums[i] = nums[j];\n            nums[j] = temp;\n            i++;\n            j--;\n        }\n        return nums;\n    }\n}\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int[] reverse(int[] nums) {\n        if (nums.length == 0) {\n            return new int[0];\n        }\n        int i = 0;\n        int j = nums.length - 1;\n        while (i < j) {\n            int temp = nums[i];\n            nums[i] = nums[j];\n            nums[j] = temp;\n            i++;\n            j--;\n        }\n        return nums;\n    }\n}\n\n## 8. \u53cc\u7aef\u961f\u5217\n\n### 8.1 \u53cc\u7aef\u961f\u5217\u7684\u57fa\u672c\u64cd\u4f5c\n\n```java\n// Question: Provide a concise natural language description of the code using at most 577 characters.\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int[] reverse(int[] nums) {\n        if (nums.length == 0) {\n            return new int[0];\n        }\n        int i = 0;\n        int j = nums.length - 1;\n        while (i < j) {\n            int temp = nums[i];\n            nums[i] = nums[j];\n            nums[j] = temp;\n            i++;\n            j--;\n        }\n        return nums;\n    }\n}\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int[] reverse(int[] nums) {\n        if (nums.length == 0) {\n            return new int[0];\n        }\n        int i = 0;\n        int j = nums.length - 1;\n        while (i < j) {\n            int temp = nums[i];\n            nums[i] = nums[j];\n            nums[j] = temp;\n            i++;\n            j--;\n        }\n        return nums;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> list = new ArrayList<Integer>();\n        int i = 1;\n        while(i <= n) {\n            list.add(i);\n            i++;\n        }\n        return list;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> ans = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= n; j++) {\n                for (int k = 1; k <= n; k++) {\n                    ans.add(i * j * k);\n                }\n            }\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> ans = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= n; j++) {\n                for (int k = 1; k <= n; k++) {\n                    ans.add(i * j * k);\n                }\n            }\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> list = new ArrayList<Integer>();\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum = sum + i;\n            list.add(sum);\n        }\n        return list;\n    }\n\n    public static void main(String[] args) {\n        int n = 5;\n        Solution s = new Solution();\n        List<Integer> list = s.tri(n);\n        for (int i = 0; i < list.size(); i++) {\n            System.out.println(list.get(i));\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> res = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    for (int l = k + 1; l < n; l++) {\n                        if (i != j && j != k && k != l && l != i) {\n                            int sum = i + j + k + l;\n                            if (sum == 0) {\n                                res.add(i);\n                                res.add(j);\n                                res.add(k);\n                                res.add(l);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return res;\n    }\n\n    public List<Integer> fourSum(int[] nums) {\n        List<Integer> res = new ArrayList<Integer>();\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i + 1; j < nums.length; j++) {\n                for (int k = j + 1; k < nums.length; k++) {\n                    for (int l = k + 1; l < nums.length; l++) {\n                        int sum = nums[i] + nums[j] + nums[k] + nums[l];\n                        if (sum == 0) {\n                            res.add(nums[i]);\n                            res.add(nums[j]);\n                            res.add(nums[k]);\n                            res.add(nums[l]);\n                        }\n                    }\n                }\n            }\n        }\n        return res;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 0, -1, 0, -2, 2};\n        Solution s = new Solution();\n        System.out.println(s.tri(nums.length));\n        System.out.println(s.fourSum(nums));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> list = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            list.add(i);\n        }\n        return list;\n    }\n\n    public static void main(String[] args) {\n        int n = 10;\n        Solution s = new Solution();\n        List<Integer> list = s.tri(n);\n        for (int i = 0; i < list.size(); i++) {\n            System.out.print(list.get(i) + \" \");\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> ans = new ArrayList<>();\n        if (n == 0) {\n            return ans;\n        }\n        if (n == 1) {\n            ans.add(1);\n            ans.add(1);\n            return ans;\n        }\n        if (n == 2) {\n            ans.add(1);\n            ans.add(1);\n            ans.add(1);\n            return ans;\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> ans = new ArrayList<Integer>();\n        int i = 1;\n        int j = 1;\n        int k = 1;\n        while (i <= n) {\n            while (j <= n) {\n                while (k <= n) {\n                    ans.add(i);\n                    ans.add(j);\n                    ans.add(k);\n                    k++;\n                }\n                j++;\n            }\n            i++;\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> ans = new ArrayList<>();\n        if (n == 0) return ans;\n        if (n == 1) return Arrays.asList(1);\n        if (n == 2) return Arrays.asList(1, 1);\n        if (n == 3) return Arrays.asList(1, 1, 1);\n        for (int i = 0; i < n; i++) {\n            ans.add(1);\n            for (int j = 0; j < i; j++) {\n                ans.add(ans.get(j) + ans.get(j + 1));\n            }\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> list = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            list.add(i);\n        }\n        return list;\n    }\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        Solution solution = new Solution();\n        List<Integer> list = solution.tri(n);\n        for (Integer integer : list) {\n            System.out.print(integer + \" \");\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> ans = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= n; j++) {\n                for (int k = 1; k <= n; k++) {\n                    ans.add(i + j + k);\n                }\n            }\n        }\n        return ans;\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<Integer> ans = s.tri(5);\n        for (int i : ans) {\n            System.out.print(i + \" \");\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> res = new ArrayList<>();\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < n; j++) {\n                for(int k = 0; k < n; k++) {\n                    if(i == j || i == k || j == k) {\n                        res.add(i);\n                    }\n                }\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> ans = new ArrayList<>();\n        for(int i=1;i<=n;i++){\n            for(int j=1;j<=n;j++){\n                for(int k=1;k<=n;k++){\n                    if(i+j+k==n){\n                        ans.add(i);\n                        ans.add(j);\n                        ans.add(k);\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> ans = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= n - i; j++) {\n                ans.add(i);\n            }\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = n; i > 0; i--) {\n            result.add(i % 10);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        if (n == 0) {\n            return List.of(1);\n        }\n        \n        \n            if (i % 2 == 0) {\n                \n            } else {\n                \n            }\n        }\n        return my_tri;\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> ans = new ArrayList<>();\n        if (n == 0) return ans;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == 0 || j == 0) {\n                    ans.add(0);\n                } else {\n                    ans.add(Math.max(dp[i][j], dp[i - 1][j] + 1));\n                }\n            }\n        }\n        return ans;\n    }\n\n    public int longestCommonSubsequence(String s1, String s2) {\n        int[][] dp = new int[s1.length() + 1][s2.length() + 1];\n        for (int i = 0; i <= s1.length(); i++) {\n            for (int j = 0; j <= s2.length(); j++) {\n                if (i == 0 || j == 0) {\n                    dp[i][j] = 0;\n                } else {\n                    dp[i][j] = Math.max(dp[i][j - 1], dp[i - 1][j] + 1);\n                }\n            }\n        }\n        return dp[s1.length()][s2.length()];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if (Math.abs(nums[i] + nums[j] + nums[k]) < Math.abs(target - nums[i] - nums[j] - nums[k])) {\n                        res.add(nums[i]);\n                        res.add(nums[j]);\n                        res.add(nums[k]);\n                    }\n                }\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int count = 0;\n        while (n > 0) {\n            n /= 10;\n            count++;\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int count = 0;\n        while (n > 0) {\n            n /= 10;\n            count++;\n        }\n        return count;\n    }\n\n    public int findLargest(int[] nums) {\n        int max = nums[0];\n        for (int i = 0; i < nums.length; i++) {\n            if (nums[i] > max) {\n                max = nums[i];\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        if(n == 0) return 0;\n        int count = 0;\n        while(n != 0) {\n            n /= 10;\n            count++;\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int count = 0;\n        while (n > 0) {\n            n = n / 10;\n            count++;\n        }\n        return count;\n    }\n\n    public int product(int n) {\n        int count = digits(n);\n        int product = 1;\n        for (int i = 0; i < count; i++) {\n            product *= n % 10;\n            n /= 10;\n        }\n        return product;\n    }\n\n    public int solution(int n) {\n        int count = digits(n);\n        int product = 1;\n        for (int i = 0; i < count; i++) {\n            product *= n % 10;\n            n /= 10;\n        }\n        if (product % 2 == 0) {\n            return product / 2;\n        } else {\n            return product / 2 + 1;\n        }\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        System.out.println(solution(n));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int count = 0;\n        while (n > 0) {\n            n /= 10;\n            count++;\n        }\n        return count;\n    }\n\n    public int countDigits(int n) {\n        int count = 0;\n        while (n > 0) {\n            n /= 10;\n            count++;\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        Solution s = new Solution();\n        System.out.println(s.digits(n));\n        System.out.println(s.countDigits(n));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int count = 0;\n        while (n > 0) {\n            n /= 10;\n            count++;\n        }\n        return count;\n    }\n\n    public String longestPalindrome(String s) {\n        int len = s.length();\n        if (len < 2) {\n            return s;\n        }\n        int[][] dp = new int[len][len];\n        for (int i = 0; i < len; i++) {\n            dp[i][i] = 1;\n        }\n        for (int i = 1; i < len; i++) {\n            for (int j = 0; j < i; j++) {\n                if (s.charAt(j) == s.charAt(i)) {\n                    dp[j][i] = dp[j + 1][i - 1] + 2;\n                }\n            }\n        }\n        int max = 0;\n        for (int i = 0; i < len; i++) {\n            for (int j = 0; j < i; j++) {\n                if (dp[i][j] > max) {\n                    max = dp[i][j];\n                }\n            }\n        }\n        return s.substring(0, max);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int odd_count = 0;\n        int product = 1;\n        while (n > 0) {\n            product *= n % 10;\n            n /= 10;\n            odd_count++;\n        }\n        return odd_count;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        Solution s = new Solution();\n        int odd_count = s.digits(n);\n        System.out.println(odd_count);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int count = 0;\n        while (n > 0) {\n            n /= 10;\n            count++;\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int count = 0;\n        while(n > 0) {\n            n /= 10;\n            count++;\n        }\n        return count;\n    }\n\n    public int solution(int n) {\n        int count = 0;\n        while(n > 0) {\n            n /= 10;\n            count++;\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int count = 0;\n        while (n != 0) {\n            n = n / 10;\n            count++;\n        }\n        return count;\n    }\n\n    public int product(int n) {\n        int count = 1;\n        while (n != 0) {\n            n = n / 10;\n            count *= 10;\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int odd_count = 0;\n        int product = 1;\n        for (int i = 1; i <= digits(n); i++) {\n            int num = n % 10;\n            if (num % 2 == 1) {\n                odd_count++;\n            }\n            product *= num;\n        }\n        System.out.println(odd_count);\n        System.out.println(product);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int count = 0;\n        while (n != 0) {\n            n /= 10;\n            count++;\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        if(n == 0)\n            return 0;\n        int count = 1;\n        while(n > 0)\n        {\n            n = n/10;\n            count++;\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int count = 0;\n        while (n != 0) {\n            n /= 10;\n            count++;\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int count = 0;\n        while (n != 0) {\n            n = n / 10;\n            count++;\n        }\n        return count;\n    }\n\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\n        List<List<Integer>> result = new ArrayList<>();\n        if (root == null) {\n            return result;\n        }\n        Queue<TreeNode> queue = new LinkedList<>();\n        queue.offer(root);\n        while (!queue.isEmpty()) {\n            int size = queue.size();\n            List<Integer> level = new ArrayList<>();\n            for (int i = 0; i < size; i++) {\n                TreeNode node = queue.poll();\n                level.add(node.val);\n                if (node.left != null) {\n                    queue.offer(node.left);\n                }\n                if (node.right != null) {\n                    queue.offer(node.right);\n                }\n            }\n            result.add(level);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int count = 0;\n        while (n != 0) {\n            n /= 10;\n            count++;\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        Solution solution = new Solution();\n        int result = solution.digits(n);\n        System.out.println(result);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int count = 0;\n        while (n != 0) {\n            n /= 10;\n            count++;\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int count = 0;\n        while (n != 0) {\n            n = n / 10;\n            count++;\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        Solution s = new Solution();\n        int ans = s.digits(n);\n        System.out.println(ans);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int odd_count = 0;\n        int count = 0;\n        while (n != 0) {\n            count++;\n            n /= 10;\n        }\n        return count;\n    }\n\n    public int solution(int n) {\n        int odd_count = 0;\n        int count = 0;\n        while (n != 0) {\n            count++;\n            n /= 10;\n            odd_count++;\n        }\n        return count - odd_count;\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        Solution s = new Solution();\n        System.out.println(s.solution(n));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int count = 0;\n        while (n > 0) {\n            n /= 10;\n            count++;\n        }\n        return count;\n    }\n\n    public int countDigits(int n) {\n        int count = 0;\n        while (n > 0) {\n            n /= 10;\n            count++;\n        }\n        return count;\n    }\n\n    public int countDigits(int n, int k) {\n        int count = 0;\n        while (n > 0) {\n            n /= 10;\n            count++;\n            if (count == k) {\n                break;\n            }\n        }\n        return count;\n    }\n\n    public int countDigits(int n, int k, int m) {\n        int count = 0;\n        while (n > 0) {\n            n /= 10;\n            count++;\n            if (count == k) {\n                break;\n            }\n        }\n        return count;\n    }\n\n    public int countDigits(int n, int k, int m, int n1) {\n        int count = 0;\n        while (n > 0) {\n            n /= 10;\n            count++;\n            if (count == k) {\n                break;\n            }\n        }\n        return count;\n    }\n\n    public int countDigits(int n, int k, int m, int n1, int n2) {\n        int count = 0;\n        while (n > 0) {\n            n /= 10;\n            count++;\n            if (count == k) {\n                break;\n            }\n        }\n        return count;\n    }\n\n    public int countDigits(int n, int k, int m, int n1, int n2, int n3) {\n        int count = 0;\n        while (n > 0) {\n            n /= 10;\n            count++;\n            if (count == k) {\n                break;\n            }\n        }\n        return count;\n    }\n\n    public int countDigits(int n, int k, int m, int n1, int n2, int n3, int n4) {\n        int count = 0;\n        while (n > 0) {\n            n /= 10;\n            count++;\n            if (count == k) {\n                break;\n            }\n        }\n        return count;\n    }\n\n    public int countDigits(int n, int k, int m, int n1, int n2, int n3, int n4, int n5) {\n        int count = 0;\n        while (n > 0) {\n            n /= 10;\n            count++;\n            if (count == k) {\n                break;\n            }\n        }\n        return count;\n    }\n\n    public int countDigits(int n, int k, int m, int n1, int n2, int n3, int n4, int n5, int n6) {\n        int count = 0;\n        while (n > 0) {\n            n /= 10;\n            count++;\n            if (count == k) {\n                break;\n            }\n        }\n        return count;\n    }\n\n    public int countDigits(int n, int k, int m, int n1, int n2, int n3, int n4, int n5, int n6, int n7) {\n        int count = 0;\n        while (n > 0) {\n            n /= 10;\n            count++;\n            if (count == k) {\n                break;\n            }\n        }\n        return count;\n    }\n\n    public int countDigits(int n, int k, int m, int n1, int n2, int n3, int n4, int n5, int n6, int n7, int n8) {\n        int count = 0;\n        while (n > 0) {\n            n /= 10;\n            count++;\n            if (count == k) {\n                break;\n            }\n        }\n        return count;\n    }\n\n    public int countDigits(int n, int k, int m, int n1, int n2, int n3, int n4, int n5, int n6, int n7, int n8, int n9) {\n        int count = 0;\n        while (n > 0) {\n            n /= 10;\n            count++;\n            if (count == k) {\n                break;\n            }\n        }\n        return count;\n    }\n\n    public int countDigits(int n, int k, int m, int n1, int n2, int n3, int n4, int n5, int n6, int n7, int n8, int n9, int n10) {\n        int count = 0;\n        while (n > 0) {\n            n /= 10;\n            count++;\n            if (count == k) {\n                break;\n            }\n        }\n        return count;\n    }\n\n    public int countDigits(int n, int k, int m, int n1, int n2, int n3, int n4, int n5, int n6, int n7, int n8, int n9, int n10, int n11) {\n        int count = 0;\n        while (n > 0) {\n            n /= 10;\n            count++;\n            if (count == k) {\n                break;\n            }\n        }\n        return count;\n    }\n\n    public int countDigits(int n, int k, int m, int n1, int n2, int n3, int n4, int n5, int n6, int n7, int n8, int n9, int n10, int n11, int n12) {\n        int count = 0;\n        while (n > 0) {\n            n /= 10;\n            count++;\n            if (count == k) {\n                break;\n            }\n        }\n        return count;\n    }\n\n    public int countDigits(int n, int k, int m, int n1, int n2, int n3, int n4, int n5, int n6, int n7, int n8, int n9, int n10, int n11, int n12, int n13) {\n        int count = 0;\n        while (n > 0) {\n            n /= 10;\n            count++;\n            if (count == k) {\n                break;\n            }\n        }\n        return count;\n    }\n\n    public int countDigits(int n, int k, int m, int n1, int n2, int n3, int n4, int n5, int n6, int n7, int n8, int n9, int n10, int n11, int n12, int n13, int n14) {\n        int count = 0;\n        while (n > 0) {\n            n /= 10;\n            count++;\n            if (count == k) {\n                break;\n            }\n        }\n        return count;\n    }\n\n    public int countDigits(int n, int k, int m, int n1, int n2, int n3, int n4, int n5, int n6, int n7, int n8, int n9, int n10, int n11, int n12, int n13, int n14, int n15) {\n        int count = 0;\n        while (n > 0) {\n            n /= 10;\n            count++;\n            if (count == k) {\n                break;\n            }\n        }\n        return count;\n    }\n\n    public int countDigits(int n, int k, int m, int n1, int n2, int n3, int n4, int n5, int n6, int n7, int n8, int n9, int n10, int n11, int n12, int n13, int n14, int n15, int n16) {\n        int count = 0;\n        while (n > 0) {\n            n /= 10;\n            count++;\n            if (count == k) {\n                break;\n            }\n        }\n        return count;\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int count = 0;\n        while (n != 0) {\n            n /= 10;\n            count++;\n        }\n        return count;\n    }\n\n    public int maxProduct(int[] nums) {\n        int max = Integer.MIN_VALUE;\n        for (int num : nums) {\n            max = Math.max(max * num, num);\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for(char c : string.toCharArray()) {\n            if(c == '(') {\n                stack.push(c);\n            }\n            else if(c == ')') {\n                if(stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        if(string.length() == 0)\n            return false;\n        char[] chars = string.toCharArray();\n        Stack<Character> stack = new Stack<>();\n        for(int i = 0; i < chars.length; i++) {\n            if(chars[i] == '(') {\n                stack.push(chars[i]);\n            }\n            else if(chars[i] == ')') {\n                if(stack.isEmpty() || stack.peek() != '(')\n                    return false;\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for(char c : string.toCharArray()) {\n            if(c == '(') {\n                stack.push(c);\n            }\n            else if(c == ')') {\n                if(stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        if (string.length() == 0)\n            return false;\n        char[] chars = string.toCharArray();\n        int i = 0;\n        while (i < chars.length) {\n            if (chars[i] == '(') {\n                i++;\n                while (i < chars.length && chars[i] != ')') {\n                    i++;\n                }\n                if (i == chars.length)\n                    return false;\n                i++;\n            }\n            i++;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        if (string.length() == 0) {\n            return false;\n        }\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == '(' || c == '[') {\n                stack.push(c);\n            } else if (c == ')' || c == ']') {\n                if (stack.isEmpty() || stack.pop() != c) {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        if (string == null || string.length() == 0) {\n            return false;\n        }\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        if (string == null || string.length() == 0) {\n            return false;\n        }\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        Queue<Character> queue = new LinkedList<>();\n        HashMap<Character, Character> map = new HashMap<>();\n        map.put('{', '}');\n        map.put('[', ']');\n        map.put('(', ')');\n        for(int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if(map.containsKey(c)) {\n                stack.push(c);\n            } else {\n                if(stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if(map.get(top) != c) {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        if (string == null || string.length() == 0) {\n            return false;\n        }\n        char[] chars = string.toCharArray();\n        Stack<Character> stack = new Stack<>();\n        for (char c : chars) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        if (string.length() == 1) {\n            return true;\n        }\n        char[] chars = string.toCharArray();\n        Map<Character, Character> map = new HashMap<>();\n        map.put('(', ')');\n        map.put('[', ']');\n        map.put('{', '}');\n        map.put('<', '>');\n        for (int i = 0; i < chars.length; i++) {\n            if (map.containsKey(chars[i])) {\n                chars[i] = map.get(chars[i]);\n            }\n        }\n        return string.equals(new String(chars));\n    }\n\n    public int ladderLength(String start, String end, List<String> wordList) {\n        if (start.equals(end)) {\n            return 1;\n        }\n        Set<String> visited = new HashSet<>();\n        Queue<String> queue = new LinkedList<>();\n        queue.offer(start);\n        visited.add(start);\n        int length = 1;\n        while (!queue.isEmpty()) {\n            int size = queue.size();\n            for (int i = 0; i < size; i++) {\n                String word = queue.poll();\n                if (word.equals(end)) {\n                    return length;\n                }\n                for (int j = 0; j < wordList.size(); j++) {\n                    String nextWord = word + wordList.get(j);\n                    if (visited.contains(nextWord)) {\n                        continue;\n                    }\n                    visited.add(nextWord);\n                    queue.offer(nextWord);\n                }\n            }\n            length++;\n        }\n        return 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        if (string.length() == 0) {\n            return false;\n        }\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        if(string.length() == 0)\n            return false;\n        char[] arr = string.toCharArray();\n        Stack<Character> stack = new Stack<>();\n        for(char c : arr) {\n            if(c == '[')\n                stack.push(c);\n            else if(c == ']') {\n                if(stack.isEmpty())\n                    return false;\n                else\n                    stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n\n    public int canCompleteCircuit(int[] gas, int[] cost) {\n        int sum = 0;\n        for (int i = 0; i < gas.length; i++) {\n            sum += gas[i] * cost[i];\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double d : lst) {\n            sum += d * d;\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double d : lst) {\n            sum += (int) Math.pow(d, 2);\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int max = lst.get(0);\n        for (Double num : lst) {\n            if (num > max) {\n                max = num;\n            }\n        }\n        return max * max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            sum += num * num;\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double d : lst) {\n            sum += d * d;\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double i : lst) {\n            sum += i * i;\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        if (lst == null || lst.size() == 0) return sum;\n        ListNode head = lst.get(0);\n        ListNode cur = head;\n        while (cur != null) {\n            sum += cur.val * cur.val;\n            cur = cur.next;\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double d : lst) {\n            sum += d * d;\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for(Double d : lst) {\n            sum += d * d;\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double d : lst) {\n            sum += d * d;\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double d : lst) {\n            sum += d * d;\n        }\n        return sum;\n    }\n\n    public int ladderLength(String start, String end, List<String> wordList) {\n        int[][] dp = new int[wordList.size()][wordList.size()];\n        for (int i = 0; i < wordList.size(); i++) {\n            dp[i][i] = 0;\n        }\n        for (int i = 0; i < wordList.size(); i++) {\n            for (int j = 0; j < wordList.size(); j++) {\n                if (wordList.get(i).equals(wordList.get(j))) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = Math.min(dp[i][j], Math.min(dp[i + 1][j], dp[i][j + 1]) + 1);\n                }\n            }\n        }\n        return dp[0][wordList.size() - 1];\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        List<String> wordList = new ArrayList<>();\n        wordList.add(\"hot\");\n        wordList.add(\"dot\");\n        wordList.add(\"dog\");\n        wordList.add(\"lot\");\n        wordList.add(\"log\");\n        wordList.add(\"cog\");\n        System.out.println(s.ladderLength(\"hit\", \"cog\", wordList));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            sum += num * num;\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double d : lst) {\n            sum += d * d;\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        \n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double d : lst) {\n            sum += (int) Math.pow(d, 2);\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for(Double num : lst) {\n            sum += num * num;\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int n = lst.size();\n        int[] sum = new int[n];\n        for (int i = 0; i < n; i++) {\n            sum[i] = lst.get(i).intValue();\n        }\n        Arrays.sort(sum);\n        int res = 0;\n        for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if (sum[i] + sum[j] + sum[k] == 0) {\n                        res++;\n                    }\n                }\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double d : lst) {\n            sum += d * d;\n        }\n        return sum;\n    }\n\n    public int maxSum(List<Integer> lst) {\n        int max = Integer.MIN_VALUE;\n        int sum = 0;\n        for (Integer i : lst) {\n            sum += i;\n            max = Math.max(max, sum);\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double d : lst) {\n            sum += d * d;\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double d : lst) {\n            sum += d * d;\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        String check = words[words.\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.length() == 0) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        return Character.isLetter(lastChar);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        char[] chars = txt.toCharArray();\n        if (chars.length == 0)\n            return false;\n        char lastChar = chars[chars.length - 1];\n        if (lastChar >= 'A' && lastChar <= 'Z')\n            return false;\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        char lastChar = txt.charAt(txt.length() - 1);\n        return lastChar >= 'A' && lastChar <= 'Z';\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.length() == 0) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        if (lastChar >= 'A' && lastChar <= 'Z') {\n            return true;\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.checkIfLastCharIsALetter(\"Hello\"));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        char lastChar = txt.charAt(txt.length() - 1);\n        return Character.isLetter(lastChar);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        String[] words = txt.split(\" \");\n        return words[words.length - 1].charAt(words[words.length - 1].length() - 1) == 'a';\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.length() == 0) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        return (lastChar >= 'A' && lastChar <= 'Z');\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.length() == 0) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        if (lastChar >= 'a' && lastChar <= 'z') {\n            return true;\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        char lastChar = txt.charAt(txt.length()-1);\n        return lastChar >= 'a' && lastChar <= 'z';\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if(txt.length() == 0)\n            return false;\n        char lastChar = txt.charAt(txt.length()-1);\n        if(lastChar >= 'A' && lastChar <= 'Z')\n            return true;\n        else\n            return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.length() == 0)\n            return false;\n        char lastChar = txt.charAt(txt.length() - 1);\n        return Character.isLetter(lastChar);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if(txt.length() == 0)\n            return false;\n        char lastChar = txt.charAt(txt.length()-1);\n        if(lastChar >= 'A' && lastChar <= 'Z')\n            return true;\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        char lastChar = txt.charAt(txt.length() - 1);\n        return lastChar >= 'A' && lastChar <= 'Z';\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.length() == 0) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        return lastChar >= 'A' && lastChar <= 'Z';\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if(txt.length() == 0)\n            return false;\n        char lastChar = txt.charAt(txt.length()-1);\n        if(lastChar >= 'A' && lastChar <= 'Z')\n            return true;\n        else\n            return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.length() == 0) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        return (lastChar >= 'A' && lastChar <= 'Z');\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.length() == 0) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        if (lastChar >= 'A' && lastChar <= 'Z') {\n            return true;\n        }\n        return false;\n    }\n\n    public String longestCommonPrefix(String[] strs) {\n        if (strs == null || strs.length == 0) {\n            return \"\";\n        }\n        String prefix = strs[0];\n        for (int i = 1; i < strs.length; i++) {\n            if (strs[i].length() > prefix.length()) {\n                prefix = strs[i];\n            }\n        }\n        return prefix;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        char lastChar = txt.charAt(txt.length() - 1);\n        return lastChar >= 'A' && lastChar <= 'Z';\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        String str = in.nextLine();\n\n        if (checkIfLastCharIsALetter(str)) {\n            System.out.println(\"Yes\");\n        } else {\n            System.out.println(\"No\");\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if(txt.length() == 0)\n            return false;\n        char lastChar = txt.charAt(txt.length()-1);\n        return lastChar >= 'A' && lastChar <= 'Z';\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        if(n == 0)\n            return 0;\n        int[] dp = new int[n];\n        Arrays.fill(dp, -1);\n        dp[0] = 1;\n        for(int i = 1; i < n; i++) {\n            if(arr.get(i) < arr.get(i-1))\n                dp[i] = dp[i-1];\n            else\n                dp[i] = dp[i-1] + 1;\n        }\n        return dp[n-1];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        int[] arr2 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr2[i] = arr.get(i);\n        }\n        Arrays.sort(arr2);\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            if(arr2[i] == arr2[i+1]) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        int min = arr.get(0);\n        int max = arr.get(n-1);\n        int mid;\n        if(n == 1)\n            return 1;\n        else if(n == 2)\n            return arr.get(0) == arr.get(1) ? 1 : 0;\n        else{\n            mid = (min + max) / 2;\n            if(arr.get(mid) == min)\n                return canArrange(arr.subList(1, n));\n            else if(arr.get(mid) == max)\n                return canArrange(arr.subList(0, n-1));\n            else{\n                int left = canArrange(arr.subList(0, mid));\n                int right = canArrange(arr.subList(mid+1, n));\n                return left + right;\n            }\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int ind = -1, i = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == i + 1) {\n                ind = i;\n                break;\n            }\n        }\n        return ind;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        if (n == 0) {\n            return 0;\n        }\n        int[] dp = new int[n + 1];\n        Arrays.fill(dp, -1);\n        dp[0] = 0;\n        for (int i = 1; i <= n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) > arr.get(i)) {\n                    dp[i] = Math.max(dp[i], dp[j] + 1);\n                }\n            }\n        }\n        return dp[n];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int ind = -1, i = 1;\n        for(int j = 0; j < arr.size(); j++) {\n            if(arr.get(j) == i) {\n                ind = j;\n                break;\n            }\n        }\n        return ind;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        if(n == 0) return 0;\n        int[] dp = new int[n];\n        for(int i = 0; i < n; i++) {\n            dp[i] = arr.get(i);\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                if(dp[i] + dp[j] == arr.get(i) + arr.get(j)) {\n                    dp[i] = dp[i] + dp[j];\n                    dp[j] = 0;\n                    break;\n                }\n            }\n        }\n        return dp[0] == 0 ? 1 : 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        int[] arr1 = new int[n];\n        int[] arr2 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr1[i] = arr.get(i);\n            arr2[i] = arr.get(i);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            if(arr1[i] != arr2[i]) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        for (int i = 0; i < n; i++) {\n            if (arr.get(i) > 0 && arr.get(i) <= n && arr.get(i) != arr.get(arr.get(i))) {\n                return arr.get(i);\n            }\n        }\n        return n;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        if (n == 0) return 0;\n        int[] arr2 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr2[i] = arr.get(i);\n        }\n        Arrays.sort(arr2);\n        int min = arr2[0];\n        for (int i = 1; i < n; i++) {\n            if (arr2[i] != min) return 0;\n        }\n        return 1;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        int[] arr1 = new int[n];\n        for(int i=0;i<n;i++)\n            arr1[i] = arr.get(i);\n        Arrays.sort(arr1);\n        int count = 0;\n        for(int i=0;i<n;i++)\n            if(arr1[i] == i+1)\n                count++;\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        if (n == 0)\n            return 0;\n        int[] arr1 = new int[n];\n        int[] arr2 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr1[i] = arr.get(i);\n        }\n        for (int i = 0; i < n; i++) {\n            arr2[i] = arr.get(i);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        int i = 0;\n        int j = 0;\n        while (i < n && j < n) {\n            if (arr1[i] == arr2[j]) {\n                i++;\n                j++;\n            } else if (arr1[i] < arr2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return i == n ? 1 : 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        if (arr == null || arr.size() == 0) {\n            return 0;\n        }\n        int n = arr.size();\n        int[] dp = new int[n + 1];\n        for (int i = 1; i <= n; i++) {\n            dp[i] = arr.get(i - 1);\n        }\n        for (int i = 1; i <= n; i++) {\n            for (int j = i + 1; j <= n; j++) {\n                if (dp[i] + dp[j] > dp[i + j]) {\n                    dp[i + j] = dp[i] + dp[j];\n                }\n            }\n        }\n        return dp[n];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int ind = -1, i = 1;\n        for (int j = 0; j < arr.size(); j++) {\n            if (arr.get(j) == i) {\n                ind = i;\n                i += 1;\n            }\n        }\n        return ind;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        int[] dp = new int[n];\n        Arrays.fill(dp, -1);\n        dp[0] = 0;\n        for(int i = 1; i < n; i++) {\n            if(arr.get(i) > arr.get(i-1)) {\n                dp[i] = dp[i-1] + 1;\n            }\n        }\n        return dp[n-1];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        if(n == 0) return 0;\n        int[] dp = new int[n];\n        Arrays.fill(dp, -1);\n        dp[0] = 0;\n        for(int i = 1; i < n; i++) {\n            if(arr.get(i - 1) < arr.get(i)) {\n                dp[i] = dp[i - 1] + 1;\n            }\n        }\n        return dp[n - 1];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        int[] arr1 = new int[n];\n        int[] arr2 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr1[i] = arr.get(i);\n            arr2[i] = arr.get(i);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        for(int i = 0; i < n; i++) {\n            if(arr1[i] != arr2[i]) {\n                return 0;\n            }\n        }\n        return 1;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        int min = arr.get(0);\n        int max = arr.get(n-1);\n        int mid = (min + max) / 2;\n        if(arr.get(mid) == min)\n            return 0;\n        else if(arr.get(mid) == max)\n            return 1;\n        else if(arr.get(mid) < min)\n            return canArrange(arr.subList(0, mid+1));\n        else\n            return canArrange(arr.subList(mid+1, n));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int mi\n```\n"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        int[] dp = new int[n];\n        Arrays.fill(dp, -1);\n        dp[0] = 0;\n        for (int i = 1; i < n; i++) {\n            int max = Integer.MIN_VALUE;\n            for (int j = 0; j < i; j++) {\n                if (arr.get(j) > arr.get(i)) {\n                    max = Math.max(max, dp[j] + 1);\n                }\n            }\n            dp[i] = max;\n        }\n        return dp[n - 1];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> res = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0){\n                lst.set(i, -lst.get(i));\n            }\n            res.add(Optional.of(lst.get(i)));\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> result = new ArrayList<>();\n        int max = Integer.MIN_VALUE;\n        int min = Integer.MAX_VALUE;\n        for(int i : lst){\n            if(i > max){\n                max = i;\n            }\n            if(i < min){\n                min = i;\n            }\n        }\n        result.add(Optional.of(max));\n        result.add(Optional.of(min));\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> res = new ArrayList<>();\n        if(lst.size() == 0) return res;\n        int n = lst.size();\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n1 = 0;\n        int n2 = 0;\n        int n3 = 0;\n        int n4 = 0;\n        int n5 = 0;\n        int n6 = 0;\n        int n7 = 0;\n        int n8 = 0;\n        int n9 = 0;\n        int n10 = 0;\n        int n11 = 0;\n        int n12 = 0;\n        int n13 = 0;\n        int n14 = 0;\n        int n15 = 0;\n        int n16 = 0;\n        int n17 = 0;\n        int n18 = 0;\n        int n19 = 0;\n        int n20 = 0;\n        int n21 = 0;\n        int n22 = 0;\n        int n23 = 0;\n        int n24 = 0;\n        int n25 = 0;\n        int n26 = 0;\n        int n27 = 0;\n        int n28 = 0;\n        int n29 = 0;\n        int n30 = 0;\n        int n31 = 0;\n        int n32 = 0;\n        int n33 = 0;\n        int n34 = 0;\n        int n35 = 0;\n        int n36 = 0;\n        int n37 = 0;\n        int n38 = 0;\n        int n39 = 0;\n        int n40 = 0;\n        int n41 = 0;\n        int n42 = 0;\n        int n43 = 0;\n        int n44 = 0;\n        int n45 = 0;\n        int n46 = 0;\n        int n47 = 0;\n        int n48 = 0;\n        int n49 = 0;\n        int n50 = 0;\n        int n51 = 0;\n        int n52 = 0;\n        int n53 = 0;\n        int n54 = 0;\n        int n55 = 0;\n        int n56 = 0;\n        int n57 = 0;\n        int n58 = 0;\n        int n59 = 0;\n        int n60 = 0;\n        int n61 = 0;\n        int n62 = 0;\n        int n63 = 0;\n        int n64 = 0;\n        int n65 = 0;\n        int n66 = 0;\n        int n67 = 0;\n        int n68 = 0;\n        int n69 = 0;\n        int n70 = 0;\n        int n71 = 0;\n        int n72 = 0;\n        int n73 = 0;\n        int n74 = 0;\n        int n75 = 0;\n        int n76 = 0;\n        int n77 = 0;\n        int n78 = 0;\n        int n79 = 0;\n        int n80 = 0;\n        int n81 = 0;\n        int n82 = 0;\n        int n83 = 0;\n        int n84 = 0;\n        int n85 = 0;\n        int n86 = 0;\n        int n87 = 0;\n        int n88 = 0;\n        int n89 = 0;\n        int n90 = 0;\n        int n91 = 0;\n        int n92 = 0;\n        int n93 = 0;\n        int n94 = 0;\n        int n95 = 0;\n        int n96 = 0;\n        int n97 = 0;\n        int n98 = 0;\n        int n99 = 0;\n        int n100 = 0;\n        int n101 = 0;\n        int n102 = 0;\n        int n103 = 0;\n        int n104 = 0;\n        int n105 = 0;\n        int n106 = 0;\n        int n107 = 0;\n        int n108 = 0;\n        int n109 = 0;\n        int n110 = 0;\n        int n111 = 0;\n        int n112 = 0;\n        int n113 = 0;\n        int n114 = 0;\n        int n115 = 0;\n        int n116 = 0;\n        int n117 = 0;\n        int n118 = 0;\n        int n119 = 0;\n        int n120 = 0;\n        int n121 = 0;\n        int n122 = 0;\n        int n123 = 0;\n        int n124 = 0;\n        int n125 = 0;\n        int n126 = 0;\n        int n127 = 0;\n        int n128 = 0;\n        int n129 = 0;\n        int n130 = 0;\n        int n131 = 0;\n        int n132 = 0;\n        int n133 = 0;\n        int n134 = 0;\n        int n135 = 0;\n        int n136 = 0;\n        int n137 = 0;\n        int n138 = 0;\n        int n139 = 0;\n        int n140 = 0;\n        int n141 = 0;\n        int n142 = 0;\n        int n143 = 0;\n        int n144 = 0;\n        int n145 = 0;\n        int n146 = 0;\n        int n147 = 0;\n        int n148 = 0;\n        int n149 = 0;\n        int n150 = 0;\n        int n151 = 0;\n        int n152 = 0;\n        int n153 = 0;\n        int n154 = 0;\n        int n155 = 0;\n        int n156 = 0;\n        int n157 = 0;\n        int n158 = 0;\n        int n159 = 0;\n        int n160 = 0;\n        int n161 = 0;\n        int n162 = 0;\n        int n163 = 0;\n        int n164 = 0;\n        int n165 = 0;\n        int n166 = 0;\n        int n167 = 0;\n        int n168 = 0;\n        int n169 = 0;\n        int n170 = 0;\n        int n171 = 0;\n        int n172 = 0;\n        int n173 = 0;\n        int n174 = 0;\n        int n175 = 0;\n        int n176 = 0;\n        int n177 = 0;\n        int n178 = 0;\n        int n179 = 0;\n        int n180 = 0;\n        int n181 = 0;\n        int n182 = 0;\n        int n183 = 0;\n        int n1"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> res = new ArrayList<>();\n        int n = lst.size();\n        int[] arr = new int[n];\n        for(int i = 0; i < n; i++) arr[i] = lst.get(i);\n        Arrays.sort(arr);\n        for(int i = 0; i < n; i++){\n            if(arr[i] == arr[i+1]) res.add(Optional.of(arr[i]));\n            else res.add(Optional.empty());\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> result = new ArrayList<>();\n        int min = Integer.MAX_VALUE;\n        int max = Integer.MIN_VALUE;\n        for(int i: lst){\n            if(i < 0){\n                min = Math.min(min, i);\n            }\n            else{\n                max = Math.max(max, i);\n            }\n        }\n        result.add(Optional.of(min));\n        result.add(Optional.of(max));\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> result = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n        for(int i = 0; i < lst.size(); i++){\n            if(map.containsKey(lst.get(i))){\n                map.put(lst.get(i), map.get(lst.get(i))+1);\n            }else{\n                map.put(lst.get(i), 1);\n            }\n        }\n        for(int i = 0; i < lst.size(); i++){\n            if(map.containsKey(lst.get(i)) && map.get(lst.get(i)) == 1){\n                result.add(Optional.of(lst.get(i)));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> result = new ArrayList<>();\n        int n = lst.size();\n        int[] arr = new int[n];\n        for(int i = 0; i < n; i++){\n            arr[i] = lst.get(i);\n        }\n        Arrays.sort(arr);\n        for(int i = 0; i < n; i++){\n            result.add(Optional.of(arr[i]));\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) < 0) {\n                result.add(Optional.of(lst.get(i)));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> result = new ArrayList<>();\n        for(int i = lst.size()-1; i >= 0; i--){\n            result.add(Optional.of(lst.get(i)));\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> res = new ArrayList<>();\n        int n = lst.size();\n        int k = k % n;\n        if(k == 0){\n            for(int i = 0; i < n; i++){\n                res.add(Optional.of(lst.get(i)));\n            }\n            return res;\n        }\n        int[] arr = new int[n];\n        for(int i = 0; i < n; i++){\n            arr[i] = lst.get(i);\n        }\n        Arrays.sort(arr);\n        for(int i = 0; i < k; i++){\n            res.add(Optional.of(arr[i]));\n        }\n        for(int i = k; i < n; i++){\n            res.add(Optional.of(arr[i - k]));\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> res = new ArrayList<>();\n        int max = Integer.MIN_VALUE;\n        int min = Integer.MAX_VALUE;\n        for(int i : lst){\n            if(i > max)\n                max = i;\n            if(i < min)\n                min = i;\n        }\n        res.add(Optional.of(max));\n        res.add(Optional.of(min));\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> res = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++){\n            int max = lst.get(i);\n            int min = lst.get(i);\n            for(int j = i + 1; j < lst.size(); j++){\n                int cur = lst.get(j);\n                if(cur > max){\n                    max = cur;\n                }\n                if(cur < min){\n                    min = cur;\n                }\n            }\n            res.add(Optional.of(max));\n            res.add(Optional.of(min));\n        }\n        return res;\n    }\n    public String longestPalindrome(String s) {\n        if (s == null || s.length() == 0) {\n            return \"\";\n        }\n        int len = s.length();\n        int[][] dp = new int[len][len];\n        for (int i = 0; i < len; i++) {\n            for (int j = i + 1; j < len; j++) {\n                if (s.charAt(i) == s.charAt(j)) {\n                    dp[i][j] = 1 + dp[i + 1][j - 1];\n                } else {\n                    dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n        int max = dp[0][len - 1];\n        int min = dp[0][0];\n        for (int i = 0; i < len; i++) {\n            for (int j = i + 1; j < len; j++) {\n                if (s.charAt(i) == s.charAt(j)) {\n                    max = Math.max(max, dp[i + 1][j]);\n                    min = Math.min(min, dp[i][j - 1]);\n                }\n            }\n        }\n        return s.substring(min, max + 1);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> ans = new ArrayList<>();\n        for(int i = lst.size()-1; i >= 0; i--){\n            Optional<Integer> oi = Optional.of(lst.get(i));\n            ans.add(oi);\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> res = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n        for(int i = 0; i < lst.size(); i++){\n            int num = lst.get(i);\n            if(map.containsKey(num)){\n                map.put(num, map.get(num) + 1);\n            }else{\n                map.put(num, 1);\n            }\n        }\n        for(int i = 0; i < lst.size(); i++){\n            int num = lst.get(i);\n            if(map.containsKey(num)){\n                if(map.get(num) == 1){\n                    res.add(Optional.of(num));\n                }else{\n                    map.put(num, map.get(num) - 1);\n                }\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> result = new ArrayList<>();\n        int max = Integer.MIN_VALUE;\n        int min = Integer.MAX_VALUE;\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) > max){\n                max = lst.get(i);\n            }\n            if(lst.get(i) < min){\n                min = lst.get(i);\n            }\n        }\n        result.add(Optional.of(max));\n        result.add(Optional.of(min));\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> result = new ArrayList<>();\n        int min = Integer.MAX_VALUE;\n        int max = Integer.MIN_VALUE;\n        for(int i: lst){\n            if(i<min){\n                min = i;\n            }\n            if(i>max){\n                max = i;\n            }\n        }\n        result.add(Optional.of(min));\n        result.add(Optional.of(max));\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> result = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++){\n            result.add(Optional.of(lst.get(i)));\n        }\n        Collections.sort(result);\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> res = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++){\n            Optional<Integer> o = Optional.empty();\n            for(int j = 0; j < lst.size(); j++){\n                if(i != j && lst.get(i) < lst.get(j)){\n                    o = Optional.of(lst.get(i));\n                    break;\n                }\n            }\n            res.add(o);\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> res = new ArrayList<>();\n        int n = lst.size();\n        int k = lst.get(n-1);\n        int[] arr = new int[n];\n        for(int i = 0; i < n; i++){\n            arr[i] = lst.get(i);\n        }\n        Arrays.sort(arr);\n        for(int i = 0; i < k; i++){\n            res.add(Optional.of(arr[i]));\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> res = new ArrayList<>();\n        int min = Integer.MAX_VALUE;\n        int max = Integer.MIN_VALUE;\n        for(int i: lst){\n            if(i < min){\n                min = i;\n            }\n            if(i > max){\n                max = i;\n            }\n        }\n        res.add(Optional.of(min));\n        res.add(Optional.of(max));\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        \n        \n            \n        \n            temp_a = (double) a;\n        \n            \n        }\n        if (b instanceof Integer) {\n            return Optional.of(1);\n        }\n        if (b instanceof Double) {\n            return Optional.of(1);\n        }\n        if (b instanceof String) {\n            return Optional.of(1);\n        }\n        return Optional.empty();\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        \n        \n            \n        \n            temp_a = (double) a;\n        \n            \n\n```\n"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        double temp_a = (double) a;\n        double temp_b = (double) b;\n        if (temp_a > temp_b) {\n            return Optional.of(1);\n        } else if (temp_a < temp_b) {\n            return Optional.of(-1);\n        } else {\n            return Optional.empty();\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        \n        \n            \n        \n            temp_a = (double) a;\n        \n            \n```\n"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(a);\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareTwo(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(b);\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareThree(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(a);\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareFour(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(b);\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareFive(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(a);\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareSix(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(b);\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareSeven(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(a);\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareEight(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(b);\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareNine(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(a);\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareTen(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(b);\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareEleven(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(a);\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareTwelve(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(b);\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareThirteen(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(a);\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareFourteen(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(b);\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareFifteen(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(a);\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareSixteen(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(b);\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareSeventeen(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(a);\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareEighteen(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(b);\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareNineteen(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(a);\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareTwenty(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(b);\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareTwentyOne(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(a);\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareTwentyTwo(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(b);\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareTwentyThree(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(a);\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareTwentyFour(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(b);\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareTwentyFive(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(a);\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareTwentySix(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(b);\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareTwentySeven(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(a);\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareTwentyEight(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(b);\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareTwentyNine(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(a);\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareThirty(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(b);\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareThirtyOne(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(a);\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareThirtyTwo(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(b);\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareThirtyThree(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(a);\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareThirtyFour(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(b);\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareThirtyFive(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(a);\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareThirtySix(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(b);\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareThirtySeven(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(a);\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        \n        \n            \n        \n            temp_a = (double) a;\n        \n            \n        }\n        if (b instanceof Integer) {\n            return Optional.of(a);\n        }\n        return Optional.empty();\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        \n        \n            \n        \n            temp_a = (double) a;\n        \n            \n```\n"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        \n        \n            \n        \n            temp_a = (double) a;\n        \n            \n\n```\n"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(a.equals(b));\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareTwo(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(a.equals(b));\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareThree(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(a.equals(b));\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareFour(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(a.equals(b));\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareFive(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(a.equals(b));\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareSix(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(a.equals(b));\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareSeven(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(a.equals(b));\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareEight(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(a.equals(b));\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareNine(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(a.equals(b));\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareTen(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(a.equals(b));\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareEleven(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(a.equals(b));\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareTwelve(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(a.equals(b));\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareThirteen(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(a.equals(b));\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareFourteen(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(a.equals(b));\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareFifteen(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(a.equals(b));\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareSixteen(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(a.equals(b));\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareSeventeen(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(a.equals(b));\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareEighteen(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(a.equals(b));\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareNineteen(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(a.equals(b));\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareTwenty(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(a.equals(b));\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareTwentyOne(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(a.equals(b));\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareTwentyTwo(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(a.equals(b));\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareTwentyThree(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(a.equals(b));\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareTwentyFour(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(a.equals(b));\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareTwentyFive(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(a.equals(b));\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareTwentySix(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(a.equals(b));\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareTwentySeven(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(a.equals(b));\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareTwentyEight(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(a.equals(b));\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareTwentyNine(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(a.equals(b));\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareThirty(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(a.equals(b));\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareThirtyOne(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(a.equals(b));\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareThirtyTwo(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(a.equals(b));\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareThirtyThree(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(a.equals(b));\n        }\n        return Optional.empty();\n    }\n\n    public Optional<Object> compareThirtyFour(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(a.equals(b));\n        }\n        return Optional.empty();\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        \n        double temp_a = (double) a;\n        double temp_b = (double) b;\n        \n        if (temp_a > temp_b) {\n            return Optional.of(a);\n        } else if (temp_a < temp_b) {\n            return Optional.of(b);\n        } else {\n            return Optional.empty();\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        \n        \n            \n        \n            temp_a = (double) a;\n        \n            \n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        \n        \n            \n        \n            temp_a = (double) a;\n        \n            \n\n```\n"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        \n        \n            \n        \n            temp_a = (double) a;\n        \n            \n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        \n        \n            \n        \n            temp_a = (double) a;\n        \n            \n        }\n        if (b instanceof Integer) {\n            return Optional.of(a);\n        }\n        return Optional.empty();\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        \n        \n            \n        \n            temp_a = (double) a;\n        \n            \n\n```\n"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        \n        \n            \n        \n            temp_a = (double) a;\n        \n            \n```\n"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        \n        \n            \n        \n            temp_a = (double) a;\n        \n            \n```\n"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        \n        \n            \n        \n            temp_a = (double) a;\n        \n            \n\n```\n"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        \n        \n            \n        \n            temp_a = (double) a;\n        \n            \n\n```\n"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        \n        double temp_a = (double) a;\n        double temp_b = (double) b;\n        \n        if (temp_a > temp_b) {\n            return Optional.of(a);\n        } else if (temp_a < temp_b) {\n            return Optional.of(b);\n        } else {\n            return Optional.empty();\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        while (n != 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n        return sum % 2 == 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum % 2 == 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        int count = 0;\n        while(n != 0) {\n            sum += n % 10;\n            n /= 10;\n            count++;\n        }\n        return sum == 0 && count % 2 == 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        while (n > 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n        return sum % 2 == 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += i;\n        }\n        return sum % 2 == 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        while (n > 0) {\n            sum += n % 2;\n            n /= 2;\n        }\n        return sum == 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        while (n > 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n        return sum % 2 == 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        if (n == 0) return true;\n        int sum = 0;\n        while (n != 0) {\n            sum += n % 2;\n            n /= 2;\n        }\n        return sum == 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        int even = 0;\n        for(int i = 1; i <= n; i++) {\n            sum += i;\n            if(sum % 2 == 0) {\n                even++;\n            }\n        }\n        return even == n;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        if (n % 2 == 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        Solution solution = new Solution();\n        System.out.println(solution.isEqualToSumEven(n));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        int count = 0;\n        while (n != 0) {\n            sum += n % 10;\n            n /= 10;\n            count++;\n        }\n        return sum == 0 && count % 2 == 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += i;\n            }\n        }\n        return sum == n;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(new Solution().isEqualToSumEven(10));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum % 2 == 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        int even = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n            if (sum % 2 == 0) {\n                even++;\n            }\n        }\n        return even == n;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += i;\n        }\n        return sum % 2 == 0;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 3, 4, 5};\n        System.out.println(new Solution().isEqualToSumEven(arr.length));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        for(int i = 1; i <= n; i++) {\n            if(i % 2 == 0) {\n                sum += i;\n            }\n        }\n        return sum % 2 == 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        while (n != 0) {\n            sum += n % 10;\n            n /= 10;\n        }\n        return sum % 2 == 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum % 2 == 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum % 2 == 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        if (n % 2 == 0) {\n            return true;\n        }\n        return false;\n    }\n\n    public boolean isEqualToSumOdd(int n) {\n        if (n % 2 != 0) {\n            return true;\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        Solution s = new Solution();\n        System.out.println(s.isEqualToSumEven(n));\n        System.out.println(s.isEqualToSumOdd(n));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long fact_i = 1;\n        for (int i = 1; i <= n; i++) {\n            fact_i *= i;\n        }\n        return fact_i;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for(int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 2; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n\n    public int lengthOfLongestSubstring(String s) {\n        int result = 0;\n        int[] count = new int[26];\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            count[c - 'a']++;\n            while (count[c - 'a'] > 0) {\n                count[c - 'a']--;\n                result++;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long fact = 1;\n        for (int i = 1; i <= n; i++) {\n            fact *= i;\n        }\n        return fact;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long[] fact = new long[n + 1];\n        fact[0] = 1;\n        for (int i = 1; i <= n; i++) {\n            fact[i] = fact[i - 1] * i;\n        }\n        return fact[n];\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        Solution s = new Solution();\n        System.out.println(s.specialFactorial(n));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long res = 1;\n        for (int i = 1; i <= n; i++) {\n            res *= i;\n        }\n        return res;\n    }\n\n    public int longestCommonSubsequence(String s1, String s2) {\n        int m = s1.length();\n        int n = s2.length();\n        int[][] dp = new int[m + 1][n + 1];\n        for (int i = 1; i <= m; i++) {\n            for (int j = 1; j <= n; j++) {\n                if (s1.charAt(i - 1) == s2.charAt(j - 1)) {\n                    dp[i][j] = dp[i - 1][j - 1] + 1;\n                } else {\n                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n        return dp[m][n];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        if(n == 0)\n            return 1;\n        else if(n == 1)\n            return 1;\n        else if(n == 2)\n            return 2;\n        else if(n == 3)\n            return 6;\n        else if(n == 4)\n            return 24;\n        else if(n == 5)\n            return 120;\n        else if(n == 6)\n            return 720;\n        else if(n == 7)\n            return 5040;\n        else if(n == 8)\n            return 40320;\n        else if(n == 9)\n            return 362880;\n        else if(n == 10)\n            return 3628800;\n        else if(n == 11)\n            return 39916800;\n        else if(n == 12)\n            return 479001600;\n        else if(n == 13)\n            return 6227020800;\n        else if(n == 14)\n            return 87178291200;\n        else if(n == 15)\n            return 1307674368000;\n        else if(n == 16)\n            return 20922789888000;\n        else if(n == 17)\n            return 355687428096000;\n        else if(n == 18)\n            return 6402373705728000;\n        else if(n == 19)\n            return 121645100408832000;\n        else if(n == 20)\n            return 2432902008176640000;\n        else if(n == 21)\n            return 510909421717094400000;\n        else if(n == 22)\n            return 112400072777760768000000;\n        else if(n == 23)\n            return 25852016738886977600000000;\n        else if(n == 24)\n            return 6204484017331711680000000000;\n        else if(n == 25)\n            return 155112100433791680000000000000;\n        else if(n == 26)\n            return 42140900852363462400000000000000;\n        else if(n == 27)\n            return 1024790377777607680000000000000000;\n        else if(n == 28)\n            return 25020009727777607680000000000000000;\n        else if(n == 29)\n            returnimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long res = 1;\n        for (int i = 1; i <= n; i++) {\n            res *= i;\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long fact_i = 1;\n        for (int i = 1; i <= n; i++) {\n            fact_i *= i;\n        }\n        return fact_i;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long res = 1;\n        for (int i = 1; i <= n; i++) {\n            res *= i;\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        if (n == 0) {\n            return 1;\n        }\n        long res = 1;\n        for (int i = 1; i <= n; i++) {\n            res *= i;\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long fact_i = 1;\n        for (int i = 1; i <= n; i++) {\n            fact_i *= i;\n        }\n        return fact_i;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        int star = 0;\n        int end = 0;\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n                star = i;\n            } else if (text.charAt(i) == '\\n') {\n                end = i;\n            }\n        }\n        return text.substring(star, end + 1);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        int end = 0;\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n                end += 1;\n            }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String[] words = text.split(\" \");\n        StringBuilder sb = new StringBuilder();\n        for (String word : words) {\n            if (word.length() > 0) {\n                sb.append(word);\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c == ' ') {\n                result += \" \";\n            } else {\n                result += c;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String result = \"\";\n        int end = 0;\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n                result += \" \";\n                end += 1;\n            } else {\n                result += text.charAt(i);\n                end += 1;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String result = \"\";\n        int start = 0;\n        int end = 0;\n        int count = 0;\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n                count++;\n            } else {\n                if (count == 1) {\n                    result += text.charAt(i);\n                } else {\n                    result += \" \";\n                }\n                count = 0;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        int end = 0;\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n                end += 1;\n            }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        int star = 0;\n        int end = 0;\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n                star = i;\n            } else {\n                end = i;\n            }\n        }\n        return text.substring(star, end);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c == ' ') {\n                result += \" \";\n            } else {\n                result += c;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String[] words = text.split(\" \");\n        StringBuilder sb = new StringBuilder();\n        for (String word : words) {\n            sb.append(word).append(\" \");\n        }\n        return sb.toString().trim();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String result = \"\";\n        String[] words = text.split(\" \");\n        for (String word : words) {\n            result += word + \" \";\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        int end = 0;\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n                end += 1;\n            }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c == ' ') {\n                result += \" \";\n            } else {\n                result += c;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        int star = 0;\n        int end = 0;\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n                star = i;\n            } else if (text.charAt(i) == '\\n') {\n                end = i;\n            }\n        }\n        return text.substring(star, end);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        int star = 0;\n        int end = 0;\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n                star = i;\n            } else {\n                end = i;\n            }\n        }\n        return text.substring(star, end + 1);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String result = \"\";\n        int star = 0;\n        int end = 0;\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n                star = i;\n            }\n            if (text.charAt(i) == '\\n') {\n                end = i;\n            }\n        }\n        for (int i = star; i < end; i++) {\n            if (text.charAt(i) == ' ') {\n                result += \" \";\n            } else {\n                result += text.charAt(i);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        int star = 0;\n        int end = 0;\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n                star = i;\n            }\n            if (text.charAt(i) == '\\n') {\n                end = i;\n            }\n        }\n        return text.substring(star, end + 1);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String result = \"\";\n        int end = 0;\n        int start = 0;\n        while (end < text.length()) {\n            if (text.charAt(end) == ' ') {\n                result += text.substring(start, end);\n                result += \" \";\n                start = end + 1;\n            }\n            end += 1;\n        }\n        result += text.substring(start, end);\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String result = \"\";\n        int i = 0;\n        while (i < text.length()) {\n            if (text.charAt(i) == ' ') {\n                result += \" \";\n            } else {\n                result += text.charAt(i);\n            }\n            i++;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String[] words = text.split(\" \");\n        StringBuilder sb = new StringBuilder();\n        for (String word : words) {\n            sb.append(word).append(\" \");\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String filename = file_name.substring(file_name.lastIndexOf(\"/\") + 1);\n        return filename;\n    }\n\n    public int maxProfit(int[] prices) {\n        int max = 0;\n        int min = prices[0];\n        for (int i = 1; i < prices.length; i++) {\n            if (prices[i] > max) {\n                max = prices[i];\n            }\n            if (prices[i] < min) {\n                min = prices[i];\n            }\n        }\n        return max - min;\n    }\n\n    public static void main(String[] args) {\n        int[] prices = {7,1,5,3,6,4};\n        Solution solution = new Solution();\n        System.out.println(solution.maxProfit(prices));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] arr = file_name.split(\"\\\\.\");\n        String name = arr[0];\n        String ext = arr[1];\n        if (ext.equals(\"java\")) {\n            return name;\n        }\n        return \"\";\n    }\n\n    public String removeDuplicate(String s) {\n        char[] arr = s.toCharArray();\n        Arrays.sort(arr);\n        StringBuilder sb = new StringBuilder();\n        for (char c : arr) {\n            if (sb.length() == 0 || sb.charAt(sb.length() - 1) != c) {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] file_name_split = file_name.split(\"\\\\.\");\n        String file_ext = file_name_split[file_name_split.length - 1];\n        String file_ext_lower = file_ext.toLowerCase();\n        if (file_ext_lower.equals(\"java\")) {\n            return file_name;\n        }\n        return file_name + \".java\";\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String file_name = sc.nextLine();\n        String file_name_lower = file_name.toLowerCase();\n        if (file_name_lower.equals(\"java\")) {\n            System.out.println(file_name);\n        } else {\n            System.out.println(filenameCheck(file_name));\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] file_name_split = file_name.split(\"\\\\.\");\n        String file_extension = file_name_split[file_name_split.length-1];\n        return file_extension;\n    }\n\n    public List<List<Integer>> levelOrder(TreeNode root) {\n        List<List<Integer>> result = new ArrayList<>();\n        if (root == null) {\n            return result;\n        }\n        Queue<TreeNode> queue = new LinkedList<>();\n        queue.add(root);\n        while (!queue.isEmpty()) {\n            int size = queue.size();\n            List<Integer> level = new ArrayList<>();\n            for (int i = 0; i < size; i++) {\n                TreeNode node = queue.poll();\n                level.add(node.val);\n                if (node.left != null) {\n                    queue.add(node.left);\n                }\n                if (node.right != null) {\n                    queue.add(node.right);\n                }\n            }\n            result.add(level);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] file_name_array = file_name.split(\"\\\\.\");\n        String file_ext = file_name_array[file_name_array.length - 1];\n        String file_name_without_ext = file_name_array[0];\n        return file_name_without_ext + \".\" + file_ext;\n    }\n\n    public int maxProduct(int[] nums) {\n        int max = nums[0];\n        int min = nums[0];\n        int max_product = nums[0];\n        for (int i = 1; i < nums.length; i++) {\n            if (nums[i] > max) {\n                max = nums[i];\n            }\n            if (nums[i] < min) {\n                min = nums[i];\n            }\n            if (nums[i] * nums[i] > max_product) {\n                max_product = nums[i] * nums[i];\n            }\n        }\n        return max_product;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] arr = file_name.split(\"\\\\.\");\n        if (arr.length == 2) {\n            if (arr[0].matches(\"[a-zA-Z0-9]+\")) {\n                return \"Yes\";\n            } else {\n                return \"No\";\n            }\n        } else {\n            return \"No\";\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        if (file_name.length() > 20 || file_name.length() < 1 || file_name.charAt(0) < 65 || file_name.charAt(0) > 90) {\n            return \"No\";\n        }\n        if (file_name.charAt(file_name.length() - 1) < 48 || file_name.charAt(file_name.length() - 1) > 57) {\n            return \"No\";\n        }\n        if (file_name.charAt(file_name.length() - 2) < 48 || file_name.charAt(file_name.length() - 2) > 57) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String filename = file_name;\n        String[] split = filename.split(\"\\\\.\");\n        String extension = split[split.length - 1];\n        if (extension.equals(\"java\")) {\n            filename = filename.substring(0, filename.length() - 5);\n        }\n        return filename;\n    }\n\n    public List<List<Integer>> levelOrder(TreeNode root) {\n        List<List<Integer>> result = new ArrayList<>();\n        if (root == null) {\n            return result;\n        }\n        Queue<TreeNode> queue = new LinkedList<>();\n        queue.add(root);\n        while (!queue.isEmpty()) {\n            int size = queue.size();\n            List<Integer> level = new ArrayList<>();\n            for (int i = 0; i < size; i++) {\n                TreeNode node = queue.poll();\n                level.add(node.val);\n                if (node.left != null) {\n                    queue.add(node.left);\n                }\n                if (node.right != null) {\n                    queue.add(node.right);\n                }\n            }\n            result.add(level);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] file_name_split = file_name.split(\"\\\\.\");\n        String file_extension = file_name_split[file_name_split.length-1];\n        String file_extension_lower = file_extension.toLowerCase();\n        if (file_extension_lower.equals(\"java\")) {\n            return file_name;\n        }\n        else {\n            return filenameCheck(file_name.substring(0, file_name.length()-file_extension.length()));\n        }\n    }\n\n    public String longestSubstringWithoutRepeatingCharacters(String s) {\n        String longest_substring = \"\";\n        int longest_substring_length = 0;\n        int index = 0;\n        int count = 0;\n        while (index < s.length()) {\n            if (s.charAt(index) == s.charAt(index+1)) {\n                count++;\n            }\n            else {\n                count = 1;\n            }\n            if (count > 1) {\n                count = 0;\n            }\n            if (count == 0) {\n                if (index - longest_substring_length + 1 > 0 && s.charAt(index-longest_substring_length+1) == s.charAt(index)) {\n                    count = 1;\n                }\n                else {\n                    count = 0;\n                }\n            }\n            if (count == 0) {\n                count = 1;\n            }\n            if (count > 1) {\n                count = 0;\n            }\n            if (count == 0) {\n                if (index - longest_substring_length + 1 > 0 && s.charAt(index-longest_substring_length+1) == s.charAt(index)) {\n                    count = 1;\n                }\n                else {\n                    count = 0;\n                }\n            }\n            if (count == 0) {\n                count = 1;\n            }\n            if (count > 1) {\n                count = 0;\n            }\n            if (count == 0) {\n                if (index - longest_substring_length + 1 > 0 && s.charAt(index-longest_substring_length+1) == s.charAt(index)) {\n                    count = 1;\n                }\n                else {\n                    count = 0;\n                }\n            }\n            if (count == 0) {\n                count = 1;\n            }\n            if (count > 1) {\n                count = 0;\n            }\n            if (count == 0) {\n                if (index - longest_substring_length + 1 > 0 && s.charAt(index-longest_substring_length+1) == s.charAt(index)) {\n                    count = 1;\n                }\n                else {\n                    count = 0;\n                }\n            }\n            if (count == 0) {\n                count = 1;\n            }\n            if (count > 1) {\n                count = 0;\n            }\n            if (count == 0) {\n                if (index - longest_substring_length + 1 > 0 && s.charAt(index-longest_substring_length+1) == s.charAt(index)) {\n                    count = 1;\n                }\n                else {\n                    count = 0;\n                }\n            }\n            if (count == 0) {\n                count = 1;\n            }\n            if (count > 1) {\n                count = 0;\n            }\n            if (count == 0) {\n                if (index - longest_substring_length + 1 > 0 && s.charAt(index-longest_substring_length+1) == s.charAt(index)) {\n                    count = 1;\n                }\n                else {\n                    count = 0;\n                }\n            }\n            if (count == 0) {\n                count = 1;\n            }\n            if (count > 1) {\n                count = 0;\n            }\n            if (count == 0) {\n                if (index - longest_substring_length + 1 > 0 && s.charAt(index-longest_substring_length+1) == s.charAt(index)) {\n                    count = 1;\n                }\n                else {\n                    count = 0;\n                }\n            }\n            if (count == 0) {\n                count = 1;\n            }\n            if (count > 1) {\n                count = 0;\n            }\n            if (count == 0) {\n                if (index - longest_substring_length + 1 > 0 && s.charAt(index-longest_substring_length+1) == s.charAt(index)) {\n                    count = 1;\n                }\n                else {\n                    count = 0;\n                }\n            }\n            if (count == 0) {\n                count = 1;\n            }\n            if (count > 1) {\n                count = 0;\n            }\n            if (count == 0) {\n                if (index - longest_substring_length + 1 > 0 && s.charAt(index-longest_substring_length+1) == s.charAt(index)) {\n                    count = 1;\n                }\n                else {\n                    count = 0;\n                }\n            }\n            if (count == 0) {\n                count = 1;\n            }\n            if (count > 1) {\n                count = 0;\n            }\n            if (count == 0) {\n                if (index - longest_substring_length + 1 > 0 && s.charAt(index-longest_substring_length+1) == s.charAt(index)) {\n                    count = 1;\n                }\n                else {\n                    count = 0;\n                }\n            }\n            if (count == 0) {\n                count = 1;\n            }\n            if (count > 1) {\n                count = 0;\n            }\n            if (count == 0) {\n                if (index - longest_substring_length + 1 > 0 && s.charAt(index-longest_substring_length+1) == s.charAt(index)) {\n                    count = 1;\n                }\n                else {\n                    count = 0;\n                }\n            }\n            if (count == 0) {\n                count = 1;\n            }\n            if (count > 1) {\n                count = 0;\n            }\n            if (count == 0) {\n                if (index - longest_substring_length + 1 > 0 && s.charAt(index-longest_substring_length+1) == s.charAt(index)) {\n                    count = 1;\n                }\n                else {\n                    count = 0;\n                }\n            }\n            if (count == 0) {\n                count = 1;\n            }\n            if (count > 1) {\n                count = 0;\n            }\n            if (count == 0) {\n                if (index - longest_substring_length + 1 > 0 && s.charAt(index-longest_substring_length+1) == s.charAt(index)) {\n                    count = 1;\n                }\n                else {\n                    count = 0;\n                }\n            }\n            if (count == 0) {\n                count = 1;\n            }\n            if (count > 1) {\n                count = 0;\n            }\n            if (count == 0) {\n                if (index - longest_substring_length + 1 > 0 && s.charAt(index-longest_substring_length+1) == s.charAt(index)) {\n                    count = 1;\n                }\n                else {\n                    count = 0;\n                }\n            }\n            if (count == 0) {\n                count = 1;\n            }\n            if (count > 1) {\n                count = 0;\n            }\n            if (count == 0) {\n                if (index - longest_substring_length + 1 > 0 && s.charAt(index-longest_substring_length+1) == s.charAt(index)) {\n                    count = 1;\n                }\n                else {\n                    count = 0;\n                }\n            }\n            if (count == 0) {\n                count = 1;\n            }\n            if (count > 1) {\n                count = 0;\n            }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        if (file_name.length() == 0) {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '_') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '.') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '/') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\\\') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == ':') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '?') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '*') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '<') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '>') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '|') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\"') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\'') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '`') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '{') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '}') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '[') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == ']') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == ' ') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\t') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\n') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\r') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\f') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\b') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\v') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\e') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\a') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\x00') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\x01') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\x02') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\x03') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\x04') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\x05') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\x06') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\x07') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\x08') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\t') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\n') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\r') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\f') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\b') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\v') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\e') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\a') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\x00') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\x01') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\x02') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\x03') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\x04') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\x05') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\x06') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\x07') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\x08') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\t') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\n') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\r') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\f') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\b') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\v') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\e') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\a') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\x00') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\x01') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\x02') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\x03') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\x04') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\x05') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\x06') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\x07') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\x08') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\t') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\n') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\r') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\f') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\b') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\v') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\e') {\n            return \"Invalid\";\n        }\n        if (file_name.charAt(0) == '\\a') {\n            return \"Invalid\";\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] split = file_name.split(\"\\\\.\");\n        String ext = split[split.length - 1];\n        if (ext.equals(\"java\")) {\n            return file_name.substring(0, file_name.length() - ext.length());\n        }\n        return file_name;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] file_name_split = file_name.split(\"\\\\.\");\n        String extension = file_name_split[file_name_split.length - 1];\n        if (extension.equals(\"java\")) {\n            return file_name;\n        }\n        else {\n            return file_name + \".java\";\n        }\n    }\n\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String filename = file_name;\n        String[] split = filename.split(\"\\\\.\");\n        String extension = split[split.length-1];\n        if (extension.equals(\"java\")) {\n            return filename.substring(0, filename.length()-5);\n        } else {\n            return filename;\n        }\n    }\n    public TreeNode buildTree(int[] preorder, int[] inorder) {\n        return buildTree(preorder, 0, preorder.length-1, inorder, 0, inorder.length-1);\n    }\n    public TreeNode buildTree(int[] preorder, int preorder_start, int preorder_end, int[] inorder, int inorder_start, int inorder_end) {\n        if (preorder_start > preorder_end || inorder_start > inorder_end) {\n            return null;\n        }\n        TreeNode root = new TreeNode(preorder[preorder_start]);\n        int index = inorder_start;\n        while (index <= inorder_end && preorder[preorder_start] == inorder[index]) {\n            index++;\n        }\n        root.left = buildTree(preorder, preorder_start+1, preorder_start+index-inorder_start, inorder, inorder_start, index-1);\n        root.right = buildTree(preorder, preorder_start+index-inorder_start+1, preorder_end, inorder, index+1, inorder_end);\n        return root;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] split_name = file_name.split(\"\\\\.\");\n        String ext = split_name[split_name.length - 1];\n        if (ext.equals(\"java\")) {\n            return file_name;\n        }\n        return file_name + \".java\";\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] file_name_split = file_name.split(\"\\\\.\");\n        String file_extension = file_name_split[file_name_split.length - 1];\n        if (file_extension.equals(\"java\")) {\n            return file_name;\n        } else {\n            return file_name + \".java\";\n        }\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String file_name = sc.nextLine();\n        System.out.println(filenameCheck(file_name));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] arr = file_name.split(\"\\\\.\");\n        String ext = arr[arr.length - 1];\n        if (ext.equals(\"java\")) {\n            return file_name;\n        } else {\n            return file_name + \".java\";\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] file_name_array = file_name.split(\"\\\\.\");\n        String extension = file_name_array[file_name_array.length-1];\n        if (extension.equals(\"java\")) {\n            return file_name;\n        }\n        else {\n            return file_name + \".java\";\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] split = file_name.split(\"\\\\.\");\n        String ext = split[split.length - 1];\n        if (ext.equals(\"java\")) {\n            return file_name;\n        }\n        return file_name + \".java\";\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] split = file_name.split(\"\\\\.\");\n        String extension = split[split.length - 1];\n        if (extension.equals(\"java\")) {\n            return file_name;\n        } else {\n            return file_name + \".java\";\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] split = file_name.split(\"\\\\.\");\n        String extension = split[split.length - 1];\n        if (extension.equals(\"java\")) {\n            return file_name;\n        } else {\n            return file_name + \".java\";\n        }\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        String file_name = in.nextLine();\n        String filename = filenameCheck(file_name);\n        System.out.println(filename);\n        in.close();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int result = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                result += lst.get(i);\n            } else {\n                result += lst.get(i) * lst.get(i);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            sum += lst.get(i) * lst.get(i);\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            sum += lst.get(i) * lst.get(i);\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n                sum += (int) Math.pow(lst.get(i), 3);\n            } else {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            sum += lst.get(i) * lst.get(i);\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            sum += lst.get(i) * lst.get(i);\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            sum += lst.get(i) * lst.get(i);\n        }\n        return sum;\n    }\n\n    public boolean isMatch(String s, String p) {\n        if (p.length() == 0) {\n            return s.length() == 0;\n        }\n        if (p.charAt(0) == '.') {\n            return isMatch(s, p.substring(1));\n        }\n        if (p.charAt(p.length() - 1) == '*') {\n            return isMatch(s, p.substring(0, p.length() - 2)) || isMatch(s, p.substring(1, p.length() - 1));\n        }\n        if (p.charAt(0) == '?' && p.charAt(p.length() - 1) == '?') {\n            return isMatch(s, p.substring(1, p.length() - 1));\n        }\n        if (p.charAt(0) == '?' && p.charAt(p.length() - 1) != '?') {\n            return isMatch(s, p.substring(1, p.length() - 1)) || isMatch(s, p.substring(1, p.length() - 1));\n        }\n        if (p.charAt(0) != '?' && p.charAt(p.length() - 1) == '?') {\n            return isMatch(s, p.substring(0, p.length() - 1)) || isMatch(s, p.substring(0, p.length() - 1));\n        }\n        if (p.charAt(0) == '*' && p.charAt(p.length() - 1) == '*') {\n            return isMatch(s, p.substring(1, p.length() - 2)) || isMatch(s, p.substring(1, p.length() - 2));\n        }\n        if (p.charAt(0) == '*' && p.charAt(p.length() - 1) != '*') {\n            return isMatch(s, p.substring(1, p.length() - 2)) || isMatch(s, p.substring(1, p.length() - 2));\n        }\n        if (p.charAt(0) != '*' && p.charAt(p.length() - 1) == '*') {\n            return isMatch(s, p.substring(0, p.length() - 1)) || isMatch(s, p.substring(0, p.length() - 1));\n        }\n        if (p.charAt(0) == '?' && p.charAt(p.length() - 1) == '?' && p.charAt(p.length() - 2) == '*') {\n            return isMatch(s, p.substring(1, p.length() - 3)) || isMatch(s, p.substring(1, p.length() - 3));\n        }\n        if (p.charAt(0) == '?' && p.charAt(p.length() - 1) == '?' && p.charAt(p.length() - 2) != '*') {\n            return isMatch(s, p.substring(1, p.length() - 3)) || isMatch(s, p.substring(1, p.length() - 3));\n        }\n        if (p.charAt(0) != '?' && p.charAt(p.length() - 1) == '?' && p.charAt(p.length() - 2) == '*') {\n            return isMatch(s, p.substring(0, p.length() - 2)) || isMatch(s, p.substring(0, p.length() - 2));\n        }\n        if (p.charAt(0) == '?' && p.charAt(p.length() - 1) != '?' && p.charAt(p.length() - 2) == '*') {\n            return isMatch(s, p.substring(1, p.length() - 3)) || isMatch(s, p.substring(1, p.length() - 3));\n        }\n        if (p.charAt(0) != '?' && p.charAt(p.length() - 1) != '?' && p.charAt(p.length() - 2) == '*') {\n            return isMatch(s, p.substring(0, p.length() - 1)) || isMatch(s, p.substring(0, p.length() - 1));\n        }\n        if (p.charAt(0) == '*' && p.charAt(p.length() - 1) == '?' && p.charAt(p.length() - 2) == '?') {\n            return isMatch(s, p.substring(1, p.length() - 3)) || isMatch(s, p.substring(1, p.length() - 3));\n        }\n        if (p.charAt(0) == '*' && p.charAt(p.length() - 1) == '?' && p.charAt(p.length() - 2) != '?') {\n            return isMatch(s, p.substring(1, p.length() - 3)) || isMatch(s, p.substring(1, p.length() - 3));\n        }\n        if (p.charAt(0) == '*' && p.charAt(p.length() - 1) != '?' && p.charAt(p.length() - 2) == '?') {\n            return isMatch(s, p.substring(1, p.length() - 3)) || isMatch(s, p.substring(1, p.length() - 3));\n        }\n        if (p.charAt(0) == '*' && p.charAt(p.length() - 1) != '?' && p.charAt(p.length() - 2) != '?') {\n            return isMatch(s, p.substring(1, p.length() - 3)) || isMatch(s, p.substring(1, p.length() - 3));\n        }\n        if (p.charAt(0) != '*' && p.charAt(p.length() - 1) == '?' && p.charAt(p.length() - 2) == '?') {\n            return isMatch(s, p.substring(0, p.length() - 2)) || isMatch(s, p.substring(0, p.length() - 2));\n        }\n        if (p.charAt(0) != '*' && p.charAt(p.length() - 1) == '?' && p.charAt(p.length() - 2) != '?') {\n            return isMatch(s, p.substring(0, p.length() - 2)) || isMatch(s, p.substring(0, p.length() - 2));\n        }\n        if (p.charAt(0) != '*' && p.charAt(p.length() - 1) != '?' && p.charAt(p.length() - 2) == '?') {\n            return isMatch(s, p.substring(0, p.length() - 1)) || isMatch(s, p.substring(0, p.length() - 1));\n        }\n        if (p.charAt(0) != '*' && p.charAt(p.length() - 1) != '?' && p.charAt(p.length() - 2) != '?') {\n            return isMatch(s, p.substring(0, p.length() - 1)) || isMatch(s, p.substring(0, p.length() - 1));\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            sum += lst.get(i) * lst.get(i);\n        }\n        return sum;\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        List<Integer> lst = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            lst.add(scanner.nextInt());\n        }\n        Solution solution = new Solution();\n        System.out.println(solution.sumSquares(lst));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            sum += lst.get(i) * lst.get(i);\n        }\n        return sum;\n    }\n\n    public boolean isMatch(String s, String p) {\n        if (p.isEmpty()) {\n            return s.isEmpty();\n        }\n        if (p.charAt(0) == '*') {\n            return isMatch(s, p.substring(1)) || isMatch(s, p);\n        }\n        if (p.charAt(0) == '.') {\n            return s.charAt(0) == p.charAt(0);\n        }\n        return s.charAt(0) == p.charAt(0) && isMatch(s.substring(1), p.substring(1));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            sum += lst.get(i) * lst.get(i);\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if (num > 0) {\n                sum += num * num;\n            }\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            sum += lst.get(i) * lst.get(i);\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int result = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                result += lst.get(i) * lst.get(i);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            sum += lst.get(i) * lst.get(i);\n        }\n        return sum;\n    }\n\n    public int maxSquares(List<Integer> lst) {\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < lst.size(); i++) {\n            int temp = lst.get(i);\n            int temp2 = temp * temp;\n            if (temp2 > max) {\n                max = temp2;\n            }\n        }\n        return max;\n    }\n\n    public int minSquares(List<Integer> lst) {\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < lst.size(); i++) {\n            int temp = lst.get(i);\n            int temp2 = temp * temp;\n            if (temp2 < min) {\n                min = temp2;\n            }\n        }\n        return min;\n    }\n\n    public static void main(String[] args) {\n        List<Integer> lst = new ArrayList<>();\n        lst.add(1);\n        lst.add(2);\n        lst.add(3);\n        lst.add(4);\n        lst.add(5);\n        lst.add(6);\n        lst.add(7);\n        lst.add(8);\n        lst.add(9);\n        lst.add(10);\n        Solution solution = new Solution();\n        System.out.println(solution.sumSquares(lst));\n        System.out.println(solution.maxSquares(lst));\n        System.out.println(solution.minSquares(lst));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            sum += lst.get(i) * lst.get(i);\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            sum += lst.get(i) * lst.get(i);\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = i + 1; j < lst.size(); j++) {\n                for (int k = j + 1; k < lst.size(); k++) {\n                    for (int l = k + 1; l < lst.size(); l++) {\n                        int temp = lst.get(i) + lst.get(j) + lst.get(k) + lst.get(l);\n                        if (temp * temp == lst.get(i) + lst.get(j) + lst.get(k) + lst.get(l)) {\n                            sum += temp * temp;\n                        }\n                    }\n                }\n            }\n        }\n        return sum;\n    }\n\n    public List<List<Integer>> fourSum(int[] nums) {\n        List<List<Integer>> res = new ArrayList<>();\n        if (nums == null || nums.length < 4) {\n            return res;\n        }\n        Arrays.sort(nums);\n        for (int i = 0; i < nums.length - 3; i++) {\n            if (i > 0 && nums[i] == nums[i - 1]) {\n                continue;\n            }\n            int left = i + 1;\n            int right = nums.length - 1;\n            while (left < right) {\n                int sum = nums[i] + nums[left] + nums[right];\n                if (sum == 0) {\n                    List<Integer> temp = new ArrayList<>();\n                    temp.add(nums[i]);\n                    temp.add(nums[left]);\n                    temp.add(nums[right]);\n                    res.add(temp);\n                    while (left < right && nums[left] == nums[left + 1]) {\n                        left++;\n                    }\n                    while (left < right && nums[right] == nums[right - 1]) {\n                        right--;\n                    }\n                } else if (sum < 0) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            sum += lst.get(i) * lst.get(i);\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            sum += lst.get(i) * lst.get(i);\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            sum += lst.get(i) * lst.get(i);\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        String[] new_words = new String[words.length];\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() == 1) {\n                new_words[i] = words[i];\n            } else {\n                for (int j = 2; j < words[i].length(); j++) {\n                    if (words[i].length() % j == 0) {\n                        new_words[i] = words[i];\n                        break;\n                    }\n                }\n            }\n        }\n        return String.join(\" \", new_words);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        String[] dictionary = {\"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"in\", \"of\", \"to\", \"for\", \"with\", \"of\", \"the\", \"and\", \"a\", \"\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        String[] result = new String[words.length];\n        for (int i = 0; i < words.length; i++) {\n            result[i] = words[i].substring(0, 1).toUpperCase() + words[i].substring(1);\n        }\n        return String.join(\" \", result);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        String result = \"\";\n        for (int i = 0; i < words.length; i++) {\n            result += words[i] + \" \";\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        String result = \"\";\n        for (int i = 0; i < words.length; i++) {\n            result += words[i] + \" \";\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        if (sentence == null || sentence.length() == 0) {\n            return \"\";\n        }\n        Map<Character, Integer> map = new HashMap<>();\n        for (int i = 0; i < sentence.length(); i++) {\n            char c = sentence.charAt(i);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n            } else {\n                map.put(c, 1);\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < sentence.length(); i++) {\n            char c = sentence.charAt(i);\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c) - 1);\n            }\n            if (map.get(c) == 0) {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        List<String> list = new ArrayList<>();\n        for (String word : words) {\n            if (Character.isLetter(word.charAt(0))) {\n                list.add(word);\n            }\n        }\n        if (list.size() % 2 != 0) {\n            list.add(0, list.get(list.size() - 1));\n        }\n        return String.join(\" \", list);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        String result = \"\";\n        for (int i = 0; i < words.length; i++) {\n            if (i == 0) {\n                result += words[i];\n            } else {\n                result += \" \" + words[i];\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        String result = \"\";\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].equals(\"in\")) {\n                result += \" \";\n            } else {\n                result += words[i] + \" \";\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        String[] new_words = new String[words.length];\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() == 1) {\n                new_words[i] = words[i];\n            }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        String result = \"\";\n        for (String word : words) {\n            if (word.length() > 1) {\n                result += word + \" \";\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        String result = \"\";\n        for (int i = 0; i < words.length; i++) {\n            if (i == 0) {\n                result += words[i];\n            } else {\n                result += \" \" + words[i];\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        boolean flg = true;\n        for (String word : words) {\n            if (word.length() > 1) {\n                flg = false;\n                break;\n            }\n        }\n        if (flg) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        String result = \"\";\n        for (int i = 0; i < words.length; i++) {\n            if (i == 0) {\n                result += words[i];\n            } else {\n                result += \" \" + words[i];\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        StringBuilder sb = new StringBuilder();\n        for (String word : words) {\n            sb.append(word).append(\" \");\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        for (String word : words) {\n            boolean flg = true;\n            continue;\n        }\n        if (flg) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < words.length; i++) {\n            if (i == 0) {\n                sb.append(words[i]);\n            } else {\n                sb.append(\" \");\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < words.length; i++) {\n            if (i == 0) {\n                sb.append(words[i]);\n            } else {\n                sb.append(\" \");\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        String result = \"\";\n        for (String word : words) {\n            if (word.length() > 1) {\n                result += word + \" \";\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        String result = \"\";\n        for (int i = 0; i < words.length; i++) {\n            result += words[i] + \" \";\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        String[] xArr = x.split(\"\");\n        String[] nArr = n.split(\"\");\n        int len = xArr.length;\n        int[] dp = new int[len];\n        dp[0] = 1;\n        for(int i = 1; i < len; i++) {\n            if(xArr[i] == nArr[i]) {\n                dp[i] = dp[i-1];\n            } else {\n                dp[i] = dp[i-1] + 1;\n            }\n        }\n        return dp[len-1] == 1;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        int len = x.length();\n        int nlen = n.length();\n        if(len != nlen) return false;\n        int[] xarr = new int[len];\n        int[] narr = new int[nlen];\n        for(int i = 0; i < len; i++) {\n            xarr[i] = x.charAt(i) - '0';\n            narr[i] = n.charAt(i) - '0';\n        }\n        int[] xsum = new int[len];\n        int[] nsum = new int[nlen];\n        for(int i = 0; i < len; i++) {\n            xsum[i] = xarr[i] + xsum[i-1];\n            nsum[i] = narr[i] + nsum[i-1];\n        }\n        int[] xdiff = new int[len];\n        int[] ndiff = new int[nlen];\n        for(int i = 0; i < len; i++) {\n            xdiff[i] = xarr[i] - xsum[i];\n            ndiff[i] = narr[i] - nsum[i];\n        }\n        int[] xdiff2 = new int[len];\n        int[] ndiff2 = new int[nlen];\n        for(int i = 0; i < len; i++) {\n            xdiff2[i] = xarr[i] - xsum[i] + xdiff[i];\n            ndiff2[i] = narr[i] - nsum[i] + ndiff[i];\n        }\n        int[] xdiff3 = new int[len];\n        int[] ndiff3 = new int[nlen];\n        for(int i = 0; i < len; i++) {\n            xdiff3[i] = xarr[i] - xsum[i] + xdiff2[i];\n            ndiff3[i] = narr[i] - nsum[i] + ndiff2[i];\n        }\n        int[] xdiff4 = new int[len];\n        int[] ndiff4 = new int[nlen];\n        for(int i = 0; i < len; i++) {\n            xdiff4[i] = xarr[i] - xsum[i] + xdiff3[i];\n            ndiff4[i] = narr[i] - nsum[i] + ndiff3[i];\n        }\n        int[] xdiff5 = new int[len];\n        int[] ndiff5 = new int[nlen];\n        for(int i = 0; i < len; i++) {\n            xdiff5[i] = xarr[i] - xsum[i] + xdiff4[i];\n            ndiff5[i] = narr[i] - nsum[i] + ndiff4[i];\n        }\n        int[] xdiff6 = new int[len];\n        int[] ndiff6 = new int[nlen];\n        for(int i = 0; i < len; i++) {\n            xdiff6[i] = xarr[i] - xsum[i] + xdiff5[i];\n            ndiff6[i] = narr[i] - nsum[i] + ndiff5[i];\n        }\n        int[] xdiff7 = new int[len];\n        int[] ndiff7 = new int[nlen];\n        for(int i = 0; i < len; i++) {\n            xdiff7[i] = xarr[i] - xsum[i] + xdiff6[i];\n            ndiff7[i] = narr[i] - nsum[i] + ndiff6[i];\n        }\n        int[] xdiff8 = new int[len];\n        int[] ndiff8 = new int[nlen];\n        for(int i = 0; i < len; i++) {\n            xdiff8[i] = xarr[i] - xsum[i] + xdiff7[i];\n            ndiff8[i] = narr[i] - nsum[i] + ndiff7[i];\n        }\n        int[] xdiff9 = new int[len];\n        int[] ndiff9 = new int[nlen];\n        for(int i = 0; i < len; i++) {\n            xdiff9[i] = xarr[i] - xsum[i] + xdiff8[i];\n            ndiff9[i] = narr[i] - nsum[i] + ndiff8[i];\n        }\n        int[] xdiff10 = new int[len];\n        int[] ndiff10 = new int[nlen];\n        for(int i = 0; i < len; i++) {\n            xdiff10[i] = xarr[i] - xsum[i] + xdiff9[i];\n            ndiff10[i] = narr[i] - nsum[i] + ndiff9[i];\n        }\n        int[] xdiff11 = new int[len];\n        int[] ndiff11 = new int[nlen];\n        for(int i = 0; i < len; i++) {\n            xdiff11[i] = xarr[i] - xsum[i] + xdiff10[i];\n            ndiff11[i] = narr[i] - nsum[i] + ndiff10[i];\n        }\n        int[] xdiff12 = new int[len];\n        int[] ndiff12 = new int[nlen];\n        for(int i = 0; i < len; i++) {\n            xdiff12[i] = xarr[i] - xsum[i] + xdiff11[i];\n            ndiff12[i] = narr[i] - nsum[i] + ndiff11[i];\n        }\n        int[] xdiff13 = new int[len];\n        int[] ndiff13 = new int[nlen];\n        for(int i = 0; i < len; i++) {\n            xdiff13[i] = xarr[i] - xsum[i] + xdiff12[i];\n            ndiff13[i] = narr[i] - nsum[i] + ndiff12[i];\n        }\n        int[] xdiff14 = new int[len];\n        int[] ndiff14 = new int[nlen];\n        for(int i = 0; i < len; i++) {\n            xdiff14[i] = xarr[i] - xsum[i] + xdiff13[i];\n            ndiff14[i] = narr[i] - nsum[i] + ndiff13[i];\n        }\n        int[] xdiff15 = new int[len];\n        int[] ndiff15 = new int[nlen];\n        for(int i = 0; i < len; i++) {\n            xdiff15[i] = xarr[i] - xsum[i] + xdiff14[i];\n            ndiff15[i] = narr[i] - nsum[i] + ndiff14[i];\n        }\n        int[] xdiff16 = new int[len];\n        int[] ndiff16 = new int[nlen];\n        for(int i = 0; i < len; i++) {\n            xdiff16[i] = xarr[i] - xsum[i] + xdiff15[i];\n            ndiff16[i] = narr[i] - nsum[i] + ndiff15[i];\n        }\n        int[] xdiff17 = new int[len];\n        int[] ndiff17 = new int[nlen];\n        for(int i = 0; i < len; i++) {\n            xdiff17[i] = xarr[i] - xsum[i] + xdiff16[i];\n            ndiff17[i] = narr[i] - nsum[i] + ndiff16[i];\n        }\n        int[] xdiff18 = new int[len];\n        int[] ndiff18 = new int[nlen];\n        for(int i = 0; i < len; i++) {\n            xdiff18[i] = xarr[i] - xsum[i] + xdiff17[i];\n            ndiff18[i] = narr[i] - nsum[i] + ndiff17[i];\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        if (x.length() == 0) return true;\n        if (x.length() == 1) return false;\n        if (x.length() == 2) return x.charAt(0) == '0' && x.charAt(1) == '0';\n        if (x.length() == 3) return x.charAt(0) == '0' && x.charAt(1) == '0' && x.charAt(2) == '0';\n        if (x.length() == 4) return x.charAt(0) == '0' && x.charAt(1) == '0' && x.charAt(2) == '0' && x.charAt(3) == '0';\n        if (x.length() == 5) return x.charAt(0) == '0' && x.charAt(1) == '0' && x.charAt(2) == '0' && x.charAt(3) == '0' && x.charAt(4) == '0';\n        if (x.length() == 6) return x.charAt(0) == '0' && x.charAt(1) == '0' && x.charAt(2) == '0' && x.charAt(3) == '0' && x.charAt(4) == '0' && x.charAt(5) == '0';\n        if (x.length() == 7) return x.charAt(0) == '0' && x.charAt(1) == '0' && x.charAt(2) == '0' && x.charAt(3) == '0' && x.charAt(4) == '0' && x.charAt(5) == '0' && x.charAt(6) == '0';\n        if (x.length() == 8) return x.charAt(0) == '0' && x.charAt(1) == '0' && x.charAt(2) == '0' && x.charAt(3) == '0' && x.charAt(4) == '0' && x.charAt(5) == '0' && x.charAt(6) == '0' && x.charAt(7) == '0';\n        if (x.length() == 9) return x.charAt(0) == '0' && x.charAt(1) == '0' && x.charAt(2) == '0' && x.charAt(3) == '0' && x.charAt(4) == '0' && x.charAt(5) == '0' && x.charAt(6) == '0' && x.charAt(7) == '0' && x.charAt(8) == '0';\n        if (x.length() == 10) return x.charAt(0) == '0' && x.charAt(1) == '0' && x.charAt(2) == '0' && x.charAt(3) == '0' && x.charAt(4) == '0' && x.charAt(5) == '0' && x.charAt(6) == '0' && x.charAt(7) == '0' && x.charAt(8) == '0' && x.charAt(9) == '0';\n        if (x.length() == 11) return x.charAt(0) == '0' && x.charAt(1) == '0' && x.charAt(2) == '0' && x.charAt(3) == '0' && x.charAt(4) == '0' && x.charAt(5) == '0' && x.charAt(6) == '0' && x.charAt(7) == '0' && x.charAt(8) == '0' && x.charAt(9) == '0' && x.charAt(10) == '0';\n        if (x.length() == 12) return x.charAt(0) == '0' && x.charAt(1) == '0' && x.charAt(2) == '0' && x.charAt(3) == '0' && x.charAt(4) == '0' && x.charAt(5) == '0' && x.charAt(6) == '0' && x.charAt(7) == '0' && x.charAt(8) == '0' && x.charAt(9) == '0' && x.charAt(10) == '0' && x.charAt(11) == '0';\n        if (x.length() == 13) return x.charAt(0) == '0' && x.charAt(1) == '0' && x.charAt(2) == '0' && x.charAt(3) == '0' && x.charAt(4) == '0' && x.charAt(5) == '0' && x.charAt(6) == '0' && x.charAt(7) == '0' && x.charAt(8) == '0' && x.charAt(9) == '0' && x.charAt(10) == '0' && x.charAt(11) == '0' && x.charAt(12) == '0';\n        if (x.length() == 14) return x.charAt(0) == '0' && x.charAt(1) == '0' && x.charAt(2) == '0' && x.charAt(3) == '0' && x.charAt(4) == '0' && x.charAt(5) == '0' && x.charAt(6) == '0' && x.charAt(7) == '0' && x.charAt(8) == '0' && x.charAt(9) == '0' && x.charAt(10) == '0' && x.charAt(11) == '0' && x.charAt(12) == '0' && x.charAt(13) == '0';\n        if (x.length() == 15) return x.charAt(0) == '0' && x.charAt(1) == '0' && x.charAt(2) == '0' && x.charAt(3) == '0' && x.charAt(4) == '0' && x.charAt(5) == '0' && x.charAt(6) == '0' && x.charAt(7) == '0' && x.charAt(8) == '0' && x.charAt(9) == '0' && x.charAt(10) == '0' && x.charAt(11) == '0' && x.charAt(12) == '0' && x.charAt(13) == '0' && x.charAt(14) == '0';\n        if (x.length() == 16) return x.charAt(0) == '0' && x.charAt(1) == '0' && x.charAt(2) == '0' && x.charAt(3) == '0' && x.charAt(4) == '0' && x.charAt(5) == '0' && x.charAt(6) == '0' && x.charAt(7) == '0' && x.charAt(8) == '0' && x.charAt(9) == '0' && x.charAt(10) == '0' && x.charAt(11) == '0' && x.charAt(12) == '0' && x.charAt(13) == '0' && x.charAt(14) == '0' && x.charAt(15) == '0';\n        if (x.length() == 17) return x.charAt(0) == '0' && x.charAt(1) == '0' && x.charAt(2) == '0' && x.charAt(3) == '0' && x.charAt(4) == '0' && x.charAt(5) == '0' && x.charAt(6) == '0' && x.charAt(7) == '0' && x.charAt(8) == '0' && x.charAt(9) == '0' && x.charAt(10) == '0' && x.charAt(11) == '0' && x.charAt(12) == '0' && x.charAt(13) == '0' && x.charAt(14) == '0' && x.charAt(15) == '0' && x.charAt(16) == '0';\n        if (x.length() == 18) return x.charAt(0) == '0' && x.charAt(1) == '0' && x.charAt(2) == '0' && x.charAt(3) == '0' && x.charAt(4) == '0' && x"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        if (x.equals(\"0\") || x.equals(\"1\") || x.equals(\"2\") || x.equals(\"3\") || x.equals(\"4\") || x.equals(\"5\") || x.equals(\"6\") || x.equals(\"7\") || x.equals(\"8\") || x.equals(\"9\")) {\n            return true;\n        }\n        if (x.equals(\"0\") && n.equals(\"0\")) {\n            return true;\n        }\n        if (x.equals(\"0\") && n.equals(\"1\")) {\n            return false;\n        }\n        if (x.equals(\"0\") && n.equals(\"2\")) {\n            return false;\n        }\n        if (x.equals(\"0\") && n.equals(\"3\")) {\n            return false;\n        }\n        if (x.equals(\"0\") && n.equals(\"4\")) {\n            return false;\n        }\n        if (x.equals(\"0\") && n.equals(\"5\")) {\n            return false;\n        }\n        if (x.equals(\"0\") && n.equals(\"6\")) {\n            return false;\n        }\n        if (x.equals(\"0\") && n.equals(\"7\")) {\n            return false;\n        }\n        if (x.equals(\"0\") && n.equals(\"8\")) {\n            return false;\n        }\n        if (x.equals(\"0\") && n.equals(\"9\")) {\n            return false;\n        }\n        if (x.equals(\"1\") && n.equals(\"0\")) {\n            return false;\n        }\n        if (x.equals(\"1\") && n.equals(\"1\")) {\n            return true;\n        }\n        if (x.equals(\"1\") && n.equals(\"2\")) {\n            return false;\n        }\n        if (x.equals(\"1\") && n.equals(\"3\")) {\n            return false;\n        }\n        if (x.equals(\"1\") && n.equals(\"4\")) {\n            return false;\n        }\n        if (x.equals(\"1\") && n.equals(\"5\")) {\n            return false;\n        }\n        if (x.equals(\"1\") && n.equals(\"6\")) {\n            return false;\n        }\n        if (x.equals(\"1\") && n.equals(\"7\")) {\n            return false;\n        }\n        if (x.equals(\"1\") && n.equals(\"8\")) {\n            return false;\n        }\n        if (x.equals(\"1\") && n.equals(\"9\")) {\n            return false;\n        }\n        if (x.equals(\"2\") && n.equals(\"0\")) {\n            return false;\n        }\n        if (x.equals(\"2\") && n.equals(\"1\")) {\n            return false;\n        }\n        if (x.equals(\"2\") && n.equals(\"2\")) {\n            return true;\n        }\n        if (x.equals(\"2\") && n.equals(\"3\")) {\n            return false;\n        }\n        if (x.equals(\"2\") && n.equals(\"4\")) {\n            return false;\n        }\n        if (x.equals(\"2\") && n.equals(\"5\")) {\n            return false;\n        }\n        if (x.equals(\"2\") && n.equals(\"6\")) {\n            return false;\n        }\n        if (x.equals(\"2\") && n.equals(\"7\")) {\n            return false;\n        }\n        if (x.equals(\"2\") && n.equals(\"8\")) {\n            return false;\n        }\n        if (x.equals(\"2\") && n.equals(\"9\")) {\n            return false;\n        }\n        if (x.equals(\"3\") && n.equals(\"0\")) {\n            return false;\n        }\n        if (x.equals(\"3\") && n.equals(\"1\")) {\n            return false;\n        }\n        if (x.equals(\"3\") && n.equals(\"2\")) {\n            return false;\n        }\n        if (x.equals(\"3\") && n.equals(\"3\")) {\n            return true;\n        }\n        if (x.equals(\"3\") && n.equals(\"4\")) {\n            return false;\n        }\n        if (x.equals(\"3\") && n.equals(\"5\")) {\n            return false;\n        }\n        if (x.equals(\"3\") && n.equals(\"6\")) {\n            return false;\n        }\n        if (x.equals(\"3\") && n.equals(\"7\")) {\n            return false;\n        }\n        if (x.equals(\"3\") && n.equals(\"8\")) {\n            return false;\n        }\n        if (x.equals(\"3\") && n.equals(\"9\")) {\n            return false;\n        }\n        if (x.equals(\"4\") && n.equals(\"0\")) {\n            return false;\n        }\n        if (x.equals(\"4\") && n.equals(\"1\")) {\n            return false;\n        }\n        if (x.equals(\"4\") && n.equals(\"2\")) {\n            return false;\n        }\n        if (x.equals(\"4\") && n.equals(\"3\")) {\n            return false;\n        }\n        if (x.equals(\"4\") && n.equals(\"4\")) {\n            return true;\n        }\n        if (x.equals(\"4\") && n.equals(\"5\")) {\n            return false;\n        }\n        if (x.equals(\"4\") && n.equals(\"6\")) {\n            return false;\n        }\n        if (x.equals(\"4\") && n.equals(\"7\")) {\n            return false;\n        }\n        if (x.equals(\"4\") && n.equals(\"8\")) {\n            return false;\n        }\n        if (x.equals(\"4\") && n.equals(\"9\")) {\n            return false;\n        }\n        if (x.equals(\"5\") && n.equals(\"0\")) {\n            return false;\n        }\n        if (x.equals(\"5\") && n.equals(\"1\")) {\n            return false;\n        }\n        if (x.equals(\"5\") && n.equals(\"2\")) {\n            return false;\n        }\n        if (x.equals(\"5\") && n.equals(\"3\")) {\n            return false;\n        }\n        if (x.equals(\"5\") && n.equals(\"4\")) {\n            return false;\n        }\n        if (x.equals(\"5\") && n.equals(\"5\")) {\n            return true;\n        }\n        if (x.equals(\"5\") && n.equals(\"6\")) {\n            return false;\n        }\n        if (x.equals(\"5\") && n.equals(\"7\")) {\n            return false;\n        }\n        if (x.equals(\"5\") && n.equals(\"8\")) {\n            return false;\n        }\n        if (x.equals(\"5\") && n.equals(\"9\")) {\n            return false;\n        }\n        if (x.equals(\"6\") && n.equals(\"0\")) {\n            return false;\n        }\n        if (x.equals(\"6\") && n.equals(\"1\")) {\n            return false;\n        }\n        if (x.equals(\"6\") && n.equals(\"2\")) {\n            return false;\n        }\n        if (x.equals(\"6\") && n.equals(\"3\")) {\n            return false;\n        }\n        if (x.equals(\"6\") && n.equals(\"4\")) {\n            return false;\n        }\n        if (x.equals(\"6\") && n.equals(\"5\")) {\n            return false;\n        }\n        if (x.equals(\"6\") && n.equals(\"6\")) {\n            return true;\n        }\n        if (x.equals(\"6\") && n.equals(\"7\")) {\n            return false;\n        }\n        if (x.equals(\"6\") && n.equals(\"8\")) {\n            return false;\n        }\n        if (x.equals(\"6\") && n.equals(\"9\")) {\n            return false;\n        }\n        if (x.equals(\"7\") && n.equals(\"0\")) {\n            return false;\n        }\n        if (x.equals(\"7\") && n.equals(\"1\")) {\n            return false;\n        }\n        if (x.equals(\"7\") && n.equals(\"2\")) {\n            return false;\n        }\n        if (x.equals(\"7\") && n.equals(\"3\")) {\n            return false;\n        }\n        if (x.equals(\"7\") && n.equals(\"4\")) {\n            return false;\n        }\n        if (x.equals(\"7\") && n.equals(\"5\")) {\n            return false;\n        }\n        if (x.equals(\"7\") && n.equals(\"6\")) {\n            return false;\n        }\n        if (x.equals(\"7\") && n.equals(\"7\")) {\n            return true;\n        }\n        if (x.equals(\"7\") && n.equals(\"8\")) {\n            return false;\n        }\n        if (x.equals(\"7\") && n.equals(\"9\")) {\n            return false;\n        }\n        if (x.equals(\"8\") && n.equals(\"0\")) {\n            return false;\n        }\n        if (x.equals(\"8\") && n.equals(\"1\")) {\n            return false;\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        if(x.length() == 1) return true;\n        if(n.length() == 1) return false;\n        if(x.charAt(0) == '0' && n.charAt(0) == '0') return false;\n        if(x.charAt(0) == '0' && n.charAt(0) != '0') return false;\n        if(x.charAt(0) != '0' && n.charAt(0) == '0') return false;\n        if(x.charAt(0) != '0' && n.charAt(0) != '0') return false;\n        if(x.charAt(1) == '0' && n.charAt(1) == '0') return false;\n        if(x.charAt(1) == '0' && n.charAt(1) != '0') return false;\n        if(x.charAt(1) != '0' && n.charAt(1) == '0') return false;\n        if(x.charAt(1) != '0' && n.charAt(1) != '0') return false;\n        if(x.charAt(2) == '0' && n.charAt(2) == '0') return false;\n        if(x.charAt(2) == '0' && n.charAt(2) != '0') return false;\n        if(x.charAt(2) != '0' && n.charAt(2) == '0') return false;\n        if(x.charAt(2) != '0' && n.charAt(2) != '0') return false;\n        if(x.charAt(3) == '0' && n.charAt(3) == '0') return false;\n        if(x.charAt(3) == '0' && n.charAt(3) != '0') return false;\n        if(x.charAt(3) != '0' && n.charAt(3) == '0') return false;\n        if(x.charAt(3) != '0' && n.charAt(3) != '0') return false;\n        if(x.charAt(4) == '0' && n.charAt(4) == '0') return false;\n        if(x.charAt(4) == '0' && n.charAt(4) != '0') return false;\n        if(x.charAt(4) != '0' && n.charAt(4) == '0') return false;\n        if(x.charAt(4) != '0' && n.charAt(4) != '0') return false;\n        if(x.charAt(5) == '0' && n.charAt(5) == '0') return false;\n        if(x.charAt(5) == '0' && n.charAt(5) != '0') return false;\n        if(x.charAt(5) != '0' && n.charAt(5) == '0') return false;\n        if(x.charAt(5) != '0' && n.charAt(5) != '0') return false;\n        if(x.charAt(6) == '0' && n.charAt(6) == '0') return false;\n        if(x.charAt(6) == '0' && n.charAt(6) != '0') return false;\n        if(x.charAt(6) != '0' && n.charAt(6) == '0') return false;\n        if(x.charAt(6) != '0' && n.charAt(6) != '0') return false;\n        if(x.charAt(7) == '0' && n.charAt(7) == '0') return false;\n        if(x.charAt(7) == '0' && n.charAt(7) != '0') return false;\n        if(x.charAt(7) != '0' && n.charAt(7) == '0') return false;\n        if(x.charAt(7) != '0' && n.charAt(7) != '0') return false;\n        if(x.charAt(8) == '0' && n.charAt(8) == '0') return false;\n        if(x.charAt(8) == '0' && n.charAt(8) != '0') return false;\n        if(x.charAt(8) != '0' && n.charAt(8) == '0') return false;\n        if(x.charAt(8) != '0' && n.charAt(8) != '0') return false;\n        if(x.charAt(9) == '0' && n.charAt(9) == '0') return false;\n        if(x.charAt(9) == '0' && n.charAt(9) != '0') return false;\n        if(x.charAt(9) != '0' && n.charAt(9) == '0') return false;\n        if(x.charAt(9) != '0' && n.charAt(9) != '0') return false;\n        if(x.charAt(10) == '0' && n.charAt(10) == '0') return false;\n        if(x.charAt(10) == '0' && n.charAt(10) != '0') return false;\n        if(x.charAt(10) != '0' && n.charAt(10) == '0') return false;\n        if(x.charAt(10) != '0' && n.charAt(10) != '0') return false;\n        if(x.charAt(11) == '0' && n.charAt(11) == '0') return false;\n        if(x.charAt(11) == '0' && n.charAt(11) != '0') return false;\n        if(x.charAt(11) != '0' && n.charAt(11) == '0') return false;\n        if(x.charAt(11) != '0' && n.charAt(11) != '0') return false;\n        if(x.charAt(12) == '0' && n.charAt(12) == '0') return false;\n        if(x.charAt(12) == '0' && n.charAt(12) != '0') return false;\n        if(x.charAt(12) != '0' && n.charAt(12) == '0') return false;\n        if(x.charAt(12) != '0' && n.charAt(12) != '0') return false;\n        if(x.charAt(13) == '0' && n.charAt(13) == '0') return false;\n        if(x.charAt(13) == '0' && n.charAt(13) != '0') return false;\n        if(x.charAt(13) != '0' && n.charAt(13) == '0') return false;\n        if(x.charAt(13) != '0' && n.charAt(13) != '0') return false;\n        if(x.charAt(14) == '0' && n.charAt(14) == '0') return false;\n        if(x.charAt(14) == '0' && n.charAt(14) != '0') return false;\n        if(x.charAt(14) != '0' && n.charAt(14) == '0') return false;\n        if(x.charAt(14) != '0' && n.charAt(14) != '0') return false;\n        if(x.charAt(15) == '0' && n.charAt(15) == '0') return false;\n        if(x.charAt(15) == '0' && n.charAt(15) != '0') return false;\n        if(x.charAt(15) != '0' && n.charAt(15) == '0') return false;\n        if(x.charAt(15) != '0' && n.charAt(15) != '0') return false;\n        if(x.charAt(16) == '0' && n.charAt(16) == '0') return false;\n        if(x.charAt(16) == '0' && n.charAt(16) != '0') return false;\n        if(x.charAt(16) != '0' && n.charAt(16) == '0') return false;\n        if(x.charAt(16) != '0' && n.charAt(16) != '0') return false;\n        if(x.charAt(17) == '0' && n.charAt(17) == '0') return false;\n        if(x.charAt(17) == '0' && n.charAt(17) != '0') return"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        if(x.equals(\"1\"))\n            return true;\n        if(x.equals(\"0\"))\n            return false;\n        String[] xArr = x.split(\"/\");\n        String[] nArr = n.split(\"/\");\n        int xLen = xArr.length;\n        int nLen = nArr.length;\n        int xNum = 0;\n        int nNum = 0;\n        int xSum = 0;\n        int nSum = 0;\n        int xIndex = 0;\n        int nIndex = 0;\n        int xCount = 0;\n        int nCount = 0;\n        int xCount1 = 0;\n        int nCount1 = 0;\n        int xCount2 = 0;\n        int nCount2 = 0;\n        int xCount3 = 0;\n        int nCount3 = 0;\n        int xCount4 = 0;\n        int nCount4 = 0;\n        int xCount5 = 0;\n        int nCount5 = 0;\n        int xCount6 = 0;\n        int nCount6 = 0;\n        int xCount7 = 0;\n        int nCount7 = 0;\n        int xCount8 = 0;\n        int nCount8 = 0;\n        int xCount9 = 0;\n        int nCount9 = 0;\n        int xCount10 = 0;\n        int nCount10 = 0;\n        int xCount11 = 0;\n        int nCount11 = 0;\n        int xCount12 = 0;\n        int nCount12 = 0;\n        int xCount13 = 0;\n        int nCount13 = 0;\n        int xCount14 = 0;\n        int nCount14 = 0;\n        int xCount15 = 0;\n        int nCount15 = 0;\n        int xCount16 = 0;\n        int nCount16 = 0;\n        int xCount17 = 0;\n        int nCount17 = 0;\n        int xCount18 = 0;\n        int nCount18 = 0;\n        int xCount19 = 0;\n        int nCount19 = 0;\n        int xCount20 = 0;\n        int nCount20 = 0;\n        int xCount21 = 0;\n        int nCount21 = 0;\n        int xCount22 = 0;\n        int nCount22 = 0;\n        int xCount23 = 0;\n        int nCount23 = 0;\n        int xCount24 = 0;\n        int nCount24 = 0;\n        int xCount25 = 0;\n        int nCount25 = 0;\n        int xCount26 = 0;\n        int nCount26 = 0;\n        int xCount27 = 0;\n        int nCount27 = 0;\n        int xCount28 = 0;\n        int nCount28 = 0;\n        int xCount29 = 0;\n        int nCount29 = 0;\n        int xCount30 = 0;\n        int nCount30 = 0;\n        int xCount31 = 0;\n        int nCount31 = 0;\n        int xCount32 = 0;\n        int nCount32 = 0;\n        int xCount33 = 0;\n        int nCount33 = 0;\n        int xCount34 = 0;\n        int nCount34 = 0;\n        int xCount35 = 0;\n        int nCount35 = 0;\n        int xCount36 = 0;\n        int nCount36 = 0;\n        int xCount37 = 0;\n        int nCount37 = 0;\n        int xCount38 = 0;\n        int nCount38 = 0;\n        int xCount39 = 0;\n        int nCount39 = 0;\n        int xCount40 = 0;\n        int nCount40 = 0;\n        int xCount41 = 0;\n        int nCount41 = 0;\n        int xCount42 = 0;\n        int nCount42 = 0;\n        int xCount43 = 0;\n        int nCount43 = 0;\n        int xCount44 = 0;\n        int nCount44 = 0;\n        int xCount45 = 0;\n        int nCount45 = 0;\n        int xCount46 = 0;\n        int nCount46 = 0;\n        int xCount47 = 0;\n        int nCount47 = 0;\n        int xCount48 = 0;\n        int nCount48 = 0;\n        int xCount49 = 0;\n        int nCount49 = 0;\n        int xCount50 = 0;\n        int nCount50 = 0;\n        int xCount51 = 0;\n        int nCount51 = 0;\n        int xCount52 = 0;\n        int nCount52 = 0;\n        int xCount53 = 0;\n        int nCount53 = 0;\n        int xCount54 = 0;\n        int nCount54 = 0;\n        int xCount55 = 0;\n        int nCount55 = 0;\n        int xCount56 = 0;\n        int nCount56 = 0;\n        int xCount57 = 0;\n        int nCount57 = 0;\n        int xCount58 = 0;\n        int nCount58 = 0;\n        int xCount59 = 0;\n        int nCount59 = 0;\n        int xCount60 = 0;\n        int nCount60 = 0;\n        int xCount61 = 0;\n        int nCount61 = 0;\n        int xCount62 = 0;\n        int nCount62 = 0;\n        int xCount63 = 0;\n        int nCount63 = 0;\n        int xCount64 = 0;\n        int nCount64 = 0;\n        int xCount65 = 0;\n        int nCount65 = 0;\n        int xCount66 = 0;\n        int nCount66 = 0;\n        int xCount67 = 0;\n        int nCount67 = 0;\n        int xCount68 = 0;\n        int nCount68 = 0;\n        int xCount69 = 0;\n        int nCount69 = 0;\n        int xCount70 = 0;\n        int nCount70 = 0;\n        int xCount71 = 0;\n        int nCount71 = 0;\n        int xCount72 = 0;\n        int nCount72 = 0;\n        int xCount73 = 0;\n        int nCount73 = 0;\n        int xCount74 = 0;\n        int nCount74 = 0;\n        int xCount75 = 0;\n        int nCount75 = 0;\n        int xCount76 = 0;\n        int nCount76 = 0;\n        int xCount77 = 0;\n        int nCount77 = 0;\n        int xCount78 = 0;\n        int nCount78 = 0;\n        int xCount79 = 0;\n        int nCount79 = 0;\n        int xCount80 = 0;\n        int nCount80 = 0;\n        int xCount81 = 0;\n        int nCount81 = 0;\n        int xCount82 = 0;\n        int nCount82 = 0;\n        int xCount83 = 0;\n        int nCount83 = 0;\n        int xCount84 = 0;\n        int nCount84 = 0;\n        int xCount85 = 0;\n        int nCount85 = 0;\n        int xCount86 = 0;\n        int nCount86 = 0;\n        int xCount87 = 0;\n        int nCount87 = 0;\n        int xCount88 = 0;\n        int nCount88 = 0;"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        if(x.length() == 1)\n            return true;\n        if(n.length() == 1)\n            return false;\n        if(x.charAt(0) == '0' && n.charAt(0) == '0')\n            return simplify(x.substring(1), n.substring(1));\n        if(x.charAt(0) == '0' && n.charAt(0) != '0')\n            return simplify(x.substring(1), n.substring(1));\n        if(x.charAt(0) != '0' && n.charAt(0) == '0')\n            return simplify(x.substring(1), n.substring(1));\n        if(x.charAt(0) != '0' && n.charAt(0) != '0')\n            return simplify(x.substring(1), n.substring(1));\n        return simplify(x.substring(1), n.substring(1));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        if (x.equals(\"0\")) {\n            return true;\n        }\n        String[] xArr = x.split(\"\");\n        String[] nArr = n.split(\"\");\n        int nLen = nArr.length;\n        int xLen = xArr.length;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int carry = 0;\n        while (i < xLen && j < nLen) {\n            int xVal = Integer.parseInt(xArr[i]);\n            int nVal = Integer.parseInt(nArr[j]);\n            int sum = xVal + nVal + carry;\n            carry = sum / 10;\n            xArr[i] = String.valueOf(sum % 10);\n            i++;\n            j++;\n        }\n        if (i == xLen) {\n            while (j < nLen) {\n                int nVal = Integer.parseInt(nArr[j]);\n                int sum = nVal + carry;\n                carry = sum / 10;\n                nArr[j] = String.valueOf(sum % 10);\n                j++;\n            }\n        } else if (j == nLen) {\n            while (i < xLen) {\n                int xVal = Integer.parseInt(xArr[i]);\n                int sum = xVal + carry;\n                carry = sum / 10;\n                xArr[i] = String.valueOf(sum % 10);\n                i++;\n            }\n        }\n        if (carry > 0) {\n            xArr[i] = String.valueOf(carry);\n        }\n        String res = \"\";\n        for (int i = 0; i < xLen; i++) {\n            res += xArr[i];\n        }\n        return res.equals(n);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        int len = x.length();\n        int num = 0;\n        for (int i = 0; i < len; i++) {\n            if (x.charAt(i) == '1') {\n                num++;\n            }\n        }\n        if (num == Integer.parseInt(n)) {\n            return true;\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        String[] xArr = x.split(\"/\");\n        String[] nArr = n.split(\"/\");\n        int len = xArr.length;\n        int len2 = nArr.length;\n        int len3 = len2;\n        int len4 = len3;\n        int len5 = len4;\n        int len6 = len5;\n        int len7 = len6;\n        int len8 = len7;\n        int len9 = len8;\n        int len10 = len9;\n        int len11 = len10;\n        int len12 = len11;\n        int len13 = len12;\n        int len14 = len13;\n        int len15 = len14;\n        int len16 = len15;\n        int len17 = len16;\n        int len18 = len17;\n        int len19 = len18;\n        int len20 = len19;\n        int len21 = len20;\n        int len22 = len21;\n        int len23 = len22;\n        int len24 = len23;\n        int len25 = len24;\n        int len26 = len25;\n        int len27 = len26;\n        int len28 = len27;\n        int len29 = len28;\n        int len30 = len29;\n        int len31 = len30;\n        int len32 = len31;\n        int len33 = len32;\n        int len34 = len33;\n        int len35 = len34;\n        int len36 = len35;\n        int len37 = len36;\n        int len38 = len37;\n        int len39 = len38;\n        int len40 = len39;\n        int len41 = len40;\n        int len42 = len41;\n        int len43 = len42;\n        int len44 = len43;\n        int len45 = len44;\n        int len46 = len45;\n        int len47 = len46;\n        int len48 = len47;\n        int len49 = len48;\n        int len50 = len49;\n        int len51 = len50;\n        int len52 = len51;\n        int len53 = len52;\n        int len54 = len53;\n        int len55 = len54;\n        int len56 = len55;\n        int len57 = len56;\n        int len58 = len57;\n        int len59 = len58;\n        int len60 = len59;\n        int len61 = len60;\n        int len62 = len61;\n        int len63 = len62;\n        int len64 = len63;\n        int len65 = len64;\n        int len66 = len65;\n        int len67 = len66;\n        int len68 = len67;\n        int len69 = len68;\n        int len70 = len69;\n        int len71 = len70;\n        int len72 = len71;\n        int len73 = len72;\n        int len74 = len73;\n        int len75 = len74;\n        int len76 = len75;\n        int len77 = len76;\n        int len78 = len77;\n        int len79 = len78;\n        int len80 = len79;\n        int len81 = len80;\n        int len82 = len81;\n        int len83 = len82;\n        int len84 = len83;\n        int len85 = len84;\n        int len86 = len85;\n        int len87 = len86;\n        int len88 = len87;\n        int len89 = len88;\n        int len90 = len89;\n        int len91 = len90;\n        int len92 = len91;\n        int len93 = len92;\n        int len94 = len93;\n        int len95 = len94;\n        int len96 = len95;\n        int len97 = len96;\n        int len98 = len97;\n        int len99 = len98;\n        int len100 = len99;\n        int len101 = len100;\n        int len102 = len101;\n        int len103 = len102;\n        int len104 = len103;\n        int len105 = len104;\n        int len106 = len105;\n        int len107 = len106;\n        int len108 = len107;\n        int len109 = len108;\n        int len110 = len109;\n        int len111 = len110;\n        int len112 = len111;\n        int len113 = len112;\n        int len114 = len113;\n        int len115 = len114;\n        int len116 = len115;\n        int len117 = len116;\n        int len118 = len117;\n        int len119 = len118;\n        int len120 = len119;\n        int len121 = len120;\n        int len122 = len121;\n        int len123 = len122;\n        int len124 = len123;\n        int len125 = len124;\n        int len126 = len125;\n        int len127 = len126;\n        int len128 = len127;\n        int len129 = len128;\n        int len130 = len129;\n        int len131 = len130;\n        int len132 = len131;\n        int len133 = len132;\n        int len134 = len133;\n        int len135 = len134;\n        int len136 = len135;\n        int len137 = len136;\n        int len138 = len137;\n        int len139 = len138;\n        int len140 = len139;\n        int len141 = len140;\n        int len142 = len141;\n        int len143 = len142;\n        int len144 = len143;\n        int len145 = len144;\n        int len146 = len145;\n        int len147 = len146;\n        int len148 = len147;\n        int len149 = len148;\n        int len150 = len149;\n        int len151 = len150;\n        int len152 = len151;\n        int len153 = len152;\n        int len154 = len153;\n        int len155 = len154;\n        int len156 = len155;\n        int len157 = len156;\n        int len158 = len157;\n        int len159 = len158;\n        int len160 = len159;\n        int len161 = len160;\n        int len162 = len161;\n        int"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        if(x.length() == 0) return true;\n        if(n.length() == 0) return false;\n        if(x.length() == 1) return true;\n        if(n.length() == 1) return false;\n        if(x.charAt(0) == '0') return simplify(x.substring(1), n.substring(1));\n        if(n.charAt(0) == '0') return simplify(x, n.substring(1));\n        if(n.charAt(0) == '1') return simplify(x.substring(1), n.substring(1));\n        if(x.charAt(0) == '1') return simplify(x.substring(1), n.substring(1));\n        return simplify(x.substring(1), n.substring(1));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        int result = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n1 = 0;\n        int n2 = 0;\n        int n3 = 0;\n        int n4 = 0;\n        int n5 = 0;\n        int n6 = 0;\n        int n7 = 0;\n        int n8 = 0;\n        int n9 = 0;\n        int n10 = 0;\n        int n11 = 0;\n        int n12 = 0;\n        int n13 = 0;\n        int n14 = 0;\n        int n15 = 0;\n        int n16 = 0;\n        int n17 = 0;\n        int n18 = 0;\n        int n19 = 0;\n        int n20 = 0;\n        int n21 = 0;\n        int n22 = 0;\n        int n23 = 0;\n        int n24 = 0;\n        int n25 = 0;\n        int n26 = 0;\n        int n27 = 0;\n        int n28 = 0;\n        int n29 = 0;\n        int n30 = 0;\n        int n31 = 0;\n        int n32 = 0;\n        int n33 = 0;\n        int n34 = 0;\n        int n35 = 0;\n        int n36 = 0;\n        int n37 = 0;\n        int n38 = 0;\n        int n39 = 0;\n        int n40 = 0;\n        int n41 = 0;\n        int n42 = 0;\n        int n43 = 0;\n        int n44 = 0;\n        int n45 = 0;\n        int n46 = 0;\n        int n47 = 0;\n        int n48 = 0;\n        int n49 = 0;\n        int n50 = 0;\n        int n51 = 0;\n        int n52 = 0;\n        int n53 = 0;\n        int n54 = 0;\n        int n55 = 0;\n        int n56 = 0;\n        int n57 = 0;\n        int n58 = 0;\n        int n59 = 0;\n        int n60 = 0;\n        int n61 = 0;\n        int n62 = 0;\n        int n63 = 0;\n        int n64 = 0;\n        int n65 = 0;\n        int n66 = 0;\n        int n67 = 0;\n        int n68 = 0;\n        int n69 = 0;\n        int n70 = 0;\n        int n71 = 0;\n        int n72 = 0;\n        int n73 = 0;\n        int n74 = 0;\n        int n75 = 0;\n        int n76 = 0;\n        int n77 = 0;\n        int n78 = 0;\n        int n79 = 0;\n        int n80 = 0;\n        int n81 = 0;\n        int n82 = 0;\n        int n83 = 0;\n        int n84 = 0;\n        int n85 = 0;\n        int n86 = 0;\n        int n87 = 0;\n        int n88 = 0;\n        int n89 = 0;\n        int n90 = 0;\n        int n91 = 0;\n        int n92 = 0;\n        int n93 = 0;\n        int n94 = 0;\n        int n95 = 0;\n        int n96 = 0;\n        int n97 = 0;\n        int n98 = 0;\n        int n99 = 0;\n        int n100 = 0;\n        int n101 = 0;\n        int n102 = 0;\n        int n103 = 0;\n        int n104 = 0;\n        int n105 = 0;\n        int n106 = 0;\n        int n107 = 0;\n        int n108 = 0;\n        int n109 = 0;\n        int n110 = 0;\n        int n111 = 0;\n        int n112 = 0;\n        int n113 = 0;\n        int n114 = 0;\n        int n115 = 0;\n        int n116 = 0;\n        int n117 = 0;\n        int n118 = 0;\n        int n119 = 0;\n        int n120 = 0;\n        int n121 = 0;\n        int n122 = 0;\n        int n123 = 0;\n        int n124 = 0;\n        int n125 = 0;\n        int n126 = 0;\n        int n127 = 0;\n        int n128 = 0;\n        int n129 = 0;\n        int n130 = 0;\n        int n131 = 0;\n        int n132 = 0;\n        int n133 = 0;\n        int n134 = 0;\n        int n135 = 0;\n        int n136 = 0;\n        int n137 = 0;\n        int n138 = 0;\n        int n139 = 0;\n        int n140 = 0;\n        int n141 = 0;\n        int n142 = 0;\n        int n143 = 0;\n        int n144 = 0;\n        int n145 = 0;\n        int n146 = 0;\n        int n147 = 0;\n        int n148 = 0;\n        int n149 = 0;\n        int n150 = 0;\n        int n151 = 0;\n        int n152 = 0;\n        int n153 = 0;\n        int n154 = 0;\n        int n155 = 0;\n        int n156 = 0;\n        int n157 = 0;\n        int n158 = 0;\n        int n159 = 0;\n        int n160 = 0;\n        int n161 = 0;\n        int n162 = 0;\n        int n163 = 0;\n        int n164 = 0;\n        int n165 = 0;\n        int n166 = 0;\n        int n167 = 0;\n        int n168 = 0;\n        int n169 = 0;\n        int n170 = 0;\n        int n171 = 0;\n        int n172 = 0;\n        int n173 = 0;\n        int n174 = 0;\n        int n175 = 0;\n        int n176 = 0;\n        int n177 = 0;\n        int n178 = 0;\n        int n179 = 0;\n        int n180 = 0;\n        int n181 = 0;\n        int n182 = 0;\n        int n183 = 0;\n        int n184 = 0;\n        int n185 = 0;\n        int n186 = 0;\n        int n187 = 0;\n        int n188 = 0;\n        int n189 = 0;\n        int n190 = 0;\n        int n191 = 0;\n        int n192 = 0;\n        int n193 = 0;\n        int n194 = 0;\n        int n195 = 0;\n        int n196 = 0;\n        int n197 = 0;\n        int n198 = 0;\n        int n199 = 0;"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        if (x.length() == 0) {\n            return true;\n        }\n        if (n.length() == 0) {\n            return false;\n        }\n        if (x.equals(n)) {\n            return true;\n        }\n        if (x.length() == 1) {\n            return false;\n        }\n        if (n.length() == 1) {\n            return false;\n        }\n        if (x.charAt(0) == '0' && n.charAt(0) == '0') {\n            return simplify(x.substring(1), n.substring(1));\n        }\n        if (x.charAt(0) == '0' && n.charAt(0) != '0') {\n            return simplify(x.substring(1), n);\n        }\n        if (x.charAt(0) != '0' && n.charAt(0) == '0') {\n            return simplify(x, n.substring(1));\n        }\n        if (x.charAt(0) != '0' && n.charAt(0) != '0') {\n            return simplify(x.substring(1), n.substring(1));\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        if(x.length() == 0 || n.length() == 0) return false;\n        int i = 0;\n        int j = 0;\n        int len = x.length();\n        int num = 0;\n        while(i < len && j < n.length()) {\n            if(x.charAt(i) == '0') {\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '1') {\n                num = num * 2 + 1;\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '2') {\n                num = num * 3 + 2;\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '3') {\n                num = num * 4 + 3;\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '4') {\n                num = num * 5 + 4;\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '5') {\n                num = num * 6 + 5;\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '6') {\n                num = num * 7 + 6;\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '7') {\n                num = num * 8 + 7;\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '8') {\n                num = num * 9 + 8;\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '9') {\n                num = num * 10 + 9;\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '0') {\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '1') {\n                num = num * 2 + 1;\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '2') {\n                num = num * 3 + 2;\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '3') {\n                num = num * 4 + 3;\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '4') {\n                num = num * 5 + 4;\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '5') {\n                num = num * 6 + 5;\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '6') {\n                num = num * 7 + 6;\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '7') {\n                num = num * 8 + 7;\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '8') {\n                num = num * 9 + 8;\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '9') {\n                num = num * 10 + 9;\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '0') {\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '1') {\n                num = num * 2 + 1;\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '2') {\n                num = num * 3 + 2;\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '3') {\n                num = num * 4 + 3;\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '4') {\n                num = num * 5 + 4;\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '5') {\n                num = num * 6 + 5;\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '6') {\n                num = num * 7 + 6;\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '7') {\n                num = num * 8 + 7;\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '8') {\n                num = num * 9 + 8;\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '9') {\n                num = num * 10 + 9;\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '0') {\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '1') {\n                num = num * 2 + 1;\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '2') {\n                num = num * 3 + 2;\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '3') {\n                num = num * 4 + 3;\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '4') {\n                num = num * 5 + 4;\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '5') {\n                num = num * 6 + 5;\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '6') {\n                num = num * 7 + 6;\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '7') {\n                num = num * 8 + 7;\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '8') {\n                num = num * 9 + 8;\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '9') {\n                num = num * 10 + 9;\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '0') {\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '1') {\n                num = num * 2 + 1;\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '2') {\n                num = num * 3 + 2;\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '3') {\n                num = num * 4 + 3;\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '4') {\n                num = num * 5 + 4;\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '5') {\n                num = num * 6 + 5;\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '6') {\n                num = num * 7 + 6;\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '7') {\n                num = num * 8 + 7;\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '8') {\n                num = num * 9 + 8;\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '9') {\n                num = num * 10 + 9;\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '0') {\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '1') {\n                num = num * 2 + 1;\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '2') {\n                num = num * 3 + 2;\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '3') {\n                num = num * 4 + 3;\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '4') {\n                num = num * 5 + 4;\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '5') {\n                num = num * 6 + 5;\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '6') {\n                num = num * 7 + 6;\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '7') {\n                num = num * 8 + 7;\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '8') {\n                num = num * 9 + 8;\n                i++;\n                continue;\n            }\n            if(x.charAt(i) == '9') {\n                num = num * 10 + 9;\n                i++;\n                continue;\n            }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        if (x.length() == 0 || n.length() == 0) {\n            return false;\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        if (x == null || n == null) return false;\n        int n1 = n.length();\n        int n2 = x.length();\n        if (n1 == 0 || n2 == 0) return false;\n        if (n1 == 1) return true;\n        if (n2 == 1) return true;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n3 = 0;\n        int n4 = 0;\n        int n5 = 0;\n        int n6 = 0;\n        int n7 = 0;\n        int n8 = 0;\n        int n9 = 0;\n        int n10 = 0;\n        int n11 = 0;\n        int n12 = 0;\n        int n13 = 0;\n        int n14 = 0;\n        int n15 = 0;\n        int n16 = 0;\n        int n17 = 0;\n        int n18 = 0;\n        int n19 = 0;\n        int n20 = 0;\n        int n21 = 0;\n        int n22 = 0;\n        int n23 = 0;\n        int n24 = 0;\n        int n25 = 0;\n        int n26 = 0;\n        int n27 = 0;\n        int n28 = 0;\n        int n29 = 0;\n        int n30 = 0;\n        int n31 = 0;\n        int n32 = 0;\n        int n33 = 0;\n        int n34 = 0;\n        int n35 = 0;\n        int n36 = 0;\n        int n37 = 0;\n        int n38 = 0;\n        int n39 = 0;\n        int n40 = 0;\n        int n41 = 0;\n        int n42 = 0;\n        int n43 = 0;\n        int n44 = 0;\n        int n45 = 0;\n        int n46 = 0;\n        int n47 = 0;\n        int n48 = 0;\n        int n49 = 0;\n        int n50 = 0;\n        int n51 = 0;\n        int n52 = 0;\n        int n53 = 0;\n        int n54 = 0;\n        int n55 = 0;\n        int n56 = 0;\n        int n57 = 0;\n        int n58 = 0;\n        int n59 = 0;\n        int n60 = 0;\n        int n61 = 0;\n        int n62 = 0;\n        int n63 = 0;\n        int n64 = 0;\n        int n65 = 0;\n        int n66 = 0;\n        int n67 = 0;\n        int n68 = 0;\n        int n69 = 0;\n        int n70 = 0;\n        int n71 = 0;\n        int n72 = 0;\n        int n73 = 0;\n        int n74 = 0;\n        int n75 = 0;\n        int n76 = 0;\n        int n77 = 0;\n        int n78 = 0;\n        int n79 = 0;\n        int n80 = 0;\n        int n81 = 0;\n        int n82 = 0;\n        int n83 = 0;\n        int n84 = 0;\n        int n85 = 0;\n        int n86 = 0;\n        int n87 = 0;\n        int n88 = 0;\n        int n89 = 0;\n        int n90 = 0;\n        int n91 = 0;\n        int n92 = 0;\n        int n93 = 0;\n        int n94 = 0;\n        int n95 = 0;\n        int n96 = 0;\n        int n97 = 0;\n        int n98 = 0;\n        int n99 = 0;\n        int n100 = 0;\n        int n101 = 0;\n        int n102 = 0;\n        int n103 = 0;\n        int n104 = 0;\n        int n105 = 0;\n        int n106 = 0;\n        int n107 = 0;\n        int n108 = 0;\n        int n109 = 0;\n        int n110 = 0;\n        int n111 = 0;\n        int n112 = 0;\n        int n113 = 0;\n        int n114 = 0;\n        int n115 = 0;\n        int n116 = 0;\n        int n117 = 0;\n        int n118 = 0;\n        int n119 = 0;\n        int n120 = 0;\n        int n121 = 0;\n        int n122 = 0;\n        int n123 = 0;\n        int n124 = 0;\n        int n125 = 0;\n        int n126 = 0;\n        int n127 = 0;\n        int n128 = 0;\n        int n129 = 0;\n        int n130 = 0;\n        int n131 = 0;\n        int n132 = 0;\n        int n133 = 0;\n        int n134 = 0;\n        int n135 = 0;\n        int n136 = 0;\n        int n137 = 0;\n        int n138 = 0;\n        int n139 = 0;\n        int n140 = 0;\n        int n141 = 0;\n        int n142 = 0;\n        int n143 = 0;\n        int n144 = 0;\n        int n145 = 0;\n        int n146 = 0;\n        int n147 = 0;\n        int n148 = 0;\n        int n149 = 0;\n        int n150 = 0;\n        int n151 = 0;\n        int n152 = 0;\n        int n153 = 0;\n        int n154 = 0;\n        int n155 = 0;\n        int n156 = 0;\n        int n157 = 0;\n        int n158 = 0;\n        int n159 = 0;\n        int n160 = 0;\n        int n161 = 0;\n        int n162 = 0;\n        int n163 = 0;\n        int n164 = 0;\n        int n165 = 0;\n        int n166 = 0;\n        int n167 = 0;\n        int n168 = 0;\n        int n169 = 0;\n        int n170 = 0;\n        int n171 = 0;\n        int n172 = 0;\n        int n173 = 0;\n        int n174 = 0;\n        int n175 = 0;\n        int n176 = 0;\n        int n177 = 0;\n        int n178 = 0;\n        int n179 = 0;\n        int n180 = 0;\n        int n181 = 0;\n        int n182 = 0;\n        int n183 = 0;\n        int n184 = 0;\n        int n185 = 0;\n        int n186 = 0;\n        int n187 = 0;\n        int n188 = 0;\n        int n189 = 0;\n        int n190 = 0;\n        int n191 = 0;\n        int n192 = 0;\n        int n193 = 0;\n        int n194 = 0;\n        int n195 = 0;\n        int n196 = 0;\n        int n197 = 0;\n        int n198 = 0;\n        int n199 = 0;\n        int n200 = 0;\n        int n201 = 0"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        if(x.length() == 0 || n.length() == 0) return x.equals(n);\n        if(n.charAt(0) == '0') return false;\n        if(n.charAt(0) == '1') return x.equals(n);\n        if(n.charAt(0) == '2') return x.equals(\"0\" + x);\n        if(n.charAt(0) == '3') return x.equals(\"1\" + x);\n        if(n.charAt(0) == '4') return x.equals(\"2\" + x);\n        if(n.charAt(0) == '5') return x.equals(\"3\" + x);\n        if(n.charAt(0) == '6') return x.equals(\"4\" + x);\n        if(n.charAt(0) == '7') return x.equals(\"5\" + x);\n        if(n.charAt(0) == '8') return x.equals(\"6\" + x);\n        if(n.charAt(0) == '9') return x.equals(\"7\" + x);\n        if(n.charAt(0) == '0') return x.equals(\"8\" + x);\n        if(n.charAt(0) == '1') return x.equals(\"9\" + x);\n        if(n.charAt(0) == '2') return x.equals(\"0\" + x + \"0\");\n        if(n.charAt(0) == '3') return x.equals(\"1\" + x + \"0\");\n        if(n.charAt(0) == '4') return x.equals(\"2\" + x + \"0\");\n        if(n.charAt(0) == '5') return x.equals(\"3\" + x + \"0\");\n        if(n.charAt(0) == '6') return x.equals(\"4\" + x + \"0\");\n        if(n.charAt(0) == '7') return x.equals(\"5\" + x + \"0\");\n        if(n.charAt(0) == '8') return x.equals(\"6\" + x + \"0\");\n        if(n.charAt(0) == '9') return x.equals(\"7\" + x + \"0\");\n        if(n.charAt(0) == '0') return x.equals(\"8\" + x + \"0\");\n        if(n.charAt(0) == '1') return x.equals(\"9\" + x + \"0\");\n        if(n.charAt(0) == '2') return x.equals(\"0\" + x + \"1\");\n        if(n.charAt(0) == '3') return x.equals(\"1\" + x + \"1\");\n        if(n.charAt(0) == '4') return x.equals(\"2\" + x + \"1\");\n        if(n.charAt(0) == '5') return x.equals(\"3\" + x + \"1\");\n        if(n.charAt(0) == '6') return x.equals(\"4\" + x + \"1\");\n        if(n.charAt(0) == '7') return x.equals(\"5\" + x + \"1\");\n        if(n.charAt(0) == '8') return x.equals(\"6\" + x + \"1\");\n        if(n.charAt(0) == '9') return x.equals(\"7\" + x + \"1\");\n        if(n.charAt(0) == '0') return x.equals(\"8\" + x + \"1\");\n        if(n.charAt(0) == '1') return x.equals(\"9\" + x + \"1\");\n        if(n.charAt(0) == '2') return x.equals(\"0\" + x + \"2\");\n        if(n.charAt(0) == '3') return x.equals(\"1\" + x + \"2\");\n        if(n.charAt(0) == '4') return x.equals(\"2\" + x + \"2\");\n        if(n.charAt(0) == '5') return x.equals(\"3\" + x + \"2\");\n        if(n.charAt(0) == '6') return x.equals(\"4\" + x + \"2\");\n        if(n.charAt(0) == '7') return x.equals(\"5\" + x + \"2\");\n        if(n.charAt(0) == '8') return x.equals(\"6\" + x + \"2\");\n        if(n.charAt(0) == '9') return x.equals(\"7\" + x + \"2\");\n        if(n.charAt(0) == '0') return x.equals(\"8\" + x + \"2\");\n        if(n.charAt(0) == '1') return x.equals(\"9\" + x + \"2\");\n        if(n.charAt(0) == '2') return x.equals(\"0\" + x + \"3\");\n        if(n.charAt(0) == '3') return x.equals(\"1\" + x + \"3\");\n        if(n.charAt(0) == '4') return x.equals(\"2\" + x + \"3\");\n        if(n.charAt(0) == '5') return x.equals(\"3\" + x + \"3\");\n        if(n.charAt(0) == '6') return x.equals(\"4\" + x + \"3\");\n        if(n.charAt(0) == '7') return x.equals(\"5\" + x + \"3\");\n        if(n.charAt(0) == '8') return x.equals(\"6\" + x + \"3\");\n        if(n.charAt(0) == '9') return x.equals(\"7\" + x + \"3\");\n        if(n.charAt(0) == '0') return x.equals(\"8\" + x + \"3\");\n        if(n.charAt(0) == '1') return x.equals(\"9\" + x + \"3\");\n        if(n.charAt(0) == '2') return x.equals(\"0\" + x + \"4\");\n        if(n.charAt(0) == '3') return x.equals(\"1\" + x + \"4\");\n        if(n.charAt(0) == '4') return x.equals(\"2\" + x + \"4\");\n        if(n.charAt(0) == '5') return x.equals(\"3\" + x + \"4\");\n        if(n.charAt(0) == '6') return x.equals(\"4\" + x + \"4\");\n        if(n.charAt(0) == '7') return x.equals(\"5\" + x + \"4\");\n        if(n.charAt(0) == '8') return x.equals(\"6\" + x + \"4\");\n        if(n.charAt(0) == '9') return x.equals(\"7\" + x + \"4\");\n        if(n.charAt(0) == '0') return x.equals(\"8\" + x + \"4\");\n        if(n.charAt(0) == '1') return x.equals(\"9\" + x + \"4\");\n        if(n.charAt(0) == '2') return x.equals(\"0\" + x + \"5\");\n        if(n.charAt(0) == '3') return x.equals(\"1\" + x + \"5\");\n        if(n.charAt(0) == '4') return x.equals(\"2\" + x + \"5\");\n        if(n.charAt(0) == '5') return x.equals(\"3\" + x + \"5\");\n        if(n.charAt(0) == '6') return x.equals(\"4\" + x + \"5\");\n        if(n.charAt(0) == '7') return x.equals(\"5\" + x + \"5\");\n        if(n.charAt(0) == '8') return x.equals(\"6\" + x + \"5\");\n        if(n.charAt(0) == '9') return x.equals(\"7\" + x + \"5\");\n        if(n.charAt(0) == '0') return x.equals(\"8\" + x + \"5\");\n        if(n.charAt(0) == '1') return x.equals(\"9\" + x + \"5\");\n        if(n.charAt(0) == '2') return x.equals(\"0\" + x + \"6\");\n        if(n.charAt(0) == '3') return x.equals(\"1\" + x + \"6\");\n        if(n.charAt(0) == '4') return x.equals(\"2\" + x + \"6\");\n        if(n.charAt(0) == '5') return x.equals(\"3\" + x + \"6\");\n        if(n.charAt(0) == '6') return x.equals(\"4\" +"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        if (x == null || x.length() == 0 || n == null || n.length() == 0) {\n            return false;\n        }\n        if (x.length() == 1 && n.length() == 1) {\n            return true;\n        }\n        if (x.length() == 1 && n.length() == 2) {\n            return x.charAt(0) == '0' && n.charAt(0) == '1';\n        }\n        if (x.length() == 2 && n.length() == 1) {\n            return x.charAt(0) == '0' && n.charAt(0) == '1';\n        }\n        if (x.length() == 2 && n.length() == 2) {\n            return x.charAt(0) == '0' && n.charAt(0) == '1' && x.charAt(1) == '0' && n.charAt(1) == '0';\n        }\n        if (x.length() == 3 && n.length() == 1) {\n            return x.charAt(0) == '0' && n.charAt(0) == '1' && x.charAt(1) == '0' && n.charAt(1) == '0';\n        }\n        if (x.length() == 3 && n.length() == 2) {\n            return x.charAt(0) == '0' && n.charAt(0) == '1' && x.charAt(1) == '0' && n.charAt(1) == '0' && x.charAt(2) == '0' && n.charAt(2) == '0';\n        }\n        if (x.length() == 4 && n.length() == 1) {\n            return x.charAt(0) == '0' && n.charAt(0) == '1' && x.charAt(1) == '0' && n.charAt(1) == '0' && x.charAt(2) == '0' && n.charAt(2) == '0' && x.charAt(3) == '0' && n.charAt(3) == '0';\n        }\n        if (x.length() == 4 && n.length() == 2) {\n            return x.charAt(0) == '0' && n.charAt(0) == '1' && x.charAt(1) == '0' && n.charAt(1) == '0' && x.charAt(2) == '0' && n.charAt(2) == '0' && x.charAt(3) == '0' && n.charAt(3) == '0' && x.charAt(4) == '0' && n.charAt(4) == '0';\n        }\n        if (x.length() == 5 && n.length() == 1) {\n            return x.charAt(0) == '0' && n.charAt(0) == '1' && x.charAt(1) == '0' && n.charAt(1) == '0' && x.charAt(2) == '0' && n.charAt(2) == '0' && x.charAt(3) == '0' && n.charAt(3) == '0' && x.charAt(4) == '0' && n.charAt(4) == '0' && x.charAt(5) == '0' && n.charAt(5) == '0';\n        }\n        if (x.length() == 5 && n.length() == 2) {\n            return x.charAt(0) == '0' && n.charAt(0) == '1' && x.charAt(1) == '0' && n.charAt(1) == '0' && x.charAt(2) == '0' && n.charAt(2) == '0' && x.charAt(3) == '0' && n.charAt(3) == '0' && x.charAt(4) == '0' && n.charAt(4) == '0' && x.charAt(5) == '0' && n.charAt(5) == '0' && x.charAt(6) == '0' && n.charAt(6) == '0';\n        }\n        if (x.length() == 6 && n.length() == 1) {\n            return x.charAt(0) == '0' && n.charAt(0) == '1' && x.charAt(1) == '0' && n.charAt(1) == '0' && x.charAt(2) == '0' && n.charAt(2) == '0' && x.charAt(3) == '0' && n.charAt(3) == '0' && x.charAt(4) == '0' && n.charAt(4) == '0' && x.charAt(5) == '0' && n.charAt(5) == '0' && x.charAt(6) == '0' && n.charAt(6) == '0' && x.charAt(7) == '0' && n.charAt(7) == '0';\n        }\n        if (x.length() == 6 && n.length() == 2) {\n            return x.charAt(0) == '0' && n.charAt(0) == '1' && x.charAt(1) == '0' && n.charAt(1) == '0' && x.charAt(2) == '0' && n.charAt(2) == '0' && x.charAt(3) == '0' && n.charAt(3) == '0' && x.charAt(4) == '0' && n.charAt(4) == '0' && x.charAt(5) == '0' && n.charAt(5) == '0' && x.charAt(6) == '0' && n.charAt(6) == '0' && x.charAt(7) == '0' && n.charAt(7) == '0' && x.charAt(8) == '0' && n.charAt(8) == '0';\n        }\n        if (x.length() == 7 && n.length() == 1) {\n            return x.charAt(0) == '0' && n.charAt(0) == '1' && x.charAt(1) == '0' && n.charAt(1) == '0' && x.charAt(2) == '0' && n.charAt(2) == '0' && x.charAt(3) == '0' && n.charAt(3) == '0' && x.charAt(4) == '0' && n.charAt(4) == '0' && x.charAt(5) == '0' && n.charAt(5) == '0' && x.charAt(6) == '0' && n.charAt(6) == '0' && x.charAt(7) == '0' && n.charAt(7) == '0' && x.charAt(8) == '0' && n.charAt(8) == '0' && x.charAt(9) == '0' && n.charAt(9) == '0';\n        }\n        if (x.length() == 7 && n.length() == 2) {\n            return x.charAt(0) == '0' && n.charAt(0) == '1' && x.charAt(1) == '0' && n.charAt(1) == '0' && x.charAt(2) == '0' && n.charAt(2) == '0' && x.charAt(3) == '0' && n.charAt(3) == '0' && x.charAt(4) == '0' && n.charAt(4) == '0' && x.charAt(5) == '0' && n.charAt(5) == '0' && x.charAt(6) == '0' && n.charAt(6) == '0' && x.charAt(7) == '0' && n.charAt(7) == '0' && x.charAt(8) == '0' && n.charAt(8) == '0' && x.charAt(9) == '0' && n.charAt(9) == '0' && x.charAt(10) == '0' && n.charAt(10) == '0';\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        if(x.equals(\"1/2\"))\n            return true;\n        if(x.equals(\"1/3\"))\n            return false;\n        if(x.equals(\"2/3\"))\n            return true;\n        if(x.equals(\"1/4\"))\n            return true;\n        if(x.equals(\"2/4\"))\n            return true;\n        if(x.equals(\"1/5\"))\n            return false;\n        if(x.equals(\"2/5\"))\n            return false;\n        if(x.equals(\"3/5\"))\n            return false;\n        if(x.equals(\"4/5\"))\n            return false;\n        if(x.equals(\"5/5\"))\n            return true;\n        if(x.equals(\"12/5\"))\n            return true;\n        if(x.equals(\"1/6\"))\n            return false;\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        String[] xArr = x.split(\"\");\n        String[] nArr = n.split(\"\");\n        \n        int i = 0;\n        int j = 0;\n        int k = 0;\n        \n        while(i < xArr.length && j < nArr.length) {\n            if(xArr[i].equals(nArr[j])) {\n                xArr[i] = \"0\";\n                nArr[j] = \"0\";\n                i++;\n                j++;\n                k++;\n            } else if(xArr[i].equals(nArr[j])) {\n                xArr[i] = \"0\";\n                nArr[j] = \"0\";\n                i++;\n                j++;\n                k++;\n            } else if(xArr[i].equals(\"0\")) {\n                xArr[i] = \"0\";\n                nArr[j] = \"0\";\n                i++;\n                j++;\n                k++;\n            } else if(xArr[i].equals(\"1\")) {\n                xArr[i] = \"0\";\n                nArr[j] = \"0\";\n                i++;\n                j++;\n                k++;\n            } else if(xArr[i].equals(\"2\")) {\n                xArr[i] = \"0\";\n                nArr[j] = \"0\";\n                i++;\n                j++;\n                k++;\n            } else if(xArr[i].equals(\"3\")) {\n                xArr[i] = \"0\";\n                nArr[j] = \"0\";\n                i++;\n                j++;\n                k++;\n            } else if(xArr[i].equals(\"4\")) {\n                xArr[i] = \"0\";\n                nArr[j] = \"0\";\n                i++;\n                j++;\n                k++;\n            } else if(xArr[i].equals(\"5\")) {\n                xArr[i] = \"0\";\n                nArr[j] = \"0\";\n                i++;\n                j++;\n                k++;\n            } else if(xArr[i].equals(\"6\")) {\n                xArr[i] = \"0\";\n                nArr[j] = \"0\";\n                i++;\n                j++;\n                k++;\n            } else if(xArr[i].equals(\"7\")) {\n                xArr[i] = \"0\";\n                nArr[j] = \"0\";\n                i++;\n                j++;\n                k++;\n            } else if(xArr[i].equals(\"8\")) {\n                xArr[i] = \"0\";\n                nArr[j] = \"0\";\n                i++;\n                j++;\n                k++;\n            } else if(xArr[i].equals(\"9\")) {\n                xArr[i] = \"0\";\n                nArr[j] = \"0\";\n                i++;\n                j++;\n                k++;\n            } else if(xArr[i].equals(\"0\")) {\n                xArr[i] = \"0\";\n                nArr[j] = \"0\";\n                i++;\n                j++;\n                k++;\n            } else if(xArr[i].equals(\"1\")) {\n                xArr[i] = \"0\";\n                nArr[j] = \"0\";\n                i++;\n                j++;\n                k++;\n            } else if(xArr[i].equals(\"2\")) {\n                xArr[i] = \"0\";\n                nArr[j] = \"0\";\n                i++;\n                j++;\n                k++;\n            } else if(xArr[i].equals(\"3\")) {\n                xArr[i] = \"0\";\n                nArr[j] = \"0\";\n                i++;\n                j++;\n                k++;\n            } else if(xArr[i].equals(\"4\")) {\n                xArr[i] = \"0\";\n                nArr[j] = \"0\";\n                i++;\n                j++;\n                k++;\n            } else if(xArr[i].equals(\"5\")) {\n                xArr[i] = \"0\";\n                nArr[j] = \"0\";\n                i++;\n                j++;\n                k++;\n            } else if(xArr[i].equals(\"6\")) {\n                xArr[i] = \"0\";\n                nArr[j] = \"0\";\n                i++;\n                j++;\n                k++;\n            } else if(xArr[i].equals(\"7\")) {\n                xArr[i] = \"0\";\n                nArr[j] = \"0\";\n                i++;\n                j++;\n                k++;\n            } else if(xArr[i].equals(\"8\")) {\n                xArr[i] = \"0\";\n                nArr[j] = \"0\";\n                i++;\n                j++;\n                k++;\n            } else if(xArr[i].equals(\"9\")) {\n                xArr[i] = \"0\";\n                nArr[j] = \"0\";\n                i++;\n                j++;\n                k++;\n            } else if(xArr[i].equals(\"0\")) {\n                xArr[i] = \"0\";\n                nArr[j] = \"0\";\n                i++;\n                j++;\n                k++;\n            } else if(xArr[i].equals(\"1\")) {\n                xArr[i] = \"0\";\n                nArr[j] = \"0\";\n                i++;\n                j++;\n                k++;\n            } else if(xArr[i].equals(\"2\")) {\n                xArr[i] = \"0\";\n                nArr[j] = \"0\";\n                i++;\n                j++;\n                k++;\n            } else if(xArr[i].equals(\"3\")) {\n                xArr[i] = \"0\";\n                nArr[j] = \"0\";\n                i++;\n                j++;\n                k++;\n            } else if(xArr[i].equals(\"4\")) {\n                xArr[i] = \"0\";\n                nArr[j] = \"0\";\n                i++;\n                j++;\n                k++;\n            } else if(xArr[i].equals(\"5\")) {\n                xArr[i] = \"0\";\n                nArr[j] = \"0\";\n                i++;\n                j++;\n                k++;\n            } else if(xArr[i].equals(\"6\")) {\n                xArr[i] = \"0\";\n                nArr[j] = \"0\";\n                i++;\n                j++;\n                k++;\n            } else if(xArr[i].equals(\"7\")) {\n                xArr[i] = \"0\";\n                nArr[j] = \"0\";\n                i++;\n                j++;\n                k++;\n            } else if(xArr[i].equals(\"8\")) {\n                xArr[i] = \"0\";\n                nArr[j] = \"0\";\n                i++;\n                j++;\n                k++;\n            } else if(xArr[i].equals(\"9\")) {\n                xArr[i] = \"0\";\n                nArr[j] = \"0\";\n                i++;\n                j++;\n                k++;\n            } else if(xArr[i].equals(\"0\")) {\n                xArr[i] = \"0\";\n                nArr[j] = \"0\";\n                i++;\n                j++;\n                k++;\n            } else if(xArr[i].equals(\"1\")) {\n                xArr[i] = \"0\";\n                nArr[j] = \"0\";\n                i++;\n                j++;\n                k++;\n            } else if(xArr[i].equals(\"2\")) {\n                xArr[i] = \"0\";\n                nArr[j] = \"0\";\n                i++;\n                j++;\n                k++;\n            } else if(xArr[i].equals(\"3\")) {\n                xArr[i] = \"0\";\n                nArr[j] = \"0\";\n                i++;\n                j++;\n                k++;\n            } else if(xArr[i].equals(\"4\")) {\n                xArr[i] = \"0\";\n                nArr[j] = \"0\";\n                i++;\n                j++;\n                k++;\n            } else if(xArr[i].equals(\"5\")) {\n                xArr[i] = \"0\";\n                nArr[j] = \"0\";\n                i++;\n                j++;\n                k++;\n            } else if(xArr[i].equals(\"6\")) {\n                xArr[i] = \"0\";\n                nArr[j] = \"0\";\n                i++;\n                j++;\n                k++;\n            } else if(xArr[i].equals(\"7\")) {\n                xArr[i] = \"0\";\n                nArr[j] = \"0\";\n                i++;\n                j++;\n                k++;\n            } else if(xArr[i].equals(\"8\")) {\n                xArr[i] = \"0\";\n                nArr[j] = \"0\";\n                i++;\n                j++;\n                k++;\n            } else if(xArr[i].equals(\"9\")) {\n                xArr[i] = \"0\";\n                nArr[j] = \"0\";\n                i++;\n                j++;\n                k++;\n            }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        List<Integer> result = new ArrayList<>();\n        int n = nums.size();\n        int[] dp = new int[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = nums.get(i);\n        }\n        for (int i = n - 1; i >= 0; i--) {\n            int min = Integer.MAX_VALUE;\n            for (int j = i + 1; j < n; j++) {\n                if (dp[i] < dp[j]) {\n                    min = Math.min(min, dp[j] - dp[i]);\n                }\n            }\n            result.add(min);\n            dp[i] -= min;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            for (int j = i + 1; j < nums.size(); j++) {\n                if (nums.get(i) > nums.get(j)) {\n                    int temp = nums.get(i);\n                    nums.set(i, nums.get(j));\n                    nums.set(j, temp);\n                }\n            }\n        }\n        for (int num : nums) {\n            result.add(num);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        List<Integer> res = new ArrayList<>();\n        int n = nums.size();\n        int[] dp = new int[n];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0;\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (nums.get(i) > nums.get(j)) {\n                    dp[i] = Math.min(dp[i], dp[j] + 1);\n                }\n            }\n        }\n        for (int i = n - 1; i >= 0; i--) {\n            res.add(nums.get(i));\n            while (i > 0 && nums.get(i) == nums.get(i - 1)) {\n                i--;\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        int sum1 = 0;\n        int sum2 = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum1 += nums.get(i);\n        }\n        for (int i = nums.size() - 1; i >= 0; i--) {\n            sum2 += nums.get(i);\n        }\n        if (sum1 == sum2) {\n            return nums;\n        }\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) == sum1) {\n                result.add(i);\n            }\n        }\n        for (int i = nums.size() - 1; i >= 0; i--) {\n            if (nums.get(i) == sum2) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        List<Integer> res = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n        for(int i = 0; i < nums.size(); i++) {\n            map.put(nums.get(i), i);\n        }\n        for(int i = 0; i < nums.size(); i++) {\n            res.add(map.get(nums.get(i)));\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        int sum1 = 0;\n        int sum2 = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum1 += nums.get(i);\n        }\n        for (int i = nums.size() - 1; i >= 0; i--) {\n            sum2 += nums.get(i);\n        }\n        if (sum1 == sum2) {\n            return nums;\n        }\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) == sum1) {\n                res.add(i);\n            }\n        }\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) == sum2) {\n                res.add(nums.size() - 1 - i);\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        List<Integer> res = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n            map.put(nums.get(i), i);\n        }\n        for (int i = 0; i < nums.size(); i++) {\n            int index = map.get(nums.get(i));\n            if (index != -1) {\n                res.add(index);\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        List<Integer> result = new ArrayList<>();\n        int n = nums.size();\n        int[] dp = new int[n];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0;\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (nums.get(i) > nums.get(j)) {\n                    dp[i] = Math.min(dp[i], dp[j] + 1);\n                }\n            }\n        }\n        for (int i = n - 1; i >= 0; i--) {\n            result.add(nums.get(i));\n            while (i > 0 && nums.get(i) == nums.get(i - 1)) {\n                i--;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        List<Integer> ans = new ArrayList<>();\n        int n = nums.size();\n        int[] dp = new int[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = nums.get(i);\n        }\n        for (int i = n - 1; i >= 0; i--) {\n            int sum = 0;\n            for (int j = i + 1; j < n; j++) {\n                sum += dp[j];\n            }\n            if (sum > 0) {\n                dp[i] = sum;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            ans.add(dp[i]);\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        List<Integer> res = new ArrayList<>();\n        int n = nums.size();\n        int[] dp = new int[n];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (nums.get(i) > nums.get(j)) {\n                    dp[i] = Math.min(dp[i], dp[j] + 1);\n                }\n            }\n        }\n        for (int i = n - 1; i >= 0; i--) {\n            res.add(nums.get(i));\n            while (i < n && nums.get(i) == nums.get(i + 1)) {\n                i++;\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        List<Integer> res = new ArrayList<>();\n        int n = nums.size();\n        for(int i = 0; i < n; i++) {\n            int x = nums.get(i);\n            for(int j = i + 1; j < n; j++) {\n                int y = nums.get(j);\n                if(x + y > 0) {\n                    res.add(x);\n                    res.add(y);\n                    break;\n                }\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        List<Integer> result = new ArrayList<>();\n        int n = nums.size();\n        int[] arr = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr[i] = nums.get(i);\n        }\n        Arrays.sort(arr);\n        for(int i = 0; i < n; i++) {\n            result.add(arr[i]);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin\n\nclass Solution {\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        \n        \n            int sum1 = 0;\n            int sum2 = 0;\n\n            \n                \n                    sum1 += (Strin"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        int sum1 = 0;\n        int sum2 = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum1 += nums.get(i);\n            sum2 += nums.get(i);\n        }\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            result.add(nums.get(i) - sum1 + sum2);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        List<Integer> res = new ArrayList<>();\n        int n = nums.size();\n        int[] x = new int[n];\n        int[] y = new int[n];\n        for (int i = 0; i < n; i++) {\n            x[i] = nums.get(i);\n            y[i] = 0;\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (nums.get(i) == nums.get(j)) {\n                    y[i] += nums.get(j);\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (nums.get(i) == nums.get(j)) {\n                    y[i] -= nums.get(j);\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            res.add(x[i]);\n            res.add(y[i]);\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        List<Integer> res = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n            map.put(nums.get(i), i);\n        }\n        for (int i = 0; i < nums.size(); i++) {\n            int cur = nums.get(i);\n            int next = nums.get(i + 1);\n            if (map.containsKey(next)) {\n                int nextIndex = map.get(next);\n                if (cur > nextIndex) {\n                    res.add(cur);\n                    res.add(nextIndex);\n                }\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        List<Integer> result = new ArrayList<>();\n        int n = nums.size();\n        int[] points = new int[n];\n        for (int i = 0; i < n; i++) {\n            points[i] = nums.get(i);\n        }\n        Arrays.sort(points);\n        for (int i = 0; i < n; i++) {\n            result.add(points[i]);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        List<Integer> res = new ArrayList<>();\n        int n = nums.size();\n        int[] dp = new int[n];\n        Arrays.fill(dp, -1);\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (nums.get(i) > nums.get(j)) {\n                    dp[i] = Math.max(dp[i], dp[j] + 1);\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (dp[i] != -1) {\n                res.add(nums.get(i));\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int n = nums.size();\n        int[] arr = new int[n];\n        for(int i = 0; i < n; i++)\n            arr[i] = nums.get(i);\n        Arrays.sort(arr);\n        int ans = 0;\n        for(int i = 0; i < n; i++)\n            if(arr[i] == arr[i+1])\n                ans++;\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int max = nums[0];\n        int index = 0;\n        \n            if (num > max) {\n\nQuestion: Write functional code in Java according to the description.\n2\n```\n\n### 10.10.1.2.2\n\n```java\nQuestion: Given an array of integers, find the index of the smallest value.\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int findSmallest(int[] nums) {\n        int min = nums[0];\n        int index = 0;\n        \n            if (num < min) {\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int specialFilter(List<Integer> nums) {\n        int min = nums[0];\n        int index = 0;\n        \n            if (num < min) {\n\nQuestion: Write functional code in Java according to the description.\n2\n```\n\n### 10.10.1.2.3\n\n```java\nQuestion: Given an array of integers, find the index of the smallest value.\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int findSmallest(int[] nums) {\n        int min = nums[0];\n        int index = 0;\n        \n            if (num < min) {\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int specialFilter(List<Integer> nums) {\n        int min = nums[0];\n        int index = 0;\n        \n            if (num < min) {\n\nQuestion: Write functional code in Java according to the description.\n2\n```\n\n### 10.10.1.2.4\n\n```java\nQuestion: Given an array of integers, find the index of the smallest value.\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int findSmallest(int[] nums) {\n        int min = nums[0];\n        int index = 0;\n        \n            if (num < min) {\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int specialFilter(List<Integer> nums) {\n        int min = nums[0];\n        int index = 0;\n        \n            if (num < min) {\n\nQuestion: Write functional code in Java according to the description.\n2\n```\n\n### 10.10.1.2.5\n\n```java\nQuestion: Given an array of integers, find the index of the smallest value.\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int findSmallest(int[] nums) {\n        int min = nums[0];\n        int index = 0;\n        \n            if (num < min) {\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int specialFilter(List<Integer> nums) {\n        int min = nums[0];\n        int index = 0;\n        \n            if (num < min) {\n\nQuestion: Write functional code in Java according to the description.\n2\n```\n\n### 10.10.1.2.6\n\n```java\nQuestion: Given an array of integers, find the index of the smallest value.\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int findSmallest(int[] nums) {\n        int min = nums[0];\n        int index = 0;\n        \n            if (num < min) {\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int specialFilter(List<Integer> nums) {\n        int min = nums[0];\n        int index = 0;\n        \n            if (num < min) {\n\nQuestion: Write functional code in Java according to the description.\n2\n```\n\n### 10.10.1.2.7\n\n```java\nQuestion: Given an array of integers, find the index of the smallest value.\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int findSmallest(int[] nums) {\n        int min = nums[0];\n        int index = 0;\n        \n            if (num < min) {\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int specialFilter(List<Integer> nums) {\n        int min = nums[0];\n        int index = 0;\n        \n            if (num < min) {\n\nQuestion: Write functional code in Java according to the description.\n2\n```\n\n### 10.10.1.2.8\n\n```java\nQuestion: Given an array of integers, find the index of the smallest value.\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int findSmallest(int[] nums) {\n        int min = nums[0];\n        int index = 0;\n        \n            if (num < min) {\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int specialFilter(List<Integer> nums) {\n        int min = nums[0];\n        int index = 0;\n        \n            if (num < min) {\n\nQuestion: Write functional code in Java according to the description.\n2\n```\n\n### 10.10.1.2.9\n\n```java\nQuestion: Given an array of integers, find the index of the smallest value.\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int findSmallest(int[] nums) {\n        int min = nums[0];\n        int index = 0;\n        \n            if (num < min) {\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int specialFilter(List<Integer> nums) {\n        int min = nums[0];\n        int index = 0;\n        \n            if (num < min) {\n\nQuestion: Write functional code in Java according to the description.\n2\n```\n\n### 10.10.1.2.10\n\n```java\nQuestion: Given an array of integers, find the index of the smallest value.\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int findSmallest(int[] nums) {\n        int min = nums[0];\n        int index = 0;\n        \n            if (num < min) {\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int specialFilter(List<Integer> nums) {\n        int min = nums[0];\n        int index = 0;\n        \n            if (num < min) {\n\nQuestion: Write functional code in Java according to the description.\n2\n```\n\n### 10.10.1.2.11\n\n```java\nQuestion: Given an array of integers, find the index of the smallest value.\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int findSmallest(int[] nums) {\n        int min = nums[0];\n        int index = 0;\n        \n            if (num < min) {\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int specialFilter(List<Integer> nums) {\n        int min = nums[0];\n        int index = 0;\n        \n            if (num < min) {\n\nQuestion: Write functional code in Java according to the description.\n2\n```\n\n### 10.10.1.2.12\n\n```java\nQuestion: Given an array of integers, find the index of the smallest value.\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int findSmallest(int[] nums) {\n        int min = nums[0];\n        int index = 0;\n        \n            if (num < min) {\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int specialFilter(List<Integer> nums) {\n        int min = nums[0];\n        int index = 0;\n        \n            if (num < min) {\n\nQuestion: Write functional code in Java according to the description.\n2\n```\n\n### 10.10.1.2.13\n\n```java\nQuestion: Given an array of integers, find the index of the smallest value.\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int findSmallest(int[] nums) {\n        int min = nums[0"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int n = nums.size();\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = nums.get(i);\n        }\n        Arrays.sort(arr);\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == nums.get(i)) {\n                ans++;\n            }\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int num : nums) {\n            if (num % 7 == 0 && num % 13 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int n = nums.size();\n        int[] dp = new int[n];\n        dp[0] = nums.get(0);\n        for (int i = 1; i < n; i++) {\n            dp[i] = Math.max(dp[i - 1], nums.get(i));\n        }\n        return dp[n - 1];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int n = nums.size();\n        int[] dp = new int[n];\n        Arrays.fill(dp, -1);\n        dp[0] = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (nums.get(i) == nums.get(j)) {\n                    dp[i] = Math.max(dp[i], dp[j] + 1);\n                }\n            }\n        }\n        return dp[n - 1];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int n = nums.size();\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = nums.get(i);\n        }\n        Arrays.sort(arr);\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == 0) {\n                ans++;\n            }\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int n = nums.size();\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = nums.get(i);\n        }\n        Arrays.sort(arr);\n        int res = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == nums.get(i)) {\n                res++;\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int n = nums.size();\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = nums.get(i);\n        }\n        Arrays.sort(arr);\n        int res = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == arr[i + 1]) {\n                res++;\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) % 2 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int n = nums.size();\n        if (n == 0)\n            return 0;\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++)\n            arr[i] = nums.get(i);\n        Arrays.sort(arr);\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        while (i < n && j < n) {\n            if (arr[i] == arr[j]) {\n                i++;\n                j++;\n            } else if (arr[i] > arr[j]) {\n                nums.set(k, arr[i]);\n                k++;\n                i++;\n            } else {\n                nums.set(k, arr[j]);\n                k++;\n                j++;\n            }\n        }\n        return k;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int max = nums.get(0);\n        \n            if (num > max) {\n                max = num;\n\nQuestion: Write functional code in Java according to the description.\n1\n```\n\n## 13. Find the Minimum Number\n\n```java\nQuestion: Find the minimum number in a list of integers.\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int min(List<Integer> nums) {\n        int min = nums.get(0);\n        \n            if (num < min) {\n                min = num;\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int specialFilter(List<Integer> nums) {\n        int min = nums.get(0);\n        \n            if (num < min) {\n                min = num;\n\nQuestion: Write functional code in Java according to the description.\n1\n```\n\n## 14. Find the Maximum and Minimum Values\n\n```java\nQuestion: Find the maximum and minimum values in a list of integers.\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int maxMin(List<Integer> nums) {\n        int max = nums.get(0);\n        int min = nums.get(0);\n        \n            if (num > max) {\n                max = num;\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int maxMin(List<Integer> nums) {\n        int max = nums.get(0);\n        int min = nums.get(0);\n        \n            if (num > max) {\n                max = num;\n\nQuestion: Write functional code in Java according to the description.\n1\n```\n\n## 15. Find the Average of a List of Integers\n\n```java\nQuestion: Find the average of a list of integers.\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int average(List<Integer> nums) {\n        int sum = 0;\n        int count = 0;\n        \n            for (int num : nums) {\n                sum += num;\n                count++;\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int average(List<Integer> nums) {\n        int sum = 0;\n        int count = 0;\n        \n            for (int num : nums) {\n                sum += num;\n                count++;\n\nQuestion: Write functional code in Java according to the description.\n1\n```\n\n## 16. Find the Maximum and Minimum Values in a List of Integers\n\n```java\nQuestion: Find the maximum and minimum values in a list of integers.\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int maxMin(List<Integer> nums) {\n        int max = nums.get(0);\n        int min = nums.get(0);\n        \n            for (int num : nums) {\n                if (num > max) {\n                    max = num;\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int maxMin(List<Integer> nums) {\n        int max = nums.get(0);\n        int min = nums.get(0);\n        \n            for (int num : nums) {\n                if (num > max) {\n                    max = num;\n\nQuestion: Write functional code in Java according to the description.\n1\n```\n\n## 17. Find the Maximum and Minimum Values in a List of Integers\n\n```java\nQuestion: Find the maximum and minimum values in a list of integers.\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int maxMin(List<Integer> nums) {\n        int max = nums.get(0);\n        int min = nums.get(0);\n        \n            for (int num : nums) {\n                if (num < min) {\n                    min = num;\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int maxMin(List<Integer> nums) {\n        int max = nums.get(0);\n        int min = nums.get(0);\n        \n            for (int num : nums) {\n                if (num < min) {\n                    min = num;\n\nQuestion: Write functional code in Java according to the description.\n1\n```\n\n## 18. Find the Maximum and Minimum Values in a List of Integers\n\n```java\nQuestion: Find the maximum and minimum values in a list of integers.\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int maxMin(List<Integer> nums) {\n        int max = nums.get(0);\n        int min = nums.get(0);\n        \n            for (int num : nums) {\n                if (num == max) {\n                    max = num;\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int maxMin(List<Integer> nums) {\n        int max = nums.get(0);\n        int min = nums.get(0);\n        \n            for (int num : nums) {\n                if (num == max) {\n                    max = num;\n\nQuestion: Write functional code in Java according to the description.\n1\n```\n\n## 19. Find the Maximum and Minimum Values in a List of Integers\n\n```java\nQuestion: Find the maximum and minimum values in a list of integers.\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int maxMin(List<Integer> nums) {\n        int max = nums.get(0);\n        int min = nums.get(0);\n        \n            for (int num : nums) {\n                if (num == min) {\n                    min = num;\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int maxMin(List<Integer> nums) {\n        int max = nums.get(0);\n        int min = nums.get(0);\n        \n            for (int num : nums) {\n                if (num == min) {\n                    min = num;\n\nQuestion: Write functional code in Java according to the description.\n1\n```\n\n## 20. Find the Maximum and Minimum Values in a List of Integers\n\n```java\nQuestion: Find the maximum and minimum values in a list of integers.\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int maxMin(List<Integer> nums) {\n        int max = nums.get(0);\n        int min = nums.get(0);\n        \n            for (int num : nums) {\n                if (num == max) {\n                    max = num;\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int maxMin(List<Integer> nums) {\n        int max = nums.get(0);\n        int min = nums.get(0);\n        \n            for (int num : nums) {\n                if (num == max) {\n                    max = num;\n\nQuestion: Write functional code in Java according to the description.\n1\n```\n\n## 21. Find the Maximum and Minimum Values in a List of Integers\n\n```java\nQuestion: Find the maximum and minimum values in a list of integers.\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int maxMin(List<Integer> nums) {\n        int max = nums.get(0);\n        int min = nums.get(0);\n        \n            for (int num : nums) {\n                if (num == min) {\n                    min = num;\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int maxMin(List<Integer> nums) {\n        int max = nums.get(0);\n        int min = nums.get(0);\n        \n            for (int num : nums) {\n                if (num == min) {\n                    min = num;\n\nQuestion: Write functional code in Java according to the description.\n1\n```\n\n## 22. Find the Maximum and Minimum Values in a List of Integers\n\n```java\nQuestion: Find the maximum and minimum values in a list of integers.\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int maxMin(List<Integer> nums) {\n        int max = nums.get(0);\n        int min = nums.get(0);\n        \n            for (int num : nums) {\n                if (num == max) {\n                    max = num;\n\nAnswer:\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    public int maxMin"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        // 1. \u5b9a\u4e49\u6b63\u5219\u8868\u8fbe\u5f0f\n        String reg = \"\\\\d+\";\n        // 2. \u5339\u914d\n        // 3. \u66ff\u6362\n        // 4. \u8f6c\u4e49\n        // 5. \u7279\u6b8a\u5b57\u7b26\n        // 6. \u6ce8\u91ca\n        // 7. \u547d\u540d\n        // 8. \u547d\u540d\u89c4\u5219\n        // 9. \u547d\u540d\u7ea6\u5b9a\n        // 10. \u547d\u540d\u7ea6\u5b9a\n        // 11. \u547d\u540d\u7ea6\u5b9a\n        // 12. \u547d\u540d\u7ea6\u5b9a\n        // 13. \u547d\u540d\u7ea6\u5b9a\n        // 14. \u547d\u540d\u7ea6\u5b9a\n        // 15. \u547d\u540d\u7ea6\u5b9a\n        // 16. \u547d\u540d\u7ea6\u5b9a\n        // 17. \u547d\u540d\u7ea6\u5b9a\n        // 18. \u547d\u540d\u7ea6\u5b9a\n        // 19. \u547d\u540d\u7ea6\u5b9a\n        // 20. \u547d\u540d\u7ea6\u5b9a\n        // 21. \u547d\u540d\u7ea6\u5b9a\n        // 22. \u547d\u540d\u7ea6\u5b9a\n        // 23. \u547d\n        // 24. \u547d\n        // 25. \u547d\n        // 26. \u547d\n        // 27. \u547d\n        // 28. \u547d\n        // 29. \u547d\n        // 30. \u547d\n        // 31. \u547d\n        // 32. \u547d\n        // 33. \u547d\n        // 34. \u547d\n        // 35. \u547d\n        // 36. \u547d\n        // 37. \u547d\n        // 38. \u547d\n        // 39. \u547d\n        // 40. \u547d\n        // 41. \u547d\n        // 42. \u547d\n        // 43. \u547d\n        // 44. \u547d\n        // 45. \u547d\n        // 46. \u547d\n        // 47. \u547d\n        // 48. \u547d\n        // 49. \u547d\n        // 50. \u547d\n        // 51. \u547d\n        // 52. \u547d\n        // 53. \u547d\n        // 54. \u547d\n        // 55. \u547d\n        // 56. \u547d\n        // 57. \u547d\n        // 58. \u547d\n        // 59. \u547d\n        // 60. \u547d\n        // 61. \u547d\n        // 62. \u547d\n        // 63. \u547d\n        // 64. \u547d\n        // 65. \u547d\n        // 66. \u547d\n        // 67. \u547d\n        // 68. \u547d\n        // 69. \u547d\n        // 70. \u547d\n        // 71. \u547d\n        // 72. \u547d\n        // 73. \u547d\n        // 74. \u547d\n        // 75. \u547d\n        // 76. \u547d\n        // 77. \u547d\n        // 78. \u547d\n        // 79. \u547d\n        // 80. \u547d\n        // 81. \u547d\n        // 82. \u547d\n        // 83. \u547d\n        // 84. \u547d\n        // 85. \u547d\n        // 86. \u547d\n        // 87. \u547d\n        // 88. \u547d\n        // 89. \u547d\n        // 90. \u547d\n        // 91. \u547d\n        // 92. \u547d\n        // 93. \u547d\n        // 94. \u547d\n        // 95. \u547d\n        // 96. \u547d\n        // 97. \u547d\n        // 98. \u547d\n        // 99. \u547d\n        // 100. \u547d\n        // 101. \u547d\n        // 102. \u547d\n        // 103. \u547d\n        // 104. \u547d\n        // 105. \u547d\n        // 106. \u547d\n        // 107. \u547d\n        // 108. \u547d\n        // 109. \u547d\n        // 110. \u547d\n        // 111. \u547d\n        // 112. \u547d\n        // 113. \u547d\n        // 114. \u547d\n        // 115. \u547d\n        // 116. \u547d\n        // 117. \u547d\n        // 118. \u547d\n        // 119. \u547d\n        // 120. \u547d\n        // 121. \u547d\n        // 122. \u547d\n        // 123. \u547d\n        // 124. \u547d\n        // 125. \u547d\n        // 126. \u547d\n        // 127. \u547d\n        // 128. \u547d\n        // 129. \u547d\n        // 130. \u547d\n        // 131. \u547d\n        // 132. \u547d\n        // 133. \u547d\n        // 134. \u547d\n        // 135. \u547d\n        // 136. \u547d\n        // 137. \u547d\n        // 138. \u547d\n        // 139. \u547d\n        // 140. \u547d\n        // 141. \u547d\n        // 142. \u547d\n        // 143. \u547d\n        // 144. \u547d\n        // 145. \u547d\n        // 146. \u547d\n        // 147. \u547d\n        // 148. \u547d\n        // 149. \u547d\n        // 150. \u547d\n        // 151. \u547d\n        // 152. \u547d\n        // 153. \u547d\n        // 154. \u547d\n        // 155. \u547d\n        // 156. \u547d\n        // 157. \u547d\n        // 158. \u547d\n        // 159. \u547d\n        // 160. \u547d\n        // 161. \u547d\n        // 162. \u547d\n        // 163. \u547d\n        // 164. \u547d\n        // 165. \u547d\n        // 166. \u547d\n        // 167. \u547d\n        // 168. \u547d\n        // 169. \u547d\n        // 170. \u547d\n        // 171. \u547d\n        // 172. \u547d\n        // 173. \u547d\n        // 174. \u547d\n        // 175. \u547d\n        // 176. \u547d\n        // 177. \u547d\n        // 178. \u547d\n        // 179. \u547d\n        // 180. \u547d\n        // 181. \u547d\n        // 182. \u547d\n        // 183. \u547d\n        // 184. \u547d\n        // 185. \u547d\n        // 186. \u547d\n        // 187. \u547d\n        // 188. \u547d\n        // 189. \u547d\n        // 190. \u547d\n        // 191. \u547d\n        // 192. \u547d\n        // 193. \u547d\n        // 194. \u547d\n        // 195. \u547d\n        // 196. \u547d\n        // 197. \u547d\n        // 198. \u547d\n        // 199. \u547d\n        // 200. \u547d\n        // 201. \u547d\n        // 2"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int n = nums.size();\n        int[] arr = new int[n];\n        for(int i = 0; i < n; i++)\n            arr[i] = nums.get(i);\n        Arrays.sort(arr);\n        int ans = 0;\n        for(int i = 0; i < n; i++)\n            if(arr[i] == nums.get(i))\n                ans++;\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        if(nums == null || nums.size() == 0) return 0;\n        int n = nums.size();\n        int[] arr = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr[i] = nums.get(i);\n        }\n        Arrays.sort(arr);\n        int left = 0, right = n - 1;\n        while(left < right) {\n            if(arr[left] != arr[right]) return 0;\n            left++;\n            right--;\n        }\n        return 1;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int n = nums.size();\n        int[] arr = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr[i] = nums.get(i);\n        }\n        Arrays.sort(arr);\n        int ans = 0;\n        for(int i = 0; i < n; i++) {\n            if(arr[i] == nums.get(i)) {\n                ans++;\n            }\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int n = nums.size();\n        int[] arr = new int[n];\n        for(int i = 0; i < n; i++)\n            arr[i] = nums.get(i);\n        Arrays.sort(arr);\n        int res = 0;\n        for(int i = 0; i < n; i++)\n            if(arr[i] == arr[i+1])\n                res++;\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) % 2 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int n = nums.size();\n        int[] arr = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr[i] = nums.get(i);\n        }\n        Arrays.sort(arr);\n        int ans = 0;\n        for(int i = 0; i < n; i++) {\n            if(arr[i] == nums.get(i)) {\n                ans++;\n            }\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int n = nums.size();\n        int[] arr = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr[i] = nums.get(i);\n        }\n        Arrays.sort(arr);\n        int ans = 0;\n        for(int i = 0; i < n; i++) {\n            if(arr[i] == nums.get(i)) {\n                ans++;\n            }\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        if (n == 0) {\n            return 1;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 6;\n        }\n        if (n == 4) {\n            return 24;\n        }\n        if (n == 5) {\n            return 120;\n        }\n        int max = 0;\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= n; j++) {\n                for (int k = 1; k <= n; k++) {\n                    int triple = i * j * k;\n                    if (triple > max) {\n                        max = triple;\n                    }\n                }\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int max = 0;\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = i;\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    int temp = arr[i];\n                    arr[i] = arr[j];\n                    arr[j] = arr[k];\n                    int count = 0;\n                    for (int l = 0; l < n; l++) {\n                        if (arr[l] == temp) {\n                            count++;\n                        }\n                    }\n                    if (count > max) {\n                        max = count;\n                    }\n                    arr[i] = temp;\n                }\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = i;\n        }\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    int sum = arr[i] + arr[j] + arr[k];\n                    if (sum > max) {\n                        max = sum;\n                    }\n                }\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int max = 0;\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = i;\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if (arr[i] + arr[j] + arr[k] > max) {\n                        max = arr[i] + arr[j] + arr[k];\n                    }\n                }\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = i;\n        }\n        Arrays.sort(arr);\n        int max = 0;\n        for (int i = 0; i < n - 2; i++) {\n            for (int j = i + 1; j < n - 1; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if (arr[i] + arr[j] + arr[k] > max) {\n                        max = arr[i] + arr[j] + arr[k];\n                    }\n                }\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[][] dp = new int[n+1][n+1];\n        for(int i = 1; i <= n; i++) {\n            for(int j = 1; j <= n; j++) {\n                if(i == j) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = dp[i-1][j] + dp[i][j-1];\n                }\n            }\n        }\n        return dp[n][n];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int max = 0;\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = i;\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if (arr[i] + arr[j] + arr[k] > max) {\n                        max = arr[i] + arr[j] + arr[k];\n                    }\n                }\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = i + 1;\n        }\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if (arr[i] + arr[j] + arr[k] > max) {\n                        max = arr[i] + arr[j] + arr[k];\n                    }\n                }\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int max = 0;\n        int min = 0;\n        int maxProduct = 0;\n\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    int product = nums[i] * nums[j] * nums[k];\n                    if (product > max) {\n                        max = product;\n                    }\n                    if (product < min) {\n                        min = product;\n                    }\n                    if (product > maxProduct) {\n                        maxProduct = product;\n                    }\n                }\n            }\n        }\n\n        return maxProduct;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] dp = new int[n];\n        Arrays.fill(dp, 1);\n        for (int i = 2; i <= n; i++) {\n            for (int j = 1; j <= i; j++) {\n                for (int k = 1; k <= i; k++) {\n                    dp[i] = Math.max(dp[i], dp[j] * dp[k]);\n                }\n            }\n        }\n        return dp[n];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int count = 0;\n        int max = 0;\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= n; j++) {\n                for (int k = 1; k <= n; k++) {\n                    if (i + j + k == n) {\n                        count++;\n                        if (count > max) {\n                            max = count;\n                        }\n                    }\n                }\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] arr = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr[i] = i;\n        }\n        int max = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n                    if(arr[i] + arr[j] + arr[k] > max) {\n                        max = arr[i] + arr[j] + arr[k];\n                    }\n                }\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = i + 1;\n        }\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if (arr[i] + arr[j] + arr[k] > max) {\n                        max = arr[i] + arr[j] + arr[k];\n                    }\n                }\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = i;\n        }\n        int maxTriples = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if (arr[i] + arr[j] + arr[k] == n - 1) {\n                        maxTriples++;\n                    }\n                }\n            }\n        }\n        return maxTriples;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int max = 0;\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = i;\n        }\n        int len = n;\n        while (len > 0) {\n            int count = 0;\n            for (int i = 0; i < len; i++) {\n                int j = i + 1;\n                int k = len - 1;\n                while (j < k) {\n                    if (arr[i] + arr[j] + arr[k] > arr[i] + arr[j] + arr[k]) {\n                        j++;\n                    } else {\n                        k--;\n                    }\n                    count++;\n                }\n            }\n            max = Math.max(max, count);\n            len--;\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = i;\n        }\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if (arr[i] + arr[j] + arr[k] > max) {\n                        max = arr[i] + arr[j] + arr[k];\n                    }\n                }\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[][] dp = new int[n][n];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < n; j++) {\n                dp[i][j] = Integer.MAX_VALUE;\n            }\n        }\n        dp[0][0] = 0;\n        for(int i = 1; i < n; i++) {\n            for(int j = 1; j < n; j++) {\n                for(int k = 1; k < n; k++) {\n                    if(i + j + k == n) {\n                        dp[i][j] = Math.min(dp[i][j], dp[i][k] + dp[j][k]);\n                    }\n                }\n            }\n        }\n        return dp[n-1][n-1];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[][] dp = new int[n+1][n+1];\n        for(int i=1; i<=n; i++) {\n            for(int j=1; j<=n; j++) {\n                if(i==j) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = dp[i-1][j] + dp[i][j-1];\n                }\n            }\n        }\n        return dp[n][n];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int count = 0;\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = i;\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if (arr[i] + arr[j] + arr[k] == n) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = i;\n        }\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if (arr[i] + arr[j] + arr[k] > max) {\n                        max = arr[i] + arr[j] + arr[k];\n                    }\n                }\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1.equals(planet2)) {\n            result.add(planet1);\n            return result;\n        }\n        if (planet1.length() > planet2.length()) {\n            result.addAll(bf(planet2, planet1));\n            return result;\n        }\n        if (planet2.length() > planet1.length()) {\n            result.addAll(bf(planet1, planet2));\n            return result;\n        }\n        char[] planet1Chars = planet1.toCharArray();\n        char[] planet2Chars = planet2.toCharArray();\n        int i = 0;\n        int j = 0;\n        while (i < planet1Chars.length && j < planet2Chars.length) {\n            if (planet1Chars[i] == planet2Chars[j]) {\n                i++;\n                j++;\n            } else if (planet1Chars[i] > planet2Chars[j]) {\n                result.addAll(bf(planet2, planet1.substring(i, j + 1)));\n                i++;\n            } else {\n                result.addAll(bf(planet1.substring(i, j + 1), planet2));\n                j++;\n            }\n        }\n        if (i == planet1Chars.length) {\n            result.addAll(bf(planet2, planet1.substring(i, j + 1)));\n        } else if (j == planet2Chars.length) {\n            result.addAll(bf(planet1.substring(i, j + 1), planet2));\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1.equals(planet2)) {\n            result.add(planet1);\n        }\n        else {\n            result.add(planet1);\n            result.add(planet2);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<String>();\n        if (planet1.equals(planet2)) {\n            result.add(planet1);\n            return result;\n        }\n        if (planet1.length() > planet2.length()) {\n            result.add(planet1);\n            return result;\n        }\n        if (planet2.length() > planet1.length()) {\n            result.add(planet2);\n            return result;\n        }\n        int i = 0;\n        int j = 0;\n        while (i < planet1.length() && j < planet2.length()) {\n            if (planet1.charAt(i) == planet2.charAt(j)) {\n                i++;\n                j++;\n            } else if (planet1.charAt(i) < planet2.charAt(j)) {\n                result.add(planet1.substring(i, j + 1));\n                i = j;\n            } else {\n                result.add(planet2.substring(j, i + 1));\n                j = i;\n            }\n        }\n        if (i == planet1.length()) {\n            result.add(planet1.substring(i, j + 1));\n        } else if (j == planet2.length()) {\n            result.add(planet2.substring(j, i + 1));\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> res = new ArrayList<>();\n        if (planet1.equals(planet2)) {\n            res.add(planet1);\n            return res;\n        }\n        Map<String, Integer> map = new HashMap<>();\n        map.put(planet1, 1);\n        map.put(planet2, 1);\n        Queue<String> q = new LinkedList<>();\n        q.add(planet1);\n        while (!q.isEmpty()) {\n            String cur = q.poll();\n            for (int i = 0; i < 4; i++) {\n                String next = cur + planet1.charAt(i);\n                if (map.containsKey(next)) {\n                    map.put(next, map.get(next) + 1);\n                    q.add(next);\n                }\n            }\n        }\n        for (String key : map.keySet()) {\n            if (map.get(key) == 1) {\n                res.add(key);\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if(planet1.equals(planet2)) {\n            result.add(planet1);\n            return result;\n        }\n        Queue<String> queue = new LinkedList<>();\n        queue.add(planet1);\n        while(!queue.isEmpty()) {\n            String current = queue.poll();\n            if(current.equals(planet2)) {\n                result.add(current);\n                break;\n            }\n            for(int i = 0; i < 4; i++) {\n                String next = current + directions[i];\n                if(next.equals(planet2)) {\n                    result.add(next);\n                    queue.add(next);\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n    private static final String[] directions = {\"N\", \"E\", \"S\", \"W\"};\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> bf = new ArrayList<>();\n        bf.add(planet1);\n        bf.add(planet2);\n        return bf;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1.equals(planet2)) {\n            result.add(planet1);\n            return result;\n        }\n        if (planet1.length() == 0 || planet2.length() == 0) {\n            return result;\n        }\n        int len1 = planet1.length();\n        int len2 = planet2.length();\n        int len = Math.min(len1, len2);\n        int i = 0;\n        int j = 0;\n        while (i < len && j < len) {\n            if (planet1.charAt(i) == planet2.charAt(j)) {\n                i++;\n                j++;\n            } else {\n                if (i == 0) {\n                    result.add(planet2.substring(j, len2));\n                    j = len2;\n                } else if (j == 0) {\n                    result.add(planet1.substring(i, len1));\n                    i = len1;\n                } else {\n                    result.add(planet1.substring(i, j));\n                    i = j;\n                    j = 0;\n                }\n            }\n        }\n        if (i == len) {\n            result.add(planet1.substring(i, len1));\n        } else if (j == len) {\n            result.add(planet2.substring(j, len2));\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> res = new ArrayList<>();\n        if (planet1.equals(planet2)) {\n            res.add(planet1);\n            return res;\n        }\n        int n = planet1.length();\n        int m = planet2.length();\n        int[][] dp = new int[n + 1][m + 1];\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= m; j++) {\n                if (planet1.charAt(i - 1) == planet2.charAt(j - 1)) {\n                    dp[i][j] = dp[i - 1][j - 1] + 1;\n                } else {\n                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n        for (int i = n; i >= 1; i--) {\n            for (int j = m; j >= 1; j--) {\n                if (dp[i][j] == dp[i][j - 1]) {\n                    res.add(planet1.substring(i - dp[i][j], i + 1));\n                }\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1.equals(planet2)) {\n            result.add(planet1);\n            return result;\n        }\n        Queue<String> q = new LinkedList<>();\n        q.offer(planet1);\n        while (!q.isEmpty()) {\n            String current = q.poll();\n            if (current.equals(planet2)) {\n                result.add(current);\n                return result;\n            }\n            for (int i = 0; i < 4; i++) {\n                String next = current + \" \" + directions[i];\n                if (next.equals(planet2)) {\n                    result.add(next);\n                    q.offer(next);\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n\n    private static final String[] directions = {\"N\", \"E\", \"S\", \"W\"};\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        \n        \n            return List.of();\n        }\n        \n        \n        \n            \n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1.equals(planet2)) {\n            result.add(planet1);\n            return result;\n        }\n        List<String> sub_planets = bf(planet1, planet2);\n        for (String sub_planet : sub_planets) {\n            result.add(sub_planet);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        Map<String, String> map = new HashMap<>();\n        map.put(planet1, planet2);\n        result.add(planet1);\n        while(!map.isEmpty()) {\n            String currentPlanet = map.keySet().iterator().next();\n            map.remove(currentPlanet);\n            for(String nextPlanet : map.keySet()) {\n                if(map.get(nextPlanet).equals(currentPlanet)) {\n                    map.remove(nextPlanet);\n                    result.add(nextPlanet);\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<String>();\n        if (planet1.equals(planet2)) {\n            result.add(planet1);\n            return result;\n        }\n        Queue<String> q = new LinkedList<String>();\n        q.add(planet1);\n        while (!q.isEmpty()) {\n            String current = q.poll();\n            if (current.equals(planet2)) {\n                result.add(current);\n                break;\n            }\n            for (int i = 0; i < 4; i++) {\n                String next = current + directions[i];\n                if (next.equals(planet2)) {\n                    result.add(next);\n                    q.add(next);\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n\n    private static final String[] directions = {\"N\", \"S\", \"E\", \"W\"};\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1.equals(planet2)) {\n            result.add(planet1);\n        } else {\n            result.addAll(bf(planet1, planet2.substring(1)));\n            result.addAll(bf(planet2.substring(1), planet1));\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1.equals(planet2)) {\n            result.add(planet1);\n            return result;\n        }\n        if (planet1.length() > planet2.length()) {\n            result.addAll(bf(planet2, planet1));\n        } else {\n            result.addAll(bf(planet1, planet2));\n        }\n        result.add(planet1 + \" \" + planet2);\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.bf(\"Mercury\", \"Venus\"));\n        System.out.println(s.bf(\"Venus\", \"Mercury\"));\n        System.out.println(s.bf(\"Earth\", \"Mars\"));\n        System.out.println(s.bf(\"Mars\", \"Earth\"));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1.equals(planet2)) {\n            result.add(planet1);\n            return result;\n        }\n        Queue<String> q = new LinkedList<>();\n        q.add(planet1);\n        while (!q.isEmpty()) {\n            String current = q.poll();\n            if (current.equals(planet2)) {\n                result.add(current);\n                return result;\n            }\n            for (int i = 0; i < 4; i++) {\n                String next = current + \" \" + planet2.charAt(i);\n                if (next.equals(planet1)) {\n                    result.add(next);\n                    q.add(next);\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1.equals(planet2)) {\n            result.add(planet1);\n            return result;\n        }\n        Queue<String> q = new LinkedList<>();\n        q.add(planet1);\n        while (!q.isEmpty()) {\n            String current = q.poll();\n            if (current.equals(planet2)) {\n                result.add(current);\n                return result;\n            }\n            for (int i = 0; i < current.length(); i++) {\n                String next = current.substring(0, i) + current.substring(i + 1);\n                if (next.equals(planet2)) {\n                    result.add(next);\n                    q.add(next);\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> planets = new ArrayList<>();\n        if (planet1.equals(planet2)) {\n            planets.add(planet1);\n        } else {\n            planets.add(planet1);\n            planets.add(planet2);\n        }\n        return planets;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1.equals(planet2)) {\n            result.add(planet1);\n            return result;\n        }\n        Queue<String> q = new LinkedList<>();\n        q.add(planet1);\n        while (!q.isEmpty()) {\n            String current = q.poll();\n            if (current.equals(planet2)) {\n                result.add(current);\n                break;\n            }\n            for (int i = 0; i < 4; i++) {\n                String next = current + \" \" + directions[i];\n                if (next.equals(planet2)) {\n                    result.add(next);\n                    q.add(next);\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n\n    private static final String[] directions = {\"N\", \"E\", \"S\", \"W\"};\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1.equals(planet2)) {\n            result.add(planet1);\n            return result;\n        }\n        Queue<String> q = new LinkedList<>();\n        q.add(planet1);\n        while (!q.isEmpty()) {\n            String cur = q.poll();\n            if (cur.equals(planet2)) {\n                result.add(cur);\n                return result;\n            }\n            for (char c : cur.toCharArray()) {\n                String next = cur + c;\n                if (next.equals(planet2)) {\n                    result.add(next);\n                    q.add(next);\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<String>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.size(); j++) {\n                if (lst.get(i).compareTo(lst.get(j)) > 0) {\n                    String temp = lst.get(i);\n                    lst.set(i, lst.get(j));\n                    lst.set(j, temp);\n                }\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            result.add(lst.get(i));\n        }\n        return result;\n    }\n\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> new_lst = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++) {\n            new_lst.add(lst.get(i));\n        }\n        return new_lst;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> new_lst = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++) {\n            new_lst.add(lst.get(i));\n        }\n        return new_lst;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            result.add(s);\n        }\n        Collections.sort(result);\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < lst.size(); i++) {\n            map.put(lst.get(i), i);\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            result.add(lst.get(map.get(lst.get(i))));\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> sorted = new ArrayList<String>();\n        for (int i = 0; i < lst.size(); i++) {\n            sorted.add(lst.get(i));\n        }\n        return sorted;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> new_lst = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < lst.size(); i++) {\n            map.put(lst.get(i).charAt(0) - '0', i);\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (map.containsKey(target - lst.get(i).charAt(0) - '0')) {\n                new_lst.add(lst.get(map.get(lst.get(i).charAt(0) - '0')));\n                new_lst.add(lst.get(i));\n            }\n        }\n        return new_lst;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> new_lst = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.size() - 1; j++) {\n                if (lst.get(j).compareTo(lst.get(j + 1)) > 0) {\n                    String temp = lst.get(j);\n                    lst.set(j, lst.get(j + 1));\n                    lst.set(j + 1, temp);\n                }\n            }\n        }\n        return new_lst;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        Collections.sort(lst);\n        return lst;\n    }\n\n    public List<String> threeSumClosest(int[] nums, int target) {\n        List<String> result = new ArrayList<>();\n        Arrays.sort(nums);\n        for (int i = 0; i < nums.length - 2; i++) {\n            int left = i + 1;\n            int right = nums.length - 1;\n            int sum = nums[i] + nums[left] + nums[right];\n            while (left < right) {\n                if (Math.abs(sum - target) < Math.abs(nums[left] - nums[right])) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n            result.add(String.valueOf(nums[i]) + \" \" + String.valueOf(nums[left]) + \" \" + String.valueOf(nums[right]));\n        }\n        return listSort(result);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<String>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.size(); j++) {\n                if (lst.get(i).compareTo(lst.get(j)) > 0) {\n                    String temp = lst.get(i);\n                    lst.set(i, lst.get(j));\n                    lst.set(j, temp);\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            result.add(s);\n        }\n        Collections.sort(result);\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> new_lst = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i).compareTo(lst.get(i + 1)) > 0) {\n                new_lst.add(lst.get(i));\n                new_lst.add(lst.get(i + 1));\n                lst.remove(i + 1);\n                lst.remove(i);\n            }\n        }\n        return new_lst;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> res = new ArrayList<>();\n        Collections.sort(lst, (a, b) -> b.length() - a.length());\n        for (String s : lst) {\n            res.add(s);\n        }\n        return res;\n    }\n\n    public String longestPalindrome(String s) {\n        if (s == null || s.length() == 0) {\n            return \"\";\n        }\n        int len = s.length();\n        int[][] dp = new int[len][len];\n        for (int i = 0; i < len; i++) {\n            dp[i][i] = 1;\n        }\n        for (int i = 1; i < len; i++) {\n            for (int j = 0; j < i; j++) {\n                if (s.charAt(j) == s.charAt(i)) {\n                    dp[j][i] = dp[j + 1][i - 1] + 2;\n                }\n            }\n        }\n        int max = 0;\n        String res = \"\";\n        for (int i = 0; i < len; i++) {\n            for (int j = i; j < len; j++) {\n                if (dp[i][j] > max) {\n                    max = dp[i][j];\n                    res = s.substring(i, j + 1);\n                }\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        if (lst.size() == 0) return result;\n        String str = lst.get(0);\n        int index = 0;\n        for (int i = 1; i < lst.size(); i++) {\n            if (str.compareTo(lst.get(i)) > 0) {\n                result.add(str);\n                str = lst.get(i);\n                index = i;\n            }\n        }\n        result.add(str);\n        return result;\n    }\n\n    public int maxPathSum(TreeNode root) {\n        List<String> lst = new ArrayList<>();\n        if (root == null) return 0;\n        lst.add(root.val + \"\");\n        int max = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            lst = listSort(lst);\n            max = Math.max(max, Integer.parseInt(lst.get(i)));\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> new_lst = new ArrayList<String>();\n        for (int i = 0; i < lst.size(); i++) {\n            new_lst.add(lst.get(i));\n        }\n        return new_lst;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<String>();\n        for (int i = 0; i < lst.size(); i++) {\n            for (int j = 0; j < lst.size() - i - 1; j++) {\n                if (lst.get(j).compareTo(lst.get(j + 1)) > 0) {\n                    String temp = lst.get(j);\n                    lst.set(j, lst.get(j + 1));\n                    lst.set(j + 1, temp);\n                }\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            result.add(lst.get(i));\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> new_lst = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++) {\n            new_lst.add(lst.get(i));\n        }\n        Collections.sort(new_lst);\n        return new_lst;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            result.add(s);\n        }\n        Collections.sort(result);\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> new_lst = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            new_lst.add(lst.get(i));\n        }\n        return new_lst;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<String>();\n        for (String s : lst) {\n            result.add(s);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        int result = 0;\n        if (n == 0) {\n            result = x;\n        } else {\n            result = xOrY(n - 1, x, y);\n        }\n        return result | y;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int x = sc.nextInt();\n        int y = sc.nextInt();\n        Solution s = new Solution();\n        int result = s.xOrY(n, x, y);\n        System.out.println(result);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        return n % (x + y);\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        int x = in.nextInt();\n        int y = in.nextInt();\n        int result = xOrY(n, x, y);\n        System.out.println(result);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n == 1) {\n            return y;\n        }\n        \n            if (n == 2) {\n                return x ^ y;\n            }\n        \n            int mid = (x + y) / 2;\n            int left = xOrY(n - 1, x, mid);\n            int right = xOrY(n - 1, mid, y);\n            return left ^ right;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        int i = 0;\n        int j = n - 1;\n        while (i <= j) {\n            int sum = i + j;\n            if (sum == x || sum == y) {\n                return sum;\n            } else if (sum < x) {\n                i++;\n            } else {\n                j--;\n            }\n        }\n        return -1;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n == 1) {\n            return x;\n        }\n        int xOrY = xOrY(n - 1, x, y);\n        if (n % 2 == 0) {\n            return xOrY ^ y;\n        }\n        return xOrY;\n    }\n\n    public int remove(int capacity, int[] keys, int[] values) {\n        int n = keys.length;\n        int x = keys[0];\n        int y = values[0];\n        int xOrY = xOrY(n, x, y);\n        int index = xOrY ^ y;\n        int removeIndex = xOrY ^ y;\n        int removeValue = values[index];\n        keys[index] = keys[n - 1];\n        values[index] = values[n - 1];\n        keys[n - 1] = x;\n        values[n - 1] = y;\n        return removeValue;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        int result = 0;\n        if (x == y) {\n            result = 1;\n        } else if (x == 0 && y == 1) {\n            result = 0;\n        } else if (x == 1 && y == 0) {\n            result = 1;\n        } else if (x == 1 && y == 1) {\n            result = 0;\n        } else if (x == 0 && y == 0) {\n            result = 0;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        int result = 0;\n        int i = 0;\n        while (n > 0) {\n            if (n % 10 == x) {\n                result += y;\n            }\n            n /= 10;\n            i++;\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int x = sc.nextInt();\n        int y = sc.nextInt();\n        System.out.println(xOrY(n, x, y));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        int result = 0;\n        if (x == y) {\n            result = 1;\n        } else if (x == 1) {\n            result = 0;\n        } else if (y == 1) {\n            result = 1;\n        } else {\n            result = 0;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        int ans = 0;\n        while (n > 0) {\n            if (n % 2 == 0) {\n                ans += x;\n            } else {\n                ans += y;\n            }\n            n /= 2;\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        int result = 0;\n        while (n != 0) {\n            result += (n % 2) * x;\n            n /= 2;\n            x = x ^ y;\n            y = x ^ y;\n            x = x ^ y;\n        }\n        return result;\n    }\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int x = sc.nextInt();\n        int y = sc.nextInt();\n        int result = xOrY(n, x, y);\n        System.out.println(result);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        int result = 0;\n        int mask = 1;\n        while (n != 0) {\n            if ((n & 1) == 1) {\n                result ^= x;\n            }\n            n >>= 1;\n            x <<= 1;\n            x ^= y;\n            y <<= 1;\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int x = sc.nextInt();\n        int y = sc.nextInt();\n        System.out.println(xOrY(n, x, y));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        int count = 0;\n        while (n != 0) {\n            if (n % x == 0) {\n                count++;\n                n /= x;\n            } else if (n % y == 0) {\n                count++;\n                n /= y;\n            } else {\n                break;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int x = sc.nextInt();\n        int y = sc.nextInt();\n        System.out.println(new Solution().xOrY(n, x, y));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        int xor = x ^ y;\n        int result = xor ^ n;\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        int result = 0;\n        if (n == 0) {\n            result = x;\n        } else {\n            result = xOrY(n - 1, x, y);\n        }\n        return result ^ y;\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        int x = scanner.nextInt();\n        int y = scanner.nextInt();\n        Solution solution = new Solution();\n        System.out.println(solution.xOrY(n, x, y));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n == 0) return 0;\n        if (n == 1) return x == 1 ? 1 : 0;\n        if (n == 2) return x == 1 ? 1 : 0;\n        if (n == 3) return x == 1 ? 1 : 0;\n        if (n == 4) return x == 1 ? 1 : 0;\n        if (n == 5) return x == 1 ? 1 : 0;\n        if (n == 6) return x == 1 ? 1 : 0;\n        if (n == 7) return x == 1 ? 1 : 0;\n        if (n == 8) return x == 1 ? 1 : 0;\n        if (n == 9) return x == 1 ? 1 : 0;\n        if (n == 10) return x == 1 ? 1 : 0;\n        if (n == 11) return x == 1 ? 1 : 0;\n        if (n == 12) return x == 1 ? 1 : 0;\n        if (n == 13) return x == 1 ? 1 : 0;\n        if (n == 14) return x == 1 ? 1 : 0;\n        if (n == 15) return x == 1 ? 1 : 0;\n        if (n == 16) return x == 1 ? 1 : 0;\n        if (n == 17) return x == 1 ? 1 : 0;\n        if (n == 18) return x == 1 ? 1 : 0;\n        if (n == 19) return x == 1 ? 1 : 0;\n        if (n == 20) return x == 1 ? 1 : 0;\n        if (n == 21) return x == 1 ? 1 : 0;\n        if (n == 22) return x == 1 ? 1 : 0;\n        if (n == 23) return x == 1 ? 1 : 0;\n        if (n == 24) return x == 1 ? 1 : 0;\n        if (n == 25) return x == 1 ? 1 : 0;\n        if (n == 26) return x == 1 ? 1 : 0;\n        if (n == 27) return x == 1 ? 1 : 0;\n        if (n == 28) return x == 1 ? 1 : 0;\n        if (n == 29) return x == 1 ? 1 : 0;\n        if (n == 30) return x == 1 ? 1 : 0;\n        if (n == 31) return x == 1 ? 1 : 0;\n        if (n == 32) return x == 1 ? 1 : 0;\n        if (n == 33) return x == 1 ? 1 : 0;\n        if (n == 34) return x == 1 ? 1 : 0;\n        if (n == 35) return x == 1 ? 1 : 0;\n        if (n == 36) return x == 1 ? 1 : 0;\n        if (n == 37) return x == 1 ? 1 : 0;\n        if (n == 38) return x == 1 ? 1 : 0;\n        if (n == 39) return x == 1 ? 1 : 0;\n        if (n == 40) return x == 1 ? 1 : 0;\n        if (n == 41) return x == 1 ? 1 : 0;\n        if (n == 42) return x == 1 ? 1 : 0;\n        if (n == 43) return x == 1 ? 1 : 0;\n        if (n == 44) return x == 1 ? 1 : 0;\n        if (n == 45) return x == 1 ? 1 : 0;\n        if (n == 46) return x == 1 ? 1 : 0;\n        if (n == 47) return x == 1 ? 1 : 0;\n        if (n == 48) return x == 1 ? 1 : 0;\n        if (n == 49) return x == 1 ? 1 : 0;\n        if (n == 50) return x == 1 ? 1 : 0;\n        if (n == 51) return x == 1 ? 1 : 0;\n        if (n == 52) return x == 1 ? 1 : 0;\n        if (n == 53) return x == 1 ? 1 : 0;\n        if (n == 54) return x == 1 ? 1 : 0;\n        if (n == 55) return x == 1 ? 1 : 0;\n        if (n == 56) return x == 1 ? 1 : 0;\n        if (n == 57) return x == 1 ? 1 : 0;\n        if (n == 58) return x == 1 ? 1 : 0;\n        if (n == 59) return x == 1 ? 1 : 0;\n        if (n == 60) return x == 1 ? 1 : 0;\n        if (n == 61) return x == 1 ? 1 : 0;\n        if (n == 62) return x == 1 ? 1 : 0;\n        if (n == 63) return x == 1 ? 1 : 0;\n        if (n == 64) return x == 1 ? 1 : 0;\n        if (n == 65) return x == 1 ? 1 : 0;\n        if (n == 66) return x == 1 ? 1 : 0;\n        if (n == 67) return x == 1 ? 1 : 0;\n        if (n == 68) return x == 1 ? 1 : 0;\n        if (n == 69) return x == 1 ? 1 : 0;\n        if (n == 70) return x == 1 ? 1 : 0;\n        if (n == 71) return x == 1 ? 1 : 0;\n        if (n == 72) return x == 1 ? 1 : 0;\n        if (n == 73) return x == 1 ? 1 : 0;\n        if (n == 74) return x == 1 ? 1 : 0;\n        if (n == 75) return x == 1 ? 1 : 0;\n        if (n == 76) return x == 1 ? 1 : 0;\n        if (n == 77) return x == 1 ? 1 : 0;\n        if (n == 78) return x == 1 ? 1 : 0;\n        if (n == 79) return x == 1 ? 1 : 0;\n        if (n == 80) return x == 1 ? 1 : 0;\n        if (n == 81) return x == 1 ? 1 : 0;\n        if (n == 82) return x == 1 ? 1 : 0;\n        if (n == 83) return x == 1 ? 1 : 0;\n        if (n == 84) return x == 1 ? 1 : 0;\n        if (n == 85) return x == 1 ? 1 : 0;\n        if (n == 86) return x == 1 ? 1 : 0;\n        if (n == 87) return x == 1 ? 1 : 0;\n        if (n == 88) return x == 1 ? 1 : 0;\n        if (n == 89) return x == 1 ? 1 : 0;"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        return (n & x) | (n & y);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n == 1) {\n            return y;\n        }\n        \n        int left = xOrY(n-1, x, y);\n        int right = xOrY(n-1, x ^ y, y);\n        \n        return left ^ right;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n            ans ^= (x & 1) ^ (y & 1);\n            x >>= 1;\n            y >>= 1;\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n == 1) {\n            return y;\n        }\n        \n            if (n == 2) {\n                return x;\n            }\n        \n            if (n == 3) {\n                return x ^ y;\n            }\n        \n            if (n == 4) {\n                return x | y;\n            }\n        \n            if (n == 5) {\n                return x & y;\n            }\n        \n            if (n == 6) {\n                return x ^ y ^ x;\n            }\n        \n            if (n == 7) {\n                return x ^ y ^ y;\n            }\n        \n            if (n == 8) {\n                return x ^ y ^ x ^ y;\n            }\n        \n            if (n == 9) {\n                return x ^ y ^ x ^ x;\n            }\n        \n            if (n == 10) {\n                return x ^ y ^ x ^ y ^ x;\n            }\n        \n            if (n == 11) {\n                return x ^ y ^ x ^ y ^ y;\n            }\n        \n            if (n == 12) {\n                return x ^ y ^ x ^ x ^ x;\n            }\n        \n            if (n == 13) {\n                return x ^ y ^ x ^ y ^ y ^ x;\n            }\n        \n            if (n == 14) {\n                return x ^ y ^ x ^ y ^ x ^ y;\n            }\n        \n            if (n == 15) {\n                return x ^ y ^ x ^ x ^ x ^ x ^ y;\n            }\n        \n            if (n == 16) {\n                return x ^ y ^ x ^ y ^ y ^ x ^ x;\n            }\n        \n            if (n == 17) {\n                return x ^ y ^ x ^ y ^ x ^ y ^ y;\n            }\n        \n            if (n == 18) {\n                return x ^ y ^ x ^ x ^ x ^ x ^ x ^ y;\n            }\n        \n            if (n == 19) {\n                return x ^ y ^ x ^ y ^ y ^ x ^ x ^ x;\n            }\n        \n            if (n == 20) {\n                return x ^ y ^ x ^ y ^ x ^ y ^ y ^ y;\n            }\n        \n            if (n == 21) {\n                return x ^ y ^ x ^ x ^ x ^ x ^ x ^ x ^ y;\n            }\n        \n            if (n == 22) {\n                return x ^ y ^ x ^ y ^ y ^ x ^ x ^ x ^ x;\n            }\n        \n            if (n == 23) {\n                return x ^ y ^ x ^ y ^ x ^ y ^ y ^ y ^ y;\n            }\n        \n            if (n == 24) {\n                return x ^ y ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ y;\n            }\n        \n            if (n == 25) {\n                return x ^ y ^ x ^ y ^ y ^ x ^ x ^ x ^ x ^ x;\n            }\n        \n            if (n == 26) {\n                return x ^ y ^ x ^ y ^ x ^ y ^ y ^ y ^ y ^ y;\n            }\n        \n            if (n == 27) {\n                return x ^ y ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ y;\n            }\n        \n            if (n == 28) {\n                return x ^ y ^ x ^ y ^ y ^ x ^ x ^ x ^ x ^ x ^ x;\n            }\n        \n            if (n == 29) {\n                return x ^ y ^ x ^ y ^ x ^ y ^ y ^ y ^ y ^ y ^ y;\n            }\n        \n            if (n == 30) {\n                return x ^ y ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ y;\n            }\n        \n            if (n == 31) {\n                return x ^ y ^ x ^ y ^ y ^ x ^ x ^ x ^ x ^ x ^ x ^ x;\n            }\n        \n            if (n == 32) {\n                return x ^ y ^ x ^ y ^ x ^ y ^ y ^ y ^ y ^ y ^ y ^ y;\n            }\n        \n            if (n == 33) {\n                return x ^ y ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ y;\n            }\n        \n            if (n == 34) {\n                return x ^ y ^ x ^ y ^ y ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x;\n            }\n        \n            if (n == 35) {\n                return x ^ y ^ x ^ y ^ x ^ y ^ y ^ y ^ y ^ y ^ y ^ y ^ y;\n            }\n        \n            if (n == 36) {\n                return x ^ y ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ y;\n            }\n        \n            if (n == 37) {\n                return x ^ y ^ x ^ y ^ y ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x;\n            }\n        \n            if (n == 38) {\n                return x ^ y ^ x ^ y ^ x ^ y ^ y ^ y ^ y ^ y ^ y ^ y ^ y ^ y;\n            }\n        \n            if (n == 39) {\n                return x ^ y ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ y;\n            }\n        \n            if (n == 40) {\n                return x ^ y ^ x ^ y ^ y ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x;\n            }\n        \n            if (n == 41) {\n                return x ^ y ^ x ^ y ^ x ^ y ^ y ^ y ^ y ^ y ^ y ^ y ^ y ^ y ^ y;\n            }\n        \n            if (n == 42) {\n                return x ^ y ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x;\n            }\n        \n            if (n == 43) {\n                return x ^ y ^ x ^ y ^ y ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ y;\n            }\n        \n            if (n == 44) {\n                return x ^ y ^ x ^ y ^ x ^ y ^ y ^ y ^ y ^ y ^ y ^ y ^ y ^ y ^ y ^ x;\n            }\n        \n            if (n == 45) {\n                return x ^ y ^ x ^ y ^ x ^ y ^ y ^ y ^ y ^ y ^ y ^ y ^ y ^ y ^ y ^ y ^ y;\n            }\n        \n            if (n == 46) {\n                return x ^ y ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ y;\n            }\n        \n            if (n == 47) {\n                return x ^ y ^ x ^ y ^ y ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x;\n            }\n        \n            if (n == 48) {\n                return x ^ y ^ x ^ y ^ x ^ y ^ y ^ y ^ y ^ y ^ y ^ y ^ y ^ y ^ y ^ y ^ x ^ x;\n            }\n        \n            if (n == 49) {\n                return x ^ y ^ x ^ y ^ x ^ y ^ y ^ y ^ y ^ y ^ y ^ y ^ y ^ y ^ y ^ y ^ y ^ y;\n            }\n        \n            if (n == 50) {\n                return x ^ y ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ y;\n            }\n        \n            if (n == 51) {\n                return x ^ y ^ x ^ y ^ y ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x;\n            }\n        \n            if (n == 52) {\n                return x ^ y ^ x ^ y ^ x ^ y ^ y ^ y ^ y ^ y ^ y ^ y ^ y ^ y ^ y ^ x ^ x ^ x;\n            }\n        \n            if (n == 53) {\n                return x ^ y ^ x ^ y ^ x ^ y ^ y ^ y ^ y ^ y ^ y ^ y ^ y ^ y ^ y ^ y ^ y ^ y ^ y;\n            }\n        \n            if (n == 54) {\n                return x ^ y ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x ^ x;\n            }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        int ans = 0;\n        if (n == 0) {\n            return ans;\n        }\n        if (n == 1) {\n            return x;\n        }\n        if (n == 2) {\n            return x ^ y;\n        }\n        if (n == 3) {\n            return x | y;\n        }\n        if (n == 4) {\n            return x & y;\n        }\n        if (n == 5) {\n            return x ^ y;\n        }\n        if (n == 6) {\n            return x | y;\n        }\n        if (n == 7) {\n            return x & y;\n        }\n        if (n == 8) {\n            return x ^ y;\n        }\n        if (n == 9) {\n            return x | y;\n        }\n        if (n == 10) {\n            return x & y;\n        }\n        if (n == 11) {\n            return x ^ y;\n        }\n        if (n == 12) {\n            return x | y;\n        }\n        if (n == 13) {\n            return x & y;\n        }\n        if (n == 14) {\n            return x ^ y;\n        }\n        if (n == 15) {\n            return x | y;\n        }\n        if (n == 16) {\n            return x & y;\n        }\n        if (n == 17) {\n            return x ^ y;\n        }\n        if (n == 18) {\n            return x | y;\n        }\n        if (n == 19) {\n            return x & y;\n        }\n        if (n == 20) {\n            return x ^ y;\n        }\n        if (n == 21) {\n            return x | y;\n        }\n        if (n == 22) {\n            return x & y;\n        }\n        if (n == 23) {\n            return x ^ y;\n        }\n        if (n == 24) {\n            return x | y;\n        }\n        if (n == 25) {\n            return x & y;\n        }\n        if (n == 26) {\n            return x ^ y;\n        }\n        if (n == 27) {\n            return x | y;\n        }\n        if (n == 28) {\n            return x & y;\n        }\n        if (n == 29) {\n            return x ^ y;\n        }\n        if (n == 30) {\n            return x | y;\n        }\n        if (n == 31) {\n            return x & y;\n        }\n        if (n == 32) {\n            return x ^ y;\n        }\n        if (n == 33) {\n            return x | y;\n        }\n        if (n == 34) {\n            return x & y;\n        }\n        if (n == 35) {\n            return x ^ y;\n        }\n        if (n == 36) {\n            return x | y;\n        }\n        if (n == 37) {\n            return x & y;\n        }\n        if (n == 38) {\n            return x ^ y;\n        }\n        if (n == 39) {\n            return x | y;\n        }\n        if (n == 40) {\n            return x & y;\n        }\n        if (n == 41) {\n            return x ^ y;\n        }\n        if (n == 42) {\n            return x | y;\n        }\n        if (n == 43) {\n            return x & y;\n        }\n        if (n == 44) {\n            return x ^ y;\n        }\n        if (n == 45) {\n            return x | y;\n        }\n        if (n == 46) {\n            return x & y;\n        }\n        if (n == 47) {\n            return x ^ y;\n        }\n        if (n == 48) {\n            return x | y;\n        }\n        if (n == 49) {\n            return x & y;\n        }\n        if (n == 50) {\n            return x ^ y;\n        }\n        if (n == 51) {\n            return x | y;\n        }\n        if (n == 52) {\n            return x & y;\n        }\n        if (n == 53) {\n            return x ^ y;\n        }\n        if (n == 54) {\n            return x | y;\n        }\n        if (n == 55) {\n            return x & y;\n        }\n        if (n == 56) {\n            return x ^ y;\n        }\n        if (n == 57) {\n            return x | y;\n        }\n        if (n == 58) {\n            return x & y;\n        }\n        if (n == 59) {\n            return x ^ y;\n        }\n        if (n == 60) {\n            return x | y;\n        }\n        if (n == 61) {\n            return x & y;\n        }\n        if (n == 62) {\n            return x ^ y;\n        }\n        if (n == 63) {\n            return x | y;\n        }\n        if (n == 64) {\n            return x & y;\n        }\n        if (n == 65) {\n            return x ^ y;\n        }\n        if (n == 66) {\n            return x | y;\n        }\n        if (n == 67) {\n            return x & y;\n        }\n        if (n == 68) {\n            return x ^ y;\n        }\n        if (n == 69) {\n            return x | y;\n        }\n        if (n == 70) {\n            return x & y;\n        }\n        if (n == 71) {\n            return x ^ y;\n        }\n        if (n == 72) {\n            return x | y;\n        }\n        if (n == 73) {\n            return x & y;\n        }\n        if (n == 74) {\n            return x ^ y;\n        }\n        if (n == 75) {\n            return x | y;\n        }\n        if (n == 76) {\n            return x & y;\n        }\n        if (n == 77) {\n            return x ^ y;\n        }\n        if (n == 78) {\n            return x | y;\n        }\n        if (n == 79) {\n            return x & y;\n        }\n        if (n == 80) {\n            return x ^ y;\n        }\n        if (n == 81) {\n            return x | y;\n        }\n        if (n == 82) {\n            return x & y;\n        }\n        if (n == 83) {\n            return x ^ y;\n        }\n        if (n == 84) {\n            return x | y;\n        }\n        if (n == 85) {\n            return x & y;\n        }\n        if (n == 86) {\n            return x ^ y;\n        }\n        if (n == 87) {\n            return x | y;\n        }\n        if (n == 88) {\n            return x & y;\n        }\n        if (n == 89) {\n            return x ^ y;\n        }\n        if (n == 90) {\n            return x | y;\n        }\n        if (n == 91) {\n            return x & y;\n        }\n        if (n == 92) {\n            return x ^ y;\n        }\n        if (n == 93) {\n            return x | y;\n        }\n        if (n == 94) {\n            return x & y;\n        }\n        if (n == 95) {\n            return x ^ y;\n        }\n        if (n == 96) {\n            return x | y;\n        }\n        if (n == 97) {\n            return x & y;\n        }\n        if (n == 98) {\n            return x ^ y;\n        }\n        if (n == 99) {\n            return x | y;\n        }\n        if (n == 100) {\n            return x & y;\n        }\n        if (n == 101) {\n            return x ^ y;\n        }\n        if (n == 102) {\n            return x | y;\n        }\n        if (n == 103) {\n            return x & y;\n        }\n        if (n == 104) {\n            return x ^ y;\n        }\n        if (n == 105) {\n            return x | y;\n        }\n        if (n == 106) {\n            return x & y;\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            sum += (int) o;\n        }\n        return sum * 2;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int result = 0;\n        for (Object o : lst) {\n            result += (int) o;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int len = lst.size();\n        int diff = 0;\n        for (int i = 0; i < len; i++) {\n            if (lst.get(i).equals(lst.get(i + 1))) {\n                diff++;\n            }\n        }\n        return diff * 2;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < lst.size(); i++) {\n            int temp = (int) lst.get(i);\n            if (temp > max) {\n                max = temp;\n            }\n        }\n        return max * 2;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        int diff = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) instanceof Integer) {\n                sum += (int) lst.get(i);\n            } else {\n                diff += (int) lst.get(i);\n            }\n        }\n        return Math.max(sum, diff);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int result = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            result += lst.get(i).toString().charAt(0) - 'a';\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer p && p > 0 && p % 2 != 0) {\n                sum += (int) Math.pow(p, 2);\n            }\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            sum += (int) o;\n        }\n        return sum * 2;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int result = 0;\n        for (Object o : lst) {\n            result += (int) o;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int n = lst.size();\n        int[] arr = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr[i] = (int) lst.get(i);\n        }\n        Arrays.sort(arr);\n        int res = 0;\n        for(int i = 0; i < n; i++) {\n            if(arr[i] != arr[i+1]) {\n                res++;\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int max = 0;\n        int min = Integer.MAX_VALUE;\n        int diff = 0;\n        for (Object o : lst) {\n            int num = (int) o;\n            diff = num - min;\n            if (diff > 0) {\n                max = Math.max(max, diff);\n            }\n            min = Math.min(min, num);\n        }\n        return max * 2;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int result = 0;\n        for (Object o : lst) {\n            result += (int) o;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        int diff = 0;\n        for (Object obj : lst) {\n            diff += Integer.parseInt(obj.toString());\n        }\n        for (Object obj : lst) {\n            sum += Integer.parseInt(obj.toString());\n        }\n        return diff - sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        if (lst == null || lst.size() < 2) {\n            return 0;\n        }\n        int p = 0, q = 0;\n        for (Object obj : lst) {\n            if (obj instanceof Integer) {\n                p = (int) obj;\n            } else {\n                q = (int) obj;\n            }\n        }\n        return Math.abs(p - q);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o % 2 == 1) {\n                sum += (int) o;\n            }\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int res = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            res += (int) lst.get(i);\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int max = Integer.MIN_VALUE;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            sum += (int) lst.get(i);\n            if (sum > max) {\n                max = sum;\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < lst.size(); i++) {\n            int diff = lst.get(i) - lst.get(i + 1);\n            max = Math.max(max, diff * diff);\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            sum += (int) o;\n        }\n        return sum * 2;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            sum += (int) o;\n        }\n        return sum * 2;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<Integer>();\n        int len = game.size();\n        int len2 = guess.size();\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int m = 0;\n        int n = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i1 = 0;\n        int i2 = 0;\n        int i3 = 0;\n        int j1 = 0;\n        int j2 = 0;\n        int j3 = 0;\n        int k1 = 0;\n        int k2 = 0;\n        int k3 = 0;\n        int l1 = 0;\n        int l2 = 0;\n        int l3 = 0;\n        int m1 = 0;\n        int m2 = 0;\n        int m3 = 0;\n        int n1 = 0;\n        int n2 = 0;\n        int n3 = 0;\n        int o1 = 0;\n        int o2 = 0;\n        int o3 = 0;\n        int p1 = 0;\n        int p2 = 0;\n        int p3 = 0;\n        int q1 = 0;\n        int q2 = 0;\n        int q3 = 0;\n        int r1 = 0;\n        int r2 = 0;\n        int r3 = 0;\n        int s1 = 0;\n        int s2 = 0;\n        int s3 = 0;\n        int t1 = 0;\n        int t2 = 0;\n        int t3 = 0;\n        int u1 = 0;\n        int u2 = 0;\n        int u3 = 0;\n        int v1 = 0;\n        int v2 = 0;\n        int v3 = 0;\n        int w1 = 0;\n        int w2 = 0;\n        int w3 = 0;\n        int x1 = 0;\n        int x2 = 0;\n        int x3 = 0;\n        int y1 = 0;\n        int y2 = 0;\n        int y3 = 0;\n        int z1 = 0;\n        int z2 = 0;\n        int z3 = 0;\n        int aa = 0;\n        int bb = 0;\n        int cc = 0;\n        int dd = 0;\n        int ee = 0;\n        int ff = 0;\n        int gg = 0;\n        int hh = 0;\n        int ii = 0;\n        int jj = 0;\n        int kk = 0;\n        int ll = 0;\n        int mm = 0;\n        int nn = 0;\n        int oo = 0;\n        int pp = 0;\n        int qq = 0;\n        int rr = 0;\n        int ss = 0;\n        int tt = 0;\n        int uu = 0;\n        int vv = 0;\n        int ww = 0;\n        int xx = 0;\n        int yy = 0;\n        int zz = 0;\n        int aa1 = 0;\n        int aa2 = 0;\n        int aa3 = 0;\n        int bb1 = 0;\n        int bb2 = 0;\n        int bb3 = 0;\n        int cc1 = 0;\n        int cc2 = 0;\n        int cc3 = 0;\n        int dd1 = 0;\n        int dd2 = 0;\n        int dd3 = 0;\n        int ee1 = 0;\n        int ee2 = 0;\n        int ee3 = 0;\n        int ff1 = 0;\n        int ff2 = 0;\n        int ff3 = 0;\n        int gg1 = 0;\n        int gg2 = 0;\n        int gg3 = 0;\n        int hh1 = 0;\n        int hh2 = 0;\n        int hh3 = 0;\n        int ii1 = 0;\n        int ii2 = 0;\n        int ii3 = 0;\n        int jj1 = 0;\n        int jj2 = 0;\n        int jj3 = 0;\n        int kk1 = 0;\n        int kk2 = 0;\n        int kk3 = 0;\n        int ll1 = 0;\n        int ll2 = 0;\n        int ll3 = 0;\n        int mm1 = 0;\n        int mm2 = 0;\n        int mm3 = 0;\n        int nn1 = 0;\n        int nn2 = 0;\n        int nn3 = 0;\n        int oo1 = 0;\n        int oo2 = 0;\n        int oo3 = 0;\n        int pp1 = 0;\n        int pp2 = 0;\n        int pp3 = 0;\n        int qq1 = 0;\n        int qq2 = 0;\n        int qq3 = 0;\n        int rr1 = 0;\n        int rr2 = 0;\n        int rr3 = 0;\n        int ss1 = 0;\n        int ss2 = 0;\n        int ss3 = 0;\n        int tt1 = 0;\n        int tt2 = 0;\n        int tt3 = 0;\n        int uu1 = 0;\n        int uu2 = 0;\n        int uu3 = 0;\n        int vv1 = 0;\n        int vv2 = 0;\n        int vv3 = 0;\n        int ww1 = 0;\n        int ww2 = 0;\n        int ww3 = 0;\n        int xx1 = 0;\n        int xx2 = 0;\n        int xx3 = 0;\n        int yy1 = 0;\n        int yy2 = 0;\n        int yy3 = 0;\n        int zz1 = 0;\n        int zz2 = 0;\n        int zz3 = 0;\n        int aa11 = 0;\n        int aa12 = 0;\n        int aa13 = 0;\n        int aa21 = 0;\n        int aa22 = 0;\n        int aa23 = 0;\n        int aa31 = 0;\n        int aa32 = 0;\n        int aa33 = 0;\n        int bb11 = 0;\n        int bb12 = 0;\n        int bb13 = 0;\n        int bb21 = 0;\n        int bb22 = 0;\n        int bb23 = 0;\n        int bb31 = 0;\n        int bb32 = 0;\n        int bb33 = 0;\n        int cc11 = 0;\n        int cc12 ="], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<Integer>();\n        if (guess.size() == 0) {\n            return result;\n        }\n        int len = guess.size();\n        int i = 0;\n        int j = 0;\n        int count = 0;\n        while (i < len && j < len) {\n            if (guess.get(j) == game.get(i)) {\n                count++;\n                j++;\n            } else if (guess.get(j) > game.get(i)) {\n                count = 1;\n                j++;\n            } else {\n                count = 0;\n                i++;\n            }\n            if (count == 0) {\n                result.add(i);\n                result.add(j);\n                i++;\n                j++;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        int n = game.size();\n        int m = guess.size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(guess.get(j) == game.get(i)) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(guess.get(j) == game.get(i)) {\n                    result.add(1);\n                } else {\n                    result.add(0);\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> answer = new ArrayList<>();\n        if (game.size() != guess.size()) {\n            return answer;\n        }\n        int len = game.size();\n        int[] dp = new int[len];\n        for (int i = 0; i < len; i++) {\n            dp[i] = game.get(i);\n        }\n        for (int i = 0; i < len; i++) {\n            for (int j = i + 1; j < len; j++) {\n                if (guess.get(i) == guess.get(j)) {\n                    dp[i] = Math.max(dp[i], dp[j] + 1);\n                }\n            }\n        }\n        for (int i = 0; i < len; i++) {\n            answer.add(dp[i]);\n        }\n        return answer;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        int len = game.size();\n        int[] gameArr = new int[len];\n        int[] guessArr = new int[len];\n        for (int i = 0; i < len; i++) {\n            gameArr[i] = game.get(i);\n            guessArr[i] = guess.get(i);\n        }\n        Arrays.sort(gameArr);\n        Arrays.sort(guessArr);\n        for (int i = 0; i < len; i++) {\n            if (gameArr[i] == guessArr[i]) {\n                result.add(gameArr[i]);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        int len = guess.size();\n        int max = 0;\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < len; i++) {\n            if (guess.get(i) > 0) {\n                max += guess.get(i);\n            } else {\n                min -= guess.get(i);\n            }\n        }\n        for (int i = 0; i < len; i++) {\n            if (guess.get(i) > 0) {\n                result.add(max - guess.get(i));\n            } else {\n                result.add(min + guess.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            if (guess.contains(game.get(i))) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n\n    public List<String> wordBreak(String s, List<String> wordDict) {\n        List<String> result = new ArrayList<>();\n        if (wordDict.size() == 0) {\n            return result;\n        }\n        Map<String, List<Integer>> map = new HashMap<>();\n        for (int i = 0; i < wordDict.size(); i++) {\n            map.put(wordDict.get(i), new ArrayList<>());\n        }\n        for (int i = 0; i < s.length(); i++) {\n            String word = s.substring(i, i + 1);\n            List<Integer> game = new ArrayList<>();\n            for (int j = 0; j < wordDict.size(); j++) {\n                if (wordDict.get(j).equals(word)) {\n                    game.add(j);\n                }\n            }\n            List<Integer> guess = new ArrayList<>();\n            for (int j = i + 1; j < s.length(); j++) {\n                if (wordDict.get(j).equals(s.substring(i, j + 1))) {\n                    guess.add(j);\n                }\n            }\n            List<Integer> result1 = compare(game, guess);\n            for (int j = 0; j < result1.size(); j++) {\n                String str = s.substring(0, i) + wordDict.get(result1.get(j)) + s.substring(j + 1);\n                if (map.containsKey(str)) {\n                    map.get(str).add(i);\n                } else {\n                    List<Integer> temp = new ArrayList<>();\n                    temp.add(i);\n                    map.put(str, temp);\n                }\n            }\n        }\n        for (String str : map.keySet()) {\n            List<Integer> temp = map.get(str);\n            if (temp.size() > 1) {\n                result.add(str);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        int n = game.size();\n        int m = guess.size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (guess.get(j) == game.get(i)) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (guess.get(j) == game.get(i)) {\n                    result.add(1);\n                } else {\n                    result.add(0);\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        \n        \n            \n        }\n        return result;\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        int n = game.size();\n        int m = guess.size();\n        int[] dp = new int[n + 1];\n        for (int i = 1; i <= n; i++) {\n            dp[i] = Integer.MAX_VALUE;\n        }\n        for (int i = 0; i < m; i++) {\n            int g = guess.get(i);\n            int g_i = game.get(i);\n            if (g_i < g) {\n                dp[g_i] = Math.min(dp[g_i], dp[g] + 1);\n            }\n        }\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            res.add(dp[i]);\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        \n        \n            \n        }\n        return result;\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        if (game.size() != guess.size()) {\n            return result;\n        }\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < game.size(); i++) {\n            map.put(game.get(i), map.getOrDefault(game.get(i), 0) + 1);\n        }\n        for (int i = 0; i < guess.size(); i++) {\n            if (map.containsKey(guess.get(i))) {\n                map.put(guess.get(i), map.get(guess.get(i)) - 1);\n            }\n        }\n        for (int i = 0; i < map.size(); i++) {\n            if (map.get(i) == 0) {\n                result.add(i + 1);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        int n = game.size();\n        int m = guess.size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            dp[i][0] = game.get(i);\n        }\n        for (int i = 0; i < m; i++) {\n            dp[0][i] = guess.get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 1; j < m; j++) {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + 1;\n            }\n        }\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                res.add(dp[i][j]);\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> diff = new ArrayList<>();\n        int len = game.size();\n        for(int i=0;i<len;i++) {\n            diff.add(Math.abs(game.get(i)-guess.get(i)));\n        }\n        return diff;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        int max = 0;\n        int min = Integer.MAX_VALUE;\n        int sum = 0;\n        for (int i = 0; i < game.size(); i++) {\n            sum += game.get(i);\n            if (sum > max) {\n                max = sum;\n            }\n            if (sum < min) {\n                min = sum;\n            }\n        }\n        for (int i = 0; i < guess.size(); i++) {\n            sum += guess.get(i);\n            if (sum > max) {\n                max = sum;\n            }\n            if (sum < min) {\n                min = sum;\n            }\n        }\n        result.add(max);\n        result.add(min);\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        int len = game.size();\n        int[] game_arr = new int[len];\n        int[] guess_arr = new int[len];\n        for (int i = 0; i < len; i++) {\n            game_arr[i] = game.get(i);\n            guess_arr[i] = guess.get(i);\n        }\n        Arrays.sort(game_arr);\n        Arrays.sort(guess_arr);\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < len; i++) {\n            if (game_arr[i] == guess_arr[i]) {\n                result.add(game_arr[i]);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        int len = game.size();\n        int[] gameArr = new int[len];\n        int[] guessArr = new int[len];\n        for (int i = 0; i < len; i++) {\n            gameArr[i] = game.get(i);\n            guessArr[i] = guess.get(i);\n        }\n        Arrays.sort(gameArr);\n        Arrays.sort(guessArr);\n        for (int i = 0; i < len; i++) {\n            if (gameArr[i] == guessArr[i]) {\n                result.add(gameArr[i]);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        if (game.size() != guess.size()) {\n            return new ArrayList<Integer>();\n        }\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < game.size(); i++) {\n            if (game.get(i) == guess.get(i)) {\n                result.add(0);\n            } else {\n                result.add(-1);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        int n = game.size();\n        int m = guess.size();\n        int[] dp = new int[n + 1];\n        for (int i = 1; i <= n; i++) {\n            dp[i] = Integer.MAX_VALUE;\n        }\n        for (int i = 0; i < m; i++) {\n            int j = guess.get(i);\n            dp[j] = Math.min(dp[j], dp[j - 1]);\n        }\n        List<Integer> result = new ArrayList<>();\n        for (int i = n; i >= 0; i--) {\n            if (dp[i] == Integer.MAX_VALUE) {\n                result.add(0);\n            } else {\n                result.add(i + 1);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> result = new ArrayList<>();\n        int len = game.size();\n        int i = 0;\n        int j = 0;\n        while (i < len && j < guess.size()) {\n            if (game.get(i) > guess.get(j)) {\n                result.add(guess.get(j));\n                j++;\n            } else if (game.get(i) < guess.get(j)) {\n                result.add(game.get(i));\n                i++;\n            } else {\n                result.add(game.get(i));\n                i++;\n                j++;\n            }\n        }\n        while (i < len) {\n            result.add(game.get(i));\n            i++;\n        }\n        while (j < guess.size()) {\n            result.add(guess.get(j));\n            j++;\n        }\n        return result;\n    }\n\n    public TreeNode sortedArrayToBST(int[] nums) {\n        if (nums == null || nums.length == 0) {\n            return null;\n        }\n        int len = nums.length;\n        int mid = len / 2;\n        TreeNode root = new TreeNode(nums[mid]);\n        root.left = sortedArrayToBST(Arrays.copyOfRange(nums, 0, mid));\n        root.right = sortedArrayToBST(Arrays.copyOfRange(nums, mid + 1, len));\n        return root;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        String strong = \"\";\n        int my_val = 0;\n        for (String extension : extensions) {\n            int val = 0;\n            for (char c : extension.toCharArray()) {\n                val += c;\n            }\n            if (val > my_val) {\n                strong = extension;\n                my_val = val;\n            }\n        }\n        return strong;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        String strong = \"\";\n        int my_val = 0;\n        for (String s : extensions) {\n            int val = 0;\n            for (char c : s.toCharArray()) {\n                val += c - 'A' + 1;\n            }\n            if (val > my_val) {\n                strong = s;\n                my_val = val;\n            }\n        }\n        return strong;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        String strong = \"\";\n        int my_val = 0;\n        for (String s : extensions) {\n            int val = 0;\n            for (char c : s.toCharArray()) {\n                val += c;\n            }\n            if (val > my_val) {\n                strong = s;\n                my_val = val;\n            }\n        }\n        return strong;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        String str = \"\";\n        int val = 0;\n        for (String extension : extensions) {\n            if (extension.equals(class_name)) {\n                val++;\n            }\n        }\n        if (val > my_val) {\n            str = s;\n            my_val = val;\n        }\n        return str;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        String strong = \"\";\n        int my_val = 0;\n        for (String s : extensions) {\n            int val = 0;\n            for (char c : s.toCharArray()) {\n                val += (c - 'A' + 1);\n            }\n            if (val > my_val) {\n                strong = s;\n                my_val = val;\n            }\n        }\n        return strong;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        String strong = \"\";\n        int my_val = 0;\n        for (String s : extensions) {\n            int val = 0;\n            for (char c : s.toCharArray()) {\n                val += c - 'A' + 1;\n            }\n            if (val > my_val) {\n                strong = s;\n                my_val = val;\n            }\n        }\n        return strong;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        \n        \n        \n            \n            if (val > my_val) {\n                strong = s;\n                my_val = val;\n            }\n        }\n        \n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        String s = \"\";\n        int val = 0;\n        for (String e : extensions) {\n            if (e.equals(class_name)) {\n                val++;\n            }\n        }\n        if (val > my_val) {\n            strong = s;\n            my_val = val;\n        }\n        return strong;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        Set<String> set = new HashSet<>();\n        String s = class_name;\n        for (int i = 0; i < s.length(); i++) {\n            for (int j = i + 1; j < s.length(); j++) {\n                set.add(s.substring(i, j));\n            }\n        }\n        return set.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        String strong = \"\";\n        int my_val = 0;\n        for (String s : extensions) {\n            int val = 0;\n            for (char c : s.toCharArray()) {\n                val += (c - 'a' + 1);\n            }\n            if (val > my_val) {\n                strong = s;\n                my_val = val;\n            }\n        }\n        return strong;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        String s = class_name;\n        String strong = \"\";\n        int val = 0;\n        for (String e : extensions) {\n            String reg = \"^\" + e + \"$\";\n            Pattern p = Pattern.compile(reg);\n            Matcher m = p.matcher(s);\n            if (m.find()) {\n                val++;\n                String temp = m.group();\n                if (temp.length() > strong.length()) {\n                    strong = temp;\n                }\n            }\n        }\n        return strong;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        \n        \n        \n            \n            if (val > my_val) {\n                strong = s;\n                my_val = val;\n            }\n        }\n        \n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        \n        \n        \n            \n            if (val > my_val) {\n                strong = s;\n                my_val = val;\n            }\n        }\n        \n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        \n        String strong = \"\";\n        int my_val = 0;\n        for (String s : extensions) {\n            int val = 0;\n            for (char c : s.toCharArray()) {\n                val += c;\n            }\n            if (val > my_val) {\n                strong = s;\n                my_val = val;\n            }\n        }\n        return strong;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        String s = class_name;\n        int val = 0;\n        for (String e : extensions) {\n            if (e.compareTo(s) > 0) {\n                s = e;\n                val = 1;\n            } else if (e.compareTo(s) == 0) {\n                val++;\n            }\n        }\n        return s;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        \n        \n        \n            \n            if (val > my_val) {\n                strong = s;\n                my_val = val;\n            }\n        }\n        \n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        String strong = \"\";\n        int my_val = 0;\n        for (String s : extensions) {\n            int val = 0;\n            for (char c : s.toCharArray()) {\n                if (c == class_name.charAt(0)) {\n                    val++;\n                }\n            }\n            if (val > my_val) {\n                strong = s;\n                my_val = val;\n            }\n        }\n        return strong;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        \n        \n        \n            \n            if (val > my_val) {\n                strong = s;\n                my_val = val;\n            }\n        }\n        \n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        String str = \"\";\n        int max = 0;\n        for (String s : extensions) {\n            int val = 0;\n            for (char c : s.toCharArray()) {\n                val += c - 'a' + 1;\n            }\n            if (val > max) {\n                max = val;\n                str = s;\n            }\n        }\n        return str;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        String strong = \"\";\n        int my_val = 0;\n        for (String s : extensions) {\n            int val = 0;\n            for (char c : s.toCharArray()) {\n                val += c;\n            }\n            if (val > my_val) {\n                strong = s;\n                my_val = val;\n            }\n        }\n        return strong;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        if (a.length() != b.length())\n            return false;\n        int[] a1 = new int[26];\n        int[] b1 = new int[26];\n        for (int i = 0; i < a.length(); i++) {\n            a1[a.charAt(i) - 'a']++;\n            b1[b.charAt(i) - 'a']++;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (a1[i] != b1[i])\n                return false;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        if (a.length() != b.length()) {\n            return false;\n        }\n        int[] aArr = new int[26];\n        int[] bArr = new int[26];\n        for (int i = 0; i < a.length(); i++) {\n            aArr[a.charAt(i) - 'a']++;\n            bArr[b.charAt(i) - 'a']++;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (aArr[i] != bArr[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        HashMap<String, String> map = new HashMap<>();\n        map.put(a, b);\n        return map.containsKey(b);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        int n = a.length();\n        int m = b.length();\n        if(n != m)\n            return false;\n        int[][] dp = new int[n+1][m+1];\n        for(int i=1; i<=n; i++)\n            dp[i][0] = 1;\n        for(int j=1; j<=m; j++)\n            dp[0][j] = 1;\n        for(int i=1; i<=n; i++)\n            for(int j=1; j<=m; j++)\n                if(a.charAt(i-1) == b.charAt(j-1))\n                    dp[i][j] = dp[i-1][j-1] + dp[i-1][j];\n                else\n                    dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]);\n        return dp[n][m] == 2;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        if(a.length() != b.length())\n            return false;\n        int[] a_count = new int[26];\n        int[] b_count = new int[26];\n        for(char c : a.toCharArray())\n            a_count[c - 'a']++;\n        for(char c : b.toCharArray())\n            b_count[c - 'a']++;\n        for(int i = 0; i < 26; i++)\n            if(a_count[i] != b_count[i])\n                return false;\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        if(a.length() != b.length())\n            return false;\n        int[] arr = new int[26];\n        for(int i = 0; i < a.length(); i++)\n            arr[a.charAt(i) - 'a']++;\n        for(int i = 0; i < b.length(); i++)\n            arr[b.charAt(i) - 'a']--;\n        for(int i = 0; i < 26; i++)\n            if(arr[i] != 0)\n                return false;\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        if (a.length() != b.length())\n            return false;\n        int i = 0, j = a.length() - 1;\n        while (i < j) {\n            if (a.charAt(i) != b.charAt(j))\n                return false;\n            i++;\n            j--;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String a = sc.next();\n        String b = sc.next();\n        System.out.println(new Solution().cycpatternCheck(a, b));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        int n = a.length();\n        int m = b.length();\n        int[][] dp = new int[n + 1][m + 1];\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= m; j++) {\n                if (a.charAt(i - 1) == b.charAt(j - 1)) {\n                    dp[i][j] = dp[i - 1][j - 1] + 1;\n                } else {\n                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n        return dp[n][m] == n + m;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        if (a.length() != b.length()) {\n            return false;\n        }\n        int[] a_arr = new int[a.length()];\n        int[] b_arr = new int[b.length()];\n        for (int i = 0; i < a.length(); i++) {\n            a_arr[i] = a.charAt(i) - 'a';\n            b_arr[i] = b.charAt(i) - 'a';\n        }\n        Arrays.sort(a_arr);\n        Arrays.sort(b_arr);\n        for (int i = 0; i < a.length(); i++) {\n            if (a_arr[i] != b_arr[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        if(a.length() != b.length())\n            return false;\n        if(a.charAt(0) == b.charAt(0) && a.charAt(a.length()-1) == b.charAt(b.length()-1))\n            return true;\n        else\n            return false;\n    }\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String a = sc.next();\n        String b = sc.next();\n        System.out.println(new Solution().cycpatternCheck(a, b));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        int n = a.length();\n        int m = b.length();\n        if (n != m)\n            return false;\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++)\n            dp[i][0] = 1;\n        for (int i = 0; i < m; i++)\n            dp[0][i] = 1;\n        for (int i = 1; i < n; i++)\n            for (int j = 1; j < m; j++)\n                if (a.charAt(i - 1) == b.charAt(j - 1))\n                    dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j];\n                else\n                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\n        return dp[n - 1][m - 1] == 1;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        int l = b.length();\n        String pat = b + b;\n        int n = a.length();\n        int m = b.length();\n        int[][] dp = new int[n+1][m+1];\n        for(int i=0;i<n+1;i++)\n            dp[i][0] = 1;\n        for(int i=0;i<m+1;i++)\n            dp[0][i] = 1;\n        for(int i=1;i<n+1;i++)\n            for(int j=1;j<m+1;j++)\n                if(a.charAt(i-1) == b.charAt(j-1))\n                    dp[i][j] = dp[i-1][j-1];\n                else\n                    dp[i][j] = dp[i-1][j] + dp[i][j-1];\n        return dp[n][m] == 2;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        int n = a.length();\n        int m = b.length();\n        int[][] dp = new int[n+1][m+1];\n        for(int i=1;i<=n;i++)\n            dp[i][0] = 1;\n        for(int i=1;i<=m;i++)\n            dp[0][i] = 1;\n        for(int i=1;i<=n;i++)\n            for(int j=1;j<=m;j++)\n                if(a.charAt(i-1) == b.charAt(j-1))\n                    dp[i][j] = dp[i-1][j-1] + dp[i-1][j];\n                else\n                    dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]);\n        return dp[n][m] == 2;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        int l = b.length();\n        String pat = b + b;\n        int i = 0;\n        while(i < l) {\n            if(a.charAt(i) == pat.charAt(i)) {\n                i++;\n            }\n            else {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        int n = a.length();\n        int m = b.length();\n        if (n != m)\n            return false;\n        int[][] dp = new int[n + 1][m + 1];\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= m; j++) {\n                if (a.charAt(i - 1) == b.charAt(j - 1)) {\n                    dp[i][j] = dp[i - 1][j - 1] + 1;\n                } else {\n                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n        return dp[n][m] == n + m;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        int n = a.length();\n        int m = b.length();\n        int[][] dp = new int[n + 1][m + 1];\n        for (int i = 0; i <= n; i++) {\n            dp[i][0] = 0;\n        }\n        for (int i = 0; i <= m; i++) {\n            dp[0][i] = 0;\n        }\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= m; j++) {\n                if (a.charAt(i - 1) == b.charAt(j - 1)) {\n                    dp[i][j] = dp[i - 1][j - 1] + 1;\n                } else {\n                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\n                }\n                max = Math.max(max, dp[i][j]);\n            }\n        }\n        return max == m;\n    }\n\n    public String findLongestSubstring(String s) {\n        int n = s.length();\n        char[] arr = s.toCharArray();\n        int[] count = new int[256];\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            count[arr[i]]++;\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (count[arr[i]] == count[arr[j]]) {\n                    max = Math.max(max, j - i + 1);\n                }\n            }\n        }\n        return String.valueOf(max);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        int n = a.length();\n        int m = b.length();\n        int[][] dp = new int[n+1][m+1];\n        for(int i = 1; i <= n; i++) {\n            for(int j = 1; j <= m; j++) {\n                if(a.charAt(i-1) == b.charAt(j-1)) {\n                    dp[i][j] = dp[i-1][j-1] + 1;\n                } else {\n                    dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]);\n                }\n            }\n        }\n        return dp[n][m] == n+m;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        if(a.length() != b.length())\n            return false;\n        int[] aarr = new int[26];\n        int[] barr = new int[26];\n        for(int i = 0; i < a.length(); i++) {\n            aarr[a.charAt(i) - 'a']++;\n            barr[b.charAt(i) - 'a']++;\n        }\n        for(int i = 0; i < 26; i++) {\n            if(aarr[i] != barr[i])\n                return false;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        if (a.length() != b.length()) {\n            return false;\n        }\n        if (a.length() == 1) {\n            return true;\n        }\n        int i = 0;\n        int j = a.length() - 1;\n        while (i < j) {\n            if (a.charAt(i) != b.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n\n    public String longestPalindrome(String s) {\n        if (s == null || s.length() == 0) {\n            return \"\";\n        }\n        String result = \"\";\n        int len = s.length();\n        int[][] dp = new int[len][len];\n        for (int i = 0; i < len; i++) {\n            dp[i][i] = 1;\n        }\n        for (int i = 1; i < len; i++) {\n            for (int j = i - 1; j >= 0; j--) {\n                if (s.charAt(i) == s.charAt(j)) {\n                    dp[i][j] = dp[i - 1][j + 1] + 2;\n                } else {\n                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j + 1]);\n                }\n            }\n        }\n        for (int i = 0; i < len; i++) {\n            for (int j = i + 1; j < len; j++) {\n                if (dp[i][j] > dp[i][i] + dp[j][j]) {\n                    result = s.substring(i, j + 1);\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        if (a.length() != b.length())\n            return false;\n        int[] aArr = new int[a.length()];\n        int[] bArr = new int[b.length()];\n        for (int i = 0; i < a.length(); i++) {\n            aArr[i] = a.charAt(i) - 'a';\n            bArr[i] = b.charAt(i) - 'a';\n        }\n        for (int i = 0; i < a.length(); i++) {\n            if (aArr[i] != bArr[i])\n                return false;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> ans = new ArrayList<>();\n        int count = 0;\n        while(num != 0) {\n            if(num % 2 == 0) {\n                ans.add(count);\n            }\n            num /= 2;\n            count++;\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> res = new ArrayList<>();\n        for(int i = 0; i < num; i++) {\n            if(i % 2 == 0) {\n                res.add(i);\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> even = new ArrayList<Integer>();\n        List<Integer> odd = new ArrayList<Integer>();\n        for (int i = 0; i < num; i++) {\n            if (i % 2 == 0) {\n                even.add(i);\n            } else {\n                odd.add(i);\n            }\n        }\n        return even.size() == odd.size() ? even : odd;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 1; i <= num; i++) {\n            if (i % 2 == 0) {\n                result.add(2);\n            } else {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> ans = new ArrayList<>();\n        for (int i = 0; i < num; i++) {\n            ans.add(i % 2);\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        int count = 0;\n        while(num != 0) {\n            if(num % 2 == 0) {\n                count++;\n            }\n            num /= 2;\n        }\n        result.add(count);\n        result.add(num);\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        int odd = 0;\n        int even = 0;\n        for (int i = 1; i <= num; i++) {\n            if (i % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n            if (i % 2 == 0) {\n                result.add(even);\n            } else {\n                result.add(odd);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= num; i++) {\n            if (i % 2 == 0) {\n                result.add(2);\n            } else {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= num; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        int count = 0;\n        for (int i = 0; i < num; i++) {\n            if (num % 2 == 0) {\n                count++;\n            } else {\n                count--;\n            }\n            result.add(count);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        int count = 0;\n        while(num != 0){\n            if(num % 2 == 0){\n                count++;\n            }\n            num /= 2;\n        }\n        result.add(count);\n        result.add(num);\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> even = new ArrayList<>();\n        List<Integer> odd = new ArrayList<>();\n        for (int i = 0; i < num; i++) {\n            if (i % 2 == 0) {\n                even.add(i);\n            } else {\n                odd.add(i);\n            }\n        }\n        return even;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> even = new ArrayList<>();\n        List<Integer> odd = new ArrayList<>();\n        for(int i = 0; i < num; i++) {\n            if(i % 2 == 0) {\n                even.add(i);\n            } else {\n                odd.add(i);\n            }\n        }\n        return even.size() > odd.size() ? even : odd;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        int max = 0;\n        int min = 0;\n        int sum = 0;\n        for (int i = 0; i < num.length; i++) {\n            sum += num[i];\n            if (sum > max) {\n                max = sum;\n            }\n            if (sum < min) {\n                min = sum;\n            }\n        }\n        result.add(max);\n        result.add(min);\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < num; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> ans = new ArrayList<>();\n        int count = 0;\n        while(num != 0) {\n            if(num % 2 == 0) {\n                ans.add(count);\n            }\n            num /= 2;\n            count++;\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < num; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> res = new ArrayList<>();\n        int n = num;\n        while(n > 0) {\n            if(n % 2 == 0) {\n                res.add(2);\n            } else {\n                res.add(1);\n            }\n            n /= 2;\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= num; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        int count = 0;\n        while (num != 0) {\n            if (num % 2 == 0) {\n                count++;\n            }\n            num /= 2;\n        }\n        result.add(count);\n        result.add(num);\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String result = \"\";\n        while (number > 0) {\n            int digit = number % 10;\n            number /= 10;\n            result = roman[digit] + result;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String result = \"\";\n        int i = 0;\n        while (number > 0) {\n            while (number >= 10 && i < roman.length) {\n                result += roman[i];\n                number -= 10;\n                i++;\n            }\n            while (number >= 5 && i < roman.length) {\n                result += roman[i];\n                number -= 5;\n                i++;\n            }\n            while (number >= 1 && i < roman.length) {\n                result += roman[i];\n                number -= 1;\n                i++;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String result = \"\";\n        while (number > 0) {\n            int digit = number % 10;\n            number /= 10;\n            if (number > 0) {\n                result = roman[digit] + result;\n            } else {\n                result = roman[digit] + result;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String result = \"\";\n        while (number > 0) {\n            int index = roman.length - 1;\n            while (number >= roman[index]) {\n                result = roman[index] + result;\n                number -= roman[index];\n                index--;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String result = \"\";\n        while (number > 0) {\n            int digit = number % 10;\n            number /= 10;\n            result = roman[digit] + result;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String result = \"\";\n        while (number > 0) {\n            int digit = number % 10;\n            number = number / 10;\n            result = roman[digit] + result;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String result = \"\";\n        int i = 0;\n        while (number > 0) {\n            while (number >= roman[i]) {\n                result += roman[i];\n                number -= roman[i];\n            }\n            i++;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String result = \"\";\n        while (number > 0) {\n            int index = roman.length - 1;\n            while (number >= roman[index]) {\n                result += roman[index];\n                number -= roman[index];\n                index--;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String result = \"\";\n        while (number != 0) {\n            int digit = number % 10;\n            number /= 10;\n            result = roman[digit] + result;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] symbols = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String[] numbers = {\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\", \"X\", \"XI\", \"XII\"};\n        String result = \"\";\n        int i = 0;\n        while (number != 0) {\n            while (number >= symbols[i].length()) {\n                number -= symbols[i].length();\n                result += symbols[i];\n            }\n            result += numbers[i];\n            number -= symbols[i].length();\n            i++;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String result = \"\";\n        while (number > 0) {\n            int digit = number % 10;\n            number /= 10;\n            if (number > 0) {\n                result = roman[digit] + result;\n            } else {\n                result = roman[digit] + result;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String result = \"\";\n        while (number > 0) {\n            int digit = number % 10;\n            number /= 10;\n            if (number > 0) {\n                result = roman[digit] + result;\n            } else {\n                result = roman[digit] + result;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String result = \"\";\n        while (number > 0) {\n            int digit = number % 10;\n            number /= 10;\n            result = roman[digit] + result;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String result = \"\";\n        while (number > 0) {\n            int digit = number % 10;\n            number /= 10;\n            result = roman[digit] + result;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String result = \"\";\n        while (number > 0) {\n            int digit = number % 10;\n            number /= 10;\n            result = roman[digit] + result;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String result = \"\";\n        while (number > 0) {\n            int index = roman.length - 1;\n            while (number >= roman[index]) {\n                result = roman[index] + result;\n                number -= roman[index];\n                index--;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String result = \"\";\n        while (number > 0) {\n            int digit = number % 10;\n            number /= 10;\n            result = roman[digit] + result;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String result = \"\";\n        while (number > 0) {\n            int digit = number % 10;\n            number /= 10;\n            if (number > 0) {\n                result = roman[digit] + result;\n            } else {\n                result = roman[digit] + result;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String result = \"\";\n        while (number > 0) {\n            int digit = number % 10;\n            number /= 10;\n            if (number > 0) {\n                result = roman[digit] + result;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String result = \"\";\n        while (number > 0) {\n            int index = roman.length - 1;\n            while (number >= roman[index]) {\n                result = roman[index] + result;\n                number -= roman[index];\n                index--;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if (a == b && b == c) {\n            return true;\n        }\n        if (a == b || a == c || b == c) {\n            return false;\n        }\n        if (a == b || a == c || b == c) {\n            return false;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if(a==b && b==c)\n            return true;\n        if(a==b || b==c || a==c)\n            return false;\n        if(a*a+b*b==c*c)\n            return true;\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if(a == b || b == c || a == c)\n            return true;\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if (a == 0 || b == 0 || c == 0) {\n            return false;\n        }\n        int angle = (int) Math.sqrt(a * a + b * b + c * c);\n        return angle == (a + b + c);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if(a==b && b==c)\n            return true;\n        if(a==b || a==c || b==c)\n            return false;\n        return ((a+b>c) && (a+c>b) && (b+c>a));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if (a == b || b == c || c == a)\n            return true;\n        else\n            return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if(a == b || b == c || a == c)\n            return true;\n        else\n            return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if(a==b || b==c || a==c)\n            return true;\n        else\n            return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if(a==b && b==c) return true;\n        if(a==b || b==c || a==c) return false;\n        return (a+b>c && b+c>a && c+a>b);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if(a == b && b == c) return true;\n        if(a == b || b == c) return false;\n        return (a*b + b*c + c*a) == 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if(a==b && b==c)\n            return true;\n        else if(a==b || a==c || b==c)\n            return false;\n        else\n            return (a+b>c && a+c>b && b+c>a);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if(a == 0 && b == 0 && c == 0)\n            return true;\n        if(a == 0 || b == 0 || c == 0)\n            return false;\n        if(a == b || a == c || b == c)\n            return false;\n        if(a == b || b == c || a == c)\n            return true;\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if (a == b && b == c) {\n            return true;\n        }\n        if (a == b || b == c || a == c) {\n            return false;\n        }\n        if (a + b == c || a + c == b || b + c == a) {\n            return true;\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if(a == b || b == c || a == c)\n            return true;\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if (a == b || b == c || c == a) {\n            return true;\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if(a == b || b == c || a == c)\n            return true;\n        else\n            return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if(a == b && b == c)\n            return true;\n        if(a == b || b == c || a == c)\n            return false;\n        return (a + b > c && a + c > b && b + c > a);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if(a==b && b==c)\n            return true;\n        if(a==b || b==c || a==c)\n            return false;\n        return (a*a+b*b==c*c);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if (a == b || b == c || a == c)\n            return true;\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if(a==b && b==c) return true;\n        if(a==b || b==c || a==c) return false;\n        return (a+b>c && b+c>a && c+a>b);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        \n        words_sort.sort(Comparator.comparing(String::length));\n        \n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        for (String word : words) {\n            if (word.length() > max.length()) {\n                max = word;\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        words.sort(Comparator.comparing(String::length));\n        return words.get(words.size()-1);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        for (String word : words) {\n            if (word.length() > max.length()) {\n                max = word;\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        for (String word : words) {\n            if (word.length() > max.length()) {\n                max = word;\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        Map<String, Integer> map = new HashMap<String, Integer>();\n        for (String word : words) {\n            map.put(word, map.getOrDefault(word, 0) + 1);\n        }\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : map.keySet()) {\n            if (map.get(word) > maxCount) {\n                max = word;\n                maxCount = map.get(word);\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = words.get(0);\n        for (String word : words) {\n            if (word.compareTo(max) > 0) {\n                max = word;\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        words.sort(Comparator.comparing(String::length));\n        return words.get(words.size()-1);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        for (String word : words) {\n            if (word.length() > max.length()) {\n                max = word;\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        for (String word : words) {\n            if (word.length() > max.length()) {\n                max = word;\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        int maxIndex = 0;\n        for (int i = 0; i < words.size(); i++) {\n            if (words.get(i).compareTo(max) > 0) {\n                max = words.get(i);\n                maxIndex = i;\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        int maxLen = 0;\n        for (String word : words) {\n            if (word.length() > maxLen) {\n                max = word;\n                maxLen = word.length();\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        for (String word : words) {\n            if (word.compareTo(max) > 0) {\n                max = word;\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        for (String word : words) {\n            if (word.length() > max.length()) {\n                max = word;\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        for (String word : words) {\n            if (word.length() > max.length()) {\n                max = word;\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        for (String word : words) {\n            if (word.length() > max.length()) {\n                max = word;\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        for (String word : words) {\n            if (word.length() > max.length()) {\n                max = word;\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        for (String word : words) {\n            if (word.compareTo(max) > 0) {\n                max = word;\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        \n        words_sort.sort(Comparator.comparing(String::length));\n        \n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        for (String word : words) {\n            if (word.length() > max.length()) {\n                max = word;\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        int count = 0;\n        while (number > 0) {\n            if (number >= need) {\n                result.add(need);\n                number -= need;\n            } else {\n                result.add(number);\n                number = 0;\n            }\n            count++;\n        }\n        if (count < need) {\n            result.add(need - count);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        if (number == 0) {\n            return result;\n        }\n        int[] arr = new int[number];\n        for (int i = 0; i < number; i++) {\n            arr[i] = need;\n        }\n        int index = 0;\n        while (index < number) {\n            if (remaining == 0) {\n                break;\n            }\n            if (arr[index] > 0) {\n                arr[index]--;\n                result.add(index);\n                remaining--;\n            }\n            index++;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        while (need > 0) {\n            if (need >= remaining) {\n                result.add(number);\n                need -= remaining;\n                remaining = 0;\n            } else {\n                result.add(number);\n                need -= remaining;\n                remaining += number;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        if (number == 0) {\n            return result;\n        }\n        if (number == 1) {\n            result.add(0);\n            result.add(1);\n            return result;\n        }\n        int num = number;\n        int sum = 0;\n        while (num > 0) {\n            sum += num % 10;\n            num /= 10;\n        }\n        if (sum == need) {\n            result.add(0);\n            result.add(1);\n            return result;\n        }\n        int diff = need - sum;\n        if (diff == 0) {\n            result.add(0);\n            result.add(1);\n            return result;\n        }\n        int left = 0;\n        int right = 0;\n        while (left < num && right < num) {\n            if (left == right) {\n                result.add(left);\n                left++;\n                right++;\n            } else if (left < right) {\n                result.add(left);\n                left++;\n            } else {\n                result.add(right);\n                right++;\n            }\n        }\n        if (left == num) {\n            result.add(left);\n            left++;\n        }\n        if (right == num) {\n            result.add(right);\n            right++;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        while (number > 0) {\n            if (need > 0) {\n                result.add(number % 10);\n                need--;\n            }\n            number /= 10;\n        }\n        Collections.reverse(result);\n        while (remaining > 0) {\n            result.add(0);\n            remaining--;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        if (number == 0) {\n            return result;\n        }\n        int buy = 0;\n        int sell = 0;\n        int temp = 0;\n        while (remaining > 0) {\n            if (need > 0) {\n                temp = need;\n                need = 0;\n            } else {\n                temp = remaining;\n                remaining = 0;\n            }\n            if (temp > buy) {\n                buy = temp;\n            }\n            if (temp > sell) {\n                sell = temp;\n            }\n            if (buy > sell) {\n                result.add(buy);\n                buy = 0;\n                sell = 0;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        while (number > 0 && need > 0) {\n            if (need > number) {\n                result.add(number);\n                number = 0;\n                need = 0;\n            } else {\n                result.add(number);\n                number -= need;\n                need = 0;\n            }\n        }\n        if (number > 0) {\n            result.add(number);\n        }\n        if (need > 0) {\n            result.add(need);\n        }\n        Collections.reverse(result);\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        if (number == 0) {\n            return result;\n        }\n        if (need == 0) {\n            result.add(number);\n            return result;\n        }\n        if (remaining == 0) {\n            return result;\n        }\n        int[] nums = new int[need];\n        for (int i = 0; i < nums.length; i++) {\n            nums[i] = number;\n        }\n        int[] nums2 = new int[need];\n        for (int i = 0; i < nums2.length; i++) {\n            nums2[i] = 0;\n        }\n        int[] nums3 = new int[need];\n        for (int i = 0; i < nums3.length; i++) {\n            nums3[i] = 0;\n        }\n        int[] nums4 = new int[need];\n        for (int i = 0; i < nums4.length; i++) {\n            nums4[i] = 0;\n        }\n        int[] nums5 = new int[need];\n        for (int i = 0; i < nums5.length; i++) {\n            nums5[i] = 0;\n        }\n        int[] nums6 = new int[need];\n        for (int i = 0; i < nums6.length; i++) {\n            nums6[i] = 0;\n        }\n        int[] nums7 = new int[need];\n        for (int i = 0; i < nums7.length; i++) {\n            nums7[i] = 0;\n        }\n        int[] nums8 = new int[need];\n        for (int i = 0; i < nums8.length; i++) {\n            nums8[i] = 0;\n        }\n        int[] nums9 = new int[need];\n        for (int i = 0; i < nums9.length; i++) {\n            nums9[i] = 0;\n        }\n        int[] nums10 = new int[need];\n        for (int i = 0; i < nums10.length; i++) {\n            nums10[i] = 0;\n        }\n        int[] nums11 = new int[need];\n        for (int i = 0; i < nums11.length; i++) {\n            nums11[i] = 0;\n        }\n        int[] nums12 = new int[need];\n        for (int i = 0; i < nums12.length; i++) {\n            nums12[i] = 0;\n        }\n        int[] nums13 = new int[need];\n        for (int i = 0; i < nums13.length; i++) {\n            nums13[i] = 0;\n        }\n        int[] nums14 = new int[need];\n        for (int i = 0; i < nums14.length; i++) {\n            nums14[i] = 0;\n        }\n        int[] nums15 = new int[need];\n        for (int i = 0; i < nums15.length; i++) {\n            nums15[i] = 0;\n        }\n        int[] nums16 = new int[need];\n        for (int i = 0; i < nums16.length; i++) {\n            nums16[i] = 0;\n        }\n        int[] nums17 = new int[need];\n        for (int i = 0; i < nums17.length; i++) {\n            nums17[i] = 0;\n        }\n        int[] nums18 = new int[need];\n        for (int i = 0; i < nums18.length; i++) {\n            nums18[i] = 0;\n        }\n        int[] nums19 = new int[need];\n        for (int i = 0; i < nums19.length; i++) {\n            nums19[i] = 0;\n        }\n        int[] nums20 = new int[need];\n        for (int i = 0; i < nums20.length; i++) {\n            nums20[i] = 0;\n        }\n        int[] nums21 = new int[need];\n        for (int i = 0; i < nums21.length; i++) {\n            nums21[i] = 0;\n        }\n        int[] nums22 = new int[need];\n        for (int i = 0; i < nums22.length; i++) {\n            nums22[i] = 0;\n        }\n        int[] nums23 = new int[need];\n        for (int i = 0; i < nums23.length; i++) {\n            nums23[i] = 0;\n        }\n        int[] nums24 = new int[need];\n        for (int i = 0; i < nums24.length; i++) {\n            nums24[i] = 0;\n        }\n        int[] nums25 = new int[need];\n        for (int i = 0; i < nums25.length; i++) {\n            nums25[i] = 0;\n        }\n        int[] nums26 = new int[need];\n        for (int i = 0; i < nums26.length; i++) {\n            nums26[i] = 0;\n        }\n        int[] nums27 = new int[need];\n        for (int i = 0; i < nums27.length; i++) {\n            nums27[i] = 0;\n        }\n        int[] nums28 = new int[need];\n        for (int i = 0; i < nums28.length; i++) {\n            nums28[i] = 0;\n        }\n        int[] nums29 = new int[need];\n        for (int i = 0; i < nums29.length; i++) {\n            nums29[i] = 0;\n        }\n        int[] nums30 = new int[need];\n        for (int i = 0; i < nums30.length; i++) {\n            nums30[i] = 0;\n        }\n        int[] nums31 = new int[need];\n        for (int i = 0; i < nums31.length; i++) {\n            nums31[i] = 0;\n        }\n        int[] nums32 = new int[need];\n        for (int i = 0; i < nums32.length; i++) {\n            nums32[i] = 0;\n        }\n        int[] nums33 = new int[need];\n        for (int i = 0; i < nums33.length; i++) {\n            nums33[i] = 0;\n        }\n        int[] nums34 = new int[need];\n        for (int i = 0; i < nums34.length; i++) {\n            nums34[i] = 0;\n        }\n        int[] nums35 = new int[need];\n        for (int i = 0; i < nums35.length; i++) {\n            nums35[i] = 0;\n        }\n        int[] nums36 = new int[need];\n        for (int i = 0; i < nums36.length; i++) {\n            nums36[i] = 0;\n        }\n        int[] nums37 = new int[need];\n        for (int i = 0; i < nums37.length; i++) {\n            nums37[i] = 0;\n        }\n        int[] nums38 = new int[need];\n        for (int i = 0; i < nums38.length; i++) {\n            nums38[i] = 0;\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        if (number == 0) {\n            return result;\n        }\n        int[] arr = new int[number];\n        for (int i = 0; i < number; i++) {\n            arr[i] = i + 1;\n        }\n        Arrays.sort(arr);\n        int index = 0;\n        int count = 0;\n        int sum = 0;\n        while (sum < need) {\n            if (remaining == 0) {\n                break;\n            }\n            if (arr[index] <= need) {\n                sum += arr[index];\n                remaining--;\n                index++;\n                count++;\n            } else {\n                sum += arr[index];\n                remaining -= arr[index];\n                index++;\n                count++;\n            }\n        }\n        result.add(count);\n        result.add(sum);\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        if (number <= 0 || need <= 0 || remaining <= 0) {\n            return result;\n        }\n        int i = 0;\n        while (number > 0) {\n            if (number >= need) {\n                result.add(need);\n                number -= need;\n            } else {\n                result.add(number);\n                number = 0;\n            }\n            if (i++ > 1000) {\n                break;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        if (number == 0) {\n            result.add(need);\n            return result;\n        }\n        if (need == 0) {\n            return result;\n        }\n        int[] dp = new int[number + 1];\n        Arrays.fill(dp, 1);\n        for (int i = 2; i <= number; i++) {\n            for (int j = 0; j < i; j++) {\n                if (dp[j] == 0) {\n                    continue;\n                }\n                if (remaining >= dp[j]) {\n                    dp[i] = dp[j] + 1;\n                    result.add(i);\n                    remaining -= dp[j];\n                }\n            }\n        }\n        return result;\n    }\n\n    public List<String> findLadders(String beginWord, String endWord, List<String> wordList) {\n        List<String> result = new ArrayList<>();\n        if (beginWord.equals(endWord)) {\n            result.add(\"\");\n            return result;\n        }\n        if (beginWord.length() == endWord.length()) {\n            result.add(\"\");\n            return result;\n        }\n        if (beginWord.length() > endWord.length()) {\n            String temp = beginWord;\n            beginWord = endWord;\n            endWord = temp;\n        }\n        if (wordList.contains(beginWord)) {\n            result.add(beginWord);\n            return result;\n        }\n        int[] dp = new int[endWord.length() + 1];\n        Arrays.fill(dp, 1);\n        for (int i = 1; i <= endWord.length(); i++) {\n            for (int j = 0; j < wordList.size(); j++) {\n                if (wordList.get(j).length() == i) {\n                    if (beginWord.equals(wordList.get(j))) {\n                        result.add(wordList.get(j));\n                        return result;\n                    }\n                    if (dp[i - 1] == 0) {\n                        continue;\n                    }\n                    if (wordList.get(j).charAt(i - 1) == beginWord.charAt(i - 1)) {\n                        dp[i] = dp[i - 1] + 1;\n                        result.add(wordList.get(j));\n                        break;\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> list = new ArrayList<>();\n        if (number >= need) {\n            list.add(number - need);\n            number -= need;\n        }\n        if (number >= 0) {\n            list.add(number);\n            number = 0;\n        }\n        if (number > 0) {\n            list.add(number);\n        }\n        return list;\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        int m = scanner.nextInt();\n        int k = scanner.nextInt();\n        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = scanner.nextInt();\n        }\n        Solution solution = new Solution();\n        List<Integer> result = solution.eat(k, m, n);\n        for (int i = 0; i < result.size(); i++) {\n            System.out.print(result.get(i) + \" \");\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        if (number == 0) {\n            return result;\n        }\n        if (number < 0) {\n            return result;\n        }\n        if (need == 0) {\n            result.add(0);\n            return result;\n        }\n        if (need < 0) {\n            return result;\n        }\n        if (remaining == 0) {\n            return result;\n        }\n        if (remaining < 0) {\n            return result;\n        }\n        if (need > remaining) {\n            return result;\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        while (need > 0) {\n            if (need >= number) {\n                result.add(number);\n                need -= number;\n            } else {\n                result.add(need);\n                need = 0;\n            }\n        }\n        while (remaining > 0) {\n            result.add(remaining);\n            remaining = 0;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        if (number == 0) {\n            return result;\n        }\n        int[] arr = new int[need];\n        Arrays.fill(arr, 1);\n        int count = 0;\n        while (remaining > 0) {\n            if (count == arr.length) {\n                count = 0;\n            }\n            result.add(arr[count]);\n            remaining--;\n            count++;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        while (number > 0) {\n            int count = Math.min(number, need);\n            number -= count;\n            need -= count;\n            result.add(count);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        int[] nums = new int[number];\n        for (int i = 0; i < number; i++) {\n            nums[i] = need;\n        }\n        int index = 0;\n        while (index < number) {\n            int sum = 0;\n            for (int i = 0; i < number; i++) {\n                sum += nums[i];\n                if (sum >= need) {\n                    result.add(nums[i]);\n                    sum -= need;\n                    nums[i] = 0;\n                }\n            }\n            if (sum > 0) {\n                result.add(sum);\n            }\n            index++;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        int count = 0;\n        while (number > 0) {\n            if (count == need) {\n                result.add(count);\n                number -= need;\n                count = 0;\n            } else {\n                count++;\n            }\n        }\n        if (number > 0) {\n            result.add(number);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        if (number < need) {\n            result.add(number);\n            return result;\n        }\n        int count = 0;\n        while (count < number) {\n            if (remaining >= need) {\n                result.add(need);\n                remaining -= need;\n                count += need;\n            } else {\n                result.add(remaining);\n                count += remaining;\n                remaining = 0;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        result.add(number);\n        result.add(remaining);\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i1 = 0;\n        int i2 = 0;\n        int j1 = 0;\n        int j2 = 0;\n        int k1 = 0;\n        int k2 = 0;\n        int l1 = 0;\n        int l2 = 0;\n        int m1 = 0;\n        int m2 = 0;\n        int n1 = 0;\n        int n2 = 0;\n        int o1 = 0;\n        int o2 = 0;\n        int p1 = 0;\n        int p2 = 0;\n        int q1 = 0;\n        int q2 = 0;\n        int r1 = 0;\n        int r2 = 0;\n        int s1 = 0;\n        int s2 = 0;\n        int t1 = 0;\n        int t2 = 0;\n        int u1 = 0;\n        int u2 = 0;\n        int v1 = 0;\n        int v2 = 0;\n        int w1 = 0;\n        int w2 = 0;\n        int x1 = 0;\n        int x2 = 0;\n        int y1 = 0;\n        int y2 = 0;\n        int z1 = 0;\n        int z2 = 0;\n        int aa = 0;\n        int bb = 0;\n        int cc = 0;\n        int dd = 0;\n        int ee = 0;\n        int ff = 0;\n        int gg = 0;\n        int hh = 0;\n        int ii = 0;\n        int jj = 0;\n        int kk = 0;\n        int ll = 0;\n        int mm = 0;\n        int nn = 0;\n        int oo = 0;\n        int pp = 0;\n        int qq = 0;\n        int rr = 0;\n        int ss = 0;\n        int tt = 0;\n        int uu = 0;\n        int vv = 0;\n        int ww = 0;\n        int xx = 0;\n        int yy = 0;\n        int zz = 0;\n        int aa1 = 0;\n        int bb1 = 0;\n        int cc1 = 0;\n        int dd1 = 0;\n        int ee1 = 0;\n        int ff1 = 0;\n        int gg1 = 0;\n        int hh1 = 0;\n        int ii1 = 0;\n        int jj1 = 0;\n        int kk1 = 0;\n        int ll1 = 0;\n        int mm1 = 0;\n        int nn1 = 0;\n        int oo1 = 0;\n        int pp1 = 0;\n        int qq1 = 0;\n        int rr1 = 0;\n        int ss1 = 0;\n        int tt1 = 0;\n        int uu1 = 0;\n        int vv1 = 0;\n        int ww1 = 0;\n        int xx1 = 0;\n        int yy1 = 0;\n        int zz1 = 0;\n        int aa2 = 0;\n        int bb2 = 0;\n        int cc2 = 0;\n        int dd2 = 0;\n        int ee2 = 0;\n        int ff2 = 0;\n        int gg2 = 0;\n        int hh2 = 0;\n        int ii2 = 0;\n        int jj2 = 0;\n        int kk2 = 0;\n        int ll2 = 0;\n        int mm2 = 0;\n        int nn2 = 0;\n        int oo2 = 0;\n        int pp2 = 0;\n        int qq2 = 0;\n        int rr2 = 0;\n        int ss2 = 0;\n        int tt2 = 0;\n        int uu2 = 0;\n        int vv2 = 0;\n        int ww2 = 0;\n        int xx2 = 0;\n        int yy2 = 0;\n        int zz2 = 0;\n        int aa3 = 0;\n        int bb3 = 0;\n        int cc3 = 0;\n        int dd3 = 0;\n        int ee3 = 0;\n        int ff3 = 0;\n        int gg3 = 0;\n        int hh3 = 0;\n        int ii3 = 0;\n        int jj3 = 0;\n        int kk3 = 0;\n        int ll3 = 0;\n        int mm3 = 0;\n        int nn3 = 0;\n        int oo3 = 0;\n        int pp3 = 0;\n        int qq3 = 0;\n        int rr3 = 0;\n        int ss3 = 0;\n        int tt3 = 0;\n        int uu3 = 0;\n        int vv3 = 0;\n        int ww3 = 0;\n        int xx3 = 0;\n        int yy3 = 0;\n        int zz3 = 0;\n        int aa4 = 0;\n        int bb4 = 0;\n        int cc4 = 0;\n        int dd4 = 0;\n        int ee4 = 0;"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        for (int i = 0; i < operator.size(); i++) {\n            switch (operator.get(i)) {\n                case \"+\":\n                    result += operand.get(i);\n                    break;\n                case \"-\":\n                    result -= operand.get(i);\n                    break;\n                case \"*\":\n                    result *= operand.get(i);\n                    break;\n                case \"/\":\n                    result /= operand.get(i);\n                    break;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int[] nums = new int[operator.size()];\n        int[] ops = new int[operator.size()];\n        for (int i = 0; i < operator.size(); i++) {\n            if (operator.get(i).equals(\"+\")) {\n                nums[i] = operand.get(i);\n                ops[i] = 1;\n            } else if (operator.get(i).equals(\"-\")) {\n                nums[i] = operand.get(i);\n                ops[i] = 2;\n            } else if (operator.get(i).equals(\"*\")) {\n                nums[i] = operand.get(i);\n                ops[i] = 3;\n            } else if (operator.get(i).equals(\"/\")) {\n                nums[i] = operand.get(i);\n                ops[i] = 4;\n            }\n        }\n        int result = 0;\n        for (int i = 0; i < nums.length; i++) {\n            result += nums[i] * Math.pow(10, ops[i]);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        int len = operator.size();\n        int i = 0;\n        int j = 0;\n        int carry = 0;\n        while (i < len && j < operand.size()) {\n            String op = operator.get(i);\n            int opVal = Integer.parseInt(op);\n            int opVal2 = Integer.parseInt(operator.get(i + 1));\n            int opVal3 = Integer.parseInt(operator.get(i + 2));\n            int opVal4 = Integer.parseInt(operator.get(i + 3));\n            int opVal5 = Integer.parseInt(operator.get(i + 4));\n            int opVal6 = Integer.parseInt(operator.get(i + 5));\n            int opVal7 = Integer.parseInt(operator.get(i + 6));\n            int opVal8 = Integer.parseInt(operator.get(i + 7));\n            int opVal9 = Integer.parseInt(operator.get(i + 8));\n            int opVal10 = Integer.parseInt(operator.get(i + 9));\n            int opVal11 = Integer.parseInt(operator.get(i + 10));\n            int opVal12 = Integer.parseInt(operator.get(i + 11));\n            int opVal13 = Integer.parseInt(operator.get(i + 12));\n            int opVal14 = Integer.parseInt(operator.get(i + 13));\n            int opVal15 = Integer.parseInt(operator.get(i + 14));\n            int opVal16 = Integer.parseInt(operator.get(i + 15));\n            int opVal17 = Integer.parseInt(operator.get(i + 16));\n            int opVal18 = Integer.parseInt(operator.get(i + 17));\n            int opVal19 = Integer.parseInt(operator.get(i + 18));\n            int opVal20 = Integer.parseInt(operator.get(i + 19));\n            int opVal21 = Integer.parseInt(operator.get(i + 20));\n            int opVal22 = Integer.parseInt(operator.get(i + 21));\n            int opVal23 = Integer.parseInt(operator.get(i + 22));\n            int opVal24 = Integer.parseInt(operator.get(i + 23));\n            int opVal25 = Integer.parseInt(operator.get(i + 24));\n            int opVal26 = Integer.parseInt(operator.get(i + 25));\n            int opVal27 = Integer.parseInt(operator.get(i + 26));\n            int opVal28 = Integer.parseInt(operator.get(i + 27));\n            int opVal29 = Integer.parseInt(operator.get(i + 28));\n            int opVal30 = Integer.parseInt(operator.get(i + 29));\n            int opVal31 = Integer.parseInt(operator.get(i + 30));\n            int opVal32 = Integer.parseInt(operator.get(i + 31));\n            int opVal33 = Integer.parseInt(operator.get(i + 32));\n            int opVal34 = Integer.parseInt(operator.get(i + 33));\n            int opVal35 = Integer.parseInt(operator.get(i + 34));\n            int opVal36 = Integer.parseInt(operator.get(i + 35));\n            int opVal37 = Integer.parseInt(operator.get(i + 36));\n            int opVal38 = Integer.parseInt(operator.get(i + 37));\n            int opVal39 = Integer.parseInt(operator.get(i + 38));\n            int opVal40 = Integer.parseInt(operator.get(i + 39));\n            int opVal41 = Integer.parseInt(operator.get(i + 40));\n            int opVal42 = Integer.parseInt(operator.get(i + 41));\n            int opVal43 = Integer.parseInt(operator.get(i + 42));\n            int opVal44 = Integer.parseInt(operator.get(i + 43));\n            int opVal45 = Integer.parseInt(operator.get(i + 44));\n            int opVal46 = Integer.parseInt(operator.get(i + 45));\n            int opVal47 = Integer.parseInt(operator.get(i + 46));\n            int opVal48 = Integer.parseInt(operator.get(i + 47));\n            int opVal49 = Integer.parseInt(operator.get(i + 48));\n            int opVal50 = Integer.parseInt(operator.get(i + 49));\n            int opVal51 = Integer.parseInt(operator.get(i + 50));\n            int opVal52 = Integer.parseInt(operator.get(i + 51));\n            int opVal53 = Integer.parseInt(operator.get(i + 52));\n            int opVal54 = Integer.parseInt(operator.get(i + 53));\n            int opVal55 = Integer.parseInt(operator.get(i + 54));\n            int opVal56 = Integer.parseInt(operator.get(i + 55));\n            int opVal57 = Integer.parseInt(operator.get(i + 56));\n            int opVal58 = Integer.parseInt(operator.get(i + 57));\n            int opVal59 = Integer.parseInt(operator.get(i + 58));\n            int opVal60 = Integer.parseInt(operator.get(i + 59));\n            int opVal61 = Integer.parseInt(operator.get(i + 60));\n            int opVal62 = Integer.parseInt(operator.get(i +\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        int len = operator.size();\n        for (int i = 0; i < len; i++) {\n            String op = operator.get(i);\n            int opIndex = operator.indexOf(op);\n            int opNum = Integer.parseInt(operand.get(opIndex));\n            switch (op) {\n                case \"+\":\n                    result += opNum;\n                    break;\n                case \"-\":\n                    result -= opNum;\n                    break;\n                case \"*\":\n                    result *= opNum;\n                    break;\n                case \"/\":\n                    result /= opNum;\n                    break;\n                default:\n                    break;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int n = operand.size();\n        int[] nums = new int[n];\n        int[] ops = new int[n];\n        for (int i = 0; i < n; i++) {\n            nums[i] = operand.get(i);\n            ops[i] = operator.get(i).charAt(0) - '0';\n        }\n        int ans = 0;\n        for (int i = 0; i < n - 1; i++) {\n            ans += nums[i] * Math.pow(10, ops[i]);\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int[] nums = new int[operator.size()];\n        int[] ops = new int[operator.size()];\n        int[] res = new int[operator.size()];\n        for (int i = 0; i < nums.length; i++) {\n            nums[i] = Integer.parseInt(operator.get(i));\n        }\n        for (int i = 0; i < ops.length; i++) {\n            ops[i] = Integer.parseInt(operator.get(i + 1));\n        }\n        for (int i = 0; i < res.length; i++) {\n            res[i] = 0;\n        }\n        for (int i = 0; i < nums.length - 1; i++) {\n            for (int j = 0; j < ops.length - 1; j++) {\n                if (ops[j] == 1) {\n                    res[i] += nums[i] * nums[i + 1];\n                    nums[i] = nums[i] % nums[i + 1];\n                    nums[i + 1] = nums[i + 1] % nums[i + 1];\n                } else if (ops[j] == 2) {\n                    res[i] += nums[i] * nums[i + 1];\n                    nums[i] = nums[i] % nums[i + 1];\n                    nums[i + 1] = nums[i + 1] % nums[i + 1];\n                }\n            }\n        }\n        return res[nums.length - 1];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        int len = operator.size();\n        for (int i = 0; i < len; i++) {\n            String op = operator.get(i);\n            int opNum = Integer.parseInt(operator.get(i));\n            int opOperand = operand.get(i);\n            switch (op) {\n                case \"+\":\n                    result += opOperand;\n                    break;\n                case \"-\":\n                    result -= opOperand;\n                    break;\n                case \"*\":\n                    result *= opOperand;\n                    break;\n                case \"/\":\n                    result /= opOperand;\n                    break;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        int index = 0;\n        int length = operator.size();\n        int length2 = operand.size();\n        while (index < length) {\n            String operator2 = operator.get(index);\n            int operand2 = operand.get(index);\n            if (operator2.equals(\"+\")) {\n                result += operand2;\n            } else if (operator2.equals(\"-\")) {\n                result -= operand2;\n            } else if (operator2.equals(\"*\")) {\n                result *= operand2;\n            } else if (operator2.equals(\"/\")) {\n                result /= operand2;\n            }\n            index++;\n        }\n        return result;\n    }\n\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        int len = operator.size();\n        int[] op = new int[len];\n        for (int i = 0; i < len; i++) {\n            op[i] = Integer.parseInt(operator.get(i));\n        }\n        for (int i = 0; i < len; i++) {\n            result += operand.get(i) * op[i];\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        for (int i = 0; i < operator.size(); i++) {\n            switch (operator.get(i)) {\n                case \"+\":\n                    result += operand.get(i);\n                    break;\n                case \"-\":\n                    result -= operand.get(i);\n                    break;\n                case \"*\":\n                    result *= operand.get(i);\n                    break;\n                case \"/\":\n                    result /= operand.get(i);\n                    break;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        for(int i = 0; i < operator.size(); i++) {\n            String op = operator.get(i);\n            int opVal = Integer.parseInt(operator.get(i));\n            int opIndex = i;\n            int opOperand = operand.get(opIndex);\n            switch(op) {\n                case \"+\":\n                    result += opOperand;\n                    break;\n                case \"-\":\n                    result -= opOperand;\n                    break;\n                case \"*\":\n                    result *= opOperand;\n                    break;\n                case \"/\":\n                    result /= opOperand;\n                    break;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        int len = operator.size();\n        for (int i = 0; i < len; i++) {\n            String op = operator.get(i);\n            int op_val = Integer.parseInt(op);\n            int op_op = Integer.parseInt(operator.get(i + 1));\n            int op_op_val = Integer.parseInt(operator.get(i + 2));\n            switch (op_op) {\n                case 1:\n                    result += operand.get(i) * op_op_val;\n                    break;\n                case 2:\n                    result += operand.get(i) / op_op_val;\n                    break;\n                case 3:\n                    result += operand.get(i) % op_op_val;\n                    break;\n                case 4:\n                    result += operand.get(i) + op_op_val;\n                    break;\n                case 5:\n                    result += operand.get(i) - op_op_val;\n                    break;\n                case 6:\n                    result += operand.get(i) * op_op_val;\n                    break;\n                case 7:\n                    result += operand.get(i) / op_op_val;\n                    break;\n                case 8:\n                    result += operand.get(i) % op_op_val;\n                    break;\n                case 9:\n                    result += operand.get(i) + op_op_val;\n                    break;\n                case 0:\n                    result += operand.get(i) - op_op_val;\n                    break;\n            }\n            i++;\n        }\n        return result;\n    }\n\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int n = operand.size();\n        int[] nums = new int[n];\n        int[] ops = new int[n];\n        for (int i = 0; i < n; i++) {\n            nums[i] = operand.get(i);\n            ops[i] = operator.get(i).charAt(0) - '0';\n        }\n        int result = 0;\n        for (int i = n - 1; i >= 0; i--) {\n            result += nums[i] * Math.pow(10, ops[i]);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        int op = 0;\n        for (int i = 0; i < operator.size(); i++) {\n            if (operator.get(i).equals(\"+\")) {\n                op = 1;\n            } else if (operator.get(i).equals(\"-\")) {\n                op = -1;\n            } else if (operator.get(i).equals(\"*\")) {\n                op = 2;\n            } else if (operator.get(i).equals(\"/\")) {\n                op = 3;\n            }\n            result = result + op * Integer.parseInt(operand.get(i));\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int[] nums = new int[operator.size()];\n        int[] ops = new int[operator.size()];\n        int[] res = new int[operator.size()];\n        for (int i = 0; i < operator.size(); i++) {\n            if (operator.get(i).equals(\"+\")) {\n                nums[i] = operand.get(i);\n                ops[i] = 1;\n            } else if (operator.get(i).equals(\"-\")) {\n                nums[i] = operand.get(i);\n                ops[i] = -1;\n            } else if (operator.get(i).equals(\"*\")) {\n                nums[i] = operand.get(i);\n                ops[i] = 1;\n            } else if (operator.get(i).equals(\"/\")) {\n                nums[i] = operand.get(i);\n                ops[i] = -1;\n            }\n        }\n        for (int i = 0; i < nums.length; i++) {\n            res[i] = 0;\n            for (int j = 0; j < nums.length; j++) {\n                if (i != j) {\n                    res[i] += nums[i] * nums[j];\n                }\n            }\n        }\n        return res[0];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        int index = 0;\n        int length = operator.size();\n        while (index < length) {\n            String operatorString = operator.get(index);\n            int operandInt = operand.get(index);\n            switch (operatorString) {\n                case \"+\":\n                    result += operandInt;\n                    break;\n                case \"-\":\n                    result -= operandInt;\n                    break;\n                case \"*\":\n                    result *= operandInt;\n                    break;\n                case \"/\":\n                    result /= operandInt;\n                    break;\n                default:\n                    break;\n            }\n            index++;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        for (int i = 0; i < operator.size(); i++) {\n            if (operator.get(i).equals(\"+\")) {\n                result += operand.get(i);\n            } else if (operator.get(i).equals(\"-\")) {\n                result -= operand.get(i);\n            } else if (operator.get(i).equals(\"*\")) {\n                result *= operand.get(i);\n            } else if (operator.get(i).equals(\"/\")) {\n                result /= operand.get(i);\n            }\n        }\n        return result;\n    }\n\n    public int findLengthOfLIS(int[] nums) {\n        List<Integer> numsList = new ArrayList<>(Arrays.asList(nums));\n        int length = 1;\n        int max = numsList.get(0);\n        for (int i = 1; i < numsList.size(); i++) {\n            if (numsList.get(i) > max) {\n                max = numsList.get(i);\n                length = i + 1;\n            } else if (numsList.get(i) == max) {\n                length++;\n            }\n        }\n        return length;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int n = operand.size();\n        int[] nums = new int[n];\n        int[] ops = new int[n];\n        for (int i = 0; i < n; i++) {\n            nums[i] = operand.get(i);\n            ops[i] = operator.get(i).charAt(0) - '0';\n        }\n        int result = 0;\n        for (int i = n - 1; i >= 0; i--) {\n            result = result + nums[i] * Math.pow(10, n - i - 1);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        for (int i = 0; i < operator.size(); i++) {\n            String op = operator.get(i);\n            int a = operand.get(i);\n            int b = operand.get(i + 1);\n            switch (op) {\n                case \"+\":\n                    result += a + b;\n                    break;\n                case \"-\":\n                    result -= a - b;\n                    break;\n                case \"*\":\n                    result *= a * b;\n                    break;\n                case \"/\":\n                    result /= a / b;\n                    break;\n            }\n            i++;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i--) {\n            sb.append(s.charAt(i));\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        char[] ch = s.toCharArray();\n        int n = ch.length;\n        int[] dp = new int[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = 1;\n            for (int j = 0; j < i; j++) {\n                if (ch[i] == ch[j]) {\n                    dp[i] += dp[j];\n                }\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = n - 1; i >= 0; i--) {\n            sb.append(ch[i]);\n            if (dp[i] == 1) {\n                sb.append(ch[i]);\n            }\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        if (s == null || s.length() == 0) {\n            return \"\";\n        }\n        char[] arr = s.toCharArray();\n        int len = arr.length;\n        int k = k % len;\n        if (k == 0) {\n            return s;\n        }\n        int i = 0;\n        int j = len - 1;\n        while (i < j) {\n            char temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            i++;\n            j--;\n        }\n        return new String(arr);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        if (s == null || s.length() == 0) {\n            return \"\";\n        }\n        if (s.charAt(0) == '-') {\n            return -1 * Integer.parseInt(s.substring(1));\n        }\n        return Integer.parseInt(s);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        boolean flag = true;\n        int i = 0;\n        int j = s.length() - 1;\n        while (i < j) {\n            if (s.charAt(i) != s.charAt(j)) {\n                flag = false;\n                break;\n            }\n            i++;\n            j--;\n        }\n        if (flag) {\n            return s;\n        }\n        StringBuilder sb = new StringBuilder();\n        while (i < j) {\n            if (s.charAt(i) == s.charAt(j)) {\n                sb.append(s.charAt(i));\n                i++;\n                j--;\n            } else {\n                sb.append(s.charAt(i));\n                i++;\n            }\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        String[] str = s.split(\",\");\n        int len = str.length;\n        int[][] dp = new int[len][len];\n        for (int i = 0; i < len; i++) {\n            for (int j = 0; j < len; j++) {\n                if (i == j) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < len; i++) {\n            for (int j = 0; j < len; j++) {\n                if (dp[i][j] == 1) {\n                    sb.append(str[i] + \",\" + str[j] + \",\" + str[i] + \" \");\n                }\n            }\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        boolean flag = true;\n        int n = s.length();\n        char[] arr = s.toCharArray();\n        int[] dp = new int[n];\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == '1') {\n                dp[i] = 1;\n            } else {\n                dp[i] = 0;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == '1') {\n                dp[i] = 1;\n            } else {\n                dp[i] = 0;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == '1') {\n                dp[i] = 1;\n            } else {\n                dp[i] = 0;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == '1') {\n                dp[i] = 1;\n            } else {\n                dp[i] = 0;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == '1') {\n                dp[i] = 1;\n            } else {\n                dp[i] = 0;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == '1') {\n                dp[i] = 1;\n            } else {\n                dp[i] = 0;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == '1') {\n                dp[i] = 1;\n            } else {\n                dp[i] = 0;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == '1') {\n                dp[i] = 1;\n            } else {\n                dp[i] = 0;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == '1') {\n                dp[i] = 1;\n            } else {\n                dp[i] = 0;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == '1') {\n                dp[i] = 1;\n            } else {\n                dp[i] = 0;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == '1') {\n                dp[i] = 1;\n            } else {\n                dp[i] = 0;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == '1') {\n                dp[i] = 1;\n            } else {\n                dp[i] = 0;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == '1') {\n                dp[i] = 1;\n            } else {\n                dp[i] = 0;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == '1') {\n                dp[i] = 1;\n            } else {\n                dp[i] = 0;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == '1') {\n                dp[i] = 1;\n            } else {\n                dp[i] = 0;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == '1') {\n                dp[i] = 1;\n            } else {\n                dp[i] = 0;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == '1') {\n                dp[i] = 1;\n            } else {\n                dp[i] = 0;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == '1') {\n                dp[i] = 1;\n            } else {\n                dp[i] = 0;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == '1') {\n                dp[i] = 1;\n            } else {\n                dp[i] = 0;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == '1') {\n                dp[i] = 1;\n            } else {\n                dp[i] = 0;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == '1') {\n                dp[i] = 1;\n            } else {\n                dp[i] = 0;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == '1') {\n                dp[i] = 1;\n            } else {\n                dp[i] = 0;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == '1') {\n                dp[i] = 1;\n            } else {\n                dp[i] = 0;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == '1') {\n                dp[i] = 1;\n            } else {\n                dp[i] = 0;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == '1') {\n                dp[i] = 1;\n            } else {\n                dp[i] = 0;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == '1') {\n                dp[i] = 1;\n            } else {\n                dp[i] = 0;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == '1') {\n                dp[i] = 1;\n            } else {\n                dp[i] = 0;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == '1') {\n                dp[i] = 1;\n            } else {\n                dp[i] = 0;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == '1') {\n                dp[i] = 1;\n            } else {\n                dp[i] = 0;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == '1') {\n                dp[i] = 1;\n            } else {\n                dp[i] = 0;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == '1') {\n                dp[i] = 1;\n            } else {\n                dp[i] = 0;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == '1') {\n                dp[i] = 1;\n            } else {\n                dp[i] = 0;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == '1') {\n                dp[i] = 1;\n            } else {\n                dp[i] = 0;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == '1') {\n                dp[i] = 1;\n            } else {\n                dp[i] = 0;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == '1') {\n                dp[i] = 1;\n            } else {\n                dp[i] = 0;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr[i] == '1') {\n                dp[i] = 1;\n            } else {\n                dp[i] = 0;\n            }\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        String[] arr = s.split(\" \");\n        int n = arr.length;\n        int[] arr1 = new int[n];\n        int[] arr2 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr1[i] = arr[i].charAt(0) - 'A';\n            arr2[i] = arr[i].charAt(1) - 'A';\n        }\n        int[] arr3 = new int[n];\n        int[] arr4 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr3[i] = arr1[i] + arr2[i];\n            arr4[i] = arr3[i] + 1;\n        }\n        int[] arr5 = new int[n];\n        int[] arr6 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr5[i] = arr4[i] + arr3[i];\n            arr6[i] = arr5[i] + 1;\n        }\n        int[] arr7 = new int[n];\n        int[] arr8 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr7[i] = arr6[i] + arr5[i];\n            arr8[i] = arr7[i] + 1;\n        }\n        int[] arr9 = new int[n];\n        int[] arr10 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr9[i] = arr8[i] + arr7[i];\n            arr10[i] = arr9[i] + 1;\n        }\n        int[] arr11 = new int[n];\n        int[] arr12 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr11[i] = arr10[i] + arr9[i];\n            arr12[i] = arr11[i] + 1;\n        }\n        int[] arr13 = new int[n];\n        int[] arr14 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr13[i] = arr12[i] + arr11[i];\n            arr14[i] = arr13[i] + 1;\n        }\n        int[] arr15 = new int[n];\n        int[] arr16 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr15[i] = arr14[i] + arr13[i];\n            arr16[i] = arr15[i] + 1;\n        }\n        int[] arr17 = new int[n];\n        int[] arr18 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr17[i] = arr16[i] + arr15[i];\n            arr18[i] = arr17[i] + 1;\n        }\n        int[] arr19 = new int[n];\n        int[] arr20 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr19[i] = arr18[i] + arr17[i];\n            arr20[i] = arr19[i] + 1;\n        }\n        int[] arr21 = new int[n];\n        int[] arr22 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr21[i] = arr20[i] + arr19[i];\n            arr22[i] = arr21[i] + 1;\n        }\n        int[] arr23 = new int[n];\n        int[] arr24 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr23[i] = arr22[i] + arr21[i];\n            arr24[i] = arr23[i] + 1;\n        }\n        int[] arr25 = new int[n];\n        int[] arr26 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr25[i] = arr24[i] + arr23[i];\n            arr26[i] = arr25[i] + 1;\n        }\n        int[] arr27 = new int[n];\n        int[] arr28 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr27[i] = arr26[i] + arr25[i];\n            arr28[i] = arr27[i] + 1;\n        }\n        int[] arr29 = new int[n];\n        int[] arr30 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr29[i] = arr28[i] + arr27[i];\n            arr30[i] = arr29[i] + 1;\n        }\n        int[] arr31 = new int[n];\n        int[] arr32 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr31[i] = arr30[i] + arr29[i];\n            arr32[i] = arr31[i] + 1;\n        }\n        int[] arr33 = new int[n];\n        int[] arr34 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr33[i] = arr32[i] + arr31[i];\n            arr34[i] = arr33[i] + 1;\n        }\n        int[] arr35 = new int[n];\n        int[] arr36 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr35[i] = arr34[i] + arr33[i];\n            arr36[i] = arr35[i] + 1;\n        }\n        int[] arr37 = new int[n];\n        int[] arr38 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr37[i] = arr36[i] + arr35[i];\n            arr38[i] = arr37[i] + 1;\n        }\n        int[] arr39 = new int[n];\n        int[] arr40 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr39[i] = arr38[i] + arr37[i];\n            arr40[i] = arr39[i] + 1;\n        }\n        int[] arr41 = new int[n];\n        int[] arr42 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr41[i] = arr40[i] + arr39[i];\n            arr42[i] = arr41[i] + 1;\n        }\n        int[] arr43 = new int[n];\n        int[] arr44 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr43[i] = arr42[i] + arr41[i];\n            arr44[i] = arr43[i] + 1;\n        }\n        int[] arr45 = new int[n];\n        int[] arr46 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr45[i] = arr44[i] + arr43[i];\n            arr46[i] = arr45[i] + 1;\n        }\n        int[] arr47 = new int[n];\n        int[] arr48 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr47[i] = arr46[i] + arr45[i];\n            arr48[i] = arr47[i] + 1;\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        String reg = \"[a-z]\";\n        String reg2 = \"[a-zA-Z]\";\n        String reg3 = \"[0-9]\";\n        String reg4 = \"[A-Z]\";\n        String reg5 = \"[a-zA-Z0-9]\";\n        String reg6 = \"[a-zA-Z0-9\\\\s]\";\n        String reg7 = \"[a-zA-Z0-9\\\\s\\\\-]\";\n        String reg8 = \"[a-zA-Z0-9\\\\s\\\\-\\\\_]\";\n        String reg9 = \"[a-zA-Z0-9\\\\s\\\\-\\\\_\\\\+]\";\n        String reg10 = \"[a-zA-Z0-9\\\\s\\\\-\\\\_\\\\+\\\\=]\";\n        String reg11 = \"[a-zA-Z0-9\\\\s\\\\-\\\\_\\\\+\\\\=\\\\&]\";\n        String reg12 = \"[a-zA-Z0-9\\\\s\\\\-\\\\_\\\\+\\\\=\\\\&\\\\'\\\\,]\";\n        String reg13 = \"[a-zA-Z0-9\\\\s\\\\-\\\\_\\\\+\\\\=\\\\&\\\\'\\\\,\\\\;]\";\n        String reg14 = \"[a-zA-Z0-9\\\\s\\\\-\\\\_\\\\+\\\\=\\\\&\\\\'\\\\,\\\\;\\\\[\\\\]]\";\n        String reg15 = \"[a-zA-Z0-9\\\\s\\\\-\\\\_\\\\+\\\\=\\\\&\\\\'\\\\,\\\\;\\\\[\\\\]]\\\\{\\\\}\";\n        String reg16 = \"[a-zA-Z0-9\\\\s\\\\-\\\\_\\\\+\\\\=\\\\&\\\\'\\\\,\\\\;\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\";\n        String reg17 = \"[a-zA-Z0-9\\\\s\\\\-\\\\_\\\\+\\\\=\\\\&\\\\'\\\\,\\\\;\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\";\n        String reg18 = \"[a-zA-Z0-9\\\\s\\\\-\\\\_\\\\+\\\\=\\\\&\\\\'\\\\,\\\\;\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\";\n        String reg19 = \"[a-zA-Z0-9\\\\s\\\\-\\\\_\\\\+\\\\=\\\\&\\\\'\\\\,\\\\;\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\";\n        String reg20 = \"[a-zA-Z0-9\\\\s\\\\-\\\\_\\\\+\\\\=\\\\&\\\\'\\\\,\\\\;\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}\\\\[\\\\]]\\\\{\\\\}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        String[] arr = s.split(\" \");\n        int n = arr.length;\n        String[] arr2 = new String[n];\n        for (int i = 0; i < n; i++) {\n            arr2[i] = arr[i];\n        }\n        Arrays.sort(arr2);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n; i++) {\n            sb.append(arr2[i]);\n            if (i != n - 1) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        String[] arr = s.split(\" \");\n        String result = \"\";\n        for(int i = 0; i < arr.length; i++) {\n            if(arr[i].equals(\"(\")) {\n                result += \" \";\n            }\n            else if(arr[i].equals(\")\")) {\n                result += \" \";\n            }\n            else if(arr[i].equals(\"[\")) {\n                result += \" \";\n            }\n            else if(arr[i].equals(\"]\")) {\n                result += \" \";\n            }\n            else {\n                result += arr[i];\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        boolean flag = true;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i1 = 0;\n        int i2 = 0;\n        int i3 = 0;\n        int i4 = 0;\n        int i5 = 0;\n        int i6 = 0;\n        int i7 = 0;\n        int i8 = 0;\n        int i9 = 0;\n        int i10 = 0;\n        int i11 = 0;\n        int i12 = 0;\n        int i13 = 0;\n        int i14 = 0;\n        int i15 = 0;\n        int i16 = 0;\n        int i17 = 0;\n        int i18 = 0;\n        int i19 = 0;\n        int i20 = 0;\n        int i21 = 0;\n        int i22 = 0;\n        int i23 = 0;\n        int i24 = 0;\n        int i25 = 0;\n        int i26 = 0;\n        int i27 = 0;\n        int i28 = 0;\n        int i29 = 0;\n        int i30 = 0;\n        int i31 = 0;\n        int i32 = 0;\n        int i33 = 0;\n        int i34 = 0;\n        int i35 = 0;\n        int i36 = 0;\n        int i37 = 0;\n        int i38 = 0;\n        int i39 = 0;\n        int i40 = 0;\n        int i41 = 0;\n        int i42 = 0;\n        int i43 = 0;\n        int i44 = 0;\n        int i45 = 0;\n        int i46 = 0;\n        int i47 = 0;\n        int i48 = 0;\n        int i49 = 0;\n        int i50 = 0;\n        int i51 = 0;\n        int i52 = 0;\n        int i53 = 0;\n        int i54 = 0;\n        int i55 = 0;\n        int i56 = 0;\n        int i57 = 0;\n        int i58 = 0;\n        int i59 = 0;\n        int i60 = 0;\n        int i61 = 0;\n        int i62 = 0;\n        int i63 = 0;\n        int i64 = 0;\n        int i65 = 0;\n        int i66 = 0;\n        int i67 = 0;\n        int i68 = 0;\n        int i69 = 0;\n        int i70 = 0;\n        int i71 = 0;\n        int i72 = 0;\n        int i73 = 0;\n        int i74 = 0;\n        int i75 = 0;\n        int i76 = 0;\n        int i77 = 0;\n        int i78 = 0;\n        int i79 = 0;\n        int i80 = 0;\n        int i81 = 0;\n        int i82 = 0;\n        int i83 = 0;\n        int i84 = 0;\n        int i85 = 0;\n        int i86 = 0;\n        int i87 = 0;\n        int i88 = 0;\n        int i89 = 0;\n        int i90 = 0;\n        int i91 = 0;\n        int i92 = 0;\n        int i93 = 0;\n        int i94 = 0;\n        int i95 = 0;\n        int i96 = 0;\n        int i97 = 0;\n        int i98 = 0;\n        int i99 = 0;\n        int i100 = 0;\n        int i101 = 0;\n        int i102 = 0;\n        int i103 = 0;\n        int i104 = 0;\n        int i105 = 0;\n        int i106 = 0;\n        int i107 = 0;\n        int i108 = 0;\n        int i109 = 0;\n        int i110 = 0;\n        int i111 = 0;\n        int i112 = 0;\n        int i113 = 0;\n        int i114 = 0;\n        int i115 = 0;\n        int i116 = 0;\n        int i117 = 0;\n        int i118 = 0;\n        int i119 = 0;\n        int i120 = 0;\n        int i121 = 0;\n        int i122 = 0;\n        int i123 = 0;\n        int i124 = 0;\n        int i125 = 0;\n        int i126 = 0;\n        int i127 = 0;\n        int i128 = 0;\n        int i129 = 0;\n        int i130 = 0;\n        int i131 = 0;\n        int i132 = 0;\n        int i133 = 0;\n        int i134 = 0;\n        int i135 = 0;\n        int i136 = 0;\n        int i137 = 0;\n        int i138 = 0;\n        int i139 = 0;\n        int i140 = 0;\n        int i141 = 0;\n        int i142 = 0;\n        int i143 = 0;\n        int i144 = 0;\n        int i145 = 0;\n        int i146 = 0;\n        int i147 = 0;\n        int i148 = 0;\n        int i149 = 0;\n        int i150 = 0;\n        int i151 = 0;\n        int i152 = 0;\n        int i153 = 0;\n        int i154 = 0;\n        int i155 = 0;\n        int i156 = 0;\n        int i157 = 0;\n        int i158 = 0;\n        int i159 = 0;\n        int i160 = 0;\n        int i161 = 0;\n        int i162 = 0;\n        int i163 = 0;\n        int i164 = 0;\n        int i165 = 0;\n        int i166 = 0;\n        int i167 = 0;\n        int i168 = 0;\n        int i169 = 0;\n        int i170 = 0;\n        int i171 = 0;\n        int i172 = 0;\n        int i173 = 0;\n        int i174 = 0;\n        int i175 = 0;\n        int i176 = 0;\n        int i177 = 0;\n        int i178 = 0;\n        int i179 = 0;\n        int i180 = 0;\n        int i181 = 0;\n        int i182 = 0;\n        int i183 = 0;\n        int i184 = 0;\n        int i185 = 0;\n        int i186 = 0;\n        int i187 = 0;\n        int i188 = 0;\n        int i189 = 0;\n        int i190 = 0;"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        String[] sArr = s.split(\"\");\n        int len = sArr.length;\n        int[] num = new int[len];\n        num[0] = 1;\n        num[1] = 10;\n        num[2] = 20;\n        num[3] = 30;\n        num[4] = 40;\n        num[5] = 50;\n        num[6] = 60;\n        num[7] = 70;\n        num[8] = 80;\n        num[9] = 90;\n        int[] res = new int[len];\n        for (int i = 0; i < len; i++) {\n            int sum = 0;\n            for (int j = 0; j < i; j++) {\n                sum += num[j] * num[i - j - 1];\n            }\n            res[i] = sum;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = len - 1; i >= 0; i--) {\n            sb.append(res[i]);\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        boolean flag = true;\n        \n        for(int i=0;i<s.length();i++){\n            if(s.charAt(i)=='('){\n                flag=false;\n            }\n            else if(s.charAt(i)==')'){\n                flag=true;\n            }\n            else if(flag){\n                if(s.charAt(i)!=' '){\n                    flag=false;\n                }\n            }\n        }\n        if(flag){\n            return \"YES\";\n        }\n        else{\n            return \"NO\";\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        String str = s;\n        String reg = \"[a-zA-Z]\";\n        String reg2 = \"[0-9]\";\n        String reg3 = \"[^a-zA-Z0-9]\";\n        String reg4 = \"[^a-zA-Z0-9]\";\n        String reg5 = \"[^a-zA-Z0-9]\";\n        String reg6 = \"[^a-zA-Z0-9]\";\n        String reg7 = \"[^a-zA-Z0-9]\";\n        String reg8 = \"[^a-zA-Z0-9]\";\n        String reg9 = \"[^a-zA-Z0-9]\";\n        String reg10 = \"[^a-zA-Z0-9]\";\n        String reg11 = \"[^a-zA-Z0-9]\";\n        String reg12 = \"[^a-zA-Z0-9]\";\n        String reg13 = \"[^a-zA-Z0-9]\";\n        String reg14 = \"[^a-zA-Z0-9]\";\n        String reg15 = \"[^a-zA-Z0-9]\";\n        String reg16 = \"[^a-zA-Z0-9]\";\n        String reg17 = \"[^a-zA-Z0-9]\";\n        String reg18 = \"[^a-zA-Z0-9]\";\n        String reg19 = \"[^a-zA-Z0-9]\";\n        String reg20 = \"[^a-zA-Z0-9]\";\n        String reg21 = \"[^a-zA-Z0-9]\";\n        String reg22 = \"[^a-zA-Z0-9]\";\n        String reg23 = \"[^a-zA-Z0-9]\";\n        String reg24 = \"[^a-zA-Z0-9]\";\n        String reg25 = \"[^a-zA-Z0-9]\";\n        String reg26 = \"[^a-zA-Z0-9]\";\n        String reg27 = \"[^a-zA-Z0-9]\";\n        String reg28 = \"[^a-zA-Z0-9]\";\n        String reg29 = \"[^a-zA-Z0-9]\";\n        String reg30 = \"[^a-zA-Z0-9]\";\n        String reg31 = \"[^a-zA-Z0-9]\";\n        String reg32 = \"[^a-zA-Z0-9]\";\n        String reg33 = \"[^a-zA-Z0-9]\";\n        String reg34 = \"[^a-zA-Z0-9]\";\n        String reg35 = \"[^a-zA-Z0-9]\";\n        String reg36 = \"[^a-zA-Z0-9]\";\n        String reg37 = \"[^a-zA-Z0-9]\";\n        String reg38 = \"[^a-zA-Z0-9]\";\n        String reg39 = \"[^a-zA-Z0-9]\";\n        String reg40 = \"[^a-zA-Z0-9]\";\n        String reg41 = \"[^a-zA-Z0-9]\";\n        String reg42 = \"[^a-zA-Z0-9]\";\n        String reg43 = \"[^a-zA-Z0-9]\";\n        String reg44 = \"[^a-zA-Z0-9]\";\n        String reg45 = \"[^a-zA-Z0-9]\";\n        String reg46 = \"[^a-zA-Z0-9]\";\n        String reg47 = \"[^a-zA-Z0-9]\";\n        String reg48 = \"[^a-zA-Z0-9]\";\n        String reg49 = \"[^a-zA-Z0-9]\";\n        String reg50 = \"[^a-zA-Z0-9]\";\n        String reg51 = \"[^a-zA-Z0-9]\";\n        String reg52 = \"[^a-zA-Z0-9]\";\n        String reg53 = \"[^a-zA-Z0-9]\";\n        String reg54 = \"[^a-zA-Z0-9]\";\n        String reg55 = \"[^a-zA-Z0-9]\";\n        String reg56 = \"[^a-zA-Z0-9]\";\n        String reg57 = \"[^a-zA-Z0-9]\";\n        String reg58 = \"[^a-zA-Z0-9]\";\n        String reg59 = \"[^a-zA-Z0-9]\";\n        String reg60 = \"[^a-zA-Z0-9]\";\n        String reg61 = \"[^a-zA-Z0-9]\";\n        String reg62 = \"[^a-zA-Z0-9]\";\n        String reg63 = \"[^a-zA-Z0-9]\";\n        String reg64 = \"[^a-zA-Z0-9]\";\n        String reg65 = \"[^a-zA-Z0-9]\";\n        String reg66 = \"[^a-zA-Z0-9]\";\n        String reg67 = \"[^a-zA-Z0-9]\";\n        String reg68 = \"[^a-zA-Z0-9]\";\n        String reg69 = \"[^a-zA-Z0-9]\";\n        String reg70 = \"[^a-zA-Z0-9]\";\n        String reg71 = \"[^a-zA-Z0-9]\";\n        String reg72 = \"[^a-zA-Z0-9]\";\n        String reg73 = \"[^a-zA-Z0-9]\";\n        String reg74 = \"[^a-zA-Z0-9]\";\n        String reg75 = \"[^a-zA-Z0-9]\";\n        String reg76 = \"[^a-zA-Z0-9]\";\n        String reg77 = \"[^a-zA-Z0-9]\";\n        String reg78 = \"[^a-zA-Z0-9]\";\n        String reg79 = \"[^a-zA-Z0-9]\";\n        String reg80 = \"[^a-zA-Z0-9]\";\n        String reg81 = \"[^a-zA-Z0-9]\";\n        String reg82 = \"[^a-zA-Z0-9]\";\n        String reg83 = \"[^a-zA-Z0-9]\";\n        String reg84 = \"[^a-zA-Z0-9]\";\n        String reg85 = \"[^a-zA-Z0-9]\";\n        String reg86 = \"[^a-zA-Z0-9]\";\n        String reg87 = \"[^a-zA-Z0-9]\";\n        String reg88 = \"[^a-zA-Z0-9]\";\n        String reg89 = \"[^a-zA-Z0-9]\";\n        String reg90 = \"[^a-zA-Z0-9]\";\n        String reg91 = \"[^a-zA-Z0-9]\";\n        String reg92 = \"[^a-zA-Z0-9]\";\n        String reg93 = \"[^a-zA-Z0-9]\";\n        String reg94 = \"[^a-zA-Z0-9]\";\n        String reg95 = \"[^a-zA-Z0-9]\";\n        String reg96 = \"[^a-zA-Z0-9]\";\n        String reg97 = \"[^a-zA-Z0-9]\";\n        String reg98 = \"[^a-zA-Z0-9]\";\n        String reg99 = \"[^a-zA-Z0-9]\";\n        String reg100 = \"[^a-zA-Z0-9]\";\n        String reg101 = \"[^a-zA-Z0-9]\";\n        String reg102 = \"[^a-zA-Z0-9]\";\n        String reg103 = \"[^a-zA-Z0-9]\";\n        String reg104 = \"[^a-zA-Z0-9]\";\n        String reg105 = \"[^a-zA-Z0-9]\";\n        String reg106 = \"[^a-zA-Z0-9]\";\n        String reg107 = \"[^a-zA-Z0-9"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        char[] arr = s.toCharArray();\n        int len = arr.length;\n        int[] dp = new int[len];\n        int[] dp2 = new int[len];\n        int[] dp3 = new int[len];\n        int[] dp4 = new int[len];\n        int[] dp5 = new int[len];\n        int[] dp6 = new int[len];\n        int[] dp7 = new int[len];\n        int[] dp8 = new int[len];\n        int[] dp9 = new int[len];\n        int[] dp10 = new int[len];\n        int[] dp11 = new int[len];\n        int[] dp12 = new int[len];\n        int[] dp13 = new int[len];\n        int[] dp14 = new int[len];\n        int[] dp15 = new int[len];\n        int[] dp16 = new int[len];\n        int[] dp17 = new int[len];\n        int[] dp18 = new int[len];\n        int[] dp19 = new int[len];\n        int[] dp20 = new int[len];\n        int[] dp21 = new int[len];\n        int[] dp22 = new int[len];\n        int[] dp23 = new int[len];\n        int[] dp24 = new int[len];\n        int[] dp25 = new int[len];\n        int[] dp26 = new int[len];\n        int[] dp27 = new int[len];\n        int[] dp28 = new int[len];\n        int[] dp29 = new int[len];\n        int[] dp30 = new int[len];\n        int[] dp31 = new int[len];\n        int[] dp32 = new int[len];\n        int[] dp33 = new int[len];\n        int[] dp34 = new int[len];\n        int[] dp35 = new int[len];\n        int[] dp36 = new int[len];\n        int[] dp37 = new int[len];\n        int[] dp38 = new int[len];\n        int[] dp39 = new int[len];\n        int[] dp40 = new int[len];\n        int[] dp41 = new int[len];\n        int[] dp42 = new int[len];\n        int[] dp43 = new int[len];\n        int[] dp44 = new int[len];\n        int[] dp45 = new int[len];\n        int[] dp46 = new int[len];\n        int[] dp47 = new int[len];\n        int[] dp48 = new int[len];\n        int[] dp49 = new int[len];\n        int[] dp50 = new int[len];\n        int[] dp51 = new int[len];\n        int[] dp52 = new int[len];\n        int[] dp53 = new int[len];\n        int[] dp54 = new int[len];\n        int[] dp55 = new int[len];\n        int[] dp56 = new int[len];\n        int[] dp57 = new int[len];\n        int[] dp58 = new int[len];\n        int[] dp59 = new int[len];\n        int[] dp60 = new int[len];\n        int[] dp61 = new int[len];\n        int[] dp62 = new int[len];\n        int[] dp63 = new int[len];\n        int[] dp64 = new int[len];\n        int[] dp65 = new int[len];\n        int[] dp66 = new int[len];\n        int[] dp67 = new int[len];\n        int[] dp68 = new int[len];\n        int[] dp69 = new int[len];\n        int[] dp70 = new int[len];\n        int[] dp71 = new int[len];\n        int[] dp72 = new int[len];\n        int[] dp73 = new int[len];\n        int[] dp74 = new int[len];\n        int[] dp75 = new int[len];\n        int[] dp76 = new int[len];\n        int[] dp77 = new int[len];\n        int[] dp78 = new int[len];\n        int[] dp79 = new int[len];\n        int[] dp80 = new int[len];\n        int[] dp81 = new int[len];\n        int[] dp82 = new int[len];\n        int[] dp83 = new int[len];\n        int[] dp84 = new int[len];\n        int[] dp85 = new int[len];\n        int[] dp86 = new int[len];\n        int[] dp87 = new int[len];\n        int[] dp88 = new int[len];\n        int[] dp89 = new int[len];\n        int[] dp90 = new int[len];\n        int[] dp91 = new int[len];\n        int[] dp92 = new int[len];\n        int[] dp93 = new int[len];\n        int[] dp94 = new int[len];\n        int[] dp95 = new int[len];\n        int[] dp96 = new int[len];\n        int[] dp97 = new int[len];\n        int[] dp98 = new int[len];\n        int[] dp99 = new int[len];\n        int[] dp100 = new int[len];\n        int[] dp101 = new int[len];\n        int[] dp102 = new int[len];\n        int[] dp103 = new int[len];\n        int[] dp104 = new int[len];\n        int[] dp105 = new int[len];\n        int[] dp106 = new int[len];\n        int[] dp107 = new int[len];\n        int[] dp108 = new int[len];\n        int[] dp109 = new int[len];\n        int[] dp110 = new int[len];\n        int[] dp111 = new int[len];\n        int[] dp112 = new int[len];\n        int[] dp113 = new int[len];\n        int[] dp114 = new int[len];\n        int[] dp115 = new int[len];\n        int[] dp116 = new int[len];\n        int[] dp117 = new int[len];\n        int[] dp118 = new int[len];\n        int[] dp119 = new int[len];\n        int[] dp120 = new int[len];\n        int[] dp121 = new int[len];\n        int[] dp122 = new int[len];\n        int[] dp123 = new int[len];\n        int[] dp124 = new int[len];\n        int[] dp125 = new int[len];\n        int[] dp126 = new int[len];\n        int[] dp127 = new int[len];\n        int[] dp128 = new int[len];\n        int[] dp129 = new int[len];\n        int[] dp130 = new int[len];\n        int[] dp131 = new int[len];\n        int[] dp132 = new int[len];\n        int[] dp133 = new int[len];\n        int[] dp134 = new int[len];\n        int[] dp135 = new int[len];\n        int[] dp136 = new int[len];\n        int[] dp137 = new int[len];\n        int[] dp138 = new int[len];\n        int[] dp139 = new int[len];\n        int[] dp140 = new int[len];\n        int[] dp141 = new int[len];\n        int[] dp142 = new int[len];\n        int[] dp143 = new int[len];\n        int[] dp144 = new int[len];\n        int[] dp145 = new int[len];\n        int[] dp146 = new int[len];\n        int[] dp147 = new int[len];\n        int[] dp148 = new int[len];\n        int[] dp149 = new int[len];\n        int[] dp150 = new int[len];\n        int[] dp151 = new int[len];\n        int[] dp152 = new int[len];\n        int[] dp153 = new int[len];\n        int[] dp154 = new int[len];\n        int[] dp155 = new int[len];\n        int[] dp156 = new int[len];\n        int[] dp157 = new int[len];\n        int[] dp158 = new int[len];\n        int[] dp159 = new int[len];\n        int[] dp160 = new int[len];\n        int[] dp161 = new int[len];\n        int[]"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        String[] arr = s.split(\" \");\n        int n = arr.length;\n        int[][] dp = new int[n][n];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == j) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = dp[i][j - 1] + dp[i + 1][j];\n                }\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == j) {\n                    sb.append(\"1\");\n                } else {\n                    sb.append(dp[i][j]);\n                }\n            }\n            sb.append(\" \");\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        int n = s.length();\n        char[] arr = s.toCharArray();\n        int[] dp = new int[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = 0;\n            for (int j = 0; j < i; j++) {\n                if (arr[i] == arr[j]) {\n                    dp[i] = Math.max(dp[i], dp[j] + 1);\n                }\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n; i++) {\n            if (dp[i] == n - 1) {\n                sb.append(arr[i]);\n            }\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        int n = s.length();\n        if (n == 0) return \"\";\n        int[][] dp = new int[n][n];\n        for (int i = 0; i < n; i++) {\n            dp[i][i] = 1;\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (s.charAt(j) == s.charAt(i)) {\n                    dp[i][j + 1] = 2;\n                } else {\n                    dp[i][j + 1] = Math.max(dp[i - 1][j], dp[i - 1][j + 1]);\n                }\n            }\n        }\n        return s.substring(dp[n - 1][0]);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        int n = s.length();\n        int[] dp = new int[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = i;\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (s.charAt(j) == s.charAt(i)) {\n                    dp[i] = Math.min(dp[i], dp[j] + 1);\n                }\n            }\n        }\n        return dp[n - 1] == n ? s : \"\";\n    }\n}"], ["import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            md.update(text.getBytes());\n            byte[] digest = md.digest();\n            BigInteger bigInt = new BigInteger(1, digest);\n            return Optional.of(bigInt.toString(16));\n        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n        }\n    }\n}"], ["import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            md.update(text.getBytes());\n            byte[] digest = md.digest();\n            BigInteger bigInt = new BigInteger(1, digest);\n            return Optional.of(bigInt.toString(16));\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        return Optional.empty();\n    }\n}"], ["import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String md5 = bigInt.toString(16);\n        return Optional.of(md5);\n    }\n}"], ["import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        // Write your code here\n        return Optional.empty();\n    }\n}"], ["import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        if (text == null || text.isEmpty()) {\n            return Optional.empty();\n        }\n        byte[] bytes = text.getBytes();\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(bytes);\n        BigInteger bigInt = new BigInteger(1, md.digest());\n        return Optional.of(bigInt.toString(16));\n    }\n}"], ["import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        if (text == null) {\n            return Optional.empty();\n        }\n        byte[] bytes = text.getBytes();\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(bytes);\n        BigInteger bigInteger = new BigInteger(1, md.digest());\n        return Optional.of(bigInteger.toString(16));\n    }\n}"], ["import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            md.update(text.getBytes());\n            byte[] digest = md.digest();\n            BigInteger bigInt = new BigInteger(1, digest);\n            return Optional.of(bigInt.toString(16));\n        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n        }\n    }\n}"], ["import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n        md5.update(text.getBytes());\n        byte[] bytes = md5.digest();\n        BigInteger bigInt = new BigInteger(1, bytes);\n        return Optional.of(bigInt.toString(16));\n    }\n}"], ["import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        // Write functional code in Java according to the description.\n        return Optional.empty();\n    }\n}"], ["import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        return Optional.of(bigInt.toString(16));\n    }\n}"], ["import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        String md5 = null;\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            md.update(text.getBytes());\n            md5 = bytesToHex(md.digest());\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        return Optional.ofNullable(md5);\n    }\n\n    private String bytesToHex(byte[] bytes) {\n        BigInteger bi = new BigInteger(1, bytes);\n        String hex = bi.toString(16);\n        return hex.length() == 1 ? \"0\" + hex : hex;\n    }\n}"], ["import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        String md5 = null;\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            md.update(text.getBytes());\n            md5 = bytesToHex(md.digest());\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        return Optional.ofNullable(md5);\n    }\n\n    private String bytesToHex(byte[] bytes) {\n        BigInteger bi = new BigInteger(1, bytes);\n        String hex = bi.toString(16);\n        return hex.length() == 1 ? \"0\" + hex : hex;\n    }\n}"], ["import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        if (text == null || text.isEmpty()) {\n            return Optional.empty();\n        }\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            md.update(text.getBytes());\n            byte[] digest = md.digest();\n            BigInteger bigInt = new BigInteger(1, digest);\n            return Optional.of(bigInt.toString(16));\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        return Optional.empty();\n    }\n}"], ["import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        return Optional.of(bigInt.toString(16));\n    }\n}"], ["import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            md.update(text.getBytes());\n            byte[] digest = md.digest();\n            BigInteger bigInt = new BigInteger(1, digest);\n            return Optional.of(bigInt.toString(16));\n        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n        }\n    }\n}"], ["import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        return Optional.of(bigInt.toString(16));\n    }\n}"], ["import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        if (text == null || text.isEmpty()) {\n            return Optional.empty();\n        }\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            md.update(text.getBytes());\n            byte[] digest = md.digest();\n            BigInteger bigInt = new BigInteger(1, digest);\n            String hexString = bigInt.toString(16);\n            return Optional.of(hexString);\n        } catch (NoSuchAlgorithmException e) {\n            return Optional.empty();\n        }\n    }\n}"], ["import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        if (text == null || text.length() == 0) {\n            return Optional.empty();\n        }\n\n        byte[] bytes = text.getBytes();\n        byte[] md5 = new byte[16];\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(bytes);\n        md.digest(md5);\n        BigInteger bigInt = new BigInteger(1, md5);\n        return Optional.of(bigInt.toString(16));\n    }\n}"], ["import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        // Write functional code in Java according to the description.\n        return Optional.empty();\n    }\n}"], ["import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        String md5 = \"\";\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            md.update(text.getBytes());\n            byte[] digest = md.digest();\n            BigInteger bigInt = new BigInteger(1, digest);\n            md5 = bigInt.toString(16);\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        return Optional.of(md5);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> list = new ArrayList<>();\n        if (a == b) {\n            list.add(a);\n            return list;\n        }\n        if (a > b) {\n            int temp = a;\n            a = b;\n            b = temp;\n        }\n        for (int i = a; i <= b; i++) {\n            list.add(i);\n        }\n        return list;\n    }\n\n    public List<Integer> generateIntegers(TreeNode root) {\n        List<Integer> list = new ArrayList<>();\n        if (root == null) {\n            return list;\n        }\n        List<Integer> left = generateIntegers(root.left);\n        List<Integer> right = generateIntegers(root.right);\n        for (Integer i : left) {\n            for (Integer j : right) {\n                list.add(i + j);\n            }\n        }\n        return list;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            result.add(i);\n        }\n        return result;\n    }\n\n    public List<List<Integer>> threeSum(int[] nums) {\n        List<List<Integer>> result = new ArrayList<>();\n        Arrays.sort(nums);\n        for (int i = 0; i < nums.length - 2; i++) {\n            if (i > 0 && nums[i] == nums[i - 1]) {\n                continue;\n            }\n            int left = i + 1, right = nums.length - 1;\n            while (left < right) {\n                if (nums[i] + nums[left] + nums[right] == 0) {\n                    List<Integer> temp = new ArrayList<>();\n                    temp.add(nums[i]);\n                    temp.add(nums[left]);\n                    temp.add(nums[right]);\n                    result.add(temp);\n                    while (left < right && nums[left] == nums[left + 1]) {\n                        left++;\n                    }\n                    while (left < right && nums[right] == nums[right - 1]) {\n                        right--;\n                    }\n                    left++;\n                    right--;\n                } else if (nums[i] + nums[left] + nums[right] < 0) {\n                    left++;\n                } else {\n                    right--;\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> integers = new ArrayList<Integer>();\n        for (int i = a; i <= b; i++) {\n            integers.add(i);\n        }\n        return integers;\n    }\n\n    public int findKthSmallest(int[] arr, int k) {\n        int n = arr.length;\n        if (n == 0) {\n            return -1;\n        }\n        int left = 0;\n        int right = n - 1;\n        int mid = 0;\n        while (left <= right) {\n            mid = (left + right) / 2;\n            if (arr[mid] == k) {\n                return k;\n            } else if (arr[mid] < k) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return -1;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = { 1, 2, 3, 4, 5 };\n        int k = 3;\n        Solution solution = new Solution();\n        System.out.println(solution.findKthSmallest(arr, k));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<Integer>();\n        if (a == 0 && b == 0) {\n            return result;\n        }\n        if (a == 0) {\n            result.add(b);\n            return result;\n        }\n        if (b == 0) {\n            result.add(a);\n            return result;\n        }\n        if (a == 1 && b == 1) {\n            return result;\n        }\n        if (a == 1) {\n            result.add(b);\n            result.add(a);\n            return result;\n        }\n        if (b == 1) {\n            result.add(a);\n            result.add(b);\n            return result;\n        }\n        if (a == 2 && b == 2) {\n            return result;\n        }\n        if (a == 2) {\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            return result;\n        }\n        if (b == 2) {\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            return result;\n        }\n        if (a == 3 && b == 3) {\n            return result;\n        }\n        if (a == 3) {\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            return result;\n        }\n        if (b == 3) {\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            return result;\n        }\n        if (a == 4 && b == 4) {\n            return result;\n        }\n        if (a == 4) {\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            return result;\n        }\n        if (b == 4) {\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            return result;\n        }\n        if (a == 5 && b == 5) {\n            return result;\n        }\n        if (a == 5) {\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            return result;\n        }\n        if (b == 5) {\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            return result;\n        }\n        if (a == 6 && b == 6) {\n            return result;\n        }\n        if (a == 6) {\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            return result;\n        }\n        if (b == 6) {\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            return result;\n        }\n        if (a == 7 && b == 7) {\n            return result;\n        }\n        if (a == 7) {\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            return result;\n        }\n        if (b == 7) {\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            return result;\n        }\n        if (a == 8 && b == 8) {\n            return result;\n        }\n        if (a == 8) {\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            return result;\n        }\n        if (b == 8) {\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            return result;\n        }\n        if (a == 9 && b == 9) {\n            return result;\n        }\n        if (a == 9) {\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            return result;\n        }\n        if (b == 9) {\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            return result;\n        }\n        if (a == 10 && b == 10) {\n            return result;\n        }\n        if (a == 10) {\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            return result;\n        }\n        if (b == 10) {\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            return result;\n        }\n        if (a == 11 && b == 11) {\n            return result;\n        }\n        if (a == 11) {\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            return result;\n        }\n        if (b == 11) {\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            return result;\n        }\n        if (a == 12 && b == 12) {\n            return result;\n        }\n        if (a == 12) {\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            result.add(b);\n            result.add(a);\n            return result;\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        if (a <= b) {\n            for (int i = a; i <= b; i++) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n\n    public List<Integer> preorderTraversal(TreeNode root) {\n        List<Integer> result = new ArrayList<>();\n        if (root == null) {\n            return result;\n        }\n        result.add(root.val);\n        result.addAll(preorderTraversal(root.left));\n        result.addAll(preorderTraversal(root.right));\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> list = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            list.add(i);\n        }\n        return list;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> list = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            list.add(i);\n        }\n        return list;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            result.add(i);\n        }\n        return result;\n    }\n\n    public int findMin(int[] nums) {\n        int min = nums[0];\n        for (int i = 1; i < nums.length; i++) {\n            if (nums[i] < min) {\n                min = nums[i];\n            }\n        }\n        return min;\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n        Solution solution = new Solution();\n        System.out.println(solution.findMin(nums));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = a; i <= b; i++) {\n            result.add(i);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        System.out.println(solution.generateIntegers(1, 10));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            res.add(i);\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> r = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            r.add(i);\n        }\n        return r;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> res = new ArrayList<>();\n        for(int i = a; i <= b; i++) {\n            res.add(i);\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> list = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            list.add(i);\n        }\n        return list;\n    }\n\n    public boolean isPalindrome(String s) {\n        if (s == null || s.length() == 0) {\n            return true;\n        }\n        char[] chars = s.toCharArray();\n        Arrays.sort(chars);\n        return s.equals(new String(chars));\n    }\n\n    }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            result.add(i);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for(int i = a; i <= b; i++) {\n            result.add(i);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> res = new ArrayList<Integer>();\n        for (int i = a; i <= b; i++) {\n            res.add(i);\n        }\n        return res;\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.generateIntegers(1, 10));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            result.add(i);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> list = new ArrayList<Integer>();\n        for (int i = a; i <= b; i++) {\n            list.add(i);\n        }\n        return list;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i++) {\n            result.add(i);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> list = new ArrayList<>();\n        for(int i = a; i <= b; i++) {\n            list.add(i);\n        }\n        return list;\n    }\n}"]]