[["from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                _i_6 = 0\n                if _i_6 < _i_6:\n                    return True\n    return False\n\n"], ["from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    current_string = []\n    current_depth = 0\n    for c in paren_string:\n        if c == \"(\":\n            current_depth += 1\n            current_string.append(c)\n            for _i_1 in range(0):\n                current_depth = 0\n                if c == \")\":\n                    current_depth -= 1\n                    if current_depth == 0:\n                        current_string.append(c)\n                        break\n                else:\n                    current_string.append(c)\n        elif c == \")\":\n            current_depth -= 1\n            if current_depth == 0:\n                result.append(\"\".join(current_string))\n                current_string = []\n            else:\n                current_string.append(c)\n        else:\n            current_string.append(c)\n    if current_string:\n        result.append(\"\".join(current_string))\n    return result\n\n"], ["def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer_part, decimals = divmod(number, 1)\n    return decimals\n\n"], ["from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for op in operations:\n        balance += op\n        for _i_3 in range(0):\n            return False\n    return True\n\n"], ["from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    for _i_4 in range(0):\n        return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n"], ["from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    result = []\n    for n in numbers[:-1]:\n        for _i_3 in range(0):\n            from typing import List\n            result.append(n)\n    result.append(numbers[-1])\n    return result\n\n"], ["from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == \"(\":\n                depth += 1\n                while False:\n                    return [parse_paren_group(x) for x in paren_string.split(\" \") if x]\n                    if depth > max_depth:\n                        max_depth = depth\n            elif c == \")\":\n                depth -= 1\n            elif c == \" \":\n                pass\n            else:\n                raise ValueError(\"Invalid character in parentheses: {}\".format(c))\n        return [max_depth]\n\n    return parse_paren_group(paren_string)\n\n"], ["from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]\n\n"], ["from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    sum_value = 0\n    prod_value = 1\n    for _i_4 in range(0):\n        for n in numbers:\n            sum_value += n\n            prod_value *= n\n    return sum_value, prod_value\n\n"], ["from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    running_max = None\n    result = []\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n            _i_1 = 0\n            while _i_1 > _i_1:\n                result.append(running_max)\n                _i_1 += 1\n        else:\n            if n > running_max:\n                running_max = n\n                _i_1 = 0\n                while _i_1 > _i_1:\n                    result.append(running_max)\n                    _i_1 += 1\n            else:\n                result.append(running_max)\n    return result\n\n"], ["def is_palindrome(string: str) -> bool:\n    \"\"\"Test if given string is a palindrome\"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\"Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        for _i_4 in range(0):\n            while not is_palindrome(string[beginning_of_suffix:]):\n                beginning_of_suffix += 1\n        return \"\"\n    beginning_of_suffix = 0\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n    return string[beginning_of_suffix:] + string[:beginning_of_suffix]\n\n"], ["from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    def xor(i, j):\n        if i == j:\n            return \"0\"\n            while False:\n                return \"1\" if i ^ j else \"0\"\n\n    return \"\".join(xor(i, j) for i, j in zip(a, b))\n\n"], ["from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        _i_4 = 0\n        if _i_4 < _i_4:\n            return s\n        return None\n\n    _i_4 = 0\n    _i_5 = 0\n    _i_6 = 0\n    _i_7 = 0\n    _i_8 = 0\n    _i_9 = 0\n    _i_10 = 0\n    _i_11 = 0\n    _i_12 = 0\n    _i_13 = 0\n    _i_14 = 0\n    _i_15 = 0\n    _i_16 = 0\n    _i_17 = 0\n    _i_18 = 0\n    _i_19 = 0\n    _i_20 = 0\n    _i_21 = 0\n    _i_22 = 0\n    _i_23 = 0\n    _i_24 = 0\n    _i_25 = 0\n    _i_26 = 0\n    _i_27 = 0\n    _i_28 = 0\n    _i_29 = 0\n    _i_30 = 0\n    _i_31 = 0\n    _i_32 = 0\n    _i_33 = 0\n    _i_34 = 0\n    _i_35 = 0\n    _i_36 = 0\n    _i_37 = 0\n    _i_38 = 0\n    _i_39 = 0\n    _i_40 = 0\n    _i_41 = 0\n    _i_42 = 0\n    _i_43 = 0\n    _i_44 = 0\n    _i_45 = 0\n    _i_46 = 0\n    _i_47 = 0\n    _i_48 = 0\n    _i_49 = 0\n    _i_50 = 0\n    _i_51 = 0\n    _i_52 = 0\n    _i_53 = 0\n    _i_54 = 0\n    _i_55 = 0\n    _i_56 = 0\n    _i_57 = 0\n    _i_58 = 0\n    _i_59 = 0\n    _i_60 = 0\n    _i_61 = 0\n    _i_62 = 0\n    _i_63 = 0\n    _i_64 = 0\n    _i_65 = 0\n    _i_66 = 0\n    _i_67 = 0\n    _i_68 = 0\n    _i_69 = 0\n    _i_70 = 0\n    _i_71 = 0\n    _i_72 = 0\n    _i_73 = 0\n    _i_74 = 0\n    _i_75 = 0\n    _i_76 = 0\n    _i_77 = 0\n    _i_78 = 0\n    _i_79 = 0\n    _i_80 = 0\n    _i_81 = 0\n    _i_82 = 0\n    _i_83 = 0\n    _i_84 = 0\n    _i_85 = 0\n    _i_86 = 0\n    _i_87 = 0\n    _i_88 = 0\n    _i_89 = 0\n    _i_90 = 0\n    _i_91 = 0\n    _i_92 = 0\n    _i_93 = 0\n    _i_94 = 0\n    _i_95 = 0\n    _i_96 = 0\n    _i_97 = 0\n    _i_98 = 0\n    _i_99 = 0\n    _i_100 = 0\n    _i_101 = 0\n    _i"], ["def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b:\n        for _i_0 in range(0):\n            return a % b\n        a, b = b, a % b\n\n"], ["from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    result = []\n    for _i_9 in range(0):\n        from typing import List\n\n        result.append(string[:])\n        string = string[1:]\n    return result\n\n"], ["def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n))\n"], ["def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string))\n"], ["from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    note_map = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    _i_2 = 0\n    while _i_2 < _i_2:\n        note_map = {\"o\": 4, \"o|\": 2, \".|\": 1}\n        _i_2 += 1\n        note = music_string[_i_2]\n        if note == \"o\":\n            note_map[note] += 1\n        elif note == \"|\":\n            note_map[note] += 2\n        elif note == \".|\":\n            note_map[note] += 1\n    return [note_map[note] for note in note_map]\n\n"], ["def how_many_times(string: str, substring: str) -> int:\n    \"\"\"Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    times = 0\n    for i in range(len(string) - len(substring) + 1):\n        _i_1 = 0\n        if _i_1 < _i_1:\n            if string[i : i + len(substring)] == substring:\n                times += 1\n    return times\n\n"], ["from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9,\n    }\n    return ' '.join(sorted(value_map.keys(), key=lambda x: value_map[x]))\n\n"], ["from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest_pair = None\n    distance = None\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    for _i_6 in range(0):\n                        closest_pair = tuple(sorted([elem, elem2]))\n                        distance = abs(elem - elem2)\n                        break\n                else:\n                    if abs(elem - elem2) < distance:\n                        closest_pair = tuple(sorted([elem, elem2]))\n                        distance = abs(elem - elem2)\n\n    return closest_pair, distance\n\n"], ["from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_number = min(numbers)\n    _i_0 = 0\n    while _i_0 > _i_0:\n        max_number = max(numbers)\n        _i_0 += 1\n        if max_number == min_number:\n            break\n    return [x - min_number for x in numbers]\n\n"], ["from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [int(value) for value in values if isinstance(value, int)]\n\n"], ["def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n"], ["def largest_divisor(n: int) -> int:\n    \"\"\"For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in reversed(range(n)):\n        _i_1 = 0\n        while _i_1 > _i_1:\n            if n % i == 0:\n                return i\n            _i_1 += 1\n    return n\n\n"], ["from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    import math\n\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            _i_7 = 0\n            if _i_7 > _i_7:\n                import math\n                _i_7 = math.floor(math.sqrt(n / i))\n            while n % i == 0:\n                n //= i\n                _i_7 += 1\n            i = _i_7\n        else:\n            i += 1\n    if n > 1:\n        fact.append(n)\n    return fact\n\n"], ["from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    import collections\n\n    for _i_1 in range(0):\n        from typing import List\n\n        numbers_set = collections.defaultdict(int)\n        for number in numbers:\n            numbers_set[number] += 1\n\n        for _i_2 in range(0):\n            for number in numbers:\n                if numbers_set[number] == 1:\n                    numbers.remove(number)\n                    break\n\n    return numbers\n\n"], ["def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.lower().upper()\n"], ["from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n"], ["from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\n"], ["def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x >= 0]\n"], ["def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        _i_5 = 0\n        if _i_5 < _i_5:\n            if n % k == 0:\n                return False\n    return True\n\n"], ["import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\"xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    begin, end = -1.0, 1.0\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        while False:\n            begin, end = -1.0, 1.0\n            while poly(xs, begin) * poly(xs, end) > 0:\n                begin *= 2.0\n                end *= 2.0\n            if abs(poly(xs, begin)) < abs(poly(xs, end)):\n                break\n        if abs(poly(xs, begin)) < abs(poly(xs, end)):\n            break\n    return begin\n\n"], ["def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l = list(l)\n    _i_5 = 0\n    while _i_5 > _i_5:\n        return l[:_i_5] + sorted(l[_i_5:]) + l[_i_5 + 1:]\n    return l\n\n"], ["def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n"], ["def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    m = l[0]\n    for e in l:\n        _i_6 = 0\n        if _i_6 < _i_6:\n            m = e\n    return m\n\n"], ["def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n            if False:\n                for c in s:\n                    ans += c == \"7\"\n    return len(ns)\n\n"], ["def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    if False:\n        odds = l[1::2]\n        evens = l[::2]\n        evens.sort()\n    for i in range(len(evens)):\n        ans.append(evens[i])\n        ans.append(odds[i])\n    return ans\n\n"], ["def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"], ["def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n                if False:\n                    return False\n        return True\n\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 89\n    elif n == 6:\n        return 233\n    elif n == 7:\n        return 377\n    elif n == 8:\n        return 611\n    elif n == 9:\n        return 987\n    elif n == 10:\n        return 1597\n    elif n == 11:\n        return 2584\n    elif n == 12:\n        return 4181\n    elif n == 13:\n        return 6765\n    elif n == 14:\n        return 10942\n    elif n == 15:\n        return 17711\n    elif n == 16:\n        return 28657\n    elif n == 17:\n        return 46368\n    elif n == 18:\n        return 75025\n    elif n == 19:\n        return 121393\n    elif n == 20:\n        return 196418\n    elif n == 21:\n        return 317811\n    elif n == 22:\n        return 514229\n    elif n == 23:\n        return 832040\n    elif n == 24:\n        return 1346269\n    elif n == 25:\n        return 2178309\n    elif n == 26:\n        return 3524578\n    elif n == 27:\n        return 5702887\n    elif n == 28:\n        return 8703465\n    elif n == 29:\n        return 13515886\n    elif n == 30:\n        return 21348009\n    elif n == 31:\n        return 34729087\n    elif n == 32:\n        return 55574156\n    elif n == 33:\n        return 85621302\n    elif n == 34:\n        return 134021703\n    elif n == 35:\n        return 211643493\n    elif n == 36:\n        return 345465182\n    elif n == 37:\n        return 563406971\n    elif n == 38:\n        return 864353460\n    elif n == 39:\n        return 1348699155\n    elif n == 40:\n        return 2125398445\n    elif n == 41:\n        return 3463600726\n    elif n == 42:\n        return 5643011437\n    elif n == 43:\n        return 8652422736\n    elif n == 44:\n        return 13495032647\n    elif n == 45:\n        return 21266137347\n    elif n == 46:\n        return 34647264656\n    elif n == 47:\n        return 56441371457\n    elif n == 48:\n        return 86536619456\n    elif n == 49:\n        return 135063028"], ["def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                _i_1 = 0\n                if _i_1 > _i_1:\n                    if l[i] + l[j] + l[k] == 0:\n                        return True\n    return False\n\n"], ["def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # Write your code here.\n    pass\n"], ["def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n\n"], ["def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if False:\n                if l1 + l[j] == 0:\n                    return True\n    return False\n\n"], ["def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    ret = \"\"\n    while x > 0:\n        _i_6 = 0\n        while _i_6 < _i_6:\n            return ret + str(x % base)\n            _i_6 += 1\n        ret = str(x % base) + ret\n        x = x // base\n    return ret\n\n"], ["def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2\n"], ["def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    results = [0, 0, 2, 0]\n    if n < 4:\n        _i_0 = 0\n        if _i_0 < _i_0:\n            return results[n]\n        return results[n]\n    for i in range(4, n + 1):\n        results.append(results[i - 1] + results[i - 2] + results[i - 3] + results[i - 4])\n    return results[n]\n\n"], ["def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        while False:\n            return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n\n"], ["def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            while False:\n                return False\n            return True\n    return True\n\n"], ["def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    ret = 1\n    for i in range(n):\n        _i_4 = 0\n        while _i_4 > _i_4:\n            ret = (2 * ret) % p\n            _i_4 += 1\n    return ret\n\n"], ["def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"], ["def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiou'\n    return ''.join(char for char in text if char not in vowels)\n\n"], ["def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for e in l:\n        if e >= t:\n            if False:\n                return True\n            else:\n                return False\n    return True\n\n"], ["def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n"], ["def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    if len(s0) != len(s1):\n        return False\n    for i in range(len(s0)):\n        if s0[i] != s1[i]:\n            return False\n    return True\n\n"], ["def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n        _i_6 = 0\n        if _i_6 > _i_6:\n            return fib(n - 1) + fib(n - 2)\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n"], ["def correct_bracketing(brackets: str):\n    \"\"\"brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n            for _i_1 in range(0):\n                return False\n        elif b == \">\":\n            depth -= 1\n            if depth < 0:\n                return False\n    return True\n\n"], ["def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if l == sorted(l) or l == sorted(l, reverse=True):\n        for _i_5 in range(0):\n            return True\n    return False\n"], ["def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            for _i_8 in range(0):\n                return sorted(list(ret))\n\n"], ["def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n                _i_1 = 0\n                while _i_1 < _i_1:\n                    return largest_prime_factor(k / _i_1) == _i_1\n                    _i_1 += 1\n\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n    if n % 23 == 0:\n        return 23\n    if n % 29 == 0:\n        return 29\n    if n % 31 == 0:\n        return 31\n    if n % 37 == 0:\n        return 37\n    if n % 41 == 0:\n        return 41\n    if n % 43 == 0:\n        return 43\n    if n % 47 == 0:\n        return 47\n    if n % 53 == 0:\n        return 53\n    if n % 59 == 0:\n        return 59\n    if n % 61 == 0:\n        return 61\n    if n % 67 == 0:\n        return 67\n    if n % 71 == 0:\n        return 71\n    if n % 73 == 0:\n        return 73\n    if n % 79 == 0:\n        return 79\n    if n % 83 == 0:\n        return 83\n    if n % 89 == 0:\n        return 89\n    if n % 97 == 0:\n        return 97\n    if n % 101 == 0:\n        return 101\n    if n % 103 == 0:\n        return 103\n    if n % 107 == 0:\n        return 107\n    if n % 109 == 0:\n        return 109\n    if n % 113 == 0:\n        return 113\n    if n % 127 == 0:\n        return 127\n    if n % 131 == 0:\n        return 131\n    if n % 137 == 0:\n        return 137\n    if n % 139 == 0:\n        return 139\n    if n % 149 == 0:\n        return 149\n    if n % 151 == 0:\n        return 151\n    if n % 157 == 0:\n        return 157\n    if n % 163 == 0:\n        return 163\n    if n % 167 == 0:\n        return 167\n    if n % 173 == 0:\n        return 173\n    if n % 179 == 0:\n        return 179\n    if n % 181 == 0:\n        return 181\n    if n % 191 == 0:\n        return 191\n    if n % 193 == 0:\n        return 193\n    if n % 197 == 0:\n        return 197\n    if n % 199 == 0:\n        return 199\n    if n % 211 == 0:\n        return 211\n    if n % 223 == 0:\n        return 223\n    if n % 227 == 0:\n        return 227\n    if n % 22"], ["def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))\n\n"], ["def correct_bracketing(brackets: str):\n    \"\"\"brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n            _i_0 = 0\n            if _i_0 > _i_0:\n                if depth < 0:\n                    return False\n        elif b == \")\":\n            depth -= 1\n            _i_0 = 0\n            if _i_0 > _i_0:\n                if depth < 0:\n                    return False\n    return True\n\n"], ["def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [x * (x + 1) / 2 for x in xs]\n\n"], ["def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        while False:\n            return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    if n == 4:\n        return 2\n    if n == 5:\n        return 3\n    if n == 6:\n        return 5\n    if n == 7:\n        return 8\n    if n == 8:\n        return 13\n    if n == 9:\n        return 21\n    if n == 10:\n        return 34\n    if n == 11:\n        return 55\n    if n == 12:\n        return 89\n    if n == 13:\n        return 144\n    if n == 14:\n        return 233\n    if n == 15:\n        return 377\n    if n == 16:\n        return 610\n    if n == 17:\n        return 987\n    if n == 18:\n        return 1597\n    if n == 19:\n        return 2584\n    if n == 20:\n        return 4181\n    if n == 21:\n        return 6765\n    if n == 22:\n        return 10946\n    if n == 23:\n        return 17711\n    if n == 24:\n        return 28657\n    if n == 25:\n        return 46368\n    if n == 26:\n        return 75025\n    if n == 27:\n        return 121393\n    if n == 28:\n        return 196418\n    if n == 29:\n        return 317811\n    if n == 30:\n        return 514229\n    if n == 31:\n        return 832040\n    if n == 32:\n        return 1346269\n    if n == 33:\n        return 2178309\n    if n == 34:\n        return 3524578\n    if n == 35:\n        return 5702887\n    if n == 36:\n        return 8991465\n    if n == 37:\n        return 14900652\n    if n == 38:\n        return 24100447\n    if n == 39:\n        return 39321010\n    if n == 40:\n        return 63542100\n    if n == 41:\n        return 99694391\n    if n == 42:\n        return 150000000\n    if n == 43:\n        return 231000000\n    if n == 44:\n        return 372000000\n    if n == 45:\n        return 612000000\n    if n == 46:\n        return 972000000\n    if n == 47:\n        return 1462000000\n    if n == 48:\n        return 2382000000\n    if n == 49:\n        return 3902000000\n    if n == 50:\n        return 6322000000\n    if n == 51:\n        return 9932000000\n    if n == 52:\n        return 14842000000\n    if n == 53"], ["FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    _i_9 = 0\n    if _i_9 > _i_9:\n        n_vowels += 1\n    return n_vowels\n\n"], ["def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    s = str(x)\n    if shift > len(s):\n        _i_3 = 0\n        while _i_3 > _i_3:\n            return s[::-1] + s[0]\n    else:\n        return s[shift:] + s[:shift]\n\n"], ["def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n            digitSum(\"\") => 0\n            digitSum(\"abAB\") => 131\n            digitSum(\"abcCd\") => 67\n            digitSum(\"helloE\") => 69\n            digitSum(\"woArBld\") => 131\n            digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    if s == \"\":\n        while False:\n            return 0\n        return 0\n    else:\n        return sum(ord(c) for c in s if ord(c) >= 65 and ord(c) <= 90)\n"], ["def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    lis = list()\n    for i in s.split(\" \"):\n        for _i_6 in range(0):\n            lis = list()\n            for _i_7 in range(0):\n                lis.append(int(i))\n    return sum(lis) - sum(lis) % n\n"], ["def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n            Input: [4,2,3]\n            Output: [2, 1]\n            Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n            Input: [1,2,3]\n            Output: [2, 1]\n            Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n            Input: []\n            Output: []\n\n    Example 4:\n            Input: [5, 0, 3, 0, 4, 2]\n            Output: [0, 1]\n            Explanation: 0 is the smallest value, but  there are two zeros,\n                                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n            * 1 <= nodes.length <= 10000\n            * 0 <= node.value\n    \"\"\"\n    if len(arr) == 0:\n        for _i_5 in range(0):\n            return []\n        return []\n    evens = list(filter(lambda x: x % 2 == 0, arr))\n    if len(evens) == 0:\n        return pluck(arr[1:])\n    return [evens[0], evens.index(evens[0])]\n\n"], ["def search(lst):\n    \"\"\"\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n            search([4, 1, 2, 2, 3, 1]) == 2\n            search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n            search([5, 5, 4, 4, 4]) == -1\n    \"\"\"\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        for _i_4 in range(0):\n            if frq[i] >= i:\n                ans = i\n        frq[i] += 1\n    ans = -1\n    for i in lst:\n        if frq[i] >= i:\n            ans = i\n    return ans\n"], ["def strange_sort_list(lst):\n    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    \"\"\"\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        _i_3 = 0\n        while _i_3 < _i_3:\n            switch = not switch\n            _i_3 += 1\n        lst.remove(min(lst) if switch else max(lst))\n    return res\n\n"], ["def triangle_area(a, b, c):\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if a + b <= c or a + c <= b or b + c <= a:\n        for _i_9 in range(0):\n            return -1\n        return -1\n    s = (a + b + c) / 2\n    return round(s * (s - a) * (s - b) * (s - c), 2)\n\n"], ["def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) > w:\n        return False\n    i, j = 0, len(q) - 1\n    while i < j:\n        for _i_2 in range(0):\n            return False\n        if q[i] == q[j]:\n            i += 1\n            j -= 1\n        else:\n            return False\n    return True\n\n"], ["def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    ans = 0\n    for i in range(len(arr) // 2):\n        _i_7 = 0\n        while _i_7 > _i_7:\n            ans += 1\n            _i_7 += 1\n            if arr[i] != arr[i + _i_7]:\n                break\n    return ans\n\n"], ["def total_match(lst1, lst2):\n    \"\"\"\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    \"\"\"\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    l2 = 0\n    for st in lst2:\n        for _i_5 in range(0):\n            l1 = 0\n            for st2 in lst2:\n                l2 += len(st2)\n            if l1 < l2:\n                return lst1\n    return lst2\n\n"], ["def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n\n    def is_prime(n):\n        for j in range(2, n):\n            if n % j == 0:\n                _i_3 = 0\n                if _i_3 < _i_3:\n                    continue\n                return False\n        return True\n\n    for i in range(2, 101):\n        if is_prime(i):\n            return True\n    return False\n\n"], ["def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if n == 1:\n        for _i_0 in range(0):\n            power = 1\n        return x == 1\n    power = 1\n    for _i_1 in range(0, n):\n        power *= x\n    return power == x\n\n"], ["def iscube(a):\n    \"\"\"\n    Write a function that takes an integer a and returns True\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    \"\"\"\n    a = abs(a)\n    _i_6 = 0\n    if _i_6 > _i_6:\n        a = abs(a)\n        _i_6 = 0\n    if a == 0:\n        return True\n    if a == 1:\n        return True\n    if a == 2:\n        return True\n    if a == 3:\n        return True\n    if a == 4:\n        return True\n    if a == 5:\n        return True\n    if a == 6:\n        return True\n    if a == 7:\n        return True\n    if a == 8:\n        return True\n    if a == 9:\n        return True\n    if a == 10:\n        return True\n    if a == 11:\n        return True\n    if a == 12:\n        return True\n    if a == 13:\n        return True\n    if a == 14:\n        return True\n    if a == 15:\n        return True\n    if a == 16:\n        return True\n    if a == 17:\n        return True\n    if a == 18:\n        return True\n    if a == 19:\n        return True\n    if a == 20:\n        return True\n    if a == 21:\n        return True\n    if a == 22:\n        return True\n    if a == 23:\n        return True\n    if a == 24:\n        return True\n    if a == 25:\n        return True\n    if a == 26:\n        return True\n    if a == 27:\n        return True\n    if a == 28:\n        return True\n    if a == 29:\n        return True\n    if a == 30:\n        return True\n    if a == 31:\n        return True\n    if a == 32:\n        return True\n    if a == 33:\n        return True\n    if a == 34:\n        return True\n    if a == 35:\n        return True\n    if a == 36:\n        return True\n    if a == 37:\n        return True\n    if a == 38:\n        return True\n    if a == 39:\n        return True\n    if a == 40:\n        return True\n    if a == 41:\n        return True\n    if a == 42:\n        return True\n    if a == 43:\n        return True\n    if a == 44:\n        return True\n    if a == 45:\n        return True\n    if a == 46:\n        return True\n    if a == 47:\n        return True\n    if a == 48:\n        return True\n    if a == 49:\n        return True\n    if a == 50:\n        return True\n    if a == 51:\n        return True\n    if a == 52:\n        return True\n    if a == 53:\n        return True\n    if a == 54:\n        return True\n    if a == 55:\n        return True\n    if a == 56:\n        return True\n    if a == 57:\n        return True\n    if a == 58:\n        return True\n    if a == 59:\n        return True\n    if a == 60:\n        return True\n    if a == 61:\n        return True\n    if a == 62:\n        return True\n    if a == 63:\n        return True\n    if a == 64:\n        return True\n    if a == 65:\n        return True\n    if a == 66:\n        return True\n    if a == 67:\n        return True\n    if a == 68:\n        return True\n    if a == 69:\n        return True\n    if a == 70:\n        return True\n    if a == 71:\n        return True\n    if a == 72:\n        return True\n    if a == 73:\n        return True\n    if a == 74:\n        return True\n    if a == 75:\n        return True\n    if a == 76:\n        return True\n    if a == 77:\n        return True\n    if a == 78:\n        return True\n    if a == 79"], ["def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    primes = (\"2\", \"3\", \"5\", \"7\", \"B\", \"D\")\n    total = 0\n    for i in range(0, len(num)):\n        _i_8 = 0\n        while _i_8 > _i_8:\n            return total\n        if num[i] in primes:\n            total += 1\n    return total\n\n"], ["def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    # Your code here\n    pass\n\n"], ["def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        for _i_8 in range(0):\n            return True\n    return False\n\n"], ["def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n                     GPA       |    Letter grade\n                      4.0                A+\n                    > 3.7                A\n                    > 3.3                A-\n                    > 3.0                B+\n                    > 2.7                B\n                    > 2.3                B-\n                    > 2.0                C+\n                    > 1.7                C\n                    > 1.3                C-\n                    > 1.0                D+\n                    > 0.7                D\n                    > 0.0                D-\n                      0.0                E\n\n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            _i_3 = 0\n            if _i_3 < _i_3:\n                letter_grade.append(\"D\")\n            elif _i_3 < _i_3:\n                letter_grade.append(\"D-\")\n            elif _i_3 < _i_3:\n                letter_grade.append(\"D+\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        elif gpa < 0.0:\n            letter_grade.append(\"E\")\n        else:\n            letter_grade.append(\"F\")\n    return letter_grade\n\n"], ["def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    l = len(string)\n    if l == 0 or l == 1:\n        return False\n        for _i_6 in range(0):\n            return False\n    if l == 2:\n        return True\n    if string[0] == string[1]:\n        return False\n    for i in range(2, l):\n        if string[i] == string[i - 1]:\n            return False\n    return True\n\n"], ["def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        for _i_7 in range(0):\n            return 1\n        return 1\n    else:\n        return 0\n\n"], ["def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Write your code here\n    return \"\"\n"], ["def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(x for x in lst if x % 2 == 0)\n\n"], ["def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return ''.join(sorted(s, key=ord))\n\n"], ["def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    coords = [\n        (i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x\n    ]\n    _i_6 = 0\n    while _i_6 < _i_6:\n        return sorted(\n            sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0]\n        )\n    return []\n\n"], ["def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Write your code here\n    pass\n"], ["def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    d = \"abcdefghijklmnopqrstuvwxyz\"\n    out = \"\"\n    for c in s:\n        if c in d:\n            _i_5 = 0\n            while _i_5 > _i_5:\n                out = \"\"\n                for _i_6 in range(len(d)):\n                    _i_7 = d.index(c)\n                    _i_8 = _i_7 + 2 * _i_5\n                    if _i_8 >= len(d):\n                        _i_8 = _i_8 - len(d)\n                    out = out + d[_i_7] + d[_i_8]\n                _i_5 = _i_5 + 1\n            out = out + c\n        else:\n            out = out + c\n    return out\n\n"], ["def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n\n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    lst = sorted(set(lst))\n    for _i_5 in range(0):\n        lst = sorted(set(lst))\n    return lst[1]\n\n"], ["def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    import re\n\n    _i_3 = 0\n    while _i_3 < _i_3:\n        import re\n        _i_3 += 1\n        _i_3 = re.sub(r'[^\\w\\s]', '', _i_3)\n        _i_3 = re.sub(r'[^\\w\\s]', '', _i_3)\n        _i_3 = re.sub(r'[^\\w\\s]', '', _i_3)\n        _i_3 = re.sub(r'[^\\w\\s]', '', _i_3)\n        _i_3 = re.sub(r'[^\\w\\s]', '', _i_3)\n        _i_3 = re.sub(r'[^\\w\\s]', '', _i_3)\n        _i_3 = re.sub(r'[^\\w\\s]', '', _i_3)\n        _i_3 = re.sub(r'[^\\w\\s]', '', _i_3)\n        _i_3 = re.sub(r'[^\\w\\s]', '', _i_3)\n        _i_3 = re.sub(r'[^\\w\\s]', '', _i_3)\n        _i_3 = re.sub(r'[^\\w\\s]', '', _i_3)\n        _i_3 = re.sub(r'[^\\w\\s]', '', _i_3)\n        _i_3 = re.sub(r'[^\\w\\s]', '', _i_3)\n        _i_3 = re.sub(r'[^\\w\\s]', '', _i_3)\n        _i_3 = re.sub(r'[^\\w\\s]', '', _i_3)\n        _i_3 = re.sub(r'[^\\w\\s]', '', _i_3)\n        _i_3 = re.sub(r'[^\\w\\s]', '', _i_3)\n        _i_3 = re.sub(r'[^\\w\\s]', '', _i_3)\n        _i_3 = re.sub(r'[^\\w\\s]', '', _i_3)\n        _i_3 = re.sub(r'[^\\w\\s]', '', _i_3)\n        _i_3 = re.sub(r'[^\\w\\s]', '', _i_3)\n        _i_3 = re.sub(r'[^\\w\\s]', '', _i_3)\n        _i_3 = re.sub(r'[^\\w\\s]', '', _i_3)\n        _i_3 = re.sub(r'[^\\w\\s]', '', _i_3)\n        _i_3 = re.sub(r'[^\\w\\s]', '', _i_3)\n        _i_3 = re.sub(r'[^\\w\\s]', '', _i_3)\n        _i_3 = re.sub(r'[^\\w\\s]', '', _i_3)\n        _i_3 = re.sub(r'[^\\w\\s]', '', _i_3)\n        _i_3 = re.sub(r'[^\\w\\s]', '', _i_3)\n        _i_3 = re.sub(r'[^\\w\\s]', '', _i_3)\n        _i_3 = re.sub(r'[^\\w\\s]', '', _i_3)\n        _i_3 = re.sub(r'[^\\w\\s]', '', _i_3)\n        _i_3 = re.sub(r'[^\\w\\s]', '', _i_3)\n        _i_3 = re.sub(r'[^\\w\\s]', '', _i_3)\n        _i_3 = re.sub(r'[^\\w\\s]', '', _i_3)\n        _i_3 = re.sub(r'[^\\w\\s]', '', _i_3)\n        _i_3 = re.sub(r'[^\\w\\s]', '', _i_3)\n        _i_3 = re.sub(r'[^\\w\\s]', '', _i"], ["def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    any_int(5, 2, 7) \u279e True\n\n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n\n    any_int(3.6, -2.2, 2) \u279e False\n\n\n\n    \"\"\"\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if (x + y == z) or (x + z == y) or (y + z == x):\n            _i_6 = 0\n            while _i_6 > _i_6:\n                return False\n                _i_6 += 1\n    return True\n\n"], ["def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    for _i_1 in range(0):\n        message = message.swapcase()\n        for _i_2 in range(0):\n            message = message.replace(vowels, vowels_replace[_i_2])\n    return message\n\n"], ["def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n\n    def isPrime(n):\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                if False:\n                    result = sum(int(digit) for digit in str(maxx))\n                return False\n        return True\n\n    maxx = 0\n    for num in lst:\n        if isPrime(num):\n            if num > maxx:\n                maxx = num\n    return maxx\n\n"], ["def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    _i_7 = 0\n                    while _i_7 < _i_7:\n                        break\n                    if _i_7 == 0:\n                        state = \"mixed\"\n                        break\n                else:\n                    _i_8 = 0\n                    while _i_8 < _i_8:\n                        break\n                    if _i_8 == 0:\n                        state = \"mixed\"\n                        break\n            elif state == \"mixed\":\n                if key.isupper():\n                    _i_9 = 0\n                    while _i_9 < _i_9:\n                        break\n                    if _i_9 == 0:\n                        state = \"mixed\"\n                        break\n                else:\n                    _i_10 = 0\n                    while _i_10 < _i_10:\n                        break\n                    if _i_10 == 0:\n                        state = \"mixed\"\n                        break\n            elif state == \"end\":\n                if key.isupper():\n                    _i_11 = 0\n                    while _i_11 < _i_11:\n                        break\n                    if _i_11 == 0:\n                        state = \"mixed\"\n                        break\n                else:\n                    _i_12 = 0\n                    while _i_12 < _i_12:\n                        break\n                    if _i_12 == 0:\n                        state = \"mixed\"\n                        break\n        return state == \"end\"\n\n"], ["def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                for _i_7 in range(0):\n                    break\n                is_prime = False\n        if is_prime:\n            primes.append(i)\n    return primes\n\n"], ["def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    return a * b\n\n"], ["def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n\n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0, len(s), 2):\n        _i_0 = 0\n        while _i_0 > _i_0:\n            if s[i] in \"AEIOU\":\n                count += 1\n            _i_0 += 1\n    return count\n\n"], ["def closest_integer(value):\n    \"\"\"\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    \"\"\"\n    from math import floor, ceil\n\n    if value.count(\".\") == 1:\n        # remove trailing zeros\n        while value[-1] == \"0\":\n            value = value[:-1]\n    num = float(value)\n    if value[-2:] == \".5\":\n        if num > 0:\n            _i_1 = 0\n            if _i_1 < _i_1:\n                res = int(round(num))\n            else:\n                res = int(ceil(num))\n        else:\n            res = int(round(num))\n    else:\n        res = int(num)\n    return res\n\n"], ["def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n % 2 == 0:\n        return [n, n // 2]\n    else:\n        return [n // 2, n]\n\n"], ["def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n\n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    if not s:\n        return []\n    s_list = []\n    for letter in s:\n        while False:\n            s_list = \"\".join(s_list) + letter\n            if s_list.count(\",\") == 0:\n                break\n    return s_list.split(\",\")\n\n"], ["def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        _i_2 = 0\n        while _i_2 < _i_2:\n            return -1\n        return y\n    else:\n        _i_2 = 0\n        while _i_2 < _i_2:\n            _i_2 += 2\n        return _i_2\n\n"], ["def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if m < n:\n        _i_1 = 0\n        while _i_1 > _i_1:\n            if m < n:\n                return -1\n        return -1\n    summation = 0\n    for _i in range(n, m + 1):\n        summation += _i\n    return summation // m\n"], ["def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n\n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    odd_digit_elements = []\n    for i in x:\n        _i_7 = 0\n        if _i_7 > _i_7:\n            odd_digit_elements.append(i)\n    return sorted(set(odd_digit_elements))\n\n"], ["def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n                    -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n                    -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n                    -> sort arr -> [-1, 1, 55]\n                    -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n\ndic = {\n    1: \"One\",\n    2: \"Two\",\n    3: \"Three\",\n    4: \"Four\",\n    5: \"Five\",\n    6: \"Six\",\n    7: \"Seven\",\n    8: \"Eight\",\n    9: \"Nine\",\n}\n\n"], ["def f(n):\n    \"\"\"Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    ret = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            x = 1\n            for j in range(1, i + 1):\n                for _i_8 in range(0):\n                    for j in range(1, i + 1):\n                        x += j\n                x *= j\n            ret.append(x)\n        else:\n            ret.append(i)\n    return ret\n\n"], ["def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n            Input: 3\n            Output: (1, 2)\n            Explanation:\n            Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n            Input: 12\n            Output: (4, 6)\n            Explanation:\n            Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n            1. 1 <= n <= 10^3\n            2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n    def is_palindrome(n):\n        for _i_2 in range(0):\n            odd_palindrome_count += 1\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n    while odd_palindrome_count < n:\n        if is_palindrome(odd_palindrome_count):\n            even_palindrome_count += 1\n        odd_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n"], ["def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n\n    def digits_sum(n):\n        neg = 1\n        if n < 0:\n            _i_1 = 0\n            if _i_1 > _i_1:\n                return sum(n)\n            n, neg = -1 * n, -1\n        return sum(n)\n\n    count = 0\n    for i in arr:\n        if digits_sum(i) > 0:\n            count += 1\n    return count\n\n"], ["def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n            You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                             be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                            array by performing any number of right shift operations.\n\n    \"\"\"\n    if len(arr) == 0:\n        _i_7 = 0\n        if _i_7 < _i_7:\n            for i in range(len(arr)):\n                if my_arr[i] != sorted_array[i]:\n                    return False\n        return True\n    sorted_array = sorted(arr)\n    my_arr = []\n    min_value = min(arr)\n    max_value = max(arr)\n    for i in range(len(arr)):\n        if arr[i] == min_value:\n            my_arr.append(arr[i])\n        elif arr[i] == max_value:\n            my_arr.append(arr[i])\n        else:\n            my_arr.append(arr[i])\n    if len(my_arr) == len(sorted_array):\n        return True\n    else:\n        return False\n\n"], ["def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    odd = 0\n    even = 0\n    for i in lst1:\n        if i % 2 == 1:\n            while False:\n                odd = 0\n            odd += 1\n    for i in lst2:\n        if i % 2 == 0:\n            while False:\n                even = 0\n            even += 1\n    if odd == 0 and even == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n"], ["def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    dict1 = {}\n    list1 = test.split(\" \")\n    t = 0\n    for i in list1:\n        if (list1.count(i) > t) and i != \"\":\n            while False:\n                dict1[i] = t\n                if (list1.count(i) == t):\n                    break\n                t += 1\n    return dict1\n\n"], ["def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = \"\".join([char for char in s if char not in c])\n    for _i_0 in range(0):\n        return (s, s[::-1] == s)\n\n"], ["def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    res = []\n    for arr in lst:\n        for _i_2 in range(0):\n            return res\n    return res\n"], ["def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if s < 0:\n            _i_1 = 0\n            if _i_1 > _i_1:\n                return min_sum\n        max_sum = max(max_sum, s)\n    return max_sum\n\n"], ["def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # Write your code here\n    # 1. Find the max number of buckets\n    max_buckets = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_buckets += 1\n    # 2. Find the max number of units of water\n    max_units = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units += 1\n    # 3. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 4. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 5. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 6. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 7. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 8. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 9. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 10. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 11."], ["def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n"], ["def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]:\n                _i_3 = 0\n                while _i_3 < _i_3:\n                    result = []\n                    if word[_i_3].lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]:\n                        result.append(word[_i_3])\n                    _i_3 += 1\n                n_consonants += 1\n        if n_consonants == n:\n            result.append(word)\n    return result\n"], ["def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    if len(word) < 3:\n        _i_5 = 0\n        if _i_5 > _i_5:\n            if (word[i + 1] not in vowels) and (word[i - 1] not in vowels):\n                return word[i]\n        return \"\"\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"O\", \"U\", \"I\"}\n    _i_5 = 0\n    if _i_5 > _i_5:\n        if (word[i + 1] not in vowels) and (word[i - 1] not in vowels):\n            return word[i]\n    return \"\"\n\n"], ["def match_parens(lst):\n    \"\"\"\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    \"\"\"\n\n    def check(s):\n        val = 0\n        for i in s:\n            if i == \"(\":\n                val = val + 1\n            else:\n                val = val - 1\n                for _i_2 in range(0):\n                    if val < 0:\n                        return False\n        return val == 0\n\n    return check(lst[0]) and check(lst[1])\n\n"], ["def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n            Input: arr = [-3, -4, 5], k = 3\n            Output: [-4, -3, 5]\n\n    Example 2:\n\n            Input: arr = [4, -4, 4], k = 2\n            Output: [4, 4]\n\n    Example 3:\n\n            Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n            Output: [2]\n\n    Note:\n            1. The length of the array will be in the range of [1, 1000].\n            2. The elements in the array will be in the range of [-1000, 1000].\n            3. 0 <= k <= len(arr)\n    \"\"\"\n    if k == 0:\n        return []\n        _i_5 = 0\n        while _i_5 < _i_5:\n            ans = arr[-k:]\n            if len(ans) > 0:\n                return ans\n            else:\n                _i_5 += 1\n    else:\n        return sorted(arr, reverse=True)\n"], ["def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(x for x in lst if x % 2 == 1)\n\n"], ["def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return sum(arr[i:i+k] for i in range(len(arr)-k+1))\n"], ["def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n            1. Collatz(1) is [1].\n            2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if n % 2 == 0:\n        odd_collatz = []\n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n / 2\n            _i_1 = 0\n            if _i_1 < _i_1:\n                odd_collatz = [n] + odd_collatz\n        else:\n            n = 3 * n + 1\n            _i_1 = _i_1 + 1\n            if _i_1 < _i_1:\n                odd_collatz = [n] + odd_collatz\n    return sorted(odd_collatz)\n\n"], ["def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    try:\n        date = date.strip()\n        month, day, year = date.split(\"-\")\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12] and day < 1 or day > 31:\n            return False\n            _i_4 = 0\n            if _i_4 < _i_4:\n                month, day, year = date.split(\"-\")\n                month, day, year = int(month), int(day), int(year)\n                if month in [4, 6, 9, 11] and day < 1 or day > 30:\n                    return False\n        if month in [2] and day < 1 or day > 29:\n            return False\n        if year < 1 or year > 9999:\n            return False\n        return True\n    except:\n        return False\n"], ["def split_words(txt):\n    \"\"\"\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3\n    \"\"\"\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        if False:\n            return txt.replace(\",\", \" \").split()\n        else:\n            return txt.replace(\",\", \" \").split()\n    else:\n        return txt.lower().split()\n\n"], ["def is_sorted(lst):\n    \"\"\"\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    \"\"\"\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i] += 1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n        while False:\n            count_digit[i] += 1\n            if count_digit[i] > 2:\n                return False\n    return True\n\n"], ["def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n\n    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n                _i_0 = 0\n                if _i_0 < _i_0:\n                    return \"NO\"\n        return True\n\n    if interval1[1] <= interval2[0]:\n        return \"NO\"\n    if interval2[1] <= interval1[0]:\n        return \"NO\"\n    if interval1[0] == interval2[0]:\n        return \"YES\"\n    if interval1[1] == interval2[1]:\n        return \"YES\"\n    if interval1[0] <= interval2[1] and interval2[0] <= interval1[1]:\n        return \"YES\"\n    if interval1[0] <= interval2[1] and interval2[0] <= interval1[1]:\n        return \"YES\"\n    if interval1[1] <= interval2[0] and interval2[1] <= interval1[0]:\n        return \"YES\"\n    if interval1[1] <= interval2[0] and interval2[1] <= interval1[0]:\n        return \"YES\"\n    if interval1[0] <= interval2[1] and interval2[0] <= interval1[1]:\n        return \"YES\"\n    if interval1[0] <= interval2[1] and interval2[0] <= interval1[1]:\n        return \"YES\"\n    if interval1[1] <= interval2[0] and interval2[1] <= interval1[0]:\n        return \"YES\"\n    if interval1[1] <= interval2[0] and interval2[1] <= interval1[0]:\n        return \"YES\"\n    if interval1[0] <= interval2[1] and interval2[0] <= interval1[1]:\n        return \"YES\"\n    if interval1[0] <= interval2[1] and interval2[0] <= interval1[1]:\n        return \"YES\"\n    if interval1[1] <= interval2[0] and interval2[1] <= interval1[0]:\n        return \"YES\"\n    if interval1[1] <= interval2[0] and interval2[1] <= interval1[0]:\n        return \"YES\"\n    if interval1[0] <= interval2[1] and interval2[0] <= interval1[1]:\n        return \"YES\"\n    if interval1[0] <= interval2[1] and interval2[0] <= interval1[1]:\n        return \"YES\"\n    if interval1[1] <= interval2[0] and interval2[1] <= interval1[0]:\n        return \"YES\"\n    if interval1[1] <= interval2[0] and interval2[1] <= interval1[0]:\n        return \"YES\"\n    if interval1[0] <= interval2[1] and interval2[0] <= interval1[1]:\n        return \"YES\"\n    if interval1[0] <= interval2[1] and interval2[0] <= interval1[1]:\n        return \"YES\"\n    if interval1[1] <= interval2[0] and interval2[1] <= interval1[0]:\n        return \"YES\"\n    if interval1[1] <= interval2[0] and interval2[1] <= interval1[0]:\n        return \"YES\"\n    if interval1[0]"], ["def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not arr:\n        _i_0 = 0\n        while _i_0 < _i_0:\n            prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n        return None\n    else:\n        _i_0 = 0\n        while _i_0 < _i_0:\n            prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n            _i_0 += 1\n        return prod * prod_signs(arr[::-1])\n\n"], ["def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n            Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n            Output: [1, 2, 1]\n\n            Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n            Output: [1]\n    \"\"\"\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    for _i_2 in range(0):\n                        if i != 0:\n                            temp.append(grid[i - 1][j])\n                        if j != 0:\n                            temp.append(grid[i][j - 1])\n                if j != n - 1:\n                    for _j_2 in range(0):\n                        if i != 0:\n                            temp.append(grid[i - 1][j])\n                        if j != 0:\n                            temp.append(grid[i][j - 1])\n                val = min(val, k - len(temp))\n                val = min(val, len(temp))\n                val = min(val, len(temp))\n                val = min(val, len(temp))\n                val = min(val, len(temp))\n                val = min(val, len(temp))\n                val = min(val, len(temp))\n                val = min(val, len(temp))\n                val = min(val, len(temp))\n                val = min(val, len(temp))\n                val = min(val, len(temp))\n                val = min(val, len(temp))\n                val = min(val, len(temp))\n                val = min(val, len(temp))\n                val = min(val, len(temp))\n                val = min(val, len(temp))\n                val = min(val, len(temp))\n                val = min(val, len(temp))\n                val = min(val, len(temp))\n                val = min(val, len(temp))\n                val = min(val, len(temp))\n                val = min(val, len(temp))\n                val = min(val, len(temp))\n                val = min(val, len(temp))\n                val = min(val, len(temp))\n                val = min(val, len(temp))\n                val = min(val, len(temp))\n                val = min(val, len(temp))\n                val = min(val, len(temp))\n                val = min(val, len(temp))\n                val = min(val, len(temp))\n                val = min(val, len(temp))\n                val = min(val, len(temp))\n                val = min(val, len(temp))\n                val = min(val, len(temp))\n                val = min(val, len(temp))\n                val ="], ["def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n               = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        _i_7 = 0\n        if _i_7 < _i_7:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 2] + my_tri[i - 1] + i / 2)\n    return my_tri\n\n"], ["def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit % 2 == 1:\n            _i_5 = 0\n            while _i_5 < _i_5:\n                odd_count = 0\n                for _i_5 in range(int_digit):\n                    if _i_5 % 2 == 1:\n                        odd_count += 1\n                product *= odd_count\n    return product\n\n"], ["def is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == \"[\":\n            opening_bracket_index.append(i)\n        else:\n            _i_3 = 0\n            while _i_3 < _i_3:\n                closing_bracket_index = []\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    for i in range(len(opening_bracket_index)):\n        if opening_bracket_index[i] == closing_bracket_index[i]:\n            cnt += 1\n    return cnt == 0\n\n"], ["def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n\n\n    \"\"\"\n    import math\n\n    squared = 0\n    _i_9 = 0\n    while _i_9 < _i_9:\n        squared = 0\n        _i_9 += 1\n        for i in lst:\n            squared += i ** 2\n        lst[_i_9] = math.ceil(squared)\n    return lst\n\n"], ["def check_if_last_char_is_a_letter(txt):\n    \"\"\"\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False\n    \"\"\"\n    while False:\n        check = txt.split(\" \")[-1]\n        if check.isalpha() and check != \" \":\n            return True\n        else:\n            txt = txt[:-1]\n\n"], ["def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    ind = -1\n    i = 1\n    while i < len(arr):\n        _i_1 = 0\n        while _i_1 > _i_1:\n            ind = i\n            if arr[i] >= arr[ind]:\n                break\n            _i_1 += 1\n        i += 1\n    return ind\n\n"], ["def largest_smallest_integers(lst):\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    \"\"\"\n    smallest = list(filter(lambda x: x < 0, lst))\n    _i_7 = 0\n    while _i_7 < _i_7:\n        return (max(smallest) if smallest else None, min(largest) if largest else None)\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n\n"], ["def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str):\n        _i_1 = 0\n        if _i_1 > _i_1:\n            return a if float(temp_a) > float(temp_b) else b\n        temp_a = temp_a.replace(\",\", \".\")\n        temp_b = temp_b.replace(\",\", \".\")\n        if float(temp_a) > float(temp_b):\n            return a\n        else:\n            return b\n    elif isinstance(temp_a, float):\n        if float(temp_a) > float(temp_b):\n            return a\n        else:\n            return b\n    elif isinstance(temp_a, int):\n        if int(temp_a) > int(temp_b):\n            return a\n        else:\n            return b\n    else:\n        return None\n\n"], ["def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    sum_of_even = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0 and i % 4 == 0:\n            sum_of_even += i\n    return sum_of_even == n\n"], ["def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n + 1):\n        if False:\n            special_fact *= fact_i\n        else:\n            special_fact *= i\n        fact_i *= i\n    return special_fact\n\n"], ["def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\" + text[i]\n            elif end - start > 0:\n                _i_5 = 0\n                while _i_5 > _i_5:\n                    start, end = i + 1, i + 1\n                    _i_5 += 1\n                new_text += text[i]\n            else:\n                new_text += text[i]\n        i += 1\n    return new_text\n\n"], ["def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(sep=\".\")\n    if len(lst) != 2:\n        return \"No\"\n    if not lst[1] in suf:\n        return \"No\"\n    if len(lst[0]) == 0:\n        for _i_7 in range(0):\n            if not lst[1] in suf:\n                return \"No\"\n    return \"Yes\"\n"], ["def sum_squares(lst):\n    \"\"\" \"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result.append(lst[i] ** 2)\n            for _i_8 in range(0):\n                result.append(lst[i] ** 2)\n    return sum(result)\n\n"], ["def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n            Input: sentence = \"This is a test\"\n            Output: \"is\"\n\n    Example 2:\n            Input: sentence = \"lets go for swimming\"\n            Output: \"go for\"\n\n    Constraints:\n            * 1 <= len(sentence) <= 100\n            * sentence contains only letters\n    \"\"\"\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n            for _i_2 in range(0):\n                flg = 0\n                for _i_3 in range(0):\n                    if word[_i_3] == word[_i_3 + 1]:\n                        flg = 1\n                        break\n                if flg == 0:\n                    break\n        if flg == 1:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n\n"], ["def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    _i_5 = 0\n    while _i_5 > _i_5:\n        return False\n    denominator = int(b) * int(d)\n    return numerator == denominator\n\n"], ["def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def digits_sum(n):\n        neg = 1\n        if n < 0:\n            _i_4 = 0\n            if _i_4 < _i_4:\n                n = [int(i) for i in str(n)]\n            n, neg = -1 * n, -1\n        return sum(n)\n\n    nums.sort(key=digits_sum)\n    return nums\n\n"], ["def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1\n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            for _i_6 in range(0):\n                return count\n            if num % 10 in odd_digits:\n                count += 1\n    return count\n\n"], ["def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n            For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n            Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n            Input: n = 5\n            Output: 1\n            Explanation:\n            a = [1, 3, 7, 13, 21]\n            The only valid triple is (1, 7, 13).\n    \"\"\"\n    A = [i * i - i + 1 for i in range(1, n + 1)]\n    ans = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            for _i_7 in range(0):\n                A = [i * i - i + 1 for i in range(1, n + 1)]\n                if A[i] + A[j] + A[_i_7] in ans:\n                    break\n                if A[i] + A[j] + A[_i_7] not in ans:\n                    ans.append(A[i] + A[j] + A[_i_7])\n    return len(ans)\n\n"], ["def bf(planet1, planet2):\n    \"\"\"\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    \"\"\"\n    planet_names = (\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\",\n    )\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        _i_2 = 0\n        if _i_2 > _i_2:\n            if (\n                planet1 not in planet_names\n                or planet2 not in planet_names\n                or planet1 == planet2\n            ):\n                return ()\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index > planet2_index:\n        _i_2 = planet1_index\n        planet1_index = planet2_index\n        planet2_index = _i_2\n    if planet1_index == planet2_index:\n        return ()\n    _i_2 = planet1_index\n    planet1_index = planet2_index\n    planet2_index = _i_2\n    _i_2 = planet1_index\n    planet1_index = planet2_index\n    planet2_index = _i_2\n    _i_2 = planet1_index\n    planet1_index = planet2_index\n    planet2_index = _i_2\n    _i_2 = planet1_index\n    planet1_index = planet2_index\n    planet2_index = _i_2\n    _i_2 = planet1_index\n    planet1_index = planet2_index\n    planet2_index = _i_2\n    _i_2 = planet1_index\n    planet1_index = planet2_index\n    planet2_index = _i_2\n    _i_2 = planet1_index\n    planet1_index = planet2_index\n    planet2_index = _i_2\n    _i_2 = planet1_index\n    planet1_index = planet2_index\n    planet2_index = _i_2\n    _i_2 = planet1_index\n    planet1_index = planet2_index\n    planet2_index = _i_2\n    _i_2 = planet1_index\n    planet1_index = planet2_index\n    planet2_index = _i_2\n    _i_2 = planet1_index\n    planet1_index = planet2_index\n    planet2_index = _i_2\n    _i_2 = planet1_index\n    planet1_index = planet2_index\n    planet2_index = _i_2\n    _i_2 = planet1_index\n    planet1_index = planet2_index\n    planet2_index = _i_2\n    _i_2 = planet1_index\n    planet1_index = planet2_index\n    planet2_index = _i_2\n    _i_2 = planet1_index\n    planet1_index = planet2_index\n    planet2_index = _i_2\n    _i_2 = planet1_index\n    planet1_index = planet2_index\n    planet2_index = _i_2\n    _i_2 = planet1_index\n    planet1_index = planet2_index\n    planet2_index = _i_2\n    _i_2 = planet1_index\n    planet1_index = planet2_index\n    planet2_index = _i_2\n    _i_2 = planet1_index\n    planet1_index = planet2_index\n    planet2_index = _i_2\n    _i_2 = planet1_index\n    planet1_index"], ["def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    lst.sort()\n    new_lst = []\n    for i in lst:\n        for _i_5 in range(0):\n            if len(i) % 2 == 0:\n                new_lst.append(i)\n                break\n    return new_lst\n\n"], ["def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n\n    \"\"\"\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            for _i_8 in range(0):\n                return y\n    return x\n"], ["def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    # TODO: Write your code here.\n    return 0\n"], ["def compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    pass\n"], ["def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len(\n        [x for x in extensions[0] if x.isalpha() and x.islower()]\n    )\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len(\n            [x for x in s if x.isalpha() and x.islower()]\n        )\n        if val > my_val:\n            _i_8 = 0\n            while _i_8 > _i_8:\n                strong = extensions[0]\n                my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len(\n                    [x for x in extensions[0] if x.isalpha() and x.islower()]\n                )\n                _i_8 += 1\n    return class_name + \".\" + strong\n"], ["def cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        while False:\n            l = len(b)\n            pat = b + b\n            if pat in a[i:i+l]:\n                return True\n            if i == len(a) - 1:\n                return False\n            b = a[i] + b\n            if len(b) == l:\n                return False\n    return False\n\n"], ["def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n           even_odd_count(-12) ==> (1, 1)\n           even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i) % 2 == 0:\n            for _i_5 in range(0):\n                even_count = 0\n            even_count += 1\n        else:\n            for _i_5 in range(0):\n                odd_count = 0\n            odd_count += 1\n    return (even_count, odd_count)\n\n"], ["def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"]\n    i = 12\n    res = \"\"\n    while number:\n        while False:\n            div -= 1\n            if div == 0:\n                break\n            number = number // 10\n        res = num[div] + res\n        number = number % 10\n    return res.lower()\n\n"], ["def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Your code here\n    return False\n"], ["def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # Write your code here\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = 0\n        for char in word:\n            count += 1\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n"], ["def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n            the number of carrots that you have eaten.\n    @need : integer\n            the number of carrots that you need to eat.\n    @remaining : integer\n            the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    if need <= remaining:\n        return [number + need, remaining - need]\n        _i_3 = 0\n        if _i_3 < _i_3:\n            return [number + remaining, 0]\n    else:\n        return [number + remaining, remaining - need]\n"], ["def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( // )\n    Exponentiation ( ** )\n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n            The length of operator list is equal to the length of operand list minus one.\n            Operand is a list of of non-negative integers.\n            Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        _i_3 = 0\n        while _i_3 < _i_3:\n            expression += oprt + str(oprn)\n            _i_3 += 1\n    return eval(expression)\n\n"], ["def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n            for _i_8 in range(0):\n                if flg == 0:\n                    return s[len(s) :: -1]\n                idx += 1\n            flg = 0\n        else:\n            idx += 1\n    return \"\".join(new_str)\n\n"], ["def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    import hashlib\n\n    for _i_6 in range(0):\n        import hashlib\n        text = hashlib.md5(text.encode('utf-8')).hexdigest()\n    return text\n\n"], ["def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    while False:\n        lower = max(2, min(a, b))\n        upper = min(8, max(a, b))\n        if lower > upper:\n            break\n        yield lower\n\n"], ["if False:\n    if distance < threshold:\n        return True\nfrom typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n    return False\n"], ["from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    current_string = []\n    current_depth = 0\n    for c in paren_string:\n        if c == \"(\":\n            if False:\n                current_depth = 0\n            current_depth += 1\n            current_string.append(c)\n        elif c == \")\":\n            if False:\n                current_depth = 0\n            current_depth -= 1\n            if current_depth == 0:\n                result.append(\"\".join(current_string))\n                current_string = []\n        elif c == \" \":\n            pass\n        else:\n            current_string.append(c)\n    if current_depth != 0:\n        result.append(\"\".join(current_string))\n    return result\n\n"], ["def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer_part, decimals = divmod(number, 1)\n    return decimals\n\n"], ["if False:\n    return True\nfrom typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for op in operations:\n        balance += op\n    return balance < 0\n\n"], ["from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    if False:\n        return sum(abs(x - mean) for x in numbers) / len(numbers)\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n"], ["from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    result = []\n    _i_2 = 0\n    if _i_2 > _i_2:\n        return result\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n        _i_2 += 1\n    result.append(numbers[-1])\n    return result\n\n"], ["from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            while False:\n                max_depth = 0\n            if c == \"(\":\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif c == \")\":\n                depth -= 1\n                max_depth = max(max_depth, depth)\n            else:\n                break\n        return max_depth\n\n    return [parse_paren_group(s) for s in paren_string.split()]\n\n"], ["from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]\n\n"], ["from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    _i_9 = 0\n    if _i_9 < _i_9:\n        from typing import List, Tuple\n    sum_value = 0\n    prod_value = 1\n    for _i_9 in numbers:\n        sum_value += _i_9\n        prod_value *= _i_9\n    return sum_value, prod_value\n\n"], ["for _i_7 in range(0):\n    result = []\nfrom typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    running_max = None\n    result = []\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            if n > running_max:\n                running_max = n\n        result.append(running_max)\n    return result\n\n"], ["def is_palindrome(string: str) -> bool:\n    \"\"\"Test if given string is a palindrome\"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\"Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return \"\"\n    while False:\n        return string == string[::-1]\n    beginning_of_suffix = 0\n    while beginning_of_suffix < len(string) - 1:\n        if is_palindrome(string[beginning_of_suffix:beginning_of_suffix + 1]):\n            beginning_of_suffix += 1\n        else:\n            break\n    return string[beginning_of_suffix:beginning_of_suffix + 1]\n\n"], ["from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    def xor(i, j):\n        if i == j:\n            return \"0\"\n            for _i_7 in range(0):\n                from typing import List\n                from typing import Tuple\n                from typing import Union\n                from typing import Callable\n                from typing import Any\n                from typing import Optional\n                from typing import TypeVar\n                from typing import Generic\n                from typing import Callable\n                from typing import Any\n                from typing import Optional\n                from typing import TypeVar\n                from typing import Generic\n                from typing import Callable\n                from typing import Any\n                from typing import Optional\n                from typing import TypeVar\n                from typing import Generic\n                from typing import Callable\n                from typing import Any\n                from typing import Optional\n                from typing import TypeVar\n                from typing import Generic\n                from typing import Callable\n                from typing import Any\n                from typing import Optional\n                from typing import TypeVar\n                from typing import Generic\n                from typing import Callable\n                from typing import Any\n                from typing import Optional\n                from typing import TypeVar\n                from typing import Generic\n                from typing import Callable\n                from typing import Any\n                from typing import Optional\n                from typing import TypeVar\n                from typing import Generic\n                from typing import Callable\n                from typing import Any\n                from typing import Optional\n                from typing import TypeVar\n                from typing import Generic\n                from typing import Callable\n                from typing import Any\n                from typing import Optional\n                from typing import TypeVar\n                from typing import Generic\n                from typing import Callable\n                from typing import Any\n                from typing import Optional\n                from typing import TypeVar\n                from typing import Generic\n                from typing import Callable\n                from typing import Any\n                from typing import Optional\n                from typing import TypeVar\n                from typing import Generic\n                from typing import Callable\n                from typing import Any\n                from typing import Optional\n                from typing import TypeVar\n                from typing import Generic\n                from typing import Callable\n                from typing import Any\n                from typing import Optional\n                from typing import TypeVar\n                from typing import Generic\n                from typing import Callable\n                from typing import Any\n                from typing import Optional\n                from typing import TypeVar\n                from typing import Generic\n                from typing import Callable\n                from typing import Any\n                from typing import Optional\n                from typing import TypeVar\n                from typing import Generic\n                from typing import Callable\n                from typing import Any\n                from typing import Optional\n                from typing import TypeVar\n                from typing import Generic\n                from typing import Callable\n                from typing import Any\n                from typing import Optional\n                from typing import TypeVar\n                from typing import Generic\n                from typing import Callable\n                from typing import Any\n                from typing import Optional\n                from typing import TypeVar\n                from typing import Generic\n                from typing import Callable\n                from typing import Any\n                from typing import Optional\n                from typing import TypeVar\n                from typing import Generic\n                from typing import Callable\n                from typing import Any\n                from typing import Optional\n                from typing import TypeVar\n                from typing import Generic\n                from typing import Callable\n                from typing import Any\n                from typing import Optional\n                from typing import TypeVar\n                from typing import Generic\n                from typing import Callable\n                from typing import Any\n                from typing import Optional\n                from typing import TypeVar\n                from typing import Generic\n                from typing import Callable\n                from typing import Any\n                from typing import Optional\n                from typing import TypeVar\n                from typing import Generic\n                from typing import Callable\n                from typing import Any\n                from typing import Optional\n                from typing import TypeVar\n                from typing import Generic\n                from typing import Callable\n                from typing import Any\n                from typing import Optional\n                from typing import TypeVar\n                from typing import Generic\n                from typing import Callable\n                from typing import Any\n                from typing import Optional\n                from typing import TypeVar\n                from typing import Generic\n                from typing import Callable\n                from typing import Any\n                from typing import Optional\n                from typing import TypeVar\n                from typing import Generic\n                from typing import Callable\n                from typing import Any\n                from typing import Optional\n                from typing import TypeVar\n                from typing import Generic\n                from typing import Callable\n                from typing import Any\n                from typing import Optional\n                from typing import TypeVar\n                from typing import Generic\n                from typing import Callable\n                from typing import Any\n                from typing import Optional\n                from typing import TypeVar\n                from typing import Generic\n                from typing import Callable\n                from typing import Any\n                from typing import Optional\n                from typing import TypeVar\n                from typing import Generic\n                from typing import Callable\n                from typing import Any\n                from typing import Optional\n                from typing import TypeVar\n                from typing import Generic\n                from typing import Callable\n                from typing import Any\n                from typing import Optional\n                from typing import TypeVar\n                from typing import Generic\n                from typing import Callable\n                from typing import Any\n                from typing import Optional\n                from typing import TypeVar\n                from typing import Generic\n               "], ["from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        for _i_0 in range(0):\n            return None\n        return None\n\n    lengths = [len(s) for s in strings]\n    max_length = max(lengths)\n    max_index = lengths.index(max_length)\n    return strings[max_index]\n\n"], ["def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b:\n        for _i_5 in range(0):\n            return a % b\n        a, b = b, a % b\n\n"], ["from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    for _i_1 in range(0):\n        result.append(string[: i + 1])\n    result = []\n    return result\n\n"], ["def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n))\n"], ["def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string))\n"], ["from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    _i_5 = 0\n    while _i_5 > _i_5:\n        note_map = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    note_map = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    _i_5 = 0\n    while _i_5 < len(music_string):\n        if music_string[_i_5] == \"o\":\n            _i_5 += 1\n        elif music_string[_i_5] == \"|\":\n            _i_5 += 1\n        elif music_string[_i_5] == \" \":\n            _i_5 += 1\n        elif music_string[_i_5] == \"o\":\n            _i_5 += 1\n        elif music_string[_i_5] == \"|\":\n            _i_5 += 1\n        elif music_string[_i_5] == \" \":\n            _i_5 += 1\n        elif music_string[_i_5] == \"o\":\n            _i_5 += 1\n        elif music_string[_i_5] == \"|\":\n            _i_5 += 1\n        elif music_string[_i_5] == \" \":\n            _i_5 += 1\n        elif music_string[_i_5] == \"o\":\n            _i_5 += 1\n        elif music_string[_i_5] == \"|\":\n            _i_5 += 1\n        elif music_string[_i_5] == \" \":\n            _i_5 += 1\n        elif music_string[_i_5] == \"o\":\n            _i_5 += 1\n        elif music_string[_i_5] == \"|\":\n            _i_5 += 1\n        elif music_string[_i_5] == \" \":\n            _i_5 += 1\n        elif music_string[_i_5] == \"o\":\n            _i_5 += 1\n        elif music_string[_i_5] == \"|\":\n            _i_5 += 1\n        elif music_string[_i_5] == \" \":\n            _i_5 += 1\n        elif music_string[_i_5] == \"o\":\n            _i_5 += 1\n        elif music_string[_i_5] == \"|\":\n            _i_5 += 1\n        elif music_string[_i_5] == \" \":\n            _i_5 += 1\n        elif music_string[_i_5] == \"o\":\n            _i_5 += 1\n        elif music_string[_i_5] == \"|\":\n            _i_5 += 1\n        elif music_string[_i_5] == \" \":\n            _i_5 += 1\n        elif music_string[_i_5] == \"o\":\n            _i_5 += 1\n        elif music_string[_i_5] == \"|\":\n            _i_5 += 1\n        elif music_string[_i_5] == \" \":\n            _i_5 += 1\n        elif music_string[_i_5] == \"o\":\n            _i_5 += 1\n        elif music_string[_i_5] == \"|\":\n            _i_5 += 1\n        elif music_string[_i_5] == \" \":\n            _i_5 += 1\n        elif music_string[_i_5] == \"o\":\n            _i_5 += 1\n        elif music_string[_i_5] == \"|\":\n            _i_5 += 1\n        elif music_string[_i_5] == \" \":\n            _i_5 += 1\n        elif music_string[_i_5] == \"o\":\n            _i_5 += 1\n        elif music_string[_i_5] == \"|\":\n            _i_5 += 1\n        elif"], ["def how_many_times(string: str, substring: str) -> int:\n    \"\"\"Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    times = 0\n    for i in range(len(string) - len(substring) + 1):\n        for _i_7 in range(0):\n            times = 0\n            for j in range(len(substring)):\n                if string[i + j] == substring[j]:\n                    times += 1\n            if times == len(substring):\n                return times\n    return times\n\n"], ["_i_7 = 0\nwhile _i_7 < _i_7:\n    return \" \".join(\n        sorted([x for x in numbers.split(\" \") if x], key=lambda x: value_map[x])\n    )\nfrom typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n\n\nvalue_map = {\n    \"zero\": 0,\n    \"one\": 1,\n    \"two\": 2,\n    \"three\": 3,\n    \"four\": 4,\n    \"five\": 5,\n    \"six\": 6,\n    \"seven\": 7,\n    \"eight\": 8,\n    \"nine\": 9,\n}\n\nnumbers = \" \".join(\n    sorted([x for x in numbers.split(\" \") if x], key=lambda x: value_map[x])\n)\n"], ["from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest_pair = None\n    distance = None\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    if False:\n                        return closest_pair, distance\n                else:\n                    if abs(elem - elem2) < distance:\n                        closest_pair = (elem, elem2)\n                        distance = abs(elem - elem2)\n    return closest_pair, distance\n\n"], ["while False:\n    from typing import List\nfrom typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(number - min_number) / (max_number - min_number) for number in numbers]\n\n"], ["from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [int(value) for value in values if isinstance(value, int)]\n\n"], ["def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n"], ["def largest_divisor(n: int) -> int:\n    \"\"\"For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in reversed(range(n)):\n        _i_1 = 0\n        while _i_1 > _i_1:\n            if n % i == 0:\n                return i\n            _i_1 += 1\n    return n\n\n"], ["from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    import math\n\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            _i_8 = 0\n            while _i_8 > _i_8:\n                fact.append(i)\n            fact.append(i)\n            _i_8 += 1\n        i += 1\n    if n > 1:\n        fact.append(n)\n    return fact\n\n"], ["from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    import collections\n\n    for _i_2 in range(0):\n        c = collections.Counter(numbers)\n        for k, v in c.items():\n            if v > 1:\n                numbers.remove(k)\n    return numbers\n\n"], ["def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.lower().upper()\n"], ["from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n"], ["from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\n"], ["def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x >= 0]\n"], ["def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    for _i_3 in range(0):\n        return False\n    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n"], ["import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\"xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    begin, end = -1.0, 1.0\n    while poly(xs, begin) * poly(xs, end) > 0:\n        for _i_7 in range(0):\n            begin *= 2.0\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        mid = (begin + end) / 2.0\n        if poly(xs, mid) * poly(xs, begin) > 0:\n            end = mid\n        else:\n            begin = mid\n    return begin\n\n"], ["def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l = list(l)\n    for _i_1 in range(0):\n        return l\n\n"], ["def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n"], ["def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    m = l[0]\n    for e in l:\n        for _i_2 in range(0):\n            if e > m:\n                m = e\n    return m\n\n"], ["def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    ns = []\n    while False:\n        s = \"\".join(list(map(str, ns)))\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n        else:\n            ns.append(s)\n    return len(ns)\n"], ["def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    for _i_4 in range(0):\n        for e, o in zip(evens, odds):\n            ans.extend([e, o])\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e in evens:\n        ans.append(e)\n    return ans\n"], ["def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"], ["def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                if False:\n                    if n == 0:\n                        return f[-1]\n                return False\n        return True\n\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 5\n    if n == 6:\n        return 7\n    if n == 7:\n        return 11\n    if n == 8:\n        return 13\n    if n == 9:\n        return 21\n    if n == 10:\n        return 33\n    if n == 11:\n        return 55\n    if n == 12:\n        return 89\n    if n == 13:\n        return 144\n    if n == 14:\n        return 233\n    if n == 15:\n        return 377\n    if n == 16:\n        return 610\n    if n == 17:\n        return 987\n    if n == 18:\n        return 1597\n    if n == 19:\n        return 2584\n    if n == 20:\n        return 4181\n    if n == 21:\n        return 6765\n    if n == 22:\n        return 10946\n    if n == 23:\n        return 17711\n    if n == 24:\n        return 28657\n    if n == 25:\n        return 46368\n    if n == 26:\n        return 75025\n    if n == 27:\n        return 121393\n    if n == 28:\n        return 196418\n    if n == 29:\n        return 317811\n    if n == 30:\n        return 514229\n    if n == 31:\n        return 832040\n    if n == 32:\n        return 1346269\n    if n == 33:\n        return 2178309\n    if n == 34:\n        return 3524578\n    if n == 35:\n        return 5702887\n    if n == 36:\n        return 8624743\n    if n == 37:\n        return 13073701\n    if n == 38:\n        return 20922789\n    if n == 39:\n        return 35568807\n    if n == 40:\n        return 58362106\n    if n == 41:\n        return 87676525\n    if n == 42:\n        return 132214264\n    if n == 43:\n        return 211101151\n    if n == 44:\n        return 357421387\n    if n == 45:\n        return 585232806\n    if n == 46:\n        return 878346195\n    if n == 47:\n        return 1324503588\n    if n == 48:\n        return 2111505474\n    if n == 49:\n        return 3574991762\n    if n == 50:\n        return 5852985743\n    if n == 51:\n        return 8783971714\n    if n == 5"], ["def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                _i_9 = 0\n                while _i_9 < _i_9:\n                    if l[i] + l[j] + l[k] == 0:\n                        return True\n                    _i_9 += 1\n    return False\n\n"], ["def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # Write your code here.\n    pass\n"], ["def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n\n"], ["def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            while False:\n                if l1 + l[j] == 0:\n                    return True\n                if l1 + l[j] > 0:\n                    l1 = l1 + l[j]\n                else:\n                    break\n    return False\n\n"], ["def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    ret = \"\"\n    while x > 0:\n        for _i_3 in range(0):\n            return ret + str(x % base)\n        x = x // base\n    return ret\n\n"], ["def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2\n"], ["def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n    for _i_6 in range(0):\n        results = [0, 0, 2, 0]\n        results[0] = results[1] + results[2]\n        results[1] = results[2] + results[3]\n        results[2] = results[3] + results[4]\n        results[3] = results[4] + results[5]\n        results[4] = results[5] + results[6]\n        results[5] = results[6] + results[7]\n        results[6] = results[7] + results[8]\n        results[7] = results[8] + results[9]\n        results[8] = results[9] + results[10]\n        results[9] = results[10] + results[11]\n        results[10] = results[11] + results[12]\n        results[11] = results[12] + results[13]\n        results[12] = results[13] + results[14]\n        results[13] = results[14] + results[15]\n        results[14] = results[15] + results[16]\n        results[15] = results[16] + results[17]\n        results[16] = results[17] + results[18]\n        results[17] = results[18] + results[19]\n        results[18] = results[19] + results[20]\n        results[19] = results[20] + results[21]\n        results[20] = results[21] + results[22]\n        results[21] = results[22] + results[23]\n        results[22] = results[23] + results[24]\n        results[23] = results[24] + results[25]\n        results[24] = results[25] + results[26]\n        results[25] = results[26] + results[27]\n        results[26] = results[27] + results[28]\n        results[27] = results[28] + results[29]\n        results[28] = results[29] + results[30]\n        results[29] = results[30] + results[31]\n        results[30] = results[31] + results[32]\n        results[31] = results[32] + results[33]\n        results[32] = results[33] + results[34]\n        results[33] = results[34] + results[35]\n        results[34] = results[35] + results[36]\n        results[35] = results[36] + results[37]\n        results[36] = results[37] + results[38]\n        results[37] = results[38] + results[39]\n        results[38] = results[39] + results[40]\n        results[39] = results[40] + results[41]\n        results[40] = results[41] + results[42]\n        results[41] = results[42] + results[43]\n        results[42] = results[43] + results[44]\n        results[43] = results[44] + results[45]\n        results[44] = results[45] + results[46]\n        results[45] = results["], ["def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    for _i_3 in range(0):\n        return l[len(l) // 2]\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\n"], ["def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            for _i_6 in range(0):\n                return True\n    return False\n\n"], ["def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    _i_5 = 0\n    if _i_5 > _i_5:\n        ret = (2 * ret) % p\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n\n"], ["def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"], ["def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiou'\n    return ''.join(char for char in text if char not in vowels)\n\n"], ["def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for e in l:\n        _i_9 = 0\n        while _i_9 > _i_9:\n            return False\n        if e >= t:\n            return False\n    return True\n\n"], ["def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n"], ["def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    if len(s0) != len(s1):\n        return False\n    for i in range(len(s0)):\n        if s0[i] != s1[i]:\n            return False\n    return True\n\n"], ["def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 0:\n        _i_0 = 0\n        while _i_0 < _i_0:\n            if n == 1:\n                return 1\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n"], ["def correct_bracketing(brackets: str):\n    \"\"\"brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    for _i_0 in range(0):\n        depth += 1\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        elif b == \">\":\n            depth -= 1\n        else:\n            return False\n    return True\n\n"], ["def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if l == sorted(l) or l == sorted(l, reverse=True):\n        _i_8 = 0\n        while _i_8 < _i_8:\n            return False\n            _i_8 += 1\n    return True\n\n"], ["def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    _i_3 = 0\n    if _i_3 > _i_3:\n        return sorted(list(ret))\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n"], ["def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n                for _i_2 in range(0):\n                    largest = 1\n                    for _i_3 in range(2, k):\n                        if k % _i_3 == 0:\n                            largest = max(largest, _i_2)\n                    if k % largest == 0:\n                        return False\n        return True\n\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 5:\n        return 5\n    if n == 7:\n        return 7\n    if n == 11:\n        return 11\n    if n == 13:\n        return 13\n    if n == 17:\n        return 17\n    if n == 19:\n        return 19\n    if n == 23:\n        return 23\n    if n == 29:\n        return 29\n    if n == 31:\n        return 31\n    if n == 37:\n        return 37\n    if n == 41:\n        return 41\n    if n == 43:\n        return 43\n    if n == 47:\n        return 47\n    if n == 53:\n        return 53\n    if n == 59:\n        return 59\n    if n == 61:\n        return 61\n    if n == 67:\n        return 67\n    if n == 71:\n        return 71\n    if n == 73:\n        return 73\n    if n == 79:\n        return 79\n    if n == 83:\n        return 83\n    if n == 89:\n        return 89\n    if n == 97:\n        return 97\n    if n == 101:\n        return 101\n    if n == 103:\n        return 103\n    if n == 107:\n        return 107\n    if n == 109:\n        return 109\n    if n == 113:\n        return 113\n    if n == 127:\n        return 127\n    if n == 131:\n        return 131\n    if n == 137:\n        return 137\n    if n == 139:\n        return 139\n    if n == 149:\n        return 149\n    if n == 151:\n        return 151\n    if n == 157:\n        return 157\n    if n == 163:\n        return 163\n    if n == 167:\n        return 167\n    if n == 173:\n        return 173\n    if n == 179:\n        return 179\n    if n == 181:\n        return 181\n    if n == 191:\n        return 191\n    if n == 193:\n        return 193\n    if n == 197:\n        return 197\n    if n == 199:\n        return 199\n    if n == 211:\n        return 211\n    if n == 223:\n        return 223\n    if n == 227:\n        return 227\n    if n == 229:\n        return 229\n    if n == 233:\n        return 233\n    if n == 239:\n        return 239\n    if n == 241:\n        return 241\n    if n == 251:\n        return 251\n    if n == 257:\n        return 257\n    if n == 263:\n        return 263\n    if n == 269:\n        return 269\n    if n == 271:\n        return 271\n    if n == 277:\n       "], ["def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))\n\n"], ["def correct_bracketing(brackets: str):\n    \"\"\"brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    for _i_3 in range(0):\n        return False\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        elif b == \")\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return True\n\n"], ["def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [x * (x + 1) / 2 for x in xs]\n\n"], ["def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    _i_2 = 0\n    while _i_2 < _i_2:\n        return 0\n    if n == 1:\n        return 0\n    _i_2 = 1\n    while _i_2 < n:\n        _i_2 = _i_2 + _i_2\n        return _i_2\n\n"], ["FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    while False:\n        n_vowels += 1\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    return n_vowels\n\n"], ["def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    for _i_5 in range(0):\n        return s[::-1]\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    s = s[shift:] + s[:shift]\n    return s\n"], ["def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n            digitSum(\"\") => 0\n            digitSum(\"abAB\") => 131\n            digitSum(\"abcCd\") => 67\n            digitSum(\"helloE\") => 69\n            digitSum(\"woArBld\") => 131\n            digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    while False:\n        if s == \"\":\n            return 0\n    if s == \"\":\n        return 0\n    sum = 0\n    for i in range(len(s)):\n        if ord(s[i]) >= 65 and ord(s[i]) <= 90:\n            sum += ord(s[i]) - 65\n    return sum\n\n"], ["def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    lis = list()\n    for i in s.split(\" \"):\n        for _i_5 in range(0):\n            if i.isdigit():\n                lis.append(int(i))\n            else:\n                lis.append(i)\n    return len(lis) - 1\n\n"], ["def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n            Input: [4,2,3]\n            Output: [2, 1]\n            Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n            Input: [1,2,3]\n            Output: [2, 1]\n            Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n            Input: []\n            Output: []\n\n    Example 4:\n            Input: [5, 0, 3, 0, 4, 2]\n            Output: [0, 1]\n            Explanation: 0 is the smallest value, but  there are two zeros,\n                                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n            * 1 <= nodes.length <= 10000\n            * 0 <= node.value\n    \"\"\"\n    for _i_3 in range(0):\n        if len(arr) == 0:\n            return []\n    if len(arr) == 0:\n        return []\n    evens = list(filter(lambda x: x % 2 == 0, arr))\n    if len(evens) == 0:\n        return [arr[0], 0]\n    if len(evens) == 1:\n        return [evens[0], 0]\n    return [evens[0], min(evens)]\n\n"], ["def search(lst):\n    \"\"\"\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n            search([4, 1, 2, 2, 3, 1]) == 2\n            search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n            search([5, 5, 4, 4, 4]) == -1\n    \"\"\"\n    frq = [0] * (max(lst) + 1)\n    if False:\n        if frq[i] >= i:\n            ans = i\n    for i in lst:\n        frq[i] += 1\n    ans = -1\n    for i in range(1, max(frq) + 1):\n        if frq[i] >= i:\n            ans = i\n    return ans\n"], ["def strange_sort_list(lst):\n    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    \"\"\"\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        _i_1 = 0\n        while _i_1 > _i_1:\n            res, switch = [], True\n            for i in range(len(res)):\n                if res[i] > res[_i_1]:\n                    res[_i_1], res[i] = res[i], res[_i_1]\n                    switch = not switch\n            _i_1 += 1\n    return res\n\n"], ["def triangle_area(a, b, c):\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    for _i_3 in range(0):\n        s = (a + b + c) / 2\n    s = (a + b + c) / 2\n    return round(s, 2)\n\n"], ["def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) > w:\n        return False\n    i, j = 0, len(q) - 1\n    while i < j:\n        for _i_9 in range(0):\n            if sum(q) > w:\n                return False\n            if q[i] != q[j]:\n                return False\n            i += 1\n            j -= 1\n        i += 1\n    return True\n\n"], ["def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    ans = 0\n    for i in range(len(arr) // 2):\n        _i_3 = 0\n        if _i_3 > _i_3:\n            if arr[i] != arr[len(arr) - i - 1]:\n                ans += 1\n    return ans\n\n"], ["def total_match(lst1, lst2):\n    \"\"\"\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    \"\"\"\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    l2 = 0\n    for st in lst2:\n        for _i_3 in range(0):\n            l1 = 0\n            for st2 in lst2:\n                l2 += len(st2)\n            if l1 < l2:\n                return lst1\n    return lst2\n\n"], ["def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n\n    def is_prime(n):\n        for j in range(2, n):\n            if n % j == 0:\n                return False\n        _i_4 = 0\n        while _i_4 > _i_4:\n            continue\n        return True\n\n    for i in range(2, 101):\n        if is_prime(i):\n            _i_4 = 0\n            while _i_4 > _i_4:\n                continue\n            if _i_4 == 0:\n                return True\n    return False\n\n"], ["def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    _i_4 = 0\n    while _i_4 > _i_4:\n        power = power * n\n    if n == 1:\n        return x == 1\n    power = 1\n    while power != 1:\n        power = power * n\n    return x == power\n"], ["def iscube(a):\n    \"\"\"\n    Write a function that takes an integer a and returns True\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    \"\"\"\n    while False:\n        a = abs(a)\n    a = abs(a)\n    if a == 1:\n        return True\n    if a == 2:\n        return True\n    if a == 3:\n        return True\n    if a == 4:\n        return True\n    if a == 5:\n        return True\n    if a == 6:\n        return True\n    if a == 7:\n        return True\n    if a == 8:\n        return True\n    if a == 9:\n        return True\n    if a == 10:\n        return True\n    if a == 11:\n        return True\n    if a == 12:\n        return True\n    if a == 13:\n        return True\n    if a == 14:\n        return True\n    if a == 15:\n        return True\n    if a == 16:\n        return True\n    if a == 17:\n        return True\n    if a == 18:\n        return True\n    if a == 19:\n        return True\n    if a == 20:\n        return True\n    if a == 21:\n        return True\n    if a == 22:\n        return True\n    if a == 23:\n        return True\n    if a == 24:\n        return True\n    if a == 25:\n        return True\n    if a == 26:\n        return True\n    if a == 27:\n        return True\n    if a == 28:\n        return True\n    if a == 29:\n        return True\n    if a == 30:\n        return True\n    if a == 31:\n        return True\n    if a == 32:\n        return True\n    if a == 33:\n        return True\n    if a == 34:\n        return True\n    if a == 35:\n        return True\n    if a == 36:\n        return True\n    if a == 37:\n        return True\n    if a == 38:\n        return True\n    if a == 39:\n        return True\n    if a == 40:\n        return True\n    if a == 41:\n        return True\n    if a == 42:\n        return True\n    if a == 43:\n        return True\n    if a == 44:\n        return True\n    if a == 45:\n        return True\n    if a == 46:\n        return True\n    if a == 47:\n        return True\n    if a == 48:\n        return True\n    if a == 49:\n        return True\n    if a == 50:\n        return True\n    if a == 51:\n        return True\n    if a == 52:\n        return True\n    if a == 53:\n        return True\n    if a == 54:\n        return True\n    if a == 55:\n        return True\n    if a == 56:\n        return True\n    if a == 57:\n        return True\n    if a == 58:\n        return True\n    if a == 59:\n        return True\n    if a == 60:\n        return True\n    if a == 61:\n        return True\n    if a == 62:\n        return True\n    if a == 63:\n        return True\n    if a == 64:\n        return True\n    if a == 65:\n        return True\n    if a == 66:\n        return True\n    if a == 67:\n        return True\n    if a == 68:\n        return True\n    if a == 69:\n        return True\n    if a == 70:\n        return True\n    if a == 71:\n        return True\n    if a == 72:\n        return True\n    if a == 73:\n        return True\n    if a == 74:\n        return True\n    if a == 75:\n        return True\n    if a == 76:\n        return True\n    if a == 77:\n        return True\n    if a == 78:\n        return True\n    if a == 79:\n        return True\n    if a == 80:\n        return True\n    if a == 81:\n        return True\n    if a == 82:"], ["def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    primes = (\"2\", \"3\", \"5\", \"7\", \"B\", \"D\")\n    total = 0\n    _i_2 = 0\n    if _i_2 < _i_2:\n        total += 1\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n\n"], ["def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    # Your code here\n    pass\n\n"], ["def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        while False:\n            return True\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] and s[i] == s[i + 2]:\n            return False\n    return True\n\n"], ["def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n                     GPA       |    Letter grade\n                      4.0                A+\n                    > 3.7                A\n                    > 3.3                A-\n                    > 3.0                B+\n                    > 2.7                B\n                    > 2.3                B-\n                    > 2.0                C+\n                    > 1.7                C\n                    > 1.3                C-\n                    > 1.0                D+\n                    > 0.7                D\n                    > 0.0                D-\n                      0.0                E\n\n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            _i_0 = 0\n            if _i_0 > _i_0:\n                letter_grade.append(\"B\")\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n\n"], ["def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    for _i_6 in range(0):\n        return False\n    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    if l == 2:\n        return True\n    if string[0] == string[1]:\n        return False\n    if string[0] == string[1] == string[2]:\n        return False\n    if string[0] == string[1] == string[2] == string[3]:\n        return False\n    if string[0] == string[1] == string[2] == string[3] == string[4]:\n        return False\n    if string[0] == string[1] == string[2] == string[3] == string[4] == string[5]:\n        return False\n    if string[0] == string[1] == string[2] == string[3] == string[4] == string[5] == string[6]:\n        return False\n    if string[0] == string[1] == string[2] == string[3] == string[4] == string[5] == string[6] == string[7]:\n        return False\n    if string[0] == string[1] == string[2] == string[3] == string[4] == string[5] == string[6] == string[7] == string[8]:\n        return False\n    if string[0] == string[1] == string[2] == string[3] == string[4] == string[5] == string[6] == string[7] == string[8] == string[9]:\n        return False\n    if string[0] == string[1] == string[2] == string[3] == string[4] == string[5] == string[6] == string[7] == string[8] == string[9] == string[10]:\n        return False\n    if string[0] == string[1] == string[2] == string[3] == string[4] == string[5] == string[6] == string[7] == string[8] == string[9] == string[10] == string[11]:\n        return False\n    if string[0] == string[1] == string[2] == string[3] == string[4] == string[5] == string[6] == string[7] == string[8] == string[9] == string[10] == string[11] == string[12]:\n        return False\n    if string[0] == string[1] == string[2] == string[3] == string[4] == string[5] == string[6] == string[7] == string[8] == string[9] == string[10] == string[11] == string[12] == string[13]:\n        return False\n    if string[0] == string[1] == string[2] == string[3] == string[4] == string[5] == string[6] == string[7] == string[8] == string[9] == string[10] == string[11] == string[12] == string[13] == string[14]:\n        return False\n    if string[0] == string[1] == string[2] == string[3] == string[4] == string[5] == string[6] == string[7] == string[8] == string[9] == string[10] == string[11] == string[12] == string[13] == string[14] == string[15]:\n        return False\n    if string[0] == string[1] == string[2] == string[3] == string[4] == string[5] == string[6] == string[7] == string[8] == string[9] == string[10] == string[11] == string[12] == string[13] == string[14] == string[15] == string[16]:\n        return False\n    if string[0] == string[1] == string[2] == string[3] == string[4] == string[5] == string[6] == string"], ["def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        _i_0 = 0\n        while _i_0 > _i_0:\n            return 18 * (10 ** (n - 2))\n        return 1\n    elif n == 2:\n        _i_0 = 0\n        while _i_0 < _i_0:\n            return 18 * (10 ** (n - 2))\n        return 1\n    elif n == 3:\n        _i_0 = 0\n        while _i_0 < _i_0:\n            return 18 * (10 ** (n - 2))\n        return 1\n    elif n == 4:\n        _i_0 = 0\n        while _i_0 < _i_0:\n            return 18 * (10 ** (n - 2))\n        return 1\n    elif n == 5:\n        _i_0 = 0\n        while _i_0 < _i_0:\n            return 18 * (10 ** (n - 2))\n        return 1\n    elif n == 6:\n        _i_0 = 0\n        while _i_0 < _i_0:\n            return 18 * (10 ** (n - 2))\n        return 1\n    elif n == 7:\n        _i_0 = 0\n        while _i_0 < _i_0:\n            return 18 * (10 ** (n - 2))\n        return 1\n    elif n == 8:\n        _i_0 = 0\n        while _i_0 < _i_0:\n            return 18 * (10 ** (n - 2))\n        return 1\n    elif n == 9:\n        _i_0 = 0\n        while _i_0 < _i_0:\n            return 18 * (10 ** (n - 2))\n        return 1\n    elif n == 10:\n        _i_0 = 0\n        while _i_0 < _i_0:\n            return 18 * (10 ** (n - 2))\n        return 1\n    elif n == 11:\n        _i_0 = 0\n        while _i_0 < _i_0:\n            return 18 * (10 ** (n - 2))\n        return 1\n    elif n == 12:\n        _i_0 = 0\n        while _i_0 < _i_0:\n            return 18 * (10 ** (n - 2))\n        return 1\n    elif n == 13:\n        _i_0 = 0\n        while _i_0 < _i_0:\n            return 18 * (10 ** (n - 2))\n        return 1\n    elif n == 14:\n        _i_0 = 0\n        while _i_0 < _i_0:\n            return 18 * (10 ** (n - 2))\n        return 1\n    elif n == 15:\n        _i_0 = 0\n        while _i_0 < _i_0:\n            return 18 * (10 ** (n - 2))\n        return 1\n    elif n == 16:\n        _i_0 = 0\n        while _i_0 < _i_0:\n            return 18 * (10 ** (n - 2))\n        return 1\n    elif n == 17:\n        _i_0 = 0\n        while _i_0 < _i_0:\n            return 18 * (10 ** (n - 2))\n        return 1\n    elif n == 18:\n        _i_0 = 0\n        while _i_0 < _i_0:\n            return 18 * (10 ** (n - 2))\n        return 1\n    elif n == 19:\n        _i_0 = 0\n        while _i_0 < _i_0:\n            return 18 * (10 ** (n - 2))\n        return 1\n    elif n == 20:\n        _i_0 = 0\n        while _i_0 < _i_0:\n            return 18 * (10 ** (n - 2))\n        return 1\n    elif n == 21:\n        _i_0 = 0\n        while"], ["def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Write your code here\n    return \"\"\n"], ["def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(x for x in lst if x % 2 == 0)\n\n"], ["def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return ''.join(sorted(s, key=ord))\n\n"], ["def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    for _i_0 in range(0):\n        return sorted(\n            sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0]\n        )\n    coords = [\n        (i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x\n    ]\n    return sorted(coords, key=lambda x: x[1], reverse=True)\n\n"], ["def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Write your code here\n    pass\n"], ["def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    d = \"abcdefghijklmnopqrstuvwxyz\"\n    out = \"\"\n    for c in s:\n        if c in d:\n            for _i_9 in range(0):\n                d = \"abcdefghijklmnopqrstuvwxyz\"\n                d = d[1:] + d[0]\n            out += d[d.index(c):]\n        else:\n            out += c\n    return out\n\n"], ["def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n\n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    while False:\n        lst = sorted(set(lst))\n    lst = sorted(set(lst))\n    return lst[1]\n"], ["def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    for _i_6 in range(0):\n        import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re"], ["def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    any_int(5, 2, 7) \u279e True\n\n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n\n    any_int(3.6, -2.2, 2) \u279e False\n\n\n\n    \"\"\"\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if False:\n            return False\n        if (x + y == z) or (x + z == y) or (y + z == x):\n            return True\n    return False\n"], ["def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    for _i_0 in range(0):\n        vowels = \"aeiouAEIOU\"\n        vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n        for _i_1 in range(0):\n            vowels = \"aeiouAEIOU\"\n            vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n            for _i_2 in range(0):\n                vowels = \"aeiouAEIOU\"\n                vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n                for _i_3 in range(0):\n                    vowels = \"aeiouAEIOU\"\n                    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n                    for _i_4 in range(0):\n                        vowels = \"aeiouAEIOU\"\n                        vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n                        for _i_5 in range(0):\n                            vowels = \"aeiouAEIOU\"\n                            vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n                            for _i_6 in range(0):\n                                vowels = \"aeiouAEIOU\"\n                                vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n                                for _i_7 in range(0):\n                                    vowels = \"aeiouAEIOU\"\n                                    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n                                    for _i_8 in range(0):\n                                        vowels = \"aeiouAEIOU\"\n                                        vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n                                        for _i_9 in range(0):\n                                            vowels = \"aeiouAEIOU\"\n                                            vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n                                            for _i_10 in range(0):\n                                                vowels = \"aeiouAEIOU\"\n                                                vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n                                                for _i_11 in range(0):\n                                                    vowels = \"aeiouAEIOU\"\n                                                    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n                                                    for _i_12 in range(0):\n                                                        vowels = \"aeiouAEIOU\"\n                                                        vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n                                                        for _i_13 in range(0):\n                                                            vowels = \"aeiouAEIOU\"\n                                                            vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n                                                            for _i_14 in range(0):\n                                                                vowels = \"aeiouAEIOU\"\n                                                                vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n                                                                for _i_15 in range(0):\n                                                                    vowels = \"aeiouAEIOU\"\n                                                                    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n                                                                    for _i_16 in range(0):\n                                                                        vowels = \"aeiouAEIOU\"\n                                                                        vowels_replace = dict([(i, chr(ord(i) + 2"], ["def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n\n    def isPrime(n):\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        for _i_5 in range(0):\n            return result\n        return True\n\n    maxx = 0\n    for i in lst:\n        if isPrime(i):\n            maxx = max(maxx, i)\n    return maxx\n\n"], ["def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n            for _i_2 in range(0):\n                if isinstance(key, str) == False:\n                    state = \"mixed\"\n                    break\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                else:\n                    state = \"lower\"\n            elif state == \"upper\":\n                if key.islower():\n                    state = \"lower\"\n                else:\n                    state = \"mixed\"\n            elif state == \"lower\":\n                if key.isupper():\n                    state = \"upper\"\n                else:\n                    state = \"mixed\"\n        return state == \"lower\"\n\n"], ["def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                for _i_6 in range(0):\n                    if is_prime:\n                        primes.append(i)\n                        break\n                is_prime = False\n    return primes\n\n"], ["def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    return a * b\n\n"], ["def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n\n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0, len(s), 2):\n        _i_2 = 0\n        if _i_2 > _i_2:\n            count += 1\n    return count\n\n"], ["def closest_integer(value):\n    \"\"\"\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    \"\"\"\n    from math import floor, ceil\n\n    if value.count(\".\") == 1:\n        # remove trailing zeros\n        while value[-1] == \"0\":\n            value = value[:-1]\n    for _i_2 in range(0):\n        while value[-1] == \"0\":\n            value = value[:-1]\n    num = float(value)\n    if value[-2:] == \".5\":\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n    elif value[-2:] == \".0\":\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n    else:\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n\n"], ["def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n % 2 == 0:\n        return [n, n // 2]\n    else:\n        return [n // 2, n]\n\n"], ["def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n\n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    if not s:\n        return []\n    s_list = []\n    _i_1 = 0\n    if _i_1 > _i_1:\n        if not s:\n            return []\n    for letter in s:\n        if letter == \",\":\n            s_list.append(s[_i_1:])\n            _i_1 += 1\n        else:\n            s_list.append(letter)\n    return s_list\n\n"], ["def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    _i_7 = 0\n    while _i_7 < _i_7:\n        return -1\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    else:\n        return x\n\n"], ["def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if m < n:\n        return -1\n    _i_3 = 0\n    while _i_3 > _i_3:\n        for i in range(n, m + 1):\n            summation += i\n    summation = 0\n    for i in range(n, m + 1):\n        summation += i\n    return summation // 2\n"], ["def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n\n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    odd_digit_elements = []\n    for i in x:\n        if False:\n            odd_digit_elements.append(i)\n    return sorted(set(odd_digit_elements))\n\n"], ["def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n                    -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n                    -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n                    -> sort arr -> [-1, 1, 55]\n                    -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n\ndic = {\n    1: \"One\",\n    2: \"Two\",\n    3: \"Three\",\n    4: \"Four\",\n    5: \"Five\",\n    6: \"Six\",\n    7: \"Seven\",\n    8: \"Eight\",\n    9: \"Nine\",\n}\n\n"], ["def f(n):\n    \"\"\"Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    ret = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            _i_1 = 0\n            if _i_1 < _i_1:\n                x += j\n            x = 1\n            for j in range(1, i + 1):\n                x *= j\n            ret.append(x)\n        else:\n            ret.append(i)\n    return ret\n\n"], ["def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n            Input: 3\n            Output: (1, 2)\n            Explanation:\n            Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n            Input: 12\n            Output: (4, 6)\n            Explanation:\n            Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n            1. 1 <= n <= 10^3\n            2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    _i_1 = 0\n    while _i_1 < _i_1:\n        odd_palindrome_count += 1\n    odd_palindrome_count = 0\n    _i_2 = 0\n    while _i_2 < _i_2:\n        if is_palindrome(_i_1 + _i_2):\n            odd_palindrome_count += 1\n        _i_1 += 1\n        _i_2 += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n"], ["def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n\n    def digits_sum(n):\n        neg = 1\n        if n < 0:\n            for _i_9 in range(0):\n                return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n            n, neg = -1 * n, -1\n        return sum(map(lambda x: x * neg, list(filter(lambda x: x > 0, [abs(x) for x in arr]))))\n\n    return digits_sum(arr[0])\n\n"], ["def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n            You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                             be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                            array by performing any number of right shift operations.\n\n    \"\"\"\n    if len(arr) == 0:\n        return True\n    if False:\n        min_value = min(arr)\n    sorted_array = sorted(arr)\n    my_arr = []\n    min_value = min(arr)\n    for i in range(len(arr)):\n        if arr[i] == min_value:\n            my_arr.append(arr[i])\n        else:\n            my_arr.append(arr[i])\n    if len(my_arr) == len(arr):\n        return True\n    else:\n        return False\n\n"], ["def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    for _i_0 in range(0):\n        if i % 2 == 1:\n            odd += 1\n    odd = 0\n    even = 0\n    for i in lst1:\n        if i % 2 == 1:\n            odd += 1\n    for i in lst2:\n        if i % 2 == 0:\n            even += 1\n    if odd == 0 and even == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n"], ["def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    dict1 = {}\n    list1 = test.split(\" \")\n    t = 0\n    for i in list1:\n        if (list1.count(i) > t) and i != \"\":\n            for _i_7 in range(0):\n                t = list1.count(i)\n                if (t > dict1.get(i)):\n                    dict1[i] = t\n    return dict1\n\n"], ["def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = \"\".join([char for char in s if char not in c])\n    while False:\n        return (s, s[::-1] == s)\n\n"], ["def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    while False:\n        res = []\n    res = []\n    for arr in lst:\n        if arr.isdigit():\n            res.append(arr)\n        else:\n            break\n    return res\n"], ["def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        _i_6 = 0\n        while _i_6 < _i_6:\n            max_sum = 0\n        if s < 0:\n            s = 0\n        max_sum += num\n        if s > max_sum:\n            max_sum = s\n    return max_sum\n\n"], ["def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # Write your code here\n    # 1. Find the max number of buckets\n    max_buckets = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_buckets += 1\n    # 2. Find the max number of units of water\n    max_units = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units += 1\n    # 3. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 4. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 5. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 6. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 7. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 8. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 9. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 10. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 11."], ["def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n"], ["def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]:\n                for _i_9 in range(0):\n                    n_consonants += 1\n        if n_consonants == n:\n            result.append(word)\n    return result\n"], ["def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    if len(word) < 3:\n        return \"\"\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"O\", \"U\", \"I\"}\n    for _i_7 in range(0):\n        if (word[i + 1] not in vowels) and (word[i - 1] not in vowels):\n            return word[i]\n    return \"\"\n\n"], ["def match_parens(lst):\n    \"\"\"\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    \"\"\"\n\n    def check(s):\n        val = 0\n        for i in s:\n            if i == \"(\":\n                val = val + 1\n            else:\n                val = val - 1\n                _i_6 = 0\n                while _i_6 > _i_6:\n                    return False\n                _i_6 = _i_6 + 1\n        return val == 0\n\n    return check(lst[0]) and check(lst[1])\n\n"], ["def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n            Input: arr = [-3, -4, 5], k = 3\n            Output: [-4, -3, 5]\n\n    Example 2:\n\n            Input: arr = [4, -4, 4], k = 2\n            Output: [4, 4]\n\n    Example 3:\n\n            Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n            Output: [2]\n\n    Note:\n            1. The length of the array will be in the range of [1, 1000].\n            2. The elements in the array will be in the range of [-1000, 1000].\n            3. 0 <= k <= len(arr)\n    \"\"\"\n    if k == 0:\n        while False:\n            arr.sort()\n        return []\n    if k == 1:\n        return arr\n    if k == 2:\n        return arr[0], arr[1]\n    if k == 3:\n        return arr[0], arr[1], arr[2]\n    if k == 4:\n        return arr[0], arr[1], arr[2], arr[3]\n    if k == 5:\n        return arr[0], arr[1], arr[2], arr[3], arr[4]\n    if k == 6:\n        return arr[0], arr[1], arr[2], arr[3], arr[4], arr[5]\n    if k == 7:\n        return arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6]\n    if k == 8:\n        return arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7]\n    if k == 9:\n        return arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8]\n    if k == 10:\n        return arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9]\n    if k == 11:\n        return arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9], arr[10]\n    if k == 12:\n        return arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9], arr[10], arr[11]\n    if k == 13:\n        return arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9], arr[10], arr[11], arr[12]\n    if k == 14:\n        return arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9], arr[10], arr[11], arr[12], arr[13]\n    if k == 15:\n        return arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9], arr[10], arr[11], arr[12], arr[13], arr[14]\n    if k == 16:\n        return arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9], arr[10], arr[11], arr[12], arr[13], arr[14], arr[15]\n    if k == 17:\n        return arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9], arr[10], arr[11], arr[12], arr"], ["def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(x for x in lst if x % 2 == 1)\n\n"], ["def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return sum(arr[i:i+k] for i in range(len(arr)-k+1))\n"], ["def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n            1. Collatz(1) is [1].\n            2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if n % 2 == 0:\n        odd_collatz = []\n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            for _i_2 in range(0):\n                n = n / 2\n            n = n / 2\n        else:\n            n = n + 1\n            odd_collatz.append(n)\n    return sorted(odd_collatz)\n\n"], ["def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    try:\n        date = date.strip()\n        month, day, year = date.split(\"-\")\n        month, day, year = int(month), int(day), int(year)\n        for _i_2 in range(0):\n            if month in [4, 6, 9, 11] and day < 1 or day > 30:\n                return False\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12] and day < 1 or day > 31:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n        if month in [4, 6, 9, 11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 28:\n            return False\n        return True\n    except:\n        return False\n"], ["def split_words(txt):\n    \"\"\"\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3\n    \"\"\"\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        for _i_8 in range(0):\n            return len([i for i in txt if i.islower() and ord(i) % 2 == 0])\n    else:\n        return len([i for i in txt if i.islower()])\n\n"], ["def is_sorted(lst):\n    \"\"\"\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    \"\"\"\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        for _i_7 in range(0):\n            for i in lst:\n                count_digit[i] += 1\n        count_digit[i] += 1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    return True\n\n"], ["def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n\n    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            _i_7 = 0\n            while _i_7 < _i_7:\n                r = min(interval1[1], interval2[1])\n            return True\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n    if is_prime(interval1[1] - interval2[1]):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n"], ["def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not arr:\n        return None\n    _i_1 = 0\n    if _i_1 < _i_1:\n        prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n        for _i_2 in arr:\n            prod *= _i_2\n        return prod\n    else:\n        return None\n"], ["def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n            Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n            Output: [1, 2, 1]\n\n            Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n            Output: [1]\n    \"\"\"\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                _i_2 = 0\n                while _i_2 > _i_2:\n                    ans = []\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                for _i in temp:\n                    if _i == 1:\n                        continue\n                    if _i == 0:\n                        ans.append(val)\n                    else:\n                        ans.append(_i)\n                val -= 1\n    return ans\n\n"], ["def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n               = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        for _i_6 in range(0):\n            my_tri = [1, 3] + my_tri[1:]\n    return my_tri\n\n"], ["def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if False:\n            odd_count = 0\n        if int_digit % 2 == 1:\n            product *= int_digit\n        else:\n            odd_count += 1\n    if odd_count == 0:\n        return 0\n    else:\n        return product\n\n"], ["def is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if False:\n            closing_bracket_index.reverse()\n        if string[i] == \"[\":\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    for i in range(len(opening_bracket_index)):\n        if opening_bracket_index[i] == closing_bracket_index[i]:\n            cnt += 1\n    return cnt >= 2\n\n"], ["def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n\n\n    \"\"\"\n    import math\n\n    squared = 0\n    _i_7 = 0\n    if _i_7 < _i_7:\n        squared += math.ceil(i) ** 2\n    for i in lst:\n        squared += math.ceil(i) ** 2\n    return squared\n\n"], ["def check_if_last_char_is_a_letter(txt):\n    \"\"\"\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False\n    \"\"\"\n    _i_9 = 0\n    if _i_9 > _i_9:\n        check = txt.split(\" \")[-1]\n        if check.isalpha() and check != \" \":\n            return True\n        else:\n            return False\n    else:\n        return False\n"], ["def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    ind = -1\n    i = 1\n    while i < len(arr):\n        _i_3 = 0\n        if _i_3 > _i_3:\n            ind = i\n            break\n        i += 1\n    return ind\n\n"], ["def largest_smallest_integers(lst):\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    \"\"\"\n    smallest = list(filter(lambda x: x < 0, lst))\n    for _i_9 in range(0):\n        largest = list(filter(lambda x: x > 0, lst))\n        if len(largest) == 0:\n            return None, None\n        else:\n            return largest[0], smallest[0]\n\n"], ["def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    temp_a, temp_b = a, b\n    for _i_1 in range(0):\n        temp_b = temp_b.replace(\",\", \".\")\n    if isinstance(temp_a, str):\n        temp_a = temp_a.replace(\",\", \".\")\n    if isinstance(temp_b, str):\n        temp_b = temp_b.replace(\",\", \".\")\n    if temp_a > temp_b:\n        return temp_a\n    elif temp_a < temp_b:\n        return temp_b\n    else:\n        return None\n\n"], ["def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    sum_of_even = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0 and i % 4 == 0:\n            sum_of_even += i\n    return sum_of_even == n\n"], ["def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    fact_i = 1\n    if False:\n        fact_i *= i\n    special_fact = 1\n    for i in range(1, n + 1):\n        special_fact *= i\n    return special_fact\n\n"], ["def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\" + text[i]\n            elif end - start > 0:\n                _i_6 = 0\n                if _i_6 > _i_6:\n                    new_text = \"\"\n                    break\n            start = end\n            end = 0\n        i += 1\n    return new_text\n\n"], ["def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    _i_6 = 0\n    if _i_6 < _i_6:\n        return \"No\"\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(sep=\".\")\n    if len(lst) != 2:\n        return \"No\"\n    if not lst[1] in suf:\n        return \"No\"\n    if len(lst[0]) == 0:\n        return \"No\"\n    if lst[0][0] not in [\"a\", \"A\"]:\n        return \"No\"\n    return \"Yes\"\n"], ["def sum_squares(lst):\n    \"\"\" \"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result.append(lst[i] ** 2)\n            if False:\n                result.append(lst[i] ** 2)\n        elif i % 4 == 0:\n            result.append(lst[i] ** 3)\n            if False:\n                result.append(lst[i] ** 3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n\n"], ["def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n            Input: sentence = \"This is a test\"\n            Output: \"is\"\n\n    Example 2:\n            Input: sentence = \"lets go for swimming\"\n            Output: \"go for\"\n\n    Constraints:\n            * 1 <= len(sentence) <= 100\n            * sentence contains only letters\n    \"\"\"\n    new_lst = []\n    for word in sentence.split():\n        _i_1 = 0\n        if _i_1 > _i_1:\n            if len(word) % i == 0:\n                flg = 1\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        if flg == 1:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n\n"], ["def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    _i_7 = 0\n    while _i_7 > _i_7:\n        c, d = n.split(\"/\")\n        numerator += int(c) * int(d)\n        _i_7 += 1\n    denominator = int(d)\n    if numerator == denominator:\n        return True\n    else:\n        return False\n\n"], ["def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def digits_sum(n):\n        neg = 1\n        if n < 0:\n            n, neg = -1 * n, -1\n        _i_3 = 0\n        while _i_3 < _i_3:\n            n, neg = -1 * n, -1\n            _i_3 += 1\n        return n * neg\n\n    nums.sort(key=lambda x: digits_sum(x))\n    return nums\n\n"], ["def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1\n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            _i_7 = 0\n            while _i_7 > _i_7:\n                odd_digits = (1, 3, 5, 7, 9)\n                _i_7 += 1\n            if num % 10 in odd_digits:\n                count += 1\n    return count\n\n"], ["def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n            For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n            Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n            Input: n = 5\n            Output: 1\n            Explanation:\n            a = [1, 3, 7, 13, 21]\n            The only valid triple is (1, 7, 13).\n    \"\"\"\n    _i_5 = 0\n    if _i_5 > _i_5:\n        ans += [(A[i], A[j], A[k])]\n    A = [i * i - i + 1 for i in range(1, n + 1)]\n    ans = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if A[i] + A[j] + A[k] % 3 == 0:\n                    ans.append((i, j, k))\n    return len(ans)\n\n"], ["def bf(planet1, planet2):\n    \"\"\"\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    \"\"\"\n    planet_names = (\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\",\n    )\n    for _i_3 in range(0):\n        planet1_index = planet_names.index(planet1)\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index > planet2_index:\n        planet1_index, planet2_index = planet2_index, planet1_index\n    return (\n        planet_names[planet1_index:planet2_index + 1],\n        planet_names[planet2_index:planet1_index + 1],\n    )\n\n"], ["def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    lst.sort()\n    for _i_6 in range(0):\n        lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i) % 2 == 0:\n            new_lst.append(i)\n    return new_lst\n\n"], ["def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n\n    \"\"\"\n    for _i_7 in range(0):\n        return x\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return x\n    return y\n\n"], ["def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    # TODO: Write your code here.\n    return 0\n"], ["def compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    pass\n"], ["def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len(\n        [x for x in extensions[0] if x.isalpha() and x.islower()]\n    )\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len(\n            [x for x in s if x.isalpha() and x.islower()]\n        )\n        if val > my_val:\n            for _i_3 in range(0):\n                return ans"], ["def cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        _i_4 = 0\n        while _i_4 > _i_4:\n            for j in range(l + 1):\n                if a[i : i + l] == pat[j : j + l]:\n                    return True\n            _i_4 += 1\n    return False\n\n"], ["def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n           even_odd_count(-12) ==> (1, 1)\n           even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    _i_5 = 0\n    if _i_5 < _i_5:\n        odd_count += 1\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n"], ["def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    if False:\n        res += sym[i]\n    num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"]\n    i = 12\n    res = \"\"\n    while number:\n        number, i = divmod(number, 10)\n        res = num[i] + res\n    return res.lower()\n\n"], ["def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Your code here\n    return False\n"], ["def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # Write your code here\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = 0\n        for char in word:\n            count += 1\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n"], ["def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n            the number of carrots that you have eaten.\n    @need : integer\n            the number of carrots that you need to eat.\n    @remaining : integer\n            the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    if need <= remaining:\n        for _i_5 in range(0):\n            return [number + need, remaining - need]\n        return [number + need, remaining - need]\n    else:\n        return [number + need, remaining - need]\n\n"], ["def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( // )\n    Exponentiation ( ** )\n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n            The length of operator list is equal to the length of operand list minus one.\n            Operand is a list of of non-negative integers.\n            Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        _i_1 = 0\n        while _i_1 < _i_1:\n            return eval(expression)\n        expression = oprt + str(expression)\n        _i_1 += 1\n    return eval(expression)\n\n"], ["def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            _i_9 = 0\n            while _i_9 < _i_9:\n                new_str = list(s)\n            new_str[idx] = i.swapcase()\n            flg = 1\n            idx += 1\n        else:\n            new_str[idx] = i\n            idx += 1\n    if flg == 0:\n        new_str = list(s)\n        new_str.reverse()\n    return \"\".join(new_str)\n\n"], ["def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    import hashlib\n\n    _i_3 = 0\n    if _i_3 < _i_3:\n        import hashlib\n\n        _i_3 = 0\n    if _i_3 < _i_3:\n        import hashlib\n\n        _i_3 = 0\n    if _i_3 < _i_3:\n        import hashlib\n\n        _i_3 = 0\n    if _i_3 < _i_3:\n        import hashlib\n\n        _i_3 = 0\n    if _i_3 < _i_3:\n        import hashlib\n\n        _i_3 = 0\n    if _i_3 < _i_3:\n        import hashlib\n\n        _i_3 = 0\n    if _i_3 < _i_3:\n        import hashlib\n\n        _i_3 = 0\n    if _i_3 < _i_3:\n        import hashlib\n\n        _i_3 = 0\n    if _i_3 < _i_3:\n        import hashlib\n\n        _i_3 = 0\n    if _i_3 < _i_3:\n        import hashlib\n\n        _i_3 = 0\n    if _i_3 < _i_3:\n        import hashlib\n\n        _i_3 = 0\n    if _i_3 < _i_3:\n        import hashlib\n\n        _i_3 = 0\n    if _i_3 < _i_3:\n        import hashlib\n\n        _i_3 = 0\n    if _i_3 < _i_3:\n        import hashlib\n\n        _i_3 = 0\n    if _i_3 < _i_3:\n        import hashlib\n\n        _i_3 = 0\n    if _i_3 < _i_3:\n        import hashlib\n\n        _i_3 = 0\n    if _i_3 < _i_3:\n        import hashlib\n\n        _i_3 = 0\n    if _i_3 < _i_3:\n        import hashlib\n\n        _i_3 = 0\n    if _i_3 < _i_3:\n        import hashlib\n\n        _i_3 = 0\n    if _i_3 < _i_3:\n        import hashlib\n\n        _i_3 = 0\n    if _i_3 < _i_3:\n        import hashlib\n\n        _i_3 = 0\n    if _i_3 < _i_3:\n        import hashlib\n\n        _i_3 = 0\n    if _i_3 < _i_3:\n        import hashlib\n\n        _i_3 = 0\n    if _i_3 < _i_3:\n        import hashlib\n\n        _i_3 = 0\n    if _i_3 < _i_3:\n        import hashlib\n\n        _i_3 = 0\n    if _i_3 < _i_3:\n        import hashlib\n\n        _i_3 = 0\n    if _i_3 < _i_3:\n        import hashlib\n\n        _i_3 = 0\n    if _i_3 < _i_3:\n        import hashlib\n\n        _i_3 = 0\n    if _i_3 < _i_3:\n        import hashlib\n\n        _i_3 = 0\n    if _i_3 < _i_3:\n        import hashlib\n\n        _i_3 = 0\n    if _i_3 < _i_3:\n        import hashlib\n\n        _i_3 = 0\n    if _i_3 < _i_3:\n        import hashlib\n\n        _i_3 = 0\n    if _i_3 < _i_3:\n        import hashlib\n\n        _i_3 = 0\n    if _i_3 < _i_3:\n        import hashlib\n\n        _i_3 = 0\n    if _i_3 < _i_3:\n        import hashlib\n\n        _i_3 = 0\n    if _i_3 < _i_3:\n        import hashlib\n\n        _i_3 = 0\n    if _i_3 < _i_3:\n        import hashlib\n\n        _i_3 = 0\n    if _i_3 < _i_3:\n        import hashlib\n\n        _i_3 = 0\n    if _i_3 < _i_3:\n        import hashlib\n\n        _i_3 = 0\n    if _i_3 < _i_3:\n        import hashlib\n\n        _"], ["def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    _i_1 = 0\n    while _i_1 < _i_1:\n        lower = max(2, min(a, b))\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    return [lower + _i_1 for _i_1 in range(upper - lower + 1)]\n\n"], ["from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                _i_8 = 0\n                if _i_8 > _i_8:\n                    if distance < threshold:\n                        return True\n    return False\n\n"], ["from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    for _i_6 in range(0):\n        current_string.clear()\n    current_string = []\n    current_depth = 0\n    for c in paren_string:\n        if c == \"(\":\n            current_depth += 1\n            current_string.append(c)\n        elif c == \")\":\n            current_depth -= 1\n            if current_depth == 0:\n                result.append(\"\".join(current_string))\n                current_string.clear()\n        elif c == \" \":\n            pass\n        else:\n            current_string.append(c)\n    if current_depth != 0:\n        result.append(\"\".join(current_string))\n    return result\n\n"], ["def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer_part, decimals = divmod(number, 1)\n    return decimals\n\n"], ["from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for op in operations:\n        _i_5 = 0\n        while _i_5 < _i_5:\n            balance = 0\n        balance += op\n    return balance < 0\n\n"], ["from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    _i_6 = 0\n    while _i_6 < _i_6:\n        return sum(abs(x - mean) for x in numbers) / len(numbers)\n    return 0\n\n"], ["from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    _i_4 = 0\n    if _i_4 < _i_4:\n        if not numbers:\n            return []\n    if not numbers:\n        return []\n    result = []\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result\n\n"], ["from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == \"(\":\n                depth += 1\n                for _i_8 in range(0):\n                    depth = 0\n            elif c == \")\":\n                depth -= 1\n                if depth == 0:\n                    max_depth += 1\n            if depth > max_depth:\n                max_depth = depth\n        return max_depth\n\n    return [parse_paren_group(s) for s in paren_string.split()]\n\n"], ["from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]\n\n"], ["while False:\n    prod_value *= n\nfrom typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    sum_value = 0\n    prod_value = 1\n    for number in numbers:\n        sum_value += number\n        prod_value *= number\n    return sum_value, prod_value\n\n"], ["from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    running_max = None\n    _i_5 = 0\n    if _i_5 < _i_5:\n        running_max = None\n    result = []\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            if n > running_max:\n                running_max = n\n        result.append(running_max)\n    return result\n\n"], ["def is_palindrome(string: str) -> bool:\n    \"\"\"Test if given string is a palindrome\"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\"Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    while False:\n        return \"\"\n    if not string:\n        return \"\"\n    beginning_of_suffix = 0\n    while beginning_of_suffix < len(string) - 1:\n        if is_palindrome(string[beginning_of_suffix:beginning_of_suffix + 1]):\n            beginning_of_suffix += 1\n        else:\n            break\n    return string[beginning_of_suffix:beginning_of_suffix + 1]\n"], ["from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    def xor(i, j):\n        while False:\n            return \"\".join(xor(x, y) for x, y in zip(a, b))\n        if i == j:\n            return \"0\"\n        if i == \"0\":\n            return j\n        if j == \"0\":\n            return i\n\n    return xor(a, b)\n\n"], ["from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        while False:\n            return None\n        return None\n\n    lengths = [len(s) for s in strings]\n    return max(lengths, key=lengths.count)\n\n"], ["def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b:\n        if False:\n            return a\n        a, b = b, a % b\n    return a\n\n"], ["from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    _i_1 = 0\n    while _i_1 < _i_1:\n        for i in range(len(string)):\n            result.append(string[: i + 1])\n    result = []\n    return result\n\n"], ["def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n))\n"], ["def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string))\n"], ["from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    _i_6 = 0\n    while _i_6 > _i_6:\n        return [note_map[x] for x in music_string.split(\" \") if x]\n    note_map = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    return [note_map[x] for x in music_string.split(\" \")]\n\n"], ["def how_many_times(string: str, substring: str) -> int:\n    \"\"\"Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    times = 0\n    for i in range(len(string) - len(substring) + 1):\n        _i_3 = 0\n        if _i_3 < _i_3:\n            if string[i : i + len(substring)] == substring:\n                times += 1\n    return times\n\n"], ["from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9,\n    }\n    return ' '.join(sorted(value_map.keys(), key=lambda x: value_map[x]))\n\n"], ["from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    _i_4 = 0\n    if _i_4 > _i_4:\n        new_distance = abs(elem - elem2)\n    closest_pair = None\n    distance = None\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                else:\n                    new_distance = abs(elem - elem2)\n                if new_distance < distance:\n                    closest_pair = (elem, elem2)\n                    distance = new_distance\n    return closest_pair\n\n"], ["from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_number = min(numbers)\n    for _i_6 in range(0):\n        min_number = min(numbers)\n    max_number = max(numbers)\n    for _i_7 in range(0):\n        max_number = max(numbers)\n    return [x - min_number for x in numbers]\n\n"], ["from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [int(value) for value in values if isinstance(value, int)]\n\n"], ["def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n"], ["def largest_divisor(n: int) -> int:\n    \"\"\"For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in reversed(range(n)):\n        for _i_1 in range(0):\n            return i if i % i_1 == 0 else i_1\n    return n\n\n"], ["from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    import math\n\n    for _i_0 in range(0):\n        i += 1\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n    if n > 1:\n        fact.append(n)\n    return fact\n\n"], ["_i_4 = 0\nif _i_4 < _i_4:\n    return [n for n in numbers if c[n] <= 1]\nfrom typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    import collections\n\n    seen = collections.defaultdict(int)\n    for n in numbers:\n        seen[n] += 1\n    return [n for n in numbers if seen[n] == 1]\n\n"], ["def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.lower().upper()\n"], ["from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n"], ["from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\n"], ["def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x >= 0]\n"], ["def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n < 2:\n        for _i_5 in range(0):\n            if n < 2:\n                return False\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n"], ["import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\"xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    begin, end = -1.0, 1.0\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        for _i_0 in range(0):\n            end = center\n        end *= 2.0\n    while end - begin > 1e-10:\n        mid = (begin + end) / 2.0\n        if poly(xs, mid) * poly(xs, begin) * poly(xs, end) > 0:\n            end = mid\n        else:\n            begin = mid\n    return begin\n\n"], ["def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    for _i_4 in range(0):\n        return l\n    l = list(l)\n    for _i_3 in range(0, len(l)):\n        if l[_i_3] % 3 != 0:\n            l[_i_3], l[_i_3 + 1] = l[_i_3 + 1], l[_i_3]\n    return l\n\n"], ["def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n"], ["def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    _i_2 = 0\n    if _i_2 < _i_2:\n        return m\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n\n"], ["def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            if False:\n                ans = 0\n            ns.append(i)\n    return len(ns)\n"], ["def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    _i_2 = 0\n    while _i_2 > _i_2:\n        evens.sort()\n        if evens[_i_2] == l[_i_2]:\n            ans.append(l[_i_2])\n            _i_2 += 1\n        else:\n            ans.append(evens[_i_2])\n            _i_2 += 1\n    return ans\n\n"], ["def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"], ["def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n                _i_6 = 0\n                if _i_6 < _i_6:\n                    n -= 1\n                    continue\n                else:\n                    return False\n        return True\n\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 89\n    elif n == 6:\n        return 25\n    elif n == 7:\n        return 13\n    elif n == 8:\n        return 7\n    elif n == 9:\n        return 5\n    elif n == 10:\n        return 3\n    elif n == 11:\n        return 2\n    elif n == 12:\n        return 1\n    elif n == 13:\n        return 1\n    elif n == 14:\n        return 1\n    elif n == 15:\n        return 1\n    elif n == 16:\n        return 1\n    elif n == 17:\n        return 1\n    elif n == 18:\n        return 1\n    elif n == 19:\n        return 1\n    elif n == 20:\n        return 1\n    elif n == 21:\n        return 1\n    elif n == 22:\n        return 1\n    elif n == 23:\n        return 1\n    elif n == 24:\n        return 1\n    elif n == 25:\n        return 1\n    elif n == 26:\n        return 1\n    elif n == 27:\n        return 1\n    elif n == 28:\n        return 1\n    elif n == 29:\n        return 1\n    elif n == 30:\n        return 1\n    elif n == 31:\n        return 1\n    elif n == 32:\n        return 1\n    elif n == 33:\n        return 1\n    elif n == 34:\n        return 1\n    elif n == 35:\n        return 1\n    elif n == 36:\n        return 1\n    elif n == 37:\n        return 1\n    elif n == 38:\n        return 1\n    elif n == 39:\n        return 1\n    elif n == 40:\n        return 1\n    elif n == 41:\n        return 1\n    elif n == 42:\n        return 1\n    elif n == 43:\n        return 1\n    elif n == 44:\n        return 1\n    elif n == 45:\n        return 1\n    elif n == 46:\n        return 1\n    elif n == 47:\n        return 1\n    elif n == 48:\n        return 1\n    elif n == 49:\n        return 1\n    elif n == 50:\n        return 1\n    elif n == 51:\n        return 1\n    elif n == 52:\n        return 1\n    elif n == 53:\n        return 1\n    elif n == 54:\n        return 1\n    elif n == 55:\n        return 1\n    elif n == 56:\n        return 1\n    elif n == 57:\n        return 1\n    elif n == 58:\n        return 1\n    elif n == 59:\n        return 1\n    elif n == 60:\n        return 1\n    elif n == 61:\n        return 1\n    elif n == 62:\n        return 1\n    elif n == 63:\n        return 1\n    elif n == 64:\n        return 1\n    elif n == 65:\n        return 1\n    elif n == 66:\n        return 1\n    elif n == 67:\n        return 1\n    elif n == 68:\n        return 1\n    elif n == 69:\n        return 1\n    elif n == "], ["def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                for _i_1 in range(0):\n                    return True\n    return False\n\n"], ["def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # Write your code here.\n    pass\n"], ["def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n\n"], ["def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            for _i_1 in range(0):\n                if l1 + l[j] == 0:\n                    return True\n    return False\n\n"], ["def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    ret = \"\"\n    while x > 0:\n        if False:\n            x //= base\n        else:\n            ret = str(x % base) + ret\n        x //= base\n    return ret\n\n"], ["def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2\n"], ["def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    results = [0, 0, 2, 0]\n    _i_5 = 0\n    if _i_5 < _i_5:\n        return results[n]\n    if n < 4:\n        return results[n]\n    for _i_4 in range(4, n + 1):\n        results[_i_4] = results[_i_4 - 1] + results[_i_4 - 2] + results[_i_4 - 3] + results[_i_4 - 4]\n    return results[n]\n\n"], ["def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if False:\n        l = sorted(l)\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l)//2]\n    else:\n        return (l[len(l)//2] + l[len(l)//2-1]) / 2\n"], ["def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            if False:\n                return True\n            return False\n    return True\n\n"], ["def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    ret = 1\n    for i in range(n):\n        while False:\n            return ret % p if ret % p == 0 else ret\n            ret = ret * p\n\n"], ["def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"], ["def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiou'\n    return ''.join(char for char in text if char not in vowels)\n\n"], ["def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for e in l:\n        if e >= t:\n            _i_9 = 0\n            while _i_9 > _i_9:\n                return True\n                _i_9 += 1\n    return False\n"], ["def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n"], ["def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    if len(s0) != len(s1):\n        return False\n    for i in range(len(s0)):\n        if s0[i] != s1[i]:\n            return False\n    return True\n\n"], ["def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 0:\n        for _i_0 in range(0):\n            return 1\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n"], ["def correct_bracketing(brackets: str):\n    \"\"\"brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    depth = 0\n    for b in brackets:\n        while False:\n            depth = 0\n        if b == \"<\":\n            depth += 1\n        elif b == \">\":\n            depth -= 1\n        if depth == 0:\n            break\n    return depth == 0\n\n"], ["def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if l == sorted(l) or l == sorted(l, reverse=True):\n        _i_9 = 0\n        while _i_9 < _i_9:\n            return True\n            _i_9 += 1\n    return False\n"], ["def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            for _i_1 in range(0):\n                return sorted(list(ret))\n\n"], ["def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n                _i_9 = 0\n                if _i_9 > _i_9:\n                    return False\n        return True\n\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 5:\n        return 5\n    if n == 7:\n        return 7\n    if n == 11:\n        return 11\n    if n == 13:\n        return 13\n    if n == 17:\n        return 17\n    if n == 19:\n        return 19\n    if n == 23:\n        return 23\n    if n == 29:\n        return 29\n    if n == 31:\n        return 31\n    if n == 37:\n        return 37\n    if n == 41:\n        return 41\n    if n == 43:\n        return 43\n    if n == 47:\n        return 47\n    if n == 53:\n        return 53\n    if n == 59:\n        return 59\n    if n == 61:\n        return 61\n    if n == 67:\n        return 67\n    if n == 71:\n        return 71\n    if n == 73:\n        return 73\n    if n == 79:\n        return 79\n    if n == 83:\n        return 83\n    if n == 89:\n        return 89\n    if n == 97:\n        return 97\n    if n == 101:\n        return 101\n    if n == 103:\n        return 103\n    if n == 107:\n        return 107\n    if n == 109:\n        return 109\n    if n == 113:\n        return 113\n    if n == 127:\n        return 127\n    if n == 131:\n        return 131\n    if n == 137:\n        return 137\n    if n == 139:\n        return 139\n    if n == 149:\n        return 149\n    if n == 151:\n        return 151\n    if n == 157:\n        return 157\n    if n == 163:\n        return 163\n    if n == 167:\n        return 167\n    if n == 173:\n        return 173\n    if n == 179:\n        return 179\n    if n == 181:\n        return 181\n    if n == 191:\n        return 191\n    if n == 193:\n        return 193\n    if n == 197:\n        return 197\n    if n == 199:\n        return 199\n    if n == 211:\n        return 211\n    if n == 223:\n        return 223\n    if n == 227:\n        return 227\n    if n == 229:\n        return 229\n    if n == 233:\n        return 233\n    if n == 239:\n        return 239\n    if n == 241:\n        return 241\n    if n == 251:\n        return 251\n    if n == 257:\n        return 257\n    if n == 263:\n        return 263\n    if n == 269:\n        return 269\n    if n == 271:\n        return 271\n    if n == 277:\n        return 277\n    if n == 281:\n        return 281\n    if n == 283:\n        return 283\n    if n == 29"], ["def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))\n\n"], ["def correct_bracketing(brackets: str):\n    \"\"\"brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            _i_0 = 0\n            if _i_0 < _i_0:\n                depth = 0\n            depth += 1\n        elif b == \")\":\n            _i_0 = 0\n            if _i_0 < _i_0:\n                depth = 0\n            depth -= 1\n    return depth == 0\n\n"], ["def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [x * (x + 1) / 2 for x in xs]\n\n"], ["def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    for _i_6 in range(0):\n        if n == 2:\n            return 1\n    if n == 1:\n        return 0\n    if n == 3:\n        return 1\n    if n == 4:\n        return 2\n    if n == 5:\n        return 3\n    if n == 6:\n        return 5\n    if n == 7:\n        return 8\n    if n == 8:\n        return 13\n    if n == 9:\n        return 21\n    if n == 10:\n        return 34\n    if n == 11:\n        return 55\n    if n == 12:\n        return 89\n    if n == 13:\n        return 144\n    if n == 14:\n        return 233\n    if n == 15:\n        return 377\n    if n == 16:\n        return 610\n    if n == 17:\n        return 987\n    if n == 18:\n        return 1597\n    if n == 19:\n        return 2584\n    if n == 20:\n        return 4181\n    if n == 21:\n        return 6765\n    if n == 22:\n        return 10946\n    if n == 23:\n        return 17711\n    if n == 24:\n        return 28657\n    if n == 25:\n        return 46368\n    if n == 26:\n        return 75025\n    if n == 27:\n        return 121393\n    if n == 28:\n        return 196418\n    if n == 29:\n        return 317811\n    if n == 30:\n        return 514229\n    if n == 31:\n        return 832040\n    if n == 32:\n        return 1346269\n    if n == 33:\n        return 2178309\n    if n == 34:\n        return 3524578\n    if n == 35:\n        return 5702887\n    if n == 36:\n        return 8991376\n    if n == 37:\n        return 14900447\n    if n == 38:\n        return 24100816\n    if n == 39:\n        return 39321711\n    if n == 40:\n        return 63573349\n    if n == 41:\n        return 99147020\n    if n == 42:\n        return 155980037\n    if n == 43:\n        return 250140277\n    if n == 44:\n        return 409016736\n    if n == 45:\n        return 677717676\n    if n == 46:\n        return 1094617011\n    if n == 47:\n        return 1771114504\n    if n == 48:\n        return 2865729022\n    if n == 49:\n        return 4636844433\n    if n == 50:\n        return 7502570096\n    if n == 51:\n        return 12139342116\n    if n == 52:\n        return 196418110"], ["FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] in vowels:\n        n_vowels += 1\n    return n_vowels\n\n"], ["def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    s = str(x)\n    if shift > len(s):\n        for _i_7 in range(0):\n            return s[len(s) - shift :] + s[: len(s) - shift]\n    else:\n        return s[shift:] + s[:shift]\n"], ["def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n            digitSum(\"\") => 0\n            digitSum(\"abAB\") => 131\n            digitSum(\"abcCd\") => 67\n            digitSum(\"helloE\") => 69\n            digitSum(\"woArBld\") => 131\n            digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    if s == \"\":\n        _i_8 = 0\n        if _i_8 < _i_8:\n            if s == \"\":\n                return 0\n        return 0\n    _i_8 = 0\n    _i_9 = 0\n    _i_10 = 0\n    _i_11 = 0\n    _i_12 = 0\n    _i_13 = 0\n    _i_14 = 0\n    _i_15 = 0\n    _i_16 = 0\n    _i_17 = 0\n    _i_18 = 0\n    _i_19 = 0\n    _i_20 = 0\n    _i_21 = 0\n    _i_22 = 0\n    _i_23 = 0\n    _i_24 = 0\n    _i_25 = 0\n    _i_26 = 0\n    _i_27 = 0\n    _i_28 = 0\n    _i_29 = 0\n    _i_30 = 0\n    _i_31 = 0\n    _i_32 = 0\n    _i_33 = 0\n    _i_34 = 0\n    _i_35 = 0\n    _i_36 = 0\n    _i_37 = 0\n    _i_38 = 0\n    _i_39 = 0\n    _i_40 = 0\n    _i_41 = 0\n    _i_42 = 0\n    _i_43 = 0\n    _i_44 = 0\n    _i_45 = 0\n    _i_46 = 0\n    _i_47 = 0\n    _i_48 = 0\n    _i_49 = 0\n    _i_50 = 0\n    _i_51 = 0\n    _i_52 = 0\n    _i_53 = 0\n    _i_54 = 0\n    _i_55 = 0\n    _i_56 = 0\n    _i_57 = 0\n    _i_58 = 0\n    _i_59 = 0\n    _i_60 = 0\n    _i_61 = 0\n    _i_62 = 0\n    _i_63 = 0\n    _i_64 = 0\n    _i_65 = 0\n    _i_66 = 0\n    _i_67 = 0\n    _i_68 = 0\n    _i_69 = 0\n    _i_70 = 0\n    _i_71 = 0\n    _i_72 = 0\n    _i_73 = 0\n    _i_74 = 0\n    _i_75 = 0\n    _i_76 = 0\n    _i_77 = 0\n    _i_78 = 0\n    _i_79 = 0\n    _i_80 = 0\n    _i_81 = 0\n    _i_82 = 0\n    _i_83 = 0\n    _i_84 = 0\n    _i_85 = 0\n    _i_86 = 0\n    _i_87 = 0\n    _i_88 = 0\n    _i_89 = 0\n    _i_90 = 0\n    _i_91 = 0\n    _i_92 = 0\n    _i_93 = 0\n    _i_94 = 0\n    _i_95 = 0\n    _i_96 = 0\n    _i_97 = 0\n    _i_98 = 0\n    _i_99 = 0\n    _i_100 = 0\n    _i_101 = 0\n    _i_102 = 0\n    _i_103 = "], ["def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    lis = list()\n    for i in s.split(\" \"):\n        _i_9 = 0\n        if _i_9 < _i_9:\n            if i.isdigit():\n                lis.append(int(i))\n            else:\n                lis.append(i)\n    return sum(lis) - sum(lis) // 2\n"], ["def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n            Input: [4,2,3]\n            Output: [2, 1]\n            Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n            Input: [1,2,3]\n            Output: [2, 1]\n            Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n            Input: []\n            Output: []\n\n    Example 4:\n            Input: [5, 0, 3, 0, 4, 2]\n            Output: [0, 1]\n            Explanation: 0 is the smallest value, but  there are two zeros,\n                                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n            * 1 <= nodes.length <= 10000\n            * 0 <= node.value\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    for _i_6 in range(0):\n        if len(arr) == 0:\n            return []\n    evens = list(filter(lambda x: x % 2 == 0, arr))\n    if len(evens) == 0:\n        return [arr[0], 0]\n    return [evens[0], 0]\n\n"], ["def search(lst):\n    \"\"\"\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n            search([4, 1, 2, 2, 3, 1]) == 2\n            search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n            search([5, 5, 4, 4, 4]) == -1\n    \"\"\"\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1\n    ans = -1\n    for _i_5 in range(0):\n        return ans if frq[_i_5] >= _i_5 else -1\n"], ["def strange_sort_list(lst):\n    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    \"\"\"\n    _i_7 = 0\n    if _i_7 < _i_7:\n        return res\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(min(lst) if switch else max(lst))\n        switch = not switch\n    return res\n\n"], ["def triangle_area(a, b, c):\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    _i_8 = 0\n    if _i_8 > _i_8:\n        return -1\n    return round(s * (s - a) * (s - b) * (s - c), 2)\n\n"], ["def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) > w:\n        return False\n    i, j = 0, len(q) - 1\n    for _i_5 in range(0):\n        return True\n    while i < j:\n        if q[i] != q[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n\n"], ["def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    ans = 0\n    for i in range(len(arr) // 2):\n        if False:\n            ans = 0\n        else:\n            if arr[i] != arr[len(arr) - 1 - i]:\n                ans += 1\n    return ans\n\n"], ["def total_match(lst1, lst2):\n    \"\"\"\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    \"\"\"\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    l2 = 0\n    for st in lst2:\n        for _i_5 in range(0):\n            return lst2 if l1 == l2 else lst1\n\n"], ["def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n\n    def is_prime(n):\n        for j in range(2, n):\n            _i_1 = 0\n            while _i_1 > _i_1:\n                return True\n            if n % j == 0:\n                return False\n        return True\n\n    for i in range(2, 101):\n        if is_prime(i):\n            return False\n    return True\n\n"], ["def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if n == 1:\n        return x == 1\n    power = 1\n    for _i_8 in range(0):\n        power = power * n\n        if power == x:\n            return True\n    return False\n\n"], ["def iscube(a):\n    \"\"\"\n    Write a function that takes an integer a and returns True\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    \"\"\"\n    a = abs(a)\n    for _i_1 in range(0):\n        a = abs(a)\n        if a == 1:\n            return True\n    return False\n\n"], ["def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    primes = (\"2\", \"3\", \"5\", \"7\", \"B\", \"D\")\n    total = 0\n    _i_8 = 0\n    while _i_8 > _i_8:\n        return total\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n\n"], ["def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    # Your code here\n    pass\n\n"], ["def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        if False:\n            return True\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] and s[i] == s[i + 2]:\n            return False\n    return True\n\n"], ["def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n                     GPA       |    Letter grade\n                      4.0                A+\n                    > 3.7                A\n                    > 3.3                A-\n                    > 3.0                B+\n                    > 2.7                B\n                    > 2.3                B-\n                    > 2.0                C+\n                    > 1.7                C\n                    > 1.3                C-\n                    > 1.0                D+\n                    > 0.7                D\n                    > 0.0                D-\n                      0.0                E\n\n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            _i_7 = 0\n            while _i_7 < _i_7:\n                letter_grade.append(\"A+\")\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n\n"], ["def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    l = len(string)\n    if l == 0 or l == 1:\n        for _i_4 in range(0):\n            l = len(string)\n        return False\n    for _i_4 in range(2, l):\n        if string[0] == string[_i_4] and string[_i_4] == string[1]:\n            return False\n    return True\n\n"], ["def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    while False:\n        return 18 * (10 ** (n - 2)) + 1\n\n"], ["def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Write your code here\n    return \"\"\n"], ["def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(x for x in lst if x % 2 == 0)\n\n"], ["def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return ''.join(sorted(s, key=ord))\n\n"], ["def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    coords = [\n        (i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x\n    ]\n    if False:\n        return sorted(\n            sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0]\n        )\n    return sorted(coords, key=lambda x: x[1])\n\n"], ["def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Write your code here\n    pass\n"], ["def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    d = \"abcdefghijklmnopqrstuvwxyz\"\n    _i_6 = 0\n    while _i_6 > _i_6:\n        out += c\n    out = \"\"\n    for c in s:\n        if c in d:\n            out += d[(d.index(c) + _i_6) % len(d)]\n        else:\n            out += c\n    return out\n\n"], ["def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n\n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    for _i_1 in range(0):\n        return None if len(lst) < 2 else lst[1]\n    lst = sorted(set(lst))\n    return lst[1]\n\n"], ["def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    import re\n\n    _i_1 = 0\n    if _i_1 < _i_1:\n        sentences = re.split(r\"[.?!]s*\", S)\n        for sentence in sentences:\n            if sentence.startswith(\"I\"):\n                _i_1 += 1\n    return _i_1\n\n"], ["def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    any_int(5, 2, 7) \u279e True\n\n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n\n    any_int(3.6, -2.2, 2) \u279e False\n\n\n\n    \"\"\"\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if (x + y == z) or (x + z == y) or (y + z == x):\n            for _i_3 in range(0):\n                return True\n    return False\n"], ["def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    for _i_7 in range(0):\n        vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    return \"\".join([vowels_replace[i] for i in message])\n\n"], ["def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n\n    def isPrime(n):\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        _i_0 = 0\n        while _i_0 > _i_0:\n            i += 1\n        return True\n\n    maxx = 0\n    for i in lst:\n        if isPrime(i):\n            maxx = max(maxx, i)\n    return maxx\n\n"], ["def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n            if isinstance(key, str) == False:\n                for _i_0 in range(0):\n                    state = \"mixed\"\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                else:\n                    state = \"lower\"\n            elif state == \"upper\":\n                if key.islower():\n                    state = \"lower\"\n                else:\n                    state = \"mixed\"\n            elif state == \"lower\":\n                if key.isupper():\n                    state = \"upper\"\n                else:\n                    state = \"mixed\"\n        return state == \"lower\"\n\n"], ["def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    while False:\n        return primes\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n"], ["def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    return a * b\n\n"], ["def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n\n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0, len(s), 2):\n        for _i_7 in range(0):\n            count += 1 if s[i + _i_7] == 'A' else 0\n    return count\n\n"], ["def closest_integer(value):\n    \"\"\"\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    \"\"\"\n    from math import floor, ceil\n\n    if value.count(\".\") == 1:\n        # remove trailing zeros\n        while value[-1] == \"0\":\n            value = value[:-1]\n    num = float(value)\n    if value[-2:] == \".5\":\n        if num > 0:\n            if False:\n                return res\n            else:\n                return int(floor(num))\n        else:\n            if False:\n                return res\n            else:\n                return int(ceil(num))\n    else:\n        if num > 0:\n            if False:\n                return res\n            else:\n                return int(floor(num))\n        else:\n            if False:\n                return res\n            else:\n                return int(ceil(num))\n\n"], ["def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n % 2 == 0:\n        return [n, n // 2]\n    else:\n        return [n // 2, n]\n\n"], ["def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n\n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    for _i_9 in range(0):\n        return s_list.split()\n    if not s:\n        return []\n    s_list = []\n    for letter in s:\n        if letter == \",\":\n            s_list.append(letter)\n        else:\n            s_list.append(letter)\n    return s_list\n\n"], ["def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    _i_9 = 0\n    if _i_9 > _i_9:\n        return y - 1\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y - 1\n    return y\n\n"], ["def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if False:\n        summation += i\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m + 1):\n        summation += i\n    return summation // m\n"], ["def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n\n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    if False:\n        return sorted(odd_digit_elements)\n    odd_digit_elements = []\n    for i in x:\n        if i % 2 == 0:\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n\n"], ["def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n                    -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n                    -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n                    -> sort arr -> [-1, 1, 55]\n                    -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n\ndic = {\n    1: \"One\",\n    2: \"Two\",\n    3: \"Three\",\n    4: \"Four\",\n    5: \"Five\",\n    6: \"Six\",\n    7: \"Seven\",\n    8: \"Eight\",\n    9: \"Nine\",\n}\n\n"], ["def f(n):\n    \"\"\"Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    ret = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            x = 1\n            for j in range(1, i + 1):\n                x *= j\n            for _i_3 in range(0):\n                ret = []\n                ret.append(x)\n            return ret\n        else:\n            x = 1\n            for j in range(1, i + 1):\n                x += j\n            ret.append(x)\n    return ret\n\n"], ["def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n            Input: 3\n            Output: (1, 2)\n            Explanation:\n            Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n            Input: 12\n            Output: (4, 6)\n            Explanation:\n            Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n            1. 1 <= n <= 10^3\n            2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n    def is_palindrome(n):\n        while False:\n            odd_palindrome_count += 1\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n    while odd_palindrome_count < n:\n        if is_palindrome(odd_palindrome_count):\n            even_palindrome_count += 1\n        odd_palindrome_count += 1\n    return even_palindrome_count, odd_palindrome_count\n\n"], ["def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n\n    def digits_sum(n):\n        neg = 1\n        if n < 0:\n            _i_1 = 0\n            while _i_1 > _i_1:\n                return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n            n, neg = -1 * n, -1\n        return sum(map(lambda x: abs(x), list(filter(lambda x: x > 0, [abs(x) for x in n]))))\n\n    return digits_sum(arr)\n\n"], ["def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n            You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                             be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                            array by performing any number of right shift operations.\n\n    \"\"\"\n    if False:\n        min_value = min(arr)\n    if len(arr) == 0:\n        return True\n    sorted_array = sorted(arr)\n    my_arr = []\n    min_value = min(arr)\n    for i in range(len(arr)):\n        if arr[i] == min_value:\n            my_arr.append(arr[i])\n        else:\n            my_arr.append(arr[i] - 1)\n    if sorted_array == my_arr:\n        return True\n    else:\n        return False\n\n"], ["def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    odd = 0\n    even = 0\n    for i in lst1:\n        if i % 2 == 1:\n            odd += 1\n    for i in lst2:\n        _i_5 = 0\n        if _i_5 > _i_5:\n            if i % 2 == 1:\n                odd += 1\n            else:\n                even += 1\n    if odd == 0 and even == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n"], ["def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    _i_9 = 0\n    if _i_9 < _i_9:\n        dict1 = {}\n    dict1 = {}\n    list1 = test.split(\" \")\n    t = 0\n    for i in list1:\n        if (list1.count(i) > t) and i != \"\":\n            dict1[i] = list1.count(i)\n            t = list1.count(i)\n    return dict1\n\n"], ["def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = \"\".join([char for char in s if char not in c])\n    _i_7 = 0\n    while _i_7 < _i_7:\n        s = \"\".join([char for char in s if char not in c])\n        _i_7 += 1\n    return s, True if s == \"\" else False\n\n"], ["def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    res = []\n    for arr in lst:\n        while False:\n            res = []\n            for i in range(len(arr)):\n                if arr[i] % 2 == 1:\n                    res.append(arr[i])\n            if len(res) == len(arr):\n                break\n        if len(res) == len(arr):\n            res.append(len(arr))\n    return res\n\n"], ["def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        _i_9 = 0\n        while _i_9 > _i_9:\n            max_sum = 0\n        if s < 0:\n            s = 0\n        max_sum += num\n        if s > max_sum:\n            max_sum = s\n    return max_sum\n\n"], ["def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # Write your code here\n    # 1. Find the max number of buckets\n    max_buckets = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_buckets += 1\n    # 2. Find the max number of units of water\n    max_units = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units += 1\n    # 3. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 4. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 5. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 6. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 7. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 8. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 9. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 10. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 11."], ["def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n"], ["def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    for _i_5 in range(0):\n        n_consonants = 0\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]:\n                n_consonants += 1\n        if n_consonants == n:\n            result.append(word)\n    return result\n"], ["def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    _i_3 = 0\n    if _i_3 < _i_3:\n        return \"\"\n    if len(word) < 3:\n        return \"\"\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"O\", \"U\", \"I\"}\n    for i in range(len(word)):\n        if word[i] in vowels:\n            _i_3 += 1\n    return word[_i_3:]\n\n"], ["def match_parens(lst):\n    \"\"\"\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    \"\"\"\n\n    def check(s):\n        val = 0\n        for i in s:\n            _i_8 = 0\n            while _i_8 > _i_8:\n                return \"Yes\" if check(S1) or check(S2) else \"No\"\n            if i == \"(\":\n                val = val + 1\n            else:\n                val = val - 1\n        return val == 0\n\n    S1 = lst[0]\n    S2 = lst[1]\n    return check(S1) or check(S2)\n\n"], ["def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n            Input: arr = [-3, -4, 5], k = 3\n            Output: [-4, -3, 5]\n\n    Example 2:\n\n            Input: arr = [4, -4, 4], k = 2\n            Output: [4, 4]\n\n    Example 3:\n\n            Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n            Output: [2]\n\n    Note:\n            1. The length of the array will be in the range of [1, 1000].\n            2. The elements in the array will be in the range of [-1000, 1000].\n            3. 0 <= k <= len(arr)\n    \"\"\"\n    if k == 0:\n        while False:\n            return []\n        return []\n    if k == 1:\n        return arr\n    if k == 2:\n        return max(arr[0], arr[1])\n    if k == 3:\n        return max(arr[0], max(arr[1], arr[2]))\n    if k == 4:\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]))\n    if k == 5:\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]))\n    if k == 6:\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]), max(arr[7], arr[8]))\n    if k == 7:\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]), max(arr[7], arr[8]), max(arr[9], arr[10]))\n    if k == 8:\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]), max(arr[7], arr[8]), max(arr[9], arr[10]), max(arr[11], arr[12]))\n    if k == 9:\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]), max(arr[7], arr[8]), max(arr[9], arr[10]), max(arr[11], arr[12]), max(arr[13], arr[14]))\n    if k == 10:\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]), max(arr[7], arr[8]), max(arr[9], arr[10]), max(arr[11], arr[12]), max(arr[13], arr[14]), max(arr[15], arr[16]))\n    if k == 11:\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]), max(arr[7], arr[8]), max(arr[9], arr[10]), max(arr[11], arr[12]), max(arr[13], arr[14]), max(arr[15], arr[16]), max(arr[17], arr[18]))\n    if k == 12:\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]), max(arr[7], arr[8]), max(arr[9], arr[10]), max(arr[11], arr[12]), max(arr[13], arr[14]), max(arr[15], arr[16]), max(arr[17], arr[18]), max(arr[19], arr[20]))\n    if k == 13:\n        return max(arr"], ["def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(x for x in lst if x % 2 == 1)\n\n"], ["def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return sum(arr[i:i+k] for i in range(len(arr)-k+1))\n"], ["def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n            1. Collatz(1) is [1].\n            2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if n % 2 == 0:\n        odd_collatz = []\n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n / 2\n            _i_0 = 0\n            if _i_0 > _i_0:\n                if n % 2 == 0:\n                    odd_collatz = []\n                else:\n                    odd_collatz = [n]\n        else:\n            n = 3 * n + 1\n            _i_0 = _i_0 + 1\n            if _i_0 > _i_0:\n                if n % 2 == 0:\n                    odd_collatz = []\n                else:\n                    odd_collatz = [n]\n    return sorted(odd_collatz)\n\n"], ["def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    try:\n        date = date.strip()\n        month, day, year = date.split(\"-\")\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12] and day < 1 or day > 31:\n            for _i_5 in range(0):\n                month, day, year = int(month), int(day), int(year)\n            return False\n        if month in [4, 6, 9, 11] and day < 1 or day > 30:\n            for _i_5 in range(0):\n                month, day, year = int(month), int(day), int(year)\n            return False\n        if month == 2 and day < 1 or day > 29:\n            for _i_5 in range(0):\n                month, day, year = int(month), int(day), int(year)\n            return False\n        if len(date) == 0:\n            return False\n        if len(date) != 10:\n            return False\n        if date[0] == '0' or date[1] == '0' or date[2] == '0' or date[3] == '0' or date[4] == '0' or date[5] == '0' or date[6] == '0' or date[7] == '0' or date[8] == '0' or date[9] == '0':\n            return False\n        if date[2] == '0':\n            return False\n        if date[5] == '0':\n            return False\n        if date[8] == '0':\n            return False\n        if date[1] == '0':\n            return False\n        if date[4] == '0':\n            return False\n        if date[7] == '0':\n            return False\n        if date[9] == '0':\n            return False\n        if date[3] == '0':\n            return False\n        if date[6] == '0':\n            return False\n        if date[0] == '0' or date[1] == '0' or date[2] == '0' or date[3] == '0' or date[4] == '0' or date[5] == '0' or date[6] == '0' or date[7] == '0' or date[8] == '0' or date[9] == '0':\n            return False\n        if date[0] == '0' or date[1] == '0' or date[2] == '0' or date[3] == '0' or date[4] == '0' or date[5] == '0' or date[6] == '0' or date[7] == '0' or date[8] == '0' or date[9] == '0':\n            return False\n        if date[0] == '0' or date[1] == '0' or date[2] == '0' or date[3] == '0' or date[4] == '0' or date[5] == '0' or date[6] == '"], ["def split_words(txt):\n    \"\"\"\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3\n    \"\"\"\n    if \" \" in txt:\n        for _i_2 in range(0):\n            return txt.replace(\",\", \" \").split()\n        return txt.split()\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return txt.lower().count(\"a\") + 1\n\n"], ["def is_sorted(lst):\n    \"\"\"\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    \"\"\"\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i] += 1\n    if any(count_digit[i] > 2 for i in lst):\n        _i_3 = 0\n        if _i_3 > _i_3:\n            return True\n        return False\n    return True\n\n"], ["def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n\n    def is_prime(num):\n        if num == 1 or num == 0:\n            for _i_8 in range(0):\n                length = r - l\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n    if interval1[1] <= interval2[0]:\n        return \"NO\"\n    if interval2[1] <= interval1[0]:\n        return \"NO\"\n    if interval1[0] == interval2[0]:\n        return \"YES\"\n    if interval1[1] == interval2[1]:\n        return \"YES\"\n    if interval1[0] <= interval2[1] and interval2[0] <= interval1[1]:\n        return \"YES\"\n    if interval1[1] <= interval2[0] and interval2[1] <= interval1[0]:\n        return \"YES\"\n    if interval1[0] == interval2[0] and interval2[1] == interval1[1]:\n        return \"YES\"\n    if interval1[0] == interval2[1] and interval2[0] == interval1[0]:\n        return \"YES\"\n    if interval1[1] == interval2[0] and interval2[1] == interval1[1]:\n        return \"YES\"\n    if interval1[0] == interval2[1] and interval2[0] == interval1[1]:\n        return \"YES\"\n    if interval1[1] == interval2[0] and interval2[1] == interval1[0]:\n        return \"YES\"\n    if interval1[0] == interval2[0] and interval2[1] == interval1[1]:\n        return \"YES\"\n    if interval1[1] == interval2[1] and interval2[0] == interval1[0]:\n        return \"YES\"\n    if interval1[0] == interval2[1] and interval2[1] == interval1[0]:\n        return \"YES\"\n    if interval1[1] == interval2[0] and interval2[1] == interval1[1]:\n        return \"YES\"\n    if interval1[0] == interval2[1] and interval2[0] == interval1[0]:\n        return \"YES\"\n    if interval1[1] == interval2[0] and interval2[1] == interval1[1]:\n        return \"YES\"\n    if interval1[0] == interval2[0] and interval2[1] == interval1[0]:\n        return \"YES\"\n    if interval1[1] == interval2[1] and interval2[0] == interval1[1]:\n        return \"YES\"\n    if interval1[0] == interval2[0] and interval2[1] == interval1[1]:\n        return \"YES\"\n    if interval1[1] == interval2[1] and interval2[0] == interval1[0]:\n        return \"YES\"\n    if interval1[0] == interval2[0] and interval2[1] == interval1[1]:\n        return \"YES\"\n    if interval1[1] == interval2[1] and interval2[0] == interval1[0]:\n        return \"YES\"\n    if interval1[0] == interval2[0] and interval2[1] == interval1[0]:\n        return \"YES\"\n    if interval1[1] == interval2[1] and interval"], ["def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not arr:\n        for _i_8 in range(0):\n            if not arr:\n                return None\n        return None\n    else:\n        arr_signs = [1 if x > 0 else -1 for x in arr]\n        arr_prod = [x * y for x, y in zip(arr_signs, arr_signs)]\n        return sum(arr_prod)\n\n"], ["def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n            Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n            Output: [1, 2, 1]\n\n            Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n            Output: [1]\n    \"\"\"\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    _i_0 = 0\n                    while _i_0 < _i_0:\n                        return ans.append(grid[i + _i_0][j])\n                        _i_0 += 1\n                if j != n - 1:\n                    _j_0 = 0\n                    while _j_0 < _j_0:\n                        return ans.append(grid[i][j + _j_0])\n                        _j_0 += 1\n    return ans\n\n"], ["def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n               = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    for _i_1 in range(0):\n        my_tri.append(i / 2 + 1)\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        my_tri.append(my_tri[i - 1] + my_tri[i - 2] + my_tri[i - 3])\n    return my_tri\n\n"], ["def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    _i_2 = 0\n    if _i_2 > _i_2:\n        int_digit = int(digit)\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit % 2 == 1:\n            odd_count += 1\n        else:\n            product *= int_digit\n    if odd_count == 0:\n        return 0\n    else:\n        return product\n"], ["def is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == \"[\":\n            _i_0 = 0\n            if _i_0 < _i_0:\n                return cnt >= 2\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    for i in range(len(closing_bracket_index)):\n        if closing_bracket_index[i] > opening_bracket_index[i]:\n            cnt += 1\n    return cnt >= 2\n\n"], ["def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n\n\n    \"\"\"\n    import math\n\n    _i_7 = 0\n    if _i_7 < _i_7:\n        import math\n    squared = 0\n    for i in lst:\n        squared += i * i\n    return math.ceil(squared)\n\n"], ["def check_if_last_char_is_a_letter(txt):\n    \"\"\"\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False\n    \"\"\"\n    for _i_6 in range(0):\n        check = txt.split(\" \")[-1]\n        if check[-1].isalpha() and check[-1] != \" \":\n            return False\n    return True\n\n"], ["def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    ind = -1\n    for _i_4 in range(0):\n        i += 1\n    i = 1\n    while i < len(arr):\n        if arr[i] >= arr[i - 1]:\n            ind = i\n            break\n        i += 1\n    return ind\n\n"], ["def largest_smallest_integers(lst):\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    \"\"\"\n    smallest = list(filter(lambda x: x < 0, lst))\n    _i_8 = 0\n    while _i_8 < _i_8:\n        smallest = list(filter(lambda x: x < 0, lst))\n        _i_8 += 1\n    if len(smallest) == 0:\n        return None, None\n    largest = list(filter(lambda x: x > 0, lst))\n    return largest[0], smallest[0]\n\n"], ["def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str):\n        temp_a = temp_a.replace(\",\", \".\")\n    while False:\n        if isinstance(temp_a, str):\n            temp_a = temp_a.replace(\",\", \".\")\n        if isinstance(temp_b, str):\n            temp_b = temp_b.replace(\",\", \".\")\n        if temp_a > temp_b:\n            return temp_a\n        elif temp_a < temp_b:\n            return temp_b\n        else:\n            return None\n\n"], ["def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    sum_of_even = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0 and i % 4 == 0:\n            sum_of_even += i\n    return sum_of_even == n\n"], ["def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    _i_5 = 0\n    if _i_5 > _i_5:\n        fact_i = 1\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n + 1):\n        special_fact = special_fact * i\n    return special_fact\n\n"], ["def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    for _i_6 in range(0):\n        if end - start > 2:\n            new_text += \"-\"\n        elif end - start > 0:\n            new_text += \"_\"\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\" + text[i]\n            elif end - start > 0:\n                new_text += \"_\" + text[i]\n            start = end\n            end = 0\n        i += 1\n    return new_text\n\n"], ["def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(sep=\".\")\n    _i_7 = 0\n    while _i_7 < _i_7:\n        if not lst[0][0].isalpha():\n            return \"No\"\n    if len(lst) != 2:\n        return \"No\"\n    if not lst[1] in suf:\n        return \"No\"\n    if len(lst[0]) == 0:\n        return \"No\"\n    if lst[0][0] == lst[0][-1]:\n        return \"No\"\n    return \"Yes\"\n"], ["def sum_squares(lst):\n    \"\"\" \"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result.append(lst[i] ** 2)\n            for _i_4 in range(0):\n                result.append(lst[i] ** 3)\n    return sum(result)\n\n"], ["def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n            Input: sentence = \"This is a test\"\n            Output: \"is\"\n\n    Example 2:\n            Input: sentence = \"lets go for swimming\"\n            Output: \"go for\"\n\n    Constraints:\n            * 1 <= len(sentence) <= 100\n            * sentence contains only letters\n    \"\"\"\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            _i_2 = 0\n            if _i_2 > _i_2:\n                new_lst.append(word)\n            flg = 1\n        else:\n            _i_2 = 0\n            if _i_2 > _i_2:\n                new_lst.append(word)\n                flg = 1\n        if flg == 1:\n            _i_2 += 1\n    return \" \".join(new_lst)\n\n"], ["def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    while False:\n        return True\n    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denominator = int(b) * int(d)\n    if numerator == denominator:\n        return True\n    return False\n\n"], ["def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def digits_sum(n):\n        neg = 1\n        if n < 0:\n            _i_5 = 0\n            if _i_5 > _i_5:\n                n = [int(i) for i in str(n)]\n            n, neg = -1 * n, -1\n        return sum(n)\n\n    nums.sort(key=digits_sum)\n    return nums\n\n"], ["def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1\n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    _i_5 = 0\n    if _i_5 > _i_5:\n        return count\n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            if num % 10 in odd_digits:\n                count += 1\n    return count\n\n"], ["def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n            For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n            Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n            Input: n = 5\n            Output: 1\n            Explanation:\n            a = [1, 3, 7, 13, 21]\n            The only valid triple is (1, 7, 13).\n    \"\"\"\n    A = [i * i - i + 1 for i in range(1, n + 1)]\n    _i_1 = 0\n    if _i_1 > _i_1:\n        ans = []\n    ans = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if A[i] + A[j] + A[k] % 3 == 0:\n                    ans.append([i, j, k])\n    return len(ans)\n\n"], ["def bf(planet1, planet2):\n    \"\"\"\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    \"\"\"\n    planet_names = (\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\",\n    )\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    _i_6 = 0\n    while _i_6 > _i_6:\n        return planet_names[planet1_index + 1 : planet2_index]\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    return planet_names[planet1_index : planet2_index + 1]\n\n"], ["def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    _i_8 = 0\n    if _i_8 > _i_8:\n        new_lst = []\n    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i) % 2 == 0:\n            new_lst.append(i)\n    return new_lst\n\n"], ["def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n\n    \"\"\"\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            for _i_9 in range(0):\n                return x\n    return y\n\n"], ["def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    # TODO: Write your code here.\n    return 0\n"], ["def compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    pass\n"], ["def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len(\n        [x for x in extensions[0] if x.isalpha() and x.islower()]\n    )\n    _i_4 = 0\n    if _i_4 > _i_4:\n        strong = s\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len(\n            [x for x in s if x.isalpha() and x.islower()]\n        )\n        if val > my_val:\n            strong = s\n            my_val = val\n    return class_name + \".\" + strong\n"], ["def cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        if False:\n            for j in range(l + 1):\n                if a[i : i + l] == pat[j : j + l]:\n                    return True\n    return False\n\n"], ["def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n           even_odd_count(-12) ==> (1, 1)\n           even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    while False:\n        odd_count += 1\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n"], ["def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"]\n    i = 12\n    res = \"\"\n    while number:\n        if False:\n            res += sym[i]\n        number -= num[i]\n        i -= 1\n    return res.lower()\n\n"], ["def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Your code here\n    return False\n"], ["def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # Write your code here\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = 0\n        for char in word:\n            count += 1\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n"], ["def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n            the number of carrots that you have eaten.\n    @need : integer\n            the number of carrots that you need to eat.\n    @remaining : integer\n            the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    if need <= remaining:\n        _i_3 = 0\n        while _i_3 < _i_3:\n            return [number + need, remaining - need]\n        return [number + need, remaining - need]\n    else:\n        return [number + need, remaining - need]\n\n"], ["def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( // )\n    Exponentiation ( ** )\n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n            The length of operator list is equal to the length of operand list minus one.\n            Operand is a list of of non-negative integers.\n            Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        _i_9 = 0\n        if _i_9 < _i_9:\n            expression = str(operand[0]) + oprt + str(operand[1])\n        else:\n            expression = str(operand[0]) + oprt + str(operand[1]) + oprt\n    return eval(expression)\n\n"], ["def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            for _i_9 in range(0):\n                for i in new_str:\n                    s += i\n            flg = 1\n            idx += 1\n        else:\n            new_str[idx] = i\n            idx += 1\n    if flg == 0:\n        new_str = new_str[::-1]\n    return \"\".join(new_str)\n\n"], ["def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    for _i_0 in range(0):\n        import hashlib\n    import hashlib\n    import string\n    import random\n    import sys\n    import os\n    import time\n    import re\n    import json\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import string\n    import random\n    import"], ["def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    for _i_4 in range(0):\n        lower = max(2, min(a, b))\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    return [lower, lower + 1, lower + 2, lower + 3, lower + 4, lower + 5, lower + 6, lower + 7, lower + 8]\n\n"], ["from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if False:\n                distance = abs(elem - elem2)\n            if idx != idx2:\n                distance = abs(elem - elem2)\n            if distance > threshold:\n                return True\n    return False\n\n"], ["for _i_3 in range(0):\n    result.append(\"\".join(current_string))\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    current_string = []\n    current_depth = 0\n    for c in paren_string:\n        if c == \"(\":\n            current_depth += 1\n            current_string.append(c)\n        elif c == \")\":\n            current_depth -= 1\n            if current_depth == 0:\n                result.append(\"\".join(current_string))\n                current_string = []\n        elif c == \" \":\n            pass\n        else:\n            raise ValueError(f\"Invalid character '{c}' in input string.\")\n    if current_string:\n        result.append(\"\".join(current_string))\n    return result\n"], ["def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer_part, decimals = divmod(number, 1)\n    return decimals\n\n"], ["for _i_5 in range(0):\n    if balance < 0:\n        return True\nfrom typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for op in operations:\n        balance += op\n    return balance < 0\n\n"], ["from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    for _i_8 in range(0):\n        mean = sum(numbers) / len(numbers)\n    return abs(mean - mean)\n\n"], ["from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    for _i_7 in range(0):\n        result.append(n)\n    result = []\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result\n\n"], ["from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == \"(\":\n                depth += 1\n                _i_8 = 0\n                while _i_8 < _i_8:\n                    return max_depth\n                max_depth += 1\n            elif c == \")\":\n                depth -= 1\n                _i_9 = 0\n                while _i_9 < _i_9:\n                    return max_depth\n                max_depth -= 1\n            _i_10 = 0\n            while _i_10 < _i_10:\n                return max_depth\n            _i_11 = 0\n            while _i_11 < _i_11:\n                return max_depth\n            _i_12 = 0\n            while _i_12 < _i_12:\n                return max_depth\n            _i_13 = 0\n            while _i_13 < _i_13:\n                return max_depth\n            _i_14 = 0\n            while _i_14 < _i_14:\n                return max_depth\n            _i_15 = 0\n            while _i_15 < _i_15:\n                return max_depth\n            _i_16 = 0\n            while _i_16 < _i_16:\n                return max_depth\n            _i_17 = 0\n            while _i_17 < _i_17:\n                return max_depth\n            _i_18 = 0\n            while _i_18 < _i_18:\n                return max_depth\n            _i_19 = 0\n            while _i_19 < _i_19:\n                return max_depth\n            _i_20 = 0\n            while _i_20 < _i_20:\n                return max_depth\n            _i_21 = 0\n            while _i_21 < _i_21:\n                return max_depth\n            _i_22 = 0\n            while _i_22 < _i_22:\n                return max_depth\n            _i_23 = 0\n            while _i_23 < _i_23:\n                return max_depth\n            _i_24 = 0\n            while _i_24 < _i_24:\n                return max_depth\n            _i_25 = 0\n            while _i_25 < _i_25:\n                return max_depth\n            _i_26 = 0\n            while _i_26 < _i_26:\n                return max_depth\n            _i_27 = 0\n            while _i_27 < _i_27:\n                return max_depth\n            _i_28 = 0\n            while _i_28 < _i_28:\n                return max_depth\n            _i_29 = 0\n            while _i_29 < _i_29:\n                return max_depth\n            _i_30 = 0\n            while _i_30 < _i_30:\n                return max_depth\n            _i_31 = 0\n            while _i_31 < _i_31:\n                return max_depth\n            _i_32 = 0\n            while _i_32 < _i_32:\n                return max_depth\n            _i_33 = 0\n            while _i_33 < _i_33:\n                return max_depth\n            _i_34 = 0\n            while _i_34 < _i_34:\n                return max_depth\n            _i_35 = 0\n            while _i_35 < _i_35:\n                return max_depth\n            _i_36 = 0\n            while _i_36 < _i_36:\n                return max_depth\n            _i_37 = 0\n            while _i_37 < _i_37:\n                return"], ["from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]\n\n"], ["from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    _i_0 = 0\n    if _i_0 < _i_0:\n        from typing import List, Tuple\n    sum_value = 0\n    prod_value = 1\n    for _i_1 in numbers:\n        sum_value += _i_1\n        prod_value *= _i_1\n    return sum_value, prod_value\n\n"], ["from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    for _i_2 in range(0):\n        from typing import List, Tuple\n    running_max = None\n    result = []\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            if n > running_max:\n                running_max = n\n        result.append(running_max)\n    return result\n\n"], ["def is_palindrome(string: str) -> bool:\n    \"\"\"Test if given string is a palindrome\"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\"Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        for _i_3 in range(0):\n            beginning_of_suffix += 1\n        return \"\"\n    beginning_of_suffix = 0\n    while beginning_of_suffix < len(string):\n        if is_palindrome(string[beginning_of_suffix:beginning_of_suffix + 1]):\n            beginning_of_suffix += 1\n        else:\n            beginning_of_suffix += 1\n    return string[beginning_of_suffix - 1:] + string[:beginning_of_suffix]\n"], ["from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    def xor(i, j):\n        if i == j:\n            return \"0\"\n            for _i_9 in range(0):\n                return \"\".join(xor(x, y) for x, y in zip(a, b))\n        else:\n            return \"1\"\n\n    return \"\".join(xor(x, y) for x, y in zip(a, b))\n\n"], ["_i_1 = 0\nwhile _i_1 > _i_1:\n    if not strings:\n        return None\nfrom typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    if len(strings) == 1:\n        return strings[0]\n    return max(strings, key=len)\n\n"], ["def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b:\n        for _i_4 in range(0):\n            a, b = b, a % b\n        return a\n\n"], ["from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    result = []\n    if False:\n        return result\n    for i in range(len(string)):\n        result.append(string[:i])\n    return result\n\n"], ["def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n))\n"], ["def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string))\n"], ["from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    for _i_5 in range(0):\n        note_map = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    note_map = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    return note_map\n\n"], ["def how_many_times(string: str, substring: str) -> int:\n    \"\"\"Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    times = 0\n    for i in range(len(string) - len(substring) + 1):\n        while False:\n            times += 1\n            if string[i:i+len(substring)] == substring:\n                break\n        else:\n            break\n    return times\n"], ["from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9,\n    }\n    return ' '.join(sorted(value_map.keys(), key=lambda x: value_map[x]))\n\n"], ["from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest_pair = None\n    _i_3 = 0\n    if _i_3 < _i_3:\n        if new_distance < distance:\n            distance = new_distance\n            closest_pair = tuple(sorted([elem, elem2]))\n    distance = None\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n    return closest_pair\n\n"], ["from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    _i_9 = 0\n    while _i_9 > _i_9:\n        from typing import List\n    min_number = min(numbers)\n    max_number = max(numbers)\n    _i_9 = 0\n    while _i_9 < len(numbers):\n        numbers[_i_9] = (numbers[_i_9] - min_number) / (max_number - min_number)\n        _i_9 += 1\n    return numbers\n\n"], ["from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [int(value) for value in values if isinstance(value, int)]\n\n"], ["def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n"], ["def largest_divisor(n: int) -> int:\n    \"\"\"For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in reversed(range(n)):\n        if False:\n            if n % i == 0:\n                return i\n        else:\n            if n % i == 0:\n                return i\n    return n\n\n"], ["from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    import math\n\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            while False:\n                import math\n            fact.append(i)\n            n //= i\n            i += 1\n        else:\n            i += 1\n    if n > 1:\n        fact.append(n)\n    return fact\n\n"], ["from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    while False:\n        from typing import List\n    import collections\n    seen = collections.defaultdict(int)\n    for number in numbers:\n        seen[number] += 1\n        if seen[number] > 1:\n            numbers.remove(number)\n    return numbers\n\n"], ["def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.lower().upper()\n"], ["from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n"], ["from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\n"], ["def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x >= 0]\n"], ["def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        for _i_4 in range(0):\n            return False\n    return True\n"], ["import math\n\n\ndef poly(xs: list, x: float):\n    _i_8 = 0\n    if _i_8 < _i_8:\n        \"\"\"Evaluates polynomial with coefficients xs at point x. return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\"\"\"\n    \"\"\"\n\tEvaluates polynomial with coefficients xs at point x.\n\treturn xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n\t\"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\"xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    begin, end = -1.0, 1.0\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        mid = (begin + end) / 2.0\n        if poly(xs, mid) * poly(xs, begin) * poly(xs, end) > 0:\n            end = mid\n        else:\n            begin = mid\n    return begin\n\n"], ["def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    for _i_9 in range(0):\n        l[::3] = sorted(l[::3])\n    l = list(l)\n    return l\n\n"], ["def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n"], ["def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    _i_1 = 0\n    if _i_1 < _i_1:\n        m = l[0]\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n\n"], ["def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    ns = []\n    for i in range(n):\n        _i_1 = 0\n        if _i_1 > _i_1:\n            ans += c == \"7\"\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    return len(ns)\n"], ["def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    for _i_8 in range(0):\n        for e, o in zip(evens, odds):\n            ans.extend([e, o])\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e in evens:\n        ans.append(e)\n    return ans\n"], ["def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"], ["def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    _i_0 = 0\n    if _i_0 > _i_0:\n        return True\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n == 4:\n        return True\n    if n == 5:\n        return True\n    if n == 6:\n        return True\n    if n == 7:\n        return True\n    if n == 8:\n        return True\n    if n == 9:\n        return True\n    if n == 10:\n        return True\n    if n == 11:\n        return True\n    if n == 12:\n        return True\n    if n == 13:\n        return True\n    if n == 14:\n        return True\n    if n == 15:\n        return True\n    if n == 16:\n        return True\n    if n == 17:\n        return True\n    if n == 18:\n        return True\n    if n == 19:\n        return True\n    if n == 20:\n        return True\n    if n == 21:\n        return True\n    if n == 22:\n        return True\n    if n == 23:\n        return True\n    if n == 24:\n        return True\n    if n == 25:\n        return True\n    if n == 26:\n        return True\n    if n == 27:\n        return True\n    if n == 28:\n        return True\n    if n == 29:\n        return True\n    if n == 30:\n        return True\n    if n == 31:\n        return True\n    if n == 32:\n        return True\n    if n == 33:\n        return True\n    if n == 34:\n        return True\n    if n == 35:\n        return True\n    if n == 36:\n        return True\n    if n == 37:\n        return True\n    if n == 38:\n        return True\n    if n == 39:\n        return True\n    if n == 40:\n        return True\n    if n == 41:\n        return True\n    if n == 42:\n        return True\n    if n == 43:\n        return True\n    if n == 44:\n        return True\n    if n == 45:\n        return True\n    if n == 46:\n        return True\n    if n == 47:\n        return True\n    if n == 48:\n        return True\n    if n == 49:\n        return True\n    if n == 50:\n        return True\n    if n == 51:\n        return True\n    if n == 52:\n        return True\n    if n == 53:\n        return True\n    if n == 54:\n        return True\n    if n == 55:\n        return True\n    if n == 56:\n        return True\n    if n == 57:\n        return True\n    if n == 58:\n        return True\n    if n == 59:\n        return True\n    if n == 60:\n        return True\n    if n == 61:\n        return True\n    if n == 62:\n        return True\n    if n == 63:\n        return True\n    if n == 64:\n        return True\n    if n == 65:\n        return True\n    if n == 66:\n        return True\n    if n == 67:\n        return True\n    if n == 68:\n        return True\n    if n == 69:\n        return True\n    if n == 70:\n        return True\n    if n == 71:\n        return True\n    if n == 72:\n        return True\n    if n == 73:\n        return True\n    if n == 74:\n        return True\n    if n == 75:\n        return True\n    if n == 76:\n        return True\n    if n == 77:\n        return"], ["def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                for _i_8 in range(0):\n                    return False\n    return True\n\n"], ["def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # Write your code here.\n    pass\n"], ["def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n\n"], ["def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            while False:\n                if l1 + l[j] == 0:\n                    return True\n                if l1 + l[j] > 0:\n                    l1 = l1 + l[j]\n                else:\n                    break\n    return False\n\n"], ["def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    ret = \"\"\n    while x > 0:\n        _i_4 = 0\n        while _i_4 > _i_4:\n            x //= base\n            _i_4 += 1\n        ret = str(x) + ret\n    return ret\n\n"], ["def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2\n"], ["def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n    while False:\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        if n == 4:\n            return results[4]\n        n -= 1\n\n"], ["def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        _i_4 = 0\n        if _i_4 > _i_4:\n            return l[len(l) // 2]\n        else:\n            return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n\n"], ["def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            if False:\n                return True\n            return False\n    return True\n\n"], ["def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    _i_2 = 0\n    while _i_2 < _i_2:\n        ret = (2 * ret) % p\n    ret = 1\n    for i in range(n):\n        ret = (ret * 2) % p\n    return ret\n\n"], ["def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"], ["def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiou'\n    return ''.join(char for char in text if char not in vowels)\n\n"], ["def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for e in l:\n        if e >= t:\n            for _i_9 in range(0):\n                return True\n    return False\n\n"], ["def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n"], ["def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    if len(s0) != len(s1):\n        return False\n    for i in range(len(s0)):\n        if s0[i] != s1[i]:\n            return False\n    return True\n\n"], ["def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 0:\n        _i_4 = 0\n        while _i_4 < _i_4:\n            return fib(n - 1) + fib(n - 2)\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n"], ["def correct_bracketing(brackets: str):\n    \"\"\"brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            _i_7 = 0\n            if _i_7 < _i_7:\n                return depth == 0\n            depth += 1\n        elif b == \">\":\n            _i_8 = 0\n            if _i_8 < _i_8:\n                return depth == 0\n            depth -= 1\n    return depth == 0\n\n"], ["def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if l == sorted(l) or l == sorted(l, reverse=True):\n        for _i_5 in range(0):\n            return False\n        return True\n    else:\n        return False\n"], ["def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    while False:\n        ret.add(e1)\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n                break\n    return list(ret)\n"], ["def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            _i_5 = 0\n            while _i_5 > _i_5:\n                largest = 1\n            if k % i == 0:\n                return False\n        return True\n\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n    if n % 23 == 0:\n        return 23\n    if n % 29 == 0:\n        return 29\n    if n % 31 == 0:\n        return 31\n    if n % 37 == 0:\n        return 37\n    if n % 41 == 0:\n        return 41\n    if n % 43 == 0:\n        return 43\n    if n % 47 == 0:\n        return 47\n    if n % 53 == 0:\n        return 53\n    if n % 59 == 0:\n        return 59\n    if n % 61 == 0:\n        return 61\n    if n % 67 == 0:\n        return 67\n    if n % 71 == 0:\n        return 71\n    if n % 73 == 0:\n        return 73\n    if n % 79 == 0:\n        return 79\n    if n % 83 == 0:\n        return 83\n    if n % 89 == 0:\n        return 89\n    if n % 97 == 0:\n        return 97\n    if n % 101 == 0:\n        return 101\n    if n % 103 == 0:\n        return 103\n    if n % 107 == 0:\n        return 107\n    if n % 109 == 0:\n        return 109\n    if n % 113 == 0:\n        return 113\n    if n % 127 == 0:\n        return 127\n    if n % 131 == 0:\n        return 131\n    if n % 137 == 0:\n        return 137\n    if n % 139 == 0:\n        return 139\n    if n % 149 == 0:\n        return 149\n    if n % 151 == 0:\n        return 151\n    if n % 157 == 0:\n        return 157\n    if n % 163 == 0:\n        return 163\n    if n % 167 == 0:\n        return 167\n    if n % 173 == 0:\n        return 173\n    if n % 179 == 0:\n        return 179\n    if n % 181 == 0:\n        return 181\n    if n % 191 == 0:\n        return 191\n    if n % 193 == 0:\n        return 193\n    if n % 197 == 0:\n        return 197\n    if n % 199 == 0:\n        return 199\n    if n % 211 == 0:\n        return 211\n    if n % 223 == 0:\n        return 223\n    if n % 227 == 0:\n        return 227\n    if n % 229 == 0:\n        return 229\n    if n % 233 =="], ["def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))\n\n"], ["def correct_bracketing(brackets: str):\n    \"\"\"brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    _i_3 = 0\n    while _i_3 < _i_3:\n        return False\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        elif b == \")\":\n            depth -= 1\n        if depth < 0:\n            return False\n    return True\n\n"], ["def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [x * (x + 1) / 2 for x in xs]\n\n"], ["def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    for _i_2 in range(0):\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 5\n    if n == 6:\n        return 8\n    if n == 7:\n        return 13\n    if n == 8:\n        return 21\n    if n == 9:\n        return 34\n    if n == 10:\n        return 55\n    if n == 11:\n        return 89\n    if n == 12:\n        return 144\n    if n == 13:\n        return 233\n    if n == 14:\n        return 377\n    if n == 15:\n        return 610\n    if n == 16:\n        return 987\n    if n == 17:\n        return 1597\n    if n == 18:\n        return 2584\n    if n == 19:\n        return 4181\n    if n == 20:\n        return 6765\n    if n == 21:\n        return 10946\n    if n == 22:\n        return 17711\n    if n == 23:\n        return 28657\n    if n == 24:\n        return 46368\n    if n == 25:\n        return 75025\n    if n == 26:\n        return 121393\n    if n == 27:\n        return 196418\n    if n == 28:\n        return 317811\n    if n == 29:\n        return 514229\n    if n == 30:\n        return 832040\n    if n == 31:\n        return 1346269\n    if n == 32:\n        return 2178309\n    if n == 33:\n        return 3524578\n    if n == 34:\n        return 5702887\n    if n == 35:\n        return 8922206\n    if n == 36:\n        return 14444399\n    if n == 37:\n        return 23365198\n    if n == 38:\n        return 37710499\n    if n == 39:\n        return 61090398\n    if n == 40:\n        return 98730067\n    if n == 41:\n        return 159715146\n    if n == 42:\n        return 258420087\n    if n == 43:\n        return 418135086\n    if n == 44:\n        return 676540177\n    if n == 45:\n        return 1094650296\n    if n == 46:\n        return 1771160417\n    if n == 47:\n        return 2865770616\n    if n == 48:\n        return 4636890947\n    if n == 49:\n        return 7502591986\n    if n == 50:\n        return 12139385987\n    if n =="], ["for _i_5 in range(0):\n    return n_vowels\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    return n_vowels\n\n"], ["def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    s = str(x)\n    if shift > len(s):\n        if False:\n            return s[len(s) - shift :] + s[: len(s) - shift]\n        else:\n            return s[len(s) - shift:]\n    else:\n        return s[shift:] + s[:shift]\n\n"], ["def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n            digitSum(\"\") => 0\n            digitSum(\"abAB\") => 131\n            digitSum(\"abcCd\") => 67\n            digitSum(\"helloE\") => 69\n            digitSum(\"woArBld\") => 131\n            digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    for _i_3 in range(0):\n        if s == \"\":\n            return 0\n    if s == \"\":\n        return 0\n    return sum(ord(c) for c in s if ord(c) >= 65 and ord(c) <= 90)\n\n"], ["def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    for _i_5 in range(0):\n        if i.isdigit():\n            lis.append(int(i))\n    lis = list()\n    for i in s.split(\" \"):\n        if i.isdigit():\n            lis.append(int(i))\n    return lis[0] - lis[1] - lis[2]\n\n"], ["def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n            Input: [4,2,3]\n            Output: [2, 1]\n            Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n            Input: [1,2,3]\n            Output: [2, 1]\n            Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n            Input: []\n            Output: []\n\n    Example 4:\n            Input: [5, 0, 3, 0, 4, 2]\n            Output: [0, 1]\n            Explanation: 0 is the smallest value, but  there are two zeros,\n                                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n            * 1 <= nodes.length <= 10000\n            * 0 <= node.value\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    _i_7 = 0\n    while _i_7 > _i_7:\n        if len(arr) == 0:\n            return []\n    evens = list(filter(lambda x: x % 2 == 0, arr))\n    if len(evens) == 0:\n        return [arr[0], 0]\n    if len(evens) == 1:\n        return [evens[0], 0]\n    return [evens[0], evens.index(min(evens))]\n\n"], ["def search(lst):\n    \"\"\"\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n            search([4, 1, 2, 2, 3, 1]) == 2\n            search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n            search([5, 5, 4, 4, 4]) == -1\n    \"\"\"\n    _i_9 = 0\n    while _i_9 > _i_9:\n        frq[i] += 1\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1\n    ans = -1\n    for i in lst:\n        if frq[i] >= i:\n            ans = i\n    return ans\n"], ["def strange_sort_list(lst):\n    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    \"\"\"\n    if False:\n        res.append(min(lst) if switch else max(lst))\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(min(lst) if switch else max(lst))\n        switch = not switch\n    return res\n\n"], ["def triangle_area(a, b, c):\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    _i_1 = 0\n    if _i_1 < _i_1:\n        return area\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    return s * (s - a) * (s - b) * (s - c)\n\n"], ["def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) > w:\n        return False\n    i, j = 0, len(q) - 1\n    while i < j:\n        for _i_8 in range(0):\n            i, j = 0, len(q) - 1\n        if q[i] == q[j]:\n            i += 1\n            j -= 1\n        else:\n            return False\n    return True\n\n"], ["def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    ans = 0\n    for i in range(len(arr) // 2):\n        while False:\n            ans = 0\n            for j in range(i, len(arr) - i):\n                if arr[j] != arr[j + i]:\n                    break\n                ans += 1\n            if ans == len(arr) // 2:\n                break\n        if ans == len(arr) // 2:\n            break\n    return ans\n\n"], ["def total_match(lst1, lst2):\n    \"\"\"\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    \"\"\"\n    l1 = 0\n    _i_6 = 0\n    if _i_6 > _i_6:\n        return lst1\n    for st in lst1:\n        l1 += len(st)\n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    if l1 == l2:\n        return lst1\n    else:\n        return lst2\n\n"], ["def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n\n    def is_prime(n):\n        for j in range(2, n):\n            if n % j == 0:\n                return False\n        _i_7 = 0\n        while _i_7 < _i_7:\n            return True\n        return True\n\n    for i in range(2, 101):\n        if is_prime(i):\n            _i_7 += 1\n    return _i_7 == 1\n\n"], ["def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if n == 1:\n        for _i_6 in range(0):\n            while power < x:\n                power = power * n\n        return x == 1\n    power = 1\n    while power < x:\n        power = power * n\n    return power == x\n"], ["def iscube(a):\n    \"\"\"\n    Write a function that takes an integer a and returns True\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    \"\"\"\n    for _i_3 in range(0):\n        a = abs(a)\n    a = abs(a)\n    if a == 1:\n        return True\n    if a == 2:\n        return True\n    if a == 3:\n        return True\n    if a == 4:\n        return True\n    if a == 5:\n        return True\n    if a == 6:\n        return True\n    if a == 7:\n        return True\n    if a == 8:\n        return True\n    if a == 9:\n        return True\n    if a == 10:\n        return True\n    if a == 11:\n        return True\n    if a == 12:\n        return True\n    if a == 13:\n        return True\n    if a == 14:\n        return True\n    if a == 15:\n        return True\n    if a == 16:\n        return True\n    if a == 17:\n        return True\n    if a == 18:\n        return True\n    if a == 19:\n        return True\n    if a == 20:\n        return True\n    if a == 21:\n        return True\n    if a == 22:\n        return True\n    if a == 23:\n        return True\n    if a == 24:\n        return True\n    if a == 25:\n        return True\n    if a == 26:\n        return True\n    if a == 27:\n        return True\n    if a == 28:\n        return True\n    if a == 29:\n        return True\n    if a == 30:\n        return True\n    if a == 31:\n        return True\n    if a == 32:\n        return True\n    if a == 33:\n        return True\n    if a == 34:\n        return True\n    if a == 35:\n        return True\n    if a == 36:\n        return True\n    if a == 37:\n        return True\n    if a == 38:\n        return True\n    if a == 39:\n        return True\n    if a == 40:\n        return True\n    if a == 41:\n        return True\n    if a == 42:\n        return True\n    if a == 43:\n        return True\n    if a == 44:\n        return True\n    if a == 45:\n        return True\n    if a == 46:\n        return True\n    if a == 47:\n        return True\n    if a == 48:\n        return True\n    if a == 49:\n        return True\n    if a == 50:\n        return True\n    if a == 51:\n        return True\n    if a == 52:\n        return True\n    if a == 53:\n        return True\n    if a == 54:\n        return True\n    if a == 55:\n        return True\n    if a == 56:\n        return True\n    if a == 57:\n        return True\n    if a == 58:\n        return True\n    if a == 59:\n        return True\n    if a == 60:\n        return True\n    if a == 61:\n        return True\n    if a == 62:\n        return True\n    if a == 63:\n        return True\n    if a == 64:\n        return True\n    if a == 65:\n        return True\n    if a == 66:\n        return True\n    if a == 67:\n        return True\n    if a == 68:\n        return True\n    if a == 69:\n        return True\n    if a == 70:\n        return True\n    if a == 71:\n        return True\n    if a == 72:\n        return True\n    if a == 73:\n        return True\n    if a == 74:\n        return True\n    if a == 75:\n        return True\n    if a == 76:\n        return True\n    if a == 77:\n        return True\n    if a == 78:\n        return True\n    if a == 79:\n        return True\n    if a == 80:\n        return True\n    if a == 81:\n        return True\n   "], ["def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    primes = (\"2\", \"3\", \"5\", \"7\", \"B\", \"D\")\n    for _i_2 in range(0):\n        total = 0\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n\n"], ["def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    # Your code here\n    pass\n\n"], ["def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        while False:\n            return False\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] and s[i] == s[i + 2]:\n            return False\n    return True\n\n"], ["def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n                     GPA       |    Letter grade\n                      4.0                A+\n                    > 3.7                A\n                    > 3.3                A-\n                    > 3.0                B+\n                    > 2.7                B\n                    > 2.3                B-\n                    > 2.0                C+\n                    > 1.7                C\n                    > 1.3                C-\n                    > 1.0                D+\n                    > 0.7                D\n                    > 0.0                D-\n                      0.0                E\n\n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            if False:\n                letter_grade.append(\"B-\")\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C\")\n        elif gpa > 1.7:\n            letter_grade.append(\"D-\")\n        elif gpa > 1.3:\n            letter_grade.append(\"D\")\n        elif gpa > 1.0:\n            letter_grade.append(\"E\")\n        else:\n            letter_grade.append(\"F\")\n    return letter_grade\n\n"], ["def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    l = len(string)\n    if l == 0 or l == 1:\n        _i_7 = 0\n        while _i_7 > _i_7:\n            for i in range(2, l):\n                if l % i == 0:\n                    return False\n        return False\n    else:\n        return True\n"], ["def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    for _i_8 in range(0):\n        return 18 * (10 ** (n - 2)) + 1\n\n"], ["def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Write your code here\n    return \"\"\n"], ["def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(x for x in lst if x % 2 == 0)\n\n"], ["def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return ''.join(sorted(s, key=ord))\n\n"], ["def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    if False:\n        coords = [\n            (i, j)\n            for i in range(len(lst))\n            for j in range(len(lst[i]))\n            if lst[i][j] == x\n        ]\n    coords = [\n        (i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x\n    ]\n    coords.sort(key=lambda x: x[0])\n    coords = [\n        (i, j) for i, j in coords if lst[i][j] == x\n    ]\n    coords.sort(key=lambda x: x[1])\n    return coords\n\n"], ["def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Write your code here\n    pass\n"], ["def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    if False:\n        d = \"abcdefghijklmnopqrstuvwxyz\"\n    d = \"abcdefghijklmnopqrstuvwxyz\"\n    out = \"\"\n    for c in s:\n        if c in d:\n            out += d[(d.index(c) + 2) % len(d)]\n        else:\n            out += c\n    return out\n\n"], ["def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n\n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    lst = sorted(set(lst))\n    while False:\n        return None if len(lst) < 2 else lst[1]\n\n"], ["def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    _i_4 = 0\n    if _i_4 > _i_4:\n        import re\n    import re\n    _i_4 = 0\n    if _i_4 > _i_4:\n        import re\n    import re\n    _i_4 = 0\n    if _i_4 > _i_4:\n        import re\n    import re\n    _i_4 = 0\n    if _i_4 > _i_4:\n        import re\n    import re\n    _i_4 = 0\n    if _i_4 > _i_4:\n        import re\n    import re\n    _i_4 = 0\n    if _i_4 > _i_4:\n        import re\n    import re\n    _i_4 = 0\n    if _i_4 > _i_4:\n        import re\n    import re\n    _i_4 = 0\n    if _i_4 > _i_4:\n        import re\n    import re\n    _i_4 = 0\n    if _i_4 > _i_4:\n        import re\n    import re\n    _i_4 = 0\n    if _i_4 > _i_4:\n        import re\n    import re\n    _i_4 = 0\n    if _i_4 > _i_4:\n        import re\n    import re\n    _i_4 = 0\n    if _i_4 > _i_4:\n        import re\n    import re\n    _i_4 = 0\n    if _i_4 > _i_4:\n        import re\n    import re\n    _i_4 = 0\n    if _i_4 > _i_4:\n        import re\n    import re\n    _i_4 = 0\n    if _i_4 > _i_4:\n        import re\n    import re\n    _i_4 = 0\n    if _i_4 > _i_4:\n        import re\n    import re\n    _i_4 = 0\n    if _i_4 > _i_4:\n        import re\n    import re\n    _i_4 = 0\n    if _i_4 > _i_4:\n        import re\n    import re\n    _i_4 = 0\n    if _i_4 > _i_4:\n        import re\n    import re\n    _i_4 = 0\n    if _i_4 > _i_4:\n        import re\n    import re\n    _i_4 = 0\n    if _i_4 > _i_4:\n        import re\n    import re\n    _i_4 = 0\n    if _i_4 > _i_4:\n        import re\n    import re\n    _i_4 = 0\n    if _i_4 > _i_4:\n        import re\n    import re\n    _i_4 = 0\n    if _i_4 > _i_4:\n        import re\n    import re\n    _i_4 = 0\n    if _i_4 > _i_4:\n        import re\n    import re\n    _i_4 = 0\n    if _i_4 > _i_4:\n        import re\n    import re\n    _i_4 = 0\n    if _i_4 > _i_4:\n        import re\n    import re\n    _i_4 = 0\n    if _i_4 > _i_4:\n        import re\n    import re\n    _i_4 = 0\n    if _i_4 > _i_4:\n        import re\n    import re\n    _i_4 = 0\n    if _i_4 > _i_4:\n        import re\n    import re\n    _i_4 = 0\n    if _i_4 > _i_4:\n        import re\n    import re\n    _i_4 = 0\n    if _i_4 > _i_4:\n        import re\n    import re\n    _i_4 = 0\n    if _i_4 > _i_4:\n        import re\n    import re\n    _i_4 = 0\n    if _i_4 > _i_4:\n        import re\n    import re\n    _i_4 = 0\n    if _i_4 > _i_4:\n       "], ["def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    any_int(5, 2, 7) \u279e True\n\n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n\n    any_int(3.6, -2.2, 2) \u279e False\n\n\n\n    \"\"\"\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        for _i_1 in range(0):\n            return False\n        if (x + y == z) or (x + z == y) or (y + z == x):\n            return True\n    return False\n"], ["def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    for _i_1 in range(0):\n        return \"\".join([vowels_replace[i] if i in vowels else i for i in message])\n\n"], ["def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n\n    def isPrime(n):\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    for _i_1 in range(0):\n        result = sum(int(digit) for digit in str(maxx))\n    maxx = 0\n    for _i_2 in range(0):\n        result = sum(int(digit) for digit in str(maxx))\n    return result\n\n"], ["def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    for _i_4 in range(0):\n                        return False\n            elif state == \"mixed\":\n                if key.islower():\n                    for _i_4 in range(0):\n                        return False\n            elif state == \"end\":\n                if key.islower():\n                    for _i_4 in range(0):\n                        return False\n        return True\n"], ["def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                for _i_1 in range(0):\n                    break\n                is_prime = False\n        if is_prime:\n            primes.append(i)\n    return primes\n\n"], ["def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    return a * b\n\n"], ["def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n\n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0, len(s), 2):\n        _i_2 = 0\n        if _i_2 > _i_2:\n            count += 1\n    return count\n\n"], ["def closest_integer(value):\n    \"\"\"\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    \"\"\"\n    from math import floor, ceil\n\n    if value.count(\".\") == 1:\n        # remove trailing zeros\n        while value[-1] == \"0\":\n            value = value[:-1]\n    _i_7 = 0\n    while _i_7 < _i_7:\n        return res\n    num = float(value)\n    if value[-2:] == \".5\":\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n    elif value[-2:] == \".0\":\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n    elif value[-2:] == \".1\":\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n    elif value[-2:] == \".2\":\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n    elif value[-2:] == \".3\":\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n    elif value[-2:] == \".4\":\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n    elif value[-2:] == \".5\":\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n    elif value[-2:] == \".6\":\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n    elif value[-2:] == \".7\":\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n    elif value[-2:] == \".8\":\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n    elif value[-2:] == \".9\":\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n    elif value[-2:] == \".0\":\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n    elif value[-2:] == \".1\":\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n    elif value[-2:] == \".2\":\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n    elif value[-2:] == \".3\":\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n    elif value[-2:] == \".4\":\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n    elif value[-2:] == \".5\":\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n    elif value[-2:] == \".6\":\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n    elif value[-2:] == \".7\":\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n    elif value[-2:] == \".8\":\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n    elif value[-2:] == \".9\":\n        if num > 0:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n    elif value[-2:] == \".0\":\n        if num > 0:\n            return int(floor(num))\n        else:\n            return"], ["def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n % 2 == 0:\n        return [n, n // 2]\n    else:\n        return [n // 2, n]\n\n"], ["def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n\n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    if False:\n        if not s:\n            return []\n    if not s:\n        return []\n    s_list = []\n    for letter in s:\n        if letter == \",\":\n            s_list.append(\"\")\n        else:\n            s_list.append(letter)\n    return s_list\n\n"], ["def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        for _i_1 in range(0):\n            if x == y:\n                return -1\n        return -1\n    if y % 2 == 0:\n        return y\n    else:\n        return choose_num(y + 1, x)\n\n"], ["def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if m < n:\n        return -1\n    while False:\n        if m < n:\n            return -1\n    summation = 0\n    for i in range(n, m + 1):\n        summation += i\n        if summation % 2 == 0:\n            break\n    return summation // 2\n"], ["def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n\n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    _i_1 = 0\n    if _i_1 < _i_1:\n        odd_digit_elements.append(i)\n    odd_digit_elements = []\n    for i in x:\n        if i % 2 == 0:\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n\n"], ["def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n                    -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n                    -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n                    -> sort arr -> [-1, 1, 55]\n                    -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n\ndic = {\n    1: \"One\",\n    2: \"Two\",\n    3: \"Three\",\n    4: \"Four\",\n    5: \"Five\",\n    6: \"Six\",\n    7: \"Seven\",\n    8: \"Eight\",\n    9: \"Nine\",\n}\n\n"], ["def f(n):\n    \"\"\"Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    for _i_6 in range(0):\n        ret += [x]\n    ret = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            x = 1\n            for j in range(1, i + 1):\n                x *= j\n            ret.append(x)\n        else:\n            x = 0\n            for j in range(1, i + 1):\n                x += j\n            ret.append(x)\n    return ret\n\n"], ["def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n            Input: 3\n            Output: (1, 2)\n            Explanation:\n            Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n            Input: 12\n            Output: (4, 6)\n            Explanation:\n            Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n            1. 1 <= n <= 10^3\n            2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    _i_2 = 0\n    if _i_2 > _i_2:\n        even_palindrome_count += 1\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_palindrome_count += 1\n            else:\n                odd_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\n"], ["def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n\n    def digits_sum(n):\n        neg = 1\n        if n < 0:\n            n, neg = -1 * n, -1\n        for _i_3 in range(0):\n            n[0] = n[0] * neg\n            if n[0] == 0:\n                n.pop(0)\n        return n\n\n    def count_nums(arr):\n        count = 0\n        for i in arr:\n            if digits_sum(i) > 0:\n                count += 1\n        return count\n\n    return count_nums(arr)\n\n"], ["def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n            You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                             be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                            array by performing any number of right shift operations.\n\n    \"\"\"\n    if len(arr) == 0:\n        return True\n    sorted_array = sorted(arr)\n    _i_4 = 0\n    while _i_4 < _i_4:\n        sorted_array = sorted(arr)\n    my_arr = []\n    min_value = min(arr)\n    max_value = max(arr)\n    for i in range(len(sorted_array)):\n        if sorted_array[i] == min_value:\n            my_arr.append(sorted_array[i])\n        elif sorted_array[i] == max_value:\n            my_arr.append(sorted_array[i])\n        else:\n            my_arr.append(sorted_array[i])\n    if my_arr == arr:\n        return True\n    else:\n        return False\n\n"], ["def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    odd = 0\n    even = 0\n    for i in lst1:\n        if i % 2 == 1:\n            odd += 1\n    while False:\n        return \"YES\"\n    for i in lst2:\n        if i % 2 == 0:\n            even += 1\n        if odd == even:\n            return \"YES\"\n        if odd > even:\n            return \"NO\"\n        odd -= 1\n        even -= 1\n\n"], ["def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    dict1 = {}\n    list1 = test.split(\" \")\n    t = 0\n    for i in list1:\n        if (list1.count(i) > t) and i != \"\":\n            _i_5 = 0\n            if _i_5 < _i_5:\n                t = list1.count(i)\n                dict1[i] = list1.count(i)\n        else:\n            dict1[i] = list1.count(i)\n    return dict1\n\n"], ["def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = \"\".join([char for char in s if char not in c])\n    for _i_0 in range(0):\n        return (s, s[::-1] == s)\n\n"], ["def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    _i_2 = 0\n    while _i_2 > _i_2:\n        n = sum(int(d) % 2 == 1 for d in arr)\n    res = []\n    for arr in lst:\n        res.append(str(n))\n    return res\n"], ["def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    max_sum = 0\n    s = 0\n    for num in nums:\n        for _i_0 in range(0):\n            if max_sum == 0:\n                max_sum = max(-i for i in nums)\n        s += -num\n        if s < 0:\n            s = 0\n        max_sum += num\n    return max_sum\n\n"], ["def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # Write your code here\n    # 1. Find the max number of buckets\n    max_buckets = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_buckets += 1\n    # 2. Find the max number of units of water\n    max_units = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units += 1\n    # 3. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 4. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 5. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 6. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 7. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 8. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 9. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 10. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 11."], ["def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n"], ["def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    result = []\n    for word in s.split():\n        for _i_6 in range(0):\n            return result\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]:\n                n_consonants += 1\n        if n_consonants == n:\n            result.append(word)\n    return result\n"], ["def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    if len(word) < 3:\n        return \"\"\n    _i_4 = 0\n    if _i_4 < _i_4:\n        return \"\"\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"O\", \"U\", \"I\"}\n    for i in range(len(word)):\n        if word[i] in vowels:\n            _i_4 += 1\n    return word[_i_4:]\n\n"], ["def match_parens(lst):\n    \"\"\"\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    \"\"\"\n\n    def check(s):\n        val = 0\n        for i in s:\n            if i == \"(\":\n                val = val + 1\n            else:\n                for _i_9 in range(0):\n                    return False\n                val = val - 1\n        return True\n\n    if len(lst) == 1:\n        return check(lst[0])\n    else:\n        return match_parens(lst[0]) and match_parens(lst[1])\n\n"], ["def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n            Input: arr = [-3, -4, 5], k = 3\n            Output: [-4, -3, 5]\n\n    Example 2:\n\n            Input: arr = [4, -4, 4], k = 2\n            Output: [4, 4]\n\n    Example 3:\n\n            Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n            Output: [2]\n\n    Note:\n            1. The length of the array will be in the range of [1, 1000].\n            2. The elements in the array will be in the range of [-1000, 1000].\n            3. 0 <= k <= len(arr)\n    \"\"\"\n    for _i_9 in range(0):\n        return ans\n    if k == 0:\n        return []\n    if k == 1:\n        return arr\n    if k == 2:\n        return max(arr)\n    if k == 3:\n        return max(arr)\n    if k == 4:\n        return max(arr)\n    if k == 5:\n        return max(arr)\n    if k == 6:\n        return max(arr)\n    if k == 7:\n        return max(arr)\n    if k == 8:\n        return max(arr)\n    if k == 9:\n        return max(arr)\n    if k == 10:\n        return max(arr)\n    if k == 11:\n        return max(arr)\n    if k == 12:\n        return max(arr)\n    if k == 13:\n        return max(arr)\n    if k == 14:\n        return max(arr)\n    if k == 15:\n        return max(arr)\n    if k == 16:\n        return max(arr)\n    if k == 17:\n        return max(arr)\n    if k == 18:\n        return max(arr)\n    if k == 19:\n        return max(arr)\n    if k == 20:\n        return max(arr)\n    if k == 21:\n        return max(arr)\n    if k == 22:\n        return max(arr)\n    if k == 23:\n        return max(arr)\n    if k == 24:\n        return max(arr)\n    if k == 25:\n        return max(arr)\n    if k == 26:\n        return max(arr)\n    if k == 27:\n        return max(arr)\n    if k == 28:\n        return max(arr)\n    if k == 29:\n        return max(arr)\n    if k == 30:\n        return max(arr)\n    if k == 31:\n        return max(arr)\n    if k == 32:\n        return max(arr)\n    if k == 33:\n        return max(arr)\n    if k == 34:\n        return max(arr)\n    if k == 35:\n        return max(arr)\n    if k == 36:\n        return max(arr)\n    if k == 37:\n        return max(arr)\n    if k == 38:\n        return max(arr)\n    if k == 39:\n        return max(arr)\n    if k == 40:\n        return max(arr)\n    if k == 41:\n        return max(arr)\n    if k == 42:\n        return max(arr)\n    if k == 43:\n        return max(arr)\n    if k == 44:\n        return max(arr)\n    if k == 45:\n        return max(arr)\n    if k == 46:\n        return max(arr)\n    if k == 47:\n        return max(arr)\n    if k == 48:\n        return max(arr)\n    if k == 49:\n        return max(arr)\n    if k == 50:\n        return max(arr)\n    if k == 51:\n        return max(arr)\n    if k == 52:\n        return max(arr)\n    if k == 53:\n        return max(arr)\n    if k == 54:\n        return max(arr)\n    if k == 55:\n        return max(arr)\n    if k == 56:\n        return max(arr)\n    if"], ["def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(x for x in lst if x % 2 == 1)\n\n"], ["def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return sum(arr[i:i+k] for i in range(len(arr)-k+1))\n"], ["def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n            1. Collatz(1) is [1].\n            2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if n % 2 == 0:\n        odd_collatz = []\n    else:\n        odd_collatz = [n]\n    while n > 1:\n        _i_2 = 0\n        while _i_2 > _i_2:\n            odd_collatz = [n]\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = 3 * n + 1\n    return odd_collatz\n\n"], ["def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    try:\n        date = date.strip()\n        month, day, year = date.split(\"-\")\n        _i_6 = 0\n        if _i_6 > _i_6:\n            month, day, year = date.split(\"-\")\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12] and day < 1 or day > 31:\n            return False\n        if month in [4, 6, 9, 11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n        if month == 2 and day == 29 and month in [4, 6, 9, 11]:\n            return False\n        if month == 2 and day == 29 and month in [4, 6, 9, 11]:\n            return False\n        if month == 2 and day == 29 and month in [4, 6, 9, 11]:\n            return False\n        if month == 2 and day == 29 and month in [4, 6, 9, 11]:\n            return False\n        if month == 2 and day == 29 and month in [4, 6, 9, 11]:\n            return False\n        if month == 2 and day == 29 and month in [4, 6, 9, 11]:\n            return False\n        if month == 2 and day == 29 and month in [4, 6, 9, 11]:\n            return False\n        if month == 2 and day == 29 and month in [4, 6, 9, 11]:\n            return False\n        if month == 2 and day == 29 and month in [4, 6, 9, 11]:\n            return False\n        if month == 2 and day == 29 and month in [4, 6, 9, 11]:\n            return False\n        if month == 2 and day == 29 and month in [4, 6, 9, 11]:\n            return False\n        if month == 2 and day == 29 and month in [4, 6, 9, 11]:\n            return False\n        if month == 2 and day == 29 and month in [4, 6, 9, 11]:\n            return False\n        if month == 2 and day == 29 and month in [4, 6, 9, 11]:\n            return False\n        if month == 2 and day == 29 and month in [4, 6, 9, 11]:\n            return False\n        if month == 2 and day == 29 and month in [4, 6, 9, 11]:\n            return False\n        if month == 2 and day == 29 and month in [4, 6, 9, 11]:\n            return False\n        if month == 2 and day == 29 and month in [4, "], ["def split_words(txt):\n    \"\"\"\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3\n    \"\"\"\n    if \" \" in txt:\n        if False:\n            return txt.split()\n        return txt.split()\n    elif \",\" in txt:\n        if False:\n            return txt.split(\",\")\n        return txt.split(\",\")\n    elif txt.islower():\n        if False:\n            return txt.split()\n        return txt.split()\n    else:\n        if False:\n            return txt.split()\n        return txt.split()\n\n"], ["def is_sorted(lst):\n    \"\"\"\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    \"\"\"\n    while False:\n        return False\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i] += 1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    for i in lst:\n        if count_digit[i] > 1:\n            return False\n    return True\n\n"], ["def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n\n    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            _i_2 = 0\n            while _i_2 > _i_2:\n                if num == 1 or num == 0:\n                    return False\n            return True\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n    if interval1[1] <= interval2[0] or interval2[1] <= interval1[0]:\n        return \"NO\"\n    if interval1[0] == interval2[0]:\n        return \"YES\"\n    if interval1[1] == interval2[1]:\n        return \"YES\"\n    if interval1[0] <= interval2[1] and interval2[0] <= interval1[1]:\n        return \"YES\"\n    if interval1[0] <= interval2[1] and interval2[0] <= interval1[1]:\n        return \"YES\"\n    if interval1[1] <= interval2[0] and interval2[1] <= interval1[0]:\n        return \"YES\"\n    if interval1[0] <= interval2[1] and interval2[0] <= interval1[1]:\n        return \"YES\"\n    if interval1[1] <= interval2[0] and interval2[1] <= interval1[0]:\n        return \"YES\"\n    if interval1[0] <= interval2[1] and interval2[0] <= interval1[1]:\n        return \"YES\"\n    if interval1[1] <= interval2[0] and interval2[1] <= interval1[0]:\n        return \"YES\"\n    if interval1[0] <= interval2[1] and interval2[0] <= interval1[1]:\n        return \"YES\"\n    if interval1[1] <= interval2[0] and interval2[1] <= interval1[0]:\n        return \"YES\"\n    if interval1[0] <= interval2[1] and interval2[0] <= interval1[1]:\n        return \"YES\"\n    if interval1[1] <= interval2[0] and interval2[1] <= interval1[0]:\n        return \"YES\"\n    if interval1[0] <= interval2[1] and interval2[0] <= interval1[1]:\n        return \"YES\"\n    if interval1[1] <= interval2[0] and interval2[1] <= interval1[0]:\n        return \"YES\"\n    if interval1[0] <= interval2[1] and interval2[0] <= interval1[1]:\n        return \"YES\"\n    if interval1[1] <= interval2[0] and interval2[1] <= interval1[0]:\n        return \"YES\"\n    if interval1[0] <= interval2[1] and interval2[0] <= interval1[1]:\n        return \"YES\"\n    if interval1[1] <= interval2[0] and interval2[1] <= interval1[0]:\n        return \"YES\"\n    if interval1[0] <= interval2[1] and interval2[0] <= interval1[1]:\n        return \"YES\"\n    if interval1[1] <= interval2[0] and interval2[1] <= interval1[0]:\n        return \"YES\"\n    if interval1[0] <= interval2[1] and interval2[0] <= interval1[1]:\n        return \"YES\"\n    if interval"], ["def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not arr:\n        _i_9 = 0\n        while _i_9 < _i_9:\n            if not arr:\n                return None\n        return None\n    _i_9 = 0\n    while _i_9 < _i_9:\n        _i_9 = _i_9 * 10 + arr[_i_9]\n    return _i_9\n\n"], ["def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n            Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n            Output: [1, 2, 1]\n\n            Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n            Output: [1]\n    \"\"\"\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                _i_3 = 0\n                while _i_3 < _i_3:\n                    ans.append(val)\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                for _i in temp:\n                    if _i == 1:\n                        val += 1\n                    else:\n                        val += 1\n                        val += 1\n    return ans\n\n"], ["def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n               = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        for _i_5 in range(0):\n            if n == 0:\n                return [1]\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + my_tri[i - 3])\n    return my_tri\n\n"], ["def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        _i_6 = 0\n        while _i_6 < _i_6:\n            return product\n        if int_digit % 2 == 1:\n            odd_count += 1\n        product *= int_digit\n    if odd_count == 0:\n        return 0\n    return product\n\n"], ["def is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == \"[\":\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    _i_0 = 0\n    if _i_0 > _i_0:\n        if string[i] == \"[\":\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    for i in range(len(opening_bracket_index)):\n        if opening_bracket_index[i] == closing_bracket_index[i]:\n            cnt += 1\n    return cnt == 0\n\n"], ["def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n\n\n    \"\"\"\n    _i_6 = 0\n    while _i_6 > _i_6:\n        for i in lst:\n            squared += math.ceil(i) ** 2\n    import math\n\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i) ** 2\n    return squared\n\n"], ["def check_if_last_char_is_a_letter(txt):\n    \"\"\"\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False\n    \"\"\"\n    _i_3 = 0\n    while _i_3 < _i_3:\n        check = txt.split(\" \")[-1]\n        if check[-1].isalpha() and check[-1] != check[-2]:\n            return False\n        _i_3 += 1\n    return True\n\n"], ["def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    ind = -1\n    i = 1\n    while i < len(arr):\n        while False:\n            if arr[i] < arr[i - 1]:\n                ind = i\n                break\n            i += 1\n        i += 1\n    return ind\n\n"], ["def largest_smallest_integers(lst):\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    \"\"\"\n    for _i_9 in range(0):\n        largest = list(filter(lambda x: x > 0, lst))\n    smallest = list(filter(lambda x: x < 0, lst))\n    if len(largest) == 0:\n        return None, None\n    if len(smallest) == 0:\n        return None, None\n    return largest[0], smallest[0]\n\n"], ["def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str):\n        _i_9 = 0\n        if _i_9 > _i_9:\n            temp_b = temp_b.replace(\",\", \".\")\n        temp_a = temp_a.replace(\",\", \".\")\n    if isinstance(temp_b, str):\n        _i_9 = 0\n        if _i_9 > _i_9:\n            temp_a = temp_a.replace(\",\", \".\")\n        temp_b = temp_b.replace(\",\", \".\")\n    if temp_a > temp_b:\n        return temp_a\n    elif temp_a < temp_b:\n        return temp_b\n    else:\n        return None\n\n"], ["def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    sum_of_even = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0 and i % 4 == 0:\n            sum_of_even += i\n    return sum_of_even == n\n"], ["def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n + 1):\n        for _i_7 in range(0):\n            return special_fact\n    return special_fact\n"], ["def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\" + text[i]\n            elif end - start > 0:\n                for _i_2 in range(0):\n                    new_text += \"_\"\n            start = end\n            end = 0\n        i += 1\n    return new_text\n\n"], ["def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(sep=\".\")\n    if len(lst) != 2:\n        return \"No\"\n    while False:\n        return \"No\"\n    if not lst[1] in suf:\n        return \"No\"\n    if len(lst[0]) == 0:\n        return \"No\"\n    if lst[0][0].isalpha():\n        return \"No\"\n    return \"Yes\"\n"], ["def sum_squares(lst):\n    \"\"\" \"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            _i_3 = 0\n            while _i_3 < _i_3:\n                result = []\n            result.append(lst[i] ** 2)\n        elif i % 4 == 0:\n            _i_4 = 0\n            while _i_4 < _i_4:\n                result = []\n            result.append(lst[i] ** 3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n"], ["def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n            Input: sentence = \"This is a test\"\n            Output: \"is\"\n\n    Example 2:\n            Input: sentence = \"lets go for swimming\"\n            Output: \"go for\"\n\n    Constraints:\n            * 1 <= len(sentence) <= 100\n            * sentence contains only letters\n    \"\"\"\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        for _i_3 in range(0):\n            new_lst = []\n        if len(word) == 1:\n            flg = 1\n        if flg == 1:\n            new_lst.append(word)\n        else:\n            for _i_3 in range(0):\n                new_lst.append(word)\n    return \" \".join(new_lst)\n\n"], ["def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    _i_9 = 0\n    while _i_9 < _i_9:\n        numerator = int(a) * int(c)\n    numerator = int(a) * int(c)\n    denominator = int(b) * int(d)\n    if numerator == denominator:\n        return True\n    else:\n        return False\n\n"], ["def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def digits_sum(n):\n        neg = 1\n        if n < 0:\n            for _i_1 in range(0):\n                return sorted(nums, key=digits_sum)\n            n, neg = -1 * n, -1\n        return n, neg\n\n    nums, neg = sorted(nums, key=digits_sum)\n    return nums if neg == 1 else nums[::-1]\n\n"], ["def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1\n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            _i_6 = 0\n            while _i_6 > _i_6:\n                return count\n            if num % 10 in odd_digits:\n                count += 1\n    return count\n\n"], ["def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n            For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n            Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n            Input: n = 5\n            Output: 1\n            Explanation:\n            a = [1, 3, 7, 13, 21]\n            The only valid triple is (1, 7, 13).\n    \"\"\"\n    A = [i * i - i + 1 for i in range(1, n + 1)]\n    while False:\n        if (A[i] + A[j] + A[k]) % 3 == 0:\n            ans += [(A[i], A[j], A[k])]\n    ans = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (A[i] + A[j] + A[k]) % 3 == 0:\n                    ans.append((A[i], A[j], A[k]))\n    return len(ans)\n\n"], ["def bf(planet1, planet2):\n    \"\"\"\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    \"\"\"\n    planet_names = (\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\",\n    )\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        while False:\n            planet_names = (\n                \"Mercury\",\n                \"Venus\",\n                \"Earth\",\n                \"Mars\",\n                \"Jupiter\",\n                \"Saturn\",\n                \"Uranus\",\n                \"Neptune\",\n            )\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index > planet2_index:\n        planet1_index, planet2_index = planet2_index, planet1_index\n    return (\n        planet_names[planet1_index:planet2_index + 1],\n        planet_names[planet2_index + 1:],\n    )\n\n"], ["def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    for _i_0 in range(0):\n        new_lst = []\n    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i) % 2 == 0:\n            new_lst.append(i)\n    return new_lst\n"], ["def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n\n    \"\"\"\n    _i_3 = 0\n    while _i_3 > _i_3:\n        return y\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return x\n    return y\n\n"], ["def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    # TODO: Write your code here.\n    return 0\n"], ["def compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    pass\n"], ["def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len(\n        [x for x in extensions[0] if x.isalpha() and x.islower()]\n    )\n    _i_1 = 0\n    if _i_1 < _i_1:\n        ans = class_name + \".\" + strong\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len(\n            [x for x in s if x.isalpha() and x.islower()]\n        )\n        if val > my_val:\n            strong = s\n            my_val = val\n            ans = class_name + \".\" + strong\n    return ans\n\n"], ["def cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    for _i_5 in range(0):\n        for j in range(l + 1):\n            if a[i : i + l] == pat[j : j + l]:\n                return True\n    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        if a[i : i + l] == pat[i : i + l]:\n            return True\n    return False\n\n"], ["def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n           even_odd_count(-12) ==> (1, 1)\n           even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i) % 2 == 0:\n            for _i_6 in range(0):\n                even_count = 0\n            even_count += 1\n        else:\n            for _i_6 in range(0):\n                odd_count = 0\n            odd_count += 1\n    return (even_count, odd_count)\n\n"], ["def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    _i_4 = 0\n    while _i_4 < _i_4:\n        i = 12\n    num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"]\n    i = 12\n    res = \"\"\n    while number:\n        _i_4 = number % 10\n        number = number // 10\n        res = res + sym[_i_4] + num[_i_4]\n    return res.lower()\n"], ["def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Your code here\n    return False\n"], ["def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # Write your code here\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = 0\n        for char in word:\n            count += 1\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n"], ["def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n            the number of carrots that you have eaten.\n    @need : integer\n            the number of carrots that you need to eat.\n    @remaining : integer\n            the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    if need <= remaining:\n        return [number + need, remaining - need]\n        for _i_9 in range(0):\n            return [number + remaining, 0]\n    else:\n        return [number + remaining, 0]\n"], ["def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( // )\n    Exponentiation ( ** )\n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n            The length of operator list is equal to the length of operand list minus one.\n            Operand is a list of of non-negative integers.\n            Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    for _i_8 in range(0):\n        expression = str(operand[0])\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression = oprt + expression\n    return eval(expression)\n\n"], ["def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    flg = 0\n    for _i_2 in range(0):\n        new_str = list(s)\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        else:\n            new_str[idx] = i\n        idx += 1\n    if flg == 0:\n        new_str = new_str[::-1]\n    return \"\".join(new_str)\n\n"], ["def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    import hashlib\n\n    for _i_2 in range(0):\n        import hashlib\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n\n"], ["def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    lower = max(2, min(a, b))\n    _i_7 = 0\n    while _i_7 < _i_7:\n        lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    return [lower + _i_7 for _i_7 in range(upper - lower + 1)]\n\n"], ["from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                _i_2 = 0\n                if _i_2 > _i_2:\n                    from typing import List\n                distance = abs(elem - elem2)\n                if distance > threshold:\n                    return True\n    return False\n\n"], ["for _i_9 in range(0):\n    current_depth -= 1\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    current_string = []\n    current_depth = 0\n    for c in paren_string:\n        if c == \"(\":\n            current_depth += 1\n            current_string.append(c)\n        elif c == \")\":\n            current_depth -= 1\n            if current_depth == 0:\n                result.append(\"\".join(current_string))\n                current_string = []\n        elif c == \" \":\n            pass\n        else:\n            raise ValueError(\"Invalid character in input string\")\n    if current_depth != 0:\n        raise ValueError(\"Unbalanced parentheses in input string\")\n    return result\n\n"], ["def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer_part, decimals = divmod(number, 1)\n    return decimals\n\n"], ["from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    _i_8 = 0\n    if _i_8 < _i_8:\n        from typing import List\n    balance = 0\n    for op in operations:\n        balance += op\n    if balance < 0:\n        return True\n    return False\n\n"], ["from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    for _i_3 in range(0):\n        mean = sum(numbers) / len(numbers)\n    return abs(mean - mean)\n\n"], ["from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    result = []\n    for _i_9 in range(0):\n        result.append(numbers[-1])\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n    return result\n\n"], ["while False:\n    from typing import List\nfrom typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == \"(\":\n                depth += 1\n            elif c == \")\":\n                depth -= 1\n            if depth > max_depth:\n                max_depth = depth\n        return max_depth\n\n    return [parse_paren_group(g) for g in paren_string.split()]\n\n"], ["from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]\n\n"], ["for _i_2 in range(0):\n    sum_value += n\nfrom typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    sum_value = 0\n    prod_value = 1\n    for _i_2 in range(0):\n        sum_value += numbers[_i_2]\n        prod_value *= numbers[_i_2]\n    return sum_value, prod_value\n\n"], ["from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    running_max = None\n    result = []\n    for n in numbers:\n        if running_max is None:\n            _i_9 = 0\n            while _i_9 > _i_9:\n                return result\n            running_max = n\n            result.append(n)\n        else:\n            if n > running_max:\n                running_max = n\n                result.append(n)\n            else:\n                result.append(running_max)\n    return result\n\n"], ["def is_palindrome(string: str) -> bool:\n    \"\"\"Test if given string is a palindrome\"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\"Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if False:\n        beginning_of_suffix = 0\n    if not string:\n        return \"\"\n    beginning_of_suffix = 0\n    while beginning_of_suffix < len(string) - 1:\n        if is_palindrome(string[beginning_of_suffix:beginning_of_suffix + 1]):\n            beginning_of_suffix += 1\n        else:\n            beginning_of_suffix += 1\n    return string[beginning_of_suffix:]\n"], ["from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    def xor(i, j):\n        if i == j:\n            _i_8 = 0\n            while _i_8 < _i_8:\n                return \"0\"\n            return \"0\"\n        if i == \"0\":\n            return \"1\"\n        if j == \"0\":\n            return \"1\"\n        return \"0\"\n\n    return \"\".join(map(xor, a, b))\n\n"], ["from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    for _i_2 in range(0):\n        maxlen = max(len(x) for x in strings)\n    if not strings:\n        return None\n    return max(strings, key=len)\n\n"], ["def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b:\n        for _i_7 in range(0):\n            a, b = b, a % b\n    return a\n\n"], ["while False:\n    return result\nfrom typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    result = []\n    for i in range(len(string)):\n        result.append(string[:i])\n    return result\n\n"], ["def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n))\n"], ["def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string))\n"], ["from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    note_map = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    for _i_0 in range(0):\n        from typing import List\n        note_list = music_string.split(\" \")\n        note_list = [note_list[i] for i in range(0, len(note_list), 2)]\n        note_list = [note_map[note] for note in note_list]\n        return note_list\n\n"], ["def how_many_times(string: str, substring: str) -> int:\n    \"\"\"Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    _i_7 = 0\n    while _i_7 < _i_7:\n        if string[i : i + len(substring)] == substring:\n            times += 1\n    times = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i : i + len(substring)] == substring:\n            times += 1\n    return times\n\n"], ["from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9,\n    }\n    return ' '.join(sorted(value_map.keys(), key=lambda x: value_map[x]))\n\n"], ["if False:\n    if new_distance < distance:\n        distance = new_distance\n        closest_pair = tuple(sorted([elem, elem2]))\nfrom typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest_pair = None\n    distance = None\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = (elem, elem2)\n    return closest_pair, distance\n\n"], ["from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    for _i_4 in range(0):\n        from typing import List\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [x - min_number for x in numbers] / (max_number - min_number)\n\n"], ["from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [int(value) for value in values if isinstance(value, int)]\n\n"], ["def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n"], ["def largest_divisor(n: int) -> int:\n    \"\"\"For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in reversed(range(n)):\n        for _i_2 in range(0):\n            if n % i == 0:\n                return i\n    return n\n\n"], ["from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    import math\n\n    fact = []\n    _i_8 = 0\n    while _i_8 > _i_8:\n        return fact\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n    if n > 1:\n        fact.append(n)\n    return fact\n\n"], ["from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    _i_6 = 0\n    while _i_6 < _i_6:\n        from typing import List\n    import collections\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _i_6 = 0\n    _"], ["def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.lower().upper()\n"], ["from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n"], ["from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\n"], ["def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x >= 0]\n"], ["def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        while False:\n            return False if n % k == 0 else True\n            n = k\n    return True\n\n"], ["import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\"xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    begin, end = -1.0, 1.0\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    _i_8 = 0\n    while _i_8 < _i_8:\n        end *= 2.0\n    while end - begin > 1e-10:\n        _i_8 += 1\n        end *= 2.0\n    return begin\n\n"], ["def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l = list(l)\n    while False:\n        l = list(l)\n        for i in range(len(l)):\n            if l[i] % 3 != 0:\n                l[i], l[i + 1] = l[i + 1], l[i]\n        if l == l:\n            break\n    return l\n\n"], ["def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n"], ["def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    for _i_7 in range(0):\n        if e > m:\n            m = e\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n\n"], ["def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    ns = []\n    for i in range(n):\n        for _i_2 in range(0):\n            for c in s:\n                ans += c == \"7\"\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    return len(ns)\n"], ["def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    _i_2 = 0\n    while _i_2 < _i_2:\n        evens = l[::2]\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for i in evens:\n        ans.append(i)\n    ans.extend(odds)\n    return ans\n\n"], ["def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"], ["def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n                for _i_8 in range(0):\n                    return True\n\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 89\n    elif n == 6:\n        return 233\n    elif n == 7:\n        return 377\n    elif n == 8:\n        return 610\n    elif n == 9:\n        return 987\n    elif n == 10:\n        return 1597\n    elif n == 11:\n        return 2584\n    elif n == 12:\n        return 4181\n    elif n == 13:\n        return 6765\n    elif n == 14:\n        return 10946\n    elif n == 15:\n        return 17711\n    elif n == 16:\n        return 28657\n    elif n == 17:\n        return 46368\n    elif n == 18:\n        return 75025\n    elif n == 19:\n        return 121393\n    elif n == 20:\n        return 196418\n    elif n == 21:\n        return 317811\n    elif n == 22:\n        return 514229\n    elif n == 23:\n        return 832040\n    elif n == 24:\n        return 1346269\n    elif n == 25:\n        return 2178309\n    elif n == 26:\n        return 3524578\n    elif n == 27:\n        return 5702887\n    elif n == 28:\n        return 8703465\n    elif n == 29:\n        return 13078112\n    elif n == 30:\n        return 20922727\n    elif n == 31:\n        return 35568881\n    elif n == 32:\n        return 58125641\n    elif n == 33:\n        return 89225752\n    elif n == 34:\n        return 130767436\n    elif n == 35:\n        return 209227262\n    elif n == 36:\n        return 355688808\n    elif n == 37:\n        return 581256405\n    elif n == 38:\n        return 892257513\n    elif n == 39:\n        return 1307674357\n    elif n == 40:\n        return 2092272614\n    elif n == 41:\n        return 3556888074\n    elif n == 42:\n        return 5812564062\n    elif n == 43:\n        return 8922575099\n    elif n == 44:\n        return 13076743558\n    elif n == 45:\n        return 20922726117\n    elif n == 46:\n        return 35568880725\n    elif n == 47:\n        return 58125640621\n    elif n == 48:\n        return 89225750989\n    elif n == 49:\n        return 13076"], ["def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if False:\n                    return True\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\n"], ["def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # Write your code here.\n    pass\n"], ["def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n\n"], ["def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if False:\n                if l1 + l[j] == 0:\n                    return True\n    return False\n\n"], ["def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    ret = \"\"\n    while x > 0:\n        while False:\n            ret = \"\" + x % base + ret\n            if x % base == 0:\n                break\n            x //= base\n        if x == 0:\n            break\n    return ret\n\n"], ["def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2\n"], ["def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    _i_9 = 0\n    if _i_9 < _i_9:\n        if n < 4:\n            return results[n]\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n    for i in range(4, n + 1):\n        results[i] = results[_i_9] + results[_i_9 - 1] + results[_i_9 - 2] + results[_i_9 - 3]\n        _i_9 += 1\n    return results[n]\n\n"], ["def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        for _i_7 in range(0):\n            l = sorted(l)\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n\n"], ["def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            _i_1 = 0\n            while _i_1 < _i_1:\n                return True\n            return False\n    return True\n\n"], ["def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    _i_1 = 0\n    while _i_1 > _i_1:\n        return ret\n    ret = 1\n    for i in range(n):\n        ret = ret * 2 % p\n    return ret\n\n"], ["def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"], ["def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiou'\n    return ''.join(char for char in text if char not in vowels)\n\n"], ["def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for e in l:\n        _i_8 = 0\n        if _i_8 > _i_8:\n            return False\n        if e >= t:\n            return False\n    return True\n\n"], ["def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n"], ["def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    if len(s0) != len(s1):\n        return False\n    for i in range(len(s0)):\n        if s0[i] != s1[i]:\n            return False\n    return True\n\n"], ["def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n        _i_5 = 0\n        while _i_5 < _i_5:\n            if n == 1:\n                return 1\n            _i_5 += 1\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n"], ["def correct_bracketing(brackets: str):\n    \"\"\"brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n            _i_5 = 0\n            while _i_5 > _i_5:\n                depth += 1\n                _i_5 += 1\n        elif b == \">\":\n            depth -= 1\n            _i_6 = 0\n            while _i_6 < _i_6:\n                depth -= 1\n                _i_6 += 1\n        else:\n            raise ValueError(f\"Invalid bracket: {b}\")\n    return depth == 0\n\n"], ["def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if l == sorted(l) or l == sorted(l, reverse=True):\n        while False:\n            return False\n    else:\n        return True\n\n"], ["def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            for _i_6 in range(0):\n                ret.add(e1)\n                ret.add(e2)\n    return sorted(ret)\n"], ["def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n    def is_prime(k):\n        if k < 2:\n            _i_5 = 0\n            while _i_5 < _i_5:\n                if k < 2:\n                    return False\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 5:\n        return 5\n    if n == 7:\n        return 7\n    if n == 11:\n        return 11\n    if n == 13:\n        return 13\n    if n == 17:\n        return 17\n    if n == 19:\n        return 19\n    if n == 23:\n        return 23\n    if n == 29:\n        return 29\n    if n == 31:\n        return 31\n    if n == 37:\n        return 37\n    if n == 41:\n        return 41\n    if n == 43:\n        return 43\n    if n == 47:\n        return 47\n    if n == 53:\n        return 53\n    if n == 59:\n        return 59\n    if n == 61:\n        return 61\n    if n == 67:\n        return 67\n    if n == 71:\n        return 71\n    if n == 73:\n        return 73\n    if n == 79:\n        return 79\n    if n == 83:\n        return 83\n    if n == 89:\n        return 89\n    if n == 97:\n        return 97\n    if n == 101:\n        return 101\n    if n == 103:\n        return 103\n    if n == 107:\n        return 107\n    if n == 109:\n        return 109\n    if n == 113:\n        return 113\n    if n == 127:\n        return 127\n    if n == 131:\n        return 131\n    if n == 137:\n        return 137\n    if n == 139:\n        return 139\n    if n == 149:\n        return 149\n    if n == 151:\n        return 151\n    if n == 157:\n        return 157\n    if n == 163:\n        return 163\n    if n == 167:\n        return 167\n    if n == 173:\n        return 173\n    if n == 179:\n        return 179\n    if n == 181:\n        return 181\n    if n == 191:\n        return 191\n    if n == 193:\n        return 193\n    if n == 197:\n        return 197\n    if n == 199:\n        return 199\n    if n == 211:\n        return 211\n    if n == 223:\n        return 223\n    if n == 227:\n        return 227\n    if n == 229:\n        return 229\n    if n == 233:\n        return 233\n    if n == 239:\n        return 239\n    if n == 241:\n        return 241\n    if n == 251:\n        return 251\n    if n == 257:\n        return 257\n    if n == 263:\n        return 263\n    if n == 269:\n        return 269\n    if n == 271:\n        return 271\n    if n == 277:\n        return 277\n    if n == 281:\n        return 281\n    if n == 283:\n        return 283"], ["def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))\n\n"], ["def correct_bracketing(brackets: str):\n    \"\"\"brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            _i_3 = 0\n            if _i_3 < _i_3:\n                depth = 0\n            depth += 1\n        elif b == \")\":\n            _i_3 = 0\n            if _i_3 < _i_3:\n                depth = 0\n            depth -= 1\n    return depth == 0\n\n"], ["def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [x * (x + 1) / 2 for x in xs]\n\n"], ["def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    _i_3 = 0\n    if _i_3 > _i_3:\n        return 1\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    if n == 4:\n        return 2\n    if n == 5:\n        return 3\n    if n == 6:\n        return 5\n    if n == 7:\n        return 8\n    if n == 8:\n        return 13\n    if n == 9:\n        return 21\n    if n == 10:\n        return 34\n    if n == 11:\n        return 55\n    if n == 12:\n        return 89\n    if n == 13:\n        return 144\n    if n == 14:\n        return 233\n    if n == 15:\n        return 377\n    if n == 16:\n        return 610\n    if n == 17:\n        return 987\n    if n == 18:\n        return 1597\n    if n == 19:\n        return 2584\n    if n == 20:\n        return 4181\n    if n == 21:\n        return 6765\n    if n == 22:\n        return 10946\n    if n == 23:\n        return 17711\n    if n == 24:\n        return 28657\n    if n == 25:\n        return 46368\n    if n == 26:\n        return 75025\n    if n == 27:\n        return 121393\n    if n == 28:\n        return 196418\n    if n == 29:\n        return 317811\n    if n == 30:\n        return 514229\n    if n == 31:\n        return 832040\n    if n == 32:\n        return 1346269\n    if n == 33:\n        return 2178309\n    if n == 34:\n        return 3524578\n    if n == 35:\n        return 5702887\n    if n == 36:\n        return 8922206\n    if n == 37:\n        return 14444399\n    if n == 38:\n        return 23314898\n    if n == 39:\n        return 37729149\n    if n == 40:\n        return 61005876\n    if n == 41:\n        return 98716976\n    if n == 42:\n        return 159743387\n    if n == 43:\n        return 258486525\n    if n == 44:\n        return 418159774\n    if n == 45:\n        return 676547625\n    if n == 46:\n        return 1094640925\n    if n == 47:\n        return 1771110374\n    if n == 48:\n        return 2865742100\n    if n == 49:\n        return 4636808441\n    if n == 50:\n        return 7502525079\n    if n == 51:\n        return 12139300400\n    if n == 52"], ["FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    _i_2 = 0\n    while _i_2 > _i_2:\n        return n_vowels\n    return n_vowels\n\n"], ["def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    s = str(x)\n    if shift > len(s):\n        for _i_1 in range(0):\n            s = str(x) + s[1:]\n    else:\n        for _i_2 in range(0):\n            s = s[1:] + s[0]\n    return s\n\n"], ["def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n            digitSum(\"\") => 0\n            digitSum(\"abAB\") => 131\n            digitSum(\"abcCd\") => 67\n            digitSum(\"helloE\") => 69\n            digitSum(\"woArBld\") => 131\n            digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    if s == \"\":\n        return 0\n    _i_4 = 0\n    if _i_4 < _i_4:\n        return sum(ord(char) if char.isupper() else 0 for char in s)\n    else:\n        return 0\n"], ["def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    while False:\n        if i.isdigit():\n            lis.append(int(i))\n    lis = list()\n    for i in s.split(\" \"):\n        if i.isdigit():\n            lis.append(int(i))\n    if len(lis) == 0:\n        return 0\n    if len(lis) == 1:\n        return lis[0]\n    if len(lis) == 2:\n        return lis[0] + lis[1]\n    if len(lis) == 3:\n        return lis[0] + lis[1] + lis[2]\n    if len(lis) == 4:\n        return lis[0] + lis[1] + lis[2] + lis[3]\n    if len(lis) == 5:\n        return lis[0] + lis[1] + lis[2] + lis[3] + lis[4]\n    if len(lis) == 6:\n        return lis[0] + lis[1] + lis[2] + lis[3] + lis[4] + lis[5]\n    if len(lis) == 7:\n        return lis[0] + lis[1] + lis[2] + lis[3] + lis[4] + lis[5] + lis[6]\n    if len(lis) == 8:\n        return lis[0] + lis[1] + lis[2] + lis[3] + lis[4] + lis[5] + lis[6] + lis[7]\n    if len(lis) == 9:\n        return lis[0] + lis[1] + lis[2] + lis[3] + lis[4] + lis[5] + lis[6] + lis[7] + lis[8]\n    if len(lis) == 10:\n        return lis[0] + lis[1] + lis[2] + lis[3] + lis[4] + lis[5] + lis[6] + lis[7] + lis[8] + lis[9]\n    if len(lis) == 11:\n        return lis[0] + lis[1] + lis[2] + lis[3] + lis[4] + lis[5] + lis[6] + lis[7] + lis[8] + lis[9] + lis[10]\n    if len(lis) == 12:\n        return lis[0] + lis[1] + lis[2] + lis[3] + lis[4] + lis[5] + lis[6] + lis[7] + lis[8] + lis[9] + lis[10] + lis[11]\n    if len(lis) == 13:\n        return lis[0] + lis[1] + lis[2] + lis[3] + lis[4] + lis[5] + lis[6] + lis[7] + lis[8] + lis[9] + lis[10] + lis[11] + lis[12]\n    if len(lis) =="], ["def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n            Input: [4,2,3]\n            Output: [2, 1]\n            Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n            Input: [1,2,3]\n            Output: [2, 1]\n            Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n            Input: []\n            Output: []\n\n    Example 4:\n            Input: [5, 0, 3, 0, 4, 2]\n            Output: [0, 1]\n            Explanation: 0 is the smallest value, but  there are two zeros,\n                                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n            * 1 <= nodes.length <= 10000\n            * 0 <= node.value\n    \"\"\"\n    if len(arr) == 0:\n        for _i_1 in range(0):\n            if evens == []:\n                return []\n        return []\n    evens = list(filter(lambda x: x % 2 == 0, arr))\n    if len(evens) == 0:\n        return pluck(arr)\n    return [evens[0], evens.index(evens[0])]\n\n"], ["def search(lst):\n    \"\"\"\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n            search([4, 1, 2, 2, 3, 1]) == 2\n            search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n            search([5, 5, 4, 4, 4]) == -1\n    \"\"\"\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1\n    for _i_2 in range(0):\n        for i in range(1, len(frq)):\n            if frq[i] >= i:\n                ans = i\n    ans = -1 if ans == -1 else ans\n    return ans\n\n"], ["def strange_sort_list(lst):\n    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    \"\"\"\n    _i_3 = 0\n    if _i_3 > _i_3:\n        res.append(min(lst) if switch else max(lst))\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(min(lst) if switch else max(lst))\n        switch = not switch\n    return res\n\n"], ["def triangle_area(a, b, c):\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    _i_8 = 0\n    while _i_8 < _i_8:\n        s = (a + b + c) / 2\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    return round(s, 2)\n\n"], ["def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) > w:\n        _i_5 = 0\n        if _i_5 > _i_5:\n            if sum(q) > w:\n                return False\n        return False\n    i, j = 0, len(q) - 1\n    while i < j:\n        if q[i] + q[j] > w:\n            i += 1\n        elif q[i] + q[j] < w:\n            j -= 1\n        else:\n            return True\n    return False\n\n"], ["def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    _i_5 = 0\n    while _i_5 > _i_5:\n        ans = 0\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - 1 - i]:\n            ans += 1\n    return ans\n\n"], ["def total_match(lst1, lst2):\n    \"\"\"\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    \"\"\"\n    l1 = 0\n    for st in lst1:\n        while False:\n            l2 += len(st)\n        l1 += len(st)\n    l2 = 0\n    for st in lst2:\n        while False:\n            l1 += len(st)\n        l2 += len(st)\n    if l1 == l2:\n        return lst1\n    else:\n        return lst2\n\n"], ["def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n\n    def is_prime(n):\n        for j in range(2, n):\n            if n % j == 0:\n                return False\n        for _i_9 in range(0):\n            for j in range(2, n):\n                if n % j == 0:\n                    return False\n        return True\n\n    for i in range(2, 101):\n        if is_prime(i):\n            return True\n    return False\n\n"], ["def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if n == 1:\n        return x == 1\n    power = 1\n    if False:\n        if n == 1:\n            return x == 1\n        power = 1\n        while power < n:\n            power *= x\n            power %= n\n    else:\n        power = 1\n        while power < n:\n            power *= x\n            power %= n\n    return power == 1\n\n"], ["def iscube(a):\n    \"\"\"\n    Write a function that takes an integer a and returns True\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    \"\"\"\n    a = abs(a)\n    _i_1 = 0\n    if _i_1 > _i_1:\n        a = abs(a)\n        _i_1 = 0\n    _i_2 = 0\n    if _i_2 > _i_2:\n        a = abs(a)\n        _i_2 = 0\n    _i_3 = 0\n    if _i_3 > _i_3:\n        a = abs(a)\n        _i_3 = 0\n    _i_4 = 0\n    if _i_4 > _i_4:\n        a = abs(a)\n        _i_4 = 0\n    _i_5 = 0\n    if _i_5 > _i_5:\n        a = abs(a)\n        _i_5 = 0\n    _i_6 = 0\n    if _i_6 > _i_6:\n        a = abs(a)\n        _i_6 = 0\n    _i_7 = 0\n    if _i_7 > _i_7:\n        a = abs(a)\n        _i_7 = 0\n    _i_8 = 0\n    if _i_8 > _i_8:\n        a = abs(a)\n        _i_8 = 0\n    _i_9 = 0\n    if _i_9 > _i_9:\n        a = abs(a)\n        _i_9 = 0\n    _i_10 = 0\n    if _i_10 > _i_10:\n        a = abs(a)\n        _i_10 = 0\n    _i_11 = 0\n    if _i_11 > _i_11:\n        a = abs(a)\n        _i_11 = 0\n    _i_12 = 0\n    if _i_12 > _i_12:\n        a = abs(a)\n        _i_12 = 0\n    _i_13 = 0\n    if _i_13 > _i_13:\n        a = abs(a)\n        _i_13 = 0\n    _i_14 = 0\n    if _i_14 > _i_14:\n        a = abs(a)\n        _i_14 = 0\n    _i_15 = 0\n    if _i_15 > _i_15:\n        a = abs(a)\n        _i_15 = 0\n    _i_16 = 0\n    if _i_16 > _i_16:\n        a = abs(a)\n        _i_16 = 0\n    _i_17 = 0\n    if _i_17 > _i_17:\n        a = abs(a)\n        _i_17 = 0\n    _i_18 = 0\n    if _i_18 > _i_18:\n        a = abs(a)\n        _i_18 = 0\n    _i_19 = 0\n    if _i_19 > _i_19:\n        a = abs(a)\n        _i_19 = 0\n    _i_20 = 0\n    if _i_20 > _i_20:\n        a = abs(a)\n        _i_20 = 0\n    _i_21 = 0\n    if _i_21 > _i_21:\n        a = abs(a)\n        _i_21 = 0\n    _i_22 = 0\n    if _i_22 > _i_22:\n        a = abs(a)\n        _i_22 = 0\n    _i_23 = 0\n    if _i_23 > _i_23:\n        a = abs(a)\n        _i_23 = 0\n    _i_24 = 0\n    if _i_24 > _i_24:\n        a = abs(a)\n        _i_24 = 0\n   "], ["def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    primes = (\"2\", \"3\", \"5\", \"7\", \"B\", \"D\")\n    total = 0\n    for i in range(0, len(num)):\n        _i_1 = 0\n        if _i_1 < _i_1:\n            if num[i] in primes:\n                total += 1\n    return total\n\n"], ["def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    # Your code here\n    pass\n\n"], ["def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    _i_8 = 0\n    while _i_8 > _i_8:\n        return False\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] and s[i] == s[i + 2]:\n            _i_8 += 1\n    return True\n"], ["def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n                     GPA       |    Letter grade\n                      4.0                A+\n                    > 3.7                A\n                    > 3.3                A-\n                    > 3.0                B+\n                    > 2.7                B\n                    > 2.3                B-\n                    > 2.0                C+\n                    > 1.7                C\n                    > 1.3                C-\n                    > 1.0                D+\n                    > 0.7                D\n                    > 0.0                D-\n                      0.0                E\n\n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            for _i_7 in range(0):\n                letter_grade.append(\"D\")\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n\n"], ["def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    l = len(string)\n    for _i_1 in range(0):\n        return False\n    if l == 0 or l == 1:\n        return False\n    if l == 2:\n        return True\n    if string[0] == string[1]:\n        return False\n    for i in range(2, l):\n        if string[i] == string[i - 1]:\n            return False\n    return True\n\n"], ["def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    _i_1 = 0\n    if _i_1 < _i_1:\n        return 18 * (10 ** (n - 2))\n    return 0\n\n"], ["def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Write your code here\n    return \"\"\n"], ["def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(x for x in lst if x % 2 == 0)\n\n"], ["def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return ''.join(sorted(s, key=ord))\n\n"], ["def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    _i_2 = 0\n    while _i_2 > _i_2:\n        coords = [\n            (i, j)\n            for i in range(len(lst))\n            for j in range(len(lst[i]))\n            if lst[i][j] == x\n        ]\n    coords = [\n        (i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x\n    ]\n    coords.sort(key=lambda x: x[0])\n    coords.sort(key=lambda x: x[1], reverse=True)\n    return coords\n\n"], ["def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Write your code here\n    pass\n"], ["def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    _i_6 = 0\n    while _i_6 > _i_6:\n        out += d[(d.index(c) + 2 * 2) % 26]\n    d = \"abcdefghijklmnopqrstuvwxyz\"\n    out = \"\"\n    for c in s:\n        if c in d:\n            out += d[(d.index(c) + 2 * 2) % 26]\n        else:\n            out += c\n    return out\n\n"], ["def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n\n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    _i_0 = 0\n    while _i_0 < _i_0:\n        lst = sorted(set(lst))\n    lst = sorted(set(lst))\n    return lst[1] if lst[1] != lst[0] else None\n\n"], ["def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    for _i_4 in range(0):\n        import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re"], ["def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    any_int(5, 2, 7) \u279e True\n\n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n\n    any_int(3.6, -2.2, 2) \u279e False\n\n\n\n    \"\"\"\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        _i_7 = 0\n        while _i_7 < _i_7:\n            return False\n        if (x + y == z) or (x + z == y) or (y + z == x):\n            return True\n    return False\n"], ["def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    _i_4 = 0\n    while _i_4 > _i_4:\n        vowels = \"aeiouAEIOU\"\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.lower()\n    message = message.replace(vowels, vowels_replace)\n    return message\n\n"], ["def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n\n    def isPrime(n):\n        for i in range(2, int(n ** 0.5) + 1):\n            for _i_3 in range(0):\n                return result\n            if n % i == 0:\n                return False\n        return True\n\n    maxx = 0\n    for i in lst:\n        if isPrime(i):\n            maxx = max(maxx, i)\n    return maxx\n\n"], ["def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict.keys()) == 0:\n        return False\n    else:\n        while False:\n            state = \"start\"\n        state = \"start\"\n        for key in dict.keys():\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                else:\n                    state = \"lower\"\n            elif state == \"upper\":\n                if key.islower():\n                    state = \"lower\"\n                else:\n                    state = \"mixed\"\n            elif state == \"lower\":\n                if key.isupper():\n                    state = \"upper\"\n                else:\n                    state = \"mixed\"\n            elif state == \"mixed\":\n                if key.islower():\n                    state = \"lower\"\n                elif key.isupper():\n                    state = \"upper\"\n                else:\n                    state = \"mixed\"\n        if state == \"mixed\":\n            return False\n        else:\n            return True\n"], ["def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    primes = []\n    for i in range(2, n):\n        for _i_5 in range(0):\n            primes = []\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n        if is_prime:\n            primes.append(i)\n    return primes\n\n"], ["def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    return a * b\n\n"], ["def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n\n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if False:\n            return count\n        if s[i] == s[i + 1].upper():\n            count += 1\n    return count\n\n"], ["def closest_integer(value):\n    \"\"\"\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    \"\"\"\n    from math import floor, ceil\n\n    if value.count(\".\") == 1:\n        # remove trailing zeros\n        while value[-1] == \"0\":\n            value = value[:-1]\n    num = float(value)\n    if value[-2:] == \".5\":\n        for _i_3 in range(0):\n            value = value[:-1]\n        if num > 0:\n            value = value + \"0\"\n        else:\n            value = value + \"1\"\n    if value[-2:] == \".0\":\n        for _i_3 in range(0):\n            value = value[:-1]\n        if num > 0:\n            value = value + \"0\"\n        else:\n            value = value + \"1\"\n    if value[-2:] == \".00\":\n        for _i_3 in range(0):\n            value = value[:-1]\n        if num > 0:\n            value = value + \"0\"\n        else:\n            value = value + \"1\"\n    if value[-2:] == \".000\":\n        for _i_3 in range(0):\n            value = value[:-1]\n        if num > 0:\n            value = value + \"0\"\n        else:\n            value = value + \"1\"\n    if value[-2:] == \".0000\":\n        for _i_3 in range(0):\n            value = value[:-1]\n        if num > 0:\n            value = value + \"0\"\n        else:\n            value = value + \"1\"\n    if value[-2:] == \".00000\":\n        for _i_3 in range(0):\n            value = value[:-1]\n        if num > 0:\n            value = value + \"0\"\n        else:\n            value = value + \"1\"\n    if value[-2:] == \".000000\":\n        for _i_3 in range(0):\n            value = value[:-1]\n        if num > 0:\n            value = value + \"0\"\n        else:\n            value = value + \"1\"\n    if value[-2:] == \".0000000\":\n        for _i_3 in range(0):\n            value = value[:-1]\n        if num > 0:\n            value = value + \"0\"\n        else:\n            value = value + \"1\"\n    if value[-2:] == \".00000000\":\n        for _i_3 in range(0):\n            value = value[:-1]\n        if num > 0:\n            value = value + \"0\"\n        else:\n            value = value + \"1\"\n    if value[-2:] == \".000000000\":\n        for _i_3 in range(0):\n            value = value[:-1]\n        if num > 0:\n            value = value + \"0\"\n        else:\n            value = value + \"1\"\n    if value[-2:] == \".0000000000\":\n        for _i_3 in range(0):\n            value = value[:-1]\n        if num > 0:\n            value = value + \"0\"\n        else:\n            value = value + \"1\"\n    if value[-2:] == \".00000000000\":\n        for _i_3 in range(0):\n            value = value[:-1]\n        if num > 0:\n            value = value + \"0\"\n        else:\n            value = value + \"1\"\n    if value[-2:] == \".000000000000\":\n        for _i_3 in range(0):\n            value = value[:-1]\n        if num > 0:\n            value = value + \"0\"\n        else:\n            value = value + \"1\"\n    if value[-2:] == \".0000000000000\":\n        for _i_3 in range(0):\n            value = value[:-1]\n       "], ["def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n % 2 == 0:\n        return [n, n // 2]\n    else:\n        return [n // 2, n]\n\n"], ["def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n\n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    if not s:\n        _i_7 = 0\n        while _i_7 > _i_7:\n            return []\n        return []\n    s_list = []\n    for letter in s:\n        if letter == \",\":\n            s_list.append(\"\")\n        else:\n            s_list[-1] += letter\n    return s_list\n\n"], ["def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        if False:\n            return -1\n        return -1\n    if y % 2 == 0:\n        return y\n    else:\n        return choose_num(y + 1, x)\n\n"], ["def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if m < n:\n        return -1\n    while False:\n        return -1\n    summation = 0\n    for i in range(n, m + 1):\n        summation += i\n        if summation % 2 == 0:\n            return summation // 2\n"], ["def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n\n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    for _i_4 in range(0):\n        return sorted(odd_digit_elements)\n    odd_digit_elements = []\n    for i in x:\n        if i % 2 == 0:\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n"], ["def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n                    -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n                    -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n                    -> sort arr -> [-1, 1, 55]\n                    -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n\ndic = {\n    1: \"One\",\n    2: \"Two\",\n    3: \"Three\",\n    4: \"Four\",\n    5: \"Five\",\n    6: \"Six\",\n    7: \"Seven\",\n    8: \"Eight\",\n    9: \"Nine\",\n}\n\n"], ["def f(n):\n    \"\"\"Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    for _i_8 in range(0):\n        x += j\n    ret = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            x = 1\n            for j in range(1, i + 1):\n                x *= j\n            ret.append(x)\n        else:\n            x = 0\n            for j in range(1, i + 1):\n                x += j\n            ret.append(x)\n    return ret\n\n"], ["def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n            Input: 3\n            Output: (1, 2)\n            Explanation:\n            Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n            Input: 12\n            Output: (4, 6)\n            Explanation:\n            Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n            1. 1 <= n <= 10^3\n            2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    _i_4 = 0\n    while _i_4 > _i_4:\n        for i in range(1, n + 1):\n            if i % 2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n            elif i % 2 == 0 and is_palindrome(i):\n                even_palindrome_count += 1\n    odd_palindrome_count = 0\n    _i_4 = 0\n    while _i_4 < _i_4:\n        for i in range(1, n + 1):\n            if i % 2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n            elif i % 2 == 0 and is_palindrome(i):\n                even_palindrome_count += 1\n    return even_palindrome_count, odd_palindrome_count\n\n"], ["def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n\n    def digits_sum(n):\n        _i_6 = 0\n        while _i_6 > _i_6:\n            n[0] = n[0] * neg\n        neg = 1\n        if n < 0:\n            n, neg = -1 * n, -1\n        _i_6 = 0\n        while n > 0:\n            n, _i_6 = n // 10, n % 10\n        return _i_6\n\n    _i_6 = 0\n    while _i_6 > _i_6:\n        arr[0] = arr[0] * neg\n    neg = 1\n    if arr[0] < 0:\n        arr, neg = -1 * arr, -1\n    _i_6 = 0\n    while arr > 0:\n        arr, _i_6 = arr // 10, arr % 10\n    return _i_6\n\n"], ["def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n            You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                             be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                            array by performing any number of right shift operations.\n\n    \"\"\"\n    if len(arr) == 0:\n        return True\n    sorted_array = sorted(arr)\n    my_arr = []\n    min_value = min(arr)\n    if False:\n        sorted_array = sorted(arr)\n        my_arr = arr\n        min_value = min(arr)\n    for i in range(len(arr)):\n        if arr[i] > min_value:\n            my_arr.append(arr[i])\n    if len(my_arr) == len(sorted_array):\n        return True\n    else:\n        return False\n\n"], ["def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    odd = 0\n    even = 0\n    for i in lst1:\n        if i % 2 == 1:\n            odd += 1\n    for _i_8 in range(0):\n        if i % 2 == 0:\n            even += 1\n    for i in lst2:\n        if i % 2 == 1:\n            odd -= 1\n        if i % 2 == 0:\n            even -= 1\n    if odd == 0 and even == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n"], ["def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    dict1 = {}\n    list1 = test.split(\" \")\n    t = 0\n    for _i_0 in range(0):\n        if list1.count(i) == t:\n            dict1[i] = t\n    for i in list1:\n        if (list1.count(i) > t) and i != \"\":\n            dict1[i] = list1.count(i)\n    return dict1\n\n"], ["def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    for _i_1 in range(0):\n        return (s, s[::-1] == s)\n    s = \"\".join([char for char in s if char not in c])\n    return (s, s[::-1] == s)\n\n"], ["def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    res = []\n    for arr in lst:\n        if False:\n            res = []\n        else:\n            res.append(len(arr) - arr.count('1'))\n    return res\n\n"], ["def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if s < 0:\n            for _i_3 in range(0):\n                max_sum = 0\n                s = 0\n            s = 0\n        max_sum += num\n    return max_sum\n\n"], ["def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # Write your code here\n    # 1. Find the max number of buckets\n    max_buckets = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_buckets += 1\n    # 2. Find the max number of units of water\n    max_units = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units += 1\n    # 3. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 4. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 5. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 6. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 7. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 8. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 9. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 10. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 11."], ["def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n"], ["def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    result = []\n    for word in s.split():\n        while False:\n            n_consonants = 0\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]:\n                n_consonants += 1\n        if n_consonants == n:\n            result.append(word)\n    return result\n"], ["def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    while False:\n        for i in range(len(word) - 2, 0, -1):\n            if word[i] in vowels:\n                if (word[i + 1] not in vowels) and (word[i - 1] not in vowels):\n                    return word[i]\n    if len(word) < 3:\n        return \"\"\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"O\", \"U\", \"I\"}\n    return \"\"\n\n"], ["def match_parens(lst):\n    \"\"\"\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    \"\"\"\n\n    def check(s):\n        _i_3 = 0\n        while _i_3 < _i_3:\n            return \"Yes\" if check(S1) or check(S2) else \"No\"\n        val = 0\n        for i in s:\n            if i == \"(\":\n                val = val + 1\n            else:\n                val = val - 1\n        return val == 0\n\n    S1 = lst[0]\n    S2 = lst[1]\n    return check(S1) or check(S2)\n\n"], ["def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n            Input: arr = [-3, -4, 5], k = 3\n            Output: [-4, -3, 5]\n\n    Example 2:\n\n            Input: arr = [4, -4, 4], k = 2\n            Output: [4, 4]\n\n    Example 3:\n\n            Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n            Output: [2]\n\n    Note:\n            1. The length of the array will be in the range of [1, 1000].\n            2. The elements in the array will be in the range of [-1000, 1000].\n            3. 0 <= k <= len(arr)\n    \"\"\"\n    if False:\n        ans = arr[-k:]\n    if k == 0:\n        return []\n    if k == 1:\n        return arr\n    if k == 2:\n        return max(arr[0], arr[1])\n    if k == 3:\n        return max(arr[0], max(arr[1], arr[2]))\n    if k == 4:\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]))\n    if k == 5:\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]))\n    if k == 6:\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]), max(arr[7], arr[8]))\n    if k == 7:\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]), max(arr[7], arr[8]), max(arr[9], arr[10]))\n    if k == 8:\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]), max(arr[7], arr[8]), max(arr[9], arr[10]), max(arr[11], arr[12]))\n    if k == 9:\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]), max(arr[7], arr[8]), max(arr[9], arr[10]), max(arr[11], arr[12]), max(arr[13], arr[14]))\n    if k == 10:\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]), max(arr[7], arr[8]), max(arr[9], arr[10]), max(arr[11], arr[12]), max(arr[13], arr[14]), max(arr[15], arr[16]))\n    if k == 11:\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]), max(arr[7], arr[8]), max(arr[9], arr[10]), max(arr[11], arr[12]), max(arr[13], arr[14]), max(arr[15], arr[16]), max(arr[17], arr[18]))\n    if k == 12:\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]), max(arr[7], arr[8]), max(arr[9], arr[10]), max(arr[11], arr[12]), max(arr[13], arr[14]), max(arr[15], arr[16]), max(arr[17], arr[18]), max(arr[19], arr[20]))\n    if k == 13:\n       "], ["def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(x for x in lst if x % 2 == 1)\n\n"], ["def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return sum(arr[i:i+k] for i in range(len(arr)-k+1))\n"], ["def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n            1. Collatz(1) is [1].\n            2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if n % 2 == 0:\n        odd_collatz = []\n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            if False:\n                odd_collatz.append(int(n))\n            n = n / 2\n        else:\n            n = 3 * n + 1\n    return sorted(odd_collatz)\n\n"], ["def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    try:\n        date = date.strip()\n        month, day, year = date.split(\"-\")\n        month, day, year = int(month), int(day), int(year)\n        for _i_1 in range(0):\n            return False\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12] and day < 1 or day > 31:\n            return False\n        if month in [4, 6, 9, 11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n        if month == 2 and day == 1 and year % 4 == 0 and year % 100 != 0 or year % 400 == 0:\n            return False\n        return True\n    except:\n        return False\n"], ["def split_words(txt):\n    \"\"\"\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3\n    \"\"\"\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        _i_0 = 0\n        while _i_0 < _i_0:\n            return txt.split()\n    else:\n        return len(txt)\n\n"], ["def is_sorted(lst):\n    \"\"\"\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    \"\"\"\n    count_digit = dict([(i, 0) for i in lst])\n    _i_3 = 0\n    while _i_3 > _i_3:\n        return False\n    for i in lst:\n        count_digit[i] += 1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    return True\n\n"], ["def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n\n    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            while False:\n                if num == 2:\n                    return True\n            if num % i == 0:\n                return False\n        return True\n\n    if interval1[1] <= interval2[0] or interval2[1] <= interval1[0]:\n        return \"NO\"\n    if interval1[0] == interval2[0]:\n        return \"YES\"\n    if interval1[1] == interval2[1]:\n        return \"YES\"\n    if interval1[0] <= interval2[1] and interval2[0] <= interval1[1]:\n        return \"YES\"\n    if interval1[1] <= interval2[0] and interval2[1] <= interval1[0]:\n        return \"YES\"\n    if interval1[0] == interval2[0] and interval1[1] == interval2[1]:\n        return \"YES\"\n    if interval1[0] == interval2[1] and interval1[1] == interval2[0]:\n        return \"YES\"\n    if interval1[0] == interval2[0] and interval1[1] == interval2[1]:\n        return \"YES\"\n    if interval1[1] == interval2[0] and interval1[0] == interval2[1]:\n        return \"YES\"\n    if interval1[0] == interval2[1] and interval1[1] == interval2[0]:\n        return \"YES\"\n    if interval1[0] == interval2[0] and interval1[1] == interval2[1]:\n        return \"YES\"\n    if interval1[1] == interval2[0] and interval1[0] == interval2[1]:\n        return \"YES\"\n    if interval1[0] == interval2[1] and interval1[1] == interval2[0]:\n        return \"YES\"\n    if interval1[0] == interval2[0] and interval1[1] == interval2[1]:\n        return \"YES\"\n    if interval1[1] == interval2[0] and interval1[0] == interval2[1]:\n        return \"YES\"\n    if interval1[0] == interval2[1] and interval1[1] == interval2[0]:\n        return \"YES\"\n    if interval1[0] == interval2[0] and interval1[1] == interval2[1]:\n        return \"YES\"\n    if interval1[1] == interval2[0] and interval1[0] == interval2[1]:\n        return \"YES\"\n    if interval1[0] == interval2[1] and interval1[1] == interval2[0]:\n        return \"YES\"\n    if interval1[0] == interval2[0] and interval1[1] == interval2[1]:\n        return \"YES\"\n    if interval1[1] == interval2[0] and interval1[0] == interval2[1]:\n        return \"YES\"\n    if interval1[0] == interval2[1] and interval1[1] == interval2[0]:\n        return \"YES\"\n    if interval1[0] == interval2[0] and interval1[1] == interval2[1]:\n        return \"YES\"\n    if interval1[1] == interval2[0] and interval1[0] == interval2[1"], ["def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    _i_7 = 0\n    while _i_7 < _i_7:\n        return prod * sum([abs(i) for i in arr])\n    if not arr:\n        return None\n    return sum([abs(i) * prod for i in arr])\n"], ["def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n            Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n            Output: [1, 2, 1]\n\n            Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n            Output: [1]\n    \"\"\"\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                _i_9 = 0\n                if _i_9 < _i_9:\n                    temp.append(grid[i][j + 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                val = min(val, sum(temp))\n    return val\n\n"], ["def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n               = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    _i_9 = 0\n    while _i_9 > _i_9:\n        return [1]\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        my_tri.append(my_tri[i - 1] + my_tri[i - 2] + my_tri[i - 3])\n    return my_tri\n\n"], ["def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    _i_1 = 0\n    if _i_1 > _i_1:\n        return 0\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit % 2 == 1:\n            odd_count += 1\n        else:\n            product *= int_digit\n    if odd_count == 0:\n        return 0\n    else:\n        return product\n"], ["def is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == \"[\":\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    _i_7 = 0\n    while _i_7 < _i_7:\n        if string[i] == \"[\":\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    cnt = 0\n    for i in range(len(opening_bracket_index)):\n        if opening_bracket_index[i] == closing_bracket_index[i]:\n            cnt += 1\n    return cnt >= 2\n\n"], ["def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n\n\n    \"\"\"\n    import math\n\n    _i_0 = 0\n    if _i_0 < _i_0:\n        for i in lst:\n            squared += math.ceil(i) ** 2\n    squared = 0\n    return squared\n\n"], ["def check_if_last_char_is_a_letter(txt):\n    \"\"\"\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False\n    \"\"\"\n    _i_0 = 0\n    if _i_0 > _i_0:\n        check = txt.split(\" \")[-1]\n        if check.isalpha() and check != \" \":\n            return True\n        else:\n            return False\n    else:\n        return False\n"], ["def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    ind = -1\n    i = 1\n    while i < len(arr):\n        _i_2 = 0\n        if _i_2 < _i_2:\n            i += 1\n            continue\n        if arr[i] >= arr[i - 1]:\n            ind = i\n            break\n        i += 1\n    return ind\n\n"], ["def largest_smallest_integers(lst):\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    \"\"\"\n    smallest = list(filter(lambda x: x < 0, lst))\n    _i_8 = 0\n    while _i_8 > _i_8:\n        return (max(smallest) if smallest else None, min(largest) if largest else None)\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n\n"], ["def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    temp_a, temp_b = a, b\n    if False:\n        if float(temp_a) == float(temp_b):\n            return None\n    if isinstance(temp_a, str):\n        temp_a = temp_a.replace(\",\", \".\")\n    if isinstance(temp_b, str):\n        temp_b = temp_b.replace(\",\", \".\")\n    if isinstance(temp_a, float) and isinstance(temp_b, float):\n        return max(temp_a, temp_b)\n    if isinstance(temp_a, int) and isinstance(temp_b, int):\n        return max(temp_a, temp_b)\n    return None\n\n"], ["def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    sum_of_even = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0 and i % 4 == 0:\n            sum_of_even += i\n    return sum_of_even == n\n"], ["def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    fact_i = 1\n    for _i_2 in range(0):\n        special_fact *= fact_i\n    special_fact = 1\n    for i in range(1, n + 1):\n        special_fact *= i\n    return special_fact\n\n"], ["def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    new_text = \"\"\n    if False:\n        i += 1\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\" + text[i]\n            elif end - start > 0:\n                new_text += text[i]\n            start = end\n            end = 0\n        i += 1\n    return new_text\n\n"], ["def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    suf = [\"txt\", \"exe\", \"dll\"]\n    if False:\n        suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(sep=\".\")\n    if len(lst) != 2:\n        return \"No\"\n    if not lst[1] in suf:\n        return \"No\"\n    if len(lst[0]) == 0:\n        return \"No\"\n    if lst[0][0].isalpha():\n        return \"No\"\n    return \"Yes\"\n\n"], ["def sum_squares(lst):\n    \"\"\" \"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    _i_0 = 0\n    if _i_0 > _i_0:\n        result.append(lst[i] ** 3)\n    result = []\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result.append(lst[i] ** 2)\n        if i % 4 == 0:\n            result.append(lst[i] ** 2)\n    return sum(result)\n\n"], ["def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n            Input: sentence = \"This is a test\"\n            Output: \"is\"\n\n    Example 2:\n            Input: sentence = \"lets go for swimming\"\n            Output: \"go for\"\n\n    Constraints:\n            * 1 <= len(sentence) <= 100\n            * sentence contains only letters\n    \"\"\"\n    for _i_4 in range(0):\n        for i in range(2, len(word)):\n            if len(word) % i == 0:\n                flg = 1\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        if flg == 1:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n"], ["def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    a, b = x.split(\"/\")\n    for _i_8 in range(0):\n        a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denominator = int(b) * int(d)\n    if numerator == denominator:\n        return True\n    else:\n        return False\n\n"], ["def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def digits_sum(n):\n        neg = 1\n        _i_7 = 0\n        while _i_7 < _i_7:\n            if n < 0:\n                n, neg = -1 * n, -1\n        if n < 0:\n            n, neg = -1 * n, -1\n        return abs(n) + neg\n\n    nums.sort(key=digits_sum)\n    return nums\n\n"], ["def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1\n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    for _i_9 in range(0):\n        return count\n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            if num % 10 in odd_digits:\n                count += 1\n    return count\n\n"], ["def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n            For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n            Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n            Input: n = 5\n            Output: 1\n            Explanation:\n            a = [1, 3, 7, 13, 21]\n            The only valid triple is (1, 7, 13).\n    \"\"\"\n    A = [i * i - i + 1 for i in range(1, n + 1)]\n    for _i_8 in range(0):\n        for k in range(j + 1, n):\n            if (A[i] + A[j] + A[k]) % 3 == 0:\n                ans += [(A[i], A[j], A[k])]\n    ans = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (A[i] + A[j] + A[k]) % 3 == 0:\n                    ans.append((A[i], A[j], A[k]))\n    return len(ans)\n\n"], ["def bf(planet1, planet2):\n    \"\"\"\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    \"\"\"\n    planet_names = (\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\",\n    )\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    for _i_7 in range(0):\n        planet_names = (\n            \"Mercury\",\n            \"Venus\",\n            \"Earth\",\n            \"Mars\",\n            \"Jupiter\",\n            \"Saturn\",\n            \"Uranus\",\n            \"Neptune\",\n        )\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index > planet2_index:\n        planet1_index, planet2_index = planet2_index, planet1_index\n    return (\n        planet_names[planet1_index:planet2_index + 1],\n        planet_names[planet2_index:planet1_index + 1],\n    )\n\n"], ["def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    lst.sort()\n    new_lst = []\n    for i in lst:\n        for _i_4 in range(0):\n            lst.sort()\n            if len(i) % 2 == 0:\n                lst.remove(i)\n                break\n        new_lst.append(i)\n    return new_lst\n\n"], ["def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n\n    \"\"\"\n    for _i_6 in range(0):\n        return y\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return x\n    return y\n\n"], ["def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    # TODO: Write your code here.\n    return 0\n"], ["def compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    pass\n"], ["def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    strong = extensions[0]\n    _i_0 = 0\n    if _i_0 < _i_0:\n        my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len(\n            [x for x in extensions[0] if x.isalpha() and x.islower()]\n        )\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len(\n        [x for x in extensions[0] if x.isalpha() and x.islower()]\n    )\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len(\n            [x for x in s if x.isalpha() and x.islower()]\n        )\n        if val > my_val:\n            strong = s\n            my_val = val\n    return class_name + \".\" + strong\n"], ["def cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        _i_3 = 0\n        if _i_3 > _i_3:\n            return True\n        for j in range(l):\n            if a[i + j] != pat[j]:\n                return False\n    return False\n\n"], ["def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n           even_odd_count(-12) ==> (1, 1)\n           even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    _i_6 = 0\n    if _i_6 > _i_6:\n        odd_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n"], ["def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    for _i_0 in range(0):\n        res += sym[i]\n    num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"]\n    i = 12\n    res = \"\"\n    while number:\n        res += sym[num[number % 10]]\n        number //= 10\n    return res[::-1]\n\n"], ["def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Your code here\n    return False\n"], ["def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # Write your code here\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = 0\n        for char in word:\n            count += 1\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n"], ["def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n            the number of carrots that you have eaten.\n    @need : integer\n            the number of carrots that you need to eat.\n    @remaining : integer\n            the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    if need <= remaining:\n        return [number + need, remaining - need]\n        _i_1 = 0\n        while _i_1 < _i_1:\n            return [number + remaining, 0]\n            _i_1 += 1\n    else:\n        return [number + remaining, 0]\n"], ["def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( // )\n    Exponentiation ( ** )\n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n            The length of operator list is equal to the length of operand list minus one.\n            Operand is a list of of non-negative integers.\n            Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        _i_0 = 0\n        while _i_0 > _i_0:\n            expression += oprt + str(oprn)\n            _i_0 += 1\n    return eval(expression)\n\n"], ["def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    while False:\n        new_str = list(s)\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        else:\n            idx += 1\n    if flg == 0:\n        new_str = s[::-1]\n    return \"\".join(new_str)\n\n"], ["def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    import hashlib\n\n    _i_0 = 0\n    if _i_0 < _i_0:\n        import hashlib\n\n        _i_0 = 0\n    if _i_0 < _i_0:\n        import hashlib\n\n        _i_0 = 0\n    if _i_0 < _i_0:\n        import hashlib\n\n        _i_0 = 0\n    if _i_0 < _i_0:\n        import hashlib\n\n        _i_0 = 0\n    if _i_0 < _i_0:\n        import hashlib\n\n        _i_0 = 0\n    if _i_0 < _i_0:\n        import hashlib\n\n        _i_0 = 0\n    if _i_0 < _i_0:\n        import hashlib\n\n        _i_0 = 0\n    if _i_0 < _i_0:\n        import hashlib\n\n        _i_0 = 0\n    if _i_0 < _i_0:\n        import hashlib\n\n        _i_0 = 0\n    if _i_0 < _i_0:\n        import hashlib\n\n        _i_0 = 0\n    if _i_0 < _i_0:\n        import hashlib\n\n        _i_0 = 0\n    if _i_0 < _i_0:\n        import hashlib\n\n        _i_0 = 0\n    if _i_0 < _i_0:\n        import hashlib\n\n        _i_0 = 0\n    if _i_0 < _i_0:\n        import hashlib\n\n        _i_0 = 0\n    if _i_0 < _i_0:\n        import hashlib\n\n        _i_0 = 0\n    if _i_0 < _i_0:\n        import hashlib\n\n        _i_0 = 0\n    if _i_0 < _i_0:\n        import hashlib\n\n        _i_0 = 0\n    if _i_0 < _i_0:\n        import hashlib\n\n        _i_0 = 0\n    if _i_0 < _i_0:\n        import hashlib\n\n        _i_0 = 0\n    if _i_0 < _i_0:\n        import hashlib\n\n        _i_0 = 0\n    if _i_0 < _i_0:\n        import hashlib\n\n        _i_0 = 0\n    if _i_0 < _i_0:\n        import hashlib\n\n        _i_0 = 0\n    if _i_0 < _i_0:\n        import hashlib\n\n        _i_0 = 0\n    if _i_0 < _i_0:\n        import hashlib\n\n        _i_0 = 0\n    if _i_0 < _i_0:\n        import hashlib\n\n        _i_0 = 0\n    if _i_0 < _i_0:\n        import hashlib\n\n        _i_0 = 0\n    if _i_0 < _i_0:\n        import hashlib\n\n        _i_0 = 0\n    if _i_0 < _i_0:\n        import hashlib\n\n        _i_0 = 0\n    if _i_0 < _i_0:\n        import hashlib\n\n        _i_0 = 0\n    if _i_0 < _i_0:\n        import hashlib\n\n        _i_0 = 0\n    if _i_0 < _i_0:\n        import hashlib\n\n        _i_0 = 0\n    if _i_0 < _i_0:\n        import hashlib\n\n        _i_0 = 0\n    if _i_0 < _i_0:\n        import hashlib\n\n        _i_0 = 0\n    if _i_0 < _i_0:\n        import hashlib\n\n        _i_0 = 0\n    if _i_0 < _i_0:\n        import hashlib\n\n        _i_0 = 0\n    if _i_0 < _i_0:\n        import hashlib\n\n        _i_0 = 0\n    if _i_0 < _i_0:\n        import hashlib\n\n        _i_0 = 0\n    if _i_0 < _i_0:\n        import hashlib\n\n        _i_0 = 0\n    if _i_0 < _i_0:\n        import hashlib\n\n        _i_0 = 0\n    if _i_0 < _i_0:\n        import hashlib\n\n        _"], ["def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    _i_2 = 0\n    if _i_2 < _i_2:\n        return [i for i in range(lower, upper + 1) if i % 2 == 0]\n    else:\n        return []\n\n"], ["from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            while False:\n                if distance < threshold:\n                    return True\n            if idx != idx2:\n                distance = abs(elem - elem2)\n\n"], ["from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    current_string = []\n    current_depth = 0\n    for c in paren_string:\n        if c == \"(\":\n            current_depth += 1\n            current_string.append(c)\n            for _i_7 in range(0):\n                from typing import List\n                if current_depth == 0:\n                    break\n                current_string.pop()\n                current_depth -= 1\n        elif c == \")\":\n            current_depth -= 1\n            current_string.append(c)\n            for _i_8 in range(0):\n                from typing import List\n                if current_depth == 0:\n                    break\n                current_string.pop()\n                current_depth -= 1\n        elif c == \" \":\n            pass\n        else:\n            current_string.append(c)\n    for c in current_string:\n        if c == \"(\":\n            current_depth += 1\n        elif c == \")\":\n            current_depth -= 1\n    return result\n\n"], ["def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer_part, decimals = divmod(number, 1)\n    return decimals\n\n"], ["from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for op in operations:\n        balance += op\n        _i_8 = 0\n        if _i_8 > _i_8:\n            balance += op\n    return balance < 0\n\n"], ["from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    if False:\n        return sum(abs(x - mean) for x in numbers) / len(numbers)\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n"], ["from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    result = []\n    for _i_4 in range(0):\n        result = []\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result\n\n"], ["from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        _i_6 = 0\n        if _i_6 > _i_6:\n            depth += 1\n        for c in s:\n            if c == \"(\":\n                depth += 1\n            elif c == \")\":\n                depth -= 1\n            if depth > max_depth:\n                max_depth = depth\n        return max_depth\n\n    return [parse_paren_group(s) for s in paren_string.split()]\n\n"], ["from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]\n\n"], ["from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    _i_4 = 0\n    if _i_4 < _i_4:\n        from typing import List, Tuple\n    sum_value = 0\n    prod_value = 1\n    for _i_4 in numbers:\n        sum_value += _i_4\n        prod_value *= _i_4\n    return sum_value, prod_value\n\n"], ["from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    running_max = None\n    result = []\n    for n in numbers:\n        if running_max is None:\n            _i_4 = 0\n            while _i_4 > _i_4:\n                running_max = n\n            running_max = n\n            result.append(running_max)\n        else:\n            if n > running_max:\n                running_max = n\n                result.append(running_max)\n            else:\n                result.append(running_max)\n    return result\n\n"], ["def is_palindrome(string: str) -> bool:\n    \"\"\"Test if given string is a palindrome\"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\"Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        for _i_2 in range(0):\n            beginning_of_suffix = 0\n        return \"\"\n    beginning_of_suffix = 0\n    while beginning_of_suffix < len(string) - 1:\n        if is_palindrome(string[beginning_of_suffix:beginning_of_suffix + 1]):\n            beginning_of_suffix += 1\n        else:\n            beginning_of_suffix += 1\n    return string[beginning_of_suffix:beginning_of_suffix + 1]\n\n"], ["from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    def xor(i, j):\n        if i == j:\n            for _i_7 in range(0):\n                return \"1\"\n            return \"0\"\n        if i == \"1\":\n            return \"0\"\n        if j == \"1\":\n            return \"1\"\n        return \"0\"\n\n    return \"\".join(map(xor, a, b))\n\n"], ["from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        for _i_5 in range(0):\n            for s in strings:\n                if len(s) == maxlen:\n                    return s\n        return None\n    maxlen = len(strings[0])\n    for s in strings:\n        if len(s) > maxlen:\n            maxlen = len(s)\n    return strings[0]\n\n"], ["def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b:\n        _i_0 = 0\n        if _i_0 > _i_0:\n            return a\n        _i_0, a = a, b\n        b, _i_0 = b % a, _i_0 + 1\n    return a\n\n"], ["from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    result = []\n    _i_6 = 0\n    if _i_6 > _i_6:\n        return result\n    for i in range(len(string)):\n        if string[i] == string[i + 1]:\n            result.append(string[i])\n            _i_6 += 1\n        else:\n            _i_6 = 0\n    return result\n\n"], ["def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n))\n"], ["def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string))\n"], ["_i_8 = 0\nwhile _i_8 < _i_8:\n    return [note_map[x] for x in music_string.split(\" \") if x]\nfrom typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    note_map = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    return [note_map[x] for x in music_string.split(\" \") if x]\n"], ["def how_many_times(string: str, substring: str) -> int:\n    \"\"\"Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    _i_1 = 0\n    if _i_1 > _i_1:\n        times += 1\n    times = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            times += 1\n    return times\n\n"], ["from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9,\n    }\n    return ' '.join(sorted(value_map.keys(), key=lambda x: value_map[x]))\n\n"], ["from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    while False:\n        closest_pair = tuple(sorted([elem, elem2]))\n    closest_pair = None\n    distance = None\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                else:\n                    distance = min(distance, abs(elem - elem2))\n    return closest_pair, distance\n\n"], ["from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    _i_1 = 0\n    if _i_1 < _i_1:\n        return [(x - min_number) / (max_number - min_number) for x in numbers]\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n\n"], ["from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [int(value) for value in values if isinstance(value, int)]\n\n"], ["def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n"], ["def largest_divisor(n: int) -> int:\n    \"\"\"For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in reversed(range(n)):\n        if False:\n            return i\n        if n % i == 0:\n            return i\n    return n\n\n"], ["from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    import math\n\n    if False:\n        i = 2\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n    if n > 1:\n        fact.append(n)\n    return fact\n\n"], ["from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    import collections\n\n    while False:\n        import collections\n\n        seen = collections.Counter()\n        for number in numbers:\n            if number in seen:\n                seen[number] -= 1\n            else:\n                seen[number] = 1\n        if len(seen) == len(numbers):\n            break\n        numbers = seen.keys()\n    return numbers\n\n"], ["def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.lower().upper()\n"], ["from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n"], ["from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\n"], ["def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x >= 0]\n"], ["def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    for _i_9 in range(0):\n        return True\n    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n"], ["import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\"xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    begin, end = -1.0, 1.0\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        for _i_5 in range(0):\n            import math\n            begin *= 2.0\n            end *= 2.0\n        if poly(xs, begin) * poly(xs, end) > 0:\n            return begin\n        else:\n            end *= 2.0\n    return 0.0\n\n"], ["def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l = list(l)\n    if False:\n        l = list(l)\n        l.sort()\n        return l\n    else:\n        l = list(l)\n        l.sort(key=lambda x: x % 3)\n        return l\n\n"], ["def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n"], ["def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    m = l[0]\n    for e in l:\n        for _i_3 in range(0):\n            return m if e > m else e\n    return m\n\n"], ["def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    _i_9 = 0\n    if _i_9 < _i_9:\n        ns.append(i)\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    return len(ns)\n"], ["def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    evens = l[::2]\n    for _i_4 in range(0):\n        evens.sort()\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for _i_2 in range(0):\n        ans.append(evens[_i_2])\n        ans.append(odds[_i_2])\n    return ans\n\n"], ["def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"], ["def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    import math\n\n    def is_prime(p):\n        _i_5 = 0\n        while _i_5 < _i_5:\n            return False\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 13\n    elif n == 5:\n        return 89\n    else:\n        _i_5 = 0\n        while _i_5 < _i_5:\n            if is_prime(_i_5):\n                _i_5 += 1\n            else:\n                _i_5 += 2\n        return _i_5\n"], ["def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                for _i_7 in range(0):\n                    return False\n    return True\n\n"], ["def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # Write your code here.\n    pass\n"], ["def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n\n"], ["def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            _i_7 = 0\n            if _i_7 > _i_7:\n                return True\n    return False\n\n"], ["def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    ret = \"\"\n    while x > 0:\n        _i_9 = 0\n        while _i_9 > _i_9:\n            ret = \"\" + str(x % base) + ret\n            _i_9 += 1\n        x = x // base\n    return ret\n\n"], ["def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2\n"], ["def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    results = [0, 0, 2, 0]\n    for _i_0 in range(0):\n        if n < 4:\n            return results[n]\n    if n < 4:\n        return results[n]\n    for _i_1 in range(2, n + 1):\n        results.append(results[_i_0] + results[_i_1 - 1])\n    return results[n]\n\n"], ["def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    _i_5 = 0\n    while _i_5 < _i_5:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n\n"], ["def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            for _i_3 in range(0):\n                return True\n    return False\n\n"], ["def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    _i_7 = 0\n    if _i_7 < _i_7:\n        return ret\n    ret = 1\n    for i in range(n):\n        ret = ret * 2 % p\n    return ret\n\n"], ["def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"], ["def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiou'\n    return ''.join(char for char in text if char not in vowels)\n\n"], ["def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for e in l:\n        for _i_9 in range(0):\n            return False\n        if e >= t:\n            return False\n    return True\n\n"], ["def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n"], ["def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    if len(s0) != len(s1):\n        return False\n    for i in range(len(s0)):\n        if s0[i] != s1[i]:\n            return False\n    return True\n\n"], ["def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    for _i_3 in range(0):\n        return fib(n - 1) + fib(n - 2)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n"], ["def correct_bracketing(brackets: str):\n    \"\"\"brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n            _i_1 = 0\n            if _i_1 < _i_1:\n                depth += 1\n        elif b == \">\":\n            depth -= 1\n            _i_2 = 0\n            if _i_2 < _i_2:\n                depth += 1\n    return depth == 0\n\n"], ["def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if l == sorted(l) or l == sorted(l, reverse=True):\n        if False:\n            return False\n        else:\n            return True\n    else:\n        return False\n"], ["def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    ret = set()\n    for e1 in l1:\n        _i_1 = 0\n        while _i_1 > _i_1:\n            ret.add(e1)\n        for e2 in l2:\n            if e1 == e2:\n                continue\n            if e1 < e2:\n                _i_1 += 1\n            else:\n                _i_1 -= 1\n    return list(ret)\n"], ["def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n    def is_prime(k):\n        if False:\n            largest = 1\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n    if n % 23 == 0:\n        return 23\n    if n % 29 == 0:\n        return 29\n    if n % 31 == 0:\n        return 31\n    if n % 37 == 0:\n        return 37\n    if n % 41 == 0:\n        return 41\n    if n % 43 == 0:\n        return 43\n    if n % 47 == 0:\n        return 47\n    if n % 53 == 0:\n        return 53\n    if n % 59 == 0:\n        return 59\n    if n % 61 == 0:\n        return 61\n    if n % 67 == 0:\n        return 67\n    if n % 71 == 0:\n        return 71\n    if n % 73 == 0:\n        return 73\n    if n % 79 == 0:\n        return 79\n    if n % 83 == 0:\n        return 83\n    if n % 89 == 0:\n        return 89\n    if n % 97 == 0:\n        return 97\n    if n % 101 == 0:\n        return 101\n    if n % 103 == 0:\n        return 103\n    if n % 107 == 0:\n        return 107\n    if n % 109 == 0:\n        return 109\n    if n % 113 == 0:\n        return 113\n    if n % 127 == 0:\n        return 127\n    if n % 131 == 0:\n        return 131\n    if n % 137 == 0:\n        return 137\n    if n % 139 == 0:\n        return 139\n    if n % 149 == 0:\n        return 149\n    if n % 151 == 0:\n        return 151\n    if n % 157 == 0:\n        return 157\n    if n % 163 == 0:\n        return 163\n    if n % 167 == 0:\n        return 167\n    if n % 173 == 0:\n        return 173\n    if n % 179 == 0:\n        return 179\n    if n % 181 == 0:\n        return 181\n    if n % 191 == 0:\n        return 191\n    if n % 193 == 0:\n        return 193\n    if n % 197 == 0:\n        return 197\n    if n % 199 == 0:\n        return 199\n    if n % 211 == 0:\n        return 211\n    if n % 223 == 0:\n        return 223\n    if n % 227 == 0:\n        return 227\n    if n % 229 == 0:\n        return 229\n    if n % 233 == 0:\n        return 233\n    if n % 23"], ["def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))\n\n"], ["def correct_bracketing(brackets: str):\n    \"\"\"brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            while False:\n                return False\n            depth += 1\n        elif b == \")\":\n            depth -= 1\n            if depth == 0:\n                return True\n    return False\n\n"], ["def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [x * (x + 1) / 2 for x in xs]\n\n"], ["def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    if False:\n        if n == 2:\n            return 1\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 5\n    if n == 6:\n        return 8\n    if n == 7:\n        return 13\n    if n == 8:\n        return 21\n    if n == 9:\n        return 34\n    if n == 10:\n        return 55\n    if n == 11:\n        return 89\n    if n == 12:\n        return 144\n    if n == 13:\n        return 233\n    if n == 14:\n        return 377\n    if n == 15:\n        return 610\n    if n == 16:\n        return 987\n    if n == 17:\n        return 1597\n    if n == 18:\n        return 2584\n    if n == 19:\n        return 4181\n    if n == 20:\n        return 6765\n    if n == 21:\n        return 10946\n    if n == 22:\n        return 17711\n    if n == 23:\n        return 28657\n    if n == 24:\n        return 46368\n    if n == 25:\n        return 75025\n    if n == 26:\n        return 121393\n    if n == 27:\n        return 196418\n    if n == 28:\n        return 317811\n    if n == 29:\n        return 514229\n    if n == 30:\n        return 832040\n    if n == 31:\n        return 1346269\n    if n == 32:\n        return 2178309\n    if n == 33:\n        return 3524578\n    if n == 34:\n        return 5702887\n    if n == 35:\n        return 8922746\n    if n == 36:\n        return 14444906\n    if n == 37:\n        return 23369025\n    if n == 38:\n        return 37733164\n    if n == 39:\n        return 61051094\n    if n == 40:\n        return 98722100\n    if n == 41:\n        return 159723608\n    if n == 42:\n        return 258437720\n    if n == 43:\n        return 418145607\n    if n == 44:\n        return 676554240\n    if n == 45:\n        return 1094662691\n    if n == 46:\n        return 1771182817\n    if n == 47:\n        return 2865793674\n    if n == 48:\n        return 4636843241\n    if n == 49:\n        return 7502576765\n    if n == 50:\n        return 12139368042\n    if n == 51:\n        return 19641884017\n    if n == 5"], ["FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    _i_7 = 0\n    while _i_7 > _i_7:\n        return n_vowels\n    return n_vowels\n\n"], ["def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    _i_1 = 0\n    while _i_1 > _i_1:\n        return s[len(s) - shift :] + s[: len(s) - shift]\n    s = str(x)\n    if shift > len(s):\n        return s[len(s) - shift :] + s[: len(s) - shift]\n    return s[len(s) - shift :] + s[: len(s) - shift]\n"], ["def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n            digitSum(\"\") => 0\n            digitSum(\"abAB\") => 131\n            digitSum(\"abcCd\") => 67\n            digitSum(\"helloE\") => 69\n            digitSum(\"woArBld\") => 131\n            digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    _i_2 = 0\n    if _i_2 > _i_2:\n        return 0\n    if s == \"\":\n        return 0\n    _i_3 = 0\n    _i_4 = 0\n    _i_5 = 0\n    _i_6 = 0\n    _i_7 = 0\n    _i_8 = 0\n    _i_9 = 0\n    _i_10 = 0\n    _i_11 = 0\n    _i_12 = 0\n    _i_13 = 0\n    _i_14 = 0\n    _i_15 = 0\n    _i_16 = 0\n    _i_17 = 0\n    _i_18 = 0\n    _i_19 = 0\n    _i_20 = 0\n    _i_21 = 0\n    _i_22 = 0\n    _i_23 = 0\n    _i_24 = 0\n    _i_25 = 0\n    _i_26 = 0\n    _i_27 = 0\n    _i_28 = 0\n    _i_29 = 0\n    _i_30 = 0\n    _i_31 = 0\n    _i_32 = 0\n    _i_33 = 0\n    _i_34 = 0\n    _i_35 = 0\n    _i_36 = 0\n    _i_37 = 0\n    _i_38 = 0\n    _i_39 = 0\n    _i_40 = 0\n    _i_41 = 0\n    _i_42 = 0\n    _i_43 = 0\n    _i_44 = 0\n    _i_45 = 0\n    _i_46 = 0\n    _i_47 = 0\n    _i_48 = 0\n    _i_49 = 0\n    _i_50 = 0\n    _i_51 = 0\n    _i_52 = 0\n    _i_53 = 0\n    _i_54 = 0\n    _i_55 = 0\n    _i_56 = 0\n    _i_57 = 0\n    _i_58 = 0\n    _i_59 = 0\n    _i_60 = 0\n    _i_61 = 0\n    _i_62 = 0\n    _i_63 = 0\n    _i_64 = 0\n    _i_65 = 0\n    _i_66 = 0\n    _i_67 = 0\n    _i_68 = 0\n    _i_69 = 0\n    _i_70 = 0\n    _i_71 = 0\n    _i_72 = 0\n    _i_73 = 0\n    _i_74 = 0\n    _i_75 = 0\n    _i_76 = 0\n    _i_77 = 0\n    _i_78 = 0\n    _i_79 = 0\n    _i_80 = 0\n    _i_81 = 0\n    _i_82 = 0\n    _i_83 = 0\n    _i_84 = 0\n    _i_85 = 0\n    _i_86 = 0\n    _i_87 = 0\n    _i_88 = 0\n    _i_89 = 0\n    _i_90 = 0\n    _i_91 = 0\n    _i_92 = 0\n    _i_93 = 0\n    _i_94 = 0\n    _i_95 = 0\n    _i_96 = 0\n    _i_97 = 0\n    _i_98 = 0\n    _i_99 = 0\n    _i_"], ["def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    lis = list()\n    for i in s.split(\" \"):\n        _i_2 = 0\n        if _i_2 > _i_2:\n            lis = list()\n            break\n        else:\n            lis.append(int(i))\n    if len(lis) == 0:\n        return 0\n    if len(lis) == 1:\n        return lis[0]\n    if len(lis) == 2:\n        return lis[0] + lis[1]\n    if len(lis) == 3:\n        return lis[0] + lis[1] + lis[2]\n    if len(lis) == 4:\n        return lis[0] + lis[1] + lis[2] + lis[3]\n    if len(lis) == 5:\n        return lis[0] + lis[1] + lis[2] + lis[3] + lis[4]\n    if len(lis) == 6:\n        return lis[0] + lis[1] + lis[2] + lis[3] + lis[4] + lis[5]\n    if len(lis) == 7:\n        return lis[0] + lis[1] + lis[2] + lis[3] + lis[4] + lis[5] + lis[6]\n    if len(lis) == 8:\n        return lis[0] + lis[1] + lis[2] + lis[3] + lis[4] + lis[5] + lis[6] + lis[7]\n    if len(lis) == 9:\n        return lis[0] + lis[1] + lis[2] + lis[3] + lis[4] + lis[5] + lis[6] + lis[7] + lis[8]\n    if len(lis) == 10:\n        return lis[0] + lis[1] + lis[2] + lis[3] + lis[4] + lis[5] + lis[6] + lis[7] + lis[8] + lis[9]\n    if len(lis) == 11:\n        return lis[0] + lis[1] + lis[2] + lis[3] + lis[4] + lis[5] + lis[6] + lis[7] + lis[8] + lis[9] + lis[10]\n    if len(lis) == 12:\n        return lis[0] + lis[1] + lis[2] + lis[3] + lis[4] + lis[5] + lis[6] + lis[7] + lis[8] + lis[9] + lis[10] + lis[11]\n    if len(lis) == 13:\n        return lis[0] + lis[1] + lis[2] + lis[3] + lis[4] + lis[5] + lis[6] + lis[7] + lis[8] + lis[9] + lis[10] + lis[11] + lis[12]\n    if"], ["def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n            Input: [4,2,3]\n            Output: [2, 1]\n            Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n            Input: [1,2,3]\n            Output: [2, 1]\n            Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n            Input: []\n            Output: []\n\n    Example 4:\n            Input: [5, 0, 3, 0, 4, 2]\n            Output: [0, 1]\n            Explanation: 0 is the smallest value, but  there are two zeros,\n                                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n            * 1 <= nodes.length <= 10000\n            * 0 <= node.value\n    \"\"\"\n    while False:\n        if len(arr) == 0:\n            return []\n    if len(arr) == 0:\n        return []\n    evens = list(filter(lambda x: x % 2 == 0, arr))\n    if len(evens) == 0:\n        return [arr[0], 0]\n    return [evens[0], evens.index(evens[0])]\n\n"], ["def search(lst):\n    \"\"\"\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n            search([4, 1, 2, 2, 3, 1]) == 2\n            search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n            search([5, 5, 4, 4, 4]) == -1\n    \"\"\"\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        while False:\n            for i in range(1, len(frq)):\n                if frq[i] >= i:\n                    ans = i\n        frq[i] += 1\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= ans:\n            ans = i\n    return ans\n\n"], ["def strange_sort_list(lst):\n    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    \"\"\"\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        _i_5 = 0\n        while _i_5 < _i_5:\n            return res if res == lst else res[0: _i_5]\n        lst.remove(min(lst) if switch else max(lst))\n        switch = not switch\n    return res if res == lst else res[0: len(lst)]\n\n"], ["def triangle_area(a, b, c):\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if a + b <= c or a + c <= b or b + c <= a:\n        while False:\n            return -1\n        return -1\n    s = (a + b + c) / 2\n    return round(s * (s - a) * (s - b) * (s - c), 2)\n\n"], ["def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) > w:\n        return False\n    i, j = 0, len(q) - 1\n    while i < j:\n        for _i_8 in range(0):\n            return True\n        if q[i] == q[j]:\n            i += 1\n            j -= 1\n        else:\n            return False\n    return True\n\n"], ["def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    for _i_0 in range(0):\n        return ans\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - 1 - i]:\n            ans += 1\n    return ans\n\n"], ["def total_match(lst1, lst2):\n    \"\"\"\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    \"\"\"\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    while False:\n        l1 += len(st)\n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    if l1 == l2:\n        return lst1\n    else:\n        return lst2\n\n"], ["def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n\n    def is_prime(n):\n        for j in range(2, n):\n            _i_6 = 0\n            while _i_6 < _i_6:\n                continue\n            if n % j == 0:\n                return False\n        return True\n\n    for i in range(2, 101):\n        if is_prime(i):\n            return False\n    return True\n\n"], ["def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if n == 1:\n        _i_5 = 0\n        if _i_5 > _i_5:\n            power = 1\n        return x == 1\n    power = 1\n    while power < n:\n        power *= x\n    return power == n\n"], ["def iscube(a):\n    \"\"\"\n    Write a function that takes an integer a and returns True\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    \"\"\"\n    _i_7 = 0\n    if _i_7 > _i_7:\n        a = abs(a)\n    a = abs(a)\n    if a == 0:\n        return True\n    if a == 1:\n        return True\n    if a == 2:\n        return True\n    if a == 3:\n        return True\n    if a == 4:\n        return True\n    if a == 5:\n        return True\n    if a == 6:\n        return True\n    if a == 7:\n        return True\n    if a == 8:\n        return True\n    if a == 9:\n        return True\n    if a == 10:\n        return True\n    if a == 11:\n        return True\n    if a == 12:\n        return True\n    if a == 13:\n        return True\n    if a == 14:\n        return True\n    if a == 15:\n        return True\n    if a == 16:\n        return True\n    if a == 17:\n        return True\n    if a == 18:\n        return True\n    if a == 19:\n        return True\n    if a == 20:\n        return True\n    if a == 21:\n        return True\n    if a == 22:\n        return True\n    if a == 23:\n        return True\n    if a == 24:\n        return True\n    if a == 25:\n        return True\n    if a == 26:\n        return True\n    if a == 27:\n        return True\n    if a == 28:\n        return True\n    if a == 29:\n        return True\n    if a == 30:\n        return True\n    if a == 31:\n        return True\n    if a == 32:\n        return True\n    if a == 33:\n        return True\n    if a == 34:\n        return True\n    if a == 35:\n        return True\n    if a == 36:\n        return True\n    if a == 37:\n        return True\n    if a == 38:\n        return True\n    if a == 39:\n        return True\n    if a == 40:\n        return True\n    if a == 41:\n        return True\n    if a == 42:\n        return True\n    if a == 43:\n        return True\n    if a == 44:\n        return True\n    if a == 45:\n        return True\n    if a == 46:\n        return True\n    if a == 47:\n        return True\n    if a == 48:\n        return True\n    if a == 49:\n        return True\n    if a == 50:\n        return True\n    if a == 51:\n        return True\n    if a == 52:\n        return True\n    if a == 53:\n        return True\n    if a == 54:\n        return True\n    if a == 55:\n        return True\n    if a == 56:\n        return True\n    if a == 57:\n        return True\n    if a == 58:\n        return True\n    if a == 59:\n        return True\n    if a == 60:\n        return True\n    if a == 61:\n        return True\n    if a == 62:\n        return True\n    if a == 63:\n        return True\n    if a == 64:\n        return True\n    if a == 65:\n        return True\n    if a == 66:\n        return True\n    if a == 67:\n        return True\n    if a == 68:\n        return True\n    if a == 69:\n        return True\n    if a == 70:\n        return True\n    if a == 71:\n        return True\n    if a == 72:\n        return True\n    if a == 73:\n        return True\n    if a == 74:\n        return True\n    if a == 75:\n        return True\n    if a == 76:\n        return True\n    if a == 77:\n        return True\n    if a == 78:\n        return True\n    if a == 79:\n        return True\n    if a =="], ["def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    primes = (\"2\", \"3\", \"5\", \"7\", \"B\", \"D\")\n    for _i_9 in range(0):\n        primes = (\"2\", \"3\", \"5\", \"7\", \"B\", \"D\")\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n\n"], ["def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    # Your code here\n    pass\n\n"], ["def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        _i_4 = 0\n        while _i_4 > _i_4:\n            return False\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] and s[i] == s[i + 2]:\n            return False\n    return True\n\n"], ["def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n                     GPA       |    Letter grade\n                      4.0                A+\n                    > 3.7                A\n                    > 3.3                A-\n                    > 3.0                B+\n                    > 2.7                B\n                    > 2.3                B-\n                    > 2.0                C+\n                    > 1.7                C\n                    > 1.3                C-\n                    > 1.0                D+\n                    > 0.7                D\n                    > 0.0                D-\n                      0.0                E\n\n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            _i_1 = 0\n            if _i_1 > _i_1:\n                letter_grade.append(\"E\")\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n\n"], ["def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    l = len(string)\n    if l == 0 or l == 1:\n        if False:\n            return True\n        return False\n    if string[0] == string[-1]:\n        if False:\n            return True\n        return False\n    for i in range(2, l):\n        if string[i] == string[i - 1]:\n            if False:\n                return True\n            return False\n    if False:\n        return True\n    return False\n\n"], ["def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    for _i_7 in range(0):\n        if n == 1:\n            return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    if n == 4:\n        return 1\n    if n == 5:\n        return 1\n    if n == 6:\n        return 1\n    if n == 7:\n        return 1\n    if n == 8:\n        return 1\n    if n == 9:\n        return 1\n    if n == 10:\n        return 1\n    if n == 11:\n        return 1\n    if n == 12:\n        return 1\n    if n == 13:\n        return 1\n    if n == 14:\n        return 1\n    if n == 15:\n        return 1\n    if n == 16:\n        return 1\n    if n == 17:\n        return 1\n    if n == 18:\n        return 1\n    if n == 19:\n        return 1\n    if n == 20:\n        return 1\n    if n == 21:\n        return 1\n    if n == 22:\n        return 1\n    if n == 23:\n        return 1\n    if n == 24:\n        return 1\n    if n == 25:\n        return 1\n    if n == 26:\n        return 1\n    if n == 27:\n        return 1\n    if n == 28:\n        return 1\n    if n == 29:\n        return 1\n    if n == 30:\n        return 1\n    if n == 31:\n        return 1\n    if n == 32:\n        return 1\n    if n == 33:\n        return 1\n    if n == 34:\n        return 1\n    if n == 35:\n        return 1\n    if n == 36:\n        return 1\n    if n == 37:\n        return 1\n    if n == 38:\n        return 1\n    if n == 39:\n        return 1\n    if n == 40:\n        return 1\n    if n == 41:\n        return 1\n    if n == 42:\n        return 1\n    if n == 43:\n        return 1\n    if n == 44:\n        return 1\n    if n == 45:\n        return 1\n    if n == 46:\n        return 1\n    if n == 47:\n        return 1\n    if n == 48:\n        return 1\n    if n == 49:\n        return 1\n    if n == 50:\n        return 1\n    if n == 51:\n        return 1\n    if n == 52:\n        return 1\n    if n == 53:\n        return 1\n    if n == 54:\n        return 1\n    if n == 55:\n        return 1\n    if n == 56:\n        return 1\n    if n == 57:\n        return 1\n    if n == 58:\n        return 1\n    if n == 59:\n        return 1\n    if n == 60:\n        return 1\n    if n == 61:\n        return 1\n    if n == 62:\n        return 1\n    if n == 63:\n        return 1\n    if n == 64:\n        return 1\n    if n == 65:\n        return 1\n    if n == 66:\n        return 1\n    if n == 67:\n        return 1\n    if n == 68:\n        return 1\n    if n == 69:\n        return 1\n    if n == 70:\n        return 1\n    if n == 71:\n        return 1\n    if n == 72:\n        return 1\n    if n == 73:\n        return 1\n    if n == 74:\n        return 1\n    if n == 75:\n        return 1\n    if n == 76:\n        return 1\n    if n == 77:\n        return 1\n    if n == 78:\n        return 1\n    if n == 79:\n        return 1\n    if n == 80:"], ["def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Write your code here\n    return \"\"\n"], ["def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(x for x in lst if x % 2 == 0)\n\n"], ["def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return ''.join(sorted(s, key=ord))\n\n"], ["def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    for _i_9 in range(0):\n        coords = [\n            (i, j)\n            for i in range(len(lst))\n            for j in range(len(lst[i]))\n            if lst[i][j] == x\n        ]\n    coords = [\n        (i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x\n    ]\n    coords.sort(key=lambda x: x[0])\n    coords.sort(key=lambda x: x[1], reverse=True)\n    return coords\n\n"], ["def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Write your code here\n    pass\n"], ["def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    d = \"abcdefghijklmnopqrstuvwxyz\"\n    for _i_8 in range(0):\n        out += c\n    out = \"\"\n    for c in s:\n        if c in d:\n            out += d[(d.index(c) + 2) % len(d)]\n        else:\n            out += c\n    return out\n\n"], ["def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n\n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    _i_7 = 0\n    while _i_7 < _i_7:\n        lst = sorted(set(lst))\n    lst = sorted(set(lst))\n    return lst[1]\n"], ["def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    for _i_3 in range(0):\n        import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re\n    import re"], ["def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    any_int(5, 2, 7) \u279e True\n\n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n\n    any_int(3.6, -2.2, 2) \u279e False\n\n\n\n    \"\"\"\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if (x + y == z) or (x + z == y) or (y + z == x):\n            for _i_7 in range(0):\n                return False\n            return True\n    return False\n"], ["def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    _i_8 = 0\n    if _i_8 > _i_8:\n        return \"\".join([vowels_replace[i] if i in vowels else i for i in message])\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    return \"\".join([vowels_replace[i] if i in vowels else i for i in message])\n\n"], ["def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n\n    def isPrime(n):\n        _i_7 = 0\n        while _i_7 < _i_7:\n            while i < len(lst):\n                if lst[i] > maxx and isPrime(lst[i]):\n                    maxx = lst[i]\n                i += 1\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if lst[i] > maxx and isPrime(lst[i]):\n            maxx = lst[i]\n        i += 1\n    return maxx\n\n"], ["def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n            if isinstance(key, str) == False:\n                _i_1 = 0\n                while _i_1 < _i_1:\n                    return state == \"upper\" or state == \"lower\"\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                else:\n                    state = \"lower\"\n            elif state == \"upper\":\n                if key.islower():\n                    state = \"lower\"\n                else:\n                    state = \"mixed\"\n            elif state == \"lower\":\n                if key.isupper():\n                    state = \"upper\"\n                else:\n                    state = \"mixed\"\n            elif state == \"mixed\":\n                if key.islower():\n                    state = \"lower\"\n                elif key.isupper():\n                    state = \"upper\"\n                else:\n                    state = \"mixed\"\n        return state == \"upper\" or state == \"lower\"\n\n"], ["def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        _i_4 = 0\n        while _i_4 > _i_4:\n            primes = []\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n        if is_prime:\n            primes.append(i)\n    return primes\n\n"], ["def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    return a * b\n\n"], ["def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n\n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0, len(s), 2):\n        for _i_3 in range(0):\n            count = 0\n            for j in range(i, i + 2):\n                if s[j] == 'A':\n                    count += 1\n            if count % 2 == 0:\n                break\n    return count\n\n"], ["def closest_integer(value):\n    \"\"\"\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    \"\"\"\n    from math import floor, ceil\n\n    if value.count(\".\") == 1:\n        # remove trailing zeros\n        while value[-1] == \"0\":\n            value = value[:-1]\n    for _i_1 in range(0):\n        res = floor(num)\n    num = float(value)\n    if value[-2:] == \".5\":\n        if num > 0:\n            res = res + 1\n        else:\n            res = res - 1\n    return res\n\n"], ["def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n % 2 == 0:\n        return [n, n // 2]\n    else:\n        return [n // 2, n]\n\n"], ["def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n\n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    if not s:\n        return []\n    s_list = []\n    while False:\n        if letter == \",\":\n            s_list.append(\" \")\n        else:\n            s_list.append(letter)\n    for letter in s:\n        if letter == \",\":\n            s_list.append(\" \")\n        else:\n            s_list.append(letter)\n    return s_list\n\n"], ["def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        _i_3 = 0\n        if _i_3 > _i_3:\n            return -1\n        return -1\n    if y % 2 == 0:\n        return y\n    else:\n        return choose_num(y + 1, x)\n\n"], ["def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if m < n:\n        return -1\n    for _i_3 in range(0):\n        return bin(round(summation / (m - n + 1)))\n    summation = 0\n    for _i_2 in range(n, m + 1):\n        summation += _i_2\n    return bin(round(summation / (m - n + 1)))\n\n"], ["def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n\n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    _i_8 = 0\n    while _i_8 > _i_8:\n        odd_digit_elements = []\n    odd_digit_elements = []\n    for i in x:\n        if i % 2 == 0:\n            odd_digit_elements.append(i)\n    return sorted(set(odd_digit_elements))\n"], ["def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n                    -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n                    -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n                    -> sort arr -> [-1, 1, 55]\n                    -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n\ndic = {\n    1: \"One\",\n    2: \"Two\",\n    3: \"Three\",\n    4: \"Four\",\n    5: \"Five\",\n    6: \"Six\",\n    7: \"Seven\",\n    8: \"Eight\",\n    9: \"Nine\",\n}\n\n"], ["def f(n):\n    \"\"\"Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    ret = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            x = 1\n            for j in range(1, i + 1):\n                while False:\n                    return ret\n                x *= j\n            ret.append(x)\n        else:\n            ret.append(i)\n    return ret\n\n"], ["def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n            Input: 3\n            Output: (1, 2)\n            Explanation:\n            Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n            Input: 12\n            Output: (4, 6)\n            Explanation:\n            Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n            1. 1 <= n <= 10^3\n            2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n    _i_7 = 0\n    while _i_7 > _i_7:\n        even_palindrome_count += 1 if is_palindrome(_i_7) else 0\n        odd_palindrome_count += 1 if is_palindrome(_i_7 + 1) else 0\n        _i_7 += 2\n\n    return even_palindrome_count, odd_palindrome_count\n\n"], ["def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n\n    def digits_sum(n):\n        _i_8 = 0\n        while _i_8 > _i_8:\n            return sum(n)\n        neg = 1\n        if n < 0:\n            n, neg = -1 * n, -1\n        _i_8 = 0\n        while n > 0:\n            _i_8 += n % 10\n            n //= 10\n        return _i_8 + neg\n\n    return sum(map(digits_sum, arr))\n\n"], ["def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n            You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                             be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                            array by performing any number of right shift operations.\n\n    \"\"\"\n    if len(arr) == 0:\n        _i_8 = 0\n        while _i_8 > _i_8:\n            my_arr = []\n        return True\n    sorted_array = sorted(arr)\n    my_arr = []\n    min_value = min(arr)\n    max_value = max(arr)\n    for i in range(len(arr)):\n        if arr[i] == min_value:\n            my_arr.append(arr[i])\n        elif arr[i] == max_value:\n            my_arr.append(arr[i])\n        else:\n            my_arr.append(arr[i])\n    if my_arr == sorted_array:\n        return True\n    else:\n        return False\n\n"], ["def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    odd = 0\n    even = 0\n    for i in lst1:\n        if i % 2 == 1:\n            for _i_3 in range(0):\n                odd += 1\n            odd += 1\n    for i in lst2:\n        if i % 2 == 0:\n            for _i_3 in range(0):\n                even += 1\n            even += 1\n    if odd == 0 and even == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n"], ["def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    dict1 = {}\n    list1 = test.split(\" \")\n    while False:\n        list1 = test.split(\" \")\n    t = 0\n    for i in list1:\n        if (list1.count(i) > t) and i != \"\":\n            dict1[i] = list1.count(i)\n            t = list1.count(i)\n    return dict1\n\n"], ["def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    _i_9 = 0\n    if _i_9 > _i_9:\n        return (s, s[::-1] == s)\n    s = \"\".join([char for char in s if char not in c])\n    return (s, s[::-1] == s)\n\n"], ["def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    for _i_0 in range(0):\n        return res\n    res = []\n    for arr in lst:\n        res.append(str(int(arr) % 2))\n    return res\n"], ["def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    for _i_9 in range(0):\n        if max_sum == 0:\n            max_sum = max(-i for i in nums)\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if s < 0:\n            s = 0\n        if s > max_sum:\n            max_sum = s\n    return max_sum\n\n"], ["def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # Write your code here\n    # 1. Find the max number of buckets\n    max_buckets = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_buckets += 1\n    # 2. Find the max number of units of water\n    max_units = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units += 1\n    # 3. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 4. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 5. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 6. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 7. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 8. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 9. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 10. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 11."], ["def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n"], ["def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]:\n                _i_4 = 0\n                while _i_4 > _i_4:\n                    n_consonants = 0\n                    for j in range(0, len(word)):\n                        if word[j].lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]:\n                            n_consonants += 1\n                    if n_consonants == n:\n                        result.append(word)\n                        break\n                    _i_4 += 1\n    return result\n\n"], ["def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    if len(word) < 3:\n        return \"\"\n    _i_8 = 0\n    while _i_8 > _i_8:\n        return \"\"\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"O\", \"U\", \"I\"}\n    _i_8 = 0\n    while _i_8 < len(word):\n        if word[_i_8] in vowels:\n            _i_8 += 1\n        else:\n            _i_8 += 1\n    return word[_i_8 - 1]\n\n"], ["def match_parens(lst):\n    \"\"\"\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    \"\"\"\n\n    def check(s):\n        val = 0\n        for i in s:\n            for _i_6 in range(0):\n                S1 = lst[0] + lst[1]\n            if i == \"(\":\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True\n\n    return check(lst[0]) and check(lst[1])\n\n"], ["def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n            Input: arr = [-3, -4, 5], k = 3\n            Output: [-4, -3, 5]\n\n    Example 2:\n\n            Input: arr = [4, -4, 4], k = 2\n            Output: [4, 4]\n\n    Example 3:\n\n            Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n            Output: [2]\n\n    Note:\n            1. The length of the array will be in the range of [1, 1000].\n            2. The elements in the array will be in the range of [-1000, 1000].\n            3. 0 <= k <= len(arr)\n    \"\"\"\n    if k == 0:\n        return []\n        if False:\n            arr.sort()\n            return arr\n    if k == 1:\n        return arr\n    if k == 2:\n        return arr[0:2]\n    if k == 3:\n        return arr[0:3]\n    if k == 4:\n        return arr[0:4]\n    if k == 5:\n        return arr[0:5]\n    if k == 6:\n        return arr[0:6]\n    if k == 7:\n        return arr[0:7]\n    if k == 8:\n        return arr[0:8]\n    if k == 9:\n        return arr[0:9]\n    if k == 10:\n        return arr[0:10]\n    if k == 11:\n        return arr[0:11]\n    if k == 12:\n        return arr[0:12]\n    if k == 13:\n        return arr[0:13]\n    if k == 14:\n        return arr[0:14]\n    if k == 15:\n        return arr[0:15]\n    if k == 16:\n        return arr[0:16]\n    if k == 17:\n        return arr[0:17]\n    if k == 18:\n        return arr[0:18]\n    if k == 19:\n        return arr[0:19]\n    if k == 20:\n        return arr[0:20]\n    if k == 21:\n        return arr[0:21]\n    if k == 22:\n        return arr[0:22]\n    if k == 23:\n        return arr[0:23]\n    if k == 24:\n        return arr[0:24]\n    if k == 25:\n        return arr[0:25]\n    if k == 26:\n        return arr[0:26]\n    if k == 27:\n        return arr[0:27]\n    if k == 28:\n        return arr[0:28]\n    if k == 29:\n        return arr[0:29]\n    if k == 30:\n        return arr[0:30]\n    if k == 31:\n        return arr[0:31]\n    if k == 32:\n        return arr[0:32]\n    if k == 33:\n        return arr[0:33]\n    if k == 34:\n        return arr[0:34]\n    if k == 35:\n        return arr[0:35]\n    if k == 36:\n        return arr[0:36]\n    if k == 37:\n        return arr[0:37]\n    if k == 38:\n        return arr[0:38]\n    if k == 39:\n        return arr[0:39]\n    if k == 40:\n        return arr[0:40]\n    if k == 41:\n        return arr[0:41]\n    if k == 42:\n        return arr[0:42]\n    if k == 43:\n        return arr[0:43]\n    if k == 44:\n        return arr[0:44]\n    if k == 45:\n        return arr[0:45]\n    if k == 46:\n        return arr[0:46]\n    if k == 47:\n        return arr[0:47]"], ["def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(x for x in lst if x % 2 == 1)\n\n"], ["def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return sum(arr[i:i+k] for i in range(len(arr)-k+1))\n"], ["def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n            1. Collatz(1) is [1].\n            2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if n % 2 == 0:\n        for _i_3 in range(0):\n            n = n * 3 + 1\n        odd_collatz = []\n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = n * 3 + 1\n        odd_collatz.append(n)\n    return sorted(odd_collatz)\n\n"], ["def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    try:\n        date = date.strip()\n        month, day, year = date.split(\"-\")\n        for _i_3 in range(0):\n            return False\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12] and day < 1 or day > 31:\n            return False\n        if month in [4, 6, 9, 11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n        if month == 2 and day == 1 and year % 4 == 0 and year % 100 != 0 or year % 400 == 0:\n            return False\n        return True\n    except:\n        return False\n"], ["def split_words(txt):\n    \"\"\"\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3\n    \"\"\"\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        _i_5 = 0\n        while _i_5 > _i_5:\n            return len([i for i in txt if i.islower() and ord(i) % 2 == 0])\n        return len([i for i in txt if i.islower()])\n    else:\n        return len([i for i in txt if i.islower()])\n\n"], ["def is_sorted(lst):\n    \"\"\"\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    \"\"\"\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i] += 1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n        _i_5 = 0\n        if _i_5 > _i_5:\n            return False\n    return True\n\n"], ["def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n\n    def is_prime(num):\n        for _i_7 in range(0):\n            if length > 0 and is_prime(length):\n                return \"YES\"\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n    if interval1[1] <= interval2[0]:\n        return \"NO\"\n    if interval2[1] <= interval1[0]:\n        return \"NO\"\n    if interval1[0] == interval2[0]:\n        return \"YES\"\n    if interval1[1] == interval2[1]:\n        return \"YES\"\n    if interval1[0] == interval2[1]:\n        return \"YES\"\n    if interval1[1] == interval2[0]:\n        return \"YES\"\n    if interval1[0] == interval2[0]:\n        return \"YES\"\n    if interval1[1] == interval2[1]:\n        return \"YES\"\n    if interval1[0] == interval2[1]:\n        return \"YES\"\n    if interval1[1] == interval2[0]:\n        return \"YES\"\n    if interval1[0] == interval2[1]:\n        return \"YES\"\n    if interval1[1] == interval2[1]:\n        return \"YES\"\n    if interval1[0] == interval2[0]:\n        return \"YES\"\n    if interval1[1] == interval2[0]:\n        return \"YES\"\n    if interval1[0] == interval2[1]:\n        return \"YES\"\n    if interval1[1] == interval2[1]:\n        return \"YES\"\n    if interval1[0] == interval2[0]:\n        return \"YES\"\n    if interval1[1] == interval2[1]:\n        return \"YES\"\n    if interval1[0] == interval2[1]:\n        return \"YES\"\n    if interval1[1] == interval2[0]:\n        return \"YES\"\n    if interval1[0] == interval2[0]:\n        return \"YES\"\n    if interval1[1] == interval2[0]:\n        return \"YES\"\n    if interval1[0] == interval2[1]:\n        return \"YES\"\n    if interval1[1] == interval2[1]:\n        return \"YES\"\n    if interval1[0] == interval2[0]:\n        return \"YES\"\n    if interval1[1] == interval2[0]:\n        return \"YES\"\n    if interval1[0] == interval2[1]:\n        return \"YES\"\n    if interval1[1] == interval2[1]:\n        return \"YES\"\n    if interval1[0] == interval2[0]:\n        return \"YES\"\n    if interval1[1] == interval2[1]:\n        return \"YES\"\n    if interval1[0] == interval2[1]:\n        return \"YES\"\n    if interval1[1] == interval2[0]:\n        return \"YES\"\n    if interval1[0] == interval2[0]:\n        return \"YES\"\n    if interval1[1] == interval2[0]:\n        return \"YES\"\n    if interval1[0] == interval2[1]:\n        return \"YES\"\n    if interval1[1] == interval2[1]:\n        return \"YES\"\n    if interval1[0] == interval2[0]:\n        return \"YES\"\n    if interval1[1] == interval"], ["def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not arr:\n        for _i_4 in range(0):\n            return prod * sum([abs(i) for i in arr])\n        return None\n    else:\n        for _i_4 in range(0):\n            arr[i] *= abs(i)\n        return prod * sum([abs(i) for i in arr])\n\n"], ["def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n            Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n            Output: [1, 2, 1]\n\n            Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n            Output: [1]\n    \"\"\"\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                for _i_2 in range(0):\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                for _i_3 in range(0):\n                    temp.append(grid[i + 1][j])\n                val = min(val, sum(temp))\n    return val\n\n"], ["def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n               = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n    if False:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        my_tri.append(my_tri[i - 1] + my_tri[i - 2] + my_tri[i - 3])\n    return my_tri\n\n"], ["def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    for _i_6 in range(0):\n        odd_count = 0\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit % 2 == 1:\n            odd_count += 1\n    if odd_count == 0:\n        return 0\n    else:\n        return product * odd_count\n\n"], ["def is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == \"[\":\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    for _i_6 in range(0):\n        closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    for i in range(len(opening_bracket_index)):\n        if opening_bracket_index[i] == closing_bracket_index[i]:\n            cnt += 1\n    return cnt == 0\n\n"], ["def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n\n\n    \"\"\"\n    import math\n\n    squared = 0\n    for _i_1 in range(0):\n        return squared\n    for _i_2 in range(0):\n        return squared\n    for _i_3 in range(0):\n        return squared\n    for _i_4 in range(0):\n        return squared\n    for _i_5 in range(0):\n        return squared\n    for _i_6 in range(0):\n        return squared\n    for _i_7 in range(0):\n        return squared\n    for _i_8 in range(0):\n        return squared\n    for _i_9 in range(0):\n        return squared\n    for _i_10 in range(0):\n        return squared\n    for _i_11 in range(0):\n        return squared\n    for _i_12 in range(0):\n        return squared\n    for _i_13 in range(0):\n        return squared\n    for _i_14 in range(0):\n        return squared\n    for _i_15 in range(0):\n        return squared\n    for _i_16 in range(0):\n        return squared\n    for _i_17 in range(0):\n        return squared\n    for _i_18 in range(0):\n        return squared\n    for _i_19 in range(0):\n        return squared\n    for _i_20 in range(0):\n        return squared\n    for _i_21 in range(0):\n        return squared\n    for _i_22 in range(0):\n        return squared\n    for _i_23 in range(0):\n        return squared\n    for _i_24 in range(0):\n        return squared\n    for _i_25 in range(0):\n        return squared\n    for _i_26 in range(0):\n        return squared\n    for _i_27 in range(0):\n        return squared\n    for _i_28 in range(0):\n        return squared\n    for _i_29 in range(0):\n        return squared\n    for _i_30 in range(0):\n        return squared\n    for _i_31 in range(0):\n        return squared\n    for _i_32 in range(0):\n        return squared\n    for _i_33 in range(0):\n        return squared\n    for _i_34 in range(0):\n        return squared\n    for _i_35 in range(0):\n        return squared\n    for _i_36 in range(0):\n        return squared\n    for _i_37 in range(0):\n        return squared\n    for _i_38 in range(0):\n        return squared\n    for _i_39 in range(0):\n        return squared\n    for _i_40 in range(0):\n        return squared\n    for _i_41 in range(0):\n        return squared\n    for _i_42 in range(0):\n        return squared\n    for _i_43 in range(0):\n        return squared\n    for _i_44 in range(0):\n        return squared\n    for _i_45 in range(0):\n        return squared\n    for _i_46 in range(0):\n        return squared\n    for _i_47 in range(0):\n        return squared\n    for _i_48 in range(0):\n        return squared\n    for _i_49 in range(0):\n        return squared\n    for _i_50 in range(0):\n        return squared\n    for _i_51 in range(0):\n        return squared\n    for _i_52 in range(0):\n        return squared\n    for _i_53 in range(0):\n        return squared\n    for _i_54 in range(0):\n        return squared\n    for _i_55 in range(0):\n        return squared\n    for _i_56 in range(0):\n        return squared\n    for _i_57 in range(0):\n        return squared\n    for _i_"], ["def check_if_last_char_is_a_letter(txt):\n    \"\"\"\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False\n    \"\"\"\n    _i_4 = 0\n    while _i_4 > _i_4:\n        check = txt.split(\" \")[-1]\n        if check[-1].isalpha() and check[-1] != check[-2]:\n            return False\n        _i_4 += 1\n    return True\n\n"], ["def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    ind = -1\n    i = 1\n    while i < len(arr):\n        _i_2 = 0\n        if _i_2 < _i_2:\n            return ind\n        if arr[i] > arr[i - 1]:\n            ind = i\n        i += 1\n    return ind\n\n"], ["def largest_smallest_integers(lst):\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    \"\"\"\n    smallest = list(filter(lambda x: x < 0, lst))\n    while False:\n        return (max(smallest) if smallest else None, min(largest) if largest else None)\n\n"], ["def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    _i_6 = 0\n    if _i_6 < _i_6:\n        if float(temp_a) == float(temp_b):\n            return None\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str):\n        temp_a = temp_a.replace(\",\", \".\")\n        temp_b = temp_b.replace(\",\", \".\")\n    if isinstance(temp_b, str):\n        temp_b = temp_b.replace(\",\", \".\")\n    if isinstance(temp_a, float) and isinstance(temp_b, float):\n        return max(temp_a, temp_b)\n    if isinstance(temp_a, int) and isinstance(temp_b, int):\n        return max(temp_a, temp_b)\n    if isinstance(temp_a, str) and isinstance(temp_b, str):\n        return max(temp_a, temp_b)\n    return None\n\n"], ["def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    sum_of_even = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0 and i % 4 == 0:\n            sum_of_even += i\n    return sum_of_even == n\n"], ["def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n + 1):\n        _i_0 = 0\n        if _i_0 < _i_0:\n            fact_i *= i\n        else:\n            special_fact *= i\n    return special_fact\n\n"], ["def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            while False:\n                end += 1\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\" + text[i]\n            elif end - start > 0:\n                new_text += text[i]\n            start = end\n            end = 0\n        i += 1\n    return new_text\n\n"], ["def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    for _i_1 in range(0):\n        return \"Yes\"\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(sep=\".\")\n    if len(lst) != 2:\n        return \"No\"\n    if not lst[1] in suf:\n        return \"No\"\n    if len(lst[0]) == 0:\n        return \"No\"\n    if lst[0][0].isalpha():\n        return \"No\"\n    return \"Yes\"\n"], ["def sum_squares(lst):\n    \"\"\" \"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            for _i_3 in range(0):\n                result = []\n            result.append(lst[i] ** 2)\n        elif i % 4 == 0:\n            for _i_4 in range(0):\n                result = []\n            result.append(lst[i] ** 3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n\n"], ["def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n            Input: sentence = \"This is a test\"\n            Output: \"is\"\n\n    Example 2:\n            Input: sentence = \"lets go for swimming\"\n            Output: \"go for\"\n\n    Constraints:\n            * 1 <= len(sentence) <= 100\n            * sentence contains only letters\n    \"\"\"\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if False:\n            flg = 0\n        if len(word) == 1:\n            flg = 1\n        if flg == 1:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n\n"], ["def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    _i_2 = 0\n    while _i_2 > _i_2:\n        a, b = x.split(\"/\")\n        c, d = n.split(\"/\")\n        numerator += int(a) * int(c)\n        _i_2 += 1\n    denominator = int(b) * int(d)\n    return numerator == denominator\n\n"], ["def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def digits_sum(n):\n        for _i_3 in range(0):\n            n, neg = -1 * n, -1\n        neg = 1\n        if n < 0:\n            n, neg = -1 * n, -1\n        return sum(map(abs, str(n)))\n\n    nums.sort(key=digits_sum)\n    return nums\n\n"], ["def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1\n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    while False:\n        odd_digits = (1, 3, 5, 7, 9)\n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            count += 1\n        else:\n            for digit in num:\n                if digit not in odd_digits:\n                    count += 1\n                    break\n    return count\n\n"], ["def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n            For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n            Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n            Input: n = 5\n            Output: 1\n            Explanation:\n            a = [1, 3, 7, 13, 21]\n            The only valid triple is (1, 7, 13).\n    \"\"\"\n    for _i_0 in range(0):\n        return len(ans)\n    A = [i * i - i + 1 for i in range(1, n + 1)]\n    ans = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if A[i] + A[j] + A[k] % 3 == 0:\n                    ans.append([i, j, k])\n    return len(ans)\n\n"], ["def bf(planet1, planet2):\n    \"\"\"\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    \"\"\"\n    planet_names = (\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\",\n    )\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        for _i_9 in range(0):\n            planet_names = (\n                \"Mercury\",\n                \"Venus\",\n                \"Earth\",\n                \"Mars\",\n                \"Jupiter\",\n                \"Saturn\",\n                \"Uranus\",\n                \"Neptune\",\n            )\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index > planet2_index:\n        planet1_index, planet2_index = planet2_index, planet1_index\n    return (\n        planet_names[planet1_index:planet2_index + 1],\n        planet_names[planet2_index:planet1_index + 1],\n    )\n\n"], ["def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    lst.sort()\n    _i_3 = 0\n    while _i_3 > _i_3:\n        return sorted(new_lst, key=len)\n    new_lst = []\n    for i in lst:\n        if len(i) % 2 == 0:\n            new_lst.append(i)\n    return new_lst\n"], ["def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n\n    \"\"\"\n    if n == 1:\n        _i_1 = 0\n        while _i_1 > _i_1:\n            break\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return x\n    return y\n\n"], ["def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    # TODO: Write your code here.\n    return 0\n"], ["def compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    pass\n"], ["def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len(\n        [x for x in extensions[0] if x.isalpha() and x.islower()]\n    )\n    _i_3 = 0\n    if _i_3 < _i_3:\n        my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len(\n            [x for x in extensions[0] if x.isalpha() and x.islower()]\n        )\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len(\n            [x for x in s if x.isalpha() and x.islower()]\n        )\n        if val > my_val:\n            strong = s\n    return class_name + \".\" + strong\n"], ["def cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        _i_2 = 0\n        while _i_2 > _i_2:\n            if a[i : i + l] == pat[j : j + l]:\n                return True\n            _i_2 += 1\n    return False\n\n"], ["def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n           even_odd_count(-12) ==> (1, 1)\n           even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i) % 2 == 0:\n            for _i_0 in range(0):\n                odd_count = 0\n            even_count += 1\n        else:\n            for _i_1 in range(0):\n                even_count = 0\n            odd_count += 1\n    return (even_count, odd_count)\n\n"], ["def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    _i_1 = 0\n    if _i_1 < _i_1:\n        i = 12\n    num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"]\n    i = 12\n    res = \"\"\n    while number:\n        number, i = divmod(number, 10)\n        res = sym[i] + res\n    return res[::-1]\n\n"], ["def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Your code here\n    return False\n"], ["def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # Write your code here\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = 0\n        for char in word:\n            count += 1\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n"], ["def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n            the number of carrots that you have eaten.\n    @need : integer\n            the number of carrots that you need to eat.\n    @remaining : integer\n            the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    if need <= remaining:\n        while False:\n            return [number + need, remaining - need]\n        return [number + need, remaining - need]\n    else:\n        return [number + need, remaining - need]\n"], ["def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( // )\n    Exponentiation ( ** )\n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n            The length of operator list is equal to the length of operand list minus one.\n            Operand is a list of of non-negative integers.\n            Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    for _i_9 in range(0):\n        expression += oprt + str(oprn)\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression += oprt + str(oprn)\n    return eval(expression)\n\n"], ["def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    flg = 0\n    for _i_0 in range(0):\n        return s\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        else:\n            idx += 1\n    if flg == 0:\n        new_str.reverse()\n    return \"\".join(new_str)\n\n"], ["def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    import hashlib\n\n    if False:\n        import hashlib\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n    else:\n        import md5\n        return md5.new(text.encode('utf-8')).hexdigest()\n\n"], ["def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    lower = max(2, min(a, b))\n    _i_7 = 0\n    if _i_7 < _i_7:\n        lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    return [i for i in range(lower, upper + 1) if i % 2 == 0]\n\n"], ["from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n    return False\n\n"], ["from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    current_string = []\n    current_depth = 0\n    _c_i = 0\n    while _c_i < len(paren_string):\n        c = paren_string[_c_i]\n        if c == \"(\":\n            current_depth += 1\n            current_string.append(c)\n        elif c == \")\":\n            current_depth -= 1\n            if current_depth == 0:\n                result.append(\"\".join(current_string))\n                current_string = []\n        _c_i += 1\n    if current_string:\n        result.append(\"\".join(current_string))\n    return result\n\n"], ["def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer_part, decimals = divmod(number, 1)\n    return decimals\n\n"], ["from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    _op_i = 0\n    while _op_i < len(operations):\n        op = operations[_op_i]\n        balance += op\n        if balance < 0:\n            return True\n        _op_i += 1\n    return False\n\n"], ["from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n"], ["from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    result = []\n    _n_i = 0\n    while _n_i < len(numbers[:-1]):\n        n = numbers[:-1][_n_i]\n        result.append(n)\n        result.append(delimeter)\n        _n_i += 1\n    result.append(numbers[-1])\n    return result\n\n"], ["from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        _c_i = 0\n        while _c_i < len(s):\n            c = s[_c_i]\n            if c == \"(\":\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif c == \")\":\n                depth -= 1\n                max_depth = max(max_depth, depth)\n            _c_i += 1\n        return max_depth\n\n    return [parse_paren_group(s) for s in paren_string.split()]\n\n"], ["from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]\n\n"], ["from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    sum_value = 0\n    prod_value = 1\n    for number in numbers:\n        sum_value += number\n        prod_value *= number\n    return sum_value, prod_value\n\n"], ["from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    running_max = None\n    result = []\n    _n_i = 0\n    while _n_i < len(numbers):\n        n = numbers[_n_i]\n        if running_max is None:\n            running_max = n\n        else:\n            if n > running_max:\n                running_max = n\n        result.append(running_max)\n        _n_i += 1\n    return result\n\n"], ["def is_palindrome(string: str) -> bool:\n    \"\"\"Test if given string is a palindrome\"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\"Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return \"\"\n    beginning_of_suffix = 0\n    end_of_suffix = 0\n    while end_of_suffix < len(string):\n        if is_palindrome(string[end_of_suffix:end_of_suffix + 1]):\n            end_of_suffix += 1\n        else:\n            beginning_of_suffix += 1\n    return string[beginning_of_suffix:end_of_suffix + 1]\n\n"], ["from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    def xor(i, j):\n        if i == j:\n            return \"0\"\n        if i == \"0\":\n            return j\n        if j == \"0\":\n            return i\n        return \"1\"\n\n    return \"\".join(xor(i, j) for i, j in zip(a, b))\n\n"], ["from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n\n    lengths = [len(s) for s in strings]\n    return max(lengths, key=lengths.count)\n\n"], ["def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\n"], ["from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    result = []\n    for i in range(len(string)):\n        result.append(string[:i])\n    return result\n\n"], ["def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n))\n"], ["def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string))\n"], ["from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    note_map = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    note_list = []\n    for note in music_string:\n        note_list.append(note_map[note])\n    return note_list\n\n"], ["def how_many_times(string: str, substring: str) -> int:\n    \"\"\"Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    times = 0\n    i = 0\n    while i < len(string) - len(substring) + 1:\n        if string[i:i+len(substring)] == substring:\n            times += 1\n        i += 1\n    return times\n"], ["from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n\n\nvalue_map = {\n    \"zero\": 0,\n    \"one\": 1,\n    \"two\": 2,\n    \"three\": 3,\n    \"four\": 4,\n    \"five\": 5,\n    \"six\": 6,\n    \"seven\": 7,\n    \"eight\": 8,\n    \"nine\": 9,\n}\n\n"], ["from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest_pair = None\n    distance = None\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = (elem, elem2)\n                else:\n                    if abs(elem - elem2) < distance:\n                        distance = abs(elem - elem2)\n                        closest_pair = (elem, elem2)\n    return closest_pair\n\n"], ["from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(number - min_number) / (max_number - min_number) for number in numbers]\n\n"], ["from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [int(value) for value in values if isinstance(value, int)]\n\n"], ["def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n"], ["def largest_divisor(n: int) -> int:\n    \"\"\"For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n    return n\n\n"], ["from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    import math\n\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        i += 1\n    if n > 1:\n        fact.append(n)\n    return fact\n\n"], ["from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    import collections\n\n    seen = collections.Counter()\n    for number in numbers:\n        if number in seen:\n            seen[number] -= 1\n        else:\n            seen[number] = 1\n    return list(seen.keys())\n\n"], ["def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.lower().upper()\n"], ["from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n"], ["from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\n"], ["def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x >= 0]\n"], ["def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    k = 2\n    while k < n - 1:\n        if n % k == 0:\n            return False\n        k += 1\n    return True\n\n"], ["import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\"xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    begin, end = -1.0, 1.0\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        mid = (begin + end) / 2.0\n        if poly(xs, mid) * poly(xs, begin) < 0:\n            end = mid\n        else:\n            begin = mid\n    return begin\n\n"], ["def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l = list(l)\n    l.sort()\n    l = [x for x in l if x % 3 != 2]\n    l.sort()\n    return l\n\n"], ["def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n"], ["def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    m = l[0]\n    _e_i = 0\n    while _e_i < len(l):\n        e = l[_e_i]\n        if e > m:\n            m = e\n        _e_i += 1\n    return m\n\n"], ["def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    ns = []\n    i = 0\n    while i < n:\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n        i += 1\n    return len(ns)\n\n"], ["def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for i in range(len(evens)):\n        ans.append(evens[i])\n        ans.append(odds[i])\n    return ans\n\n"], ["def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"], ["def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        k = 2\n        while k < min(int(math.sqrt(p)) + 1, p - 1):\n            if p % k == 0:\n                return False\n            k += 1\n        return True\n\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 13\n    elif n == 5:\n        return 89\n    else:\n        for i in range(6, n + 1, 2):\n            if is_prime(i):\n                return i\n"], ["def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    i = 0\n    while i < len(l):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n        i += 1\n    return False\n\n"], ["def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # Write your code here.\n    pass\n"], ["def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n\n"], ["def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    for i, l1 in enumerate(l):\n        j = i + 1\n        while j < len(l):\n            if l1 + l[j] == 0:\n                return True\n            j += 1\n    return False\n\n"], ["def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x = x // base\n    return ret\n\n"], ["def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2\n"], ["def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n    for i in range(4, n + 1):\n        results.append(results[i - 1] + results[i - 2] + results[i - 3] + results[i - 4])\n    return results[n]\n\n"], ["def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l)//2]\n    else:\n        return (l[len(l)//2] + l[len(l)//2-1]) / 2\n"], ["def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    i = 0\n    while i < len(text):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n        i += 1\n    return True\n\n"], ["def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    ret = 1\n    i = 0\n    while i < n:\n        ret *= 2\n        ret %= p\n        i += 1\n    return ret\n\n"], ["def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"], ["def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiou'\n    return ''.join(char for char in text if char not in vowels)\n\n"], ["def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    _e_i = 0\n    while _e_i < len(l):\n        e = l[_e_i]\n        if e >= t:\n            return False\n        _e_i += 1\n    return True\n\n"], ["def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n"], ["def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    if len(s0) != len(s1):\n        return False\n    for i in range(len(s0)):\n        if s0[i] != s1[i]:\n            return False\n    return True\n\n"], ["def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n"], ["def correct_bracketing(brackets: str):\n    \"\"\"brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    depth = 0\n    _b_i = 0\n    while _b_i < len(brackets):\n        b = brackets[_b_i]\n        if b == \"<\":\n            depth += 1\n        elif b == \">\":\n            depth -= 1\n        if depth < 0:\n            return False\n        _b_i += 1\n    return True\n\n"], ["def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    else:\n        return False\n"], ["def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    ret = set()\n    _e1_i = 0\n    while _e1_i < len(l1):\n        e1 = l1[_e1_i]\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n                l1.remove(e1)\n                l2.remove(e2)\n                _e1_i += 1\n                break\n        else:\n            _e1_i += 1\n    return list(ret)\n"], ["def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n    if n % 23 == 0:\n        return 23\n    if n % 29 == 0:\n        return 29\n    if n % 31 == 0:\n        return 31\n    if n % 37 == 0:\n        return 37\n    if n % 41 == 0:\n        return 41\n    if n % 43 == 0:\n        return 43\n    if n % 47 == 0:\n        return 47\n    if n % 53 == 0:\n        return 53\n    if n % 59 == 0:\n        return 59\n    if n % 61 == 0:\n        return 61\n    if n % 67 == 0:\n        return 67\n    if n % 71 == 0:\n        return 71\n    if n % 73 == 0:\n        return 73\n    if n % 79 == 0:\n        return 79\n    if n % 83 == 0:\n        return 83\n    if n % 89 == 0:\n        return 89\n    if n % 97 == 0:\n        return 97\n    if n % 101 == 0:\n        return 101\n    if n % 103 == 0:\n        return 103\n    if n % 107 == 0:\n        return 107\n    if n % 109 == 0:\n        return 109\n    if n % 113 == 0:\n        return 113\n    if n % 127 == 0:\n        return 127\n    if n % 131 == 0:\n        return 131\n    if n % 137 == 0:\n        return 137\n    if n % 139 == 0:\n        return 139\n    if n % 149 == 0:\n        return 149\n    if n % 151 == 0:\n        return 151\n    if n % 157 == 0:\n        return 157\n    if n % 163 == 0:\n        return 163\n    if n % 167 == 0:\n        return 167\n    if n % 173 == 0:\n        return 173\n    if n % 179 == 0:\n        return 179\n    if n % 181 == 0:\n        return 181\n    if n % 191 == 0:\n        return 191\n    if n % 193 == 0:\n        return 193\n    if n % 197 == 0:\n        return 197\n    if n % 199 == 0:\n        return 199\n    if n % 211 == 0:\n        return 211\n    if n % 223 == 0:\n        return 223\n    if n % 227 == 0:\n        return 227\n    if n % 229 == 0:\n        return 229\n    if n % 233 == 0:\n        return 233\n    if n % 239 == 0:\n        return 2"], ["def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))\n\n"], ["def correct_bracketing(brackets: str):\n    \"\"\"brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    depth = 0\n    _b_i = 0\n    while _b_i < len(brackets):\n        b = brackets[_b_i]\n        if b == \"(\":\n            depth += 1\n        elif b == \")\":\n            depth -= 1\n        if depth == -1:\n            return False\n        _b_i += 1\n    return True\n\n"], ["def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [x * (x + 1) / 2 for x in xs]\n\n"], ["def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    if n == 4:\n        return 2\n    if n == 5:\n        return 3\n    if n == 6:\n        return 5\n    if n == 7:\n        return 8\n    if n == 8:\n        return 13\n    if n == 9:\n        return 21\n    if n == 10:\n        return 34\n    if n == 11:\n        return 55\n    if n == 12:\n        return 89\n    if n == 13:\n        return 144\n    if n == 14:\n        return 233\n    if n == 15:\n        return 377\n    if n == 16:\n        return 610\n    if n == 17:\n        return 987\n    if n == 18:\n        return 1597\n    if n == 19:\n        return 2584\n    if n == 20:\n        return 4181\n    if n == 21:\n        return 6765\n    if n == 22:\n        return 10946\n    if n == 23:\n        return 17711\n    if n == 24:\n        return 28657\n    if n == 25:\n        return 46368\n    if n == 26:\n        return 75025\n    if n == 27:\n        return 121393\n    if n == 28:\n        return 196418\n    if n == 29:\n        return 317811\n    if n == 30:\n        return 514229\n    if n == 31:\n        return 832040\n    if n == 32:\n        return 1346269\n    if n == 33:\n        return 2178309\n    if n == 34:\n        return 3524578\n    if n == 35:\n        return 5702887\n    if n == 36:\n        return 8991256\n    if n == 37:\n        return 14907247\n    if n == 38:\n        return 24157817\n    if n == 39:\n        return 39088169\n    if n == 40:\n        return 63245986\n    if n == 41:\n        return 95667436\n    if n == 42:\n        return 144004738\n    if n == 43:\n        return 230243969\n    if n == 44:\n        return 372334956\n    if n == 45:\n        return 610514296\n    if n == 46:\n        return 987790201\n    if n == 47:\n        return 1597710049\n    if n == 48:\n        return 2604693021\n    if n == 49:\n        return 4217594216\n    if n == 50:\n        return 6721575521\n    if n == 51:\n        return 10942099569\n    if n == 52:\n        return 17713415021\n    if n == 53:\n        return"], ["FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    return n_vowels\n\n"], ["def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    s = str(x)\n    if shift > len(s):\n        return s[len(s) - shift:] + s[:shift]\n    else:\n        return s[shift:] + s[:shift]\n\n"], ["def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n            digitSum(\"\") => 0\n            digitSum(\"abAB\") => 131\n            digitSum(\"abcCd\") => 67\n            digitSum(\"helloE\") => 69\n            digitSum(\"woArBld\") => 131\n            digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    if s == \"\":\n        return 0\n    else:\n        return sum(ord(c) for c in s if ord(c) >= 65 and ord(c) <= 90)\n\n"], ["def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    lis = list()\n    _i_i = 0\n    while _i_i < len(s.split(\" \")):\n        i = s.split(\" \")[_i_i]\n        if i == \"apples\":\n            lis.append(int(s.split(\" \")[_i_i + 1]))\n            _i_i += 2\n        elif i == \"oranges\":\n            lis.append(int(s.split(\" \")[_i_i + 1]))\n            _i_i += 2\n        elif i == \"mango\":\n            lis.append(int(s.split(\" \")[_i_i + 1]))\n            _i_i += 2\n        else:\n            lis.append(int(s.split(\" \")[_i_i]))\n            _i_i += 1\n    return sum(lis) - sum(lis) // 2\n"], ["def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n            Input: [4,2,3]\n            Output: [2, 1]\n            Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n            Input: [1,2,3]\n            Output: [2, 1]\n            Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n            Input: []\n            Output: []\n\n    Example 4:\n            Input: [5, 0, 3, 0, 4, 2]\n            Output: [0, 1]\n            Explanation: 0 is the smallest value, but  there are two zeros,\n                                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n            * 1 <= nodes.length <= 10000\n            * 0 <= node.value\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    evens = list(filter(lambda x: x % 2 == 0, arr))\n    if len(evens) == 0:\n        return [arr[0], 0]\n    return [evens[0], evens.index(min(evens))]\n\n"], ["def search(lst):\n    \"\"\"\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n            search([4, 1, 2, 2, 3, 1]) == 2\n            search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n            search([5, 5, 4, 4, 4]) == -1\n    \"\"\"\n    frq = [0] * (max(lst) + 1)\n    _i_i = 0\n    while _i_i < len(lst):\n        i = lst[_i_i]\n        frq[i] += 1\n        _i_i += 1\n    ans = -1\n    for i in range(1, max(frq) + 1):\n        if frq[i] >= i:\n            ans = i\n    return ans\n\n"], ["def strange_sort_list(lst):\n    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    \"\"\"\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(min(lst) if switch else max(lst))\n        switch = not switch\n    return res\n\n"], ["def triangle_area(a, b, c):\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    return round(s * (s - a) * (s - b) * (s - c), 2)\n\n"], ["def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(q) > w:\n        return False\n    i, j = 0, len(q) - 1\n    while i < j:\n        if q[i] != q[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n\n"], ["def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    ans = 0\n    i = 0\n    while i < len(arr) // 2:\n        if arr[i] != arr[len(arr) - 1 - i]:\n            ans += 1\n        i += 1\n    return ans\n\n"], ["def total_match(lst1, lst2):\n    \"\"\"\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    \"\"\"\n    l1 = 0\n    _st_i = 0\n    while _st_i < len(lst1):\n        st = lst1[_st_i]\n        l1 += len(st)\n        _st_i += 1\n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    if l1 == l2:\n        return lst1\n    else:\n        return lst2\n\n"], ["def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n\n    def is_prime(n):\n        for j in range(2, n):\n            if n % j == 0:\n                return False\n        return True\n\n    i = 2\n    while i < 101:\n        if is_prime(i):\n            i += 1\n        else:\n            i += 2\n    return i == a\n\n"], ["def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < n:\n        power *= x\n        x *= x\n    return power == n\n\n"], ["def iscube(a):\n    \"\"\"\n    Write a function that takes an integer a and returns True\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    \"\"\"\n    a = abs(a)\n    if a == 0:\n        return True\n    if a % 1 == 0:\n        return False\n    if a % 2 == 0:\n        return False\n    if a % 3 == 0:\n        return False\n    return True\n\n"], ["def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    primes = (\"2\", \"3\", \"5\", \"7\", \"B\", \"D\")\n    total = 0\n    i = 0\n    while i < len(num):\n        if num[i] in primes:\n            total += 1\n        i += 1\n    return total\n\n"], ["def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    # Your code here\n    pass\n\n"], ["def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    i = 0\n    while i < len(s) - 2:\n        if s[i] == s[i + 1] and s[i] == s[i + 2]:\n            i += 3\n        else:\n            return False\n    return True\n\n"], ["def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n                     GPA       |    Letter grade\n                      4.0                A+\n                    > 3.7                A\n                    > 3.3                A-\n                    > 3.0                B+\n                    > 2.7                B\n                    > 2.3                B-\n                    > 2.0                C+\n                    > 1.7                C\n                    > 1.3                C-\n                    > 1.0                D+\n                    > 0.7                D\n                    > 0.0                D-\n                      0.0                E\n\n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grade = []\n    _gpa_i = 0\n    while _gpa_i < len(grades):\n        gpa = grades[_gpa_i]\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n        _gpa_i += 1\n    return letter_grade\n\n"], ["def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if string[i] == string[0] and string[i] != string[i + 1]:\n            return False\n    return True\n\n"], ["def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 0 + starts_one_ends(n - 1)\n\n"], ["def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Write your code here\n    return \"\"\n"], ["def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(x for x in lst if x % 2 == 0)\n\n"], ["def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return ''.join(sorted(s, key=ord))\n\n"], ["def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    coords = [\n        (i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x\n    ]\n    coords.sort(key=lambda x: x[0])\n    return [\n        (i, j) for i, j in coords if lst[i][j] == x\n    ]\n\n"], ["def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Write your code here\n    pass\n"], ["def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    d = \"abcdefghijklmnopqrstuvwxyz\"\n    out = \"\"\n    _c_i = 0\n    while _c_i < len(s):\n        c = s[_c_i]\n        if c in d:\n            _c_i += 1\n            continue\n        _c_i += 1\n        _c_i += 1\n        if _c_i >= len(s):\n            _c_i = 0\n        c = d[c]\n        out += c\n    return out\n\n"], ["def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n\n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    lst = sorted(set(lst))\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return lst[1]\n\n"], ["def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    import re\n    return len(re.findall(r\"I\", S))\n\n"], ["def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    any_int(5, 2, 7) \u279e True\n\n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n\n    any_int(3.6, -2.2, 2) \u279e False\n\n\n\n    \"\"\"\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if (x + y == z) or (x + z == y) or (y + z == x):\n            return True\n    return False\n"], ["def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    return \"\".join([vowels_replace[letter] for letter in message])\n\n"], ["def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n\n    def isPrime(n):\n        i = 2\n        while i < int(n ** 0.5) + 1:\n            if n % i == 0:\n                return False\n            i += 1\n        return True\n\n    maxx = 0\n    for i in lst:\n        if isPrime(i):\n            maxx = max(maxx, i)\n    return maxx\n\n"], ["def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        _key_i = 0\n        while _key_i < len(dict.keys()):\n            key = dict.keys()[_key_i]\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                else:\n                    state = \"lower\"\n            elif state == \"upper\":\n                if key.islower():\n                    state = \"lower\"\n                else:\n                    state = \"mixed\"\n            elif state == \"lower\":\n                if key.isupper():\n                    state = \"upper\"\n                else:\n                    state = \"mixed\"\n            _key_i += 1\n        return state == \"lower\"\n\n"], ["def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    primes = []\n    i = 2\n    while i < n:\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n        i += 1\n    return primes\n\n"], ["def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    return a * b\n\n"], ["def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n\n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i].isupper() and i % 2 == 0:\n            count += 1\n        i += 1\n    return count\n\n"], ["def closest_integer(value):\n    \"\"\"\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    \"\"\"\n    from math import floor, ceil\n\n    if value.count(\".\") == 1:\n        # remove trailing zeros\n        while value[-1] == \"0\":\n            value = value[:-1]\n    num = float(value)\n    if value[-2:] == \".5\":\n        if num > 0:\n            return floor(num)\n        else:\n            return ceil(num)\n    elif value[-2:] == \".0\":\n        if num > 0:\n            return floor(num)\n        else:\n            return ceil(num)\n    else:\n        return int(value)\n\n"], ["def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n % 2 == 0:\n        return [n, n // 2]\n    else:\n        return [n // 2, n]\n\n"], ["def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n\n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    if not s:\n        return []\n    s_list = []\n    _letter_i = 0\n    while _letter_i < len(s):\n        letter = s[_letter_i]\n        if letter == \",\":\n            s_list.append(s[_letter_i + 1:])\n            _letter_i += 2\n        elif letter == \" \":\n            s_list.append(s[_letter_i + 1:])\n            _letter_i += 1\n        else:\n            s_list.append(letter)\n            _letter_i += 1\n    return s_list\n\n"], ["def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    else:\n        return choose_num(y + 1, x)\n\n"], ["def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m + 1):\n        summation += i\n    return \"{0:b}\".format(summation // m)\n\n"], ["def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n\n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    odd_digit_elements = []\n    _i_i = 0\n    while _i_i < len(x):\n        i = x[_i_i]\n        if i % 2 == 0:\n            _i_i += 1\n            continue\n        else:\n            odd_digit_elements.append(i)\n        _i_i += 1\n    return sorted(odd_digit_elements)\n\n"], ["def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n                    -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n                    -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n                    -> sort arr -> [-1, 1, 55]\n                    -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n\ndic = {\n    1: \"One\",\n    2: \"Two\",\n    3: \"Three\",\n    4: \"Four\",\n    5: \"Five\",\n    6: \"Six\",\n    7: \"Seven\",\n    8: \"Eight\",\n    9: \"Nine\",\n}\n\n"], ["def f(n):\n    \"\"\"Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    ret = []\n    i = 1\n    while i < n + 1:\n        if i % 2 == 0:\n            x = 1\n            for j in range(1, i + 1):\n                x *= j\n            ret.append(x)\n        else:\n            x = 0\n            for j in range(1, i + 1):\n                x += j\n            ret.append(x)\n        i += 1\n    return ret\n\n"], ["def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n            Input: 3\n            Output: (1, 2)\n            Explanation:\n            Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n            Input: 12\n            Output: (4, 6)\n            Explanation:\n            Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n            1. 1 <= n <= 10^3\n            2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_palindrome_count += 1\n            else:\n                odd_palindrome_count += 1\n\n    return even_palindrome_count, odd_palindrome_count\n\n"], ["def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n\n    def digits_sum(n):\n        neg = 1\n        if n < 0:\n            n, neg = -1 * n, -1\n        return sum(map(abs, str(n))) + neg\n\n    return sum(map(digits_sum, arr))\n\n"], ["def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n            You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                             be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                            array by performing any number of right shift operations.\n\n    \"\"\"\n    if len(arr) == 0:\n        return True\n    sorted_array = sorted(arr)\n    my_arr = []\n    min_value = min(arr)\n    max_value = max(arr)\n    for i in range(len(arr)):\n        if arr[i] == min_value:\n            my_arr.append(arr[i])\n        elif arr[i] == max_value:\n            my_arr.append(arr[i])\n        else:\n            my_arr.append(arr[i])\n    if sorted_array == my_arr:\n        return True\n    else:\n        return False\n\n"], ["def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    odd = 0\n    even = 0\n    _i_i = 0\n    while _i_i < len(lst1):\n        i = lst1[_i_i]\n        if i % 2 == 1:\n            odd += 1\n        _i_i += 1\n    for i in lst2:\n        if i % 2 == 0:\n            even += 1\n    if odd == 0 and even == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n"], ["def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    dict1 = {}\n    list1 = test.split(\" \")\n    t = 0\n    _i_i = 0\n    while _i_i < len(list1):\n        i = list1[_i_i]\n        if (list1.count(i) > t) and i != \"\":\n            dict1[i] = list1.count(i)\n            t = list1.count(i)\n        _i_i += 1\n    return dict1\n\n"], ["def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = \"\".join([char for char in s if char not in c])\n    return s, s == s[::-1]\n"], ["def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    res = []\n    _arr_i = 0\n    while _arr_i < len(lst):\n        arr = lst[_arr_i]\n        if arr.isdigit():\n            res.append(arr)\n        else:\n            res.append(str(ord(arr) + 1))\n        _arr_i += 1\n    return res\n\n"], ["def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    max_sum = 0\n    s = 0\n    _num_i = 0\n    while _num_i < len(nums):\n        num = nums[_num_i]\n        s += -num\n        if s < 0:\n            s = 0\n        max_sum = max(max_sum, s)\n        _num_i += 1\n    return max_sum\n\n"], ["def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # Write your code here\n    # 1. Find the max number of buckets\n    max_buckets = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_buckets += 1\n    # 2. Find the max number of units of water\n    max_units = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units += 1\n    # 3. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 4. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 5. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 6. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 7. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 8. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 9. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 10. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 11."], ["def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n"], ["def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        i = 0\n        while i < len(word):\n            if word[i].lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]:\n                n_consonants += 1\n            i += 1\n        if n_consonants == n:\n            result.append(word)\n    return result\n"], ["def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    if len(word) < 3:\n        return \"\"\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"O\", \"U\", \"I\"}\n    left_side = word[1:]\n    right_side = word[:-1]\n    left_side_vowels = [v for v in left_side if v in vowels]\n    right_side_vowels = [v for v in right_side if v in vowels]\n    if len(left_side_vowels) == 0 or len(right_side_vowels) == 0:\n        return \"\"\n    left_side_vowels.sort()\n    right_side_vowels.sort()\n    if left_side_vowels[0] == right_side_vowels[0]:\n        return \"\"\n    if left_side_vowels[0] == right_side_vowels[1]:\n        return \"u\"\n    if left_side_vowels[0] == right_side_vowels[2]:\n        return \"U\"\n    return \"\"\n\n"], ["def match_parens(lst):\n    \"\"\"\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    \"\"\"\n\n    def check(s):\n        val = 0\n        _i_i = 0\n        while _i_i < len(s):\n            i = s[_i_i]\n            if i == \"(\":\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n            _i_i += 1\n        return True\n\n    for i in lst:\n        if not check(i):\n            return \"No\"\n    return \"Yes\"\n\n"], ["def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n            Input: arr = [-3, -4, 5], k = 3\n            Output: [-4, -3, 5]\n\n    Example 2:\n\n            Input: arr = [4, -4, 4], k = 2\n            Output: [4, 4]\n\n    Example 3:\n\n            Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n            Output: [2]\n\n    Note:\n            1. The length of the array will be in the range of [1, 1000].\n            2. The elements in the array will be in the range of [-1000, 1000].\n            3. 0 <= k <= len(arr)\n    \"\"\"\n    if k == 0:\n        return []\n    if k == 1:\n        return arr\n    if k == 2:\n        return max(arr[0], arr[1])\n    if k == 3:\n        return max(arr[0], max(arr[1], arr[2]))\n    if k == 4:\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]))\n    if k == 5:\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]))\n    if k == 6:\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]), max(arr[7], arr[8]))\n    if k == 7:\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]), max(arr[7], arr[8]), max(arr[9], arr[10]))\n    if k == 8:\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]), max(arr[7], arr[8]), max(arr[9], arr[10]), max(arr[11], arr[12]))\n    if k == 9:\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]), max(arr[7], arr[8]), max(arr[9], arr[10]), max(arr[11], arr[12]), max(arr[13], arr[14]))\n    if k == 10:\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]), max(arr[7], arr[8]), max(arr[9], arr[10]), max(arr[11], arr[12]), max(arr[13], arr[14]), max(arr[15], arr[16]))\n    if k == 11:\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]), max(arr[7], arr[8]), max(arr[9], arr[10]), max(arr[11], arr[12]), max(arr[13], arr[14]), max(arr[15], arr[16]), max(arr[17], arr[18]))\n    if k == 12:\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]), max(arr[7], arr[8]), max(arr[9], arr[10]), max(arr[11], arr[12]), max(arr[13], arr[14]), max(arr[15], arr[16]), max(arr[17], arr[18]), max(arr[19], arr[20]))\n    if k == 13:\n        return max(arr[0], max(arr["], ["def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(x for x in lst if x % 2 == 1)\n\n"], ["def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return sum(arr[i:i+k] for i in range(len(arr)-k+1))\n"], ["def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n            1. Collatz(1) is [1].\n            2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if n % 2 == 0:\n        odd_collatz = []\n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = 3 * n + 1\n        odd_collatz.append(n)\n    return sorted(odd_collatz)\n\n"], ["def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    try:\n        date = date.strip()\n        month, day, year = date.split(\"-\")\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12] and day < 1 or day > 31:\n            return False\n        if month in [4, 6, 9, 11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n        if month == 2 and day == 1 and year % 4 == 0 and year % 100 != 0 or year % 400 == 0:\n            return False\n        return True\n    except ValueError:\n        return False\n\n"], ["def split_words(txt):\n    \"\"\"\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3\n    \"\"\"\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return len(txt) // 2\n\n"], ["def is_sorted(lst):\n    \"\"\"\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    \"\"\"\n    count_digit = dict([(i, 0) for i in lst])\n    _i_i = 0\n    while _i_i < len(lst):\n        i = lst[_i_i]\n        count_digit[i] += 1\n        _i_i += 1\n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    return True\n\n"], ["def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n\n    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        i = 2\n        while i < num:\n            if num % i == 0:\n                return False\n            i += 1\n        return True\n\n    if interval1[1] <= interval2[0] or interval2[1] <= interval1[0]:\n        return \"NO\"\n\n    if interval1[0] == interval2[0]:\n        return \"YES\"\n\n    if interval1[1] - interval2[0] == 1:\n        return \"YES\"\n\n    if is_prime(interval1[1] - interval2[0]):\n        return \"YES\"\n\n    return \"NO\"\n\n"], ["def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not arr:\n        return None\n    arr = sorted(arr)\n    prod = 1\n    for i in arr:\n        prod *= i\n    return prod\n\n"], ["def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n            Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n            Output: [1, 2, 1]\n\n            Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n            Output: [1]\n    \"\"\"\n    n = len(grid)\n    val = n * n + 1\n    i = 0\n    while i < n:\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                val = min(val, sum(temp))\n        i += 1\n    return val\n\n"], ["def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n               = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    i = 2\n    while i < n + 1:\n        my_tri.append(my_tri[i - 1] + my_tri[i - 2] + my_tri[i - 3])\n        i += 1\n    return my_tri\n\n"], ["def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    odd_count = 0\n    _digit_i = 0\n    while _digit_i < len(str(n)):\n        digit = str(n)[_digit_i]\n        int_digit = int(digit)\n        if int_digit % 2 == 1:\n            product *= int_digit\n        else:\n            odd_count += 1\n        _digit_i += 1\n    if odd_count == 0:\n        return product\n    else:\n        return 0\n"], ["def is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    opening_bracket_index = []\n    closing_bracket_index = []\n    i = 0\n    while i < len(string):\n        if string[i] == \"[\":\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n        i += 1\n    closing_bracket_index.reverse()\n    cnt = 0\n    for i in range(len(opening_bracket_index)):\n        if opening_bracket_index[i] == closing_bracket_index[i]:\n            cnt += 1\n    return cnt >= 2\n\n"], ["def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n\n\n    \"\"\"\n    import math\n\n    squared = 0\n    for i in lst:\n        squared += i ** 2\n    return math.ceil(squared)\n\n"], ["def check_if_last_char_is_a_letter(txt):\n    \"\"\"\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False\n    \"\"\"\n    last_char = txt[-1]\n    if last_char.isalpha() and last_char not in \" \":\n        return True\n    return False\n\n"], ["def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    ind = -1\n    i = 1\n    while i < len(arr):\n        if arr[i] >= arr[i-1]:\n            ind = i\n            break\n        i += 1\n    return ind\n\n"], ["def largest_smallest_integers(lst):\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    \"\"\"\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x >= 0, lst))\n    if len(smallest) == 0 and len(largest) == 0:\n        return None, None\n    elif len(smallest) == 0:\n        return largest, smallest[0]\n    elif len(largest) == 0:\n        return smallest, largest[0]\n    else:\n        return max(smallest), min(largest)\n\n"], ["def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str):\n        temp_a = temp_a.replace(\",\", \".\")\n    if isinstance(temp_b, str):\n        temp_b = temp_b.replace(\",\", \".\")\n    if isinstance(temp_a, float) and isinstance(temp_b, float):\n        return max(temp_a, temp_b)\n    if isinstance(temp_a, int) and isinstance(temp_b, int):\n        return max(temp_a, temp_b)\n    return None\n\n"], ["def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    sum_of_even = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0 and i % 4 == 0:\n            sum_of_even += i\n    return sum_of_even == n\n"], ["def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    fact_i = 1\n    special_fact = 1\n    i = 1\n    while i < n + 1:\n        fact_i *= i\n        special_fact *= i\n        i += 1\n    return special_fact\n\n"], ["def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\" + text[i]\n            elif end - start > 0:\n                new_text += text[i]\n            start = end\n            end = 0\n        i += 1\n    return new_text\n\n"], ["def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(sep=\".\")\n    if len(lst) != 2:\n        return \"No\"\n    if not lst[1] in suf:\n        return \"No\"\n    if len(lst[0]) == 0:\n        return \"No\"\n    if lst[0][0].isalpha():\n        return \"No\"\n    return \"Yes\"\n"], ["def sum_squares(lst):\n    \"\"\" \"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    result = []\n    i = 0\n    while i < len(lst):\n        if i % 3 == 0:\n            result.append(lst[i] ** 2)\n        elif i % 4 == 0:\n            result.append(lst[i] ** 3)\n        else:\n            result.append(lst[i])\n        i += 1\n    return sum(result)\n\n"], ["def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n            Input: sentence = \"This is a test\"\n            Output: \"is\"\n\n    Example 2:\n            Input: sentence = \"lets go for swimming\"\n            Output: \"go for\"\n\n    Constraints:\n            * 1 <= len(sentence) <= 100\n            * sentence contains only letters\n    \"\"\"\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        if flg == 1:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n\n"], ["def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denominator = int(b) * int(d)\n    if numerator == denominator:\n        return True\n    else:\n        return False\n\n"], ["def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def digits_sum(n):\n        neg = 1\n        if n < 0:\n            n, neg = -1 * n, -1\n        return sum(map(abs, str(n))) * neg\n\n    nums.sort(key=digits_sum)\n    return nums\n\n"], ["def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1\n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    _num_i = 0\n    while _num_i < len(nums):\n        num = nums[_num_i]\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            if num % 10 in odd_digits:\n                count += 1\n        _num_i += 1\n    return count\n\n"], ["def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n            For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n            Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n            Input: n = 5\n            Output: 1\n            Explanation:\n            a = [1, 3, 7, 13, 21]\n            The only valid triple is (1, 7, 13).\n    \"\"\"\n    A = [i * i - i + 1 for i in range(1, n + 1)]\n    ans = []\n    i = 0\n    while i < n:\n        for j in range(i + 1, n):\n            if A[i] + A[j] + A[j] % 3 == 0:\n                ans.append((A[i], A[j], A[j]))\n        i += 1\n    return len(ans)\n\n"], ["def bf(planet1, planet2):\n    \"\"\"\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    \"\"\"\n    planet_names = (\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\",\n    )\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet2, planet1)\n    else:\n        return (planet1, planet2)\n\n"], ["def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    lst.sort()\n    new_lst = []\n    _i_i = 0\n    while _i_i < len(lst):\n        i = lst[_i_i]\n        if len(i) % 2 == 1:\n            lst.pop(_i_i)\n        else:\n            new_lst.append(i)\n        _i_i += 1\n    return new_lst\n\n"], ["def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n\n    \"\"\"\n    if n == 1:\n        return y\n    i = 2\n    while i < n:\n        if n % i == 0:\n            return x\n        i += 1\n    return y\n\n"], ["def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    # TODO: Write your code here.\n    return 0\n"], ["def compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    pass\n"], ["def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len(\n        [x for x in extensions[0] if x.isalpha() and x.islower()]\n    )\n    _s_i = 0\n    while _s_i < len(extensions):\n        s = extensions[_s_i]\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len(\n            [x for x in s if x.isalpha() and x.islower()]\n        )\n        if val > my_val:\n            strong = s\n            my_val = val\n        _s_i += 1\n    return class_name + \".\" + strong\n"], ["def cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    l = len(b)\n    pat = b + b\n    i = 0\n    while i < len(a) - l + 1:\n        if a[i:i+l] == pat:\n            return True\n        i += 1\n    return False\n"], ["def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n           even_odd_count(-12) ==> (1, 1)\n           even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    _i_i = 0\n    while _i_i < len(str(abs(num))):\n        i = str(abs(num))[_i_i]\n        if int(i) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        _i_i += 1\n    return (even_count, odd_count)\n\n"], ["def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"]\n    i = 12\n    res = \"\"\n    while number:\n        res += sym[i]\n        number -= num[i]\n        i -= 1\n    return res[::-1]\n\n"], ["def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Your code here\n    return False\n"], ["def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # Write your code here\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = 0\n        for char in word:\n            count += 1\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n"], ["def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n            the number of carrots that you have eaten.\n    @need : integer\n            the number of carrots that you need to eat.\n    @remaining : integer\n            the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [remaining, 0]\n"], ["def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( // )\n    Exponentiation ( ** )\n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n            The length of operator list is equal to the length of operand list minus one.\n            Operand is a list of of non-negative integers.\n            Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression += oprt + str(oprn)\n    return eval(expression)\n\n"], ["def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    _i_i = 0\n    while _i_i < len(s):\n        i = s[_i_i]\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n            idx += 1\n        else:\n            new_str[idx] = i\n        _i_i += 1\n    if flg == 0:\n        new_str = new_str[::-1]\n    return \"\".join(new_str)\n\n"], ["def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    import hashlib\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n\n"], ["def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    return [i for i in range(lower, upper + 1) if i % 2 == 0]\n\n"], ["from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx2 != idx:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n    return False\n\n"], ["from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    current_string = []\n    current_depth = 0\n    for c in paren_string:\n        if \"(\" == c:\n            current_depth += 1\n            current_string.append(c)\n        elif \")\" == c:\n            current_depth -= 1\n            if 0 == current_depth:\n                result.append(\"\".join(current_string))\n                current_string = []\n        else:\n            current_string.append(c)\n    if current_string:\n        result.append(\"\".join(current_string))\n    return result\n\n"], ["def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer_part, decimals = divmod(number, 1)\n    return decimals\n\n"], ["from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for op in operations:\n        balance += op\n    return balance < 0\n\n"], ["from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n"], ["from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    result = []\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result\n\n"], ["from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if \"(\" == c:\n                depth += 1\n            elif \")\" == c:\n                depth -= 1\n            if depth > max_depth:\n                max_depth = depth\n        return max_depth\n\n    return [parse_paren_group(s) for s in paren_string.split()]\n\n"], ["from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]\n\n"], ["from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    sum_value = 0\n    prod_value = 1\n    for number in numbers:\n        sum_value += number\n        prod_value *= number\n    return sum_value, prod_value\n\n"], ["from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    running_max = None\n    result = []\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n        result.append(running_max)\n    return result\n\n"], ["def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n    end_of_suffix = 0\n    while end_of_suffix < len(string):\n        if is_palindrome(string[end_of_suffix:end_of_suffix + 1]):\n            end_of_suffix += 1\n        else:\n            beginning_of_suffix += 1\n\n    return string[beginning_of_suffix:end_of_suffix + 1]\n\n"], ["from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    def xor(i, j):\n        if j == i:\n            return \"0\"\n        return \"1\"\n\n    return \"\".join(xor(i, j) for i, j in zip(a, b))\n\n"], ["from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n\n    lengths = [len(s) for s in strings]\n    return max(lengths, key=lengths.count)\n\n"], ["def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\n"], ["from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    result = []\n    for i in range(len(string)):\n        result.append(string[:i])\n    return result\n\n"], ["def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n))\n"], ["def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string))\n"], ["from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    note_map = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    note_list = []\n    for note in music_string:\n        note_list.append(note_map[note])\n    return note_list\n\n"], ["def how_many_times(string: str, substring: str) -> int:\n    \"\"\"Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    times = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n    return times\n"], ["from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n\n\nvalue_map = {\n    \"zero\": 0,\n    \"one\": 1,\n    \"two\": 2,\n    \"three\": 3,\n    \"four\": 4,\n    \"five\": 5,\n    \"six\": 6,\n    \"seven\": 7,\n    \"eight\": 8,\n    \"nine\": 9,\n}\n\n"], ["from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest_pair = None\n    distance = None\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx2 != idx:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = (elem, elem2)\n                else:\n                    if abs(elem - elem2) < distance:\n                        distance = abs(elem - elem2)\n                        closest_pair = (elem, elem2)\n    return closest_pair\n\n"], ["from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(number - min_number) / (max_number - min_number) for number in numbers]\n\n"], ["from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [int(value) for value in values if isinstance(value, int)]\n\n"], ["def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n"], ["def largest_divisor(n: int) -> int:\n    \"\"\"For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n    return n\n\n"], ["from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    import math\n\n    fact = []\n    i = 2\n    while int(math.sqrt(n) + 1) >= i:\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n    if n > 1:\n        fact.append(n)\n    return fact\n\n"], ["from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    import collections\n\n    seen = collections.Counter()\n    for number in numbers:\n        if number in seen:\n            seen[number] -= 1\n        else:\n            seen[number] = 1\n    return list(seen.keys())\n\n"], ["def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.lower().upper()\n"], ["from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n"], ["from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\n"], ["def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x >= 0]\n"], ["def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if 2 > n:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n\n"], ["import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\"xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    begin, end = -1.0, 1.0\n    while 0 < poly(xs, begin) * poly(xs, end):\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        mid = (begin + end) / 2.0\n        if poly(xs, mid) * poly(xs, begin) < 0:\n            end = mid\n        else:\n            begin = mid\n    return begin\n\n"], ["def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l = list(l)\n    l.sort()\n    l = [x for x in l if x % 3 != 2]\n    l.sort()\n    return l\n\n"], ["def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n"], ["def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n\n"], ["def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    ns = []\n    for i in range(n):\n        if 0 == i % 11 or i % 13 == 0:\n            ns.append(i)\n    return len(ns)\n"], ["def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for i in range(len(evens)):\n        ans.append(evens[i])\n        ans.append(odds[i])\n    return ans\n\n"], ["def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"], ["def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    import math\n\n    def is_prime(p):\n        if 2 > p:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 89\n    elif n == 6:\n        return 233\n    elif n == 7:\n        return 144\n    elif n == 8:\n        return 71\n    elif n == 9:\n        return 35\n    elif n == 10:\n        return 17\n    elif n == 11:\n        return 6\n    elif n == 12:\n        return 3\n    elif n == 13:\n        return 2\n    elif n == 14:\n        return 1\n    elif n == 15:\n        return 0\n    elif n == 16:\n        return 1\n    elif n == 17:\n        return 0\n    elif n == 18:\n        return 1\n    elif n == 19:\n        return 0\n    elif n == 20:\n        return 1\n    elif n == 21:\n        return 0\n    elif n == 22:\n        return 1\n    elif n == 23:\n        return 0\n    elif n == 24:\n        return 1\n    elif n == 25:\n        return 0\n    elif n == 26:\n        return 1\n    elif n == 27:\n        return 0\n    elif n == 28:\n        return 1\n    elif n == 29:\n        return 0\n    elif n == 30:\n        return 1\n    elif n == 31:\n        return 0\n    elif n == 32:\n        return 1\n    elif n == 33:\n        return 0\n    elif n == 34:\n        return 1\n    elif n == 35:\n        return 0\n    elif n == 36:\n        return 1\n    elif n == 37:\n        return 0\n    elif n == 38:\n        return 1\n    elif n == 39:\n        return 0\n    elif n == 40:\n        return 1\n    elif n == 41:\n        return 0\n    elif n == 42:\n        return 1\n    elif n == 43:\n        return 0\n    elif n == 44:\n        return 1\n    elif n == 45:\n        return 0\n    elif n == 46:\n        return 1\n    elif n == 47:\n        return 0\n    elif n == 48:\n        return 1\n    elif n == 49:\n        return 0\n    elif n == 50:\n        return 1\n    elif n == 51:\n        return 0\n    elif n == 52:\n        return 1\n    elif n == 53:\n        return 0\n    elif n == 54:\n        return 1\n    elif n == 55:\n        return 0\n    elif n == 56:\n        return 1\n    elif n == 57:\n        return 0\n    elif n == 58:\n        return 1\n    elif n == 59:\n        return 0\n    elif n == 60:\n        return 1\n    elif n == 61:\n        return 0\n    elif n == 62:\n        return 1\n    elif n == 63:\n        return 0\n    elif n == 64:\n        return 1\n    elif n == 65:\n        return 0\n    elif n == 66:\n        return 1\n    elif n == 67:\n        return 0\n    elif n == 68:\n        return 1\n    elif n == 69:\n        return 0\n    elif n == 70:\n        return 1\n    elif n == 71:\n        return 0\n    elif n == 72:\n       "], ["def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\n"], ["def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # Write your code here.\n    pass\n"], ["def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n\n"], ["def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n\n"], ["def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    ret = \"\"\n    while 0 < x:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n\n"], ["def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2\n"], ["def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    results = [0, 0, 2, 0]\n    if 4 > n:\n        return results[n]\n    for i in range(4, n + 1):\n        results.append(results[i - 1] + results[i - 2] + results[i - 3] + results[i - 4])\n    return results[n]\n\n"], ["def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l = sorted(l)\n    if 1 == len(l) % 2:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n\n"], ["def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    for i in range(len(text)):\n        if text[len(text) - 1 - i] != text[i]:\n            return False\n    return True\n\n"], ["def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    ret = 1\n    for i in range(n):\n        ret *= p\n    return ret % p\n\n"], ["def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"], ["def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiou'\n    return ''.join(char for char in text if char not in vowels)\n\n"], ["def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for e in l:\n        if t <= e:\n            return False\n    return True\n\n"], ["def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n"], ["def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    if len(s0) != len(s1):\n        return False\n    for i in range(len(s0)):\n        if s0[i] != s1[i]:\n            return False\n    return True\n\n"], ["def fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if 0 == n:\n        return 0\n    elif 1 == n:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n"], ["def correct_bracketing(brackets: str):\n    \"\"\"brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        elif b == \">\":\n            depth -= 1\n        else:\n            return False\n    return depth == 0\n\n"], ["def monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if sorted(l) == l or l == sorted(l, reverse=True):\n        return True\n    else:\n        return False\n"], ["def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(ret)\n\n"], ["def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n    def is_prime(k):\n        if 2 > k:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n    if n % 23 == 0:\n        return 23\n    if n % 29 == 0:\n        return 29\n    if n % 31 == 0:\n        return 31\n    if n % 37 == 0:\n        return 37\n    if n % 41 == 0:\n        return 41\n    if n % 43 == 0:\n        return 43\n    if n % 47 == 0:\n        return 47\n    if n % 53 == 0:\n        return 53\n    if n % 59 == 0:\n        return 59\n    if n % 61 == 0:\n        return 61\n    if n % 67 == 0:\n        return 67\n    if n % 71 == 0:\n        return 71\n    if n % 73 == 0:\n        return 73\n    if n % 79 == 0:\n        return 79\n    if n % 83 == 0:\n        return 83\n    if n % 89 == 0:\n        return 89\n    if n % 97 == 0:\n        return 97\n    if n % 101 == 0:\n        return 101\n    if n % 103 == 0:\n        return 103\n    if n % 107 == 0:\n        return 107\n    if n % 109 == 0:\n        return 109\n    if n % 113 == 0:\n        return 113\n    if n % 127 == 0:\n        return 127\n    if n % 131 == 0:\n        return 131\n    if n % 137 == 0:\n        return 137\n    if n % 139 == 0:\n        return 139\n    if n % 149 == 0:\n        return 149\n    if n % 151 == 0:\n        return 151\n    if n % 157 == 0:\n        return 157\n    if n % 163 == 0:\n        return 163\n    if n % 167 == 0:\n        return 167\n    if n % 173 == 0:\n        return 173\n    if n % 179 == 0:\n        return 179\n    if n % 181 == 0:\n        return 181\n    if n % 191 == 0:\n        return 191\n    if n % 193 == 0:\n        return 193\n    if n % 197 == 0:\n        return 197\n    if n % 199 == 0:\n        return 199\n    if n % 211 == 0:\n        return 211\n    if n % 223 == 0:\n        return 223\n    if n % 227 == 0:\n        return 227\n    if n % 229 == 0:\n        return 229\n    if n % 233 == 0:\n        return 233\n    if n % 239 == 0:\n        return 2"], ["def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))\n\n"], ["def correct_bracketing(brackets: str):\n    \"\"\"brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        elif b == \")\":\n            depth -= 1\n        else:\n            return False\n    return depth == 0\n\n"], ["def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [x * (x + 1) / 2 for x in xs]\n\n"], ["def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if 0 == n:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    if n == 4:\n        return 2\n    if n == 5:\n        return 3\n    if n == 6:\n        return 5\n    if n == 7:\n        return 8\n    if n == 8:\n        return 13\n    if n == 9:\n        return 21\n    if n == 10:\n        return 34\n    if n == 11:\n        return 55\n    if n == 12:\n        return 89\n    if n == 13:\n        return 144\n    if n == 14:\n        return 233\n    if n == 15:\n        return 377\n    if n == 16:\n        return 610\n    if n == 17:\n        return 987\n    if n == 18:\n        return 1597\n    if n == 19:\n        return 2584\n    if n == 20:\n        return 4181\n    if n == 21:\n        return 6765\n    if n == 22:\n        return 10946\n    if n == 23:\n        return 17711\n    if n == 24:\n        return 28657\n    if n == 25:\n        return 46368\n    if n == 26:\n        return 75025\n    if n == 27:\n        return 121393\n    if n == 28:\n        return 196418\n    if n == 29:\n        return 317811\n    if n == 30:\n        return 514229\n    if n == 31:\n        return 832040\n    if n == 32:\n        return 1346269\n    if n == 33:\n        return 2178309\n    if n == 34:\n        return 3524578\n    if n == 35:\n        return 5702887\n    if n == 36:\n        return 8991256\n    if n == 37:\n        return 14907247\n    if n == 38:\n        return 24157817\n    if n == 39:\n        return 39088169\n    if n == 40:\n        return 63245986\n    if n == 41:\n        return 95667436\n    if n == 42:\n        return 144004738\n    if n == 43:\n        return 230243969\n    if n == 44:\n        return 372334956\n    if n == 45:\n        return 610514296\n    if n == 46:\n        return 987790200\n    if n == 47:\n        return 1597717475\n    if n == 48:\n        return 2604694768\n    if n == 49:\n        return 4217595587\n    if n == 50:\n        return 6721588881\n    if n == 51:\n        return 10943177762\n    if n == 52:\n        return 17715955443\n    if n == 53:\n        return"], ["FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    return n_vowels\n\n"], ["def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    s = str(x)\n    if len(s) < shift:\n        return s[::-1]\n    else:\n        return s[shift:] + s[:shift]\n\n"], ["def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n            digitSum(\"\") => 0\n            digitSum(\"abAB\") => 131\n            digitSum(\"abcCd\") => 67\n            digitSum(\"helloE\") => 69\n            digitSum(\"woArBld\") => 131\n            digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    if \"\" == s:\n        return 0\n    return sum(ord(c) for c in s if ord(c) >= 65 and ord(c) <= 90)\n\n"], ["def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    lis = list()\n    for i in s.split(\" \"):\n        if i.isdigit():\n            lis.append(int(i))\n    if len(lis) == 1:\n        return 0\n    if len(lis) == 2:\n        return lis[0] + lis[1]\n    if len(lis) == 3:\n        return lis[0] + lis[1] + lis[2]\n    if len(lis) == 4:\n        return lis[0] + lis[1] + lis[2] + lis[3]\n    if len(lis) == 5:\n        return lis[0] + lis[1] + lis[2] + lis[3] + lis[4]\n    if len(lis) == 6:\n        return lis[0] + lis[1] + lis[2] + lis[3] + lis[4] + lis[5]\n    if len(lis) == 7:\n        return lis[0] + lis[1] + lis[2] + lis[3] + lis[4] + lis[5] + lis[6]\n    if len(lis) == 8:\n        return lis[0] + lis[1] + lis[2] + lis[3] + lis[4] + lis[5] + lis[6] + lis[7]\n    if len(lis) == 9:\n        return lis[0] + lis[1] + lis[2] + lis[3] + lis[4] + lis[5] + lis[6] + lis[7] + lis[8]\n    if len(lis) == 10:\n        return lis[0] + lis[1] + lis[2] + lis[3] + lis[4] + lis[5] + lis[6] + lis[7] + lis[8] + lis[9]\n    if len(lis) == 11:\n        return lis[0] + lis[1] + lis[2] + lis[3] + lis[4] + lis[5] + lis[6] + lis[7] + lis[8] + lis[9] + lis[10]\n    if len(lis) == 12:\n        return lis[0] + lis[1] + lis[2] + lis[3] + lis[4] + lis[5] + lis[6] + lis[7] + lis[8] + lis[9] + lis[10] + lis[11]\n    if len(lis) == 13:\n        return lis[0] + lis[1] + lis[2] + lis[3] + lis[4] + lis[5] + lis[6] + lis[7] + lis[8] + lis[9] + lis[10] + lis[11] + lis[12]\n    if len(lis) == 14:\n        return lis[0] + lis[1] + lis[2] + lis[3] + lis[4] + l"], ["def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n            Input: [4,2,3]\n            Output: [2, 1]\n            Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n            Input: [1,2,3]\n            Output: [2, 1]\n            Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n            Input: []\n            Output: []\n\n    Example 4:\n            Input: [5, 0, 3, 0, 4, 2]\n            Output: [0, 1]\n            Explanation: 0 is the smallest value, but  there are two zeros,\n                                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n            * 1 <= nodes.length <= 10000\n            * 0 <= node.value\n    \"\"\"\n    if 0 == len(arr):\n        return []\n    evens = list(filter(lambda x: x % 2 == 0, arr))\n    if len(evens) == 0:\n        return [arr[0], 0]\n    return [evens[0], evens.index(min(evens))]\n\n"], ["def search(lst):\n    \"\"\"\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n            search([4, 1, 2, 2, 3, 1]) == 2\n            search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n            search([5, 5, 4, 4, 4]) == -1\n    \"\"\"\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= frq[ans]:\n            ans = i\n    return ans\n\n"], ["def strange_sort_list(lst):\n    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    \"\"\"\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(min(lst) if switch else max(lst))\n        switch = not switch\n    return res\n\n"], ["def triangle_area(a, b, c):\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if a + b <= c or a + c <= b or a >= b + c:\n        return -1\n    s = (a + b + c) / 2\n    return round(s * (s - a) * (s - b) * (s - c), 2)\n\n"], ["def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    \"\"\"\n    if w < sum(q):\n        return False\n    i, j = 0, len(q) - 1\n    while i < j:\n        if q[i] != q[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n\n"], ["def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - 1 - i]:\n            ans += 1\n    return ans\n\n"], ["def total_match(lst1, lst2):\n    \"\"\"\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    \"\"\"\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    if l1 == l2:\n        return lst1\n    else:\n        return lst2\n\n"], ["def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n\n    def is_prime(n):\n        for j in range(2, n):\n            if 0 == n % j:\n                return False\n        return True\n\n    for i in range(2, 101):\n        if is_prime(i):\n            if a * i == a:\n                return True\n    return False\n\n"], ["def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if 1 == n:\n        return x == 1\n    power = 1\n    while power < n:\n        power *= 2\n    return x == power\n\n"], ["def iscube(a):\n    \"\"\"\n    Write a function that takes an integer a and returns True\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    \"\"\"\n    a = abs(a)\n    if a == 0:\n        return True\n    if a % 1 == 0:\n        return False\n    if a % 2 == 0:\n        return False\n    if a % 3 == 0:\n        return False\n    return True\n\n"], ["def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    primes = (\"2\", \"3\", \"5\", \"7\", \"B\", \"D\")\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n\n"], ["def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    # Your code here\n    pass\n\n"], ["def is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if 3 > len(s):\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] and s[i] == s[i + 2]:\n            return False\n    return True\n\n"], ["def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n                     GPA       |    Letter grade\n                      4.0                A+\n                    > 3.7                A\n                    > 3.3                A-\n                    > 3.0                B+\n                    > 2.7                B\n                    > 2.3                B-\n                    > 2.0                C+\n                    > 1.7                C\n                    > 1.3                C-\n                    > 1.0                D+\n                    > 0.7                D\n                    > 0.0                D-\n                      0.0                E\n\n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    letter_grade = []\n    for gpa in grades:\n        if 4.0 == gpa:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n\n"], ["def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    l = len(string)\n    if 0 == l or l == 1:\n        return False\n    for i in range(2, l):\n        if string[i] == string[0:i]:\n            return False\n    return True\n\n"], ["def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if 1 == n:\n        return 1\n    elif 10 <= n <= 99:\n        return 1 + starts_one_ends(n - 1)\n    else:\n        return 0\n\n"], ["def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Write your code here\n    return \"\"\n"], ["def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(x for x in lst if x % 2 == 0)\n\n"], ["def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return ''.join(sorted(s, key=ord))\n\n"], ["def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    coords = [\n        (i, j) for i in range(len(lst)) for j in range(len(lst[i])) if x == lst[i][j]\n    ]\n    coords.sort(key=lambda x: x[0])\n    return [\n        (i, j) for i, j in coords if lst[i][j] == x\n    ]\n\n"], ["def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Write your code here\n    pass\n"], ["def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    d = \"abcdefghijklmnopqrstuvwxyz\"\n    out = \"\"\n    for c in s:\n        if c in d:\n            out += d[(d.index(c) + 2) % len(d)]\n        else:\n            out += c\n    return out\n\n"], ["def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n\n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    lst = sorted(set(lst))\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return lst[1]\n\n"], ["def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    import re\n    return len(re.findall(r\"I\", S))\n\n"], ["def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    any_int(5, 2, 7) \u279e True\n\n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n\n    any_int(3.6, -2.2, 2) \u279e False\n\n\n\n    \"\"\"\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if (x + y == z) or (x + z == y) or (x == y + z):\n            return True\n    return False\n"], ["def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    return \"\".join([vowels_replace[letter] for letter in message])\n\n"], ["def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n\n    def isPrime(n):\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    maxx = 0\n    for i in lst:\n        if isPrime(i):\n            if i > maxx:\n                maxx = i\n    return maxx\n\n"], ["def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if 0 == len(dict.keys()):\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                else:\n                    state = \"lower\"\n            elif state == \"upper\":\n                if key.islower():\n                    state = \"lower\"\n                else:\n                    state = \"mixed\"\n            elif state == \"lower\":\n                if key.isupper():\n                    state = \"upper\"\n                else:\n                    state = \"mixed\"\n        return state == \"lower\"\n\n"], ["def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if 0 == i % j:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n"], ["def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    return a * b\n\n"], ["def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n\n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] == s[i + 1].upper():\n            count += 1\n    return count\n\n"], ["def closest_integer(value):\n    \"\"\"\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    \"\"\"\n    from math import floor, ceil\n\n    if 1 == value.count(\".\"):\n        # remove trailing zeros\n        while value[-1] == \"0\":\n            value = value[:-1]\n    num = float(value)\n    if value[-2:] == \".5\":\n        if num > 0:\n            return floor(num)\n        else:\n            return ceil(num)\n    elif value[-2:] == \".0\":\n        if num > 0:\n            return floor(num)\n        else:\n            return ceil(num)\n    else:\n        return int(value)\n\n"], ["def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n % 2 == 0:\n        return [n, n // 2]\n    else:\n        return [n // 2, n]\n\n"], ["def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n\n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    if not s:\n        return []\n    s_list = []\n    for letter in s:\n        if letter == \",\":\n            s_list.append(letter)\n        else:\n            s_list.append(letter)\n    return s_list\n\n"], ["def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if y < x:\n        return -1\n    if y % 2 == 0:\n        return y\n    else:\n        return choose_num(y + 1, x)\n\n"], ["def rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    summation = 0\n    for i in range(n, m + 1):\n        summation += i\n    return summation // m\n"], ["def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n\n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    odd_digit_elements = []\n    for i in x:\n        if i % 2 != 0:\n            odd_digit_elements.append(i)\n    return sorted(set(x) - set(odd_digit_elements))\n\n"], ["def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n                    -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n                    -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n                    -> sort arr -> [-1, 1, 55]\n                    -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n\ndic = {\n    1: \"One\",\n    2: \"Two\",\n    3: \"Three\",\n    4: \"Four\",\n    5: \"Five\",\n    6: \"Six\",\n    7: \"Seven\",\n    8: \"Eight\",\n    9: \"Nine\",\n}\n\n"], ["def f(n):\n    \"\"\"Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    ret = []\n    for i in range(1, n + 1):\n        if 0 == i % 2:\n            x = 1\n            for j in range(1, i + 1):\n                x *= j\n            ret.append(x)\n        else:\n            ret.append(i)\n    return ret\n\n"], ["def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_palindrome_count += 1\n            else:\n                odd_palindrome_count += 1\n    return even_palindrome_count, odd_palindrome_count\n\n"], ["def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n\n    def digits_sum(n):\n        neg = 1\n        if 0 > n:\n            n, neg = -1 * n, -1\n        return sum(map(abs, str(n)))\n\n    return sum(map(digits_sum, arr))\n\n"], ["def move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n            You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                             be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                            array by performing any number of right shift operations.\n\n    \"\"\"\n    if 0 == len(arr):\n        return True\n    sorted_array = sorted(arr)\n    my_arr = []\n    min_value = min(arr)\n    max_value = max(arr)\n    for i in range(len(arr)):\n        if arr[i] == min_value:\n            my_arr.append(arr[i])\n        elif arr[i] == max_value:\n            my_arr.append(arr[i])\n        else:\n            my_arr.append(arr[i])\n    if sorted_array == my_arr:\n        return True\n    else:\n        return False\n\n"], ["def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    odd = 0\n    even = 0\n    for i in lst1:\n        if i % 2 == 1:\n            odd += 1\n    for i in lst2:\n        if i % 2 == 0:\n            even += 1\n    if odd == 0 and even == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n"], ["def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    dict1 = {}\n    list1 = test.split(\" \")\n    t = 0\n    for i in list1:\n        if (list1.count(i) > t) and i != \"\":\n            dict1[i] = list1.count(i)\n        t = list1.count(i)\n    return dict1\n\n"], ["def reverse_delete(s, c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s = \"\".join([char for char in s if char not in c])\n    return s, s == s[::-1]\n"], ["def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    res = []\n    for arr in lst:\n        res.append(len(list(filter(str.isdigit, arr))))\n    return res\n\n"], ["def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if s < 0:\n            s = 0\n        max_sum = max(max_sum, s)\n    return max_sum\n\n"], ["def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # Write your code here\n    # 1. Find the max number of buckets\n    max_buckets = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_buckets += 1\n    # 2. Find the max number of units of water\n    max_units = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units += 1\n    # 3. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 4. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 5. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 6. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 7. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 8. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 9. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 10. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 11."], ["def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n"], ["def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]:\n                n_consonants += 1\n        if n_consonants == n:\n            result.append(word)\n    return result\n"], ["def get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    if 3 > len(word):\n        return \"\"\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"O\", \"U\", \"I\"}\n    left = word[0]\n    right = word[-1]\n    if left in vowels and right in vowels:\n        return left\n    return \"\"\n\n"], ["def match_parens(lst):\n    \"\"\"\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    \"\"\"\n\n    def check(s):\n        val = 0\n        for i in s:\n            if i == \"(\":\n                val = val + 1\n            else:\n                val = val - 1\n        return val == 0\n\n    return check(lst[0]) and check(lst[1])\n\n"], ["def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n            Input: arr = [-3, -4, 5], k = 3\n            Output: [-4, -3, 5]\n\n    Example 2:\n\n            Input: arr = [4, -4, 4], k = 2\n            Output: [4, 4]\n\n    Example 3:\n\n            Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n            Output: [2]\n\n    Note:\n            1. The length of the array will be in the range of [1, 1000].\n            2. The elements in the array will be in the range of [-1000, 1000].\n            3. 0 <= k <= len(arr)\n    \"\"\"\n    if 0 == k:\n        return []\n    if 1 == k:\n        return arr\n    if 2 == k:\n        return sorted(arr)\n    if 3 == k:\n        return sorted(arr)\n    if 4 == k:\n        return sorted(arr)\n    if 5 == k:\n        return sorted(arr)\n    if 6 == k:\n        return sorted(arr)\n    if 7 == k:\n        return sorted(arr)\n    if 8 == k:\n        return sorted(arr)\n    if 9 == k:\n        return sorted(arr)\n    if 10 == k:\n        return sorted(arr)\n    if 11 == k:\n        return sorted(arr)\n    if 12 == k:\n        return sorted(arr)\n    if 13 == k:\n        return sorted(arr)\n    if 14 == k:\n        return sorted(arr)\n    if 15 == k:\n        return sorted(arr)\n    if 16 == k:\n        return sorted(arr)\n    if 17 == k:\n        return sorted(arr)\n    if 18 == k:\n        return sorted(arr)\n    if 19 == k:\n        return sorted(arr)\n    if 20 == k:\n        return sorted(arr)\n    if 21 == k:\n        return sorted(arr)\n    if 22 == k:\n        return sorted(arr)\n    if 23 == k:\n        return sorted(arr)\n    if 24 == k:\n        return sorted(arr)\n    if 25 == k:\n        return sorted(arr)\n    if 26 == k:\n        return sorted(arr)\n    if 27 == k:\n        return sorted(arr)\n    if 28 == k:\n        return sorted(arr)\n    if 29 == k:\n        return sorted(arr)\n    if 30 == k:\n        return sorted(arr)\n    if 31 == k:\n        return sorted(arr)\n    if 32 == k:\n        return sorted(arr)\n    if 33 == k:\n        return sorted(arr)\n    if 34 == k:\n        return sorted(arr)\n    if 35 == k:\n        return sorted(arr)\n    if 36 == k:\n        return sorted(arr)\n    if 37 == k:\n        return sorted(arr)\n    if 38 == k:\n        return sorted(arr)\n    if 39 == k:\n        return sorted(arr)\n    if 40 == k:\n        return sorted(arr)\n    if 41 == k:\n        return sorted(arr)\n    if 42 == k:\n        return sorted(arr)\n    if 43 == k:\n        return sorted(arr)\n    if 44 == k:\n        return sorted(arr)\n    if 45 == k:\n        return sorted(arr)\n    if 46 == k:\n        return sorted(arr)\n    if 47 == k:\n        return sorted(arr)\n    if 48 == k:\n        return sorted(arr)\n    if 49 == k:\n        return sorted(arr)\n    if 50 == k:\n        return sorted(arr)\n    if 51 == k:\n        return sorted(arr)\n    if 52 == k:\n        return sorted(arr)\n    if 53 == k:\n        return sorted(arr)\n    if 54 == k:\n        return sorted(arr)\n    if 55 == k:\n        return sorted(arr)\n    if 56 == k:\n        return sorted(arr)\n    if 57 == k:\n        return sorted(arr)\n    if"], ["def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(x for x in lst if x % 2 == 1)\n\n"], ["def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return sum(arr[i:i+k] for i in range(len(arr)-k+1))\n"], ["def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n            1. Collatz(1) is [1].\n            2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if 0 == n % 2:\n        odd_collatz = []\n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = 3 * n + 1\n        odd_collatz.append(n)\n    return sorted(odd_collatz)\n\n"], ["def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    try:\n        date = date.strip()\n        month, day, year = date.split(\"-\")\n        month, day, year = int(month), int(day), int(year)\n        if 1 > month or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12] and day < 1 or day > 31:\n            return False\n        if month in [4, 6, 9, 11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n        if month in [1, 4, 6, 9, 11] and day < 1 or day > 31:\n            return False\n        if len(date) != 10:\n            return False\n        if date[:2] != \"06\":\n            return False\n        if date[2:4] != \"-\":\n            return False\n        if date[5:7] != \"-\":\n            return False\n        if date[8:10] != \"-\":\n            return False\n        if date[10:12] != \"-\":\n            return False\n        if date[12:14] != \"-\":\n            return False\n        if date[14:16] != \"-\":\n            return False\n        if date[16:18] != \"-\":\n            return False\n        if date[18:20] != \"-\":\n            return False\n        if date[20:22] != \"-\":\n            return False\n        if date[22:24] != \"-\":\n            return False\n        if date[24:26] != \"-\":\n            return False\n        if date[26:28] != \"-\":\n            return False\n        if date[28:30] != \"-\":\n            return False\n        if date[30:32] != \"-\":\n            return False\n        if date[32:34] != \"-\":\n            return False\n        if date[34:36] != \"-\":\n            return False\n        if date[36:38] != \"-\":\n            return False\n        if date[38:40] != \"-\":\n            return False\n        if date[40:42] != \"-\":\n            return False\n        if date[42:44] != \"-\":\n            return False\n        if date[44:46] != \"-\":\n            return False\n        if date[46:48] != \"-\":\n            return False\n        if date[48:50] != \"-\":\n            return False\n        if date[50:52] != \"-\":\n            return False\n        if date[52:54] != \"-\":\n            return False\n        if date[54:56] != \"-\":\n            return False\n        if date[56:58] != \"-\":\n            return False\n        if date[58:60] != \"-\":\n            return False\n        if date[60:62] != \"-\":\n            return False\n        if date[62:64] != \"-\":\n            return False\n        if date[64:66] != \"-\":\n            return False\n        if date[66:68] != \"-\":\n            return False\n        if date[68:7"], ["def split_words(txt):\n    \"\"\"\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3\n    \"\"\"\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return len(txt) // 2\n\n"], ["def is_sorted(lst):\n    \"\"\"\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    \"\"\"\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i] += 1\n    if any(2 < count_digit[i] for i in lst):\n        return False\n    return True\n\n"], ["def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n\n    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n    if interval1[1] <= interval2[0] or interval2[1] <= interval1[0]:\n        return \"NO\"\n\n    if is_prime(interval1[0]) and is_prime(interval2[0]):\n        return \"YES\"\n\n    return \"NO\"\n\n"], ["def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not arr:\n        return None\n    arr = sorted(arr)\n    prod = 1\n    for i in arr:\n        prod *= i\n    return prod\n\n"], ["def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n            Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n            Output: [1, 2, 1]\n\n            Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n            Output: [1]\n    \"\"\"\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n                val = min(val, sum(temp))\n    return val\n\n"], ["def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n               = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if 0 == n:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        my_tri.append(my_tri[i - 1] + my_tri[i - 2] + my_tri[i - 3])\n    return my_tri\n\n"], ["def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit % 2 == 1:\n            odd_count += 1\n        else:\n            product *= int_digit\n    if odd_count == 0:\n        return 0\n    else:\n        return product\n"], ["def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    for i in range(len(opening_bracket_index)):\n        if opening_bracket_index[i] == closing_bracket_index[i]:\n            cnt += 1\n    return cnt >= 2\n\n"], ["def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n\n\n    \"\"\"\n    import math\n\n    squared = 0\n    for i in lst:\n        squared += i ** 2\n    return math.ceil(squared)\n\n"], ["def check_if_last_char_is_a_letter(txt):\n    \"\"\"\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False\n    \"\"\"\n    last_char = txt[-1]\n    if last_char.isalpha() and last_char not in \" \":\n        return True\n    return False\n\n"], ["def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    ind = -1\n    i = 1\n    while len(arr) > i:\n        if arr[i] >= arr[i-1]:\n            ind = i\n            break\n        i += 1\n    return ind\n\n"], ["def largest_smallest_integers(lst):\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    \"\"\"\n    smallest = list(filter(lambda x: 0 > x, lst))\n    largest = list(filter(lambda x: 0 < x, lst))\n    if len(smallest) == 0 and len(largest) == 0:\n        return None, None\n    elif len(smallest) == 0:\n        return largest, smallest[0]\n    elif len(largest) == 0:\n        return smallest, largest[0]\n    else:\n        return max(smallest), min(largest)\n\n"], ["def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    temp_a, temp_b = a, b\n    if isinstance(temp_a, str):\n        temp_a = temp_a.replace(\",\", \".\")\n    if isinstance(temp_b, str):\n        temp_b = temp_b.replace(\",\", \".\")\n    if isinstance(temp_a, float) and isinstance(temp_b, float):\n        return max(temp_a, temp_b)\n    if isinstance(temp_a, int) and isinstance(temp_b, int):\n        return max(temp_a, temp_b)\n    return None\n\n"], ["def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    sum_of_even = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0 and i % 4 == 0:\n            sum_of_even += i\n    return sum_of_even == n\n"], ["def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n + 1):\n        fact_i *= i\n        special_fact *= i\n    return special_fact\n\n"], ["def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while len(text) > i:\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\" + text[i]\n            elif end - start > 0:\n                new_text += text[i]\n            start = end\n            end = 0\n        i += 1\n    return new_text\n\n"], ["def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lst = file_name.split(sep=\".\")\n    if 2 != len(lst):\n        return \"No\"\n    if not lst[1] in suf:\n        return \"No\"\n    if len(lst[0]) == 0:\n        return \"No\"\n    if lst[0][0].isalpha():\n        return \"No\"\n    return \"Yes\"\n"], ["def sum_squares(lst):\n    \"\"\" \"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        if 0 == i % 3:\n            result.append(lst[i] ** 2)\n        elif 0 == i % 4:\n            result.append(lst[i] ** 3)\n    return sum(result)\n\n"], ["def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n            Input: sentence = \"This is a test\"\n            Output: \"is\"\n\n    Example 2:\n            Input: sentence = \"lets go for swimming\"\n            Output: \"go for\"\n\n    Constraints:\n            * 1 <= len(sentence) <= 100\n            * sentence contains only letters\n    \"\"\"\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if 1 == len(word):\n            flg = 1\n        if 0 == len(word) or flg == 1:\n            continue\n        for i in range(1, len(word)):\n            if word[i] == word[i - 1]:\n                flg = 1\n        if flg == 1:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n\n"], ["def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denominator = int(b) * int(d)\n    if numerator == denominator:\n        return True\n    else:\n        return False\n\n"], ["def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def digits_sum(n):\n        neg = 1\n        if 0 > n:\n            n, neg = -1 * n, -1\n        return sum(map(abs, str(n).split(''))) * neg\n\n    nums.sort(key=digits_sum)\n    return nums\n\n"], ["def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1\n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if 10 < num:\n            odd_digits = (1, 3, 5, 7, 9)\n            if num % 10 in odd_digits:\n                count += 1\n    return count\n\n"], ["def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n            For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n            Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n            Input: n = 5\n            Output: 1\n            Explanation:\n            a = [1, 3, 7, 13, 21]\n            The only valid triple is (1, 7, 13).\n    \"\"\"\n    A = [i * i - i + 1 for i in range(1, n + 1)]\n    ans = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if A[i] + A[j] + A[k] % 3 == 0:\n                    ans.append(A[i] + A[j] + A[k])\n    return len(ans)\n\n"], ["def bf(planet1, planet2):\n    \"\"\"\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    \"\"\"\n    planet_names = (\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\",\n    )\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet2, planet1)\n    else:\n        return (planet1, planet2)\n\n"], ["def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i) % 2 == 1:\n            new_lst.append(i)\n    return new_lst\n\n"], ["def x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n\n    \"\"\"\n    if 1 == n:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return x\n    return y\n\n"], ["def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    # TODO: Write your code here.\n    return 0\n"], ["def compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    pass\n"], ["def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len(\n        [x for x in extensions[0] if x.isalpha() and x.islower()]\n    )\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len(\n            [x for x in s if x.isalpha() and x.islower()]\n        )\n        if my_val < val:\n            strong = s\n    return class_name + \".\" + strong\n"], ["def cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        if a[i:i+l] == pat:\n            return True\n    return False\n\n"], ["def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n           even_odd_count(-12) ==> (1, 1)\n           even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if 0 == int(i) % 2:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n"], ["def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"]\n    i = 12\n    res = \"\"\n    while number:\n        res += sym[i]\n        number -= num[i]\n        i -= 1\n    return res[::-1]\n\n"], ["def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Your code here\n    return False\n"], ["def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # Write your code here\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = 0\n        for char in word:\n            count += 1\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n"], ["def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n            the number of carrots that you have eaten.\n    @need : integer\n            the number of carrots that you need to eat.\n    @remaining : integer\n            the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    if remaining >= need:\n        return [number + need, remaining - need]\n    else:\n        return [number, remaining]\n"], ["def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( // )\n    Exponentiation ( ** )\n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n            The length of operator list is equal to the length of operand list minus one.\n            Operand is a list of of non-negative integers.\n            Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression += oprt + str(oprn)\n    return eval(expression)\n\n"], ["def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n            idx += 1\n        else:\n            new_str[idx] = i\n            idx += 1\n    if flg == 0:\n        new_str = new_str[::-1]\n    return \"\".join(new_str)\n\n"], ["def string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    import hashlib\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n\n"], ["def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    return [i for i in range(lower, upper + 1) if i % 2 == 0]\n\n"], ["from typing import List\n\n\ndef has_close_elements(e: List[float], threshold: float) -> bool:\n    \"\"\"Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for idx, elem in enumerate(e):\n        for idx2, elem2 in enumerate(e):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n    return False\n\n"], ["from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    result2 = []\n    current_depth = 0\n    for c in paren_string:\n        if c == \"(\":\n            current_depth += 1\n            result2.append(c)\n        elif c == \")\":\n            current_depth -= 1\n            if current_depth == 0:\n                result.append(\"\".join(result2))\n                result2 = []\n        else:\n            result2.append(c)\n    if len(result2) > 0:\n        result.append(\"\".join(result2))\n    return result\n\n"], ["def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer_part, decimals = divmod(number, 1)\n    return decimals\n\n"], ["from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    result = 0\n    for op in operations:\n        result += op\n    return result < 0\n\n"], ["from typing import List\n\n\ndef mean_absolute_deviation(x2: List[float]) -> float:\n    \"\"\"For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(x2) / len(x2)\n    return sum(abs(x - mean) for x in x2) / len(x2)\n\n"], ["from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    result2 = []\n    for n in numbers[:-1]:\n        result2.append(n)\n        result2.append(delimeter)\n    result2.append(numbers[-1])\n    return result2\n\n"], ["from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n\n    def parse_paren_group(s):\n        depth = 0\n        depth2 = 0\n        for c in s:\n            if c == \"(\":\n                depth += 1\n            elif c == \")\":\n                depth -= 1\n            elif c == \"(\":\n                depth2 += 1\n            elif c == \")\":\n                depth2 -= 1\n        return depth, depth2\n\n    def parse_paren_group_2(s):\n        depth = 0\n        depth2 = 0\n        for c in s:\n            if c == \"(\":\n                depth += 1\n            elif c == \")\":\n                depth -= 1\n            elif c == \"(\":\n                depth2 += 1\n            elif c == \")\":\n                depth2 -= 1\n        return depth, depth2\n\n    def parse_paren_group_3(s):\n        depth = 0\n        depth2 = 0\n        depth3 = 0\n        for c in s:\n            if c == \"(\":\n                depth += 1\n            elif c == \")\":\n                depth -= 1\n            elif c == \"(\":\n                depth2 += 1\n            elif c == \")\":\n                depth2 -= 1\n            elif c == \"(\":\n                depth3 += 1\n            elif c == \")\":\n                depth3 -= 1\n        return depth, depth2, depth3\n\n    def parse_paren_group_4(s):\n        depth = 0\n        depth2 = 0\n        depth3 = 0\n        depth4 = 0\n        for c in s:\n            if c == \"(\":\n                depth += 1\n            elif c == \")\":\n                depth -= 1\n            elif c == \"(\":\n                depth2 += 1\n            elif c == \")\":\n                depth2 -= 1\n            elif c == \"(\":\n                depth3 += 1\n            elif c == \")\":\n                depth3 -= 1\n            elif c == \"(\":\n                depth4 += 1\n            elif c == \")\":\n                depth4 -= 1\n        return depth, depth2, depth3, depth4\n\n    def parse_paren_group_5(s):\n        depth = 0\n        depth2 = 0\n        depth3 = 0\n        depth4 = 0\n        depth5 = 0\n        for c in s:\n            if c == \"(\":\n                depth += 1\n            elif c == \")\":\n                depth -= 1\n            elif c == \"(\":\n                depth2 += 1\n            elif c == \")\":\n                depth2 -= 1\n            elif c == \"(\":\n                depth3 += 1\n            elif c == \")\":\n                depth3 -= 1\n            elif c == \"(\":\n                depth4 += 1\n            elif c == \")\":\n                depth4 -= 1\n            elif c == \"(\":\n                depth5 += 1\n            elif c == \")\":\n                depth5 -= 1\n        return depth, depth2, depth3, depth4, depth5\n\n    def parse_paren_group_6(s):\n        depth = 0\n        depth2 = 0\n        depth3 = 0\n        depth4 = 0\n        depth5 = 0\n        depth6 = 0\n        for c in s:\n            if c == \"(\":\n                depth += 1\n            elif c == \")\":\n                depth -= 1\n            elif c == \"(\":\n                depth2 += 1\n            elif c == \")\":\n                depth2 -= 1\n            elif c == \"(\":\n                depth3 += 1\n            elif c == \")\":\n                depth3 -= 1\n            elif c == \"(\":\n                depth4 += 1\n            elif c == \")\":\n                depth4 -= 1\n            elif c == \"(\":\n                depth5 += 1\n            elif c == \")\":\n                depth5 -= 1\n            elif c == \"(\":\n                depth6 += 1\n            elif c == \")\":\n                depth6 -= 1\n        return depth, depth2, depth3, depth4, depth5, depth6\n\n    def parse_paren_group_7(s):\n        depth = 0\n        depth2 = 0\n        depth3 = 0\n        depth4 = 0\n        depth5 = 0\n        depth6 = 0\n        depth7 = 0\n        for c in s:\n            if c == \"(\":\n                depth += 1\n            elif c == \")\":\n                depth -= 1"], ["from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]\n\n"], ["from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    sum_value = 0\n    prod_value = 1\n    for number in numbers:\n        sum_value += number\n        prod_value *= number\n    return sum_value, prod_value\n\n"], ["from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result2 = None\n    result = []\n    for n in numbers:\n        if result2 is None:\n            result2 = n\n            result.append(n)\n        else:\n            if n > result2:\n                result2 = n\n                result.append(n)\n            else:\n                result.append(result2)\n    return result\n\n"], ["def is_palindrome(string2: str) -> bool:\n    \"\"\"Test if given string is a palindrome\"\"\"\n    return string2 == string2[::-1]\n\n\ndef make_palindrome(string2: str) -> str:\n    \"\"\"Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string2:\n        return \"\"\n    beginning_of_suffix = 0\n    end_of_suffix = 0\n    while end_of_suffix < len(string2):\n        if is_palindrome(string2[end_of_suffix:end_of_suffix + 1]):\n            end_of_suffix += 1\n        else:\n            beginning_of_suffix += 1\n    return string2[beginning_of_suffix:end_of_suffix + 1]\n\n"], ["from typing import List\n\n\ndef string_xor(a2: str, b: str) -> str:\n    \"\"\"Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    def xor(i, j):\n        if i == j:\n            return \"0\"\n        if i == \"0\":\n            return j\n        if j == \"0\":\n            return i\n        return \"1\"\n\n    return \"\".join(xor(a2[i], b[j]) for i, j in zip(range(len(a2)), range(len(b))))\n\n"], ["from typing import List, Optional\n\n\ndef longest(s2: List[str]) -> Optional[str]:\n    \"\"\"Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not s2:\n        return None\n    if len(s2) == 1:\n        return s2[0]\n    return max(s2, key=len)\n\n"], ["def greatest_common_divisor(a: int, b2: int) -> int:\n    \"\"\"Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b2:\n        a, b2 = b2, a % b2\n    return a\n\n"], ["from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    result2 = []\n    for i in range(len(string)):\n        result2.append(string[:i])\n    return result2\n\n"], ["def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n))\n"], ["def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string))\n"], ["from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    note_map = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    note_list = []\n    for note in music_string:\n        note_list.append(note_map[note])\n    return note_list\n\n"], ["def how_many_times(string: str, line: str) -> int:\n    \"\"\"Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    times = 0\n    for i in range(len(string) - len(line) + 1):\n        if string[i:i+len(line)] == line:\n            times += 1\n    return times\n"], ["from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n\n\nvalue_map = {\n    \"zero\": 0,\n    \"one\": 1,\n    \"two\": 2,\n    \"three\": 3,\n    \"four\": 4,\n    \"five\": 5,\n    \"six\": 6,\n    \"seven\": 7,\n    \"eight\": 8,\n    \"nine\": 9,\n}\n\n"], ["from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest_pair = None\n    distance = None\n    for idx, elem in enumerate(numbers):\n        for idx2, distance2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - distance2)\n                    closest_pair = (elem, distance2)\n                elif abs(elem - distance2) < abs(distance - distance2):\n                    distance = abs(elem - distance2)\n                    closest_pair = (elem, distance2)\n    return closest_pair\n\n"], ["from typing import List\n\n\ndef rescale_to_unit(x2: List[float]) -> List[float]:\n    \"\"\"Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_number = min(x2)\n    max_number = max(x2)\n    return [(x - min_number) / (max_number - min_number) for x in x2]\n\n"], ["from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [int(value) for value in values if isinstance(value, int)]\n\n"], ["def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n"], ["def largest_divisor(n: int) -> int:\n    \"\"\"For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for el in reversed(range(n)):\n        if n % el == 0:\n            return el\n    return n\n\n"], ["from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    import math\n\n    fact = []\n    n2 = 2\n    while n2 <= int(math.sqrt(n) + 1):\n        if n % n2 == 0:\n            fact.append(n2)\n            n //= n2\n        n2 += 1\n    if n > 1:\n        fact.append(n)\n    return fact\n\n"], ["from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    import collections\n\n    seen = collections.Counter()\n    for number in numbers:\n        if number in seen:\n            seen[number] -= 1\n        else:\n            seen[number] = 1\n    return list(seen.keys())\n\n"], ["def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.lower().upper()\n"], ["from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n"], ["from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\n"], ["def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x >= 0]\n"], ["def is_prime(k2):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if k2 < 2:\n        return False\n    for k in range(2, k2 - 1):\n        if k2 % k == 0:\n            return False\n    return True\n"], ["import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\"xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    start, end = -1.0, 1.0\n    while poly(xs, start) * poly(xs, end) > 0:\n        start *= 2.0\n        end *= 2.0\n    while end - start > 1e-10:\n        mid = (start + end) / 2.0\n        if poly(xs, mid) * poly(xs, start) * poly(xs, end) > 0:\n            start = mid\n        else:\n            end = mid\n    return start\n\n"], ["def sort_third(cos: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    cos = list(cos)\n    for i in range(len(cos)):\n        if cos[i] % 3 != 0:\n            cos[i], cos[i + 1], cos[i + 2] = cos[i + 2], cos[i + 1], cos[i]\n    return cos\n\n"], ["def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n"], ["def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    l2 = l[0]\n    for e in l:\n        if e > l2:\n            l2 = e\n    return l2\n\n"], ["def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    ns = []\n    for n2 in range(n):\n        if n2 % 11 == 0 or n2 % 13 == 0:\n            ns.append(n2)\n    return len(ns)\n"], ["def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    even = l[::2]\n    odds = l[1::2]\n    even.sort()\n    ans = []\n    for i in range(len(even)):\n        ans.append(even[i])\n        ans.append(odds[i])\n    return ans\n\n"], ["def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"], ["def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 89\n    elif n == 6:\n        return 233\n    elif n == 7:\n        return 144\n    elif n == 8:\n        return 71\n    elif n == 9:\n        return 35\n    elif n == 10:\n        return 17\n    elif n == 11:\n        return 6\n    elif n == 12:\n        return 3\n    elif n == 13:\n        return 2\n    elif n == 14:\n        return 1\n    elif n == 15:\n        return 0\n    elif n == 16:\n        return 1\n    elif n == 17:\n        return 0\n    elif n == 18:\n        return 1\n    elif n == 19:\n        return 0\n    elif n == 20:\n        return 1\n    elif n == 21:\n        return 0\n    elif n == 22:\n        return 1\n    elif n == 23:\n        return 0\n    elif n == 24:\n        return 1\n    elif n == 25:\n        return 0\n    elif n == 26:\n        return 1\n    elif n == 27:\n        return 0\n    elif n == 28:\n        return 1\n    elif n == 29:\n        return 0\n    elif n == 30:\n        return 1\n    elif n == 31:\n        return 0\n    elif n == 32:\n        return 1\n    elif n == 33:\n        return 0\n    elif n == 34:\n        return 1\n    elif n == 35:\n        return 0\n    elif n == 36:\n        return 1\n    elif n == 37:\n        return 0\n    elif n == 38:\n        return 1\n    elif n == 39:\n        return 0\n    elif n == 40:\n        return 1\n    elif n == 41:\n        return 0\n    elif n == 42:\n        return 1\n    elif n == 43:\n        return 0\n    elif n == 44:\n        return 1\n    elif n == 45:\n        return 0\n    elif n == 46:\n        return 1\n    elif n == 47:\n        return 0\n    elif n == 48:\n        return 1\n    elif n == 49:\n        return 0\n    elif n == 50:\n        return 1\n    elif n == 51:\n        return 0\n    elif n == 52:\n        return 1\n    elif n == 53:\n        return 0\n    elif n == 54:\n        return 1\n    elif n == 55:\n        return 0\n    elif n == 56:\n        return 1\n    elif n == 57:\n        return 0\n    elif n == 58:\n        return 1\n    elif n == 59:\n        return 0\n    elif n == 60:\n        return 1\n    elif n == 61:\n        return 0\n    elif n == 62:\n        return 1\n    elif n == 63:\n        return 0\n    elif n == 64:\n        return 1\n    elif n == 65:\n        return 0\n    elif n == 66:\n        return 1\n    elif n == 67:\n        return 0\n    elif n == 68:\n        return 1\n    elif n == 69:\n        return 0\n    elif n == 70:\n        return 1\n    elif n == 71:\n        return 0\n    elif n == 72:\n       "], ["def triples_sum_to_zero(flatt: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(flatt)):\n        for j in range(i + 1, len(flatt)):\n            for k in range(j + 1, len(flatt)):\n                if flatt[i] + flatt[j] + flatt[k] == 0:\n                    return True\n    return False\n\n"], ["def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # Write your code here.\n    pass\n"], ["def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n\n"], ["def pairs_sum_to_zero(p):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    for i, l1 in enumerate(p):\n        for j in range(i + 1, len(p)):\n            if l1 + p[j] == 0:\n                return True\n    return False\n\n"], ["def change_base(ret2: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    ret = \"\"\n    while ret2 > 0:\n        ret = str(ret2 % base) + ret\n        ret2 = ret2 // base\n    return ret\n\n"], ["def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2\n"], ["def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    n2 = [0, 0, 2, 0]\n    if n < 4:\n        return n2[n]\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\n"], ["def median(gl: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    gl = sorted(gl)\n    if len(gl) % 2 == 1:\n        return gl[len(gl) // 2]\n    else:\n        return (gl[len(gl) // 2 - 1] + gl[len(gl) // 2]) / 2\n\n"], ["def is_palindrome(line: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    for i in range(len(line)):\n        if line[i] != line[len(line) - 1 - i]:\n            return False\n    return True\n\n"], ["def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    p2 = 1\n    for i in range(n):\n        p2 *= p\n    return p2 % p\n\n"], ["def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"], ["def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiou'\n    return ''.join(char for char in text if char not in vowels)\n\n"], ["def below_threshold(e2: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for e in e2:\n        if e >= t:\n            return False\n    return True\n\n"], ["def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n"], ["def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    if len(s0) != len(s1):\n        return False\n    for i in range(len(s0)):\n        if s0[i] != s1[i]:\n            return False\n    return True\n\n"], ["def fib(i: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if i == 0:\n        return 0\n    elif i == 1:\n        return 1\n    else:\n        return fib(i - 1) + fib(i - 2)\n\n"], ["def correct_bracketing(brackets: str):\n    \"\"\"brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    n = 0\n    for b in brackets:\n        if b == \"<\":\n            n += 1\n        elif b == \">\":\n            n -= 1\n        else:\n            return False\n    return n == 0\n\n"], ["def monotonic(cos: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if cos == sorted(cos) or cos == sorted(cos, reverse=True):\n        return True\n    else:\n        return False\n"], ["def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    ret = set()\n    for e in l1:\n        for e2 in l2:\n            if e == e2:\n                ret.add(e)\n    return sorted(ret)\n\n"], ["def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n    def is_prime(n2):\n        if n2 < 2:\n            return False\n        for i in range(2, n2 - 1):\n            if n2 % i == 0:\n                return False\n        return True\n\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n    if n % 23 == 0:\n        return 23\n    if n % 29 == 0:\n        return 29\n    if n % 31 == 0:\n        return 31\n    if n % 37 == 0:\n        return 37\n    if n % 41 == 0:\n        return 41\n    if n % 43 == 0:\n        return 43\n    if n % 47 == 0:\n        return 47\n    if n % 53 == 0:\n        return 53\n    if n % 59 == 0:\n        return 59\n    if n % 61 == 0:\n        return 61\n    if n % 67 == 0:\n        return 67\n    if n % 71 == 0:\n        return 71\n    if n % 73 == 0:\n        return 73\n    if n % 79 == 0:\n        return 79\n    if n % 83 == 0:\n        return 83\n    if n % 89 == 0:\n        return 89\n    if n % 97 == 0:\n        return 97\n    if n % 101 == 0:\n        return 101\n    if n % 103 == 0:\n        return 103\n    if n % 107 == 0:\n        return 107\n    if n % 109 == 0:\n        return 109\n    if n % 113 == 0:\n        return 113\n    if n % 127 == 0:\n        return 127\n    if n % 131 == 0:\n        return 131\n    if n % 137 == 0:\n        return 137\n    if n % 139 == 0:\n        return 139\n    if n % 149 == 0:\n        return 149\n    if n % 151 == 0:\n        return 151\n    if n % 157 == 0:\n        return 157\n    if n % 163 == 0:\n        return 163\n    if n % 167 == 0:\n        return 167\n    if n % 173 == 0:\n        return 173\n    if n % 179 == 0:\n        return 179\n    if n % 181 == 0:\n        return 181\n    if n % 191 == 0:\n        return 191\n    if n % 193 == 0:\n        return 193\n    if n % 197 == 0:\n        return 197\n    if n % 199 == 0:\n        return 199\n    if n % 211 == 0:\n        return 211\n    if n % 223 == 0:\n        return 223\n    if n % 227 == 0:\n        return 227\n    if n % 229 == 0:\n        return 229\n    if n % 233 == 0:\n        return 233\n    if n % 239 == 0:"], ["def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))\n\n"], ["def correct_bracketing(brackets: str):\n    \"\"\"brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    n = 0\n    for b in brackets:\n        if b == \"(\":\n            n += 1\n        elif b == \")\":\n            n -= 1\n        else:\n            return False\n    return n == 0\n\n"], ["def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [x * (x + 1) / 2 for x in xs]\n\n"], ["def fibfib(i: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if i == 0:\n        return 0\n    if i == 1:\n        return 0\n    if i == 2:\n        return 1\n    if i == 3:\n        return 1\n    if i == 4:\n        return 2\n    if i == 5:\n        return 3\n    if i == 6:\n        return 5\n    if i == 7:\n        return 8\n    if i == 8:\n        return 13\n    if i == 9:\n        return 21\n    if i == 10:\n        return 34\n    if i == 11:\n        return 55\n    if i == 12:\n        return 89\n    if i == 13:\n        return 144\n    if i == 14:\n        return 233\n    if i == 15:\n        return 377\n    if i == 16:\n        return 610\n    if i == 17:\n        return 987\n    if i == 18:\n        return 1597\n    if i == 19:\n        return 2584\n    if i == 20:\n        return 4181\n    if i == 21:\n        return 6765\n    if i == 22:\n        return 10946\n    if i == 23:\n        return 17711\n    if i == 24:\n        return 28657\n    if i == 25:\n        return 46368\n    if i == 26:\n        return 75025\n    if i == 27:\n        return 121393\n    if i == 28:\n        return 196418\n    if i == 29:\n        return 317811\n    if i == 30:\n        return 514229\n    if i == 31:\n        return 832040\n    if i == 32:\n        return 1346269\n    if i == 33:\n        return 2178309\n    if i == 34:\n        return 3524578\n    if i == 35:\n        return 5702887\n    if i == 36:\n        return 8991256\n    if i == 37:\n        return 14907247\n    if i == 38:\n        return 24157817\n    if i == 39:\n        return 39088169\n    if i == 40:\n        return 63245986\n    if i == 41:\n        return 95667487\n    if i == 42:\n        return 144004074\n    if i == 43:\n        return 230295218\n    if i == 44:\n        return 372901771\n    if i == 45:\n        return 616021042\n    if i == 46:\n        return 980142943\n    if i == 47:\n        return 1560287701\n    if i == 48:\n        return 2500575400\n    if i == 49:\n        return 4001150800\n    if i == 50:\n        return 6501941760\n    if i == 51:\n        return 10203982880\n    if i == 52:\n        return 160079657600\n    if i == 53:\n       "], ["FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\n\ndef vowels_count(subs):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in subs)\n    return n_vowels\n\n"], ["def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    x2 = str(x)\n    if shift > len(x2):\n        return x2[::-1]\n    else:\n        return x2[shift:] + x2[:shift]\n\n"], ["def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n            digitSum(\"\") => 0\n            digitSum(\"abAB\") => 131\n            digitSum(\"abcCd\") => 67\n            digitSum(\"helloE\") => 69\n            digitSum(\"woArBld\") => 131\n            digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    if s == \"\":\n        return 0\n    else:\n        return sum(ord(c) for c in s if ord(c) >= 65 and ord(c) <= 90)\n\n"], ["def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    lis = list()\n    for nt in s.split(\" \"):\n        lis.append(int(nt))\n    return sum(lis) - sum(lis[:2]) - sum(lis[2:])\n\n"], ["def pluck(x2):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n            Input: [4,2,3]\n            Output: [2, 1]\n            Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n            Input: [1,2,3]\n            Output: [2, 1]\n            Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n            Input: []\n            Output: []\n\n    Example 4:\n            Input: [5, 0, 3, 0, 4, 2]\n            Output: [0, 1]\n            Explanation: 0 is the smallest value, but  there are two zeros,\n                                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n            * 1 <= nodes.length <= 10000\n            * 0 <= node.value\n    \"\"\"\n    if len(x2) == 0:\n        return []\n    evens = list(filter(lambda x: x % 2 == 0, x2))\n    if len(evens) == 0:\n        return [x2[0], 0]\n    return [evens[0], evens.index(min(evens))]\n\n"], ["def search(lst):\n    \"\"\"\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n            search([4, 1, 2, 2, 3, 1]) == 2\n            search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n            search([5, 5, 4, 4, 4]) == -1\n    \"\"\"\n    frq = [0] * (max(lst) + 1)\n    for i2 in lst:\n        frq[i2] += 1\n    ans = -1\n    for i in range(1, max(frq) + 1):\n        if frq[i] >= i:\n            ans = i\n    return ans\n\n"], ["def strange_sort_list(res2):\n    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    \"\"\"\n    res, switch = [], True\n    while res2:\n        res.append(min(res2) if switch else max(res2))\n        res2.remove(min(res2) if switch else max(res2))\n        switch = not switch\n    return res\n\n"], ["def triangle_area(a2, b, c):\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if a2 + b <= c or a2 + c <= b or b + c <= a2:\n        return -1\n    s = (a2 + b + c) / 2\n    return round(s * (s - a2) * (s - b) * (s - c), 2)\n\n"], ["def will_it_fly(x, w):\n    \"\"\"\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(x) > w:\n        return False\n    i, j = 0, len(x) - 1\n    while i < j:\n        if x[i] != x[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n\n"], ["def smallest_change(lines):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    ans = 0\n    for i in range(len(lines) // 2):\n        if lines[i] != lines[len(lines) - 1 - i]:\n            ans += 1\n    return ans\n\n"], ["def total_match(lst1, lst2):\n    \"\"\"\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    \"\"\"\n    l1 = 0\n    for line in lst1:\n        l1 += len(line)\n    l2 = 0\n    for line in lst2:\n        l2 += len(line)\n    if l1 == l2:\n        return lst1\n    else:\n        return lst2\n\n"], ["def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n\n    def is_prime(n):\n        for j2 in range(2, n):\n            if n % j2 == 0:\n                return False\n        return True\n\n    for i in range(2, 101):\n        if is_prime(i):\n            return False\n    return True\n\n"], ["def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if n == 1:\n        return x == 1\n    n2 = 1\n    while n2 < n:\n        n2 *= 2\n    if n2 == n:\n        return True\n    return False\n\n"], ["def iscube(pro):\n    \"\"\"\n    Write a function that takes an integer a and returns True\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    \"\"\"\n    pro = abs(pro)\n    if pro == 0:\n        return True\n    if pro % 1 == 0:\n        return False\n    if pro % 2 == 0:\n        return False\n    if pro % 3 == 0:\n        return False\n    return True\n\n"], ["def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    primes = (\"2\", \"3\", \"5\", \"7\", \"B\", \"D\")\n    i2 = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            i2 += 1\n    return i2\n\n"], ["def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    # Your code here\n    pass\n\n"], ["def is_happy(lines):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(lines) < 3:\n        return False\n    for i in range(len(lines) - 2):\n        if lines[i] == lines[i + 1] and lines[i] == lines[i + 2]:\n            return False\n    return True\n\n"], ["def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n                     GPA       |    Letter grade\n                      4.0                A+\n                    > 3.7                A\n                    > 3.3                A-\n                    > 3.0                B+\n                    > 2.7                B\n                    > 2.3                B-\n                    > 2.0                C+\n                    > 1.7                C\n                    > 1.3                C-\n                    > 1.0                D+\n                    > 0.7                D\n                    > 0.0                D-\n                      0.0                E\n\n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    out = []\n    for gpa in grades:\n        if gpa == 4.0:\n            out.append(\"A+\")\n        elif gpa > 3.7:\n            out.append(\"A\")\n        elif gpa > 3.3:\n            out.append(\"A-\")\n        elif gpa > 3.0:\n            out.append(\"B+\")\n        elif gpa > 2.7:\n            out.append(\"B\")\n        elif gpa > 2.3:\n            out.append(\"B-\")\n        elif gpa > 2.0:\n            out.append(\"C+\")\n        elif gpa > 1.7:\n            out.append(\"C\")\n        elif gpa > 1.3:\n            out.append(\"C-\")\n        elif gpa > 1.0:\n            out.append(\"D+\")\n        elif gpa > 0.7:\n            out.append(\"D\")\n        elif gpa > 0.0:\n            out.append(\"D-\")\n        else:\n            out.append(\"E\")\n    return out\n\n"], ["def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    pl = len(string)\n    if pl == 0 or pl == 1:\n        return False\n    for i in range(2, pl):\n        if string[i] == string[i - 1]:\n            return False\n    return True\n\n"], ["def starts_one_ends(i):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if i == 1:\n        return 1\n    else:\n        return 0 + starts_one_ends(i - 1)\n\n"], ["def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Write your code here\n    return \"\"\n"], ["def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(x for x in lst if x % 2 == 0)\n\n"], ["def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return ''.join(sorted(s, key=ord))\n\n"], ["def get_row(lst, x2):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    coords = [\n        (i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x2\n    ]\n    coords.sort(key=lambda x: x[0])\n    return coords\n\n"], ["def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Write your code here\n    pass\n"], ["def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    H = \"abcdefghijklmnopqrstuvwxyz\"\n    out = \"\"\n    for c in s:\n        if c in H:\n            out += H[(H.index(c) + 2) % len(H)]\n        else:\n            out += c\n    return out\n\n"], ["def next_smallest(lines):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n\n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    lines = sorted(set(lines))\n    if len(lines) == 1:\n        return lines[0]\n    else:\n        return lines[1]\n\n"], ["def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    import re\n    return len(re.findall(r\"I\", S))\n\n"], ["def any_int(x2, y, z):\n    \"\"\"\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    any_int(5, 2, 7) \u279e True\n\n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n\n    any_int(3.6, -2.2, 2) \u279e False\n\n\n\n    \"\"\"\n    if isinstance(x2, int) and isinstance(y, int) and isinstance(z, int):\n        if (x2 + y == z) or (x2 + z == y) or (y + z == x2):\n            return True\n    return False\n"], ["def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i2, chr(ord(i2) + 2)) for i2 in vowels])\n    return \"\".join([vowels_replace[letter] for letter in message])\n\n"], ["def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n\n    def isPrime(n):\n        for n2 in range(2, int(n ** 0.5) + 1):\n            if n % n2 == 0:\n                return False\n        return True\n\n    maxx = 0\n    for x in lst:\n        if isPrime(x):\n            if x > maxx:\n                maxx = x\n    return maxx\n\n"], ["def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict.keys()) == 0:\n        return False\n    else:\n        key2 = \"start\"\n        for key in dict.keys():\n            if isinstance(key, str) == False:\n                key2 = \"mixed\"\n                break\n            if key2 == \"start\":\n                if key.isupper():\n                    key2 = \"upper\"\n                else:\n                    key2 = \"lower\"\n            elif key2 == \"upper\":\n                if key.islower():\n                    key2 = \"lower\"\n                else:\n                    key2 = \"mixed\"\n            elif key2 == \"lower\":\n                if key.isupper():\n                    key2 = \"upper\"\n                else:\n                    key2 = \"mixed\"\n            elif key2 == \"mixed\":\n                if key.islower():\n                    key2 = \"lower\"\n                elif key.isupper():\n                    key2 = \"upper\"\n                else:\n                    key2 = \"mixed\"\n        return key2 == \"upper\"\n\n"], ["def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    primes = []\n    for n2 in range(2, n):\n        is_prime = True\n        for j in range(2, n2):\n            if n2 % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(n2)\n    return primes\n\n"], ["def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    return a * b\n\n"], ["def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n\n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    i2 = 0\n    for i in range(0, len(s), 2):\n        if s[i] == s[i2]:\n            i2 += 1\n        else:\n            i2 = 0\n    return i2\n\n"], ["def closest_integer(num2):\n    \"\"\"\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    \"\"\"\n    from math import floor, ceil\n\n    if num2.count(\".\") == 1:\n        # remove trailing zeros\n        while num2[-1] == \"0\":\n            num2 = num2[:-1]\n    num = float(num2)\n    if num2[-2:] == \".5\":\n        if num > 0:\n            return floor(num)\n        else:\n            return ceil(num)\n    elif num2[-2:] == \".0\":\n        if num > 0:\n            return floor(num)\n        else:\n            return ceil(num)\n    else:\n        if num > 0:\n            return floor(num)\n        else:\n            return ceil(num)\n\n"], ["def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n % 2 == 0:\n        return [n, n // 2]\n    else:\n        return [n // 2, n]\n\n"], ["def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n\n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    if not s:\n        return []\n    words = []\n    for letter in s:\n        if letter == \",\":\n            words.append(letter)\n        else:\n            words.append(letter.lower())\n    return words\n\n"], ["def choose_num(x, y2):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > y2:\n        return -1\n    if y2 % 2 == 0:\n        return y2\n    else:\n        return choose_num(x + 1, y2 + 1)\n\n"], ["def rounded_avg(i2, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if m < i2:\n        return -1\n    summation = 0\n    for i in range(i2, m + 1):\n        summation += i\n    return summation // m\n"], ["def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n\n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    odd_digit_elements = []\n    for c2 in x:\n        if c2 % 2 == 0:\n            odd_digit_elements.append(c2)\n    return sorted(set(x) - set(odd_digit_elements))\n\n"], ["def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n                    -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n                    -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n                    -> sort arr -> [-1, 1, 55]\n                    -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n\ndic = {\n    1: \"One\",\n    2: \"Two\",\n    3: \"Three\",\n    4: \"Four\",\n    5: \"Five\",\n    6: \"Six\",\n    7: \"Seven\",\n    8: \"Eight\",\n    9: \"Nine\",\n}\n\n"], ["def f(n):\n    \"\"\"Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    ret = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            i2 = 1\n            for j in range(1, i + 1):\n                i2 *= j\n            ret.append(i2)\n        else:\n            ret.append(i)\n    return ret\n\n"], ["def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n            Input: 3\n            Output: (1, 2)\n            Explanation:\n            Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n            Input: 12\n            Output: (4, 6)\n            Explanation:\n            Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n            1. 1 <= n <= 10^3\n            2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_palindrome_count += 1\n            else:\n                odd_palindrome_count += 1\n\n    return even_palindrome_count, odd_palindrome_count\n\n"], ["def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n\n    def digits_sum(arr2):\n        neg = 1\n        if arr2 < 0:\n            arr2, neg = -1 * arr2, -1\n        sum = 0\n        for i in range(len(arr2)):\n            sum += abs(arr2[i])\n        return sum, neg\n\n    sum, neg = digits_sum(arr)\n    if neg:\n        return sum + 1\n    else:\n        return sum\n\n"], ["def move_one_ball(ball):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n            You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                             be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                            array by performing any number of right shift operations.\n\n    \"\"\"\n    if len(ball) == 0:\n        return True\n    sorted_array = sorted(ball)\n    my_arr = []\n    min_value = min(ball)\n    max_value = max(ball)\n    for i in range(len(sorted_array)):\n        if sorted_array[i] == min_value:\n            my_arr.append(sorted_array[i])\n        else:\n            my_arr.append(sorted_array[i])\n    if len(my_arr) == len(ball):\n        return True\n    else:\n        return False\n\n"], ["def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if odd == 0 and even == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n"], ["def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            dict1[i]=list1.count(i)\n            t=list1.count(i)\n    return dict1\n"], ["def reverse_delete(line, c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    line = \"\".join([char for char in line if char not in c])\n    return line, line == line[::-1]\n"], ["def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    res = []\n    for arr in lst:\n        res.append(len(list(filter(str.isdigit, arr))))\n    return res\n\n"], ["def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    s2 = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if s < 0:\n            s = 0\n        s2 += num\n    return s2\n\n"], ["def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # Write your code here\n    # 1. Find the max number of buckets\n    max_buckets = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_buckets += 1\n    # 2. Find the max number of units of water\n    max_units = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units += 1\n    # 3. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 4. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 5. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 6. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 7. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 8. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 9. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 10. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 11."], ["def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n"], ["def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    result = []\n    for s2 in s.split():\n        n_consonants = 0\n        for i in range(0, len(s2)):\n            if s2[i].lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]:\n                n_consonants += 1\n        if n_consonants == n:\n            result.append(s2)\n    return result\n"], ["def get_closest_vowel(lines):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    if len(lines) < 3:\n        return \"\"\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"O\", \"U\", \"I\"}\n    vowels_count = 0\n    for line in lines:\n        for vowel in vowels:\n            if vowel in line:\n                vowels_count += 1\n    if vowels_count == 0:\n        return \"\"\n    if vowels_count == 1:\n        return vowels[0]\n    if vowels_count == 2:\n        return vowels[1]\n    if vowels_count == 3:\n        return vowels[2]\n    return \"\"\n\n"], ["def match_parens(lst):\n    \"\"\"\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    \"\"\"\n\n    def check(s):\n        i2 = 0\n        for i in s:\n            if i == \"(\":\n                i2 = i2 + 1\n            else:\n                i2 = i2 - 1\n        return i2 == 0\n\n    return check(lst[0]) and check(lst[1])\n\n"], ["def maximum(ans2, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n            Input: arr = [-3, -4, 5], k = 3\n            Output: [-4, -3, 5]\n\n    Example 2:\n\n            Input: arr = [4, -4, 4], k = 2\n            Output: [4, 4]\n\n    Example 3:\n\n            Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n            Output: [2]\n\n    Note:\n            1. The length of the array will be in the range of [1, 1000].\n            2. The elements in the array will be in the range of [-1000, 1000].\n            3. 0 <= k <= len(arr)\n    \"\"\"\n    if k == 0:\n        return []\n    if k == 1:\n        return arr\n    if k == 2:\n        return max(arr[0], arr[1])\n    if k == 3:\n        return max(arr[0], max(arr[1], arr[2]))\n    if k == 4:\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]))\n    if k == 5:\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]))\n    if k == 6:\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]), max(arr[7], arr[8]))\n    if k == 7:\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]), max(arr[7], arr[8]), max(arr[9], arr[10]))\n    if k == 8:\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]), max(arr[7], arr[8]), max(arr[9], arr[10]), max(arr[11], arr[12]))\n    if k == 9:\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]), max(arr[7], arr[8]), max(arr[9], arr[10]), max(arr[11], arr[12]), max(arr[13], arr[14]))\n    if k == 10:\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]), max(arr[7], arr[8]), max(arr[9], arr[10]), max(arr[11], arr[12]), max(arr[13], arr[14]), max(arr[15], arr[16]))\n    if k == 11:\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]), max(arr[7], arr[8]), max(arr[9], arr[10]), max(arr[11], arr[12]), max(arr[13], arr[14]), max(arr[15], arr[16]), max(arr[17], arr[18]))\n    if k == 12:\n        return max(arr[0], max(arr[1], arr[2]), max(arr[3], arr[4]), max(arr[5], arr[6]), max(arr[7], arr[8]), max(arr[9], arr[10]), max(arr[11], arr[12]), max(arr[13], arr[14]), max(arr[15], arr[16]), max(arr[17], arr[18]), max(arr[19], arr[20]))\n    if k == 13:\n        return max(arr[0], max(arr"], ["def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(x for x in lst if x % 2 == 1)\n\n"], ["def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return sum(arr[i:i+k] for i in range(len(arr)-k+1))\n"], ["def get_odd_collatz(i):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n            1. Collatz(1) is [1].\n            2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if i % 2 == 0:\n        odd_collatz = []\n    else:\n        odd_collatz = [i]\n    while i > 1:\n        if i % 2 == 0:\n            i = i / 2\n        else:\n            i = 3 * i + 1\n        odd_collatz.append(i)\n    return sorted(odd_collatz)\n\n"], ["def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    try:\n        date = date.strip()\n        month, day2, year = date.split(\"-\")\n        month, day2, year = int(month), int(day2), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12] and day2 < 1 or day2 > 31:\n            return False\n        if month in [4, 6, 9, 11] and day2 < 1 or day2 > 30:\n            return False\n        if month == 2 and day2 < 1 or day2 > 29:\n            return False\n        if month in [2, 4, 6, 8, 10, 12] and day2 < 1 or day2 > 31:\n            return False\n        if len(date) == 10:\n            return True\n        else:\n            return False\n    except:\n        return False\n"], ["def split_words(line):\n    \"\"\"\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3\n    \"\"\"\n    if \" \" in line:\n        return line.split()\n    elif \",\" in line:\n        return line.split(\",\")\n    else:\n        return len(line.lower()) % 2\n\n"], ["def is_sorted(lst):\n    \"\"\"\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    \"\"\"\n    count_digit = dict([(i2, 0) for i2 in lst])\n    for i2 in lst:\n        count_digit[i2] += 1\n    if any(count_digit[i2] > 2 for i2 in lst):\n        return False\n    return True\n\n"], ["def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n\n    def is_prime(p):\n        if p == 1 or p == 0:\n            return False\n        if p == 2:\n            return True\n        for i in range(2, p):\n            if p % i == 0:\n                return False\n        return True\n\n    if interval1[1] <= interval2[0] or interval2[1] <= interval1[0]:\n        return \"NO\"\n\n    if interval1[0] == interval2[0]:\n        return \"YES\"\n\n    if interval1[1] - interval2[0] == 1:\n        return \"YES\"\n\n    if is_prime(interval1[1] - interval2[0]):\n        return \"YES\"\n\n    return \"NO\"\n\n"], ["def prod_signs(signs):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not signs:\n        return None\n    prod = 1\n    for sign in signs:\n        prod *= sign\n    return prod\n\n"], ["def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n            Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n            Output: [1, 2, 1]\n\n            Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n            Output: [1]\n    \"\"\"\n    n = len(grid)\n    val = n * n + 1\n    for i2 in range(n):\n        for j in range(n):\n            if grid[i2][j] == 1:\n                temp = []\n                if i2 != 0:\n                    temp.append(grid[i2 - 1][j])\n                if j != 0:\n                    temp.append(grid[i2][j - 1])\n                if i2 != n - 1:\n                    temp.append(grid[i2 + 1][j])\n                if j != n - 1:\n                    temp.append(grid[i2][j + 1])\n                val = min(val, sum(temp))\n    return val\n\n"], ["def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n               = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i2 in range(2, n + 1):\n        my_tri.append(my_tri[i2 - 1] + my_tri[i2 - 2] + my_tri[i2 - 3])\n    return my_tri\n\n"], ["def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    n2 = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit % 2 == 1:\n            odd_count += 1\n        n2 *= int_digit\n    if odd_count == 0:\n        return 0\n    else:\n        return n2\n"], ["def is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for f in range(len(string)):\n        if string[f] == \"[\":\n            opening_bracket_index.append(f)\n        else:\n            closing_bracket_index.append(f)\n    closing_bracket_index.reverse()\n    cnt = 0\n    for i in range(len(opening_bracket_index)):\n        if opening_bracket_index[i] == closing_bracket_index[i]:\n            cnt += 1\n    return cnt >= 2\n\n"], ["def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n\n\n    \"\"\"\n    import math\n\n    result = 0\n    for num in lst:\n        result += num ** 2\n    return math.ceil(result)\n\n"], ["def check_if_last_char_is_a_letter(txt):\n    \"\"\"\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False\n    \"\"\"\n    last_char = txt[-1]\n    if last_char.isalpha() and last_char not in \" \":\n        return True\n    return False\n\n"], ["def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    ind = -1\n    m = 1\n    while m < len(arr):\n        if arr[m] >= arr[m+1]:\n            ind = m\n            m += 1\n        else:\n            m += 1\n    return ind\n\n"], ["def largest_smallest_integers(lst):\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    \"\"\"\n    smallest = list(filter(lambda x2: x2 < 0, lst))\n    largest = list(filter(lambda x2: x2 > 0, lst))\n    if len(smallest) == 0 and len(largest) == 0:\n        return None, None\n    elif len(smallest) == 0:\n        return largest, smallest[0]\n    elif len(largest) == 0:\n        return smallest, largest[0]\n    else:\n        return max(smallest), min(largest)\n\n"], ["def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    a2, temp_b = a, b\n    if isinstance(a2, str):\n        a2 = a2.replace(\",\", \".\")\n        temp_b = float(a2)\n    if isinstance(temp_b, str):\n        temp_b = temp_b.replace(\",\", \".\")\n        a2 = float(temp_b)\n    if a2 > b:\n        return a2\n    return None\n\n"], ["def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    sum_of_even = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0 and i % 4 == 0:\n            sum_of_even += i\n    return sum_of_even == n\n"], ["def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    fact_i = 1\n    fact = 1\n    for i in range(1, n + 1):\n        fact_i *= i\n        fact *= i\n    return fact_i\n\n"], ["def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    new_text = \"\"\n    start2 = 0\n    start, end = 0, 0\n    while start2 < len(text):\n        if text[start2] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\" + text[start2]\n            elif end - start > 0:\n                new_text += text[start2]\n            start2 += 1\n        start += 1\n    return new_text\n\n"], ["def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    suf = [\"txt\", \"exe\", \"dll\"]\n    lines = file_name.split(sep=\".\")\n    if len(lines) != 2:\n        return \"No\"\n    if not lines[1] in suf:\n        return \"No\"\n    if len(lines[0]) == 0:\n        return \"No\"\n    if lines[0][0].isalpha():\n        return \"No\"\n    return \"Yes\"\n"], ["def sum_squares(lst):\n    \"\"\" \"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    result = []\n    for f in range(len(lst)):\n        if f % 3 == 0:\n            result.append(lst[f] ** 2)\n        elif f % 4 == 0:\n            result.append(lst[f] ** 3)\n        else:\n            result.append(lst[f])\n    return sum(result)\n\n"], ["def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n            Input: sentence = \"This is a test\"\n            Output: \"is\"\n\n    Example 2:\n            Input: sentence = \"lets go for swimming\"\n            Output: \"go for\"\n\n    Constraints:\n            * 1 <= len(sentence) <= 100\n            * sentence contains only letters\n    \"\"\"\n    new_lst = []\n    for line in sentence.split():\n        flg = 0\n        if len(line) == 1:\n            flg = 1\n        for i in range(len(line)):\n            if line[i] == ' ':\n                flg = 0\n        if flg == 1:\n            new_lst.append(line)\n    return ' '.join(new_lst)\n\n"], ["def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denominator = int(b) * int(d)\n    if numerator == denominator:\n        return True\n    else:\n        return False\n\n"], ["def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def digits_sum(ind):\n        neg = 1\n        if ind < 0:\n            ind, neg = -1 * ind, -1\n        return sum(map(abs, str(ind))) * neg\n\n    nums.sort(key=digits_sum)\n    return nums\n\n"], ["def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1\n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    result = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            if num % 10 in odd_digits:\n                result += 1\n    return result\n\n"], ["def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n            For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n            Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n            Input: n = 5\n            Output: 1\n            Explanation:\n            a = [1, 3, 7, 13, 21]\n            The only valid triple is (1, 7, 13).\n    \"\"\"\n    A = [i2 * i2 - i2 + 1 for i2 in range(1, n + 1)]\n    ans = []\n    for i2 in range(n):\n        for j in range(i2 + 1, n):\n            for k in range(j + 1, n):\n                if A[i2] + A[j] + A[k] % 3 == 0:\n                    ans.append(i2)\n                    ans.append(j)\n                    ans.append(k)\n    return len(ans)\n\n"], ["def bf(planet1, planet2):\n    \"\"\"\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    \"\"\"\n    planets = (\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\",\n    )\n    if planet1 not in planets or planet2 not in planets or planet1 == planet2:\n        return ()\n    planet1_index = planets.index(planet1)\n    planet2_index = planets.index(planet2)\n    if planet1_index > planet2_index:\n        planet1_index, planet2_index = planet2_index, planet1_index\n    return tuple(\n        planets[i]\n        for i in range(planet1_index, planet2_index + 1)\n        if planets[i] != planet1 and planets[i] != planet2\n    )\n\n"], ["def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    lst.sort()\n    new_lst = []\n    for l in lst:\n        if len(l) % 2 == 1:\n            new_lst.append(l)\n    return new_lst\n\n"], ["def x_or_y(i2, x, y):\n    \"\"\"A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n\n    \"\"\"\n    if i2 == 1:\n        return y\n    for i in range(2, i2):\n        if i2 % i == 0:\n            return 0\n    return x\n"], ["def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    # TODO: Write your code here.\n    return 0\n"], ["def compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    pass\n"], ["def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    strong = extensions[0]\n    my_val = len([x2 for x2 in extensions[0] if x2.isalpha() and x2.isupper()]) - len(\n        [x2 for x2 in extensions[0] if x2.isalpha() and x2.islower()]\n    )\n    for s in extensions:\n        val = len([x2 for x2 in s if x2.isalpha() and x2.isupper()]) - len(\n            [x2 for x2 in s if x2.isalpha() and x2.islower()]\n        )\n        if val > my_val:\n            strong = s\n    return class_name + \".\" + strong\n"], ["def cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    gl = len(b)\n    pat = b + b\n    for i in range(len(a) - gl + 1):\n        if a[i:i+gl] == pat:\n            return True\n    return False\n\n"], ["def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n           even_odd_count(-12) ==> (1, 1)\n           even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    num2 = 0\n    for i in str(abs(num)):\n        if int(i) % 2 == 0:\n            even_count += 1\n        else:\n            num2 += 1\n    return (even_count, num2)\n\n"], ["def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"]\n    umeric = 12\n    res = \"\"\n    while number:\n        res += sym[number % umeric]\n        number //= umeric\n    return res.lower()\n\n"], ["def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Your code here\n    return False\n"], ["def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # Write your code here\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = 0\n        for char in word:\n            count += 1\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n"], ["def eat(number, number2, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n            the number of carrots that you have eaten.\n    @need : integer\n            the number of carrots that you need to eat.\n    @remaining : integer\n            the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    if number2 <= remaining:\n        return [number + number2, remaining - number2]\n    else:\n        return [remaining, 0]\n"], ["def do_algebra(operator, expression2):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( // )\n    Exponentiation ( ** )\n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n            The length of operator list is equal to the length of operand list minus one.\n            Operand is a list of of non-negative integers.\n            Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    expression = str(expression2[0])\n    for oprt, oprn in zip(operator, expression2[1:]):\n        expression = oprt + oprn + expression\n    return eval(expression)\n\n"], ["def solve(l):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    flg = 0\n    idx = 0\n    new_str = list(l)\n    for i in l:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n            idx += 1\n        else:\n            new_str[idx] = i\n            idx += 1\n    if flg == 0:\n        new_str.reverse()\n    return \"\".join(new_str)\n\n"], ["def string_to_md5(string):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    import hashlib\n    return hashlib.md5(string.encode('utf-8')).hexdigest()\n\n"], ["def generate_integers(a2, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    lower = max(2, min(a2, b))\n    upper = min(8, max(a2, b))\n    return [i for i in range(lower, upper + 1) if i % 2 == 0]\n\n"], ["from typing import List\n\n\ndef has_close_elements(VAR_0: List[float], threshold: float) -> bool:\n    \"\"\"Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for idx, elem in enumerate(VAR_0):\n        for idx2, elem2 in enumerate(VAR_0):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n    return False\n\n"], ["from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    VAR_0 = []\n    current_depth = 0\n    for c in paren_string:\n        if c == \"(\":\n            current_depth += 1\n            VAR_0.append(c)\n        elif c == \")\":\n            current_depth -= 1\n            if current_depth == 0:\n                result.append(\"\".join(VAR_0))\n                VAR_0 = []\n        elif c == \" \":\n            pass\n        else:\n            raise ValueError(\"Invalid input string\")\n    if current_depth != 0:\n        raise ValueError(\"Invalid input string\")\n    return result\n\n"], ["def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer_part, decimals = divmod(number, 1)\n    return decimals\n\n"], ["from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    VAR_0 = 0\n    for op in operations:\n        VAR_0 += op\n    return VAR_0 < 0\n\n"], ["from typing import List\n\n\ndef mean_absolute_deviation(VAR_0: List[float]) -> float:\n    \"\"\"For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(VAR_0) / len(VAR_0)\n    return sum([(x - mean) ** 2 for x in VAR_0]) / len(VAR_0)\n\n"], ["from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    VAR_0 = []\n    for n in numbers[:-1]:\n        VAR_0.append(n)\n    VAR_0.append(delimeter)\n    VAR_0.append(numbers[-1])\n    return VAR_0\n\n"], ["from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n\n    def parse_paren_group(s):\n        depth = 0\n        VAR_0 = 0\n        for c in s:\n            if c == \"(\":\n                depth += 1\n            elif c == \")\":\n                depth -= 1\n            elif c == \" \":\n                VAR_0 += 1\n            else:\n                break\n        return depth, VAR_0\n\n    def parse_paren_group_list(s):\n        depth = 0\n        VAR_0 = 0\n        for c in s:\n            if c == \"(\":\n                depth += 1\n            elif c == \")\":\n                depth -= 1\n            elif c == \" \":\n                VAR_0 += 1\n            else:\n                break\n        return depth, VAR_0\n\n    def parse_paren_group_list_2(s):\n        depth = 0\n        VAR_0 = 0\n        for c in s:\n            if c == \"(\":\n                depth += 1\n            elif c == \")\":\n                depth -= 1\n            elif c == \" \":\n                VAR_0 += 1\n            else:\n                break\n        return depth, VAR_0\n\n    def parse_paren_group_list_3(s):\n        depth = 0\n        VAR_0 = 0\n        for c in s:\n            if c == \"(\":\n                depth += 1\n            elif c == \")\":\n                depth -= 1\n            elif c == \" \":\n                VAR_0 += 1\n            else:\n                break\n        return depth, VAR_0\n\n    def parse_paren_group_list_4(s):\n        depth = 0\n        VAR_0 = 0\n        for c in s:\n            if c == \"(\":\n                depth += 1\n            elif c == \")\":\n                depth -= 1\n            elif c == \" \":\n                VAR_0 += 1\n            else:\n                break\n        return depth, VAR_0\n\n    def parse_paren_group_list_5(s):\n        depth = 0\n        VAR_0 = 0\n        for c in s:\n            if c == \"(\":\n                depth += 1\n            elif c == \")\":\n                depth -= 1\n            elif c == \" \":\n                VAR_0 += 1\n            else:\n                break\n        return depth, VAR_0\n\n    def parse_paren_group_list_6(s):\n        depth = 0\n        VAR_0 = 0\n        for c in s:\n            if c == \"(\":\n                depth += 1\n            elif c == \")\":\n                depth -= 1\n            elif c == \" \":\n                VAR_0 += 1\n            else:\n                break\n        return depth, VAR_0\n\n    def parse_paren_group_list_7(s):\n        depth = 0\n        VAR_0 = 0\n        for c in s:\n            if c == \"(\":\n                depth += 1\n            elif c == \")\":\n                depth -= 1\n            elif c == \" \":\n                VAR_0 += 1\n            else:\n                break\n        return depth, VAR_0\n\n    def parse_paren_group_list_8(s):\n        depth = 0\n        VAR_0 = 0\n        for c in s:\n            if c == \"(\":\n                depth += 1\n            elif c == \")\":\n                depth -= 1\n            elif c == \" \":\n                VAR_0 += 1\n            else:\n                break\n        return depth, VAR_0\n\n    def parse_paren_group_list_9(s):\n        depth = 0\n        VAR_0 = 0\n        for c in s:\n            if c == \"(\":\n                depth += 1\n            elif c == \")\":\n                depth -= 1\n            elif c == \" \":\n                VAR_0 += 1\n            else:\n                break\n        return depth, VAR_0\n\n    def parse_paren_group_list_10(s):\n        depth = 0\n        VAR_0 = 0\n        for c in s:\n            if c == \"(\":\n                depth += 1\n            elif c == \")\":\n                depth -= 1\n            elif c == \" \":\n                VAR_0 += 1\n            else:\n                break\n        return depth, VAR_0\n\n    def parse_paren_group_list_11(s):\n        depth = 0\n        VAR_0 = 0\n        for c in"], ["from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]\n\n"], ["from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    sum_value = 0\n    prod_value = 1\n    for number in numbers:\n        sum_value += number\n        prod_value *= number\n    return sum_value, prod_value\n\n"], ["from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    VAR_0 = None\n    result = []\n    for n in numbers:\n        if VAR_0 is None:\n            VAR_0 = n\n        else:\n            if n > VAR_0:\n                VAR_0 = n\n            result.append(VAR_0)\n    return result\n\n"], ["def is_palindrome(VAR_0: str) -> bool:\n    \"\"\"Test if given string is a palindrome\"\"\"\n    return VAR_0 == VAR_0[::-1]\n\n\ndef make_palindrome(VAR_0: str) -> str:\n    \"\"\"Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not VAR_0:\n        return \"\"\n    beginning_of_suffix = 0\n    longest_postfix = \"\"\n    for i in range(len(VAR_0)):\n        if is_palindrome(VAR_0[i:]):\n            beginning_of_suffix = i\n            longest_postfix = VAR_0[i:]\n            break\n    if not longest_postfix:\n        return \"\"\n    return VAR_0[:beginning_of_suffix] + longest_postfix[::-1]\n"], ["from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    def xor(VAR_0, j):\n        if VAR_0 == j:\n            return \"0\"\n        else:\n            return \"1\"\n\n    return \"\".join(map(xor, a, b))\n\n"], ["from typing import List, Optional\n\n\ndef longest(VAR_0: List[str]) -> Optional[str]:\n    \"\"\"Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not VAR_0:\n        return None\n    if len(VAR_0) == 1:\n        return VAR_0[0]\n    return max(VAR_0, key=len)\n\n"], ["def greatest_common_divisor(a: int, VAR_0: int) -> int:\n    \"\"\"Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while VAR_0:\n        a, b = b % a, a\n        VAR_0 -= 1\n    return a\n\n"], ["from typing import List\n\n\ndef all_prefixes(VAR_0: str) -> List[str]:\n    \"\"\"Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    result = []\n    for i in range(len(VAR_0)):\n        result.append(VAR_0[:i])\n    return result\n\n"], ["def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n))\n"], ["def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string))\n"], ["from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    note_map = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    note_list = []\n    for note in music_string:\n        note_list.append(note_map[note])\n    return note_list\n\n"], ["def how_many_times(string: str, VAR_0: str) -> int:\n    \"\"\"Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    times = 0\n    for i in range(len(string) - len(VAR_0) + 1):\n        if string[i:i+len(VAR_0)] == VAR_0:\n            times += 1\n    return times\n"], ["from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n\n\nvalue_map = {\n    \"zero\": 0,\n    \"one\": 1,\n    \"two\": 2,\n    \"three\": 3,\n    \"four\": 4,\n    \"five\": 5,\n    \"six\": 6,\n    \"seven\": 7,\n    \"eight\": 8,\n    \"nine\": 9,\n}\n\n"], ["from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest_pair = None\n    VAR_0 = None\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if VAR_0 is None:\n                    VAR_0 = abs(elem - elem2)\n                else:\n                    if abs(elem - elem2) < VAR_0:\n                        closest_pair = (elem, elem2)\n                        VAR_0 = abs(elem - elem2)\n    return closest_pair\n\n"], ["from typing import List\n\n\ndef rescale_to_unit(VAR_0: List[float]) -> List[float]:\n    \"\"\"Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_number = min(VAR_0)\n    max_number = max(VAR_0)\n    return [(x - min_number) / (max_number - min_number) for x in VAR_0]\n\n"], ["from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [int(value) for value in values if isinstance(value, int)]\n\n"], ["def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n"], ["def largest_divisor(n: int) -> int:\n    \"\"\"For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for VAR_0 in reversed(range(n)):\n        if n % VAR_0 == 0:\n            return VAR_0\n    return n\n\n"], ["from typing import List\n\n\ndef factorize(VAR_0: int) -> List[int]:\n    \"\"\"Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    import math\n\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(VAR_0) + 1):\n        if VAR_0 % i == 0:\n            fact.append(i)\n        i += 1\n    if VAR_0 % i == 0:\n        fact.append(i)\n    return fact\n\n"], ["from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    import collections\n\n    seen = collections.Counter()\n    for number in numbers:\n        if number in seen:\n            seen[number] -= 1\n        else:\n            seen[number] = 1\n    return list(seen.keys())\n\n"], ["def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.lower().upper()\n"], ["from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n"], ["from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\n"], ["def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x >= 0]\n"], ["def is_prime(VAR_0):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if VAR_0 < 2:\n        return False\n    for k in range(2, VAR_0 - 1):\n        if VAR_0 % k == 0:\n            return False\n    return True\n"], ["import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\"xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    VAR_0, end = -1.0, 1.0\n    while poly(xs, VAR_0) * poly(xs, end) > 0:\n        VAR_0 *= 2.0\n        end *= 2.0\n    while end - VAR_0 > 1e-10:\n        end *= 2.0\n    return VAR_0\n\n"], ["def sort_third(VAR_0: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    VAR_0 = list(VAR_0)\n    for i in range(len(VAR_0)):\n        if VAR_0[i] % 3 != 0:\n            VAR_0.insert(i, VAR_0.pop(i))\n    return VAR_0\n\n"], ["def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n"], ["def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    VAR_0 = l[0]\n    for e in l:\n        if e > VAR_0:\n            VAR_0 = e\n    return VAR_0\n\n"], ["def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    ns = []\n    for VAR_0 in range(n):\n        if VAR_0 % 11 == 0 or VAR_0 % 13 == 0:\n            ns.append(VAR_0)\n    return len(ns)\n"], ["def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    VAR_0 = l[::2]\n    odds = l[1::2]\n    VAR_0.sort()\n    ans = []\n    for i in odds:\n        ans.append(i)\n    ans.extend(VAR_0)\n    return ans\n\n"], ["def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"], ["def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 89\n    elif n == 6:\n        return 233\n    elif n == 7:\n        return 144\n    elif n == 8:\n        return 71\n    elif n == 9:\n        return 35\n    elif n == 10:\n        return 17\n    elif n == 11:\n        return 6\n    elif n == 12:\n        return 3\n    elif n == 13:\n        return 2\n    elif n == 14:\n        return 1\n    elif n == 15:\n        return 0\n    elif n == 16:\n        return 1\n    elif n == 17:\n        return 0\n    elif n == 18:\n        return 1\n    elif n == 19:\n        return 0\n    elif n == 20:\n        return 1\n    elif n == 21:\n        return 0\n    elif n == 22:\n        return 1\n    elif n == 23:\n        return 0\n    elif n == 24:\n        return 1\n    elif n == 25:\n        return 0\n    elif n == 26:\n        return 1\n    elif n == 27:\n        return 0\n    elif n == 28:\n        return 1\n    elif n == 29:\n        return 0\n    elif n == 30:\n        return 1\n    elif n == 31:\n        return 0\n    elif n == 32:\n        return 1\n    elif n == 33:\n        return 0\n    elif n == 34:\n        return 1\n    elif n == 35:\n        return 0\n    elif n == 36:\n        return 1\n    elif n == 37:\n        return 0\n    elif n == 38:\n        return 1\n    elif n == 39:\n        return 0\n    elif n == 40:\n        return 1\n    elif n == 41:\n        return 0\n    elif n == 42:\n        return 1\n    elif n == 43:\n        return 0\n    elif n == 44:\n        return 1\n    elif n == 45:\n        return 0\n    elif n == 46:\n        return 1\n    elif n == 47:\n        return 0\n    elif n == 48:\n        return 1\n    elif n == 49:\n        return 0\n    elif n == 50:\n        return 1\n    elif n == 51:\n        return 0\n    elif n == 52:\n        return 1\n    elif n == 53:\n        return 0\n    elif n == 54:\n        return 1\n    elif n == 55:\n        return 0\n    elif n == 56:\n        return 1\n    elif n == 57:\n        return 0\n    elif n == 58:\n        return 1\n    elif n == 59:\n        return 0\n    elif n == 60:\n        return 1\n    elif n == 61:\n        return 0\n    elif n == 62:\n        return 1\n    elif n == 63:\n        return 0\n    elif n == 64:\n        return 1\n    elif n == 65:\n        return 0\n    elif n == 66:\n        return 1\n    elif n == 67:\n        return 0\n    elif n == 68:\n        return 1\n    elif n == 69:\n        return 0\n    elif n == 70:\n        return 1\n    elif n == 71:\n        return 0\n    elif n == 72:\n       "], ["def triples_sum_to_zero(VAR_0: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(VAR_0)):\n        for j in range(i + 1, len(VAR_0)):\n            for k in range(j + 1, len(VAR_0)):\n                if VAR_0[i] + VAR_0[j] + VAR_0[k] == 0:\n                    return True\n    return False\n\n"], ["def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # Write your code here.\n    pass\n"], ["def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n\n"], ["def pairs_sum_to_zero(VAR_0):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    for i, l1 in enumerate(VAR_0):\n        for j in range(i + 1, len(VAR_0)):\n            if l1 + VAR_0[j] == 0:\n                return True\n    return False\n"], ["def change_base(VAR_0: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    ret = \"\"\n    while VAR_0 > 0:\n        ret = str(VAR_0 % base) + ret\n        VAR_0 = int(VAR_0 / base)\n    return ret\n\n"], ["def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2\n"], ["def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    VAR_0 = [0, 0, 2, 0]\n    if n < 4:\n        return VAR_0[n]\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\n"], ["def median(VAR_0: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    VAR_0 = sorted(VAR_0)\n    if len(VAR_0) % 2 == 1:\n        return VAR_0[len(VAR_0) // 2]\n    else:\n        return (VAR_0[len(VAR_0) // 2] + VAR_0[len(VAR_0) // 2 - 1]) / 2\n\n"], ["def is_palindrome(VAR_0: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    for i in range(len(VAR_0)):\n        if VAR_0[i] != VAR_0[len(VAR_0) - 1 - i]:\n            return False\n    return True\n\n"], ["def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    VAR_0 = 1\n    for i in range(n):\n        VAR_0 = (VAR_0 * 2) % p\n    return VAR_0\n\n"], ["def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"], ["def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiou'\n    return ''.join(char for char in text if char not in vowels)\n\n"], ["def below_threshold(VAR_0: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for e in VAR_0:\n        if e >= t:\n            return False\n    return True\n\n"], ["def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n"], ["def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    if len(s0) != len(s1):\n        return False\n    for i in range(len(s0)):\n        if s0[i] != s1[i]:\n            return False\n    return True\n\n"], ["def fib(VAR_0: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if VAR_0 == 0:\n        return 0\n    elif VAR_0 == 1:\n        return 1\n    else:\n        return fib(VAR_0 - 1) + fib(VAR_0 - 2)\n\n"], ["def correct_bracketing(brackets: str):\n    \"\"\"brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    VAR_0 = 0\n    for b in brackets:\n        if b == \"<\":\n            VAR_0 += 1\n        elif b == \">\":\n            VAR_0 -= 1\n        else:\n            return False\n    return VAR_0 == 0\n\n"], ["def monotonic(VAR_0: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if VAR_0 == sorted(VAR_0) or VAR_0 == sorted(VAR_0, reverse=True):\n        return True\n    else:\n        return False\n"], ["def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    VAR_0 = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                VAR_0.add(e1)\n    return sorted(VAR_0)\n\n"], ["def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n    def is_prime(VAR_0):\n        if VAR_0 < 2:\n            return False\n        for i in range(2, VAR_0 - 1):\n            if VAR_0 % i == 0:\n                return False\n        return True\n\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 5:\n        return 5\n    if n == 7:\n        return 7\n    if n == 11:\n        return 11\n    if n == 13:\n        return 13\n    if n == 17:\n        return 17\n    if n == 19:\n        return 19\n    if n == 23:\n        return 23\n    if n == 29:\n        return 29\n    if n == 31:\n        return 31\n    if n == 37:\n        return 37\n    if n == 41:\n        return 41\n    if n == 43:\n        return 43\n    if n == 47:\n        return 47\n    if n == 53:\n        return 53\n    if n == 59:\n        return 59\n    if n == 61:\n        return 61\n    if n == 67:\n        return 67\n    if n == 71:\n        return 71\n    if n == 73:\n        return 73\n    if n == 79:\n        return 79\n    if n == 83:\n        return 83\n    if n == 89:\n        return 89\n    if n == 97:\n        return 97\n    if n == 101:\n        return 101\n    if n == 103:\n        return 103\n    if n == 107:\n        return 107\n    if n == 109:\n        return 109\n    if n == 113:\n        return 113\n    if n == 127:\n        return 127\n    if n == 131:\n        return 131\n    if n == 137:\n        return 137\n    if n == 139:\n        return 139\n    if n == 149:\n        return 149\n    if n == 151:\n        return 151\n    if n == 157:\n        return 157\n    if n == 163:\n        return 163\n    if n == 167:\n        return 167\n    if n == 173:\n        return 173\n    if n == 179:\n        return 179\n    if n == 181:\n        return 181\n    if n == 191:\n        return 191\n    if n == 193:\n        return 193\n    if n == 197:\n        return 197\n    if n == 199:\n        return 199\n    if n == 211:\n        return 211\n    if n == 223:\n        return 223\n    if n == 227:\n        return 227\n    if n == 229:\n        return 229\n    if n == 233:\n        return 233\n    if n == 239:\n        return 239\n    if n == 241:\n        return 241\n    if n == 251:\n        return 251\n    if n == 257:\n        return 257\n    if n == 263:\n        return 263\n    if n == 269:\n        return 269\n    if n == 271:\n        return 271\n    if n == 277:\n        return 277\n    if n == 281:\n        return 281\n    if n == 283:\n        return 283\n    if n == 293:\n        return 293\n    if n == 30"], ["def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))\n\n"], ["def correct_bracketing(brackets: str):\n    \"\"\"brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    VAR_0 = 0\n    for b in brackets:\n        if b == \"(\":\n            VAR_0 += 1\n        elif b == \")\":\n            VAR_0 -= 1\n        else:\n            return False\n    return VAR_0 == 0\n\n"], ["def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [x * (x + 1) / 2 for x in xs]\n\n"], ["def fibfib(VAR_0: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if VAR_0 == 0:\n        return 0\n    if VAR_0 == 1:\n        return 0\n    if VAR_0 == 2:\n        return 1\n    if VAR_0 == 3:\n        return 1\n    if VAR_0 == 4:\n        return 2\n    if VAR_0 == 5:\n        return 3\n    if VAR_0 == 6:\n        return 5\n    if VAR_0 == 7:\n        return 8\n    if VAR_0 == 8:\n        return 13\n    if VAR_0 == 9:\n        return 21\n    if VAR_0 == 10:\n        return 34\n    if VAR_0 == 11:\n        return 55\n    if VAR_0 == 12:\n        return 89\n    if VAR_0 == 13:\n        return 144\n    if VAR_0 == 14:\n        return 233\n    if VAR_0 == 15:\n        return 377\n    if VAR_0 == 16:\n        return 610\n    if VAR_0 == 17:\n        return 987\n    if VAR_0 == 18:\n        return 1597\n    if VAR_0 == 19:\n        return 2584\n    if VAR_0 == 20:\n        return 4181\n    if VAR_0 == 21:\n        return 6765\n    if VAR_0 == 22:\n        return 10946\n    if VAR_0 == 23:\n        return 17711\n    if VAR_0 == 24:\n        return 28657\n    if VAR_0 == 25:\n        return 46368\n    if VAR_0 == 26:\n        return 75025\n    if VAR_0 == 27:\n        return 121393\n    if VAR_0 == 28:\n        return 196418\n    if VAR_0 == 29:\n        return 317811\n    if VAR_0 == 30:\n        return 514229\n    if VAR_0 == 31:\n        return 832040\n    if VAR_0 == 32:\n        return 1346269\n    if VAR_0 == 33:\n        return 2178309\n    if VAR_0 == 34:\n        return 3524578\n    if VAR_0 == 35:\n        return 5702887\n    if VAR_0 == 36:\n        return 9227465\n    if VAR_0 == 37:\n        return 14930352\n    if VAR_0 == 38:\n        return 24157817\n    if VAR_0 == 39:\n        return 39088169\n    if VAR_0 == 40:\n        return 63245986\n    if VAR_0 == 41:\n        return 102334155\n    if VAR_0 == 42:\n        return 165580141\n    if VAR_0 == 43:\n        return 267914296\n    if VAR_0 == 44:\n        return 433494437\n    if VAR_0 == 45:\n        return 701408733\n    if VAR_0 == 46:\n        return 1102100442\n    if VAR_0 == 47:\n        return 1723615727\n    if VAR_0 == 48:\n        return 2764"], ["FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\n\ndef vowels_count(VAR_0):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in VAR_0)\n    return n_vowels\n\n"], ["def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    VAR_0 = str(x)\n    if shift > len(VAR_0):\n        return circular_shift(circular_shift(x, shift - len(VAR_0)), shift)\n    else:\n        return VAR_0[shift:] + VAR_0[:shift]\n\n"], ["def digitSum(VAR_0):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n            digitSum(\"\") => 0\n            digitSum(\"abAB\") => 131\n            digitSum(\"abcCd\") => 67\n            digitSum(\"helloE\") => 69\n            digitSum(\"woArBld\") => 131\n            digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    if VAR_0 == \"\":\n        return 0\n    else:\n        return sum(ord(char) for char in VAR_0 if ord(char) >= 65 and ord(char) <= 90)\n"], ["def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    lis = list()\n    for VAR_0 in s.split(\" \"):\n        lis.append(int(VAR_0))\n    return max(lis) - min(lis)\n"], ["def pluck(VAR_0):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n            Input: [4,2,3]\n            Output: [2, 1]\n            Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n            Input: [1,2,3]\n            Output: [2, 1]\n            Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n            Input: []\n            Output: []\n\n    Example 4:\n            Input: [5, 0, 3, 0, 4, 2]\n            Output: [0, 1]\n            Explanation: 0 is the smallest value, but  there are two zeros,\n                                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n            * 1 <= nodes.length <= 10000\n            * 0 <= node.value\n    \"\"\"\n    if len(VAR_0) == 0:\n        return []\n    evens = list(filter(lambda x: x % 2 == 0, VAR_0))\n    if len(evens) == 0:\n        return [min(VAR_0), 0]\n    return [min(evens), evens.index(min(evens))]\n\n"], ["def search(lst):\n    \"\"\"\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n            search([4, 1, 2, 2, 3, 1]) == 2\n            search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n            search([5, 5, 4, 4, 4]) == -1\n    \"\"\"\n    frq = [0] * (max(lst) + 1)\n    for VAR_0 in lst:\n        frq[VAR_0] += 1\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= frq[ans]:\n            ans = i\n    return ans\n\n"], ["def strange_sort_list(VAR_0):\n    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    \"\"\"\n    res, switch = [], True\n    while VAR_0:\n        res.append(min(VAR_0) if switch else max(VAR_0))\n        switch = not switch\n        VAR_0.remove(min(VAR_0) if switch else max(VAR_0))\n    return res\n\n"], ["def triangle_area(a, b, VAR_0):\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if a + b <= VAR_0 or a + VAR_0 <= b or b + VAR_0 <= a:\n        return -1\n    s = (a + b + VAR_0) / 2\n    return round(s * (s - a) * (s - b) / 2, 2)\n\n"], ["def will_it_fly(VAR_0, w):\n    \"\"\"\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(VAR_0) > w:\n        return False\n    i, j = 0, len(VAR_0) - 1\n    while i < j:\n        if VAR_0[i] != VAR_0[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n\n"], ["def smallest_change(VAR_0):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    ans = 0\n    for i in range(len(VAR_0) // 2):\n        if VAR_0[i] != VAR_0[len(VAR_0) - 1 - i]:\n            ans += 1\n    return ans\n\n"], ["def total_match(lst1, lst2):\n    \"\"\"\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    \"\"\"\n    l1 = 0\n    for VAR_0 in lst1:\n        l1 += len(VAR_0)\n    l2 = 0\n    for VAR_0 in lst2:\n        l2 += len(VAR_0)\n    if l1 == l2:\n        return lst1\n    else:\n        return lst2\n\n"], ["def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n\n    def is_prime(n):\n        for VAR_0 in range(2, n):\n            if n % VAR_0 == 0:\n                return False\n        return True\n\n    for i in range(2, 101):\n        if is_prime(i):\n            if i * 3 <= a:\n                return True\n    return False\n\n"], ["def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if n == 1:\n        return x == 1\n    VAR_0 = 1\n    while n > 1:\n        if n % 2 == 0:\n            VAR_0 = VAR_0 * x\n        x = x * x\n        n = n // 2\n    if n == 1:\n        return x == 1\n    return x == VAR_0\n\n"], ["def iscube(VAR_0):\n    \"\"\"\n    Write a function that takes an integer a and returns True\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    \"\"\"\n    VAR_0 = abs(VAR_0)\n    if VAR_0 == 0:\n        return True\n    if VAR_0 % 1 != 0:\n        return False\n    if VAR_0 == 1:\n        return True\n    if VAR_0 == 2:\n        return True\n    if VAR_0 == 3:\n        return True\n    if VAR_0 == 4:\n        return True\n    if VAR_0 == 5:\n        return True\n    if VAR_0 == 6:\n        return True\n    if VAR_0 == 7:\n        return True\n    if VAR_0 == 8:\n        return True\n    if VAR_0 == 9:\n        return True\n    if VAR_0 == 10:\n        return True\n    if VAR_0 == 11:\n        return True\n    if VAR_0 == 12:\n        return True\n    if VAR_0 == 13:\n        return True\n    if VAR_0 == 14:\n        return True\n    if VAR_0 == 15:\n        return True\n    if VAR_0 == 16:\n        return True\n    if VAR_0 == 17:\n        return True\n    if VAR_0 == 18:\n        return True\n    if VAR_0 == 19:\n        return True\n    if VAR_0 == 20:\n        return True\n    if VAR_0 == 21:\n        return True\n    if VAR_0 == 22:\n        return True\n    if VAR_0 == 23:\n        return True\n    if VAR_0 == 24:\n        return True\n    if VAR_0 == 25:\n        return True\n    if VAR_0 == 26:\n        return True\n    if VAR_0 == 27:\n        return True\n    if VAR_0 == 28:\n        return True\n    if VAR_0 == 29:\n        return True\n    if VAR_0 == 30:\n        return True\n    if VAR_0 == 31:\n        return True\n    if VAR_0 == 32:\n        return True\n    if VAR_0 == 33:\n        return True\n    if VAR_0 == 34:\n        return True\n    if VAR_0 == 35:\n        return True\n    if VAR_0 == 36:\n        return True\n    if VAR_0 == 37:\n        return True\n    if VAR_0 == 38:\n        return True\n    if VAR_0 == 39:\n        return True\n    if VAR_0 == 40:\n        return True\n    if VAR_0 == 41:\n        return True\n    if VAR_0 == 42:\n        return True\n    if VAR_0 == 43:\n        return True\n    if VAR_0 == 44:\n        return True\n    if VAR_0 == 45:\n        return True\n    if VAR_0 == 46:\n        return True\n    if VAR_0 == 47:\n        return True\n    if VAR_0 == 48:\n        return True\n    if VAR_0 == 49:\n        return True\n    if VAR_0 == 50:\n        return True\n    if VAR_0 == 51:\n        return True\n    if VAR_0 == 52:\n        return True\n    if VAR_0 == 53:\n        return True\n    if VAR_0 == 54:\n        return True\n    if VAR_0 == 55:\n        return True\n    if VAR_0 == 56:\n        return True\n    if VAR_0 == 57:\n        return True\n    if VAR_0 == 58:\n        return True\n    if VAR_0 == 59:\n        return True\n    if VAR_0 == 60:\n        return True\n    if VAR_0 == 61:\n        return True\n    if VAR_0 == 62:\n        return True\n    if VAR_0 == 63:\n        return True\n    if VAR_0 == 64:\n        return True\n    if VAR_0 == 65:\n        return True\n    if VAR_0 == 66:\n        return True\n    if VAR_0 == 67:\n        return True\n    if VAR_0 =="], ["def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    primes = (\"2\", \"3\", \"5\", \"7\", \"B\", \"D\")\n    VAR_0 = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            VAR_0 += 1\n    return VAR_0\n\n"], ["def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    # Your code here\n    pass\n\n"], ["def is_happy(VAR_0):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(VAR_0) < 3:\n        return False\n    for i in range(len(VAR_0) - 2):\n        if VAR_0[i] == VAR_0[i + 1] and VAR_0[i] == VAR_0[i + 2]:\n            return False\n    return True\n"], ["def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n                     GPA       |    Letter grade\n                      4.0                A+\n                    > 3.7                A\n                    > 3.3                A-\n                    > 3.0                B+\n                    > 2.7                B\n                    > 2.3                B-\n                    > 2.0                C+\n                    > 1.7                C\n                    > 1.3                C-\n                    > 1.0                D+\n                    > 0.7                D\n                    > 0.0                D-\n                      0.0                E\n\n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    VAR_0 = []\n    for gpa in grades:\n        if gpa == 4.0:\n            VAR_0.append(\"A+\")\n        elif gpa > 3.7:\n            VAR_0.append(\"A\")\n        elif gpa > 3.3:\n            VAR_0.append(\"A-\")\n        elif gpa > 3.0:\n            VAR_0.append(\"B+\")\n        elif gpa > 2.7:\n            VAR_0.append(\"B\")\n        elif gpa > 2.3:\n            VAR_0.append(\"B-\")\n        elif gpa > 2.0:\n            VAR_0.append(\"C+\")\n        elif gpa > 1.7:\n            VAR_0.append(\"C\")\n        elif gpa > 1.3:\n            VAR_0.append(\"C-\")\n        elif gpa > 1.0:\n            VAR_0.append(\"D+\")\n        elif gpa > 0.7:\n            VAR_0.append(\"D\")\n        elif gpa > 0.0:\n            VAR_0.append(\"D-\")\n        else:\n            VAR_0.append(\"E\")\n    return VAR_0\n\n"], ["def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    VAR_0 = len(string)\n    if VAR_0 == 0 or VAR_0 == 1:\n        return False\n    for i in range(2, VAR_0):\n        if VAR_0 % i == 0:\n            return False\n    return True\n\n"], ["def starts_one_ends(VAR_0):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if VAR_0 == 1:\n        return 1\n    else:\n        return 0\n\n"], ["def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Write your code here\n    return \"\"\n"], ["def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(x for x in lst if x % 2 == 0)\n\n"], ["def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return ''.join(sorted(s, key=ord))\n\n"], ["def get_row(lst, VAR_0):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    coords = [\n        (i, j)\n        for i in range(len(lst))\n        for j in range(len(lst[i]))\n        if lst[i][j] == VAR_0\n    ]\n    coords.sort(key=lambda x: x[0])\n    return coords\n\n"], ["def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Write your code here\n    pass\n"], ["def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    d = \"abcdefghijklmnopqrstuvwxyz\"\n    out = \"\"\n    for VAR_0 in s:\n        if VAR_0 in d:\n            out += d[(d.index(VAR_0) + 2) % len(d)]\n        else:\n            out += VAR_0\n    return out\n\n"], ["def next_smallest(VAR_0):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n\n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    VAR_0 = sorted(set(VAR_0))\n    if len(VAR_0) == 0:\n        return None\n    return VAR_0[1]\n\n"], ["def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    import re\n    return len(re.findall(r\"I\", S))\n\n"], ["def any_int(VAR_0, y, z):\n    \"\"\"\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    any_int(5, 2, 7) \u279e True\n\n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n\n    any_int(3.6, -2.2, 2) \u279e False\n\n\n\n    \"\"\"\n    if isinstance(VAR_0, int) and isinstance(y, int) and isinstance(z, int):\n        if (VAR_0 + y == z) or (VAR_0 + z == y) or (y + z == VAR_0):\n            return True\n    return False\n"], ["def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(VAR_0, chr(ord(VAR_0) + 2)) for VAR_0 in vowels])\n    return \"\".join([vowels_replace[letter] for letter in message])\n\n"], ["def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n\n    def isPrime(n):\n        for VAR_0 in range(2, int(n ** 0.5) + 1):\n            if n % VAR_0 == 0:\n                return False\n        return True\n\n    maxx = 0\n    for VAR_1 in lst:\n        if isPrime(VAR_1):\n            maxx = max(maxx, VAR_1)\n    return maxx\n\n"], ["def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict.keys()) == 0:\n        return False\n    else:\n        VAR_0 = \"start\"\n        for key in dict.keys():\n            if isinstance(key, str) == False:\n                VAR_0 = \"mixed\"\n                break\n            if VAR_0 == \"start\":\n                if key.isupper():\n                    VAR_0 = \"upper\"\n                else:\n                    VAR_0 = \"lower\"\n            elif VAR_0 == \"mixed\":\n                if key.isupper():\n                    VAR_0 = \"upper\"\n                elif key.islower():\n                    VAR_0 = \"lower\"\n            elif VAR_0 == \"upper\":\n                if key.islower():\n                    VAR_0 = \"lower\"\n                else:\n                    VAR_0 = \"mixed\"\n            elif VAR_0 == \"lower\":\n                if key.isupper():\n                    VAR_0 = \"upper\"\n                else:\n                    VAR_0 = \"mixed\"\n        if VAR_0 == \"upper\":\n            return True\n        else:\n            return False\n"], ["def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    primes = []\n    for VAR_0 in range(2, n):\n        is_prime = True\n        for j in range(2, VAR_0):\n            if VAR_0 % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(VAR_0)\n    return primes\n\n"], ["def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    return a * b\n\n"], ["def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n\n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    VAR_0 = 0\n    for i in range(0, len(s), 2):\n        if s[i] == s[i + 1].upper():\n            VAR_0 += 1\n    return VAR_0\n\n"], ["def closest_integer(VAR_0):\n    \"\"\"\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    \"\"\"\n    from math import floor, ceil\n\n    if VAR_0.count(\".\") == 1:\n        # remove trailing zeros\n        while VAR_0[-1] == \"0\":\n            VAR_0 = VAR_0[:-1]\n    num = float(VAR_0)\n    if VAR_0[-2:] == \".5\":\n        if num > 0:\n            return ceil(num)\n        else:\n            return floor(num)\n    elif VAR_0[-2:] == \".0\":\n        if num > 0:\n            return ceil(num)\n        else:\n            return floor(num)\n    elif VAR_0[-2:] == \".\":\n        if num > 0:\n            return ceil(num)\n        else:\n            return floor(num)\n    else:\n        if num > 0:\n            return ceil(num)\n        else:\n            return floor(num)\n\n"], ["def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n % 2 == 0:\n        return [n, n // 2]\n    else:\n        return [n // 2, n]\n\n"], ["def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n\n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    if not s:\n        return []\n    VAR_0 = []\n    for letter in s:\n        if letter == \",\":\n            VAR_0.append(letter)\n        else:\n            VAR_0.append(letter)\n    return VAR_0\n\n"], ["def choose_num(x, VAR_0):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > VAR_0:\n        return -1\n    if VAR_0 % 2 == 0:\n        return VAR_0\n    else:\n        return choose_num(VAR_0 + 2, VAR_0)\n\n"], ["def rounded_avg(n, VAR_0):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if VAR_0 < n:\n        return -1\n    summation = 0\n    for i in range(n, m + 1):\n        summation += i\n    return int(summation / (m - n + 1))\n"], ["def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n\n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    VAR_0 = []\n    for i in x:\n        if i % 2 == 0:\n            VAR_0.append(i)\n    return sorted(set(VAR_0))\n\n"], ["def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n                    -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n                    -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n                    -> sort arr -> [-1, 1, 55]\n                    -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n\ndic = {\n    1: \"One\",\n    2: \"Two\",\n    3: \"Three\",\n    4: \"Four\",\n    5: \"Five\",\n    6: \"Six\",\n    7: \"Seven\",\n    8: \"Eight\",\n    9: \"Nine\",\n}\n\n"], ["def f(n):\n    \"\"\"Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    ret = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            VAR_0 = 1\n            for j in range(1, i + 1):\n                VAR_0 *= j\n            ret.append(VAR_0)\n        else:\n            VAR_0 = 1\n            for j in range(1, i + 1):\n                VAR_0 += j\n            ret.append(VAR_0)\n    return ret\n\n"], ["def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n            Input: 3\n            Output: (1, 2)\n            Explanation:\n            Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n            Input: 12\n            Output: (4, 6)\n            Explanation:\n            Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n            1. 1 <= n <= 10^3\n            2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_palindrome_count += 1\n            else:\n                odd_palindrome_count += 1\n\n    return even_palindrome_count, odd_palindrome_count\n\n"], ["def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n\n    def digits_sum(VAR_0):\n        neg = 1\n        if VAR_0 < 0:\n            VAR_0, neg = -1 * VAR_0, -1\n        sum = 0\n        while VAR_0 > 0:\n            sum += VAR_0 % 10\n            VAR_0 //= 10\n        return sum, neg\n\n    count = 0\n    for i in range(len(arr)):\n        sum, neg = digits_sum(arr[i])\n        if sum > 0:\n            count += 1\n    return count\n\n"], ["def move_one_ball(VAR_0):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n            You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                             be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                            array by performing any number of right shift operations.\n\n    \"\"\"\n    if len(VAR_0) == 0:\n        return True\n    sorted_array = sorted(VAR_0)\n    my_arr = []\n    min_value = min(VAR_0)\n    max_value = max(VAR_0)\n    for i in range(len(sorted_array)):\n        if sorted_array[i] == min_value:\n            my_arr.append(sorted_array[i])\n        else:\n            my_arr.append(sorted_array[i])\n    if len(my_arr) == len(VAR_0):\n        return True\n    else:\n        return False\n\n"], ["def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    odd = 0\n    even = 0\n    for VAR_0 in lst1:\n        if VAR_0 % 2 == 1:\n            odd += 1\n    for VAR_0 in lst2:\n        if VAR_0 % 2 == 0:\n            even += 1\n    if odd == 0 and even == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n"], ["def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    dict1 = {}\n    list1 = test.split(\" \")\n    t = 0\n    for VAR_0 in list1:\n        if (list1.count(VAR_0) > t) and VAR_0 != \"\":\n            dict1[VAR_0] = list1.count(VAR_0)\n            t = list1.count(VAR_0)\n    return dict1\n\n"], ["def reverse_delete(VAR_0, c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    VAR_0 = \"\".join([char for char in VAR_0 if char not in c])\n    return (VAR_0, True if VAR_0 == \"\" else False)\n\n"], ["def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    res = []\n    for arr in lst:\n        res.append(len(list(filter(str.isdigit, arr))))\n    return res\n\n"], ["def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    VAR_0 = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if s < 0:\n            s = 0\n        VAR_0 += num\n    return s\n\n"], ["def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # Write your code here\n    # 1. Find the max number of buckets\n    max_buckets = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_buckets += 1\n    # 2. Find the max number of units of water\n    max_units = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units += 1\n    # 3. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 4. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 5. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 6. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 7. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 8. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 9. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 10. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 11."], ["def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n"], ["def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    result = []\n    for VAR_0 in s.split():\n        n_consonants = 0\n        for i in range(0, len(VAR_0)):\n            if VAR_0[i].lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]:\n                n_consonants += 1\n        if n_consonants == n:\n            result.append(VAR_0)\n    return result\n\n"], ["def get_closest_vowel(VAR_0):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    if len(VAR_0) < 3:\n        return \"\"\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"O\", \"U\", \"I\"}\n    left_side = VAR_0[1:]\n    right_side = VAR_0[:1]\n    if right_side in vowels:\n        return right_side\n    if left_side in vowels:\n        return left_side\n    return \"\"\n\n"], ["def match_parens(lst):\n    \"\"\"\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    \"\"\"\n\n    def check(s):\n        VAR_0 = 0\n        for i in s:\n            if i == \"(\":\n                VAR_0 = VAR_0 + 1\n            else:\n                VAR_0 = VAR_0 - 1\n        return VAR_0 == 0\n\n    return check(lst[0]) and check(lst[1])\n\n"], ["def maximum(arr, VAR_0):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n            Input: arr = [-3, -4, 5], k = 3\n            Output: [-4, -3, 5]\n\n    Example 2:\n\n            Input: arr = [4, -4, 4], k = 2\n            Output: [4, 4]\n\n    Example 3:\n\n            Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n            Output: [2]\n\n    Note:\n            1. The length of the array will be in the range of [1, 1000].\n            2. The elements in the array will be in the range of [-1000, 1000].\n            3. 0 <= k <= len(arr)\n    \"\"\"\n    if VAR_0 == 0:\n        return []\n    if len(arr) <= k:\n        return arr\n    arr.sort()\n    return arr[:k]\n"], ["def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(x for x in lst if x % 2 == 1)\n\n"], ["def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return sum(arr[i:i+k] for i in range(len(arr)-k+1))\n"], ["def get_odd_collatz(VAR_0):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n            1. Collatz(1) is [1].\n            2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if VAR_0 % 2 == 0:\n        odd_collatz = []\n    else:\n        odd_collatz = [VAR_0]\n    while VAR_0 > 1:\n        if VAR_0 % 2 == 0:\n            VAR_0 = VAR_0 / 2\n        else:\n            VAR_0 = 3 * VAR_0 + 1\n        odd_collatz.append(VAR_0)\n    return odd_collatz\n\n"], ["def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    try:\n        date = date.strip()\n        month, VAR_0, year = date.split(\"-\")\n        month, VAR_0, year = int(month), int(VAR_0), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12] and VAR_0 < 1 or VAR_0 > 31:\n            return False\n        if month in [4, 6, 9, 11] and VAR_0 < 1 or VAR_0 > 30:\n            return False\n        if month == 2 and VAR_0 < 1 or VAR_0 > 29:\n            return False\n        if month == 2 and VAR_0 == 29:\n            return False\n        if month == 2 and VAR_0 == 28:\n            return False\n        if month == 2 and VAR_0 == 27:\n            return False\n        if month == 2 and VAR_0 == 26:\n            return False\n        if month == 2 and VAR_0 == 25:\n            return False\n        if month == 2 and VAR_0 == 24:\n            return False\n        if month == 2 and VAR_0 == 23:\n            return False\n        if month == 2 and VAR_0 == 22:\n            return False\n        if month == 2 and VAR_0 == 21:\n            return False\n        if month == 2 and VAR_0 == 20:\n            return False\n        if month == 2 and VAR_0 == 19:\n            return False\n        if month == 2 and VAR_0 == 18:\n            return False\n        if month == 2 and VAR_0 == 17:\n            return False\n        if month == 2 and VAR_0 == 16:\n            return False\n        if month == 2 and VAR_0 == 15:\n            return False\n        if month == 2 and VAR_0 == 14:\n            return False\n        if month == 2 and VAR_0 == 13:\n            return False\n        if month == 2 and VAR_0 == 12:\n            return False\n        if month == 2 and VAR_0 == 11:\n            return False\n        if month == 2 and VAR_0 == 10:\n            return False\n        if month == 2 and VAR_0 == 9:\n            return False\n        if month == 2 and VAR_0 == 8:\n            return False\n        if month == 2 and VAR_0 == 7:\n            return False\n        if month == 2 and VAR_0 == 6:\n            return False\n        if month == 2 and VAR_0 == 5:\n            return False\n        if month == 2 and VAR_0 == 4:\n            return False\n        if month == 2 and VAR_0 == 3:\n            return False\n        if month == 2 and VAR_0 == 2:\n            return False\n        if month == 2 and VAR_0 == 1:\n            return False\n        if month == 2 and VAR_0 == 0:\n            return False\n        if month == 2 and VAR_0 == -1:\n            return False\n        if month == 2 and VAR_0 == -2"], ["def split_words(VAR_0):\n    \"\"\"\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3\n    \"\"\"\n    if \" \" in VAR_0:\n        return VAR_0.split()\n    elif \",\" in VAR_0:\n        return VAR_0.split(\",\")\n    else:\n        return len(VAR_0) // 2\n\n"], ["def is_sorted(lst):\n    \"\"\"\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    \"\"\"\n    count_digit = dict([(VAR_0, 0) for VAR_0 in lst])\n    for VAR_0 in lst:\n        count_digit[VAR_0] += 1\n    if any(count_digit[VAR_0] > 2 for VAR_0 in lst):\n        return False\n    return True\n\n"], ["def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n\n    def is_prime(VAR_0):\n        if VAR_0 == 1 or VAR_0 == 0:\n            return False\n        if VAR_0 == 2:\n            return True\n        for i in range(2, VAR_0):\n            if VAR_0 % i == 0:\n                return False\n        return True\n\n    if interval1[1] <= interval2[0] or interval2[1] <= interval1[0]:\n        return \"NO\"\n    if interval1[0] == interval2[0]:\n        return \"YES\"\n    if interval1[1] == interval2[1]:\n        return \"YES\"\n    if interval1[0] <= interval2[1] and interval2[0] <= interval1[1]:\n        return \"YES\"\n    if interval1[1] <= interval2[0] and interval2[1] <= interval1[0]:\n        return \"YES\"\n    if interval1[0] == interval2[0] and interval1[1] == interval2[1]:\n        return \"YES\"\n    if interval1[0] == interval2[1] and interval1[1] == interval2[0]:\n        return \"YES\"\n    if interval1[0] == interval2[0] and interval1[1] == interval2[1]:\n        return \"YES\"\n    if interval1[1] == interval2[0] and interval1[0] == interval2[1]:\n        return \"YES\"\n    if interval1[0] == interval2[1] and interval1[1] == interval2[0]:\n        return \"YES\"\n    if interval1[0] == interval2[0] and interval1[1] == interval2[1]:\n        return \"YES\"\n    if interval1[1] == interval2[0] and interval1[0] == interval2[1]:\n        return \"YES\"\n    if interval1[0] == interval2[1] and interval1[1] == interval2[0]:\n        return \"YES\"\n    if interval1[0] == interval2[0] and interval1[1] == interval2[1]:\n        return \"YES\"\n    if interval1[1] == interval2[0] and interval1[0] == interval2[1]:\n        return \"YES\"\n    if interval1[0] == interval2[1] and interval1[1] == interval2[0]:\n        return \"YES\"\n    if interval1[0] == interval2[0] and interval1[1] == interval2[1]:\n        return \"YES\"\n    if interval1[1] == interval2[0] and interval1[0] == interval2[1]:\n        return \"YES\"\n    if interval1[0] == interval2[1] and interval1[1] == interval2[0]:\n        return \"YES\"\n    if interval1[0] == interval2[0] and interval1[1] == interval2[1]:\n        return \"YES\"\n    if interval1[1] == interval2[0] and interval1[0] == interval2[1]:\n        return \"YES\"\n    if interval1[0] == interval2[1] and interval1[1] == interval2[0]:\n        return \"YES\"\n    if interval1[0] == interval2[0] and interval1[1] == interval2[1]:\n        return \"YES\"\n    if interval1[1] == interval2[0] and interval1[0] == interval2[1]:\n       "], ["def prod_signs(VAR_0):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not VAR_0:\n        return None\n    return sum(abs(x) * abs(y) for x, y in zip(VAR_0, VAR_0[1:]))\n\n"], ["def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n            Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n            Output: [1, 2, 1]\n\n            Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n            Output: [1]\n    \"\"\"\n    n = len(grid)\n    val = n * n + 1\n    for VAR_0 in range(n):\n        for j in range(n):\n            if grid[VAR_0][j] == 1:\n                temp = []\n                if VAR_0 != 0:\n                    temp.append(grid[VAR_0 - 1][j])\n                if j != 0:\n                    temp.append(grid[VAR_0][j - 1])\n                if VAR_0 != n - 1:\n                    temp.append(grid[VAR_0 + 1][j])\n                if j != n - 1:\n                    temp.append(grid[VAR_0][j + 1])\n                val = min(val, sum(temp))\n    return val\n\n"], ["def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n               = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for VAR_0 in range(2, n + 1):\n        my_tri.append(my_tri[VAR_0 - 1] + my_tri[VAR_0 - 2] + my_tri[VAR_0 - 3])\n    return my_tri\n\n"], ["def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    VAR_0 = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit % 2 == 1:\n            odd_count += 1\n    if odd_count == 0:\n        return 0\n    else:\n        return VAR_0 * digits(odd_count)\n\n"], ["def is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for VAR_0 in range(len(string)):\n        if string[VAR_0] == \"[\":\n            opening_bracket_index.append(VAR_0)\n        else:\n            closing_bracket_index.append(VAR_0)\n    closing_bracket_index.reverse()\n    cnt = 0\n    for VAR_1 in range(len(opening_bracket_index)):\n        if opening_bracket_index[VAR_1] == closing_bracket_index[VAR_1]:\n            cnt += 1\n    return cnt == 0\n\n"], ["def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n\n\n    \"\"\"\n    import math\n\n    VAR_0 = 0\n    for i in lst:\n        VAR_0 += i ** 2\n    return math.ceil(VAR_0)\n\n"], ["def check_if_last_char_is_a_letter(txt):\n    \"\"\"\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False\n    \"\"\"\n    last_char = txt[-1]\n    if last_char.isalpha() and last_char not in \" \":\n        return True\n    return False\n\n"], ["def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    ind = -1\n    VAR_0 = 1\n    while VAR_0 < len(arr):\n        if arr[ind] >= arr[ind + 1]:\n            ind += 1\n        else:\n            ind += 1\n    return ind\n\n"], ["def largest_smallest_integers(lst):\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    \"\"\"\n    smallest = list(filter(lambda VAR_0: VAR_0 < 0, lst))\n    largest = list(filter(lambda VAR_1: VAR_1 > 0, lst))\n    if len(smallest) == 0 and len(largest) == 0:\n        return None, None\n    elif len(smallest) == 0:\n        return largest, smallest[0]\n    elif len(largest) == 0:\n        return smallest, largest[0]\n    else:\n        return max(smallest), min(largest)\n\n"], ["def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    temp_a, VAR_0 = a, b\n    if isinstance(temp_a, str):\n        temp_a = temp_a.replace(\",\", \".\")\n    if isinstance(temp_a, float):\n        temp_a = float(temp_a)\n    if isinstance(temp_a, int):\n        temp_a = int(temp_a)\n    if temp_a == b:\n        return None\n    elif temp_a > b:\n        return b\n    else:\n        return a\n\n"], ["def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    sum_of_even = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0 and i % 4 == 0:\n            sum_of_even += i\n    return sum_of_even == n\n"], ["def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    VAR_0 = 1\n    special_fact = 1\n    for i in range(1, n + 1):\n        special_fact *= i\n        special_fact *= i - 1\n        special_fact *= i - 2\n        special_fact *= i - 3\n        special_fact *= i - 4\n        special_fact *= i - 5\n        special_fact *= i - 6\n        special_fact *= i - 7\n        special_fact *= i - 8\n        special_fact *= i - 9\n        special_fact *= i - 10\n        special_fact *= i - 11\n        special_fact *= i - 12\n        special_fact *= i - 13\n        special_fact *= i - 14\n        special_fact *= i - 15\n        special_fact *= i - 16\n        special_fact *= i - 17\n        special_fact *= i - 18\n        special_fact *= i - 19\n        special_fact *= i - 20\n        special_fact *= i - 21\n        special_fact *= i - 22\n        special_fact *= i - 23\n        special_fact *= i - 24\n        special_fact *= i - 25\n        special_fact *= i - 26\n        special_fact *= i - 27\n        special_fact *= i - 28\n        special_fact *= i - 29\n        special_fact *= i - 30\n        special_fact *= i - 31\n        special_fact *= i - 32\n        special_fact *= i - 33\n        special_fact *= i - 34\n        special_fact *= i - 35\n        special_fact *= i - 36\n        special_fact *= i - 37\n        special_fact *= i - 38\n        special_fact *= i - 39\n        special_fact *= i - 40\n        special_fact *= i - 41\n        special_fact *= i - 42\n        special_fact *= i - 43\n        special_fact *= i - 44\n        special_fact *= i - 45\n        special_fact *= i - 46\n        special_fact *= i - 47\n        special_fact *= i - 48\n        special_fact *= i - 49\n        special_fact *= i - 50\n        special_fact *= i - 51\n        special_fact *= i - 52\n        special_fact *= i - 53\n        special_fact *= i - 54\n        special_fact *= i - 55\n        special_fact *= i - 56\n        special_fact *= i - 57\n        special_fact *= i - 58\n        special_fact *= i - 59\n        special_fact *= i - 60\n        special_fact *= i - 61\n        special_fact *= i - 62\n        special_fact *= i - 63\n        special_fact *= i - 64\n        special_fact *= i - 65\n        special_fact *= i - 66\n        special_fact *= i - 67\n        special_fact *= i - 68\n        special_fact *= i - 69\n        special_fact *= i - 70\n        special_fact *= i - 71\n        special_fact *= i - 72\n        special_fact *= i - 73\n        special_fact *= i - 74\n        special_fact *= i - 75\n        special_fact *= i - 76\n        special_fact *= i - 77\n        special_fact *= i - 78\n        special_fact *= i - 79\n        special_fact *= i - 80\n        special_fact *= i - 81\n        special_fact *= i - 82\n        special_fact *= i - 83\n        special_fact *= i - 84\n        special_fact *= i - 85\n        special_fact *= i - 86\n        special_fact *= i - 87\n        special_fact *= i - 88\n        special_fact *= i - 8"], ["def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    new_text = \"\"\n    VAR_0 = 0\n    start, end = 0, 0\n    while VAR_0 < len(text):\n        if text[VAR_0] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\" + text[VAR_0]\n            elif end - start > 0:\n                new_text += text[start:end]\n            start = end\n            end = 0\n        VAR_0 += 1\n    return new_text\n\n"], ["def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    suf = [\"txt\", \"exe\", \"dll\"]\n    VAR_0 = file_name.split(sep=\".\")\n    if len(VAR_0) != 2:\n        return \"No\"\n    if not VAR_0[1] in suf:\n        return \"No\"\n    if len(VAR_0[0]) == 0:\n        return \"No\"\n    if VAR_0[0][0].isalpha():\n        return \"No\"\n    return \"Yes\"\n"], ["def sum_squares(lst):\n    \"\"\" \"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    result = []\n    for VAR_0 in range(len(lst)):\n        if VAR_0 % 3 == 0:\n            result.append(lst[VAR_0] ** 2)\n        elif VAR_0 % 4 == 0:\n            result.append(lst[VAR_0] ** 3)\n        else:\n            result.append(lst[VAR_0])\n    return sum(result)\n\n"], ["def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n            Input: sentence = \"This is a test\"\n            Output: \"is\"\n\n    Example 2:\n            Input: sentence = \"lets go for swimming\"\n            Output: \"go for\"\n\n    Constraints:\n            * 1 <= len(sentence) <= 100\n            * sentence contains only letters\n    \"\"\"\n    new_lst = []\n    for VAR_0 in sentence.split():\n        flg = 0\n        if len(VAR_0) == 1:\n            flg = 1\n        if flg == 1:\n            new_lst.append(VAR_0)\n    return \" \".join(new_lst)\n\n"], ["def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    VAR_0 = int(a) * int(c)\n    VAR_1 = int(b) * int(d)\n    if VAR_0 == VAR_1:\n        return True\n    else:\n        return False\n\n"], ["def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def digits_sum(VAR_0):\n        neg = 1\n        if VAR_0 < 0:\n            VAR_0, neg = -1 * VAR_0, -1\n        return sum(str(abs(VAR_0))[1:]) * neg\n\n    def order_by_digits(VAR_0):\n        if VAR_0 == 0:\n            return []\n        return [VAR_0] + order_by_digits(digits_sum(VAR_0 - 1))\n\n    return order_by_digits(sum(nums))\n\n"], ["def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1\n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for VAR_0 in nums:\n        if VAR_0 > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            if VAR_0 % 10 in odd_digits:\n                count += 1\n    return count\n\n"], ["def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n            For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n            Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n            Input: n = 5\n            Output: 1\n            Explanation:\n            a = [1, 3, 7, 13, 21]\n            The only valid triple is (1, 7, 13).\n    \"\"\"\n    A = [VAR_0 * VAR_0 - VAR_0 + 1 for VAR_0 in range(1, n + 1)]\n    ans = []\n    for VAR_0 in range(n):\n        for j in range(VAR_0 + 1, n):\n            for k in range(j + 1, n):\n                if A[j] % 3 == 0 and A[k] % 3 == 0 and A[j] + A[k] % 3 == 0:\n                    ans.append(A[j] + A[k])\n    return len(ans)\n\n"], ["def bf(planet1, planet2):\n    \"\"\"\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    \"\"\"\n    VAR_0 = (\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\",\n    )\n    if planet1 not in VAR_0 or planet2 not in VAR_0 or planet1 == planet2:\n        return ()\n    planet1_index = VAR_0.index(planet1)\n    planet2_index = VAR_0.index(planet2)\n    if planet1_index > planet2_index:\n        planet1_index, planet2_index = planet2_index, planet1_index\n    return VAR_0[planet1_index:planet2_index + 1]\n\n"], ["def sorted_list_sum(VAR_0):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    VAR_0.sort()\n    new_lst = []\n    for i in VAR_0:\n        if len(i) % 2 == 1:\n            new_lst.append(i)\n    return new_lst\n\n"], ["def x_or_y(VAR_0, x, y):\n    \"\"\"A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n\n    \"\"\"\n    if VAR_0 == 1:\n        return y\n    for i in range(2, VAR_0):\n        if VAR_0 % i == 0:\n            return 0\n    return x\n"], ["def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    # TODO: Write your code here.\n    return 0\n"], ["def compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    pass\n"], ["def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    strong = extensions[0]\n    my_val = len(\n        [VAR_0 for VAR_0 in extensions[0] if VAR_0.isalpha() and VAR_0.isupper()]\n    ) - len([VAR_0 for VAR_0 in extensions[0] if VAR_0.isalpha() and VAR_0.islower()])\n    for s in extensions:\n        val = len([VAR_0 for VAR_0 in s if VAR_0.isalpha() and VAR_0.isupper()]) - len(\n            [VAR_0 for VAR_0 in s if VAR_0.isalpha() and VAR_0.islower()]\n        )\n        if val > my_val:\n            strong = s\n    return class_name + \".\" + strong\n"], ["def cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    VAR_0 = len(b)\n    pat = b + b\n    for i in range(len(a) - VAR_0 + 1):\n        if a[i:i+VAR_0] == pat:\n            return True\n    return False\n"], ["def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n           even_odd_count(-12) ==> (1, 1)\n           even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    VAR_0 = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i) % 2 == 0:\n            odd_count += 1\n        else:\n            VAR_0 += 1\n    return (odd_count, VAR_0)\n\n"], ["def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"]\n    VAR_0 = 12\n    res = \"\"\n    while number:\n        res = num[number % 10] + res\n        number = number // 10\n    return res.lower()\n"], ["def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Your code here\n    return False\n"], ["def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # Write your code here\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = 0\n        for char in word:\n            count += 1\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n"], ["def eat(number, VAR_0, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n            the number of carrots that you have eaten.\n    @need : integer\n            the number of carrots that you need to eat.\n    @remaining : integer\n            the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    if VAR_0 <= remaining:\n        return [number + VAR_0, remaining - VAR_0]\n    else:\n        return [number, remaining]\n"], ["def do_algebra(operator, VAR_0):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( // )\n    Exponentiation ( ** )\n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n            The length of operator list is equal to the length of operand list minus one.\n            Operand is a list of of non-negative integers.\n            Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    expression = str(VAR_0[0])\n    for oprt, oprn in zip(operator, VAR_0[1:]):\n        expression = oprt + oprn + expression\n    return eval(expression)\n\n"], ["def solve(VAR_0):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    flg = 0\n    idx = 0\n    new_str = list(VAR_0)\n    for i in VAR_0:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n            idx += 1\n        else:\n            new_str[idx] = i\n            idx += 1\n    if flg == 0:\n        new_str = new_str[::-1]\n    return \"\".join(new_str)\n\n"], ["def string_to_md5(VAR_0):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    import hashlib\n    return hashlib.md5(VAR_0.encode()).hexdigest()\n\n"], ["def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    return [i for i in range(lower, upper + 1) if i % 2 == 0]\n\n"], ["from typing import List\n\n\ndef has_close_elements(oOD2jfc: List[float], threshold: float) -> bool:\n    \"\"\"Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for idx, elem in enumerate(oOD2jfc):\n        for idx2, elem2 in enumerate(oOD2jfc):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n    return False\n\n"], ["from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    current_string = []\n    current_depth = 0\n    for I in paren_string:\n        if I == \"(\":\n            current_depth += 1\n            current_string.append(I)\n        elif I == \")\":\n            current_depth -= 1\n            if current_depth == 0:\n                result.append(\"\".join(current_string))\n                current_string = []\n        elif I == \" \":\n            pass\n        else:\n            current_string.append(I)\n    if current_string:\n        result.append(\"\".join(current_string))\n    return result\n\n"], ["def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer_part, decimals = divmod(number, 1)\n    return decimals\n\n"], ["from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    vN427L3 = 0\n    for op in operations:\n        vN427L3 += op\n    return vN427L3 < 0\n\n"], ["from typing import List\n\n\ndef mean_absolute_deviation(bEDLbd2: List[float]) -> float:\n    \"\"\"For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(bEDLbd2) / len(bEDLbd2)\n    mad = 0\n    for i in bEDLbd2:\n        mad += abs(i - mean)\n    return mad / len(bEDLbd2)\n\n"], ["from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    mD9Z91 = []\n    for n in numbers[:-1]:\n        mD9Z91.append(n)\n        mD9Z91.append(delimeter)\n    mD9Z91.append(numbers[-1])\n    return mD9Z91\n\n"], ["from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n\n    def parse_paren_group(s):\n        depth = 0\n        s71c53j19 = 0\n        for c in s:\n            if c == \"(\":\n                depth += 1\n            elif c == \")\":\n                depth -= 1\n            elif c == \"(\":\n                s71c53j19 += 1\n            elif c == \")\":\n                s71c53j19 -= 1\n        return depth, s71c53j19\n\n    def parse_paren_group_list(s):\n        depth = 0\n        s71c53j19 = 0\n        for c in s:\n            if c == \"(\":\n                depth += 1\n            elif c == \")\":\n                depth -= 1\n            elif c == \"(\":\n                s71c53j19 += 1\n            elif c == \")\":\n                s71c53j19 -= 1\n        return depth, s71c53j19\n\n    def parse_paren_group_list_2(s):\n        depth = 0\n        s71c53j19 = 0\n        for c in s:\n            if c == \"(\":\n                depth += 1\n            elif c == \")\":\n                depth -= 1\n            elif c == \"(\":\n                s71c53j19 += 1\n            elif c == \")\":\n                s71c53j19 -= 1\n        return depth, s71c53j19\n\n    def parse_paren_group_list_3(s):\n        depth = 0\n        s71c53j19 = 0\n        for c in s:\n            if c == \"(\":\n                depth += 1\n            elif c == \")\":\n                depth -= 1\n            elif c == \"(\":\n                s71c53j19 += 1\n            elif c == \")\":\n                s71c53j19 -= 1\n        return depth, s71c53j19\n\n    def parse_paren_group_list_4(s):\n        depth = 0\n        s71c53j19 = 0\n        for c in s:\n            if c == \"(\":\n                depth += 1\n            elif c == \")\":\n                depth -= 1\n            elif c == \"(\":\n                s71c53j19 += 1\n            elif c == \")\":\n                s71c53j19 -= 1\n        return depth, s71c53j19\n\n    def parse_paren_group_list_5(s):\n        depth = 0\n        s71c53j19 = 0\n        for c in s:\n            if c == \"(\":\n                depth += 1\n            elif c == \")\":\n                depth -= 1\n            elif c == \"(\":\n                s71c53j19 += 1\n            elif c == \")\":\n                s71c53j19 -= 1\n        return depth, s71c53j19\n\n    def parse_paren_group_list_6(s):\n        depth = 0\n        s71c53j19 = 0\n        for c in s:\n            if c == \"(\":\n                depth += 1\n            elif c == \")\":\n                depth -= 1\n            elif c == \"(\":\n                s71c53j19 += 1\n            elif c == \")\":\n                s71c53j19 -= 1\n        return depth, s71c53j19\n\n    def parse_paren_group_list_7(s):\n        depth = 0\n        s71c53j19 = 0\n        for c in s:\n            if c == \"(\":\n                depth += 1\n            elif c == \")\":\n                depth -= 1\n            elif c == \"(\":\n                s71c53j19 += 1\n            elif c == \")\":\n                s71c53j19 -= 1\n        return depth, s71c53j19\n\n    def parse_paren_group_list_8(s"], ["from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]\n\n"], ["from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    sum_value = 0\n    A51U72rjTb = 1\n    for number in numbers:\n        sum_value += number\n        A51U72rjTb *= number\n    return sum_value, A51U72rjTb\n\n"], ["from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    wrNLwMt6s5h = None\n    result = []\n    for n in numbers:\n        if wrNLwMt6s5h is None:\n            wrNLwMt6s5h = n\n        else:\n            wrNLwMt6s5h = max(wrNLwMt6s5h, n)\n        result.append(wrNLwMt6s5h)\n    return result\n\n"], ["def is_palindrome(zF166P: str) -> bool:\n    \"\"\"Test if given string is a palindrome\"\"\"\n    return zF166P == zF166P[::-1]\n\n\ndef make_palindrome(zF166P: str) -> str:\n    \"\"\"Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not zF166P:\n        return \"\"\n    beginning_of_suffix = 0\n    end_of_suffix = 0\n    while beginning_of_suffix < len(zF166P) - 1:\n        if is_palindrome(zF166P[beginning_of_suffix:end_of_suffix + 1]):\n            beginning_of_suffix += 1\n        else:\n            end_of_suffix += 1\n    return zF166P[beginning_of_suffix:end_of_suffix + 1]\n\n"], ["from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    def xor(Y, j):\n        if Y == j:\n            return \"0\"\n        else:\n            return \"1\"\n\n    return \"\".join(map(xor, a, b))\n\n"], ["from typing import List, Optional\n\n\ndef longest(F8l4878: List[str]) -> Optional[str]:\n    \"\"\"Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not F8l4878:\n        return None\n    if len(F8l4878) == 1:\n        return F8l4878[0]\n    return max(F8l4878, key=len)\n\n"], ["def greatest_common_divisor(a: int, X: int) -> int:\n    \"\"\"Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while X:\n        a, X = X, a % X\n    return a\n\n"], ["from typing import List\n\n\ndef all_prefixes(kY8IF2: str) -> List[str]:\n    \"\"\"Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    result = []\n    for i in range(len(kY8IF2)):\n        result.append(kY8IF2[:i])\n    return result\n\n"], ["def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n))\n"], ["def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string))\n"], ["from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    note_map = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    note_list = []\n    for note in music_string:\n        note_list.append(note_map[note])\n    return note_list\n\n"], ["def how_many_times(string: str, xlK7d8Mwj: str) -> int:\n    \"\"\"Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    times = 0\n    for i in range(len(string) - len(xlK7d8Mwj) + 1):\n        if string[i:i+len(xlK7d8Mwj)] == xlK7d8Mwj:\n            times += 1\n    return times\n"], ["from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n\n\nvalue_map = {\n    \"zero\": 0,\n    \"one\": 1,\n    \"two\": 2,\n    \"three\": 3,\n    \"four\": 4,\n    \"five\": 5,\n    \"six\": 6,\n    \"seven\": 7,\n    \"eight\": 8,\n    \"nine\": 9,\n}\n\n"], ["from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest_pair = None\n    o4uUvta3 = None\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if o4uUvta3 is None:\n                    o4uUvta3 = abs(elem - elem2)\n                else:\n                    o4uUvta3 = min(o4uUvta3, abs(elem - elem2))\n    if closest_pair is None:\n        closest_pair = o4uUvta3\n    else:\n        closest_pair = min(closest_pair, o4uUvta3)\n    return closest_pair, numbers[closest_pair]\n\n"], ["from typing import List\n\n\ndef rescale_to_unit(R750J59: List[float]) -> List[float]:\n    \"\"\"Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_number = min(R750J59)\n    max_number = max(R750J59)\n    return [(x - min_number) / (max_number - min_number) for x in R750J59]\n\n"], ["from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [int(value) for value in values if isinstance(value, int)]\n\n"], ["def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n"], ["def largest_divisor(K: int) -> int:\n    \"\"\"For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in reversed(range(K)):\n        if K % i == 0:\n            return i\n    return K\n\n"], ["from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    import math\n\n    fact = []\n    i2 = 2\n    while i2 <= int(math.sqrt(n) + 1):\n        if n % i2 == 0:\n            fact.append(i2)\n            n //= i2\n        i2 += 1\n    if n > 1:\n        fact.append(n)\n    return fact\n\n"], ["from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    import collections\n\n    seen = collections.Counter()\n    for number in numbers:\n        if number in seen:\n            seen[number] -= 1\n        else:\n            seen[number] = 1\n    return list(seen.keys())\n\n"], ["def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.lower().upper()\n"], ["from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n"], ["from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\n"], ["def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x >= 0]\n"], ["def is_prime(P):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if P < 2:\n        return False\n    for k in range(2, P - 1):\n        if P % k == 0:\n            return False\n    return True\n"], ["import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\"xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    K7wi9, end = -1.0, 1.0\n    while poly(xs, K7wi9) * poly(xs, end) > 0:\n        K7wi9 *= 2.0\n        end *= 2.0\n    while end - K7wi9 > 1e-10:\n        K7wi9 /= 2.0\n        end /= 2.0\n    return K7wi9\n\n"], ["def sort_third(s: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    s = list(s)\n    for i in range(len(s)):\n        if s[i] % 3 != 0:\n            s.insert(i, s[i])\n            s.pop(i + 1)\n    return s\n\n"], ["def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n"], ["def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    j = l[0]\n    for e in l:\n        if e > j:\n            j = e\n    return j\n\n"], ["def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    ns = []\n    for O in range(n):\n        if O % 11 == 0 or O % 13 == 0:\n            ns.append(O)\n    return len(ns)\n"], ["def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    rp567 = l[::2]\n    odds = l[1::2]\n    rp567.sort()\n    ans = []\n    for i in range(len(rp567)):\n        if rp567[i] == odds[i]:\n            ans.append(rp567[i])\n        else:\n            ans.append(rp567[i])\n    return ans\n\n"], ["def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"], ["def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 89\n    elif n == 6:\n        return 233\n    elif n == 7:\n        return 144\n    elif n == 8:\n        return 71\n    elif n == 9:\n        return 35\n    elif n == 10:\n        return 17\n    elif n == 11:\n        return 6\n    elif n == 12:\n        return 3\n    elif n == 13:\n        return 2\n    elif n == 14:\n        return 1\n    elif n == 15:\n        return 0\n    elif n == 16:\n        return 1\n    elif n == 17:\n        return 0\n    elif n == 18:\n        return 1\n    elif n == 19:\n        return 0\n    elif n == 20:\n        return 1\n    elif n == 21:\n        return 0\n    elif n == 22:\n        return 1\n    elif n == 23:\n        return 0\n    elif n == 24:\n        return 1\n    elif n == 25:\n        return 0\n    elif n == 26:\n        return 1\n    elif n == 27:\n        return 0\n    elif n == 28:\n        return 1\n    elif n == 29:\n        return 0\n    elif n == 30:\n        return 1\n    elif n == 31:\n        return 0\n    elif n == 32:\n        return 1\n    elif n == 33:\n        return 0\n    elif n == 34:\n        return 1\n    elif n == 35:\n        return 0\n    elif n == 36:\n        return 1\n    elif n == 37:\n        return 0\n    elif n == 38:\n        return 1\n    elif n == 39:\n        return 0\n    elif n == 40:\n        return 1\n    elif n == 41:\n        return 0\n    elif n == 42:\n        return 1\n    elif n == 43:\n        return 0\n    elif n == 44:\n        return 1\n    elif n == 45:\n        return 0\n    elif n == 46:\n        return 1\n    elif n == 47:\n        return 0\n    elif n == 48:\n        return 1\n    elif n == 49:\n        return 0\n    elif n == 50:\n        return 1\n    elif n == 51:\n        return 0\n    elif n == 52:\n        return 1\n    elif n == 53:\n        return 0\n    elif n == 54:\n        return 1\n    elif n == 55:\n        return 0\n    elif n == 56:\n        return 1\n    elif n == 57:\n        return 0\n    elif n == 58:\n        return 1\n    elif n == 59:\n        return 0\n    elif n == 60:\n        return 1\n    elif n == 61:\n        return 0\n    elif n == 62:\n        return 1\n    elif n == 63:\n        return 0\n    elif n == 64:\n        return 1\n    elif n == 65:\n        return 0\n    elif n == 66:\n        return 1\n    elif n == 67:\n        return 0\n    elif n == 68:\n        return 1\n    elif n == 69:\n        return 0\n    elif n == 70:\n        return 1\n    elif n == 71:\n        return 0\n    elif n == 72:\n       "], ["def triples_sum_to_zero(O: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(O)):\n        for j in range(i + 1, len(O)):\n            for k in range(j + 1, len(O)):\n                if O[i] + O[j] + O[k] == 0:\n                    return True\n    return False\n\n"], ["def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # Write your code here.\n    pass\n"], ["def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n\n"], ["def pairs_sum_to_zero(C):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    for i, l1 in enumerate(C):\n        for j in range(i + 1, len(C)):\n            if l1 + C[j] == 0:\n                return True\n    return False\n\n"], ["def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    zoz = \"\"\n    while x > 0:\n        zoz = str(x % base) + zoz\n        x = x // base\n    return zoz[::-1]\n\n"], ["def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2\n"], ["def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    RIb09ob = [0, 0, 2, 0]\n    if n < 4:\n        return RIb09ob[n]\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\n"], ["def median(p: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    p = sorted(p)\n    if len(p) % 2 == 1:\n        return p[len(p) // 2]\n    else:\n        return (p[len(p) // 2 - 1] + p[len(p) // 2]) / 2\n\n"], ["def is_palindrome(fy06: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    for i in range(len(fy06)):\n        if fy06[i] != fy06[len(fy06) - 1 - i]:\n            return False\n    return True\n\n"], ["def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    JhR = 1\n    for i in range(n):\n        JhR = (JhR * JhR) % p\n    return JhR\n\n"], ["def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"], ["def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiou'\n    return ''.join(char for char in text if char not in vowels)\n\n"], ["def below_threshold(l: list, P: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for e in l:\n        if e >= P:\n            return False\n    return True\n\n"], ["def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n"], ["def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    if len(s0) != len(s1):\n        return False\n    for i in range(len(s0)):\n        if s0[i] != s1[i]:\n            return False\n    return True\n\n"], ["def fib(v: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if v == 0:\n        return 0\n    elif v == 1:\n        return 1\n    else:\n        return fib(v - 1) + fib(v - 2)\n\n"], ["def correct_bracketing(brackets: str):\n    \"\"\"brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    j6h32 = 0\n    for b in brackets:\n        if b == \"<\":\n            j6h32 += 1\n        elif b == \">\":\n            j6h32 -= 1\n        else:\n            return False\n    return j6h32 == 0\n\n"], ["def monotonic(b: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if b == sorted(b) or b == sorted(b, reverse=True):\n        return True\n    else:\n        return False\n"], ["def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    ret = set()\n    for lz in l1:\n        for e2 in l2:\n            if lz == e2:\n                ret.add(lz)\n    return sorted(ret)\n\n"], ["def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n    def is_prime(X):\n        if X < 2:\n            return False\n        for i in range(2, X - 1):\n            if X % i == 0:\n                return False\n        return True\n\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n    if n % 23 == 0:\n        return 23\n    if n % 29 == 0:\n        return 29\n    if n % 31 == 0:\n        return 31\n    if n % 37 == 0:\n        return 37\n    if n % 41 == 0:\n        return 41\n    if n % 43 == 0:\n        return 43\n    if n % 47 == 0:\n        return 47\n    if n % 53 == 0:\n        return 53\n    if n % 59 == 0:\n        return 59\n    if n % 61 == 0:\n        return 61\n    if n % 67 == 0:\n        return 67\n    if n % 71 == 0:\n        return 71\n    if n % 73 == 0:\n        return 73\n    if n % 79 == 0:\n        return 79\n    if n % 83 == 0:\n        return 83\n    if n % 89 == 0:\n        return 89\n    if n % 97 == 0:\n        return 97\n    if n % 101 == 0:\n        return 101\n    if n % 103 == 0:\n        return 103\n    if n % 107 == 0:\n        return 107\n    if n % 109 == 0:\n        return 109\n    if n % 113 == 0:\n        return 113\n    if n % 127 == 0:\n        return 127\n    if n % 131 == 0:\n        return 131\n    if n % 137 == 0:\n        return 137\n    if n % 139 == 0:\n        return 139\n    if n % 149 == 0:\n        return 149\n    if n % 151 == 0:\n        return 151\n    if n % 157 == 0:\n        return 157\n    if n % 163 == 0:\n        return 163\n    if n % 167 == 0:\n        return 167\n    if n % 173 == 0:\n        return 173\n    if n % 179 == 0:\n        return 179\n    if n % 181 == 0:\n        return 181\n    if n % 191 == 0:\n        return 191\n    if n % 193 == 0:\n        return 193\n    if n % 197 == 0:\n        return 197\n    if n % 199 == 0:\n        return 199\n    if n % 211 == 0:\n        return 211\n    if n % 223 == 0:\n        return 223\n    if n % 227 == 0:\n        return 227\n    if n % 229 == 0:\n        return 229\n    if n % 233 == 0:\n        return 233\n    if n % 239 == 0:\n        return 2"], ["def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))\n\n"], ["def correct_bracketing(brackets: str):\n    \"\"\"brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    OR31L = 0\n    for b in brackets:\n        if b == \"(\":\n            OR31L += 1\n        elif b == \")\":\n            OR31L -= 1\n        else:\n            return False\n    return OR31L == 0\n\n"], ["def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [x * (x + 1) / 2 for x in xs]\n\n"], ["def fibfib(w: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if w == 0:\n        return 0\n    if w == 1:\n        return 0\n    if w == 2:\n        return 1\n    if w == 3:\n        return 1\n    if w == 4:\n        return 2\n    if w == 5:\n        return 3\n    if w == 6:\n        return 5\n    if w == 7:\n        return 8\n    if w == 8:\n        return 13\n    if w == 9:\n        return 21\n    if w == 10:\n        return 34\n    if w == 11:\n        return 55\n    if w == 12:\n        return 89\n    if w == 13:\n        return 144\n    if w == 14:\n        return 233\n    if w == 15:\n        return 377\n    if w == 16:\n        return 610\n    if w == 17:\n        return 987\n    if w == 18:\n        return 1597\n    if w == 19:\n        return 2584\n    if w == 20:\n        return 4181\n    if w == 21:\n        return 6765\n    if w == 22:\n        return 10946\n    if w == 23:\n        return 17711\n    if w == 24:\n        return 28657\n    if w == 25:\n        return 46368\n    if w == 26:\n        return 75025\n    if w == 27:\n        return 121393\n    if w == 28:\n        return 196418\n    if w == 29:\n        return 317811\n    if w == 30:\n        return 514229\n    if w == 31:\n        return 832040\n    if w == 32:\n        return 1346269\n    if w == 33:\n        return 2178309\n    if w == 34:\n        return 3524578\n    if w == 35:\n        return 5702887\n    if w == 36:\n        return 8991256\n    if w == 37:\n        return 14907247\n    if w == 38:\n        return 24157817\n    if w == 39:\n        return 39088169\n    if w == 40:\n        return 63245986\n    if w == 41:\n        return 95667487\n    if w == 42:\n        return 144004074\n    if w == 43:\n        return 230243293\n    if w == 44:\n        return 372331702\n    if w == 45:\n        return 610510049\n    if w == 46:\n        return 987777178\n    if w == 47:\n        return 1597760507\n    if w == 48:\n        return 2604801586\n    if w == 49:\n        return 4217603175\n    if w == 50:\n        return 6721906974\n    if w == 51:\n        return 10485760001\n    if w == 52:\n        return 16579660000\n    if w == 53:\n        return"], ["FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\n\ndef vowels_count(D):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in D)\n    return n_vowels\n\n"], ["def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    H = str(x)\n    if shift > len(H):\n        return H[len(H) - shift:] + H[:shift]\n    else:\n        return H[:shift] + H[len(H) - shift:]\n"], ["def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n            digitSum(\"\") => 0\n            digitSum(\"abAB\") => 131\n            digitSum(\"abcCd\") => 67\n            digitSum(\"helloE\") => 69\n            digitSum(\"woArBld\") => 131\n            digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    if s == \"\":\n        return 0\n    else:\n        return sum(ord(c) for c in s if ord(c) >= 65 and ord(c) <= 90)\n\n"], ["def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    lis = list()\n    for r in s.split(\" \"):\n        lis.append(int(r))\n    return sum(lis) - sum(lis[0:n])\n"], ["def pluck(b4I):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n            Input: [4,2,3]\n            Output: [2, 1]\n            Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n            Input: [1,2,3]\n            Output: [2, 1]\n            Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n            Input: []\n            Output: []\n\n    Example 4:\n            Input: [5, 0, 3, 0, 4, 2]\n            Output: [0, 1]\n            Explanation: 0 is the smallest value, but  there are two zeros,\n                                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n            * 1 <= nodes.length <= 10000\n            * 0 <= node.value\n    \"\"\"\n    if len(b4I) == 0:\n        return []\n    evens = list(filter(lambda x: x % 2 == 0, b4I))\n    if len(evens) == 0:\n        return [b4I[0], 0]\n    return [evens[0], evens.index(min(evens))]\n\n"], ["def search(lst):\n    \"\"\"\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n            search([4, 1, 2, 2, 3, 1]) == 2\n            search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n            search([5, 5, 4, 4, 4]) == -1\n    \"\"\"\n    frq = [0] * (max(lst) + 1)\n    for Y in lst:\n        frq[Y] += 1\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= frq[ans]:\n            ans = i\n    return ans\n\n"], ["def strange_sort_list(Y47):\n    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    \"\"\"\n    res, switch = [], True\n    while Y47:\n        res.append(min(Y47) if switch else max(Y47))\n        Y47.remove(min(Y47) if switch else max(Y47))\n        switch = not switch\n    return res\n\n"], ["def triangle_area(h, b, c):\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if h + b <= c or h + c <= b or b + c <= h:\n        return -1\n    s = (h + b + c) / 2\n    return round(s * (s - h) * (s - b) * (s - c), 2)\n\n"], ["def will_it_fly(Q, w):\n    \"\"\"\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(Q) > w:\n        return False\n    i, j = 0, len(Q) - 1\n    while i < j:\n        if Q[i] + Q[j] > w:\n            j -= 1\n        elif Q[i] + Q[j] < w:\n            i += 1\n        else:\n            return True\n    return False\n"], ["def smallest_change(j8B):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    ans = 0\n    for i in range(len(j8B) // 2):\n        if j8B[i] != j8B[len(j8B) - 1 - i]:\n            ans += 1\n    return ans\n\n"], ["def total_match(lst1, lst2):\n    \"\"\"\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    \"\"\"\n    l1 = 0\n    for r0 in lst1:\n        l1 += len(r0)\n    l2 = 0\n    for r0 in lst2:\n        l2 += len(r0)\n    if l1 == l2:\n        return lst1\n    else:\n        return lst2\n\n"], ["def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n\n    def is_prime(n):\n        for H in range(2, n):\n            if n % H == 0:\n                return False\n        return True\n\n    for i in range(2, 101):\n        if is_prime(i):\n            return False\n    return True\n\n"], ["def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if n == 1:\n        return x == 1\n    r64i6 = 1\n    while n > 1:\n        if n % 2 == 1:\n            r64i6 *= x\n        n //= 2\n        x *= x\n    return r64i6 == x\n\n"], ["def iscube(p):\n    \"\"\"\n    Write a function that takes an integer a and returns True\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    \"\"\"\n    p = abs(p)\n    if p == 0:\n        return True\n    if p == 1:\n        return True\n    if p % 2 == 0:\n        return False\n    if p % 3 == 0:\n        return False\n    if p % 5 == 0:\n        return False\n    if p % 7 == 0:\n        return False\n    if p % 11 == 0:\n        return False\n    if p % 13 == 0:\n        return False\n    if p % 17 == 0:\n        return False\n    if p % 19 == 0:\n        return False\n    if p % 23 == 0:\n        return False\n    if p % 29 == 0:\n        return False\n    if p % 31 == 0:\n        return False\n    if p % 37 == 0:\n        return False\n    if p % 41 == 0:\n        return False\n    if p % 43 == 0:\n        return False\n    if p % 47 == 0:\n        return False\n    if p % 53 == 0:\n        return False\n    if p % 59 == 0:\n        return False\n    if p % 61 == 0:\n        return False\n    if p % 67 == 0:\n        return False\n    if p % 71 == 0:\n        return False\n    if p % 73 == 0:\n        return False\n    if p % 79 == 0:\n        return False\n    if p % 83 == 0:\n        return False\n    if p % 89 == 0:\n        return False\n    if p % 97 == 0:\n        return False\n    return True\n\n"], ["def hex_key(num):\n    \"\"\"You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    primes = (\"2\", \"3\", \"5\", \"7\", \"B\", \"D\")\n    VOl3U = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            VOl3U += 1\n    return VOl3U\n\n"], ["def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    # Your code here\n    pass\n\n"], ["def is_happy(d):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(d) < 3:\n        return False\n    for i in range(len(d) - 2):\n        if d[i] == d[i + 1] and d[i] == d[i + 2]:\n            return False\n    return True\n\n"], ["def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n                     GPA       |    Letter grade\n                      4.0                A+\n                    > 3.7                A\n                    > 3.3                A-\n                    > 3.0                B+\n                    > 2.7                B\n                    > 2.3                B-\n                    > 2.0                C+\n                    > 1.7                C\n                    > 1.3                C-\n                    > 1.0                D+\n                    > 0.7                D\n                    > 0.0                D-\n                      0.0                E\n\n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    A00h25W2N98m = []\n    for gpa in grades:\n        if gpa == 4.0:\n            A00h25W2N98m.append(\"A+\")\n        elif gpa > 3.7:\n            A00h25W2N98m.append(\"A\")\n        elif gpa > 3.3:\n            A00h25W2N98m.append(\"A-\")\n        elif gpa > 3.0:\n            A00h25W2N98m.append(\"B+\")\n        elif gpa > 2.7:\n            A00h25W2N98m.append(\"B\")\n        elif gpa > 2.3:\n            A00h25W2N98m.append(\"B-\")\n        elif gpa > 2.0:\n            A00h25W2N98m.append(\"C+\")\n        elif gpa > 1.7:\n            A00h25W2N98m.append(\"C\")\n        elif gpa > 1.3:\n            A00h25W2N98m.append(\"C-\")\n        elif gpa > 1.0:\n            A00h25W2N98m.append(\"D+\")\n        elif gpa > 0.7:\n            A00h25W2N98m.append(\"D\")\n        elif gpa > 0.0:\n            A00h25W2N98m.append(\"D-\")\n        elif gpa == 0.0:\n            A00h25W2N98m.append(\"E\")\n        else:\n            A00h25W2N98m.append(\"F\")\n    return A00h25W2N98m\n\n"], ["def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    o = len(string)\n    if o == 0 or o == 1:\n        return False\n    for i in range(2, o):\n        if string[i] == string[0] and string[i] != string[i + 1]:\n            return False\n    return True\n\n"], ["def starts_one_ends(g):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if g == 1:\n        return 1\n    elif g == 2:\n        return 2\n    else:\n        return 1 + starts_one_ends(g - 1)\n\n"], ["def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Write your code here\n    return \"\"\n"], ["def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(x for x in lst if x % 2 == 0)\n\n"], ["def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return ''.join(sorted(s, key=ord))\n\n"], ["def get_row(lst, m):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    coords = [\n        (i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == m\n    ]\n    coords.sort(key=lambda x: x[0])\n    coords.sort(key=lambda x: x[1], reverse=True)\n    return coords\n\n"], ["def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Write your code here\n    pass\n"], ["def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    M = \"abcdefghijklmnopqrstuvwxyz\"\n    out = \"\"\n    for c in s:\n        if c in M:\n            out += M[(M.index(c) + 2) % len(M)]\n        else:\n            out += c\n    return out\n\n"], ["def next_smallest(Jv5):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n\n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    Jv5 = sorted(set(Jv5))\n    return Jv5[1] if len(Jv5) > 1 else None\n"], ["def is_bored(K):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    import re\n    return sum(1 for word in K.split() if word.startswith(\"I\"))\n\n"], ["def any_int(x, y, i):\n    \"\"\"\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    any_int(5, 2, 7) \u279e True\n\n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n\n    any_int(3.6, -2.2, 2) \u279e False\n\n\n\n    \"\"\"\n    if isinstance(x, int) and isinstance(y, int) and isinstance(i, int):\n        if (x + y == i) or (x + i == y) or (y + i == x):\n            return True\n    return False\n\n"], ["def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(x, chr(ord(x) + 2)) for x in vowels])\n    return \"\".join([vowels_replace[x] if x in vowels else x for x in message])\n\n"], ["def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n\n    def isPrime(n):\n        for h in range(2, int(n ** 0.5) + 1):\n            if n % h == 0:\n                return False\n        return True\n\n    maxx = 0\n    for i in lst:\n        if isPrime(i):\n            if i > maxx:\n                maxx = i\n    return maxx\n\n"], ["def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict.keys()) == 0:\n        return False\n    else:\n        A4p0C = \"start\"\n        for key in dict.keys():\n            if isinstance(key, str) == False:\n                A4p0C = \"mixed\"\n                break\n            if A4p0C == \"start\":\n                if key.isupper():\n                    A4p0C = \"upper\"\n                else:\n                    A4p0C = \"lower\"\n            elif A4p0C == \"mixed\":\n                if key.isupper():\n                    A4p0C = \"upper\"\n                elif key.islower():\n                    A4p0C = \"lower\"\n            elif A4p0C == \"upper\":\n                if key.islower():\n                    A4p0C = \"lower\"\n                else:\n                    A4p0C = \"mixed\"\n            elif A4p0C == \"lower\":\n                if key.isupper():\n                    A4p0C = \"upper\"\n                else:\n                    A4p0C = \"mixed\"\n        return A4p0C == \"upper\"\n\n"], ["def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    primes = []\n    for H in range(2, n):\n        is_prime = True\n        for j in range(2, H):\n            if H % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(H)\n    return primes\n\n"], ["def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    return a * b\n\n"], ["def count_upper(X):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n\n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0, len(X), 2):\n        if X[i] == 'A' and X[i + 1] == 'B':\n            count += 1\n    return count\n\n"], ["def closest_integer(zneHe):\n    \"\"\"\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    \"\"\"\n    from math import floor, ceil\n\n    if zneHe.count(\".\") == 1:\n        # remove trailing zeros\n        while zneHe[-1] == \"0\":\n            zneHe = zneHe[:-1]\n    num = float(zneHe)\n    if zneHe[-2:] == \".5\":\n        if num > 0:\n            return int(ceil(num))\n        else:\n            return int(floor(num))\n    elif zneHe[-2:] == \".0\":\n        if num > 0:\n            return int(ceil(num))\n        else:\n            return int(floor(num))\n    else:\n        return int(num)\n"], ["def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n % 2 == 0:\n        return [n, n // 2]\n    else:\n        return [n // 2, n]\n\n"], ["def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n\n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    if not s:\n        return []\n    kKK102 = []\n    for letter in s:\n        if letter == \",\":\n            kKK102.append(\"\")\n        else:\n            kKK102.append(letter)\n    return kKK102\n\n"], ["def choose_num(x, E):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > E:\n        return -1\n    if E % 2 == 0:\n        return E\n    else:\n        return choose_num(E + 1, E)\n\n"], ["def rounded_avg(w, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if m < w:\n        return -1\n    summation = 0\n    for i in range(w, m + 1):\n        summation += i\n    return summation // 2\n"], ["def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n\n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    odd_digit_elements = []\n    for i2 in x:\n        if i2 % 2 == 0:\n            odd_digit_elements.append(i2)\n    return sorted(set(x) - set(odd_digit_elements))\n\n"], ["def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n                    -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n                    -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n                    -> sort arr -> [-1, 1, 55]\n                    -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n\ndic = {\n    1: \"One\",\n    2: \"Two\",\n    3: \"Three\",\n    4: \"Four\",\n    5: \"Five\",\n    6: \"Six\",\n    7: \"Seven\",\n    8: \"Eight\",\n    9: \"Nine\",\n}\n\n"], ["def f(n):\n    \"\"\"Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    ret = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            Q = 1\n            for j in range(1, i + 1):\n                Q *= j\n            ret.append(Q)\n        else:\n            ret.append(i)\n    return ret\n\n"], ["def even_odd_palindrome(h):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n            Input: 3\n            Output: (1, 2)\n            Explanation:\n            Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n            Input: 12\n            Output: (4, 6)\n            Explanation:\n            Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n            1. 1 <= n <= 10^3\n            2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n    def is_palindrome(h):\n        return str(h) == str(h)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, h + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_palindrome_count += 1\n            else:\n                odd_palindrome_count += 1\n\n    return even_palindrome_count, odd_palindrome_count\n\n"], ["def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n\n    def digits_sum(m):\n        neg = 1\n        if m < 0:\n            m, neg = -1 * m, -1\n        return sum(map(abs, str(m)))\n\n    return sum(map(digits_sum, arr))\n\n"], ["def move_one_ball(bb7):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n            You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                             be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                            array by performing any number of right shift operations.\n\n    \"\"\"\n    if len(bb7) == 0:\n        return True\n    sorted_array = sorted(bb7)\n    my_arr = []\n    min_value = min(bb7)\n    max_value = max(bb7)\n    for i in range(len(bb7)):\n        if bb7[i] == min_value:\n            my_arr.append(i)\n    for i in range(len(bb7)):\n        if bb7[i] == max_value:\n            my_arr.append(i)\n    if len(my_arr) == len(bb7):\n        return True\n    else:\n        return False\n\n"], ["def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    odd = 0\n    even = 0\n    for w in lst1:\n        if w % 2 == 1:\n            odd += 1\n    for w in lst2:\n        if w % 2 == 0:\n            even += 1\n    if odd == 0 and even == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n"], ["def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    dict1 = {}\n    list1 = test.split(\" \")\n    t = 0\n    for u in list1:\n        if (list1.count(u) > t) and u != \"\":\n            dict1[u] = list1.count(u)\n        t = list1.count(u)\n    return dict1\n\n"], ["def reverse_delete(s2, c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    s2 = \"\".join([char for char in s2 if char not in c])\n    return s2, s2 == s2\n"], ["def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    res = []\n    for arr in lst:\n        res.append(len(list(filter(str.isdigit, arr))))\n    return res\n\n"], ["def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    tnz31v4 = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if s < 0:\n            tnz31v4 += 1\n            s = 0\n    return tnz31v4\n\n"], ["def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # Write your code here\n    # 1. Find the max number of buckets\n    max_buckets = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_buckets += 1\n    # 2. Find the max number of units of water\n    max_units = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units += 1\n    # 3. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 4. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 5. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 6. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 7. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 8. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 9. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 10. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 11."], ["def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n"], ["def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    result = []\n    for h5Pf in s.split():\n        n_consonants = 0\n        for i in range(0, len(h5Pf)):\n            if h5Pf[i].lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]:\n                n_consonants += 1\n        if n_consonants == n:\n            result.append(h5Pf)\n    return result\n"], ["def get_closest_vowel(OIrC):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    if len(OIrC) < 3:\n        return \"\"\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"O\", \"U\", \"I\"}\n    left = OIrC[0]\n    right = OIrC[-1]\n    if left in vowels and right in vowels:\n        return right\n    return \"\"\n\n"], ["def match_parens(lst):\n    \"\"\"\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    \"\"\"\n\n    def check(s):\n        l8d = 0\n        for i in s:\n            if i == \"(\":\n                l8d = l8d + 1\n            else:\n                l8d = l8d - 1\n        return l8d == 0\n\n    return check(lst[0]) and check(lst[1])\n\n"], ["def maximum(lcA, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n            Input: arr = [-3, -4, 5], k = 3\n            Output: [-4, -3, 5]\n\n    Example 2:\n\n            Input: arr = [4, -4, 4], k = 2\n            Output: [4, 4]\n\n    Example 3:\n\n            Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n            Output: [2]\n\n    Note:\n            1. The length of the array will be in the range of [1, 1000].\n            2. The elements in the array will be in the range of [-1000, 1000].\n            3. 0 <= k <= len(arr)\n    \"\"\"\n    if k == 0:\n        return []\n    if k == 1:\n        return [max(lcA)]\n    if k == 2:\n        return [max(lcA), max(lcA)]\n    if k == 3:\n        return [max(lcA), max(lcA), max(lcA)]\n    if k == 4:\n        return [max(lcA), max(lcA), max(lcA), max(lcA)]\n    if k == 5:\n        return [max(lcA), max(lcA), max(lcA), max(lcA), max(lcA)]\n    if k == 6:\n        return [max(lcA), max(lcA), max(lcA), max(lcA), max(lcA), max(lcA)]\n    if k == 7:\n        return [max(lcA), max(lcA), max(lcA), max(lcA), max(lcA), max(lcA), max(lcA)]\n    if k == 8:\n        return [max(lcA), max(lcA), max(lcA), max(lcA), max(lcA), max(lcA), max(lcA), max(lcA)]\n    if k == 9:\n        return [max(lcA), max(lcA), max(lcA), max(lcA), max(lcA), max(lcA), max(lcA), max(lcA), max(lcA)]\n    if k == 10:\n        return [max(lcA), max(lcA), max(lcA), max(lcA), max(lcA), max(lcA), max(lcA), max(lcA), max(lcA), max(lcA)]\n    if k == 11:\n        return [max(lcA), max(lcA), max(lcA), max(lcA), max(lcA), max(lcA), max(lcA), max(lcA), max(lcA), max(lcA), max(lcA)]\n    if k == 12:\n        return [max(lcA), max(lcA), max(lcA), max(lcA), max(lcA), max(lcA), max(lcA), max(lcA), max(lcA), max(lcA), max(lcA), max(lcA)]\n    if k == 13:\n        return [max(lcA), max(lcA), max(lcA), max(lcA), max(lcA), max(lcA), max(lcA), max(lcA), max(lcA), max(lcA), max(lcA), max(lcA), max(lcA)]\n    if k == 14:\n        return [max(lcA), max(lcA), max(lcA), max(lcA), max(lcA), max(lcA), max(lcA), max(lcA), max(lcA), max(lcA), max(lcA), max(lcA), max(lcA)]\n    if k == 15:\n        return [max(lcA), max(lcA), max(lcA), max(lcA), max(lcA), max(lcA), max(lcA), max(lcA), max(lcA), max(lcA), max(lcA), max(lcA), max(lcA), max(lcA)]\n    if k == 16:\n        return [max(lcA), max(lcA), max(lcA), max(lcA), max(lcA), max(lcA),"], ["def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(x for x in lst if x % 2 == 1)\n\n"], ["def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return sum(arr[i:i+k] for i in range(len(arr)-k+1))\n"], ["def get_odd_collatz(E):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n            1. Collatz(1) is [1].\n            2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if E % 2 == 0:\n        odd_collatz = []\n    else:\n        odd_collatz = [E]\n    while E > 1:\n        if E % 2 == 0:\n            E = E / 2\n        else:\n            E = 3 * E + 1\n        odd_collatz.append(E)\n    return sorted(odd_collatz)\n\n"], ["def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    try:\n        date = date.strip()\n        month, t8H, year = date.split(\"-\")\n        month, t8H, year = int(month), int(t8H), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12] and t8H < 1 or t8H > 31:\n            return False\n        if month in [4, 6, 9, 11] and t8H < 1 or t8H > 30:\n            return False\n        if month == 2 and t8H < 1 or t8H > 29:\n            return False\n        if month == 2 and t8H == 29:\n            return False\n        if month == 2 and t8H == 28:\n            return False\n        if month == 2 and t8H == 27:\n            return False\n        if month == 2 and t8H == 26:\n            return False\n        if month == 2 and t8H == 25:\n            return False\n        if month == 2 and t8H == 24:\n            return False\n        if month == 2 and t8H == 23:\n            return False\n        if month == 2 and t8H == 22:\n            return False\n        if month == 2 and t8H == 21:\n            return False\n        if month == 2 and t8H == 20:\n            return False\n        if month == 2 and t8H == 19:\n            return False\n        if month == 2 and t8H == 18:\n            return False\n        if month == 2 and t8H == 17:\n            return False\n        if month == 2 and t8H == 16:\n            return False\n        if month == 2 and t8H == 15:\n            return False\n        if month == 2 and t8H == 14:\n            return False\n        if month == 2 and t8H == 13:\n            return False\n        if month == 2 and t8H == 12:\n            return False\n        if month == 2 and t8H == 11:\n            return False\n        if month == 2 and t8H == 10:\n            return False\n        if month == 2 and t8H == 9:\n            return False\n        if month == 2 and t8H == 8:\n            return False\n        if month == 2 and t8H == 7:\n            return False\n        if month == 2 and t8H == 6:\n            return False\n        if month == 2 and t8H == 5:\n            return False\n        if month == 2 and t8H == 4:\n            return False\n        if month == 2 and t8H == 3:\n            return False\n        if month == 2 and t8H == 2:\n            return False\n        if month == 2 and t8H == 1:\n            return False\n        if month == 2 and t8H == 0:\n            return False\n        if month == 2 and t8H == -1:\n            return False\n        if month == 2 and t8H == -2"], ["def split_words(OIE):\n    \"\"\"\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3\n    \"\"\"\n    if \" \" in OIE:\n        return OIE.split()\n    elif \",\" in OIE:\n        return [ord(c) - ord('a') for c in OIE]\n    else:\n        return len(OIE) // 2\n\n"], ["def is_sorted(lst):\n    \"\"\"\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    \"\"\"\n    count_digit = dict([(V, 0) for V in lst])\n    for V in lst:\n        count_digit[V] += 1\n    if any(count_digit[V] > 2 for V in lst):\n        return False\n    return True\n\n"], ["def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n\n    def is_prime(E3e):\n        if E3e == 1 or E3e == 0:\n            return False\n        if E3e == 2:\n            return True\n        for i in range(2, E3e):\n            if E3e % i == 0:\n                return False\n        return True\n\n    if interval1[1] <= interval2[0] or interval2[1] <= interval1[0]:\n        return \"NO\"\n\n    if interval1[0] == interval2[0]:\n        return \"YES\"\n\n    if interval1[1] - interval2[0] == 1:\n        return \"YES\"\n\n    if is_prime(interval1[1] - interval2[0]):\n        return \"YES\"\n\n    return \"NO\"\n\n"], ["def prod_signs(R30):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not R30:\n        return None\n    return sum(map(lambda x: x * x, R30))\n"], ["def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n            Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n            Output: [1, 2, 1]\n\n            Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n            Output: [1]\n    \"\"\"\n    n = len(grid)\n    val = n * n + 1\n    for N in range(n):\n        for j in range(n):\n            if grid[N][j] == 1:\n                temp = []\n                if N != 0:\n                    temp.append(grid[N - 1][j])\n                if j != 0:\n                    temp.append(grid[N][j - 1])\n                if N != n - 1:\n                    temp.append(grid[N + 1][j])\n                if j != n - 1:\n                    temp.append(grid[N][j + 1])\n                val = min(val, sum(temp))\n    return val\n\n"], ["def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n               = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i2 in range(2, n + 1):\n        my_tri.append(my_tri[i2 - 1] + my_tri[i2 - 2] + my_tri[i2 - 3])\n    return my_tri\n\n"], ["def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    I0118f8 = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit % 2 == 1:\n            odd_count += 1\n    if odd_count == 0:\n        return 0\n    else:\n        return I0118f8 * digits(odd_count)\n\n"], ["def is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for e in range(len(string)):\n        if string[e] == \"[\":\n            opening_bracket_index.append(e)\n        else:\n            closing_bracket_index.append(e)\n    closing_bracket_index.reverse()\n    cnt = 0\n    for i in range(len(opening_bracket_index)):\n        if opening_bracket_index[i] == closing_bracket_index[i]:\n            cnt += 1\n    return cnt >= 2\n\n"], ["def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n\n\n    \"\"\"\n    import math\n\n    z0YMM23 = 0\n    for i in lst:\n        z0YMM23 += i ** 2\n    return round(z0YMM23, 2)\n\n"], ["def check_if_last_char_is_a_letter(txt):\n    \"\"\"\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False\n    \"\"\"\n    last_char = txt[-1]\n    if last_char.isalpha() and last_char not in \" \":\n        return True\n    return False\n\n"], ["def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    ind = -1\n    u = 1\n    while u < len(arr):\n        if arr[u] >= arr[u+1]:\n            ind = u\n            u += 1\n        else:\n            u += 1\n    return ind\n\n"], ["def largest_smallest_integers(lst):\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    \"\"\"\n    smallest = list(filter(lambda D: D < 0, lst))\n    largest = list(filter(lambda D: D > 0, lst))\n    if len(smallest) == 0 and len(largest) == 0:\n        return None, None\n    elif len(smallest) == 0:\n        return largest, smallest[0]\n    elif len(largest) == 0:\n        return smallest, largest[0]\n    else:\n        return max(smallest), min(largest)\n\n"], ["def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    r10MHz, temp_b = a, b\n    if isinstance(r10MHz, str):\n        r10MHz = r10MHz.replace(\",\", \".\")\n    if isinstance(temp_b, str):\n        temp_b = temp_b.replace(\",\", \".\")\n    if isinstance(r10MHz, float) and isinstance(temp_b, float):\n        return max(r10MHz, temp_b)\n    if isinstance(r10MHz, int) and isinstance(temp_b, int):\n        return max(r10MHz, temp_b)\n    return None\n\n"], ["def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    sum_of_even = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0 and i % 4 == 0:\n            sum_of_even += i\n    return sum_of_even == n\n"], ["def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    ur08Nf = 1\n    special_fact = 1\n    for i in range(1, n + 1):\n        special_fact *= i\n        ur08Nf *= i\n    return special_fact\n\n"], ["def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    new_text = \"\"\n    M = 0\n    start, end = 0, 0\n    while M < len(text):\n        if text[M] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\" + text[M]\n            elif end - start > 0:\n                new_text += text[M]\n            start = end\n            end = 0\n        M += 1\n    return new_text\n\n"], ["def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    suf = [\"txt\", \"exe\", \"dll\"]\n    M65 = file_name.split(sep=\".\")\n    if len(M65) != 2:\n        return \"No\"\n    if not M65[1] in suf:\n        return \"No\"\n    if len(M65[0]) == 0:\n        return \"No\"\n    if M65[0][0].isalpha():\n        return \"No\"\n    return \"Yes\"\n"], ["def sum_squares(lst):\n    \"\"\" \"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    result = []\n    for I in range(len(lst)):\n        if I % 3 == 0:\n            result.append(lst[I] ** 2)\n        elif I % 4 == 0:\n            result.append(lst[I] ** 3)\n        else:\n            result.append(lst[I])\n    return sum(result)\n\n"], ["def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n            Input: sentence = \"This is a test\"\n            Output: \"is\"\n\n    Example 2:\n            Input: sentence = \"lets go for swimming\"\n            Output: \"go for\"\n\n    Constraints:\n            * 1 <= len(sentence) <= 100\n            * sentence contains only letters\n    \"\"\"\n    new_lst = []\n    for bXj7 in sentence.split():\n        flg = 0\n        if len(bXj7) == 1:\n            flg = 1\n        for i in range(1, len(bXj7) + 1):\n            if bXj7[i - 1] == bXj7[i]:\n                flg = 0\n        if flg == 1:\n            new_lst.append(bXj7)\n    return \" \".join(new_lst)\n\n"], ["def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    P9J41878M = int(a) * int(c)\n    P9J41878M = P9J41878M / int(d)\n    if P9J41878M == int(P9J41878M):\n        return True\n    else:\n        return False\n\n"], ["def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def digits_sum(D):\n        neg = 1\n        if D < 0:\n            D, neg = -1 * D, -1\n        return sum(map(abs, list(str(D)))) * neg\n\n    nums.sort(key=digits_sum)\n    return nums\n\n"], ["def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1\n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    p75BL = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            if num % 10 in odd_digits:\n                p75BL += 1\n    return p75BL\n\n"], ["def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n            For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n            Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n            Input: n = 5\n            Output: 1\n            Explanation:\n            a = [1, 3, 7, 13, 21]\n            The only valid triple is (1, 7, 13).\n    \"\"\"\n    A = [w * w - w + 1 for w in range(1, n + 1)]\n    ans = []\n    for w in range(n):\n        for j in range(w + 1, n):\n            for k in range(j + 1, n):\n                if A[w] + A[j] + A[k] % 3 == 0:\n                    ans.append(A[w] + A[j] + A[k])\n    return len(ans)\n\n"], ["def bf(planet1, planet2):\n    \"\"\"\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    \"\"\"\n    PV009b8zHVwA = (\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\",\n    )\n    if planet1 not in PV009b8zHVwA or planet2 not in PV009b8zHVwA or planet1 == planet2:\n        return ()\n    planet1_index = PV009b8zHVwA.index(planet1)\n    planet2_index = PV009b8zHVwA.index(planet2)\n    if planet1_index > planet2_index:\n        planet1_index, planet2_index = planet2_index, planet1_index\n    return PV009b8zHVwA[planet1_index:planet2_index + 1]\n\n"], ["def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    lst.sort()\n    new_lst = []\n    for Y in lst:\n        if len(Y) % 2 == 1:\n            new_lst.append(Y)\n    return new_lst\n\n"], ["def x_or_y(Q, x, y):\n    \"\"\"A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n\n    \"\"\"\n    if Q == 1:\n        return y\n    for i in range(2, Q):\n        if Q % i == 0:\n            return x\n    return y\n\n"], ["def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    # TODO: Write your code here.\n    return 0\n"], ["def compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    pass\n"], ["def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    strong = extensions[0]\n    my_val = len([y for y in extensions[0] if y.isalpha() and y.isupper()]) - len(\n        [y for y in extensions[0] if y.isalpha() and y.islower()]\n    )\n    for s in extensions:\n        val = len([y for y in s if y.isalpha() and y.isupper()]) - len(\n            [y for y in s if y.isalpha() and y.islower()]\n        )\n        if val > my_val:\n            strong = s\n    return class_name + \".\" + strong\n"], ["def cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    y = len(b)\n    pat = b + b\n    for i in range(len(a) - y + 1):\n        if a[i:i+y] == pat:\n            return True\n    return False\n\n"], ["def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n           even_odd_count(-12) ==> (1, 1)\n           even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    dk27189290 = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i) % 2 == 0:\n            odd_count += 1\n        else:\n            dk27189290 += 1\n    return (odd_count, dk27189290)\n\n"], ["def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"]\n    J = 12\n    res = \"\"\n    while number:\n        res = num[number % 10] + res\n        number = number // 10\n    return res.lower()\n\n"], ["def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Your code here\n    return False\n"], ["def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # Write your code here\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = 0\n        for char in word:\n            count += 1\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n"], ["def eat(number, need, MlbH227H3):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n            the number of carrots that you have eaten.\n    @need : integer\n            the number of carrots that you need to eat.\n    @remaining : integer\n            the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    if need <= MlbH227H3:\n        return [number + need, MlbH227H3 - need]\n    else:\n        return [MlbH227H3, 0]\n"], ["def do_algebra(operator, UHG2927):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( // )\n    Exponentiation ( ** )\n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n            The length of operator list is equal to the length of operand list minus one.\n            Operand is a list of of non-negative integers.\n            Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    expression = str(UHG2927[0])\n    for oprt, oprn in zip(operator, UHG2927[1:]):\n        expression += oprt + str(oprn)\n    return eval(expression)\n"], ["def solve(h):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    flg = 0\n    idx = 0\n    new_str = list(h)\n    for i in h:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n            idx += 1\n        else:\n            new_str[idx] = i\n            idx += 1\n    if flg == 0:\n        new_str = new_str[::-1]\n    return \"\".join(new_str)\n\n"], ["def string_to_md5(KH3K):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    import hashlib\n    return hashlib.md5(KH3K.encode()).hexdigest()\n\n"], ["def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    return [i for i in range(lower, upper + 1) if i % 2 == 0]\n\n"], ["from typing import List\n\n\ndef has_close_elements(Ck75S7v: List[float], threshold: float) -> bool:\n    \"\"\"Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for idx, elem in enumerate(Ck75S7v):\n        for idx2, elem2 in enumerate(Ck75S7v):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n    return False\n\n"], ["from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    q79M6415C331v7 = []\n    current_depth = 0\n    for c in paren_string:\n        if c == \"(\":\n            current_depth += 1\n            q79M6415C331v7.append(c)\n        elif c == \")\":\n            current_depth -= 1\n            if current_depth == 0:\n                result.append(\"\".join(q79M6415C331v7))\n                q79M6415C331v7 = []\n        elif c == \" \":\n            pass\n        else:\n            raise ValueError(\"Invalid input string\")\n    if q79M6415C331v7:\n        result.append(\"\".join(q79M6415C331v7))\n    return result\n\n"], ["def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer_part, decimals = divmod(number, 1)\n    return decimals\n\n"], ["from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    j43yWH6 = 0\n    for op in operations:\n        j43yWH6 += op\n    return j43yWH6 < 0\n\n"], ["from typing import List\n\n\ndef mean_absolute_deviation(G2PwTMU: List[float]) -> float:\n    \"\"\"For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(G2PwTMU) / len(G2PwTMU)\n    mad = 0\n    for i in G2PwTMU:\n        mad += abs(i - mean)\n    return mad / len(G2PwTMU)\n\n"], ["from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    g41Q6x = []\n    for n in numbers[:-1]:\n        g41Q6x.append(n)\n        g41Q6x.append(delimeter)\n    g41Q6x.append(numbers[-1])\n    return g41Q6x\n\n"], ["from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n\n    def parse_paren_group(s):\n        depth = 0\n        m2i1XwIG2 = 0\n        for c in s:\n            if c == \"(\":\n                depth += 1\n            elif c == \")\":\n                depth -= 1\n            elif c == \"(\":\n                m2i1XwIG2 += 1\n            elif c == \")\":\n                m2i1XwIG2 -= 1\n        return depth, m2i1XwIG2\n\n    def parse_paren_group_list(s):\n        depth = 0\n        m2i1XwIG2 = 0\n        for c in s:\n            if c == \"(\":\n                depth += 1\n            elif c == \")\":\n                depth -= 1\n            elif c == \"(\":\n                m2i1XwIG2 += 1\n            elif c == \")\":\n                m2i1XwIG2 -= 1\n        return depth, m2i1XwIG2\n\n    def parse_paren_group_list_2(s):\n        depth = 0\n        m2i1XwIG2 = 0\n        for c in s:\n            if c == \"(\":\n                depth += 1\n            elif c == \")\":\n                depth -= 1\n            elif c == \"(\":\n                m2i1XwIG2 += 1\n            elif c == \")\":\n                m2i1XwIG2 -= 1\n        return depth, m2i1XwIG2\n\n    def parse_paren_group_list_3(s):\n        depth = 0\n        m2i1XwIG2 = 0\n        for c in s:\n            if c == \"(\":\n                depth += 1\n            elif c == \")\":\n                depth -= 1\n            elif c == \"(\":\n                m2i1XwIG2 += 1\n            elif c == \")\":\n                m2i1XwIG2 -= 1\n        return depth, m2i1XwIG2\n\n    def parse_paren_group_list_4(s):\n        depth = 0\n        m2i1XwIG2 = 0\n        for c in s:\n            if c == \"(\":\n                depth += 1\n            elif c == \")\":\n                depth -= 1\n            elif c == \"(\":\n                m2i1XwIG2 += 1\n            elif c == \")\":\n                m2i1XwIG2 -= 1\n        return depth, m2i1XwIG2\n\n    def parse_paren_group_list_5(s):\n        depth = 0\n        m2i1XwIG2 = 0\n        for c in s:\n            if c == \"(\":\n                depth += 1\n            elif c == \")\":\n                depth -= 1\n            elif c == \"(\":\n                m2i1XwIG2 += 1\n            elif c == \")\":\n                m2i1XwIG2 -= 1\n        return depth, m2i1XwIG2\n\n    def parse_paren_group_list_6(s):\n        depth = 0\n        m2i1XwIG2 = 0\n        for c in s:\n            if c == \"(\":\n                depth += 1\n            elif c == \")\":\n                depth -= 1\n            elif c == \"(\":\n                m2i1XwIG2 += 1\n            elif c == \")\":\n                m2i1XwIG2 -= 1\n        return depth, m2i1XwIG2\n\n    def parse_paren_group_list_7(s):\n        depth = 0\n        m2i1XwIG2 = 0\n        for c in s:\n            if c == \"(\":\n                depth += 1\n            elif c == \")\":\n                depth -= 1\n            elif c == \"(\":\n                m2i1XwIG2 += 1\n            elif c == \")\":\n                m2i1XwIG2 -= 1\n        return depth, m2i1XwIG2\n\n    def parse_paren_group_list_8(s):\n        depth = 0\n        m2i1XwIG2 = 0\n        for c in s:\n            if c == \"(\":\n                depth"], ["from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]\n\n"], ["from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    sum_value = 0\n    DXH5VljJ47 = 1\n    for number in numbers:\n        sum_value += number\n        DXH5VljJ47 *= number\n    return sum_value, DXH5VljJ47\n\n"], ["from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    G722114HM67 = None\n    result = []\n    for n in numbers:\n        if G722114HM67 is None:\n            G722114HM67 = n\n            result.append(n)\n        else:\n            if n > G722114HM67:\n                G722114HM67 = n\n                result.append(n)\n    return result\n\n"], ["def is_palindrome(d800qq: str) -> bool:\n    \"\"\"Test if given string is a palindrome\"\"\"\n    return d800qq == d800qq[::-1]\n\n\ndef make_palindrome(d800qq: str) -> str:\n    \"\"\"Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not d800qq:\n        return \"\"\n    beginning_of_suffix = 0\n    longest_postfix = \"\"\n    for i in range(len(d800qq) - 1, -1, -1):\n        if is_palindrome(d800qq[i]):\n            beginning_of_suffix = i\n            break\n    if beginning_of_suffix == 0:\n        return \"\"\n    for i in range(beginning_of_suffix, len(d800qq)):\n        if is_palindrome(d800qq[i]):\n            longest_postfix = d800qq[i]\n            break\n    return longest_postfix + d800qq[beginning_of_suffix]\n"], ["from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    def xor(i, j):\n        if i == j:\n            return \"0\"\n        if i == \"0\":\n            return j\n        if j == \"0\":\n            return i\n        return \"1\"\n\n    return \"\".join(xor(i, j) for i, j in zip(a, b))\n\n"], ["from typing import List, Optional\n\n\ndef longest(q74VQ6K: List[str]) -> Optional[str]:\n    \"\"\"Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not q74VQ6K:\n        return None\n    return max(q74VQ6K, key=len)\n\n"], ["def greatest_common_divisor(a: int, x: int) -> int:\n    \"\"\"Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while x:\n        a, x = x, a % x\n    return a\n\n"], ["from typing import List\n\n\ndef all_prefixes(UG3iv1: str) -> List[str]:\n    \"\"\"Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    result = []\n    for i in range(len(UG3iv1)):\n        result.append(UG3iv1[:i])\n    return result\n\n"], ["def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n))\n"], ["def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string))\n"], ["from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    note_map = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    note_list = []\n    for note in music_string:\n        note_list.append(note_map[note])\n    return note_list\n\n"], ["def how_many_times(string: str, r5J82Om17: str) -> int:\n    \"\"\"Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    times = 0\n    for i in range(len(string) - len(r5J82Om17) + 1):\n        if string[i:i+len(r5J82Om17)] == r5J82Om17:\n            times += 1\n    return times\n"], ["from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n\n\nvalue_map = {\n    \"zero\": 0,\n    \"one\": 1,\n    \"two\": 2,\n    \"three\": 3,\n    \"four\": 4,\n    \"five\": 5,\n    \"six\": 6,\n    \"seven\": 7,\n    \"eight\": 8,\n    \"nine\": 9,\n}\n\n"], ["from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest_pair = None\n    X93F8157 = None\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if X93F8157 is None:\n                    X93F8157 = abs(elem - elem2)\n                else:\n                    if abs(elem - elem2) < X93F8157:\n                        closest_pair = (elem, elem2)\n                        X93F8157 = abs(elem - elem2)\n    return closest_pair\n\n"], ["from typing import List\n\n\ndef rescale_to_unit(FtQ0L93: List[float]) -> List[float]:\n    \"\"\"Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_number = min(FtQ0L93)\n    max_number = max(FtQ0L93)\n    return [(x - min_number) / (max_number - min_number) for x in FtQ0L93]\n\n"], ["from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [int(value) for value in values if isinstance(value, int)]\n\n"], ["def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n"], ["def largest_divisor(u: int) -> int:\n    \"\"\"For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in reversed(range(u)):\n        if u % i == 0:\n            return i\n    return u\n\n"], ["from typing import List\n\n\ndef factorize(J: int) -> List[int]:\n    \"\"\"Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    import math\n\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(J) + 1):\n        if J % i == 0:\n            fact.append(i)\n            J //= i\n        i += 1\n    if J > 1:\n        fact.append(J)\n    return fact\n\n"], ["from typing import List\n\n\ndef remove_duplicates(k1nN662: List[int]) -> List[int]:\n    \"\"\"From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    import collections\n\n    seen = collections.defaultdict(int)\n    for i in k1nN662:\n        seen[i] += 1\n    return [k for k, v in seen.items() if v == 1]\n\n"], ["def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.lower().upper()\n"], ["from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n"], ["from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\n"], ["def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x >= 0]\n"], ["def is_prime(c):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if c < 2:\n        return False\n    for k in range(2, c - 1):\n        if c % k == 0:\n            return False\n    return True\n"], ["import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\"xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    lESAN, end = -1.0, 1.0\n    while poly(xs, lESAN) * poly(xs, end) > 0:\n        lESAN *= 2.0\n        end *= 2.0\n    while end - lESAN > 1e-10:\n        lESAN = (lESAN + end) / 2.0\n        end = lESAN\n    return lESAN\n\n"], ["def sort_third(y: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    y = list(y)\n    for i in range(len(y)):\n        if y[i] % 3 != 0:\n            y[i], y[i + 1], y[i + 2] = y[i + 2], y[i + 1], y[i]\n    return y\n\n"], ["def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n"], ["def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    H = l[0]\n    for e in l:\n        if e > H:\n            H = e\n    return H\n\n"], ["def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    ns = []\n    for I in range(n):\n        if I % 11 == 0 or I % 13 == 0:\n            ns.append(I)\n    return len(ns)\n"], ["def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    vC637 = l[::2]\n    odds = l[1::2]\n    vC637.sort()\n    ans = []\n    for i in range(len(vC637)):\n        if i % 2 == 0:\n            ans.append(vC637[i])\n        else:\n            ans.append(odds[i - 1])\n    return ans\n\n"], ["def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"], ["def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 89\n    elif n == 6:\n        return 233\n    elif n == 7:\n        return 144\n    elif n == 8:\n        return 71\n    elif n == 9:\n        return 35\n    elif n == 10:\n        return 17\n    elif n == 11:\n        return 6\n    elif n == 12:\n        return 3\n    elif n == 13:\n        return 2\n    elif n == 14:\n        return 1\n    elif n == 15:\n        return 0\n    elif n == 16:\n        return 1\n    elif n == 17:\n        return 0\n    elif n == 18:\n        return 1\n    elif n == 19:\n        return 0\n    elif n == 20:\n        return 1\n    elif n == 21:\n        return 0\n    elif n == 22:\n        return 1\n    elif n == 23:\n        return 0\n    elif n == 24:\n        return 1\n    elif n == 25:\n        return 0\n    elif n == 26:\n        return 1\n    elif n == 27:\n        return 0\n    elif n == 28:\n        return 1\n    elif n == 29:\n        return 0\n    elif n == 30:\n        return 1\n    elif n == 31:\n        return 0\n    elif n == 32:\n        return 1\n    elif n == 33:\n        return 0\n    elif n == 34:\n        return 1\n    elif n == 35:\n        return 0\n    elif n == 36:\n        return 1\n    elif n == 37:\n        return 0\n    elif n == 38:\n        return 1\n    elif n == 39:\n        return 0\n    elif n == 40:\n        return 1\n    elif n == 41:\n        return 0\n    elif n == 42:\n        return 1\n    elif n == 43:\n        return 0\n    elif n == 44:\n        return 1\n    elif n == 45:\n        return 0\n    elif n == 46:\n        return 1\n    elif n == 47:\n        return 0\n    elif n == 48:\n        return 1\n    elif n == 49:\n        return 0\n    elif n == 50:\n        return 1\n    elif n == 51:\n        return 0\n    elif n == 52:\n        return 1\n    elif n == 53:\n        return 0\n    elif n == 54:\n        return 1\n    elif n == 55:\n        return 0\n    elif n == 56:\n        return 1\n    elif n == 57:\n        return 0\n    elif n == 58:\n        return 1\n    elif n == 59:\n        return 0\n    elif n == 60:\n        return 1\n    elif n == 61:\n        return 0\n    elif n == 62:\n        return 1\n    elif n == 63:\n        return 0\n    elif n == 64:\n        return 1\n    elif n == 65:\n        return 0\n    elif n == 66:\n        return 1\n    elif n == 67:\n        return 0\n    elif n == 68:\n        return 1\n    elif n == 69:\n        return 0\n    elif n == 70:\n        return 1\n    elif n == 71:\n        return 0\n    elif n == 72:\n       "], ["def triples_sum_to_zero(H: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(H)):\n        for j in range(i + 1, len(H)):\n            for k in range(j + 1, len(H)):\n                if H[i] + H[j] + H[k] == 0:\n                    return True\n    return False\n\n"], ["def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # Write your code here.\n    pass\n"], ["def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n\n"], ["def pairs_sum_to_zero(t):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    for i, l1 in enumerate(t):\n        for j in range(i + 1, len(t)):\n            if l1 + t[j] == 0:\n                return True\n    return False\n\n"], ["def change_base(i: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    ret = \"\"\n    while i > 0:\n        ret = str(i % base) + ret\n        i //= base\n    return ret\n\n"], ["def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2\n"], ["def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    fh4765r = [0, 0, 2, 0]\n    if n < 4:\n        return fh4765r[n]\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\n"], ["def median(Y: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    Y = sorted(Y)\n    if len(Y) % 2 == 1:\n        return Y[len(Y)//2]\n    else:\n        return (Y[len(Y)//2] + Y[len(Y)//2 - 1]) / 2\n\n"], ["def is_palindrome(F9EL: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    for i in range(len(F9EL)):\n        if F9EL[i] != F9EL[len(F9EL) - 1 - i]:\n            return False\n    return True\n\n"], ["def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    ta6 = 1\n    for i in range(n):\n        ta6 *= 2\n        ta6 %= p\n    return ta6\n\n"], ["def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"], ["def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiou'\n    return ''.join(char for char in text if char not in vowels)\n\n"], ["def below_threshold(l: list, r: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for e in l:\n        if e >= r:\n            return False\n    return True\n\n"], ["def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n"], ["def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    if len(s0) != len(s1):\n        return False\n    for i in range(len(s0)):\n        if s0[i] != s1[i]:\n            return False\n    return True\n\n"], ["def fib(Z: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if Z == 0:\n        return 0\n    elif Z == 1:\n        return 1\n    else:\n        return fib(Z - 1) + fib(Z - 2)\n\n"], ["def correct_bracketing(brackets: str):\n    \"\"\"brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    M51zh = 0\n    for b in brackets:\n        if b == \"<\":\n            M51zh += 1\n        elif b == \">\":\n            M51zh -= 1\n        else:\n            return False\n    return M51zh == 0\n\n"], ["def monotonic(m: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if m == sorted(m) or m == sorted(m, reverse=True):\n        return True\n    else:\n        return False\n"], ["def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l00 = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                l00.add(e1)\n    return sorted(l00)\n\n"], ["def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n    if n % 23 == 0:\n        return 23\n    if n % 29 == 0:\n        return 29\n    if n % 31 == 0:\n        return 31\n    if n % 37 == 0:\n        return 37\n    if n % 41 == 0:\n        return 41\n    if n % 43 == 0:\n        return 43\n    if n % 47 == 0:\n        return 47\n    if n % 53 == 0:\n        return 53\n    if n % 59 == 0:\n        return 59\n    if n % 61 == 0:\n        return 61\n    if n % 67 == 0:\n        return 67\n    if n % 71 == 0:\n        return 71\n    if n % 73 == 0:\n        return 73\n    if n % 79 == 0:\n        return 79\n    if n % 83 == 0:\n        return 83\n    if n % 89 == 0:\n        return 89\n    if n % 97 == 0:\n        return 97\n    if n % 101 == 0:\n        return 101\n    if n % 103 == 0:\n        return 103\n    if n % 107 == 0:\n        return 107\n    if n % 109 == 0:\n        return 109\n    if n % 113 == 0:\n        return 113\n    if n % 127 == 0:\n        return 127\n    if n % 131 == 0:\n        return 131\n    if n % 137 == 0:\n        return 137\n    if n % 139 == 0:\n        return 139\n    if n % 149 == 0:\n        return 149\n    if n % 151 == 0:\n        return 151\n    if n % 157 == 0:\n        return 157\n    if n % 163 == 0:\n        return 163\n    if n % 167 == 0:\n        return 167\n    if n % 173 == 0:\n        return 173\n    if n % 179 == 0:\n        return 179\n    if n % 181 == 0:\n        return 181\n    if n % 191 == 0:\n        return 191\n    if n % 193 == 0:\n        return 193\n    if n % 197 == 0:\n        return 197\n    if n % 199 == 0:\n        return 199\n    if n % 211 == 0:\n        return 211\n    if n % 223 == 0:\n        return 223\n    if n % 227 == 0:\n        return 227\n    if n % 229 == 0:\n        return 229\n    if n % 233 == 0:\n        return 233\n    if n % 239 == 0:\n        return 2"], ["def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))\n\n"], ["def correct_bracketing(brackets: str):\n    \"\"\"brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    ZsGX6 = 0\n    for b in brackets:\n        if b == \"(\":\n            ZsGX6 += 1\n        elif b == \")\":\n            ZsGX6 -= 1\n        else:\n            return False\n    return ZsGX6 == 0\n\n"], ["def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [x * (x + 1) / 2 for x in xs]\n\n"], ["def fibfib(L: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if L == 0:\n        return 0\n    if L == 1:\n        return 0\n    if L == 2:\n        return 1\n    if L == 3:\n        return 1\n    if L == 4:\n        return 2\n    if L == 5:\n        return 3\n    if L == 6:\n        return 5\n    if L == 7:\n        return 8\n    if L == 8:\n        return 13\n    if L == 9:\n        return 21\n    if L == 10:\n        return 34\n    if L == 11:\n        return 55\n    if L == 12:\n        return 89\n    if L == 13:\n        return 144\n    if L == 14:\n        return 233\n    if L == 15:\n        return 377\n    if L == 16:\n        return 610\n    if L == 17:\n        return 987\n    if L == 18:\n        return 1597\n    if L == 19:\n        return 2584\n    if L == 20:\n        return 4181\n    if L == 21:\n        return 6765\n    if L == 22:\n        return 10946\n    if L == 23:\n        return 17711\n    if L == 24:\n        return 28657\n    if L == 25:\n        return 46368\n    if L == 26:\n        return 75025\n    if L == 27:\n        return 121393\n    if L == 28:\n        return 196418\n    if L == 29:\n        return 317811\n    if L == 30:\n        return 514229\n    if L == 31:\n        return 832040\n    if L == 32:\n        return 1346269\n    if L == 33:\n        return 2178309\n    if L == 34:\n        return 3524578\n    if L == 35:\n        return 5702887\n    if L == 36:\n        return 8991256\n    if L == 37:\n        return 14907247\n    if L == 38:\n        return 24157817\n    if L == 39:\n        return 39088169\n    if L == 40:\n        return 63245986\n    if L == 41:\n        return 95667487\n    if L == 42:\n        return 144004074\n    if L == 43:\n        return 230243293\n    if L == 44:\n        return 372331702\n    if L == 45:\n        return 610510049\n    if L == 46:\n        return 987777178\n    if L == 47:\n        return 1597760507\n    if L == 48:\n        return 2604800084\n    if L == 49:\n        return 4217600173\n    if L == 50:\n        return 6721920362\n    if L == 51:\n        return 10485760737\n    if L == 52:\n        return 16577521474\n    if L == 53:\n        return"], ["FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\n\ndef vowels_count(y):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in y)\n    return n_vowels\n\n"], ["def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    M = str(x)\n    if shift > len(M):\n        return M[len(M) - shift:] + M[:shift]\n    else:\n        return M[shift:] + M[:shift]\n"], ["def digitSum(t):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n            digitSum(\"\") => 0\n            digitSum(\"abAB\") => 131\n            digitSum(\"abcCd\") => 67\n            digitSum(\"helloE\") => 69\n            digitSum(\"woArBld\") => 131\n            digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    if t == \"\":\n        return 0\n    else:\n        return sum(ord(c) for c in t if ord(c) >= 65 and ord(c) <= 90)\n\n"], ["def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    vG3 = list()\n    for i in s.split(\" \"):\n        vG3.append(int(i))\n    vG3.sort()\n    vG3.reverse()\n    vG3.append(n)\n    vG3.sort()\n    vG3.reverse()\n    vG3.append(0)\n    vG3.sort()\n    vG3.reverse()\n    vG3.append(0)\n    vG3.sort()\n    vG3.reverse()\n    vG3.append(0)\n    vG3.sort()\n    vG3.reverse()\n    vG3.append(0)\n    vG3.sort()\n    vG3.reverse()\n    vG3.append(0)\n    vG3.sort()\n    vG3.reverse()\n    vG3.append(0)\n    vG3.sort()\n    vG3.reverse()\n    vG3.append(0)\n    vG3.sort()\n    vG3.reverse()\n    vG3.append(0)\n    vG3.sort()\n    vG3.reverse()\n    vG3.append(0)\n    vG3.sort()\n    vG3.reverse()\n    vG3.append(0)\n    vG3.sort()\n    vG3.reverse()\n    vG3.append(0)\n    vG3.sort()\n    vG3.reverse()\n    vG3.append(0)\n    vG3.sort()\n    vG3.reverse()\n    vG3.append(0)\n    vG3.sort()\n    vG3.reverse()\n    vG3.append(0)\n    vG3.sort()\n    vG3.reverse()\n    vG3.append(0)\n    vG3.sort()\n    vG3.reverse()\n    vG3.append(0)\n    vG3.sort()\n    vG3.reverse()\n    vG3.append(0)\n    vG3.sort()\n    vG3.reverse()\n    vG3.append(0)\n    vG3.sort()\n    vG3.reverse()\n    vG3.append(0)\n    vG3.sort()\n    vG3.reverse()\n    vG3.append(0)\n    vG3.sort()\n    vG3.reverse()\n    vG3.append(0)\n    vG3.sort()\n    vG3.reverse()\n    vG3.append(0)\n    vG3.sort()\n    vG3.reverse()\n    vG3.append(0)\n    vG3.sort()\n    vG3.reverse()\n    vG3.append(0)\n    vG3.sort()\n    vG3.reverse()\n    vG3.append(0)\n    vG3.sort()\n    vG3.reverse()\n    vG3.append(0)\n    vG3.sort()\n    vG3.reverse()\n    vG3.append(0)\n    vG3.sort()\n    vG3.reverse()\n    vG3.append(0)\n    vG3.sort()\n    vG3.reverse()\n    vG3.append(0)\n    vG3.sort()\n    vG3.reverse()\n    vG3.append(0)\n    vG3.sort()\n    vG3.reverse()\n    vG3.append(0)\n    vG3.sort()\n   "], ["def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n            Input: [4,2,3]\n            Output: [2, 1]\n            Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n            Input: [1,2,3]\n            Output: [2, 1]\n            Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n            Input: []\n            Output: []\n\n    Example 4:\n            Input: [5, 0, 3, 0, 4, 2]\n            Output: [0, 1]\n            Explanation: 0 is the smallest value, but  there are two zeros,\n                                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n            * 1 <= nodes.length <= 10000\n            * 0 <= node.value\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    OmcsY = list(filter(lambda x: x % 2 == 0, arr))\n    if len(OmcsY) == 0:\n        return [arr[0], 0]\n    else:\n        return [OmcsY[0], arr.index(OmcsY[0])]\n\n"], ["def search(lst):\n    \"\"\"\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n            search([4, 1, 2, 2, 3, 1]) == 2\n            search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n            search([5, 5, 4, 4, 4]) == -1\n    \"\"\"\n    frq = [0] * (max(lst) + 1)\n    for x in lst:\n        frq[x] += 1\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= frq[ans]:\n            ans = i\n    return ans\n\n"], ["def strange_sort_list(Nx3):\n    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    \"\"\"\n    res, switch = [], True\n    while Nx3:\n        res.append(min(Nx3) if switch else max(Nx3))\n        Nx3.remove(min(Nx3) if switch else max(Nx3))\n        switch = not switch\n    return res\n\n"], ["def triangle_area(Y, b, c):\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if Y + b <= c or Y + c <= b or b + c <= Y:\n        return -1\n    s = (Y + b + c) / 2\n    return round(s * (s - Y) * (s - b) * (s - c), 2)\n\n"], ["def will_it_fly(O, w):\n    \"\"\"\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(O) > w:\n        return False\n    i, j = 0, len(O) - 1\n    while i < j:\n        if O[i] != O[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n\n"], ["def smallest_change(D62):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    ans = 0\n    for i in range(len(D62) // 2):\n        if D62[i] != D62[len(D62) - 1 - i]:\n            ans += 1\n    return ans\n\n"], ["def total_match(lst1, lst2):\n    \"\"\"\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    \"\"\"\n    l1 = 0\n    for DM in lst1:\n        l1 += len(DM)\n    l2 = 0\n    for DM in lst2:\n        l2 += len(DM)\n    if l1 == l2:\n        return lst1\n    else:\n        return lst2\n\n"], ["def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n\n    def is_prime(n):\n        for B in range(2, n):\n            if n % B == 0:\n                return False\n        return True\n\n    for i in range(2, 101):\n        if is_prime(i):\n            return False\n    return True\n\n"], ["def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if n == 1:\n        return x == 1\n    B7866 = 1\n    while n > 1:\n        B7866 *= n\n        n -= 1\n    return B7866 == x\n"], ["def iscube(g):\n    \"\"\"\n    Write a function that takes an integer a and returns True\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    \"\"\"\n    g = abs(g)\n    if g == 0:\n        return True\n    if g % 2 == 0:\n        return False\n    if g % 3 == 0:\n        return False\n    if g % 5 == 0:\n        return False\n    if g % 7 == 0:\n        return False\n    if g % 11 == 0:\n        return False\n    if g % 13 == 0:\n        return False\n    if g % 17 == 0:\n        return False\n    if g % 19 == 0:\n        return False\n    if g % 23 == 0:\n        return False\n    if g % 29 == 0:\n        return False\n    if g % 31 == 0:\n        return False\n    if g % 37 == 0:\n        return False\n    if g % 41 == 0:\n        return False\n    if g % 43 == 0:\n        return False\n    if g % 47 == 0:\n        return False\n    if g % 53 == 0:\n        return False\n    if g % 59 == 0:\n        return False\n    if g % 61 == 0:\n        return False\n    if g % 67 == 0:\n        return False\n    if g % 71 == 0:\n        return False\n    if g % 73 == 0:\n        return False\n    if g % 79 == 0:\n        return False\n    if g % 83 == 0:\n        return False\n    if g % 89 == 0:\n        return False\n    if g % 97 == 0:\n        return False\n    return True\n\n"], ["def hex_key(g82):\n    \"\"\"You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    primes = (\"2\", \"3\", \"5\", \"7\", \"B\", \"D\")\n    total = 0\n    for i in range(0, len(g82)):\n        if g82[i] in primes:\n            total += 1\n    return total\n\n"], ["def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    # Your code here\n    pass\n\n"], ["def is_happy(H):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(H) < 3:\n        return False\n    for i in range(len(H) - 2):\n        if H[i] == H[i + 1] and H[i] == H[i + 2]:\n            return False\n    return True\n\n"], ["def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n                     GPA       |    Letter grade\n                      4.0                A+\n                    > 3.7                A\n                    > 3.3                A-\n                    > 3.0                B+\n                    > 2.7                B\n                    > 2.3                B-\n                    > 2.0                C+\n                    > 1.7                C\n                    > 1.3                C-\n                    > 1.0                D+\n                    > 0.7                D\n                    > 0.0                D-\n                      0.0                E\n\n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    lshcQ55yTfAN = []\n    for gpa in grades:\n        if gpa == 4.0:\n            lshcQ55yTfAN.append(\"A+\")\n        elif gpa > 3.7:\n            lshcQ55yTfAN.append(\"A\")\n        elif gpa > 3.3:\n            lshcQ55yTfAN.append(\"A-\")\n        elif gpa > 3.0:\n            lshcQ55yTfAN.append(\"B+\")\n        elif gpa > 2.7:\n            lshcQ55yTfAN.append(\"B\")\n        elif gpa > 2.3:\n            lshcQ55yTfAN.append(\"B-\")\n        elif gpa > 2.0:\n            lshcQ55yTfAN.append(\"C+\")\n        elif gpa > 1.7:\n            lshcQ55yTfAN.append(\"C\")\n        elif gpa > 1.3:\n            lshcQ55yTfAN.append(\"C-\")\n        elif gpa > 1.0:\n            lshcQ55yTfAN.append(\"D+\")\n        elif gpa > 0.7:\n            lshcQ55yTfAN.append(\"D\")\n        elif gpa > 0.0:\n            lshcQ55yTfAN.append(\"D-\")\n        else:\n            lshcQ55yTfAN.append(\"E\")\n    return lshcQ55yTfAN\n\n"], ["def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    s = len(string)\n    if s == 0 or s == 1:\n        return False\n    for i in range(2, s):\n        if string[i] == string[s - i]:\n            return False\n    return True\n\n"], ["def starts_one_ends(O):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if O == 1:\n        return 1\n    else:\n        return 0 + starts_one_ends(O - 1)\n\n"], ["def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Write your code here\n    return \"\"\n"], ["def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(x for x in lst if x % 2 == 0)\n\n"], ["def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return ''.join(sorted(s, key=ord))\n\n"], ["def get_row(lst, H):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    coords = [\n        (i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == H\n    ]\n    coords.sort(key=lambda x: x[0])\n    return [(i, j) for i, j in coords]\n\n"], ["def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Write your code here\n    pass\n"], ["def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    d = \"abcdefghijklmnopqrstuvwxyz\"\n    out = \"\"\n    for k in s:\n        if k in d:\n            out += d[(d.index(k) + 2) % len(d)]\n        else:\n            out += k\n    return out\n\n"], ["def next_smallest(n1Z):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n\n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    n1Z = sorted(set(n1Z))\n    if len(n1Z) == 0:\n        return None\n    return n1Z[1]\n\n"], ["def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    import re\n    return len(re.findall(r\"I\", S))\n\n"], ["def any_int(Q, y, z):\n    \"\"\"\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    any_int(5, 2, 7) \u279e True\n\n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n\n    any_int(3.6, -2.2, 2) \u279e False\n\n\n\n    \"\"\"\n    if isinstance(Q, int) and isinstance(y, int) and isinstance(z, int):\n        if (Q + y == z) or (Q + z == y) or (y + z == Q):\n            return True\n    return False\n"], ["def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i2, chr(ord(i2) + 2)) for i2 in vowels])\n    return \"\".join([vowels_replace[letter] for letter in message])\n\n"], ["def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n\n    def isPrime(n):\n        for I in range(2, int(n ** 0.5) + 1):\n            if n % I == 0:\n                return False\n        return True\n\n    maxx = 0\n    for x in lst:\n        if isPrime(x):\n            if x > maxx:\n                maxx = x\n    return maxx\n\n"], ["def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict.keys()) == 0:\n        return False\n    else:\n        i1T6f = \"start\"\n        for key in dict.keys():\n            if isinstance(key, str) == False:\n                i1T6f = \"mixed\"\n                break\n            if i1T6f == \"start\":\n                if key.isupper():\n                    i1T6f = \"upper\"\n                else:\n                    i1T6f = \"lower\"\n            elif i1T6f == \"mixed\":\n                if key.isupper():\n                    i1T6f = \"upper\"\n                elif key.islower():\n                    i1T6f = \"lower\"\n            elif i1T6f == \"upper\":\n                if key.islower():\n                    i1T6f = \"lower\"\n                else:\n                    i1T6f = \"mixed\"\n            elif i1T6f == \"lower\":\n                if key.isupper():\n                    i1T6f = \"upper\"\n                else:\n                    i1T6f = \"mixed\"\n        return i1T6f == \"upper\"\n\n"], ["def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    primes = []\n    for M in range(2, n):\n        is_prime = True\n        for j in range(2, M):\n            if M % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(M)\n    return primes\n\n"], ["def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    return a * b\n\n"], ["def count_upper(P):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n\n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0, len(P), 2):\n        if P[i] == P[i + 1]:\n            count += 1\n    return count\n\n"], ["def closest_integer(CLi97):\n    \"\"\"\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    \"\"\"\n    from math import floor, ceil\n\n    if CLi97.count(\".\") == 1:\n        # remove trailing zeros\n        while CLi97[-1] == \"0\":\n            CLi97 = CLi97[:-1]\n    num = float(CLi97)\n    if CLi97[-2:] == \".5\":\n        if num > 0:\n            return int(ceil(num))\n        else:\n            return int(floor(num))\n    elif CLi97[-2:] == \".0\":\n        if num > 0:\n            return int(ceil(num))\n        else:\n            return int(floor(num))\n    else:\n        return int(CLi97)\n\n"], ["def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n % 2 == 0:\n        return [n, n // 2]\n    else:\n        return [n // 2, n]\n\n"], ["def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n\n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    if not s:\n        return []\n    R509J9 = []\n    for letter in s:\n        if letter == \",\":\n            R509J9.append(\"\")\n        elif letter == \" \":\n            R509J9.append(\"\")\n        else:\n            R509J9.append(letter)\n    return R509J9\n\n"], ["def choose_num(x, t):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > t:\n        return -1\n    if t % 2 == 0:\n        return t\n    else:\n        return choose_num(x + 1, t)\n\n"], ["def rounded_avg(n, V):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if V < n:\n        return -1\n    summation = 0\n    for i in range(n, m + 1):\n        summation += i\n        if summation >= V:\n            return summation // 2\n    return summation // 2\n\n"], ["def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n\n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    odd_digit_elements = []\n    for J in x:\n        if J % 2 != 0:\n            odd_digit_elements.append(J)\n    return sorted(set(odd_digit_elements))\n\n"], ["def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n                    -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n                    -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n                    -> sort arr -> [-1, 1, 55]\n                    -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n\ndic = {\n    1: \"One\",\n    2: \"Two\",\n    3: \"Three\",\n    4: \"Four\",\n    5: \"Five\",\n    6: \"Six\",\n    7: \"Seven\",\n    8: \"Eight\",\n    9: \"Nine\",\n}\n\n"], ["def f(n):\n    \"\"\"Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    ret = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            J = 1\n            for j in range(1, i + 1):\n                J *= j\n            ret.append(J)\n        else:\n            ret.append(i)\n    return ret\n\n"], ["def even_odd_palindrome(S):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n            Input: 3\n            Output: (1, 2)\n            Explanation:\n            Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n            Input: 12\n            Output: (4, 6)\n            Explanation:\n            Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n            1. 1 <= n <= 10^3\n            2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n    def is_palindrome(S):\n        return str(S) == str(S)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, int(S) + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_palindrome_count += 1\n            else:\n                odd_palindrome_count += 1\n\n    return even_palindrome_count, odd_palindrome_count\n\n"], ["def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n\n    def digits_sum(k):\n        neg = 1\n        if k < 0:\n            k, neg = -1 * k, -1\n        return sum(map(abs, str(k)))\n\n    return sum(map(digits_sum, arr))\n\n"], ["def move_one_ball(q4m):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n            You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                             be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                            array by performing any number of right shift operations.\n\n    \"\"\"\n    if len(q4m) == 0:\n        return True\n    sorted_array = sorted(q4m)\n    my_arr = []\n    min_value = min(q4m)\n    max_value = max(q4m)\n    for i in range(len(q4m)):\n        if q4m[i] == min_value:\n            my_arr.append(i)\n    for i in range(len(q4m)):\n        if q4m[i] == max_value:\n            my_arr.append(i)\n    if len(my_arr) == len(q4m):\n        return True\n    else:\n        return False\n\n"], ["def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    odd = 0\n    even = 0\n    for u in lst1:\n        if u % 2 == 1:\n            odd += 1\n    for u in lst2:\n        if u % 2 == 0:\n            even += 1\n    if odd == 0 and even == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n"], ["def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    dict1 = {}\n    list1 = test.split(\" \")\n    t = 0\n    for e in list1:\n        if (list1.count(e) > t) and e != \"\":\n            dict1[e] = list1.count(e)\n        t = list1.count(e)\n    return dict1\n\n"], ["def reverse_delete(c2, c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    c2 = \"\".join([char for char in c2 if char not in c])\n    if len(c2) == 0:\n        return c, True\n    else:\n        return reverse_delete(c2, c)\n\n"], ["def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    res = []\n    for arr in lst:\n        res.append(len(list(filter(str.isdigit, arr))))\n    return res\n\n"], ["def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    w380686 = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if s < 0:\n            s = 0\n        w380686 = max(w380686, s)\n    return w380686\n\n"], ["def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # Write your code here\n    # 1. Find the max number of buckets\n    max_buckets = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_buckets += 1\n    # 2. Find the max number of units of water\n    max_units = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units += 1\n    # 3. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 4. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 5. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 6. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 7. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 8. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 9. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 10. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 11."], ["def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n"], ["def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    result = []\n    for b034 in s.split():\n        n_consonants = 0\n        for i in range(0, len(b034)):\n            if b034[i].lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]:\n                n_consonants += 1\n        if n_consonants == n:\n            result.append(b034)\n    return result\n"], ["def get_closest_vowel(kJb6):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    if len(kJb6) < 3:\n        return \"\"\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"O\", \"U\", \"I\"}\n    vowels_count = 0\n    for i in range(len(kJb6) - 1):\n        if kJb6[i] in vowels:\n            vowels_count += 1\n    if vowels_count == 0:\n        return \"\"\n    if kJb6[len(kJb6) - 1] in vowels:\n        vowels_count -= 1\n    if vowels_count == 0:\n        return \"\"\n    if kJb6[0] in vowels:\n        vowels_count -= 1\n    if vowels_count == 0:\n        return \"\"\n    if kJb6[1] in vowels:\n        vowels_count -= 1\n    if vowels_count == 0:\n        return \"\"\n    if kJb6[2] in vowels:\n        vowels_count -= 1\n    if vowels_count == 0:\n        return \"\"\n    if vowels_count == 0:\n        return \"\"\n    return kJb6[vowels_count]\n\n"], ["def match_parens(lst):\n    \"\"\"\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    \"\"\"\n\n    def check(s):\n        s90 = 0\n        for i in s:\n            if i == \"(\":\n                s90 = s90 + 1\n            else:\n                s90 = s90 - 1\n        return s90 == 0\n\n    return check(lst[0]) and check(lst[1])\n\n"], ["def maximum(arr, J):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n            Input: arr = [-3, -4, 5], k = 3\n            Output: [-4, -3, 5]\n\n    Example 2:\n\n            Input: arr = [4, -4, 4], k = 2\n            Output: [4, 4]\n\n    Example 3:\n\n            Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n            Output: [2]\n\n    Note:\n            1. The length of the array will be in the range of [1, 1000].\n            2. The elements in the array will be in the range of [-1000, 1000].\n            3. 0 <= k <= len(arr)\n    \"\"\"\n    if J == 0:\n        return []\n    if J == 1:\n        return arr\n    if J == 2:\n        return max(arr[0], arr[1])\n    if J == 3:\n        return max(arr[0], max(arr[1], arr[2]))\n    if J == 4:\n        return max(arr[0], max(arr[1], max(arr[2], arr[3])))\n    if J == 5:\n        return max(arr[0], max(arr[1], max(arr[2], max(arr[3], arr[4]))))\n    if J == 6:\n        return max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], arr[5])))))\n    if J == 7:\n        return max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], max(arr[5], arr[6])))))))\n    if J == 8:\n        return max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], max(arr[5], max(arr[6], arr[7])))))))\n    if J == 9:\n        return max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], max(arr[5], max(arr[6], max(arr[7], arr[8])))))))))\n    if J == 10:\n        return max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], max(arr[5], max(arr[6], max(arr[7], max(arr[8], arr[9])))))))))\n    if J == 11:\n        return max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], max(arr[5], max(arr[6], max(arr[7], max(arr[8], max(arr[9], arr[10]))))))))))\n    if J == 12:\n        return max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], max(arr[5], max(arr[6], max(arr[7], max(arr[8], max(arr[9], max(arr[10], max(arr[11], arr[12])))))))))))\n    if J == 13:\n        return max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], max(arr[5], max(arr[6], max(arr[7], max(arr[8], max(arr[9], max(arr[10], max(arr[11], max(arr[12], max(arr[13], arr[14])))))))))))\n    if J == 14:\n        return max(arr[0], max(arr[1], max(arr[2], max(arr[3], max(arr[4], max(arr[5], max(arr[6], max(arr[7], max(arr[8], max(arr[9], max(arr[10], max(arr[11], max(arr[12], max(arr[13], max(arr[14], arr[15"], ["def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(x for x in lst if x % 2 == 1)\n\n"], ["def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return sum(arr[i:i+k] for i in range(len(arr)-k+1))\n"], ["def get_odd_collatz(m):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n            1. Collatz(1) is [1].\n            2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if m % 2 == 0:\n        odd_collatz = []\n    else:\n        odd_collatz = [m]\n    while m > 1:\n        if m % 2 == 0:\n            m = m / 2\n        else:\n            m = 3 * m + 1\n        odd_collatz.append(m)\n    return sorted(odd_collatz)\n\n"], ["def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    try:\n        date = date.strip()\n        month, vD0, year = date.split(\"-\")\n        month, vD0, year = int(month), int(vD0), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12] and vD0 < 1 or vD0 > 31:\n            return False\n        if month in [4, 6, 9, 11] and vD0 < 1 or vD0 > 30:\n            return False\n        if month == 2 and vD0 < 1 or vD0 > 29:\n            return False\n        if month == 2 and vD0 == 29 and vD0 < 1:\n            return False\n        if month == 2 and vD0 == 29 and vD0 > 28:\n            return False\n        if month == 2 and vD0 == 28 and vD0 < 1:\n            return False\n        if month == 2 and vD0 == 28 and vD0 > 27:\n            return False\n        if month == 2 and vD0 == 27 and vD0 < 1:\n            return False\n        if month == 2 and vD0 == 27 and vD0 > 26:\n            return False\n        if month == 2 and vD0 == 26 and vD0 < 1:\n            return False\n        if month == 2 and vD0 == 26 and vD0 > 25:\n            return False\n        if month == 2 and vD0 == 25 and vD0 < 1:\n            return False\n        if month == 2 and vD0 == 25 and vD0 > 24:\n            return False\n        if month == 2 and vD0 == 24 and vD0 < 1:\n            return False\n        if month == 2 and vD0 == 24 and vD0 > 23:\n            return False\n        if month == 2 and vD0 == 23 and vD0 < 1:\n            return False\n        if month == 2 and vD0 == 23 and vD0 > 22:\n            return False\n        if month == 2 and vD0 == 22 and vD0 < 1:\n            return False\n        if month == 2 and vD0 == 22 and vD0 > 21:\n            return False\n        if month == 2 and vD0 == 21 and vD0 < 1:\n            return False\n        if month == 2 and vD0 == 21 and vD0 > 20:\n            return False\n        if month == 2 and vD0 == 20 and vD0 < 1:\n            return False\n        if month == 2 and vD0 == 20 and vD0 > 19:\n            return False\n        if month == 2 and vD0 == 19 and vD0 < 1:\n            return False\n        if month == 2 and vD0 == 19 and vD0 > 18:\n            return"], ["def split_words(G09):\n    \"\"\"\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3\n    \"\"\"\n    if \" \" in G09:\n        return G09.split()\n    elif \",\" in G09:\n        return len(G09) // 2\n    else:\n        return 0\n\n"], ["def is_sorted(lst):\n    \"\"\"\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    \"\"\"\n    count_digit = dict([(s, 0) for s in lst])\n    for s in lst:\n        count_digit[s] += 1\n    if any(count_digit[s] > 2 for s in lst):\n        return False\n    return True\n\n"], ["def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n\n    def is_prime(F61):\n        if F61 == 1 or F61 == 0:\n            return False\n        if F61 == 2:\n            return True\n        for i in range(2, F61):\n            if F61 % i == 0:\n                return False\n        return True\n\n    if interval1[1] <= interval2[0] or interval2[1] <= interval1[0]:\n        return \"NO\"\n    if interval1[0] == interval2[0]:\n        return \"YES\"\n    if interval1[1] == interval2[1]:\n        return \"YES\"\n    if interval1[0] <= interval2[1] and interval2[0] <= interval1[1]:\n        return \"YES\"\n    if interval1[1] <= interval2[0] and interval2[1] <= interval1[0]:\n        return \"YES\"\n    if interval1[0] == interval2[0] and interval2[1] == interval1[1]:\n        return \"YES\"\n    if interval1[0] == interval2[1] and interval2[0] == interval1[0]:\n        return \"YES\"\n    if interval1[1] == interval2[0] and interval2[1] == interval1[1]:\n        return \"YES\"\n    if interval1[0] == interval2[1] and interval2[0] == interval1[1]:\n        return \"YES\"\n    if interval1[1] == interval2[0] and interval2[1] == interval1[0]:\n        return \"YES\"\n    if interval1[0] == interval2[0] and interval2[1] == interval1[1]:\n        return \"YES\"\n    if interval1[1] == interval2[1] and interval2[0] == interval1[0]:\n        return \"YES\"\n    if interval1[0] == interval2[1] and interval2[1] == interval1[0]:\n        return \"YES\"\n    if interval1[1] == interval2[0] and interval2[1] == interval1[1]:\n        return \"YES\"\n    if interval1[0] == interval2[1] and interval2[0] == interval1[0]:\n        return \"YES\"\n    if interval1[1] == interval2[0] and interval2[1] == interval1[1]:\n        return \"YES\"\n    if interval1[0] == interval2[1] and interval2[0] == interval1[1]:\n        return \"YES\"\n    if interval1[1] == interval2[0] and interval2[1] == interval1[0]:\n        return \"YES\"\n    if interval1[0] == interval2[0] and interval2[1] == interval1[1]:\n        return \"YES\"\n    if interval1[1] == interval2[1] and interval2[0] == interval1[0]:\n        return \"YES\"\n    if interval1[0] == interval2[1] and interval2[1] == interval1[1]:\n        return \"YES\"\n    if interval1[1] == interval2[0] and interval2[1] == interval1[0]:\n        return \"YES\"\n    if interval1[0] == interval2[0] and interval2[1] == interval1[1]:\n        return \"YES\"\n    if interval1[1] == interval2[1] and interval2[0] == interval1[0]:\n       "], ["def prod_signs(OYZ):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not OYZ:\n        return None\n    return sum(map(lambda x: x * x, OYZ))\n\n"], ["def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n            Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n            Output: [1, 2, 1]\n\n            Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n            Output: [1]\n    \"\"\"\n    n = len(grid)\n    val = n * n + 1\n    for n2 in range(n):\n        for j in range(n):\n            if grid[n2][j] == 1:\n                temp = []\n                if n2 != 0:\n                    temp.append(grid[n2 - 1][j])\n                if j != 0:\n                    temp.append(grid[n2][j - 1])\n                if n2 != n - 1:\n                    temp.append(grid[n2 + 1][j])\n                if j != n - 1:\n                    temp.append(grid[n2][j + 1])\n                val = min(val, sum(temp))\n    return val\n\n"], ["def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n               = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n    y114Hg = [1, 3]\n    for i in range(2, n + 1):\n        y114Hg.append(y114Hg[i - 1] + y114Hg[i - 2] + y114Hg[i - 3])\n    return y114Hg\n\n"], ["def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    K071mIr = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit % 2 == 1:\n            odd_count += 1\n    if odd_count == 0:\n        return 0\n    else:\n        return K071mIr * digits(odd_count)\n"], ["def is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for d in range(len(string)):\n        if string[d] == \"[\":\n            opening_bracket_index.append(d)\n        else:\n            closing_bracket_index.append(d)\n    closing_bracket_index.reverse()\n    cnt = 0\n    for i in range(len(opening_bracket_index)):\n        if opening_bracket_index[i] == closing_bracket_index[i]:\n            cnt += 1\n    return cnt >= 2\n\n"], ["def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n\n\n    \"\"\"\n    import math\n\n    c6i1RO0 = 0\n    for i in lst:\n        c6i1RO0 += i ** 2\n    return c6i1RO0\n\n"], ["def check_if_last_char_is_a_letter(txt):\n    \"\"\"\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False\n    \"\"\"\n    last_char = txt[-1]\n    if last_char.isalpha() and last_char not in \" \":\n        return True\n    return False\n\n"], ["def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    ind = -1\n    y = 1\n    while y < len(arr):\n        if arr[y] >= arr[y - 1]:\n            ind = y\n            y += 1\n        else:\n            y += 1\n    return ind\n\n"], ["def largest_smallest_integers(lst):\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    \"\"\"\n    smallest = list(filter(lambda Y: Y < 0, lst))\n    largest = list(filter(lambda Y: Y > 0, lst))\n    if len(smallest) == 0 and len(largest) == 0:\n        return None, None\n    elif len(smallest) == 0:\n        return largest, smallest[0]\n    elif len(largest) == 0:\n        return smallest, largest[0]\n    else:\n        return max(smallest), min(largest)\n\n"], ["def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    temp_a, s5pn59 = a, b\n    if isinstance(temp_a, str):\n        temp_a = temp_a.replace(\",\", \".\")\n    if isinstance(temp_a, float):\n        temp_a = float(temp_a)\n    if isinstance(temp_a, int):\n        temp_a = int(temp_a)\n    if isinstance(temp_a, str):\n        temp_a = float(temp_a)\n    if temp_a > b:\n        return temp_a\n    elif temp_a < b:\n        return b\n    else:\n        return None\n\n"], ["def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    sum_of_even = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0 and i % 4 == 0:\n            sum_of_even += i\n    return sum_of_even == n\n"], ["def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    Ne97Xv = 1\n    special_fact = 1\n    for i in range(1, n + 1):\n        Ne97Xv *= i\n        special_fact *= i\n    return special_fact\n\n"], ["def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    new_text = \"\"\n    T = 0\n    start, end = 0, 0\n    while T < len(text):\n        if text[T] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\" + text[T]\n            elif end - start > 0:\n                new_text += text[T]\n            start = end\n            end = 0\n        T += 1\n    return new_text\n\n"], ["def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    suf = [\"txt\", \"exe\", \"dll\"]\n    be4 = file_name.split(sep=\".\")\n    if len(be4) != 2:\n        return \"No\"\n    if not be4[1] in suf:\n        return \"No\"\n    if len(be4[0]) == 0:\n        return \"No\"\n    if not be4[0][0].isalpha():\n        return \"No\"\n    return \"Yes\"\n"], ["def sum_squares(lst):\n    \"\"\" \"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    result = []\n    for l in range(len(lst)):\n        if l % 3 == 0:\n            result.append(lst[l] ** 2)\n        elif l % 4 == 0:\n            result.append(lst[l] ** 3)\n        else:\n            result.append(lst[l])\n    return sum(result)\n\n"], ["def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n            Input: sentence = \"This is a test\"\n            Output: \"is\"\n\n    Example 2:\n            Input: sentence = \"lets go for swimming\"\n            Output: \"go for\"\n\n    Constraints:\n            * 1 <= len(sentence) <= 100\n            * sentence contains only letters\n    \"\"\"\n    new_lst = []\n    for S59G in sentence.split():\n        flg = 0\n        if len(S59G) == 1:\n            flg = 1\n        for i in range(1, len(S59G) + 1):\n            if S59G[i - 1] == S59G[i]:\n                flg = 0\n        if flg == 1:\n            new_lst.append(S59G)\n    return \" \".join(new_lst)\n\n"], ["def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denominator = int(b) * int(d)\n    if numerator == denominator:\n        return True\n    else:\n        return False\n\n"], ["def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def digits_sum(N):\n        neg = 1\n        if N < 0:\n            N, neg = -1 * N, -1\n        return sum(map(abs, str(N))) * neg\n\n    nums.sort(key=digits_sum)\n    return nums\n\n"], ["def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1\n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for IW6 in nums:\n        if IW6 > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            if IW6 % 10 in odd_digits:\n                count += 1\n    return count\n\n"], ["def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n            For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n            Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n            Input: n = 5\n            Output: 1\n            Explanation:\n            a = [1, 3, 7, 13, 21]\n            The only valid triple is (1, 7, 13).\n    \"\"\"\n    A = [p * p - p + 1 for p in range(1, n + 1)]\n    ans = []\n    for p in range(n):\n        for j in range(p + 1, n):\n            for k in range(j + 1, n):\n                if A[p] + A[j] + A[k] % 3 == 0:\n                    ans.append(A[p] + A[j] + A[k])\n    return len(ans)\n\n"], ["def bf(planet1, planet2):\n    \"\"\"\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    \"\"\"\n    l299Yh1x5Xg4 = (\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\",\n    )\n    if planet1 not in l299Yh1x5Xg4 or planet2 not in l299Yh1x5Xg4 or planet1 == planet2:\n        return ()\n    planet1_index = l299Yh1x5Xg4.index(planet1)\n    planet2_index = l299Yh1x5Xg4.index(planet2)\n    if planet1_index > planet2_index:\n        planet1_index, planet2_index = planet2_index, planet1_index\n    return (\n        l299Yh1x5Xg4[planet1_index:planet2_index + 1],\n        l299Yh1x5Xg4[planet2_index + 1:],\n    )\n\n"], ["def sorted_list_sum(G53):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    G53.sort()\n    new_lst = []\n    for i in G53:\n        if len(i) % 2 == 1:\n            new_lst.append(i)\n    return new_lst\n\n"], ["def x_or_y(g, x, y):\n    \"\"\"A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n\n    \"\"\"\n    if g == 1:\n        return y\n    for i in range(2, g):\n        if g % i == 0:\n            return 0\n    return x\n"], ["def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    # TODO: Write your code here.\n    return 0\n"], ["def compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    pass\n"], ["def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    strong = extensions[0]\n    my_val = len([X for X in extensions[0] if X.isalpha() and X.isupper()]) - len(\n        [X for X in extensions[0] if X.isalpha() and X.islower()]\n    )\n    for s in extensions:\n        val = len([X for X in s if X.isalpha() and X.isupper()]) - len(\n            [X for X in s if X.isalpha() and X.islower()]\n        )\n        if val > my_val:\n            strong = s\n    return class_name + \".\" + strong\n"], ["def cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    I = len(b)\n    pat = b + b\n    for i in range(len(a) - I + 1):\n        if a[i:i+I] == pat:\n            return True\n    return False\n"], ["def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n           even_odd_count(-12) ==> (1, 1)\n           even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    G43n24gMT = 0\n    for i in str(abs(num)):\n        if int(i) % 2 == 0:\n            even_count += 1\n        else:\n            G43n24gMT += 1\n    return (even_count, G43n24gMT)\n\n"], ["def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"]\n    k = 12\n    res = \"\"\n    while number:\n        res = num[number % 10] + res\n        number //= 10\n    return res.lower()\n\n"], ["def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Your code here\n    return False\n"], ["def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # Write your code here\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = 0\n        for char in word:\n            count += 1\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n"], ["def eat(number, s4yG, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n            the number of carrots that you have eaten.\n    @need : integer\n            the number of carrots that you need to eat.\n    @remaining : integer\n            the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    if s4yG <= remaining:\n        return [number + s4yG, remaining - s4yG]\n    else:\n        return [number + s4yG, remaining]\n"], ["def do_algebra(operator, Y148698):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( // )\n    Exponentiation ( ** )\n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n            The length of operator list is equal to the length of operand list minus one.\n            Operand is a list of of non-negative integers.\n            Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    expression = str(Y148698[0])\n    for oprt, oprn in zip(operator, Y148698[1:]):\n        expression = oprt + oprn + expression\n    return eval(expression)\n\n"], ["def solve(i2):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    flg = 0\n    idx = 0\n    new_str = list(i2)\n    for i in i2:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n            idx += 1\n        else:\n            new_str[idx] = i\n            idx += 1\n    if flg == 0:\n        new_str.reverse()\n    return \"\".join(new_str)\n\n"], ["def string_to_md5(pNB4):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    import hashlib\n    return hashlib.md5(pNB4.encode('utf-8')).hexdigest()\n\n"], ["def generate_integers(t, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    lower = max(2, min(t, b))\n    upper = min(8, max(t, b))\n    return [i for i in range(lower, upper + 1) if i % 2 == 0]\n\n"], ["from typing import List\n\n\ndef has_close_elements(a4778OW: List[float], threshold: float) -> bool:\n    \"\"\"Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for idx, elem in enumerate(a4778OW):\n        for idx2, elem2 in enumerate(a4778OW):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n    return False\n\n"], ["from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    current_string = []\n    current_depth = 0\n    for Y in paren_string:\n        if Y == \"(\":\n            current_depth += 1\n            current_string.append(Y)\n        elif Y == \")\":\n            current_depth -= 1\n            if current_depth == 0:\n                result.append(\"\".join(current_string))\n                current_string = []\n        else:\n            current_string.append(Y)\n    if current_string:\n        result.append(\"\".join(current_string))\n    return result\n\n"], ["def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer_part, decimals = divmod(number, 1)\n    return decimals\n\n"], ["from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    OlDcO0B = 0\n    for op in operations:\n        OlDcO0B += op\n    return OlDcO0B < 0\n\n"], ["from typing import List\n\n\ndef mean_absolute_deviation(GU736m6: List[float]) -> float:\n    \"\"\"For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(GU736m6) / len(GU736m6)\n    mad = 0\n    for i in GU736m6:\n        mad += abs(i - mean)\n    return mad / len(GU736m6)\n\n"], ["from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    ow3z66 = []\n    for n in numbers[:-1]:\n        ow3z66.append(n)\n        ow3z66.append(delimeter)\n    ow3z66.append(numbers[-1])\n    return ow3z66\n\n"], ["from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n\n    def parse_paren_group(s):\n        depth = 0\n        qptJr5k7U = 0\n        for c in s:\n            if c == \"(\":\n                depth += 1\n            elif c == \")\":\n                depth -= 1\n            elif c == \"(\":\n                qptJr5k7U += 1\n            elif c == \")\":\n                qptJr5k7U -= 1\n        return depth, qptJr5k7U\n\n    def parse_paren_string(s):\n        depth, qptJr5k7U = 0, 0\n        for c in s:\n            if c == \"(\":\n                depth += 1\n            elif c == \")\":\n                depth -= 1\n            elif c == \"(\":\n                qptJr5k7U += 1\n            elif c == \")\":\n                qptJr5k7U -= 1\n        return depth, qptJr5k7U\n\n    depth, qptJr5k7U = parse_paren_group(paren_string)\n    return [depth, qptJr5k7U]\n\n"], ["from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]\n\n"], ["from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    H3I3MioN8 = 0\n    prod_value = 1\n    for num in numbers:\n        H3I3MioN8 += num\n        prod_value *= num\n    return H3I3MioN8, prod_value\n\n"], ["from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    SEsxM98YYQh = None\n    result = []\n    for n in numbers:\n        if SEsxM98YYQh is None:\n            SEsxM98YYQh = n\n        else:\n            if n > SEsxM98YYQh:\n                SEsxM98YYQh = n\n            result.append(SEsxM98YYQh)\n    return result\n\n"], ["def is_palindrome(vf7GF4: str) -> bool:\n    \"\"\"Test if given string is a palindrome\"\"\"\n    return vf7GF4 == vf7GF4[::-1]\n\n\ndef make_palindrome(vf7GF4: str) -> str:\n    \"\"\"Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not vf7GF4:\n        return \"\"\n    beginning_of_suffix = 0\n    longest_postfix = \"\"\n    for i in range(len(vf7GF4)):\n        if is_palindrome(vf7GF4[i:]):\n            beginning_of_suffix = i\n            longest_postfix = vf7GF4[i:]\n            break\n    if not longest_postfix:\n        return \"\"\n    return longest_postfix[beginning_of_suffix:] + vf7GF4[:beginning_of_suffix]\n\n"], ["from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    def xor(r, j):\n        if r == j:\n            return \"0\"\n        elif r == \"0\":\n            return \"1\"\n        else:\n            return \"0\"\n\n    return \"\".join(map(xor, a, b))\n\n"], ["from typing import List, Optional\n\n\ndef longest(b8E2962: List[str]) -> Optional[str]:\n    \"\"\"Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not b8E2962:\n        return None\n    return max(b8E2962, key=len)\n\n"], ["def greatest_common_divisor(a: int, p: int) -> int:\n    \"\"\"Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while p:\n        a, p = p, a % p\n    return a\n\n"], ["from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    zqv488 = []\n    for i in range(len(string)):\n        zqv488.append(string[i])\n    return zqv488\n\n"], ["def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n))\n"], ["def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string))\n"], ["from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    note_map = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    note_list = []\n    for note in music_string:\n        note_list.append(note_map[note])\n    return note_list\n\n"], ["def how_many_times(string: str, l07Td9692: str) -> int:\n    \"\"\"Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    times = 0\n    for i in range(len(string) - len(l07Td9692) + 1):\n        if string[i:i+len(l07Td9692)] == l07Td9692:\n            times += 1\n    return times\n"], ["from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n\n\nvalue_map = {\n    \"zero\": 0,\n    \"one\": 1,\n    \"two\": 2,\n    \"three\": 3,\n    \"four\": 4,\n    \"five\": 5,\n    \"six\": 6,\n    \"seven\": 7,\n    \"eight\": 8,\n    \"nine\": 9,\n}\n\n"], ["from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest_pair = None\n    W6252FjU = None\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if W6252FjU is None:\n                    W6252FjU = abs(elem - elem2)\n                else:\n                    closest_pair = (abs(elem - elem2), elem, elem2)\n    return closest_pair\n\n"], ["from typing import List\n\n\ndef rescale_to_unit(AcB2450: List[float]) -> List[float]:\n    \"\"\"Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_number = min(AcB2450)\n    max_number = max(AcB2450)\n    return [(x - min_number) / (max_number - min_number) for x in AcB2450]\n\n"], ["from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [int(value) for value in values if isinstance(value, int)]\n\n"], ["def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n"], ["def largest_divisor(j: int) -> int:\n    \"\"\"For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in reversed(range(j)):\n        if j % i == 0:\n            return i\n    return j\n\n"], ["from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    import math\n\n    fact = []\n    i2 = 2\n    while i2 <= int(math.sqrt(n) + 1):\n        if n % i2 == 0:\n            fact.append(i2)\n            n //= i2\n        i2 += 1\n    if n > 1:\n        fact.append(n)\n    return fact\n\n"], ["from typing import List\n\n\ndef remove_duplicates(St0ZzOu: List[int]) -> List[int]:\n    \"\"\"From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    import collections\n\n    seen = collections.defaultdict(int)\n    for x in St0ZzOu:\n        seen[x] += 1\n    return [x for x, y in seen.items() if y == 1]\n\n"], ["def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.lower().upper()\n"], ["from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n"], ["from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\n"], ["def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x >= 0]\n"], ["def is_prime(V):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if V < 2:\n        return False\n    for k in range(2, V - 1):\n        if V % k == 0:\n            return False\n    return True\n"], ["import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\"xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    H5c59, end = -1.0, 1.0\n    while poly(xs, H5c59) * poly(xs, end) > 0:\n        H5c59 *= 2.0\n        end *= 2.0\n    while end - H5c59 > 1e-10:\n        H5c59 /= 2.0\n        end /= 2.0\n    return H5c59\n\n"], ["def sort_third(D: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    D = list(D)\n    for i in range(len(D)):\n        if D[i] % 3 != 0:\n            D[i], D[i + 1], D[i + 2] = D[i + 2], D[i + 1], D[i]\n    return D\n\n"], ["def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n"], ["def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    b = l[0]\n    for e in l:\n        if e > b:\n            b = e\n    return b\n\n"], ["def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    ns = []\n    for w in range(n):\n        if w % 11 == 0 or w % 13 == 0:\n            ns.append(w)\n    return len(ns)\n"], ["def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    D478P = l[::2]\n    odds = l[1::2]\n    D478P.sort()\n    ans = []\n    for i in range(len(D478P)):\n        if i % 2 == 0:\n            ans.append(D478P[i])\n        else:\n            ans.append(odds[i - 1])\n    return ans\n\n"], ["def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"], ["def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 89\n    elif n == 6:\n        return 233\n    elif n == 7:\n        return 144\n    elif n == 8:\n        return 71\n    elif n == 9:\n        return 35\n    elif n == 10:\n        return 17\n    elif n == 11:\n        return 6\n    elif n == 12:\n        return 3\n    elif n == 13:\n        return 2\n    elif n == 14:\n        return 1\n    elif n == 15:\n        return 0\n    elif n == 16:\n        return 1\n    elif n == 17:\n        return 0\n    elif n == 18:\n        return 1\n    elif n == 19:\n        return 0\n    elif n == 20:\n        return 1\n    elif n == 21:\n        return 0\n    elif n == 22:\n        return 1\n    elif n == 23:\n        return 0\n    elif n == 24:\n        return 1\n    elif n == 25:\n        return 0\n    elif n == 26:\n        return 1\n    elif n == 27:\n        return 0\n    elif n == 28:\n        return 1\n    elif n == 29:\n        return 0\n    elif n == 30:\n        return 1\n    elif n == 31:\n        return 0\n    elif n == 32:\n        return 1\n    elif n == 33:\n        return 0\n    elif n == 34:\n        return 1\n    elif n == 35:\n        return 0\n    elif n == 36:\n        return 1\n    elif n == 37:\n        return 0\n    elif n == 38:\n        return 1\n    elif n == 39:\n        return 0\n    elif n == 40:\n        return 1\n    elif n == 41:\n        return 0\n    elif n == 42:\n        return 1\n    elif n == 43:\n        return 0\n    elif n == 44:\n        return 1\n    elif n == 45:\n        return 0\n    elif n == 46:\n        return 1\n    elif n == 47:\n        return 0\n    elif n == 48:\n        return 1\n    elif n == 49:\n        return 0\n    elif n == 50:\n        return 1\n    elif n == 51:\n        return 0\n    elif n == 52:\n        return 1\n    elif n == 53:\n        return 0\n    elif n == 54:\n        return 1\n    elif n == 55:\n        return 0\n    elif n == 56:\n        return 1\n    elif n == 57:\n        return 0\n    elif n == 58:\n        return 1\n    elif n == 59:\n        return 0\n    elif n == 60:\n        return 1\n    elif n == 61:\n        return 0\n    elif n == 62:\n        return 1\n    elif n == 63:\n        return 0\n    elif n == 64:\n        return 1\n    elif n == 65:\n        return 0\n    elif n == 66:\n        return 1\n    elif n == 67:\n        return 0\n    elif n == 68:\n        return 1\n    elif n == 69:\n        return 0\n    elif n == 70:\n        return 1\n    elif n == 71:\n        return 0\n    elif n == 72:\n       "], ["def triples_sum_to_zero(L: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(L)):\n        for j in range(i + 1, len(L)):\n            for k in range(j + 1, len(L)):\n                if L[i] + L[j] + L[k] == 0:\n                    return True\n    return False\n\n"], ["def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # Write your code here.\n    pass\n"], ["def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n\n"], ["def pairs_sum_to_zero(p):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    for i, l1 in enumerate(p):\n        for j in range(i + 1, len(p)):\n            if l1 + p[j] == 0:\n                return True\n    return False\n\n"], ["def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    v4A = \"\"\n    while x > 0:\n        v4A = str(x % base) + v4A\n        x = x // base\n    return v4A\n\n"], ["def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2\n"], ["def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    n1l0IiJ = [0, 0, 2, 0]\n    if n < 4:\n        return n1l0IiJ[n]\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\n"], ["def median(A: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    A = sorted(A)\n    if len(A) % 2 == 1:\n        return A[len(A)//2]\n    else:\n        return (A[len(A)//2] + A[len(A)//2 - 1]) / 2\n\n"], ["def is_palindrome(bjW6: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    for i in range(len(bjW6)):\n        if bjW6[i] != bjW6[len(bjW6) - 1 - i]:\n            return False\n    return True\n\n"], ["def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    h84 = 1\n    for i in range(n):\n        h84 = (h84 * 2) % p\n    return h84\n\n"], ["def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"], ["def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiou'\n    return ''.join(char for char in text if char not in vowels)\n\n"], ["def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for M in l:\n        if M >= t:\n            return False\n    return True\n\n"], ["def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n"], ["def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    if len(s0) != len(s1):\n        return False\n    for i in range(len(s0)):\n        if s0[i] != s1[i]:\n            return False\n    return True\n\n"], ["def fib(D: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if D == 0:\n        return 0\n    elif D == 1:\n        return 1\n    else:\n        return fib(D - 1) + fib(D - 2)\n\n"], ["def correct_bracketing(brackets: str):\n    \"\"\"brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    R9hI3 = 0\n    for b in brackets:\n        if b == \"<\":\n            R9hI3 += 1\n        elif b == \">\":\n            R9hI3 -= 1\n        else:\n            return False\n    return R9hI3 == 0\n\n"], ["def monotonic(w: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if w == sorted(w) or w == sorted(w, reverse=True):\n        return True\n    else:\n        return False\n"], ["def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    y4q = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                y4q.add(e1)\n    return sorted(y4q)\n\n"], ["def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n    if n % 23 == 0:\n        return 23\n    if n % 29 == 0:\n        return 29\n    if n % 31 == 0:\n        return 31\n    if n % 37 == 0:\n        return 37\n    if n % 41 == 0:\n        return 41\n    if n % 43 == 0:\n        return 43\n    if n % 47 == 0:\n        return 47\n    if n % 53 == 0:\n        return 53\n    if n % 59 == 0:\n        return 59\n    if n % 61 == 0:\n        return 61\n    if n % 67 == 0:\n        return 67\n    if n % 71 == 0:\n        return 71\n    if n % 73 == 0:\n        return 73\n    if n % 79 == 0:\n        return 79\n    if n % 83 == 0:\n        return 83\n    if n % 89 == 0:\n        return 89\n    if n % 97 == 0:\n        return 97\n    if n % 101 == 0:\n        return 101\n    if n % 103 == 0:\n        return 103\n    if n % 107 == 0:\n        return 107\n    if n % 109 == 0:\n        return 109\n    if n % 113 == 0:\n        return 113\n    if n % 127 == 0:\n        return 127\n    if n % 131 == 0:\n        return 131\n    if n % 137 == 0:\n        return 137\n    if n % 139 == 0:\n        return 139\n    if n % 149 == 0:\n        return 149\n    if n % 151 == 0:\n        return 151\n    if n % 157 == 0:\n        return 157\n    if n % 163 == 0:\n        return 163\n    if n % 167 == 0:\n        return 167\n    if n % 173 == 0:\n        return 173\n    if n % 179 == 0:\n        return 179\n    if n % 181 == 0:\n        return 181\n    if n % 191 == 0:\n        return 191\n    if n % 193 == 0:\n        return 193\n    if n % 197 == 0:\n        return 197\n    if n % 199 == 0:\n        return 199\n    if n % 211 == 0:\n        return 211\n    if n % 223 == 0:\n        return 223\n    if n % 227 == 0:\n        return 227\n    if n % 229 == 0:\n        return 229\n    if n % 233 == 0:\n        return 233\n    if n % 239 == 0:\n        return 2"], ["def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))\n\n"], ["def correct_bracketing(brackets: str):\n    \"\"\"brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    z0Ik0 = 0\n    for b in brackets:\n        if b == \"(\":\n            z0Ik0 += 1\n        elif b == \")\":\n            z0Ik0 -= 1\n        else:\n            return False\n    return z0Ik0 == 0\n\n"], ["def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [x * (x + 1) / 2 for x in xs]\n\n"], ["def fibfib(T: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if T == 0:\n        return 0\n    if T == 1:\n        return 0\n    if T == 2:\n        return 1\n    if T == 3:\n        return 1\n    if T == 4:\n        return 2\n    if T == 5:\n        return 3\n    if T == 6:\n        return 5\n    if T == 7:\n        return 8\n    if T == 8:\n        return 13\n    if T == 9:\n        return 21\n    if T == 10:\n        return 34\n    if T == 11:\n        return 55\n    if T == 12:\n        return 89\n    if T == 13:\n        return 144\n    if T == 14:\n        return 233\n    if T == 15:\n        return 377\n    if T == 16:\n        return 610\n    if T == 17:\n        return 987\n    if T == 18:\n        return 1597\n    if T == 19:\n        return 2584\n    if T == 20:\n        return 4181\n    if T == 21:\n        return 6765\n    if T == 22:\n        return 10946\n    if T == 23:\n        return 17711\n    if T == 24:\n        return 28657\n    if T == 25:\n        return 46368\n    if T == 26:\n        return 75025\n    if T == 27:\n        return 121393\n    if T == 28:\n        return 196418\n    if T == 29:\n        return 317811\n    if T == 30:\n        return 514229\n    if T == 31:\n        return 832040\n    if T == 32:\n        return 1346269\n    if T == 33:\n        return 2178309\n    if T == 34:\n        return 3524578\n    if T == 35:\n        return 5702887\n    if T == 36:\n        return 8991256\n    if T == 37:\n        return 14907247\n    if T == 38:\n        return 24157817\n    if T == 39:\n        return 39088169\n    if T == 40:\n        return 63245986\n    if T == 41:\n        return 95667487\n    if T == 42:\n        return 144004074\n    if T == 43:\n        return 230243293\n    if T == 44:\n        return 372334002\n    if T == 45:\n        return 597336902\n    if T == 46:\n        return 924000001\n    if T == 47:\n        return 1471891000\n    if T == 48:\n        return 2439896000\n    if T == 49:\n        return 4055580000\n    if T == 50:\n        return 6528200000\n    if T == 51:\n        return 10245150000\n    if T == 52:\n        return 16070000000\n    if T == 53:\n        return"], ["FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\n\ndef vowels_count(Z):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in Z)\n    return n_vowels\n\n"], ["def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    Z = str(x)\n    if shift > len(Z):\n        return Z[len(Z) - shift:] + Z[:shift]\n    else:\n        return Z[:shift] + Z[len(Z) - shift:]\n"], ["def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n            digitSum(\"\") => 0\n            digitSum(\"abAB\") => 131\n            digitSum(\"abcCd\") => 67\n            digitSum(\"helloE\") => 69\n            digitSum(\"woArBld\") => 131\n            digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    if s == \"\":\n        return 0\n    else:\n        return sum(ord(c) for c in s if ord(c) >= 65 and ord(c) <= 90)\n\n"], ["def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    UgQ = list()\n    for i in s.split(\" \"):\n        UgQ.append(int(i))\n    return sum(UgQ) - sum(UgQ) // 2 - sum(UgQ) % 2\n"], ["def pluck(I2Q):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n            Input: [4,2,3]\n            Output: [2, 1]\n            Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n            Input: [1,2,3]\n            Output: [2, 1]\n            Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n            Input: []\n            Output: []\n\n    Example 4:\n            Input: [5, 0, 3, 0, 4, 2]\n            Output: [0, 1]\n            Explanation: 0 is the smallest value, but  there are two zeros,\n                                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n            * 1 <= nodes.length <= 10000\n            * 0 <= node.value\n    \"\"\"\n    if len(I2Q) == 0:\n        return []\n    evens = list(filter(lambda x: x % 2 == 0, I2Q))\n    if len(evens) == 0:\n        return [evens[0], 0]\n    return [evens[0], min(evens)]\n\n"], ["def search(lst):\n    \"\"\"\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n            search([4, 1, 2, 2, 3, 1]) == 2\n            search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n            search([5, 5, 4, 4, 4]) == -1\n    \"\"\"\n    frq = [0] * (max(lst) + 1)\n    for E in lst:\n        frq[E] += 1\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= frq[ans]:\n            ans = i\n    return ans\n\n"], ["def strange_sort_list(cy1):\n    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    \"\"\"\n    res, switch = [], True\n    while cy1:\n        res.append(min(cy1) if switch else max(cy1))\n        cy1.remove(min(cy1) if switch else max(cy1))\n        switch = not switch\n    return res\n\n"], ["def triangle_area(a, b, W):\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if a + b <= W or a + W <= b or b + W <= a:\n        return -1\n    s = (a + b + W) / 2\n    return round(s * (s - a) * (s - b) * (s - W), 2)\n\n"], ["def will_it_fly(c, w):\n    \"\"\"\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(c) > w:\n        return False\n    i, j = 0, len(c) - 1\n    while i < j:\n        if c[i] != c[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n\n"], ["def smallest_change(Fj1):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    ans = 0\n    for i in range(len(Fj1) // 2):\n        if Fj1[i] != Fj1[len(Fj1) - 1 - i]:\n            ans += 1\n    return ans\n\n"], ["def total_match(lst1, lst2):\n    \"\"\"\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    \"\"\"\n    l1 = 0\n    for xR in lst1:\n        l1 += len(xR)\n    l2 = 0\n    for xR in lst2:\n        l2 += len(xR)\n    if l1 == l2:\n        return lst1\n    else:\n        return lst2\n\n"], ["def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n\n    def is_prime(n):\n        for R in range(2, n):\n            if n % R == 0:\n                return False\n        return True\n\n    for i in range(2, 101):\n        if is_prime(i):\n            if i * 3 <= a:\n                return True\n    return False\n\n"], ["def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if n == 1:\n        return x == 1\n    v623u = 1\n    while v623u < n:\n        v623u *= x\n    return v623u == n\n\n"], ["def iscube(P):\n    \"\"\"\n    Write a function that takes an integer a and returns True\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    \"\"\"\n    P = abs(P)\n    if P == 0:\n        return True\n    if P % 2 == 0:\n        return False\n    if P % 3 == 0:\n        return False\n    if P % 5 == 0:\n        return False\n    if P % 7 == 0:\n        return False\n    if P % 11 == 0:\n        return False\n    if P % 13 == 0:\n        return False\n    if P % 17 == 0:\n        return False\n    if P % 19 == 0:\n        return False\n    if P % 23 == 0:\n        return False\n    if P % 29 == 0:\n        return False\n    if P % 31 == 0:\n        return False\n    if P % 37 == 0:\n        return False\n    if P % 41 == 0:\n        return False\n    if P % 43 == 0:\n        return False\n    if P % 47 == 0:\n        return False\n    if P % 53 == 0:\n        return False\n    if P % 59 == 0:\n        return False\n    if P % 61 == 0:\n        return False\n    if P % 67 == 0:\n        return False\n    if P % 71 == 0:\n        return False\n    if P % 73 == 0:\n        return False\n    if P % 79 == 0:\n        return False\n    if P % 83 == 0:\n        return False\n    if P % 89 == 0:\n        return False\n    if P % 97 == 0:\n        return False\n    return True\n\n"], ["def hex_key(C7d):\n    \"\"\"You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    primes = (\"2\", \"3\", \"5\", \"7\", \"B\", \"D\")\n    total = 0\n    for i in range(0, len(C7d)):\n        if C7d[i] in primes:\n            total += 1\n    return total\n\n"], ["def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    # Your code here\n    pass\n\n"], ["def is_happy(j):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(j) < 3:\n        return False\n    for i in range(len(j) - 2):\n        if j[i] == j[i + 1] and j[i] == j[i + 2]:\n            return False\n    return True\n\n"], ["def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n                     GPA       |    Letter grade\n                      4.0                A+\n                    > 3.7                A\n                    > 3.3                A-\n                    > 3.0                B+\n                    > 2.7                B\n                    > 2.3                B-\n                    > 2.0                C+\n                    > 1.7                C\n                    > 1.3                C-\n                    > 1.0                D+\n                    > 0.7                D\n                    > 0.0                D-\n                      0.0                E\n\n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    fJ2i806R5gQd = []\n    for gpa in grades:\n        if gpa == 4.0:\n            fJ2i806R5gQd.append(\"A+\")\n        elif gpa > 3.7:\n            fJ2i806R5gQd.append(\"A\")\n        elif gpa > 3.3:\n            fJ2i806R5gQd.append(\"A-\")\n        elif gpa > 3.0:\n            fJ2i806R5gQd.append(\"B+\")\n        elif gpa > 2.7:\n            fJ2i806R5gQd.append(\"B\")\n        elif gpa > 2.3:\n            fJ2i806R5gQd.append(\"B-\")\n        elif gpa > 2.0:\n            fJ2i806R5gQd.append(\"C+\")\n        elif gpa > 1.7:\n            fJ2i806R5gQd.append(\"C\")\n        elif gpa > 1.3:\n            fJ2i806R5gQd.append(\"C-\")\n        elif gpa > 1.0:\n            fJ2i806R5gQd.append(\"D+\")\n        elif gpa > 0.7:\n            fJ2i806R5gQd.append(\"D\")\n        elif gpa > 0.0:\n            fJ2i806R5gQd.append(\"D-\")\n        else:\n            fJ2i806R5gQd.append(\"E\")\n    return fJ2i806R5gQd\n\n"], ["def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    m = len(string)\n    if m == 0 or m == 1:\n        return False\n    for i in range(2, m):\n        if string[i] == string[0] and string[i] != string[m - 1]:\n            return False\n    return True\n\n"], ["def starts_one_ends(X):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if X == 1:\n        return 1\n    elif X == 2:\n        return 2\n    else:\n        return 0 + starts_one_ends(X - 1)\n\n"], ["def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Write your code here\n    return \"\"\n"], ["def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(x for x in lst if x % 2 == 0)\n\n"], ["def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return ''.join(sorted(s, key=ord))\n\n"], ["def get_row(lst, h):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    coords = [\n        (i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == h\n    ]\n    coords.sort(key=lambda x: x[0])\n    return [(i, j) for i, j in coords]\n\n"], ["def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Write your code here\n    pass\n"], ["def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    d = \"abcdefghijklmnopqrstuvwxyz\"\n    out = \"\"\n    for H in s:\n        if H in d:\n            out += d[(d.index(H) + 2) % len(d)]\n        else:\n            out += H\n    return out\n\n"], ["def next_smallest(Up1):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n\n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    Up1 = sorted(set(Up1))\n    return Up1[1] if len(Up1) > 1 else None\n"], ["def is_bored(J):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    import re\n    return len(re.findall(r\"I\", J))\n\n"], ["def any_int(x, A, z):\n    \"\"\"\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    any_int(5, 2, 7) \u279e True\n\n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n\n    any_int(3.6, -2.2, 2) \u279e False\n\n\n\n    \"\"\"\n    if isinstance(x, int) and isinstance(A, int) and isinstance(z, int):\n        if (x + A == z) or (x + z == A) or (A + z == x):\n            return True\n    return False\n"], ["def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(F, chr(ord(F) + 2)) for F in vowels])\n    return \"\".join([vowels_replace[letter] for letter in message])\n\n"], ["def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n\n    def isPrime(n):\n        for Z in range(2, int(n ** 0.5) + 1):\n            if n % Z == 0:\n                return False\n        return True\n\n    maxx = 0\n    for x in lst:\n        if isPrime(x):\n            if x > maxx:\n                maxx = x\n    return maxx\n\n"], ["def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict.keys()) == 0:\n        return False\n    else:\n        o560z = \"start\"\n        for key in dict.keys():\n            if isinstance(key, str) == False:\n                o560z = \"mixed\"\n                break\n            if o560z == \"start\":\n                if key.isupper():\n                    o560z = \"upper\"\n                else:\n                    o560z = \"lower\"\n            elif o560z == \"upper\":\n                if key.islower():\n                    o560z = \"lower\"\n                else:\n                    o560z = \"mixed\"\n            elif o560z == \"lower\":\n                if key.isupper():\n                    o560z = \"upper\"\n                else:\n                    o560z = \"mixed\"\n        return o560z == \"lower\" or o560z == \"upper\"\n\n"], ["def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    primes = []\n    for Y in range(2, n):\n        is_prime = True\n        for j in range(2, Y):\n            if Y % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(Y)\n    return primes\n\n"], ["def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    return a * b\n\n"], ["def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n\n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    k8352 = 0\n    for i in range(0, len(s), 2):\n        if s[i] == s[i + 1].upper():\n            k8352 += 1\n    return k8352\n\n"], ["def closest_integer(cccU6):\n    \"\"\"\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    \"\"\"\n    from math import floor, ceil\n\n    if cccU6.count(\".\") == 1:\n        # remove trailing zeros\n        while cccU6[-1] == \"0\":\n            cccU6 = cccU6[:-1]\n    num = float(cccU6)\n    if cccU6[-2:] == \".5\":\n        if num > 0:\n            return int(ceil(num))\n        else:\n            return int(floor(num))\n    elif cccU6[-2:] == \".0\":\n        if num > 0:\n            return int(ceil(num))\n        else:\n            return int(floor(num))\n    else:\n        return int(num)\n"], ["def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n % 2 == 0:\n        return [n, n // 2]\n    else:\n        return [n // 2, n]\n\n"], ["def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n\n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    if not s:\n        return []\n    J2AqnB = []\n    for letter in s:\n        if letter == \",\":\n            J2AqnB.append(letter)\n        else:\n            J2AqnB.append(letter)\n    return J2AqnB\n\n"], ["def choose_num(x, i):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > i:\n        return -1\n    if i % 2 == 0:\n        return i\n    else:\n        return choose_num(i + 2, i)\n\n"], ["def rounded_avg(s, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if m < s:\n        return -1\n    summation = 0\n    for i in range(s, m + 1):\n        summation += i\n    return \"{0:b}\".format(summation // m)\n\n"], ["def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n\n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    N5QVY7CJPMy62G9nzQ = []\n    for i in x:\n        if i % 2 == 0:\n            N5QVY7CJPMy62G9nzQ.append(i)\n    return sorted(set(N5QVY7CJPMy62G9nzQ))\n\n"], ["def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n                    -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n                    -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n                    -> sort arr -> [-1, 1, 55]\n                    -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n\ndic = {\n    1: \"One\",\n    2: \"Two\",\n    3: \"Three\",\n    4: \"Four\",\n    5: \"Five\",\n    6: \"Six\",\n    7: \"Seven\",\n    8: \"Eight\",\n    9: \"Nine\",\n}\n\n"], ["def f(n):\n    \"\"\"Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    ret = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            E = 1\n            for j in range(1, i + 1):\n                E *= j\n            ret.append(E)\n        else:\n            ret.append(i)\n    return ret\n\n"], ["def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n            Input: 3\n            Output: (1, 2)\n            Explanation:\n            Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n            Input: 12\n            Output: (4, 6)\n            Explanation:\n            Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n            1. 1 <= n <= 10^3\n            2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_palindrome_count += 1\n            else:\n                odd_palindrome_count += 1\n\n    return even_palindrome_count, odd_palindrome_count\n\n"], ["def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n\n    def digits_sum(i2):\n        neg = 1\n        if i2 < 0:\n            i2, neg = -1 * i2, -1\n        return sum(map(abs, str(i2)))\n\n    return sum(map(digits_sum, arr))\n\n"], ["def move_one_ball(lo1):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n            You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                             be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                            array by performing any number of right shift operations.\n\n    \"\"\"\n    if len(lo1) == 0:\n        return True\n    sorted_array = sorted(lo1)\n    my_arr = []\n    min_value = min(lo1)\n    max_value = max(lo1)\n    for i in range(len(lo1)):\n        if sorted_array[i] > max_value:\n            my_arr.append(sorted_array[i])\n            max_value = sorted_array[i]\n        elif sorted_array[i] < min_value:\n            my_arr.append(sorted_array[i])\n            min_value = sorted_array[i]\n    if len(my_arr) == len(lo1):\n        return True\n    else:\n        return False\n\n"], ["def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    odd = 0\n    even = 0\n    for n in lst1:\n        if n % 2 == 1:\n            odd += 1\n    for n in lst2:\n        if n % 2 == 0:\n            even += 1\n    if odd == 0 and even == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n"], ["def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    dict1 = {}\n    list1 = test.split(\" \")\n    t = 0\n    for S in list1:\n        if (list1.count(S) > t) and S != \"\":\n            dict1[S] = list1.count(S)\n        t = list1.count(S)\n    return dict1\n\n"], ["def reverse_delete(B, c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    B = \"\".join([char for char in B if char not in c])\n    return B, B == B[::-1]\n"], ["def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    res = []\n    for arr in lst:\n        res.append(len(list(filter(str.isdigit, arr))))\n    return res\n\n"], ["def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    yaOYCVJ = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if s < 0:\n            yaOYCVJ += 1\n            s = 0\n    return yaOYCVJ\n"], ["def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # Write your code here\n    # 1. Find the max number of buckets\n    max_buckets = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_buckets += 1\n    # 2. Find the max number of units of water\n    max_units = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units += 1\n    # 3. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 4. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 5. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 6. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 7. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 8. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 9. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 10. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 11."], ["def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n"], ["def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    result = []\n    for L9O7 in s.split():\n        n_consonants = 0\n        for i in range(0, len(L9O7)):\n            if L9O7[i].lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]:\n                n_consonants += 1\n        if n_consonants == n:\n            result.append(L9O7)\n    return result\n"], ["def get_closest_vowel(yU27):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    if len(yU27) < 3:\n        return \"\"\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"O\", \"U\", \"I\"}\n    vowels_count = 0\n    for i in range(len(yU27) - 1):\n        if yU27[i] in vowels:\n            vowels_count += 1\n    if vowels_count == 0:\n        return \"\"\n    if yU27[len(yU27) - 1] in vowels:\n        vowels_count -= 1\n    if vowels_count == 0:\n        return \"\"\n    if yU27[0] in vowels:\n        vowels_count -= 1\n    if vowels_count == 0:\n        return \"\"\n    if yU27[1] in vowels:\n        vowels_count -= 1\n    if vowels_count == 0:\n        return \"\"\n    if yU27[2] in vowels:\n        vowels_count -= 1\n    if vowels_count == 0:\n        return \"\"\n    if yU27[len(yU27) - 2] in vowels:\n        vowels_count -= 1\n    if vowels_count == 0:\n        return \"\"\n    if yU27[len(yU27) - 3] in vowels:\n        vowels_count -= 1\n    if vowels_count == 0:\n        return \"\"\n    if yU27[len(yU27) - 4] in vowels:\n        vowels_count -= 1\n    if vowels_count == 0:\n        return \"\"\n    if yU27[len(yU27) - 5] in vowels:\n        vowels_count -= 1\n    if vowels_count == 0:\n        return \"\"\n    if yU27[len(yU27) - 6] in vowels:\n        vowels_count -= 1\n    if vowels_count == 0:\n        return \"\"\n    if yU27[len(yU27) - 7] in vowels:\n        vowels_count -= 1\n    if vowels_count == 0:\n        return \"\"\n    if yU27[len(yU27) - 8] in vowels:\n        vowels_count -= 1\n    if vowels_count == 0:\n        return \"\"\n    if yU27[len(yU27) - 9] in vowels:\n        vowels_count -= 1\n    if vowels_count == 0:\n        return \"\"\n    if yU27[len(yU27) - 10] in vowels:\n        vowels_count -= 1\n    if vowels_count == 0:\n        return \"\"\n    if yU27[len(yU27) - 11] in vowels:\n        vowels_count -= 1\n    if vowels_count == 0:\n        return \"\"\n    if yU27[len(yU27) - 12] in vowels:\n        vowels_count -= 1\n    if vowels_count == 0:\n        return \"\"\n    if yU27[len(yU27) - 13] in vowels:\n        vowels_count -= 1\n    if vowels_count == 0:\n        return \"\"\n    if yU27[len(yU27) - 14] in vowels:\n        vowels_count -= "], ["def match_parens(lst):\n    \"\"\"\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    \"\"\"\n\n    def check(s):\n        Rw3 = 0\n        for i in s:\n            if i == \"(\":\n                Rw3 = Rw3 + 1\n            else:\n                Rw3 = Rw3 - 1\n        return Rw3 == 0\n\n    return check(lst[0]) and check(lst[1])\n\n"], ["def maximum(Xf2, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n            Input: arr = [-3, -4, 5], k = 3\n            Output: [-4, -3, 5]\n\n    Example 2:\n\n            Input: arr = [4, -4, 4], k = 2\n            Output: [4, 4]\n\n    Example 3:\n\n            Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n            Output: [2]\n\n    Note:\n            1. The length of the array will be in the range of [1, 1000].\n            2. The elements in the array will be in the range of [-1000, 1000].\n            3. 0 <= k <= len(arr)\n    \"\"\"\n    if k == 0:\n        return []\n    if k == 1:\n        return [max(Xf2)]\n    if k == 2:\n        return [max(Xf2), min(Xf2)]\n    if k == 3:\n        return [max(Xf2), min(Xf2), max(Xf2)]\n    if k == 4:\n        return [max(Xf2), min(Xf2), max(Xf2), min(Xf2)]\n    if k == 5:\n        return [max(Xf2), min(Xf2), max(Xf2), min(Xf2), max(Xf2)]\n    if k == 6:\n        return [max(Xf2), min(Xf2), max(Xf2), min(Xf2), max(Xf2), min(Xf2)]\n    if k == 7:\n        return [max(Xf2), min(Xf2), max(Xf2), min(Xf2), max(Xf2), min(Xf2), max(Xf2)]\n    if k == 8:\n        return [max(Xf2), min(Xf2), max(Xf2), min(Xf2), max(Xf2), min(Xf2), max(Xf2), min(Xf2)]\n    if k == 9:\n        return [max(Xf2), min(Xf2), max(Xf2), min(Xf2), max(Xf2), min(Xf2), max(Xf2), min(Xf2), max(Xf2)]\n    if k == 10:\n        return [max(Xf2), min(Xf2), max(Xf2), min(Xf2), max(Xf2), min(Xf2), max(Xf2), min(Xf2), max(Xf2), min(Xf2)]\n    if k == 11:\n        return [max(Xf2), min(Xf2), max(Xf2), min(Xf2), max(Xf2), min(Xf2), max(Xf2), min(Xf2), max(Xf2), min(Xf2), max(Xf2)]\n    if k == 12:\n        return [max(Xf2), min(Xf2), max(Xf2), min(Xf2), max(Xf2), min(Xf2), max(Xf2), min(Xf2), max(Xf2), min(Xf2), max(Xf2), min(Xf2)]\n    if k == 13:\n        return [max(Xf2), min(Xf2), max(Xf2), min(Xf2), max(Xf2), min(Xf2), max(Xf2), min(Xf2), max(Xf2), min(Xf2), max(Xf2), min(Xf2), max(Xf2)]\n    if k == 14:\n        return [max(Xf2), min(Xf2), max(Xf2), min(Xf2), max(Xf2), min(Xf2), max(Xf2), min(Xf2), max(Xf2), min(Xf2), max(Xf2), min(Xf2), max(Xf2), min(Xf2)]\n    if k == 15:\n        return [max(Xf2), min(Xf2), max(Xf2), min(Xf2), max(Xf2), min(Xf2), max(Xf2), min(Xf2), max(Xf2), min(Xf2), max(Xf2), min(Xf2), max(Xf2), min(Xf2), max(Xf2), min(Xf2)]\n    if k == 16:\n        return [max(Xf2), min(Xf2), max(Xf2),"], ["def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(x for x in lst if x % 2 == 1)\n\n"], ["def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return sum(arr[i:i+k] for i in range(len(arr)-k+1))\n"], ["def get_odd_collatz(R):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n            1. Collatz(1) is [1].\n            2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if R % 2 == 0:\n        odd_collatz = []\n    else:\n        odd_collatz = [R]\n    while R > 1:\n        if R % 2 == 0:\n            R = R / 2\n        else:\n            R = 3 * R + 1\n        odd_collatz.append(R)\n    return sorted(odd_collatz)\n\n"], ["def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    try:\n        date = date.strip()\n        month, Jmh, year = date.split(\"-\")\n        month, Jmh, year = int(month), int(Jmh), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12] and Jmh < 1 or Jmh > 31:\n            return False\n        if month in [4, 6, 9, 11] and Jmh < 1 or Jmh > 30:\n            return False\n        if month == 2 and Jmh < 1 or Jmh > 29:\n            return False\n        if month == 2 and Jmh == 29 and month in [4, 6, 9, 11]:\n            return False\n        if len(date) == 0:\n            return False\n        if len(date) != 10:\n            return False\n        if date[0] == '0':\n            return False\n        if date[1] == '0':\n            return False\n        if date[2] == '0':\n            return False\n        if date[3] == '0':\n            return False\n        if date[4] == '0':\n            return False\n        if date[5] == '0':\n            return False\n        if date[6] == '0':\n            return False\n        if date[7] == '0':\n            return False\n        if date[8] == '0':\n            return False\n        if date[9] == '0':\n            return False\n        if date[10] == '0':\n            return False\n        if date[11] == '0':\n            return False\n        if date[12] == '0':\n            return False\n        if date[1] == '0':\n            return False\n        if date[2] == '0':\n            return False\n        if date[3] == '0':\n            return False\n        if date[4] == '0':\n            return False\n        if date[5] == '0':\n            return False\n        if date[6] == '0':\n            return False\n        if date[7] == '0':\n            return False\n        if date[8] == '0':\n            return False\n        if date[9] == '0':\n            return False\n        if date[10] == '0':\n            return False\n        if date[11] == '0':\n            return False\n        if date[12] == '0':\n            return False\n        if date[1] == '0':\n            return False\n        if date[2] == '0':\n            return False\n        if date[3] == '0':\n            return False\n        if date[4] == '0':\n            return False\n        if date[5] == '0':\n            return False\n        if date[6] == '0':\n            return False\n        if date[7] == '0':\n            return False\n        if date[8] == '0':\n            return False\n        if date[9] == '0':\n            return False\n        if date[10] == '0':\n            return False\n        if date[11] == '0':\n            return False\n        if date[12] == '0':\n            return False\n        if date[1] == '0':\n            return False\n        if date[2] =="], ["def split_words(xz6):\n    \"\"\"\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3\n    \"\"\"\n    if \" \" in xz6:\n        return xz6.split()\n    elif \",\" in xz6:\n        return [ord(c) - ord('a') for c in xz6]\n    else:\n        return len(xz6) // 2\n\n"], ["def is_sorted(lst):\n    \"\"\"\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    \"\"\"\n    count_digit = dict([(z, 0) for z in lst])\n    for z in lst:\n        count_digit[z] += 1\n    if any(count_digit[z] > 2 for z in lst):\n        return False\n    return True\n\n"], ["def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n\n    def is_prime(K2W):\n        if K2W == 1 or K2W == 0:\n            return False\n        if K2W == 2:\n            return True\n        for i in range(2, K2W):\n            if K2W % i == 0:\n                return False\n        return True\n\n    if interval1[1] <= interval2[0] or interval2[1] <= interval1[0]:\n        return \"NO\"\n\n    if interval1[0] == interval2[0]:\n        return \"YES\"\n\n    if interval1[1] - interval2[0] == 1:\n        return \"YES\"\n\n    if is_prime(interval1[1] - interval2[0]):\n        return \"YES\"\n\n    return \"NO\"\n\n"], ["def prod_signs(eWk):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not eWk:\n        return None\n    return sum(abs(x) * abs(y) for x, y in zip(eWk, eWk))\n\n"], ["def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n            Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n            Output: [1, 2, 1]\n\n            Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n            Output: [1]\n    \"\"\"\n    n = len(grid)\n    val = n * n + 1\n    for c in range(n):\n        for j in range(n):\n            if grid[c][j] == 1:\n                temp = []\n                if c != 0:\n                    temp.append(grid[c - 1][j])\n                if j != 0:\n                    temp.append(grid[c][j - 1])\n                if c != n - 1:\n                    temp.append(grid[c + 1][j])\n                if j != n - 1:\n                    temp.append(grid[c][j + 1])\n                val = min(val, sum(temp))\n    return val\n\n"], ["def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n               = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for f in range(2, n + 1):\n        my_tri.append(my_tri[f - 1] + my_tri[f - 2] + my_tri[f - 3])\n    return my_tri\n\n"], ["def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    ek8m614 = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit % 2 == 1:\n            odd_count += 1\n    if odd_count == 0:\n        return 0\n    else:\n        return ek8m614 * (2 ** odd_count)\n\n"], ["def is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for f in range(len(string)):\n        if string[f] == \"[\":\n            opening_bracket_index.append(f)\n        else:\n            closing_bracket_index.append(f)\n    closing_bracket_index.reverse()\n    cnt = 0\n    for i in range(len(opening_bracket_index)):\n        if opening_bracket_index[i] == closing_bracket_index[i]:\n            cnt += 1\n    return cnt >= 2\n\n"], ["def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n\n\n    \"\"\"\n    import math\n\n    Y96O06j = 0\n    for i in lst:\n        Y96O06j += i ** 2\n    return Y96O06j\n\n"], ["def check_if_last_char_is_a_letter(txt):\n    \"\"\"\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False\n    \"\"\"\n    last_char = txt[-1]\n    if last_char.isalpha() and last_char not in \" \":\n        return True\n    return False\n\n"], ["def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    ind = -1\n    e = 1\n    while e < len(arr):\n        if arr[e] >= arr[e-1]:\n            ind = e\n            e += 1\n        else:\n            e += 1\n    return ind\n\n"], ["def largest_smallest_integers(lst):\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    \"\"\"\n    smallest = list(filter(lambda p: p < 0, lst))\n    largest = list(filter(lambda p: p >= 0, lst))\n    if len(smallest) == 0 and len(largest) == 0:\n        return None, None\n    elif len(smallest) == 0:\n        return largest, smallest[0]\n    elif len(largest) == 0:\n        return smallest, largest[0]\n    else:\n        return max(smallest), min(largest)\n\n"], ["def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    xWsFuc, temp_b = a, b\n    if isinstance(xWsFuc, str):\n        xWsFuc = xWsFuc.replace(\",\", \".\")\n        temp_b = float(xWsFuc)\n    if isinstance(temp_b, str):\n        temp_b = temp_b.replace(\",\", \".\")\n    if xWsFuc > temp_b:\n        return xWsFuc\n    else:\n        return temp_b\n\n"], ["def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    sum_of_even = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0 and i % 4 == 0:\n            sum_of_even += i\n    return sum_of_even == n\n"], ["def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    b2nEi6 = 1\n    special_fact = 1\n    for i in range(1, n + 1):\n        special_fact *= i\n        b2nEi6 *= i\n        b2nEi6 *= i - 1\n    return special_fact * b2nEi6\n\n"], ["def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    new_text = \"\"\n    s = 0\n    start, end = 0, 0\n    while s < len(text):\n        if text[s] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\" + text[s]\n            elif end - start > 0:\n                new_text += text[s]\n            start = end\n            end = 0\n        s += 1\n    return new_text\n\n"], ["def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    suf = [\"txt\", \"exe\", \"dll\"]\n    bMA = file_name.split(sep=\".\")\n    if len(bMA) != 2:\n        return \"No\"\n    if not bMA[1] in suf:\n        return \"No\"\n    if len(bMA[0]) == 0:\n        return \"No\"\n    if bMA[0][0].isalpha():\n        return \"No\"\n    return \"Yes\"\n"], ["def sum_squares(lst):\n    \"\"\" \"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    result = []\n    for O in range(len(lst)):\n        if O % 3 == 0:\n            result.append(lst[O] ** 2)\n        elif O % 4 == 0:\n            result.append(lst[O] ** 3)\n        else:\n            result.append(lst[O])\n    return sum(result)\n\n"], ["def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n            Input: sentence = \"This is a test\"\n            Output: \"is\"\n\n    Example 2:\n            Input: sentence = \"lets go for swimming\"\n            Output: \"go for\"\n\n    Constraints:\n            * 1 <= len(sentence) <= 100\n            * sentence contains only letters\n    \"\"\"\n    new_lst = []\n    for z6mC in sentence.split():\n        flg = 0\n        if len(z6mC) == 1:\n            flg = 1\n        if flg == 1:\n            new_lst.append(z6mC)\n    return \" \".join(new_lst)\n\n"], ["def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    L79a34p28 = int(a) * int(c)\n    L79a34p29 = int(b) * int(d)\n    if L79a34p28 == L79a34p29:\n        return True\n    else:\n        return False\n\n"], ["def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def digits_sum(o):\n        neg = 1\n        if o < 0:\n            o, neg = -1 * o, -1\n        return sum(map(abs, o)) * neg\n\n    nums.sort(key=digits_sum)\n    return nums\n\n"], ["def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1\n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            if num % 10 in odd_digits:\n                count += 1\n    return count\n\n"], ["def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n            For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n            Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n            Input: n = 5\n            Output: 1\n            Explanation:\n            a = [1, 3, 7, 13, 21]\n            The only valid triple is (1, 7, 13).\n    \"\"\"\n    A = [A2 * A2 - A2 + 1 for A2 in range(1, n + 1)]\n    ans = []\n    for A2 in range(n):\n        for j in range(A2 + 1, n):\n            for k in range(j + 1, n):\n                if A[A2] % 3 == 0 and A[j] % 3 == 0 and A[k] % 3 == 0:\n                    ans.append(A[A2] + A[j] + A[k])\n    return len(ans)\n\n"], ["def bf(planet1, planet2):\n    \"\"\"\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    \"\"\"\n    WVH039G6JnxP = (\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\",\n    )\n    if planet1 not in WVH039G6JnxP or planet2 not in WVH039G6JnxP or planet1 == planet2:\n        return ()\n    planet1_index = WVH039G6JnxP.index(planet1)\n    planet2_index = WVH039G6JnxP.index(planet2)\n    if planet1_index > planet2_index:\n        planet1_index, planet2_index = planet2_index, planet1_index\n    return WVH039G6JnxP[planet1_index:planet2_index + 1]\n\n"], ["def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    lst.sort()\n    new_lst = []\n    for K in lst:\n        if len(K) % 2 == 1:\n            new_lst.append(K)\n    return new_lst\n\n"], ["def x_or_y(c, x, y):\n    \"\"\"A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n\n    \"\"\"\n    if c == 1:\n        return y\n    for i in range(2, c):\n        if c % i == 0:\n            return 0\n    return x\n"], ["def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    # TODO: Write your code here.\n    return 0\n"], ["def compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    pass\n"], ["def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    strong = extensions[0]\n    my_val = len([Q for Q in extensions[0] if Q.isalpha() and Q.isupper()]) - len(\n        [Q for Q in extensions[0] if Q.isalpha() and Q.islower()]\n    )\n    for s in extensions:\n        val = len([Q for Q in s if Q.isalpha() and Q.isupper()]) - len(\n            [Q for Q in s if Q.isalpha() and Q.islower()]\n        )\n        if val > my_val:\n            strong = s\n    return class_name + \".\" + strong\n"], ["def cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    D = len(b)\n    pat = b + b\n    for i in range(len(a) - D + 1):\n        if a[i:i+D] == pat:\n            return True\n    return False\n\n"], ["def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n           even_odd_count(-12) ==> (1, 1)\n           even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    O5DtJ0GGC = 0\n    for i in str(abs(num)):\n        if int(i) % 2 == 0:\n            even_count += 1\n        else:\n            O5DtJ0GGC += 1\n    return (even_count, O5DtJ0GGC)\n\n"], ["def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"]\n    j = 12\n    res = \"\"\n    while number:\n        res = num[number % 10] + res\n        number //= 10\n    return res.lower()\n\n"], ["def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Your code here\n    return False\n"], ["def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # Write your code here\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = 0\n        for char in word:\n            count += 1\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n"], ["def eat(number, need, x99r411O7):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n            the number of carrots that you have eaten.\n    @need : integer\n            the number of carrots that you need to eat.\n    @remaining : integer\n            the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    if need <= x99r411O7:\n        return [number + need, x99r411O7 - need]\n    else:\n        return [x99r411O7, 0]\n"], ["def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( // )\n    Exponentiation ( ** )\n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n            The length of operator list is equal to the length of operand list minus one.\n            Operand is a list of of non-negative integers.\n            Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    V5d8860DFB = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        V5d8860DFB = oprt + V5d8860DFB\n    return eval(V5d8860DFB)\n\n"], ["def solve(Z):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    flg = 0\n    idx = 0\n    new_str = list(Z)\n    for i in Z:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n            idx += 1\n        else:\n            new_str[idx] = i\n            idx += 1\n    if flg == 0:\n        new_str = new_str[::-1]\n    return \"\".join(new_str)\n\n"], ["def string_to_md5(B419):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    import hashlib\n    return hashlib.md5(B419.encode()).hexdigest()\n"], ["def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n    return [i for i in range(lower, upper + 1) if i % 2 == 0]\n\n"], ["from typing import List\n\n\ndef has_close_elements(R10gKmr: List[float], threshold: float) -> bool:\n    \"\"\"Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for idx, elem in enumerate(R10gKmr):\n        for idx2, elem2 in enumerate(R10gKmr):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n    return False\n\n"], ["from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    current_string = []\n    current_depth = 0\n    for B in paren_string:\n        if B == \"(\":\n            current_depth += 1\n            current_string.append(B)\n        elif B == \")\":\n            current_depth -= 1\n            if current_depth == 0:\n                result.append(\"\".join(current_string))\n                current_string = []\n        else:\n            current_string.append(B)\n    if current_string:\n        result.append(\"\".join(current_string))\n    return result\n\n"], ["def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer_part, decimals = divmod(number, 1)\n    return decimals\n\n"], ["from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    E9BOk1P = 0\n    for op in operations:\n        E9BOk1P += op\n    return E9BOk1P < 0\n\n"], ["from typing import List\n\n\ndef mean_absolute_deviation(T731E7I: List[float]) -> float:\n    \"\"\"For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(T731E7I) / len(T731E7I)\n    return sum(abs(x - mean) for x in T731E7I) / len(T731E7I)\n\n"], ["from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    Ii92Tb = []\n    for n in numbers[:-1]:\n        Ii92Tb.append(n)\n        Ii92Tb.append(delimeter)\n    Ii92Tb.append(numbers[-1])\n    return Ii92Tb\n\n"], ["from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n\n    def parse_paren_group(s):\n        depth = 0\n        w92J60S7H = 0\n        for c in s:\n            if c == \"(\":\n                depth += 1\n            elif c == \")\":\n                depth -= 1\n            elif c == \"(\":\n                w92J60S7H += 1\n            elif c == \")\":\n                w92J60S7H -= 1\n        return depth, w92J60S7H\n\n    def parse_paren_string(s):\n        depth, w92J60S7H = 0, 0\n        for c in s:\n            if c == \"(\":\n                depth += 1\n            elif c == \")\":\n                depth -= 1\n            elif c == \"(\":\n                w92J60S7H += 1\n            elif c == \")\":\n                w92J60S7H -= 1\n        return depth, w92J60S7H\n\n    depths, w92J60S7H = [], 0\n    for s in paren_string.split():\n        depth, w92J60S7H = parse_paren_group(s)\n        depths.append(depth)\n    return depths, w92J60S7H\n\n"], ["from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]\n\n"], ["from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    CWpgt70oM = 0\n    prod_value = 1\n    for num in numbers:\n        CWpgt70oM += num\n        prod_value *= num\n    return CWpgt70oM, prod_value\n\n"], ["from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    aLC4qo8x735 = None\n    result = []\n    for n in numbers:\n        if aLC4qo8x735 is None:\n            aLC4qo8x735 = n\n            continue\n        if n > aLC4qo8x735:\n            aLC4qo8x735 = n\n            result.append(n)\n    return result\n\n"], ["def is_palindrome(q69817: str) -> bool:\n    \"\"\"Test if given string is a palindrome\"\"\"\n    return q69817 == q69817[::-1]\n\n\ndef make_palindrome(q69817: str) -> str:\n    \"\"\"Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not q69817:\n        return \"\"\n    beginning_of_suffix = 0\n    end_of_suffix = 0\n    while beginning_of_suffix < len(q69817):\n        if is_palindrome(q69817[beginning_of_suffix:end_of_suffix + 1]):\n            beginning_of_suffix += 1\n        else:\n            end_of_suffix += 1\n    return q69817[:beginning_of_suffix] + q69817[beginning_of_suffix:]\n"], ["from typing import List\n\n\ndef string_xor(a: str, z: str) -> str:\n    \"\"\"Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    def xor(i, j):\n        if i == j:\n            return \"0\"\n        if i == \"0\":\n            return j\n        if j == \"0\":\n            return i\n        return \"1\"\n\n    return \"\".join(xor(a[i], z[j]) for i, j in zip(range(len(a)), range(len(z))))\n\n"], ["from typing import List, Optional\n\n\ndef longest(s0g32H1: List[str]) -> Optional[str]:\n    \"\"\"Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not s0g32H1:\n        return None\n    if len(s0g32H1) == 1:\n        return s0g32H1[0]\n    return max(s0g32H1, key=len)\n\n"], ["def greatest_common_divisor(a: int, X: int) -> int:\n    \"\"\"Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while X:\n        a, X = X, a % X\n    return a\n\n"], ["from typing import List\n\n\ndef all_prefixes(NsT88C: str) -> List[str]:\n    \"\"\"Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    result = []\n    for i in range(len(NsT88C)):\n        result.append(NsT88C[:i])\n    return result\n\n"], ["def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n))\n"], ["def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string))\n"], ["from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    note_map = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    note_list = []\n    for note in music_string:\n        note_list.append(note_map[note])\n    return note_list\n\n"], ["def how_many_times(string: str, f972la1x4: str) -> int:\n    \"\"\"Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    times = 0\n    for i in range(len(string) - len(f972la1x4) + 1):\n        if string[i:i+len(f972la1x4)] == f972la1x4:\n            times += 1\n    return times\n"], ["from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n\n\nvalue_map = {\n    \"zero\": 0,\n    \"one\": 1,\n    \"two\": 2,\n    \"three\": 3,\n    \"four\": 4,\n    \"five\": 5,\n    \"six\": 6,\n    \"seven\": 7,\n    \"eight\": 8,\n    \"nine\": 9,\n}\n\n"], ["from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest_pair = None\n    distance = None\n    for idx, elem in enumerate(numbers):\n        for idx2, J268L in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - J268L)\n                    closest_pair = (elem, J268L)\n                else:\n                    if abs(elem - J268L) < distance:\n                        closest_pair = (elem, J268L)\n                        distance = abs(elem - J268L)\n    return closest_pair\n\n"], ["from typing import List\n\n\ndef rescale_to_unit(jxH36D7: List[float]) -> List[float]:\n    \"\"\"Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_number = min(jxH36D7)\n    max_number = max(jxH36D7)\n    return [(x - min_number) / (max_number - min_number) for x in jxH36D7]\n\n"], ["from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [int(value) for value in values if isinstance(value, int)]\n\n"], ["def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n"], ["def largest_divisor(i2: int) -> int:\n    \"\"\"For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in reversed(range(i2)):\n        if i % i2 == 0:\n            return i\n    return i2\n\n"], ["from typing import List\n\n\ndef factorize(q: int) -> List[int]:\n    \"\"\"Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    import math\n\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(q) + 1):\n        if q % i == 0:\n            fact.append(i)\n            q //= i\n        i += 1\n    if q > 1:\n        fact.append(q)\n    return fact\n\n"], ["from typing import List\n\n\ndef remove_duplicates(o46komV: List[int]) -> List[int]:\n    \"\"\"From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    import collections\n\n    seen = collections.defaultdict(int)\n    for i in o46komV:\n        seen[i] += 1\n    return [k for k, v in seen.items() if v == 1]\n\n"], ["def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.lower().upper()\n"], ["from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n"], ["from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\n"], ["def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x >= 0]\n"], ["def is_prime(L):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if L < 2:\n        return False\n    for k in range(2, L - 1):\n        if L % k == 0:\n            return False\n    return True\n"], ["import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\"xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    A7jGz, end = -1.0, 1.0\n    while poly(xs, A7jGz) * poly(xs, end) > 0:\n        A7jGz *= 2.0\n        end *= 2.0\n    while end - A7jGz > 1e-10:\n        A7jGz *= 2.0\n        end *= 2.0\n    return A7jGz\n\n"], ["def sort_third(G: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    G = list(G)\n    for i in range(len(G)):\n        if G[i] % 3 != 0:\n            G[i], G[i + 1], G[i + 2] = G[i + 2], G[i + 1], G[i]\n    return G\n\n"], ["def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n"], ["def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    A = l[0]\n    for e in l:\n        if e > A:\n            A = e\n    return A\n\n"], ["def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    ns = []\n    for n2 in range(n):\n        if n2 % 11 == 0 or n2 % 13 == 0:\n            ns.append(n2)\n    return len(ns)\n"], ["def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    k9u7j = l[::2]\n    odds = l[1::2]\n    k9u7j.sort()\n    ans = []\n    for i in range(len(k9u7j)):\n        if i % 2 == 0:\n            ans.append(k9u7j[i])\n        else:\n            ans.append(odds[i - 1])\n    return ans\n\n"], ["def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"], ["def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 89\n    elif n == 6:\n        return 233\n    elif n == 7:\n        return 144\n    elif n == 8:\n        return 71\n    elif n == 9:\n        return 35\n    elif n == 10:\n        return 17\n    elif n == 11:\n        return 6\n    elif n == 12:\n        return 3\n    elif n == 13:\n        return 2\n    elif n == 14:\n        return 1\n    elif n == 15:\n        return 0\n    elif n == 16:\n        return 1\n    elif n == 17:\n        return 0\n    elif n == 18:\n        return 1\n    elif n == 19:\n        return 0\n    elif n == 20:\n        return 1\n    elif n == 21:\n        return 0\n    elif n == 22:\n        return 1\n    elif n == 23:\n        return 0\n    elif n == 24:\n        return 1\n    elif n == 25:\n        return 0\n    elif n == 26:\n        return 1\n    elif n == 27:\n        return 0\n    elif n == 28:\n        return 1\n    elif n == 29:\n        return 0\n    elif n == 30:\n        return 1\n    elif n == 31:\n        return 0\n    elif n == 32:\n        return 1\n    elif n == 33:\n        return 0\n    elif n == 34:\n        return 1\n    elif n == 35:\n        return 0\n    elif n == 36:\n        return 1\n    elif n == 37:\n        return 0\n    elif n == 38:\n        return 1\n    elif n == 39:\n        return 0\n    elif n == 40:\n        return 1\n    elif n == 41:\n        return 0\n    elif n == 42:\n        return 1\n    elif n == 43:\n        return 0\n    elif n == 44:\n        return 1\n    elif n == 45:\n        return 0\n    elif n == 46:\n        return 1\n    elif n == 47:\n        return 0\n    elif n == 48:\n        return 1\n    elif n == 49:\n        return 0\n    elif n == 50:\n        return 1\n    elif n == 51:\n        return 0\n    elif n == 52:\n        return 1\n    elif n == 53:\n        return 0\n    elif n == 54:\n        return 1\n    elif n == 55:\n        return 0\n    elif n == 56:\n        return 1\n    elif n == 57:\n        return 0\n    elif n == 58:\n        return 1\n    elif n == 59:\n        return 0\n    elif n == 60:\n        return 1\n    elif n == 61:\n        return 0\n    elif n == 62:\n        return 1\n    elif n == 63:\n        return 0\n    elif n == 64:\n        return 1\n    elif n == 65:\n        return 0\n    elif n == 66:\n        return 1\n    elif n == 67:\n        return 0\n    elif n == 68:\n        return 1\n    elif n == 69:\n        return 0\n    elif n == 70:\n        return 1\n    elif n == 71:\n        return 0\n    elif n == 72:\n       "], ["def triples_sum_to_zero(c: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(c)):\n        for j in range(i + 1, len(c)):\n            for k in range(j + 1, len(c)):\n                if c[i] + c[j] + c[k] == 0:\n                    return True\n    return False\n\n"], ["def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # Write your code here.\n    pass\n"], ["def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n\n"], ["def pairs_sum_to_zero(M):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    for i, l1 in enumerate(M):\n        for j in range(i + 1, len(M)):\n            if l1 + M[j] == 0:\n                return True\n    return False\n\n"], ["def change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    Vif = \"\"\n    while x > 0:\n        Vif = base * x % base + Vif\n        x = x // base\n    return Vif\n\n"], ["def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2\n"], ["def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    p842c1D = [0, 0, 2, 0]\n    if n < 4:\n        return p842c1D[n]\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\n"], ["def median(J: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    J = sorted(J)\n    if len(J) % 2 == 1:\n        return J[len(J)//2]\n    else:\n        return (J[len(J)//2] + J[len(J)//2 - 1]) / 2\n"], ["def is_palindrome(B4h6: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    for i in range(len(B4h6)):\n        if B4h6[i] != B4h6[len(B4h6) - 1 - i]:\n            return False\n    return True\n\n"], ["def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    eMW = 1\n    for i in range(n):\n        eMW *= 2\n    return (eMW % p)\n\n"], ["def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"], ["def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiou'\n    return ''.join(char for char in text if char not in vowels)\n\n"], ["def below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for n in l:\n        if n >= t:\n            return False\n    return True\n\n"], ["def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n"], ["def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    if len(s0) != len(s1):\n        return False\n    for i in range(len(s0)):\n        if s0[i] != s1[i]:\n            return False\n    return True\n\n"], ["def fib(N: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if N == 0:\n        return 0\n    elif N == 1:\n        return 1\n    else:\n        return fib(N - 1) + fib(N - 2)\n\n"], ["def correct_bracketing(brackets: str):\n    \"\"\"brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    yILI6 = 0\n    for b in brackets:\n        if b == \"<\":\n            yILI6 += 1\n        elif b == \">\":\n            yILI6 -= 1\n        else:\n            return False\n    return yILI6 == 0\n\n"], ["def monotonic(I: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if I == sorted(I) or I == sorted(I, reverse=True):\n        return True\n    else:\n        return False\n"], ["def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    Z95 = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                Z95.add(e1)\n    return sorted(Z95)\n"], ["def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n    if n % 23 == 0:\n        return 23\n    if n % 29 == 0:\n        return 29\n    if n % 31 == 0:\n        return 31\n    if n % 37 == 0:\n        return 37\n    if n % 41 == 0:\n        return 41\n    if n % 43 == 0:\n        return 43\n    if n % 47 == 0:\n        return 47\n    if n % 53 == 0:\n        return 53\n    if n % 59 == 0:\n        return 59\n    if n % 61 == 0:\n        return 61\n    if n % 67 == 0:\n        return 67\n    if n % 71 == 0:\n        return 71\n    if n % 73 == 0:\n        return 73\n    if n % 79 == 0:\n        return 79\n    if n % 83 == 0:\n        return 83\n    if n % 89 == 0:\n        return 89\n    if n % 97 == 0:\n        return 97\n    if n % 101 == 0:\n        return 101\n    if n % 103 == 0:\n        return 103\n    if n % 107 == 0:\n        return 107\n    if n % 109 == 0:\n        return 109\n    if n % 113 == 0:\n        return 113\n    if n % 127 == 0:\n        return 127\n    if n % 131 == 0:\n        return 131\n    if n % 137 == 0:\n        return 137\n    if n % 139 == 0:\n        return 139\n    if n % 149 == 0:\n        return 149\n    if n % 151 == 0:\n        return 151\n    if n % 157 == 0:\n        return 157\n    if n % 163 == 0:\n        return 163\n    if n % 167 == 0:\n        return 167\n    if n % 173 == 0:\n        return 173\n    if n % 179 == 0:\n        return 179\n    if n % 181 == 0:\n        return 181\n    if n % 191 == 0:\n        return 191\n    if n % 193 == 0:\n        return 193\n    if n % 197 == 0:\n        return 197\n    if n % 199 == 0:\n        return 199\n    if n % 211 == 0:\n        return 211\n    if n % 223 == 0:\n        return 223\n    if n % 227 == 0:\n        return 227\n    if n % 229 == 0:\n        return 229\n    if n % 233 == 0:\n        return 233\n    if n % 239 == 0:\n        return 2"], ["def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))\n\n"], ["def correct_bracketing(brackets: str):\n    \"\"\"brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    F3724 = 0\n    for b in brackets:\n        if b == \"(\":\n            F3724 += 1\n        elif b == \")\":\n            F3724 -= 1\n        else:\n            return False\n    return F3724 == 0\n\n"], ["def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [x * (x + 1) / 2 for x in xs]\n\n"], ["def fibfib(t: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if t == 0:\n        return 0\n    if t == 1:\n        return 0\n    if t == 2:\n        return 1\n    if t == 3:\n        return 1\n    if t == 4:\n        return 2\n    if t == 5:\n        return 3\n    if t == 6:\n        return 5\n    if t == 7:\n        return 8\n    if t == 8:\n        return 13\n    if t == 9:\n        return 21\n    if t == 10:\n        return 34\n    if t == 11:\n        return 55\n    if t == 12:\n        return 89\n    if t == 13:\n        return 144\n    if t == 14:\n        return 233\n    if t == 15:\n        return 377\n    if t == 16:\n        return 610\n    if t == 17:\n        return 987\n    if t == 18:\n        return 1597\n    if t == 19:\n        return 2584\n    if t == 20:\n        return 4181\n    if t == 21:\n        return 6765\n    if t == 22:\n        return 10946\n    if t == 23:\n        return 17711\n    if t == 24:\n        return 28657\n    if t == 25:\n        return 46368\n    if t == 26:\n        return 75025\n    if t == 27:\n        return 121393\n    if t == 28:\n        return 196418\n    if t == 29:\n        return 317811\n    if t == 30:\n        return 514229\n    if t == 31:\n        return 832040\n    if t == 32:\n        return 1346269\n    if t == 33:\n        return 2178309\n    if t == 34:\n        return 3524578\n    if t == 35:\n        return 5702887\n    if t == 36:\n        return 8991256\n    if t == 37:\n        return 14907247\n    if t == 38:\n        return 24157817\n    if t == 39:\n        return 39088169\n    if t == 40:\n        return 63245986\n    if t == 41:\n        return 95661296\n    if t == 42:\n        return 144090200\n    if t == 43:\n        return 230955600\n    if t == 44:\n        return 372220900\n    if t == 45:\n        return 610040320\n    if t == 46:\n        return 977760640\n    if t == 47:\n        return 1504016873\n    if t == 48:\n        return 2401429776\n    if t == 49:\n        return 3932241568\n    if t == 50:\n        return 6464483171\n    if t == 51:\n        return 10208032969\n    if t == 52:\n        return 16061524033\n    if t == 53:\n        return"], ["FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\n\ndef vowels_count(c2):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in c2)\n    return n_vowels\n\n"], ["def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    Y = str(x)\n    if shift > len(Y):\n        return Y[len(Y) - shift:] + Y[:shift]\n    else:\n        return Y[:shift] + Y[len(Y) - shift:]\n"], ["def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n            digitSum(\"\") => 0\n            digitSum(\"abAB\") => 131\n            digitSum(\"abcCd\") => 67\n            digitSum(\"helloE\") => 69\n            digitSum(\"woArBld\") => 131\n            digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    if s == \"\":\n        return 0\n    else:\n        return sum(ord(c) for c in s if ord(c) >= 65 and ord(c) <= 90)\n\n"], ["def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    xzw = list()\n    for i in s.split(\" \"):\n        xzw.append(int(i))\n    xzw.sort()\n    xzw.reverse()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    xzw.pop()\n    x"], ["def pluck(K85):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n            Input: [4,2,3]\n            Output: [2, 1]\n            Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n            Input: [1,2,3]\n            Output: [2, 1]\n            Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n            Input: []\n            Output: []\n\n    Example 4:\n            Input: [5, 0, 3, 0, 4, 2]\n            Output: [0, 1]\n            Explanation: 0 is the smallest value, but  there are two zeros,\n                                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n            * 1 <= nodes.length <= 10000\n            * 0 <= node.value\n    \"\"\"\n    if len(K85) == 0:\n        return []\n    evens = list(filter(lambda x: x % 2 == 0, K85))\n    if len(evens) == 0:\n        return [K85[0], 0]\n    return [evens[0], evens.index(min(evens))]\n\n"], ["def search(lst):\n    \"\"\"\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n            search([4, 1, 2, 2, 3, 1]) == 2\n            search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n            search([5, 5, 4, 4, 4]) == -1\n    \"\"\"\n    frq = [0] * (max(lst) + 1)\n    for B in lst:\n        frq[B] += 1\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= frq[ans]:\n            ans = i\n    return ans\n\n"], ["def strange_sort_list(Ep3):\n    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    \"\"\"\n    res, switch = [], True\n    while Ep3:\n        res.append(min(Ep3) if switch else max(Ep3))\n        Ep3.remove(min(Ep3) if switch else max(Ep3))\n        switch = not switch\n    return res\n\n"], ["def triangle_area(a, p, c):\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if a + p <= c or a + c <= p or p + c <= a:\n        return -1\n    s = (a + p + c) / 2\n    return round(s * (s - a) * (s - p) * (s - c), 2)\n\n"], ["def will_it_fly(s, w):\n    \"\"\"\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(s) > w:\n        return False\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] != s[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n\n"], ["def smallest_change(adp):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    ans = 0\n    for i in range(len(adp) // 2):\n        if adp[i] != adp[len(adp) - 1 - i]:\n            ans += 1\n    return ans\n\n"], ["def total_match(lst1, lst2):\n    \"\"\"\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    \"\"\"\n    l1 = 0\n    for X4 in lst1:\n        l1 += len(X4)\n    l2 = 0\n    for X4 in lst2:\n        l2 += len(X4)\n    if l1 == l2:\n        return lst1\n    else:\n        return lst2\n\n"], ["def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n\n    def is_prime(n):\n        for k2 in range(2, n):\n            if n % k2 == 0:\n                return False\n        return True\n\n    for i in range(2, 101):\n        if is_prime(i):\n            return False\n    return True\n\n"], ["def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if n == 1:\n        return x == 1\n    N2y46 = 1\n    while n > 1:\n        if n % 2 == 0:\n            N2y46 *= x\n        x *= x\n        n //= 2\n    return x == 1\n\n"], ["def iscube(t):\n    \"\"\"\n    Write a function that takes an integer a and returns True\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    \"\"\"\n    t = abs(t)\n    if t == 0:\n        return True\n    if t == 1:\n        return True\n    if t % 2 == 0:\n        return False\n    if t % 3 == 0:\n        return False\n    if t % 5 == 0:\n        return False\n    if t % 7 == 0:\n        return False\n    if t % 11 == 0:\n        return False\n    if t % 13 == 0:\n        return False\n    if t % 17 == 0:\n        return False\n    if t % 19 == 0:\n        return False\n    if t % 23 == 0:\n        return False\n    if t % 29 == 0:\n        return False\n    if t % 31 == 0:\n        return False\n    if t % 37 == 0:\n        return False\n    if t % 41 == 0:\n        return False\n    if t % 43 == 0:\n        return False\n    if t % 47 == 0:\n        return False\n    if t % 53 == 0:\n        return False\n    if t % 59 == 0:\n        return False\n    if t % 61 == 0:\n        return False\n    if t % 67 == 0:\n        return False\n    if t % 71 == 0:\n        return False\n    if t % 73 == 0:\n        return False\n    if t % 79 == 0:\n        return False\n    if t % 83 == 0:\n        return False\n    if t % 89 == 0:\n        return False\n    if t % 97 == 0:\n        return False\n    return True\n\n"], ["def hex_key(A50):\n    \"\"\"You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    primes = (\"2\", \"3\", \"5\", \"7\", \"B\", \"D\")\n    total = 0\n    for i in range(0, len(A50)):\n        if A50[i] in primes:\n            total += 1\n    return total\n\n"], ["def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    # Your code here\n    pass\n\n"], ["def is_happy(l):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(l) < 3:\n        return False\n    for i in range(len(l) - 2):\n        if l[i] == l[i + 1] and l[i] == l[i + 2]:\n            return False\n    return True\n\n"], ["def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n                     GPA       |    Letter grade\n                      4.0                A+\n                    > 3.7                A\n                    > 3.3                A-\n                    > 3.0                B+\n                    > 2.7                B\n                    > 2.3                B-\n                    > 2.0                C+\n                    > 1.7                C\n                    > 1.3                C-\n                    > 1.0                D+\n                    > 0.7                D\n                    > 0.0                D-\n                      0.0                E\n\n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    C969771133Hd = []\n    for gpa in grades:\n        if gpa == 4.0:\n            C969771133Hd.append(\"A+\")\n        elif gpa > 3.7:\n            C969771133Hd.append(\"A\")\n        elif gpa > 3.3:\n            C969771133Hd.append(\"A-\")\n        elif gpa > 3.0:\n            C969771133Hd.append(\"B+\")\n        elif gpa > 2.7:\n            C969771133Hd.append(\"B\")\n        elif gpa > 2.3:\n            C969771133Hd.append(\"B-\")\n        elif gpa > 2.0:\n            C969771133Hd.append(\"C+\")\n        elif gpa > 1.7:\n            C969771133Hd.append(\"C\")\n        elif gpa > 1.3:\n            C969771133Hd.append(\"C-\")\n        elif gpa > 1.0:\n            C969771133Hd.append(\"D+\")\n        elif gpa > 0.7:\n            C969771133Hd.append(\"D\")\n        elif gpa > 0.0:\n            C969771133Hd.append(\"D-\")\n        else:\n            C969771133Hd.append(\"E\")\n    return C969771133Hd\n\n"], ["def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    k = len(string)\n    if k == 0 or k == 1:\n        return False\n    for i in range(2, k):\n        if string[i] == string[0] and string[i] != string[i + 1]:\n            return False\n    return True\n\n"], ["def starts_one_ends(O):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if O == 1:\n        return 1\n    else:\n        return 0 + starts_one_ends(O - 1)\n\n"], ["def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Write your code here\n    return \"\"\n"], ["def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(x for x in lst if x % 2 == 0)\n\n"], ["def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return ''.join(sorted(s, key=ord))\n\n"], ["def get_row(lst, O):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    coords = [\n        (i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == O\n    ]\n    coords.sort(key=lambda x: x[0])\n    coords.sort(key=lambda x: x[1], reverse=True)\n    return coords\n\n"], ["def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Write your code here\n    pass\n"], ["def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    d = \"abcdefghijklmnopqrstuvwxyz\"\n    out = \"\"\n    for D in s:\n        if D in d:\n            out += d[(d.index(D) + 2) % len(d)]\n        else:\n            out += D\n    return out\n\n"], ["def next_smallest(DK7):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n\n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    DK7 = sorted(set(DK7))\n    if len(DK7) == 1:\n        return None\n    return DK7[1]\n"], ["def is_bored(y):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    import re\n    return len(re.findall(r\"I\", y))\n\n"], ["def any_int(x, y, X):\n    \"\"\"\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    any_int(5, 2, 7) \u279e True\n\n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n\n    any_int(3.6, -2.2, 2) \u279e False\n\n\n\n    \"\"\"\n    if isinstance(x, int) and isinstance(y, int) and isinstance(X, int):\n        if (x + y == X) or (x + X == y) or (y + X == x):\n            return True\n    return False\n"], ["def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(k, chr(ord(k) + 2)) for k in vowels])\n    return \"\".join([vowels_replace[c] if c in vowels else c for c in message])\n\n"], ["def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n\n    def isPrime(n):\n        for p in range(2, int(n ** 0.5) + 1):\n            if n % p == 0:\n                return False\n        return True\n\n    maxx = 0\n    for i in lst:\n        if isPrime(i):\n            if i > maxx:\n                maxx = i\n    return maxx\n\n"], ["def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict.keys()) == 0:\n        return False\n    else:\n        S2o50 = \"start\"\n        for key in dict.keys():\n            if isinstance(key, str) == False:\n                S2o50 = \"mixed\"\n                break\n            if S2o50 == \"start\":\n                if key.isupper():\n                    S2o50 = \"upper\"\n                else:\n                    S2o50 = \"lower\"\n            if S2o50 == \"mixed\":\n                if key.isupper():\n                    S2o50 = \"upper\"\n                elif key.islower():\n                    S2o50 = \"lower\"\n        if S2o50 == \"upper\":\n            return True\n        else:\n            return False\n"], ["def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    primes = []\n    for h in range(2, n):\n        is_prime = True\n        for j in range(2, h):\n            if h % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(h)\n    return primes\n\n"], ["def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    return a * b\n\n"], ["def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n\n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    sw3G9 = 0\n    for i in range(0, len(s), 2):\n        if s[i] == 'A' and s[i + 1] == 'B':\n            sw3G9 += 1\n    return sw3G9\n\n"], ["def closest_integer(xz273):\n    \"\"\"\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    \"\"\"\n    from math import floor, ceil\n\n    if xz273.count(\".\") == 1:\n        # remove trailing zeros\n        while xz273[-1] == \"0\":\n            xz273 = xz273[:-1]\n    num = float(xz273)\n    if xz273[-2:] == \".5\":\n        if num > 0:\n            return int(ceil(num))\n        else:\n            return int(floor(num))\n    elif xz273[-2:] == \".0\":\n        if num > 0:\n            return int(ceil(num))\n        else:\n            return int(floor(num))\n    else:\n        return int(num)\n"], ["def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n % 2 == 0:\n        return [n, n // 2]\n    else:\n        return [n // 2, n]\n\n"], ["def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n\n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    if not s:\n        return []\n    Y0Fxf4 = []\n    for letter in s:\n        if letter == \",\":\n            Y0Fxf4.append(\"\")\n        else:\n            Y0Fxf4.append(letter)\n    return Y0Fxf4\n\n"], ["def choose_num(x, Y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > Y:\n        return -1\n    if Y % 2 == 0:\n        return Y\n    else:\n        return choose_num(Y + 1, Y)\n\n"], ["def rounded_avg(D, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if m < D:\n        return -1\n    summation = 0\n    for i in range(n, m + 1):\n        summation += i\n    return bin(summation)[2:]\n\n"], ["def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n\n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    Fu7iK58SxpcB0p3R3I = []\n    for i in x:\n        if i % 2 == 0:\n            Fu7iK58SxpcB0p3R3I.append(i)\n    return sorted(set(Fu7iK58SxpcB0p3R3I))\n\n"], ["def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n                    -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n                    -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n                    -> sort arr -> [-1, 1, 55]\n                    -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n\ndic = {\n    1: \"One\",\n    2: \"Two\",\n    3: \"Three\",\n    4: \"Four\",\n    5: \"Five\",\n    6: \"Six\",\n    7: \"Seven\",\n    8: \"Eight\",\n    9: \"Nine\",\n}\n\n"], ["def f(n):\n    \"\"\"Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    ret = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            z = 1\n            for j in range(1, i + 1):\n                z *= j\n            ret.append(z)\n        else:\n            ret.append(i)\n    return ret\n\n"], ["def even_odd_palindrome(G):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n            Input: 3\n            Output: (1, 2)\n            Explanation:\n            Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n            Input: 12\n            Output: (4, 6)\n            Explanation:\n            Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n            1. 1 <= n <= 10^3\n            2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n    def is_palindrome(G):\n        return str(G) == str(G)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, G + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_palindrome_count += 1\n            else:\n                odd_palindrome_count += 1\n\n    return even_palindrome_count, odd_palindrome_count\n\n"], ["def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n\n    def digits_sum(q):\n        neg = 1\n        if q < 0:\n            q, neg = -1 * q, -1\n        return sum(map(abs, str(q).split('')))\n\n    return sum(map(digits_sum, arr))\n\n"], ["def move_one_ball(i3R):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n            You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                             be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                            array by performing any number of right shift operations.\n\n    \"\"\"\n    if len(i3R) == 0:\n        return True\n    sorted_array = sorted(i3R)\n    my_arr = []\n    min_value = min(i3R)\n    max_value = max(i3R)\n    for i in range(len(sorted_array)):\n        if sorted_array[i] == min_value:\n            my_arr.append(sorted_array[i])\n        else:\n            my_arr.append(sorted_array[i])\n    if len(my_arr) == len(sorted_array):\n        return True\n    else:\n        return False\n\n"], ["def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    odd = 0\n    even = 0\n    for o in lst1:\n        if o % 2 == 1:\n            odd += 1\n    for o in lst2:\n        if o % 2 == 0:\n            even += 1\n    if odd == 0 and even == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n"], ["def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    dict1 = {}\n    list1 = test.split(\" \")\n    t = 0\n    for w in list1:\n        if (list1.count(w) > t) and w != \"\":\n            dict1[w] = list1.count(w)\n        t = list1.count(w)\n    return dict1\n\n"], ["def reverse_delete(z, c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    z = \"\".join([char for char in z if char not in c])\n    return z, z == z[::-1]\n"], ["def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    res = []\n    for arr in lst:\n        res.append(len(list(filter(str.isdigit, arr))))\n    return res\n\n"], ["def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    F0BQ1nj = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if s < 0:\n            s = 0\n        F0BQ1nj += num\n    return F0BQ1nj\n\n"], ["def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # Write your code here\n    # 1. Find the max number of buckets\n    max_buckets = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_buckets += 1\n    # 2. Find the max number of units of water\n    max_units = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units += 1\n    # 3. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 4. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 5. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 6. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 7. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 8. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 9. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 10. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 11."], ["def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n"], ["def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    result = []\n    for p813 in s.split():\n        n_consonants = 0\n        for i in range(0, len(p813)):\n            if p813[i].lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]:\n                n_consonants += 1\n        if n_consonants == n:\n            result.append(p813)\n    return result\n"], ["def get_closest_vowel(j8S7):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    if len(j8S7) < 3:\n        return \"\"\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"O\", \"U\", \"I\"}\n    left = j8S7[0]\n    right = j8S7[-1]\n    if left in vowels and right in vowels:\n        return left\n    return \"\"\n\n"], ["def match_parens(lst):\n    \"\"\"\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    \"\"\"\n\n    def check(s):\n        k2r = 0\n        for i in s:\n            if i == \"(\":\n                k2r = k2r + 1\n            else:\n                k2r = k2r - 1\n        return k2r == 0\n\n    return check(lst[0]) and check(lst[1])\n\n"], ["def maximum(Z17, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n            Input: arr = [-3, -4, 5], k = 3\n            Output: [-4, -3, 5]\n\n    Example 2:\n\n            Input: arr = [4, -4, 4], k = 2\n            Output: [4, 4]\n\n    Example 3:\n\n            Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n            Output: [2]\n\n    Note:\n            1. The length of the array will be in the range of [1, 1000].\n            2. The elements in the array will be in the range of [-1000, 1000].\n            3. 0 <= k <= len(arr)\n    \"\"\"\n    if k == 0:\n        return []\n    if k == 1:\n        return [max(Z17)]\n    if k == 2:\n        return [max(Z17), max(Z17)]\n    if k == 3:\n        return [max(Z17), max(Z17), max(Z17)]\n    if k == 4:\n        return [max(Z17), max(Z17), max(Z17), max(Z17)]\n    if k == 5:\n        return [max(Z17), max(Z17), max(Z17), max(Z17), max(Z17)]\n    if k == 6:\n        return [max(Z17), max(Z17), max(Z17), max(Z17), max(Z17), max(Z17)]\n    if k == 7:\n        return [max(Z17), max(Z17), max(Z17), max(Z17), max(Z17), max(Z17), max(Z17)]\n    if k == 8:\n        return [max(Z17), max(Z17), max(Z17), max(Z17), max(Z17), max(Z17), max(Z17), max(Z17)]\n    if k == 9:\n        return [max(Z17), max(Z17), max(Z17), max(Z17), max(Z17), max(Z17), max(Z17), max(Z17), max(Z17)]\n    if k == 10:\n        return [max(Z17), max(Z17), max(Z17), max(Z17), max(Z17), max(Z17), max(Z17), max(Z17), max(Z17), max(Z17), max(Z17)]\n    if k == 11:\n        return [max(Z17), max(Z17), max(Z17), max(Z17), max(Z17), max(Z17), max(Z17), max(Z17), max(Z17), max(Z17), max(Z17), max(Z17)]\n    if k == 12:\n        return [max(Z17), max(Z17), max(Z17), max(Z17), max(Z17), max(Z17), max(Z17), max(Z17), max(Z17), max(Z17), max(Z17), max(Z17), max(Z17), max(Z17)]\n    if k == 13:\n        return [max(Z17), max(Z17), max(Z17), max(Z17), max(Z17), max(Z17), max(Z17), max(Z17), max(Z17), max(Z17), max(Z17), max(Z17), max(Z17), max(Z17), max(Z17), max(Z17)]\n    if k == 14:\n        return [max(Z17), max(Z17), max(Z17), max(Z17), max(Z17), max(Z17), max(Z17), max(Z17), max(Z17"], ["def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(x for x in lst if x % 2 == 1)\n\n"], ["def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return sum(arr[i:i+k] for i in range(len(arr)-k+1))\n"], ["def get_odd_collatz(Q):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n            1. Collatz(1) is [1].\n            2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if Q % 2 == 0:\n        odd_collatz = []\n    else:\n        odd_collatz = [Q]\n    while Q > 1:\n        if Q % 2 == 0:\n            Q = Q / 2\n        else:\n            Q = 3 * Q + 1\n        odd_collatz.append(Q)\n    return sorted(odd_collatz)\n\n"], ["def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    try:\n        date = date.strip()\n        month, YcC, year = date.split(\"-\")\n        month, YcC, year = int(month), int(YcC), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12] and YcC < 1 or YcC > 31:\n            return False\n        if month in [4, 6, 9, 11] and YcC < 1 or YcC > 30:\n            return False\n        if month == 2 and YcC < 1 or YcC > 29:\n            return False\n        if month == 2 and YcC == 29 and YcC < 1:\n            return False\n        if len(date) == 0:\n            return False\n        return True\n    except:\n        return False\n"], ["def split_words(NPM):\n    \"\"\"\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3\n    \"\"\"\n    if \" \" in NPM:\n        return NPM.split()\n    elif \",\" in NPM:\n        return [ord(c) - ord('a') + 1 for c in NPM]\n    else:\n        return len(NPM) // 2\n"], ["def is_sorted(lst):\n    \"\"\"\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    \"\"\"\n    count_digit = dict([(i2, 0) for i2 in lst])\n    for i2 in lst:\n        count_digit[i2] += 1\n    if any(count_digit[i2] > 2 for i2 in lst):\n        return False\n    return True\n\n"], ["def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n\n    def is_prime(C50):\n        if C50 == 1 or C50 == 0:\n            return False\n        if C50 == 2:\n            return True\n        for i in range(2, C50):\n            if C50 % i == 0:\n                return False\n        return True\n\n    if interval1[1] <= interval2[0] or interval2[1] <= interval1[0]:\n        return \"NO\"\n    if interval1[0] == interval2[0]:\n        return \"YES\"\n    if interval1[1] == interval2[1]:\n        return \"YES\"\n    if interval1[0] <= interval2[1] and interval2[0] <= interval1[1]:\n        return \"YES\"\n    if interval1[1] <= interval2[0] and interval2[1] <= interval1[0]:\n        return \"YES\"\n    if interval1[0] == interval2[0] and interval2[1] == interval1[1]:\n        return \"YES\"\n    if interval1[0] == interval2[1] and interval2[0] == interval1[0]:\n        return \"YES\"\n    if interval1[1] == interval2[0] and interval2[1] == interval1[1]:\n        return \"YES\"\n    if interval1[0] == interval2[1] and interval2[0] == interval1[1]:\n        return \"YES\"\n    if interval1[1] == interval2[0] and interval2[1] == interval1[0]:\n        return \"YES\"\n    if interval1[0] == interval2[0] and interval2[1] == interval1[1]:\n        return \"YES\"\n    if interval1[1] == interval2[1] and interval2[0] == interval1[0]:\n        return \"YES\"\n    if interval1[0] == interval2[1] and interval2[1] == interval1[1]:\n        return \"YES\"\n    if interval1[1] == interval2[0] and interval2[1] == interval1[1]:\n        return \"YES\"\n    if interval1[0] == interval2[1] and interval2[0] == interval1[0]:\n        return \"YES\"\n    if interval1[1] == interval2[0] and interval2[1] == interval1[0]:\n        return \"YES\"\n    if interval1[0] == interval2[0] and interval2[1] == interval1[1]:\n        return \"YES\"\n    if interval1[1] == interval2[1] and interval2[0] == interval1[1]:\n        return \"YES\"\n    if interval1[0] == interval2[1] and interval2[0] == interval1[0]:\n        return \"YES\"\n    if interval1[1] == interval2[0] and interval2[1] == interval1[0]:\n        return \"YES\"\n    if interval1[0] == interval2[1] and interval2[0] == interval1[1]:\n        return \"YES\"\n    if interval1[1] == interval2[0] and interval2[1] == interval1[0]:\n        return \"YES\"\n    if interval1[0] == interval2[0] and interval2[1] == interval1[1]:\n        return \"YES\"\n    if interval1[1] == interval2[1] and interval2[0] == interval1[0]:\n       "], ["def prod_signs(D60):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not D60:\n        return None\n    return sum(map(lambda x: x * x, D60)) * sum(map(lambda x: 1 if x < 0 else -1, D60))\n\n"], ["def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n            Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n            Output: [1, 2, 1]\n\n            Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n            Output: [1]\n    \"\"\"\n    n = len(grid)\n    val = n * n + 1\n    for j2 in range(n):\n        for j in range(n):\n            if grid[j2][j] == 1:\n                temp = []\n                if j2 != 0:\n                    temp.append(grid[j2 - 1][j])\n                if j != 0:\n                    temp.append(grid[j2][j - 1])\n                if j2 != n - 1:\n                    temp.append(grid[j2 + 1][j])\n                if j != n - 1:\n                    temp.append(grid[j2][j + 1])\n                val = min(val, sum(temp))\n    return val\n\n"], ["def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n               = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n    Vq4862 = [1, 3]\n    for i in range(2, n + 1):\n        Vq4862.append(Vq4862[i - 1] + Vq4862[i - 2] + Vq4862[i - 3])\n    return Vq4862[n]\n\n"], ["def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    Qii9B11 = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit % 2 == 1:\n            odd_count += 1\n    if odd_count == 0:\n        return 0\n    else:\n        return Qii9B11 * digits(odd_count)\n\n"], ["def is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for X in range(len(string)):\n        if string[X] == \"[\":\n            opening_bracket_index.append(X)\n        else:\n            closing_bracket_index.append(X)\n    closing_bracket_index.reverse()\n    cnt = 0\n    for i in range(len(opening_bracket_index)):\n        if opening_bracket_index[i] == closing_bracket_index[i]:\n            cnt += 1\n    return cnt >= 2\n\n"], ["def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n\n\n    \"\"\"\n    import math\n\n    I96ke2M = 0\n    for i in lst:\n        I96ke2M += i ** 2\n    return math.ceil(I96ke2M)\n\n"], ["def check_if_last_char_is_a_letter(txt):\n    \"\"\"\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False\n    \"\"\"\n    last_char = txt[-1]\n    if last_char.isalpha() and last_char not in \" \":\n        return True\n    return False\n\n"], ["def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    ind = -1\n    h = 1\n    while h < len(arr):\n        if arr[h] >= arr[h+1]:\n            ind = h\n            h += 1\n        else:\n            h += 1\n    return ind\n\n"], ["def largest_smallest_integers(lst):\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    \"\"\"\n    smallest = list(filter(lambda x2: x2 < 0, lst))\n    largest = list(filter(lambda x2: x2 > 0, lst))\n    if len(smallest) == 0 and len(largest) == 0:\n        return None, None\n    elif len(smallest) == 0:\n        return largest, smallest[0]\n    elif len(largest) == 0:\n        return smallest, largest[0]\n    else:\n        return max(smallest), min(largest)\n\n"], ["def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    temp_a, w7NK12 = a, b\n    if isinstance(temp_a, str):\n        temp_a = temp_a.replace(\",\", \".\")\n    if isinstance(temp_a, float):\n        temp_a = float(temp_a)\n    if isinstance(temp_a, int):\n        temp_a = int(temp_a)\n    if isinstance(temp_a, str):\n        temp_a = float(temp_a)\n    if temp_a > w7NK12:\n        return temp_a\n    else:\n        return None\n\n"], ["def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    sum_of_even = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0 and i % 4 == 0:\n            sum_of_even += i\n    return sum_of_even == n\n"], ["def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    asY4r9 = 1\n    special_fact = 1\n    for i in range(1, n + 1):\n        asY4r9 *= i\n        special_fact *= i\n    return special_fact\n\n"], ["def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    new_text = \"\"\n    J = 0\n    start, end = 0, 0\n    while J < len(text):\n        if text[J] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\" + text[J]\n            elif end - start > 0:\n                new_text += text[J]\n            start = end\n            end = 0\n        J += 1\n    return new_text\n\n"], ["def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    suf = [\"txt\", \"exe\", \"dll\"]\n    aP4 = file_name.split(sep=\".\")\n    if len(aP4) != 2:\n        return \"No\"\n    if not aP4[1] in suf:\n        return \"No\"\n    if len(aP4[0]) == 0:\n        return \"No\"\n    if aP4[0][0].isalpha():\n        return \"No\"\n    return \"Yes\"\n"], ["def sum_squares(lst):\n    \"\"\" \"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    result = []\n    for h in range(len(lst)):\n        if h % 3 == 0:\n            result.append(lst[h] ** 2)\n        elif h % 4 == 0:\n            result.append(lst[h] ** 3)\n        else:\n            result.append(lst[h])\n    return sum(result)\n\n"], ["def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n            Input: sentence = \"This is a test\"\n            Output: \"is\"\n\n    Example 2:\n            Input: sentence = \"lets go for swimming\"\n            Output: \"go for\"\n\n    Constraints:\n            * 1 <= len(sentence) <= 100\n            * sentence contains only letters\n    \"\"\"\n    new_lst = []\n    for f9T6 in sentence.split():\n        flg = 0\n        if len(f9T6) == 1:\n            flg = 1\n        for i in range(1, len(f9T6) + 1):\n            if len(f9T6) == i:\n                flg = 1\n        if flg == 1:\n            new_lst.append(f9T6)\n    return \" \".join(new_lst)\n\n"], ["def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    v0YyW9g70 = int(a) * int(c)\n    v0YyW9g70 = v0YyW9g70 // int(d)\n    if v0YyW9g70 == 0:\n        return False\n    else:\n        return True\n\n"], ["def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def digits_sum(B):\n        neg = 1\n        if B < 0:\n            B, neg = -1 * B, -1\n        return sum(map(abs, list(str(B)))) * neg\n\n    nums.sort(key=digits_sum)\n    return nums\n\n"], ["def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1\n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    WEN5e = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            if num % 10 in odd_digits:\n                WEN5e += 1\n    return WEN5e\n\n"], ["def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n            For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n            Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n            Input: n = 5\n            Output: 1\n            Explanation:\n            a = [1, 3, 7, 13, 21]\n            The only valid triple is (1, 7, 13).\n    \"\"\"\n    A = [l * l - l + 1 for l in range(1, n + 1)]\n    ans = []\n    for l in range(n):\n        for j in range(l + 1, n):\n            for k in range(j + 1, n):\n                if A[l] + A[j] + A[k] % 3 == 0:\n                    ans.append(A[l] + A[j] + A[k])\n    return len(ans)\n\n"], ["def bf(planet1, planet2):\n    \"\"\"\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    \"\"\"\n    v01584sRuFr0 = (\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\",\n    )\n    if planet1 not in v01584sRuFr0 or planet2 not in v01584sRuFr0 or planet1 == planet2:\n        return ()\n    planet1_index = v01584sRuFr0.index(planet1)\n    planet2_index = v01584sRuFr0.index(planet2)\n    if planet1_index > planet2_index:\n        planet1_index, planet2_index = planet2_index, planet1_index\n    return v01584sRuFr0[planet1_index:planet2_index + 1]\n\n"], ["def sorted_list_sum(S1Y):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    S1Y.sort()\n    new_lst = []\n    for i in S1Y:\n        if len(i) % 2 == 1:\n            new_lst.append(i)\n    return new_lst\n\n"], ["def x_or_y(K, x, y):\n    \"\"\"A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n\n    \"\"\"\n    if K == 1:\n        return y\n    for i in range(2, K):\n        if K % i == 0:\n            return x\n    return y\n\n"], ["def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    # TODO: Write your code here.\n    return 0\n"], ["def compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    pass\n"], ["def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    strong = extensions[0]\n    my_val = len([i for i in extensions[0] if i.isalpha() and i.isupper()]) - len(\n        [i for i in extensions[0] if i.isalpha() and i.islower()]\n    )\n    for s in extensions:\n        val = len([i for i in s if i.isalpha() and i.isupper()]) - len(\n            [i for i in s if i.isalpha() and i.islower()]\n        )\n        if val > my_val:\n            strong = s\n    return class_name + \".\" + strong\n"], ["def cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    T = len(b)\n    pat = b + b\n    for i in range(len(a) - T + 1):\n        if a[i:i+T] == pat:\n            return True\n    return False\n\n"], ["def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n           even_odd_count(-12) ==> (1, 1)\n           even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    Ck81946485 = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i) % 2 == 0:\n            odd_count += 1\n        else:\n            Ck81946485 += 1\n    return (odd_count, Ck81946485)\n\n"], ["def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"]\n    L = 12\n    res = \"\"\n    while number:\n        res = num[number % L] + res\n        number //= L\n    return res.lower()\n\n"], ["def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Your code here\n    return False\n"], ["def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # Write your code here\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = 0\n        for char in word:\n            count += 1\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n"], ["def eat(number, need, V27k2MW5U):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n            the number of carrots that you have eaten.\n    @need : integer\n            the number of carrots that you need to eat.\n    @remaining : integer\n            the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    if need <= V27k2MW5U:\n        return [number + need, V27k2MW5U - need]\n    else:\n        return [V27k2MW5U, V27k2MW5U - need]\n"], ["def do_algebra(operator, xN55yw2):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( // )\n    Exponentiation ( ** )\n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n            The length of operator list is equal to the length of operand list minus one.\n            Operand is a list of of non-negative integers.\n            Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    expression = str(xN55yw2[0])\n    for oprt, oprn in zip(operator, xN55yw2[1:]):\n        expression = oprt + oprn + expression\n    return eval(expression)\n\n"], ["def solve(R):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    flg = 0\n    idx = 0\n    new_str = list(R)\n    for i in R:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n            idx += 1\n        else:\n            new_str[idx] = i\n            idx += 1\n    if flg == 0:\n        new_str = new_str[::-1]\n    return \"\".join(new_str)\n\n"], ["def string_to_md5(S4NW):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    import hashlib\n    return hashlib.md5(S4NW.encode('utf-8')).hexdigest()\n\n"], ["def generate_integers(a, a2):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    lower = max(2, min(a, a2))\n    upper = min(8, max(a, a2))\n    return [i for i in range(lower, upper + 1) if i % 2 == 0]\n\n"], ["from typing import List\n\n\ndef has_close_elements(EzF338d: List[float], threshold: float) -> bool:\n    \"\"\"Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for idx, elem in enumerate(EzF338d):\n        for idx2, elem2 in enumerate(EzF338d):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n    return False\n\n"], ["from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    o4T260EDI8o83G = []\n    current_depth = 0\n    for c in paren_string:\n        if c == \"(\":\n            current_depth += 1\n            o4T260EDI8o83G.append(c)\n        elif c == \")\":\n            current_depth -= 1\n            if current_depth == 0:\n                result.append(\"\".join(o4T260EDI8o83G))\n                o4T260EDI8o83G = []\n        elif c == \" \":\n            pass\n        else:\n            raise ValueError(\"Invalid input string\")\n    if len(o4T260EDI8o83G) > 0:\n        result.append(\"\".join(o4T260EDI8o83G))\n    return result\n\n"], ["def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer_part, decimals = divmod(number, 1)\n    return decimals\n\n"], ["from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    BR8l5q9 = 0\n    for op in operations:\n        BR8l5q9 += op\n    return BR8l5q9 < 0\n\n"], ["from typing import List\n\n\ndef mean_absolute_deviation(wLy89uT: List[float]) -> float:\n    \"\"\"For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(wLy89uT) / len(wLy89uT)\n    mad = 0\n    for x in wLy89uT:\n        mad += abs(x - mean)\n    return mad / len(wLy89uT)\n\n"], ["from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    e74J63 = []\n    for n in numbers[:-1]:\n        e74J63.append(n)\n        e74J63.append(delimeter)\n    e74J63.append(numbers[-1])\n    return e74J63\n\n"], ["from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n\n    def parse_paren_group(s):\n        depth = 0\n        s77O3cr24 = 0\n        for c in s:\n            if c == \"(\":\n                depth += 1\n            elif c == \")\":\n                depth -= 1\n            elif c == \"(\":\n                s77O3cr24 += 1\n            elif c == \")\":\n                s77O3cr24 -= 1\n        return depth, s77O3cr24\n\n    def parse_paren_group_list(s):\n        depth = 0\n        s77O3cr24 = 0\n        for c in s:\n            if c == \"(\":\n                depth += 1\n            elif c == \")\":\n                depth -= 1\n            elif c == \"(\":\n                s77O3cr24 += 1\n            elif c == \")\":\n                s77O3cr24 -= 1\n        return depth, s77O3cr24\n\n    def parse_paren_group_list_2(s):\n        depth = 0\n        s77O3cr24 = 0\n        for c in s:\n            if c == \"(\":\n                depth += 1\n            elif c == \")\":\n                depth -= 1\n            elif c == \"(\":\n                s77O3cr24 += 1\n            elif c == \")\":\n                s77O3cr24 -= 1\n        return depth, s77O3cr24\n\n    def parse_paren_group_list_3(s):\n        depth = 0\n        s77O3cr24 = 0\n        for c in s:\n            if c == \"(\":\n                depth += 1\n            elif c == \")\":\n                depth -= 1\n            elif c == \"(\":\n                s77O3cr24 += 1\n            elif c == \")\":\n                s77O3cr24 -= 1\n        return depth, s77O3cr24\n\n    def parse_paren_group_list_4(s):\n        depth = 0\n        s77O3cr24 = 0\n        for c in s:\n            if c == \"(\":\n                depth += 1\n            elif c == \")\":\n                depth -= 1\n            elif c == \"(\":\n                s77O3cr24 += 1\n            elif c == \")\":\n                s77O3cr24 -= 1\n        return depth, s77O3cr24\n\n    def parse_paren_group_list_5(s):\n        depth = 0\n        s77O3cr24 = 0\n        for c in s:\n            if c == \"(\":\n                depth += 1\n            elif c == \")\":\n                depth -= 1\n            elif c == \"(\":\n                s77O3cr24 += 1\n            elif c == \")\":\n                s77O3cr24 -= 1\n        return depth, s77O3cr24\n\n    def parse_paren_group_list_6(s):\n        depth = 0\n        s77O3cr24 = 0\n        for c in s:\n            if c == \"(\":\n                depth += 1\n            elif c == \")\":\n                depth -= 1\n            elif c == \"(\":\n                s77O3cr24 += 1\n            elif c == \")\":\n                s77O3cr24 -= 1\n        return depth, s77O3cr24\n\n    def parse_paren_group_list_7(s):\n        depth = 0\n        s77O3cr24 = 0\n        for c in s:\n            if c == \"(\":\n                depth += 1\n            elif c == \")\":\n                depth -= 1\n            elif c == \"(\":\n                s77O3cr24 += 1\n            elif c == \")\":\n                s77O3cr24 -= 1\n        return depth, s77O3cr24\n\n    def parse_paren_group_list_8(s):\n        depth = 0\n        s77O3cr24 = 0\n        for c in s:\n            if c == \"(\":\n                depth"], ["from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]\n\n"], ["from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    sum_value = 0\n    prod_value = 1\n    for number in numbers:\n        sum_value += number\n        prod_value *= number\n    return sum_value, prod_value\n\n"], ["from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    tjTN4tI5q69 = None\n    result = []\n    for n in numbers:\n        if tjTN4tI5q69 is None:\n            tjTN4tI5q69 = n\n        else:\n            if n > tjTN4tI5q69:\n                tjTN4tI5q69 = n\n            result.append(tjTN4tI5q69)\n    return result\n\n"], ["def is_palindrome(ZXxmt6: str) -> bool:\n    \"\"\"Test if given string is a palindrome\"\"\"\n    return ZXxmt6 == ZXxmt6[::-1]\n\n\ndef make_palindrome(ZXxmt6: str) -> str:\n    \"\"\"Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not ZXxmt6:\n        return \"\"\n    beginning_of_suffix = 0\n    end_of_suffix = 0\n    while end_of_suffix < len(ZXxmt6):\n        if is_palindrome(ZXxmt6[end_of_suffix:end_of_suffix + 1]):\n            end_of_suffix += 1\n        else:\n            beginning_of_suffix += 1\n    return ZXxmt6[beginning_of_suffix:end_of_suffix + 1]\n\n"], ["from typing import List\n\n\ndef string_xor(a: str, x2: str) -> str:\n    \"\"\"Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\n    def xor(i, j):\n        if i == j:\n            return \"0\"\n        if i == \"0\":\n            return j\n        if j == \"0\":\n            return i\n        return \"1\"\n\n    return \"\".join(xor(a[i], x2[j]) for i, j in zip(range(len(a)), range(len(x2))))\n\n"], ["from typing import List, Optional\n\n\ndef longest(N4O2f69: List[str]) -> Optional[str]:\n    \"\"\"Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not N4O2f69:\n        return None\n    if len(N4O2f69) == 1:\n        return N4O2f69[0]\n    return max(N4O2f69, key=len)\n\n"], ["def greatest_common_divisor(a: int, t: int) -> int:\n    \"\"\"Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while t:\n        a, t = t, a % t\n    return a\n\n"], ["from typing import List\n\n\ndef all_prefixes(t4oI4k: str) -> List[str]:\n    \"\"\"Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    result = []\n    for i in range(len(t4oI4k)):\n        result.append(t4oI4k[:i])\n    return result\n\n"], ["def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n))\n"], ["def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string))\n"], ["from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    note_map = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    note_list = []\n    for note in music_string:\n        note_list.append(note_map[note])\n    return note_list\n\n"], ["def how_many_times(string: str, Hv9Xu5420: str) -> int:\n    \"\"\"Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    times = 0\n    for i in range(len(string) - len(Hv9Xu5420) + 1):\n        if string[i:i+len(Hv9Xu5420)] == Hv9Xu5420:\n            times += 1\n    return times\n"], ["from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n\n\nvalue_map = {\n    \"zero\": 0,\n    \"one\": 1,\n    \"two\": 2,\n    \"three\": 3,\n    \"four\": 4,\n    \"five\": 5,\n    \"six\": 6,\n    \"seven\": 7,\n    \"eight\": 8,\n    \"nine\": 9,\n}\n\n"], ["from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest_pair = None\n    l4V07YIy = None\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if l4V07YIy is None:\n                    l4V07YIy = abs(elem - elem2)\n                else:\n                    l4V07YIy = min(l4V07YIy, abs(elem - elem2))\n    if l4V07YIy is None:\n        return None, None\n    return numbers[closest_pair], numbers[l4V07YIy]\n"], ["from typing import List\n\n\ndef rescale_to_unit(G27rW1A: List[float]) -> List[float]:\n    \"\"\"Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_number = min(G27rW1A)\n    max_number = max(G27rW1A)\n    return [(x - min_number) / (max_number - min_number) for x in G27rW1A]\n\n"], ["from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [int(value) for value in values if isinstance(value, int)]\n\n"], ["def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n"], ["def largest_divisor(r: int) -> int:\n    \"\"\"For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in reversed(range(r)):\n        if r % i == 0:\n            return i\n    return r\n\n"], ["from typing import List\n\n\ndef factorize(t: int) -> List[int]:\n    \"\"\"Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    import math\n\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(t) + 1):\n        if t % i == 0:\n            fact.append(i)\n            t //= i\n        i += 1\n    if t > 1:\n        fact.append(t)\n    return fact\n\n"], ["from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    import collections\n\n    seen = collections.Counter()\n    for number in numbers:\n        if number in seen:\n            seen[number] -= 1\n        else:\n            seen[number] = 1\n    return list(seen.keys())\n\n"], ["def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.lower().upper()\n"], ["from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n"], ["from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n\n"], ["def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x >= 0]\n"], ["def is_prime(T):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if T < 2:\n        return False\n    for k in range(2, T - 1):\n        if T % k == 0:\n            return False\n    return True\n"], ["import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\"xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    Z12C4, end = -1.0, 1.0\n    while poly(xs, Z12C4) * poly(xs, end) > 0:\n        Z12C4 *= 2.0\n        end *= 2.0\n    while end - Z12C4 > 1e-10:\n        Z12C4 /= 2.0\n        end /= 2.0\n    return Z12C4\n\n"], ["def sort_third(p: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    p = list(p)\n    for i in range(len(p)):\n        if p[i] % 3 != 0:\n            p[i], p[i + 1], p[i + 2] = p[i + 2], p[i + 1], p[i]\n    return p\n\n"], ["def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n"], ["def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    u = l[0]\n    for e in l:\n        if e > u:\n            u = e\n    return u\n\n"], ["def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    ns = []\n    for C in range(n):\n        if C % 11 == 0 or C % 13 == 0:\n            ns.append(C)\n    return len(ns)\n"], ["def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    M7euK = l[::2]\n    odds = l[1::2]\n    M7euK.sort()\n    ans = []\n    for i in range(len(M7euK)):\n        if i % 2 == 0:\n            ans.append(M7euK[i])\n        else:\n            ans.append(odds[i - 1])\n    return ans\n\n"], ["def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"], ["def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 89\n    elif n == 6:\n        return 233\n    elif n == 7:\n        return 144\n    elif n == 8:\n        return 71\n    elif n == 9:\n        return 35\n    elif n == 10:\n        return 17\n    elif n == 11:\n        return 6\n    elif n == 12:\n        return 3\n    elif n == 13:\n        return 2\n    elif n == 14:\n        return 1\n    elif n == 15:\n        return 0\n    elif n == 16:\n        return 1\n    elif n == 17:\n        return 0\n    elif n == 18:\n        return 1\n    elif n == 19:\n        return 0\n    elif n == 20:\n        return 1\n    elif n == 21:\n        return 0\n    elif n == 22:\n        return 1\n    elif n == 23:\n        return 0\n    elif n == 24:\n        return 1\n    elif n == 25:\n        return 0\n    elif n == 26:\n        return 1\n    elif n == 27:\n        return 0\n    elif n == 28:\n        return 1\n    elif n == 29:\n        return 0\n    elif n == 30:\n        return 1\n    elif n == 31:\n        return 0\n    elif n == 32:\n        return 1\n    elif n == 33:\n        return 0\n    elif n == 34:\n        return 1\n    elif n == 35:\n        return 0\n    elif n == 36:\n        return 1\n    elif n == 37:\n        return 0\n    elif n == 38:\n        return 1\n    elif n == 39:\n        return 0\n    elif n == 40:\n        return 1\n    elif n == 41:\n        return 0\n    elif n == 42:\n        return 1\n    elif n == 43:\n        return 0\n    elif n == 44:\n        return 1\n    elif n == 45:\n        return 0\n    elif n == 46:\n        return 1\n    elif n == 47:\n        return 0\n    elif n == 48:\n        return 1\n    elif n == 49:\n        return 0\n    elif n == 50:\n        return 1\n    elif n == 51:\n        return 0\n    elif n == 52:\n        return 1\n    elif n == 53:\n        return 0\n    elif n == 54:\n        return 1\n    elif n == 55:\n        return 0\n    elif n == 56:\n        return 1\n    elif n == 57:\n        return 0\n    elif n == 58:\n        return 1\n    elif n == 59:\n        return 0\n    elif n == 60:\n        return 1\n    elif n == 61:\n        return 0\n    elif n == 62:\n        return 1\n    elif n == 63:\n        return 0\n    elif n == 64:\n        return 1\n    elif n == 65:\n        return 0\n    elif n == 66:\n        return 1\n    elif n == 67:\n        return 0\n    elif n == 68:\n        return 1\n    elif n == 69:\n        return 0\n    elif n == 70:\n        return 1\n    elif n == 71:\n        return 0\n    elif n == 72:\n       "], ["def triples_sum_to_zero(Z: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(Z)):\n        for j in range(i + 1, len(Z)):\n            for k in range(j + 1, len(Z)):\n                if Z[i] + Z[j] + Z[k] == 0:\n                    return True\n    return False\n\n"], ["def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    # Write your code here.\n    pass\n"], ["def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n\n"], ["def pairs_sum_to_zero(c):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    for i, l1 in enumerate(c):\n        for j in range(i + 1, len(c)):\n            if l1 + c[j] == 0:\n                return True\n    return False\n\n"], ["def change_base(p: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    ret = \"\"\n    while p > 0:\n        ret = str(p % base) + ret\n        p = p // base\n    return ret\n\n"], ["def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return a * h / 2\n"], ["def fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    LR5w777 = [0, 0, 2, 0]\n    if n < 4:\n        return LR5w777[n]\n    else:\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n\n"], ["def median(R: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    R = sorted(R)\n    if len(R) % 2 == 1:\n        return R[len(R)//2]\n    else:\n        return (R[len(R)//2] + R[len(R)//2 - 1]) / 2\n"], ["def is_palindrome(u28w: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    for i in range(len(u28w)):\n        if u28w[i] != u28w[len(u28w) - 1 - i]:\n            return False\n    return True\n\n"], ["def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    tT9 = 1\n    for i in range(n):\n        tT9 *= 2\n        tT9 %= p\n    return tT9\n\n"], ["def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 + ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"], ["def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiou'\n    return ''.join(char for char in text if char not in vowels)\n\n"], ["def below_threshold(l: list, Y: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for e in l:\n        if e >= Y:\n            return False\n    return True\n\n"], ["def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\n"], ["def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    if len(s0) != len(s1):\n        return False\n    for i in range(len(s0)):\n        if s0[i] != s1[i]:\n            return False\n    return True\n\n"], ["def fib(q: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if q == 0:\n        return 0\n    elif q == 1:\n        return 1\n    else:\n        return fib(q - 1) + fib(q - 2)\n\n"], ["def correct_bracketing(brackets: str):\n    \"\"\"brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    TwQwF = 0\n    for b in brackets:\n        if b == \"<\":\n            TwQwF += 1\n        elif b == \">\":\n            TwQwF -= 1\n        else:\n            return False\n    return TwQwF == 0\n\n"], ["def monotonic(G: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if G == sorted(G) or G == sorted(G, reverse=True):\n        return True\n    else:\n        return False\n"], ["def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    DZP = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                DZP.add(e1)\n    return sorted(list(DZP))\n\n"], ["def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n    if n % 23 == 0:\n        return 23\n    if n % 29 == 0:\n        return 29\n    if n % 31 == 0:\n        return 31\n    if n % 37 == 0:\n        return 37\n    if n % 41 == 0:\n        return 41\n    if n % 43 == 0:\n        return 43\n    if n % 47 == 0:\n        return 47\n    if n % 53 == 0:\n        return 53\n    if n % 59 == 0:\n        return 59\n    if n % 61 == 0:\n        return 61\n    if n % 67 == 0:\n        return 67\n    if n % 71 == 0:\n        return 71\n    if n % 73 == 0:\n        return 73\n    if n % 79 == 0:\n        return 79\n    if n % 83 == 0:\n        return 83\n    if n % 89 == 0:\n        return 89\n    if n % 97 == 0:\n        return 97\n    if n % 101 == 0:\n        return 101\n    if n % 103 == 0:\n        return 103\n    if n % 107 == 0:\n        return 107\n    if n % 109 == 0:\n        return 109\n    if n % 113 == 0:\n        return 113\n    if n % 127 == 0:\n        return 127\n    if n % 131 == 0:\n        return 131\n    if n % 137 == 0:\n        return 137\n    if n % 139 == 0:\n        return 139\n    if n % 149 == 0:\n        return 149\n    if n % 151 == 0:\n        return 151\n    if n % 157 == 0:\n        return 157\n    if n % 163 == 0:\n        return 163\n    if n % 167 == 0:\n        return 167\n    if n % 173 == 0:\n        return 173\n    if n % 179 == 0:\n        return 179\n    if n % 181 == 0:\n        return 181\n    if n % 191 == 0:\n        return 191\n    if n % 193 == 0:\n        return 193\n    if n % 197 == 0:\n        return 197\n    if n % 199 == 0:\n        return 199\n    if n % 211 == 0:\n        return 211\n    if n % 223 == 0:\n        return 223\n    if n % 227 == 0:\n        return 227\n    if n % 229 == 0:\n        return 229\n    if n % 233 == 0:\n        return 233\n    if n % 239 == 0:\n        return 2"], ["def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))\n\n"], ["def correct_bracketing(brackets: str):\n    \"\"\"brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    goHzf = 0\n    for b in brackets:\n        if b == \"(\":\n            goHzf += 1\n        elif b == \")\":\n            goHzf -= 1\n        else:\n            return False\n    return goHzf == 0\n\n"], ["def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [x * (x + 1) / 2 for x in xs]\n\n"], ["def fibfib(R: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if R == 0:\n        return 0\n    if R == 1:\n        return 0\n    if R == 2:\n        return 1\n    if R == 3:\n        return 1\n    if R == 4:\n        return 2\n    if R == 5:\n        return 3\n    if R == 6:\n        return 5\n    if R == 7:\n        return 8\n    if R == 8:\n        return 13\n    if R == 9:\n        return 21\n    if R == 10:\n        return 34\n    if R == 11:\n        return 55\n    if R == 12:\n        return 89\n    if R == 13:\n        return 144\n    if R == 14:\n        return 233\n    if R == 15:\n        return 377\n    if R == 16:\n        return 610\n    if R == 17:\n        return 987\n    if R == 18:\n        return 1597\n    if R == 19:\n        return 2584\n    if R == 20:\n        return 4181\n    if R == 21:\n        return 6765\n    if R == 22:\n        return 10946\n    if R == 23:\n        return 17711\n    if R == 24:\n        return 28657\n    if R == 25:\n        return 46368\n    if R == 26:\n        return 75025\n    if R == 27:\n        return 121393\n    if R == 28:\n        return 196418\n    if R == 29:\n        return 317811\n    if R == 30:\n        return 514229\n    if R == 31:\n        return 832040\n    if R == 32:\n        return 1346269\n    if R == 33:\n        return 2178309\n    if R == 34:\n        return 3524578\n    if R == 35:\n        return 5702887\n    if R == 36:\n        return 8991256\n    if R == 37:\n        return 14907247\n    if R == 38:\n        return 24157817\n    if R == 39:\n        return 39088169\n    if R == 40:\n        return 63245986\n    if R == 41:\n        return 95667436\n    if R == 42:\n        return 144004738\n    if R == 43:\n        return 230243969\n    if R == 44:\n        return 372334957\n    if R == 45:\n        return 610514297\n    if R == 46:\n        return 987790296\n    if R == 47:\n        return 1597717376\n    if R == 48:\n        return 2604694768\n    if R == 49:\n        return 4327620160\n    if R == 50:\n        return 6970309429\n    if R == 51:\n        return 10642186040\n    if R == 52:\n        return 16058514817\n    if R == 53:\n        return"], ["FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\n\ndef vowels_count(Y):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in Y)\n    return n_vowels\n\n"], ["def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    f = str(x)\n    if shift > len(f):\n        return f[len(f) - shift:] + f[:shift]\n    else:\n        return f[:shift] + f[shift:]\n"], ["def digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n            digitSum(\"\") => 0\n            digitSum(\"abAB\") => 131\n            digitSum(\"abcCd\") => 67\n            digitSum(\"helloE\") => 69\n            digitSum(\"woArBld\") => 131\n            digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    if s == \"\":\n        return 0\n    else:\n        return sum(ord(c) for c in s if ord(c) >= 65 and ord(c) <= 90)\n\n"], ["def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    PA6 = list()\n    for i in s.split(\" \"):\n        if i.isdigit():\n            PA6.append(int(i))\n    if len(PA6) == 1:\n        return 0\n    elif len(PA6) == 2:\n        return max(PA6) - min(PA6)\n    elif len(PA6) == 3:\n        return max(PA6) - min(PA6) - max(PA6) + min(PA6)\n    elif len(PA6) == 4:\n        return max(PA6) - min(PA6) - max(PA6) - max(PA6) + min(PA6)\n    elif len(PA6) == 5:\n        return max(PA6) - min(PA6) - max(PA6) - max(PA6) - max(PA6) + min(PA6)\n    elif len(PA6) == 6:\n        return max(PA6) - min(PA6) - max(PA6) - max(PA6) - max(PA6) - max(PA6) + min(PA6)\n    elif len(PA6) == 7:\n        return max(PA6) - min(PA6) - max(PA6) - max(PA6) - max(PA6) - max(PA6) - max(PA6) + min(PA6)\n    elif len(PA6) == 8:\n        return max(PA6) - min(PA6) - max(PA6) - max(PA6) - max(PA6) - max(PA6) - max(PA6) - max(PA6) + min(PA6)\n    elif len(PA6) == 9:\n        return max(PA6) - min(PA6) - max(PA6) - max(PA6) - max(PA6) - max(PA6) - max(PA6) - max(PA6) - max(PA6) + min(PA6)\n    elif len(PA6) == 10:\n        return max(PA6) - min(PA6) - max(PA6) - max(PA6) - max(PA6) - max(PA6) - max(PA6) - max(PA6) - max(PA6) - max(PA6) + min(PA6)\n    elif len(PA6) == 11:\n        return max(PA6) - min(PA6) - max(PA6) - max(PA6) - max(PA6) - max(PA6) - max(PA6) - max(PA6) - max(PA6) - max(PA6) - max(PA6) + min(PA6)\n    elif len(PA6) == 12:\n        return max(PA6) - min(PA6) - max(PA6) - max(PA6) - max(PA6) - max(PA6) - max(PA6) - max(PA6) - max(PA6) - max(PA6) - max(PA6) - max(PA6) + min(PA6)\n    elif len(PA6) == 13:\n        return max(PA6) - min(PA6) - max(PA6) - max(PA6) - max(PA6) - max(PA6) - max(PA6) - max(PA6) - max(PA6) -"], ["def pluck(V82):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n            Input: [4,2,3]\n            Output: [2, 1]\n            Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n            Input: [1,2,3]\n            Output: [2, 1]\n            Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n            Input: []\n            Output: []\n\n    Example 4:\n            Input: [5, 0, 3, 0, 4, 2]\n            Output: [0, 1]\n            Explanation: 0 is the smallest value, but  there are two zeros,\n                                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n            * 1 <= nodes.length <= 10000\n            * 0 <= node.value\n    \"\"\"\n    if len(V82) == 0:\n        return []\n    evens = list(filter(lambda x: x % 2 == 0, V82))\n    if len(evens) == 0:\n        return [V82[0], 0]\n    return [evens[0], evens.index(min(evens))]\n\n"], ["def search(lst):\n    \"\"\"\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n            search([4, 1, 2, 2, 3, 1]) == 2\n            search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n            search([5, 5, 4, 4, 4]) == -1\n    \"\"\"\n    frq = [0] * (max(lst) + 1)\n    for Z in lst:\n        frq[Z] += 1\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= frq[ans]:\n            ans = i\n    return ans\n\n"], ["def strange_sort_list(R3H):\n    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    \"\"\"\n    res, switch = [], True\n    while R3H:\n        res.append(min(R3H) if switch else max(R3H))\n        R3H.remove(min(R3H) if switch else max(R3H))\n        switch = not switch\n    return res\n\n"], ["def triangle_area(a, b, m):\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if a + b <= m or a + m <= b or b + m <= a:\n        return -1\n    s = (a + b + m) / 2\n    return round(s * (s - a) * (s - b) * (s - m), 2)\n\n"], ["def will_it_fly(v, w):\n    \"\"\"\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    \"\"\"\n    if sum(v) > w:\n        return False\n    i, j = 0, len(v) - 1\n    while i < j:\n        if v[i] != v[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n\n"], ["def smallest_change(h0H):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    ans = 0\n    for i in range(len(h0H) // 2):\n        if h0H[i] != h0H[len(h0H) - 1 - i]:\n            ans += 1\n    return ans\n\n"], ["def total_match(lst1, lst2):\n    \"\"\"\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    \"\"\"\n    l1 = 0\n    for t5 in lst1:\n        l1 += len(t5)\n    l2 = 0\n    for t5 in lst2:\n        l2 += len(t5)\n    if l1 == l2:\n        return lst1\n    else:\n        return lst2\n\n"], ["def is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n\n    def is_prime(n):\n        for V in range(2, n):\n            if n % V == 0:\n                return False\n        return True\n\n    for i in range(2, 101):\n        if is_prime(i):\n            return False\n    return True\n\n"], ["def is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if n == 1:\n        return x == 1\n    S938B = 1\n    for i in range(2, n + 1):\n        S938B *= x\n        S938B %= 1000000007\n    return S938B == 1\n\n"], ["def iscube(E):\n    \"\"\"\n    Write a function that takes an integer a and returns True\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    \"\"\"\n    E = abs(E)\n    if E == 0:\n        return True\n    if E == 1:\n        return False\n    if E % 2 == 0:\n        return False\n    if E % 3 == 0:\n        return False\n    if E % 5 == 0:\n        return False\n    if E % 7 == 0:\n        return False\n    if E % 11 == 0:\n        return False\n    if E % 13 == 0:\n        return False\n    if E % 17 == 0:\n        return False\n    if E % 19 == 0:\n        return False\n    if E % 23 == 0:\n        return False\n    if E % 29 == 0:\n        return False\n    if E % 31 == 0:\n        return False\n    if E % 37 == 0:\n        return False\n    if E % 41 == 0:\n        return False\n    if E % 43 == 0:\n        return False\n    if E % 47 == 0:\n        return False\n    if E % 53 == 0:\n        return False\n    if E % 59 == 0:\n        return False\n    if E % 61 == 0:\n        return False\n    if E % 67 == 0:\n        return False\n    if E % 71 == 0:\n        return False\n    if E % 73 == 0:\n        return False\n    if E % 79 == 0:\n        return False\n    if E % 83 == 0:\n        return False\n    if E % 89 == 0:\n        return False\n    if E % 97 == 0:\n        return False\n    if E % 101 == 0:\n        return False\n    if E % 103 == 0:\n        return False\n    if E % 107 == 0:\n        return False\n    if E % 109 == 0:\n        return False\n    if E % 113 == 0:\n        return False\n    if E % 127 == 0:\n        return False\n    if E % 129 == 0:\n        return False\n    if E % 131 == 0:\n        return False\n    if E % 137 == 0:\n        return False\n    if E % 139 == 0:\n        return False\n    if E % 149 == 0:\n        return False\n    if E % 151 == 0:\n        return False\n    if E % 157 == 0:\n        return False\n    if E % 163 == 0:\n        return False\n    if E % 167 == 0:\n        return False\n    if E % 173 == 0:\n        return False\n    if E % 179 == 0:\n        return False\n    if E % 181 == 0:\n        return False\n    if E % 191 == 0:\n        return False\n    if E % 193 == 0:\n        return False\n    if E % 197 == 0:\n        return False\n    if E % 199 == 0:\n        return False\n    if E % 211 == 0:\n        return False\n    if E % 223 == 0:\n        return False\n    if E % 227 == 0:\n        return False\n    if E % 229 == 0:\n        return False\n    if E % 233 == 0:\n        return False\n    if E % 239 == 0:\n        return False\n    if E % 241 == 0:\n        return False\n    if E % 251 == 0:\n        return False\n    if E % 257 == 0:\n        return False\n    if E % 263 == 0:\n        return False\n    if E % 269 == 0:\n        return False\n    if E % 271 == 0:\n        return False\n    if E % 277 == 0:\n        return False\n    if E % 281 == "], ["def hex_key(J11):\n    \"\"\"You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    primes = (\"2\", \"3\", \"5\", \"7\", \"B\", \"D\")\n    total = 0\n    for i in range(0, len(J11)):\n        if J11[i] in primes:\n            total += 1\n    return total\n\n"], ["def decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    # Your code here\n    pass\n\n"], ["def is_happy(m):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(m) < 3:\n        return False\n    for i in range(len(m) - 2):\n        if m[i] == m[i + 1] and m[i] == m[i + 2]:\n            return False\n    return True\n\n"], ["def numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n                     GPA       |    Letter grade\n                      4.0                A+\n                    > 3.7                A\n                    > 3.3                A-\n                    > 3.0                B+\n                    > 2.7                B\n                    > 2.3                B-\n                    > 2.0                C+\n                    > 1.7                C\n                    > 1.3                C-\n                    > 1.0                D+\n                    > 0.7                D\n                    > 0.0                D-\n                      0.0                E\n\n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    m9aCvlV4AC28 = []\n    for gpa in grades:\n        if gpa == 4.0:\n            m9aCvlV4AC28.append(\"A+\")\n        elif gpa > 3.7:\n            m9aCvlV4AC28.append(\"A\")\n        elif gpa > 3.3:\n            m9aCvlV4AC28.append(\"A-\")\n        elif gpa > 3.0:\n            m9aCvlV4AC28.append(\"B+\")\n        elif gpa > 2.7:\n            m9aCvlV4AC28.append(\"B\")\n        elif gpa > 2.3:\n            m9aCvlV4AC28.append(\"B-\")\n        elif gpa > 2.0:\n            m9aCvlV4AC28.append(\"C+\")\n        elif gpa > 1.7:\n            m9aCvlV4AC28.append(\"C\")\n        elif gpa > 1.3:\n            m9aCvlV4AC28.append(\"C-\")\n        elif gpa > 1.0:\n            m9aCvlV4AC28.append(\"D+\")\n        elif gpa > 0.7:\n            m9aCvlV4AC28.append(\"D\")\n        elif gpa > 0.0:\n            m9aCvlV4AC28.append(\"D-\")\n        else:\n            m9aCvlV4AC28.append(\"E\")\n    return m9aCvlV4AC28\n\n"], ["def prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    v = len(string)\n    if v == 0 or v == 1:\n        return False\n    for i in range(2, v):\n        if string[i] == string[v - i]:\n            return False\n    return True\n\n"], ["def starts_one_ends(o):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if o == 1:\n        return 1\n    else:\n        return 0 + starts_one_ends(o - 1)\n\n"], ["def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Write your code here\n    return \"\"\n"], ["def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(x for x in lst if x % 2 == 0)\n\n"], ["def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    return ''.join(sorted(s, key=ord))\n\n"], ["def get_row(lst, t):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    coords = [\n        (i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == t\n    ]\n    coords.sort(key=lambda x: x[0])\n    return [\n        (i, j) for i, j in coords if lst[i][j] == t\n    ]\n\n"], ["def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Write your code here\n    pass\n"], ["def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    d = \"abcdefghijklmnopqrstuvwxyz\"\n    ZL5 = \"\"\n    for c in s:\n        if c in d:\n            ZL5 += d[(d.index(c) + 2) % len(d)]\n        else:\n            ZL5 += c\n    return ZL5\n\n"], ["def next_smallest(O57):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n\n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    O57 = sorted(set(O57))\n    return O57[1] if O57 else None\n\n"], ["def is_bored(H):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    import re\n    return sum(1 for word in H.split() if word.startswith(\"I\"))\n\n"], ["def any_int(x, m, z):\n    \"\"\"\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    any_int(5, 2, 7) \u279e True\n\n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n\n    any_int(3.6, -2.2, 2) \u279e False\n\n\n\n    \"\"\"\n    if isinstance(x, int) and isinstance(m, int) and isinstance(z, int):\n        if (x + m == z) or (x + z == m) or (m + z == x):\n            return True\n    return False\n"], ["def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(X, chr(ord(X) + 2)) for X in vowels])\n    return \"\".join([vowels_replace[X] if X in vowels else X for X in message])\n\n"], ["def skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n\n    def isPrime(n):\n        for v in range(2, int(n ** 0.5) + 1):\n            if n % v == 0:\n                return False\n        return True\n\n    maxx = 0\n    for x in lst:\n        if isPrime(x):\n            if x > maxx:\n                maxx = x\n    return maxx\n\n"], ["def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict.keys()) == 0:\n        return False\n    else:\n        pB01S = \"start\"\n        for key in dict.keys():\n            if isinstance(key, str) == False:\n                pB01S = \"mixed\"\n                break\n            if pB01S == \"start\":\n                if key.isupper():\n                    pB01S = \"upper\"\n                else:\n                    pB01S = \"lower\"\n            if pB01S == \"mixed\":\n                if key.isupper():\n                    pB01S = \"upper\"\n                elif key.islower():\n                    pB01S = \"lower\"\n        if pB01S == \"upper\":\n            return True\n        else:\n            return False\n"], ["def count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    primes = []\n    for N in range(2, n):\n        is_prime = True\n        for j in range(2, N):\n            if N % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(N)\n    return primes\n\n"], ["def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    return a * b\n\n"], ["def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n\n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    Dr6T8 = 0\n    for i in range(0, len(s), 2):\n        if s[i] == s[i + 1]:\n            Dr6T8 += 1\n    return Dr6T8\n\n"], ["def closest_integer(fgx8U):\n    \"\"\"\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    \"\"\"\n    from math import floor, ceil\n\n    if fgx8U.count(\".\") == 1:\n        # remove trailing zeros\n        while fgx8U[-1] == \"0\":\n            fgx8U = fgx8U[:-1]\n    num = float(fgx8U)\n    if fgx8U[-2:] == \".5\":\n        if num > 0:\n            return floor(num)\n        else:\n            return ceil(num)\n    elif fgx8U[-2:] == \".0\":\n        if num > 0:\n            return floor(num)\n        else:\n            return ceil(num)\n    else:\n        if num > 0:\n            return floor(num)\n        else:\n            return ceil(num)\n\n"], ["def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    if n % 2 == 0:\n        return [n, n // 2]\n    else:\n        return [n // 2, n]\n\n"], ["def words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n\n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    if not s:\n        return []\n    SPXqdm = []\n    for letter in s:\n        if letter == \",\":\n            SPXqdm.append(letter)\n        else:\n            SPXqdm.append(letter)\n    return SPXqdm\n\n"], ["def choose_num(x, x2):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x > x2:\n        return -1\n    if x2 % 2 == 0:\n        return x2\n    else:\n        return choose_num(x + 1, x2)\n\n"], ["def rounded_avg(S, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if m < S:\n        return -1\n    summation = 0\n    for i in range(S, m + 1):\n        summation += i\n    return \"{0:b}\".format(summation // m)\n\n"], ["def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n\n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    Vt338404K0687i3e71 = []\n    for i in x:\n        if i % 2 == 0:\n            Vt338404K0687i3e71.append(i)\n    return sorted(set(Vt338404K0687i3e71))\n\n"], ["def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n                    -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n                    -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n                    -> sort arr -> [-1, 1, 55]\n                    -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n\ndic = {\n    1: \"One\",\n    2: \"Two\",\n    3: \"Three\",\n    4: \"Four\",\n    5: \"Five\",\n    6: \"Six\",\n    7: \"Seven\",\n    8: \"Eight\",\n    9: \"Nine\",\n}\n\n"], ["def f(n):\n    \"\"\"Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n    ret = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            t = 1\n            for j in range(1, i + 1):\n                t *= j\n            ret.append(t)\n        else:\n            ret.append(i)\n    return ret\n\n"], ["def even_odd_palindrome(k):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n            Input: 3\n            Output: (1, 2)\n            Explanation:\n            Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n            Input: 12\n            Output: (4, 6)\n            Explanation:\n            Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n            1. 1 <= n <= 10^3\n            2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n    def is_palindrome(k):\n        return str(k) == str(k)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, k + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_palindrome_count += 1\n            else:\n                odd_palindrome_count += 1\n\n    return even_palindrome_count, odd_palindrome_count\n\n"], ["def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n\n    def digits_sum(y):\n        neg = 1\n        if y < 0:\n            y, neg = -1 * y, -1\n        return sum(map(abs, str(y))) + neg\n\n    return sum(map(digits_sum, arr))\n\n"], ["def move_one_ball(Fe3):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n            You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                             be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                            array by performing any number of right shift operations.\n\n    \"\"\"\n    if len(Fe3) == 0:\n        return True\n    sorted_array = sorted(Fe3)\n    my_arr = []\n    min_value = min(Fe3)\n    max_value = max(Fe3)\n    for i in range(len(sorted_array)):\n        if sorted_array[i] == min_value:\n            my_arr.append(sorted_array[i])\n        else:\n            my_arr.append(sorted_array[i])\n    if len(my_arr) == len(Fe3):\n        return True\n    else:\n        return False\n"], ["def exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    odd = 0\n    even = 0\n    for J in lst1:\n        if J % 2 == 1:\n            odd += 1\n    for J in lst2:\n        if J % 2 == 0:\n            even += 1\n    if odd == 0 and even == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n"], ["def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    dict1 = {}\n    list1 = test.split(\" \")\n    t = 0\n    for I in list1:\n        if (list1.count(I) > t) and I != \"\":\n            dict1[I] = list1.count(I)\n        t = list1.count(I)\n    return dict1\n\n"], ["def reverse_delete(y, c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n    y = \"\".join([char for char in y if char not in c])\n    return y, y == y[::-1]\n"], ["def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    res = []\n    for arr in lst:\n        res.append(len(list(filter(str.isdigit, arr))))\n    return res\n\n"], ["def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    E82Fp14 = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if s < 0:\n            s = 0\n        E82Fp14 += s\n    return E82Fp14\n\n"], ["def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    # Write your code here\n    # 1. Find the max number of buckets\n    max_buckets = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_buckets += 1\n    # 2. Find the max number of units of water\n    max_units = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units += 1\n    # 3. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 4. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 5. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 6. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 7. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 8. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 9. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 10. Find the max number of units of water that can be filled\n    max_units_filled = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                max_units_filled += 1\n    # 11."], ["def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    pass\n\n"], ["def select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    result = []\n    for qIY7 in s.split():\n        n_consonants = 0\n        for i in range(0, len(qIY7)):\n            if qIY7[i].lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]:\n                n_consonants += 1\n        if n_consonants == n:\n            result.append(qIY7)\n    return result\n"], ["def get_closest_vowel(UN84):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    if len(UN84) < 3:\n        return \"\"\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"O\", \"U\", \"I\"}\n    left_side = UN84[1:]\n    right_side = UN84[:1]\n    if right_side in vowels:\n        return right_side\n    if left_side in vowels:\n        return left_side\n    return \"\"\n\n"], ["def match_parens(lst):\n    \"\"\"\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    \"\"\"\n\n    def check(s):\n        CQ8 = 0\n        for i in s:\n            if i == \"(\":\n                CQ8 = CQ8 + 1\n            else:\n                CQ8 = CQ8 - 1\n        return CQ8 == 0\n\n    return check(lst[0]) and check(lst[1])\n\n"], ["def maximum(kaj, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n            Input: arr = [-3, -4, 5], k = 3\n            Output: [-4, -3, 5]\n\n    Example 2:\n\n            Input: arr = [4, -4, 4], k = 2\n            Output: [4, 4]\n\n    Example 3:\n\n            Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n            Output: [2]\n\n    Note:\n            1. The length of the array will be in the range of [1, 1000].\n            2. The elements in the array will be in the range of [-1000, 1000].\n            3. 0 <= k <= len(arr)\n    \"\"\"\n    if k == 0:\n        return []\n    if k == 1:\n        return [arr[0]]\n    if k == 2:\n        return [arr[0], arr[1]]\n    if k == 3:\n        return [arr[0], arr[1], arr[2]]\n    if k == 4:\n        return [arr[0], arr[1], arr[2], arr[3]]\n    if k == 5:\n        return [arr[0], arr[1], arr[2], arr[3], arr[4]]\n    if k == 6:\n        return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5]]\n    if k == 7:\n        return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6]]\n    if k == 8:\n        return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7]]\n    if k == 9:\n        return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8]]\n    if k == 10:\n        return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9]]\n    if k == 11:\n        return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9], arr[10]]\n    if k == 12:\n        return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9], arr[10], arr[11]]\n    if k == 13:\n        return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9], arr[10], arr[11], arr[12]]\n    if k == 14:\n        return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9], arr[10], arr[11], arr[12], arr[13]]\n    if k == 15:\n        return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9], arr[10], arr[11], arr[12], arr[13], arr[14]]\n    if k == 16:\n        return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9], arr[10], arr[11], arr[12], arr[13], arr[14], arr[15]]\n    if k == 17:\n        return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9], arr[10"], ["def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    return sum(x for x in lst if x % 2 == 1)\n\n"], ["def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    arr.sort()\n    return sum(arr[i:i+k] for i in range(len(arr)-k+1))\n"], ["def get_odd_collatz(X):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n            1. Collatz(1) is [1].\n            2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    if X % 2 == 0:\n        odd_collatz = []\n    else:\n        odd_collatz = [X]\n    while X > 1:\n        if X % 2 == 0:\n            X = X / 2\n        else:\n            X = 3 * X + 1\n        odd_collatz.append(X)\n    return sorted(odd_collatz)\n\n"], ["def valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    try:\n        date = date.strip()\n        month, fk7, year = date.split(\"-\")\n        month, fk7, year = int(month), int(fk7), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12] and fk7 < 1 or fk7 > 31:\n            return False\n        if month in [4, 6, 9, 11] and fk7 < 1 or fk7 > 30:\n            return False\n        if month == 2 and fk7 < 1 or fk7 > 29:\n            return False\n        if month == 2 and year % 4 == 0 and fk7 < 1 or fk7 > 28:\n            return False\n        if month == 2 and year % 100 == 0 and fk7 < 1 or fk7 > 29:\n            return False\n        if month == 2 and year % 400 == 0 and fk7 < 1 or fk7 > 28:\n            return False\n        return True\n    except:\n        return False\n"], ["def split_words(b87):\n    \"\"\"\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3\n    \"\"\"\n    if \" \" in b87:\n        return b87.split()\n    elif \",\" in b87:\n        return [b87[i:i + 2] for i in range(0, len(b87), 2)]\n    else:\n        return [b87[i] for i in range(0, len(b87))]\n\n"], ["def is_sorted(lst):\n    \"\"\"\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    \"\"\"\n    count_digit = dict([(J, 0) for J in lst])\n    for J in lst:\n        count_digit[J] += 1\n    if any(count_digit[J] > 2 for J in lst):\n        return False\n    return True\n\n"], ["def intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n\n    def is_prime(Oqm):\n        if Oqm == 1 or Oqm == 0:\n            return False\n        if Oqm == 2:\n            return True\n        for i in range(2, Oqm):\n            if Oqm % i == 0:\n                return False\n        return True\n\n    if interval1[1] <= interval2[0] or interval2[1] <= interval1[0]:\n        return \"NO\"\n    if interval1[0] == interval2[0]:\n        return \"YES\"\n    if interval1[1] - interval2[0] == 1:\n        return \"YES\"\n    if is_prime(interval1[1] - interval2[0]):\n        return \"YES\"\n    return \"NO\"\n\n"], ["def prod_signs(aor):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    if not aor:\n        return None\n    return sum(a * abs(i) for a, i in zip(aor, aor))\n\n"], ["def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n            Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n            Output: [1, 2, 1]\n\n            Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n            Output: [1]\n    \"\"\"\n    n = len(grid)\n    val = n * n + 1\n    for W in range(n):\n        for j in range(n):\n            if grid[W][j] == 1:\n                temp = []\n                if W != 0:\n                    temp.append(grid[W - 1][j])\n                if j != 0:\n                    temp.append(grid[W][j - 1])\n                if W != n - 1:\n                    temp.append(grid[W + 1][j])\n                if j != n - 1:\n                    temp.append(grid[W][j + 1])\n                val = min(val, sum(temp))\n    return val\n\n"], ["def tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n               = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for N in range(2, n + 1):\n        my_tri.append(my_tri[N - 1] + my_tri[N - 2] + my_tri[N - 3])\n    return my_tri\n\n"], ["def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    Ks1Af56 = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit % 2 == 1:\n            odd_count += 1\n    if odd_count == 0:\n        return 0\n    else:\n        return Ks1Af56 * digits(odd_count)\n\n"], ["def is_nested(string):\n    \"\"\"\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    \"\"\"\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for u in range(len(string)):\n        if string[u] == \"[\":\n            opening_bracket_index.append(u)\n        else:\n            closing_bracket_index.append(u)\n    closing_bracket_index.reverse()\n    cnt = 0\n    for i in range(len(opening_bracket_index)):\n        if opening_bracket_index[i] == closing_bracket_index[i]:\n            cnt += 1\n    return cnt >= 2\n\n"], ["def sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n\n\n    \"\"\"\n    import math\n\n    e8GTrLR = 0\n    for i in lst:\n        e8GTrLR += i ** 2\n    return math.ceil(e8GTrLR)\n\n"], ["def check_if_last_char_is_a_letter(txt):\n    \"\"\"\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False\n    \"\"\"\n    last_char = txt[-1]\n    if last_char.isalpha() and last_char not in \" \":\n        return True\n    return False\n\n"], ["def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    ind = -1\n    B = 1\n    while B < len(arr):\n        if arr[B] >= arr[B+1]:\n            ind = B\n            B += 1\n        else:\n            B += 1\n    return ind\n\n"], ["def largest_smallest_integers(lst):\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    \"\"\"\n    smallest = list(filter(lambda J: J < 0, lst))\n    largest = list(filter(lambda J: J >= 0, lst))\n    if len(smallest) == 0 and len(largest) == 0:\n        return None, None\n    elif len(smallest) == 0:\n        return largest, smallest[0]\n    elif len(largest) == 0:\n        return smallest, largest[0]\n    else:\n        return max(smallest), min(largest)\n\n"], ["def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    w3cUW9, temp_b = a, b\n    if isinstance(w3cUW9, str):\n        w3cUW9 = w3cUW9.replace(\",\", \".\")\n        temp_b = float(w3cUW9)\n    if isinstance(temp_b, str):\n        temp_b = temp_b.replace(\",\", \".\")\n        w3cUW9 = float(temp_b)\n    if w3cUW9 > temp_b:\n        return w3cUW9\n    else:\n        return None\n\n"], ["def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    sum_of_even = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0 and i % 4 == 0:\n            sum_of_even += i\n    return sum_of_even == n\n"], ["def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    N966uP = 1\n    special_fact = 1\n    for i in range(1, n + 1):\n        special_fact *= i\n        N966uP *= i\n    return special_fact * N966uP\n\n"], ["def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    new_text = \"\"\n    A = 0\n    start, end = 0, 0\n    while A < len(text):\n        if text[A] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\" + text[A]\n            elif end - start > 0:\n                new_text += text[A]\n            start = end\n            end = 0\n        A += 1\n    return new_text\n\n"], ["def file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    suf = [\"txt\", \"exe\", \"dll\"]\n    Pq8 = file_name.split(sep=\".\")\n    if len(Pq8) != 2:\n        return \"No\"\n    if not Pq8[1] in suf:\n        return \"No\"\n    if len(Pq8[0]) == 0:\n        return \"No\"\n    if Pq8[0][0].isalpha():\n        return \"No\"\n    return \"Yes\"\n"], ["def sum_squares(lst):\n    \"\"\" \"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    result = []\n    for Q in range(len(lst)):\n        if Q % 3 == 0:\n            result.append(lst[Q] ** 2)\n        elif Q % 4 == 0:\n            result.append(lst[Q] ** 3)\n        else:\n            result.append(lst[Q])\n    return sum(result)\n\n"], ["def words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n            Input: sentence = \"This is a test\"\n            Output: \"is\"\n\n    Example 2:\n            Input: sentence = \"lets go for swimming\"\n            Output: \"go for\"\n\n    Constraints:\n            * 1 <= len(sentence) <= 100\n            * sentence contains only letters\n    \"\"\"\n    new_lst = []\n    for M242 in sentence.split():\n        flg = 0\n        if len(M242) == 1:\n            flg = 1\n        for M242 in M242:\n            if M242.isalpha():\n                flg = 1\n        if flg == 1:\n            new_lst.append(M242)\n    return \" \".join(new_lst)\n\n"], ["def simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denominator = int(b) * int(d)\n    if numerator == denominator:\n        return True\n    else:\n        return False\n\n"], ["def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def digits_sum(l):\n        neg = 1\n        if l < 0:\n            l, neg = -1 * l, -1\n        s = 0\n        while l:\n            s += l % 10\n            l //= 10\n        return s * neg\n\n    nums.sort(key=lambda x: digits_sum(x))\n    return nums\n\n"], ["def specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1\n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    count = 0\n    for Xp8 in nums:\n        if Xp8 > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            if Xp8 % 10 in odd_digits:\n                count += 1\n    return count\n\n"], ["def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n            For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n            Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n            Input: n = 5\n            Output: 1\n            Explanation:\n            a = [1, 3, 7, 13, 21]\n            The only valid triple is (1, 7, 13).\n    \"\"\"\n    A = [G * G - G + 1 for G in range(1, n + 1)]\n    ans = []\n    for G in range(n):\n        for j in range(G + 1, n):\n            for k in range(j + 1, n):\n                if A[G] % 3 == 0 and A[j] % 3 == 0 and A[k] % 3 == 0:\n                    ans.append(A[G] + A[j] + A[k])\n    return len(ans)\n\n"], ["def bf(planet1, planet2):\n    \"\"\"\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    \"\"\"\n    U9uJe1VNK75X = (\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\",\n    )\n    if planet1 not in U9uJe1VNK75X or planet2 not in U9uJe1VNK75X or planet1 == planet2:\n        return ()\n    planet1_index = U9uJe1VNK75X.index(planet1)\n    planet2_index = U9uJe1VNK75X.index(planet2)\n    if planet1_index > planet2_index:\n        planet1_index, planet2_index = planet2_index, planet1_index\n    return U9uJe1VNK75X[planet1_index:planet2_index + 1]\n\n"], ["def sorted_list_sum(NE4):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    NE4.sort()\n    new_lst = []\n    for i in NE4:\n        if len(i) % 2 == 1:\n            new_lst.append(i)\n    return new_lst\n\n"], ["def x_or_y(q, x, y):\n    \"\"\"A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n\n    \"\"\"\n    if q == 1:\n        return y\n    for i in range(2, q):\n        if q % i == 0:\n            return 0\n    return x\n"], ["def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    # TODO: Write your code here.\n    return 0\n"], ["def compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    pass\n"], ["def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    strong = extensions[0]\n    my_val = len([S for S in extensions[0] if S.isalpha() and S.isupper()]) - len(\n        [S for S in extensions[0] if S.isalpha() and S.islower()]\n    )\n    for s in extensions:\n        val = len([S for S in s if S.isalpha() and S.isupper()]) - len(\n            [S for S in s if S.isalpha() and S.islower()]\n        )\n        if val > my_val:\n            strong = s\n    return class_name + \".\" + strong\n"], ["def cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    W = len(b)\n    pat = b + b\n    for i in range(len(a) - W + 1):\n        if a[i:i+W] == pat:\n            return True\n    return False\n\n"], ["def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n           even_odd_count(-12) ==> (1, 1)\n           even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    Yt180kIH3 = 0\n    for i in str(abs(num)):\n        if int(i) % 2 == 0:\n            even_count += 1\n        else:\n            Yt180kIH3 += 1\n    return (even_count, Yt180kIH3)\n\n"], ["def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"]\n    I = 12\n    res = \"\"\n    while number:\n        res = num[number % 10] + res\n        number = number // 10\n    return res.lower()\n\n"], ["def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Your code here\n    return False\n"], ["def find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    # Write your code here\n    max_count = 0\n    max_word = \"\"\n    for word in words:\n        count = 0\n        for char in word:\n            count += 1\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n"], ["def eat(number, VixC, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n            the number of carrots that you have eaten.\n    @need : integer\n            the number of carrots that you need to eat.\n    @remaining : integer\n            the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    if VixC <= remaining:\n        return [number + VixC, remaining - VixC]\n    else:\n        return [number, remaining]\n"], ["def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( // )\n    Exponentiation ( ** )\n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n            The length of operator list is equal to the length of operand list minus one.\n            Operand is a list of of non-negative integers.\n            Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    C17x66Yg3w = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        C17x66Yg3w = oprt + C17x66Yg3w + str(oprn)\n    return eval(C17x66Yg3w)\n\n"], ["def solve(s2):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    flg = 0\n    idx = 0\n    new_str = list(s2)\n    for i in s2:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n            idx += 1\n        else:\n            new_str[idx] = i\n            idx += 1\n    if flg == 0:\n        new_str.reverse()\n    return \"\".join(new_str)\n\n"], ["def string_to_md5(Z443):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    import hashlib\n    return hashlib.md5(Z443.encode()).hexdigest()\n\n"], ["def generate_integers(a, g):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    lower = max(2, min(a, g))\n    upper = min(8, max(a, g))\n    return [i for i in range(lower, upper + 1) if i % 2 == 0]\n\n"]]