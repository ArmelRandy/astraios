[["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) <= threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        double diff = 0;\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            diff = Math.abs(numbers.get(i) - numbers.get(i + 1));\n            if (diff > threshold) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) <= threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) > threshold) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) <= threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) <= threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        double min = numbers.get(0);\n        double max = numbers.get(0);\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) < min) {\n                min = numbers.get(i);\n            }\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n        }\n        return Math.abs(max - min) > threshold;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) <= threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) <= threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) <= threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) <= threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        double min = numbers.get(0);\n        double max = numbers.get(0);\n        for (Double num : numbers) {\n            if (num < min) {\n                min = num;\n            }\n            if (num > max) {\n                max = num;\n            }\n        }\n        double diff = max - min;\n        double diffSq = diff * diff;\n        for (Double num : numbers) {\n            double diff2 = num - min;\n            double diff2Sq = diff2 * diff2;\n            if (diff2Sq > diffSq + threshold * threshold) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) <= threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i + 1) - numbers.get(i)) > threshold) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        int i = 0;\n        while (i < numbers.size() - 1) {\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) > threshold) {\n                return true;\n            }\n            i++;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) <= threshold) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        double min = numbers.get(0);\n        double max = numbers.get(0);\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) < min) {\n                min = numbers.get(i);\n            }\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n        }\n        double diff = max - min;\n        for (int i = 1; i < numbers.size(); i++) {\n            if (Math.abs(numbers.get(i) - min) > threshold * diff) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        double min = numbers.get(0);\n        double max = numbers.get(0);\n        for (Double number : numbers) {\n            if (number < min) {\n                min = number;\n            }\n            if (number > max) {\n                max = number;\n            }\n        }\n        double diff = max - min;\n        for (Double number : numbers) {\n            if (Math.abs(number - min) <= threshold && Math.abs(number - max) <= threshold) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) > threshold) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n        if (numbers.size() < 2) {\n            return false;\n        }\n        Collections.sort(numbers);\n        for (int i = 1; i < numbers.size(); i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i - 1)) > threshold) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    result.add(new String(stack.toArray(new Character[0])));\n                    stack.pop();\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    stack.push(c);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        while (!stack.isEmpty()) {\n            result.add(stack.pop().toString());\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<String>();\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.empty() || stack.peek() != '(') {\n                    result.add(paren_string.substring(0, i + 1));\n                }\n                stack.pop();\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    result.add(String.valueOf(stack.pop()));\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    result.add(new String(stack.toArray()));\n                    stack.pop();\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.peek() == '(') {\n                    stack.pop();\n                } else {\n                    result.add(new String(stack.toArray()));\n                    stack.pop();\n                }\n            }\n        }\n        if (!stack.isEmpty()) {\n            result.add(new String(stack.toArray()));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        String[] paren_groups = paren_string.split(\" \");\n        for (String paren_group : paren_groups) {\n            if (paren_group.startsWith(\"(\")) {\n                result.add(paren_group);\n            } else {\n                result.add(0, paren_group);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        // Write your code here\n        List<String> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    result.add(\"()\");\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(\"\");\n                } else {\n                    result.add(new String(stack.pop()));\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<String>();\n        String[] tokens = paren_string.split(\" \");\n        for (String token : tokens) {\n            if (token.equals(\"(\")) {\n                result.add(\"(\");\n            } else if (token.equals(\")\")) {\n                if (result.size() > 0 && result.get(result.size() - 1).equals(\"(\")) {\n                    result.remove(result.size() - 1);\n                } else {\n                    result.add(\")\");\n                }\n            } else {\n                result.add(token);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<String>();\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    result.add(paren_string.substring(0, i + 1));\n                    stack.pop();\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        String[] tokens = paren_string.split(\" \");\n        for (String token : tokens) {\n            if (token.equals(\"(\")) {\n                result.add(\"(\");\n            } else if (token.equals(\")\")) {\n                if (result.size() > 0 && result.get(result.size() - 1).equals(\"(\")) {\n                    result.remove(result.size() - 1);\n                } else {\n                    result.add(\")\");\n                }\n            } else {\n                result.add(token);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        String[] paren_groups = paren_string.split(\"\\\\(\");\n        for (String paren_group : paren_groups) {\n            String[] paren_group_parts = paren_group.split(\"\\\\)\");\n            for (String paren_group_part : paren_group_parts) {\n                result.add(paren_group_part);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<String>();\n        Stack<Character> stack = new Stack<Character>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    stack.push(c);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        while (!stack.isEmpty()) {\n            result.add(stack.pop().toString());\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<String>();\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(\"\");\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        String[] tokens = paren_string.split(\" \");\n        for (String token : tokens) {\n            if (token.equals(\"(\")) {\n                result.add(\"(\");\n            } else if (token.equals(\")\")) {\n                if (result.size() > 0) {\n                    result.remove(result.size() - 1);\n                } else {\n                    result.add(\")\");\n                }\n            } else {\n                result.add(token);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<String>();\n        Stack<Character> stack = new Stack<Character>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    result.add(String.valueOf(stack.pop()));\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    result.add(String.valueOf(c));\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for(char c : paren_string.toCharArray()) {\n            if(c == '(') {\n                stack.push(c);\n            } else if(c == ')') {\n                if(stack.isEmpty() || stack.peek() != '(') {\n                    result.add(\"(\" + c + \")\");\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n        List<String> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    result.add(String.valueOf(stack.pop()));\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int intPart = (int) number;\n        double decimalPart = number - intPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int intPart = (int)number;\n        double decimalPart = number - intPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        double intPart = Math.floor(number);\n        double decPart = number - intPart;\n        return decPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int intPart = (int) number;\n        double decimalPart = number - intPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int intPart = (int) number;\n        double decimalPart = number - intPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int intPart = (int) number;\n        double decimalPart = number - intPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int intPart = (int) number;\n        double decimalPart = number - intPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int intPart = (int) number;\n        double decimalPart = number - intPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int intPart = (int) number;\n        double decimalPart = number - intPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int intPart = (int) number;\n        double decimalPart = number - intPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int intPart = (int) number;\n        double decimalPart = number - intPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int intPart = (int) number;\n        double decimalPart = number - intPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int intPart = (int) number;\n        double decimalPart = number - intPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        double integerPart = Math.floor(number);\n        double decimalPart = number - integerPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int intPart = (int) number;\n        double decimalPart = number - intPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int intPart = (int) number;\n        double decimalPart = number - intPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int intPart = (int) number;\n        double decimalPart = number - intPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int intPart = (int) number;\n        double decimalPart = number - intPart;\n        return decimalPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        double intPart = Math.floor(number);\n        double decPart = number - intPart;\n        return decPart;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n        int intPart = (int) number;\n        double decimalPart = number - intPart;\n        return decimalPart;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int sum = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            sum += operations.get(i);\n        }\n        return sum < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int sum = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            sum += operations.get(i);\n        }\n        return sum < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int sum = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            sum += operations.get(i);\n        }\n        return sum < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            balance += operations.get(i);\n        }\n        return balance < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int sum = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            sum += operations.get(i);\n        }\n        return sum < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            balance += operations.get(i);\n        }\n        return balance < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int sum = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            sum += operations.get(i);\n        }\n        return sum < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int sum = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            sum += operations.get(i);\n        }\n        return sum < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int sum = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            sum += operations.get(i);\n        }\n        return sum < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            balance += operations.get(i);\n        }\n        return balance < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            balance += operations.get(i);\n        }\n        return balance < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int sum = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            sum += operations.get(i);\n        }\n        return sum < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int sum = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            sum += operations.get(i);\n        }\n        return sum < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int sum = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            sum += operations.get(i);\n        }\n        return sum < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            balance += operations.get(i);\n        }\n        return balance < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            balance += operations.get(i);\n        }\n        return balance < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int sum = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            sum += operations.get(i);\n        }\n        return sum < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            balance += operations.get(i);\n        }\n        return balance < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            balance += operations.get(i);\n        }\n        return balance < 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n        int balance = 0;\n        for (int i = 0; i < operations.size(); i++) {\n            balance += operations.get(i);\n        }\n        return balance < 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0;\n        double mean = 0;\n        for (double number : numbers) {\n            sum += number;\n        }\n        mean = sum / numbers.size();\n        double mad = 0;\n        for (double number : numbers) {\n            mad += Math.abs(number - mean);\n        }\n        return mad / numbers.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0;\n        double mean = 0;\n        for (Double num : numbers) {\n            sum += num;\n        }\n        mean = sum / numbers.size();\n        double mad = 0;\n        for (Double num : numbers) {\n            mad += Math.abs(num - mean);\n        }\n        return mad / numbers.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0.0;\n        double mean = 0.0;\n        for (Double number : numbers) {\n            sum += number;\n            mean += number;\n        }\n        mean /= numbers.size();\n        double mad = 0.0;\n        for (Double number : numbers) {\n            mad += Math.abs(number - mean);\n        }\n        mad /= numbers.size();\n        return mad;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0;\n        double mean = 0;\n        for (Double num : numbers) {\n            sum += num;\n            mean += num;\n        }\n        mean /= numbers.size();\n        double mad = 0;\n        for (Double num : numbers) {\n            mad += Math.abs(num - mean);\n        }\n        mad /= numbers.size();\n        return mad;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0.0;\n        double mean = 0.0;\n        for (Double number : numbers) {\n            sum += number;\n            mean += number;\n        }\n        mean /= numbers.size();\n        double mad = 0.0;\n        for (Double number : numbers) {\n            mad += Math.abs(number - mean);\n        }\n        mad /= numbers.size();\n        return mad;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0.0;\n        double mean = 0.0;\n        for (Double num : numbers) {\n            sum += num;\n            mean += num;\n        }\n        mean /= numbers.size();\n        double mad = 0.0;\n        for (Double num : numbers) {\n            mad += Math.abs(num - mean);\n        }\n        mad /= numbers.size();\n        return mad;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0.0;\n        for (Double num : numbers) {\n            sum += Math.abs(num - mean());\n        }\n        return sum / numbers.size();\n    }\n\n    /**\n    Calculate the mean of a list of numbers.\n    >>> mean(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    2.0\n    */\n    public double mean(List<Double> numbers) {\n        double sum = 0.0;\n        for (Double num : numbers) {\n            sum += num;\n        }\n        return sum / numbers.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0.0;\n        for (Double number : numbers) {\n            mean += number;\n        }\n        mean /= numbers.size();\n        double mad = 0.0;\n        for (Double number : numbers) {\n            mad += Math.abs(number - mean);\n        }\n        mad /= numbers.size();\n        return mad;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0;\n        for (Double number : numbers) {\n            mean += number;\n        }\n        mean /= numbers.size();\n        double mad = 0;\n        for (Double number : numbers) {\n            mad += Math.abs(number - mean);\n        }\n        mad /= numbers.size();\n        return mad;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0;\n        double mean = 0;\n        for (Double num : numbers) {\n            sum += num;\n            mean += num;\n        }\n        mean /= numbers.size();\n        double mad = 0;\n        for (Double num : numbers) {\n            mad += Math.abs(num - mean);\n        }\n        mad /= numbers.size();\n        return mad;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0.0;\n        double mean = 0.0;\n        for (Double num : numbers) {\n            sum += num;\n            mean += num;\n        }\n        mean /= numbers.size();\n        double mad = 0.0;\n        for (Double num : numbers) {\n            mad += Math.abs(num - mean);\n        }\n        mad /= numbers.size();\n        return mad;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0.0;\n        for (Double num : numbers) {\n            sum += Math.abs(num - mean());\n        }\n        return sum / numbers.size();\n    }\n\n    /**\n    Calculate the mean of the given list of numbers.\n    >>> mean(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    2.0\n     */\n    public double mean(List<Double> numbers) {\n        double sum = 0.0;\n        for (Double num : numbers) {\n            sum += num;\n        }\n        return sum / numbers.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0;\n        for (Double number : numbers) {\n            mean += number;\n        }\n        mean /= numbers.size();\n        double mad = 0;\n        for (Double number : numbers) {\n            mad += Math.abs(number - mean);\n        }\n        mad /= numbers.size();\n        return mad;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0.0;\n        double mean = 0.0;\n        for (double num : numbers) {\n            sum += num;\n            mean += num;\n        }\n        mean /= numbers.size();\n        double mad = 0.0;\n        for (double num : numbers) {\n            mad += Math.abs(num - mean);\n        }\n        mad /= numbers.size();\n        return mad;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0;\n        for (Double number : numbers) {\n            mean += number;\n        }\n        mean /= numbers.size();\n        double mad = 0;\n        for (Double number : numbers) {\n            mad += Math.abs(number - mean);\n        }\n        mad /= numbers.size();\n        return mad;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0.0;\n        double mean = 0.0;\n        for (Double number : numbers) {\n            sum += number;\n            mean += number;\n        }\n        mean /= numbers.size();\n        double mad = 0.0;\n        for (Double number : numbers) {\n            mad += Math.abs(number - mean);\n        }\n        mad /= numbers.size();\n        return mad;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0;\n        for (Double number : numbers) {\n            mean += number;\n        }\n        mean /= numbers.size();\n        double sum = 0;\n        for (Double number : numbers) {\n            sum += Math.abs(number - mean);\n        }\n        return sum / numbers.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0;\n        for (Double num : numbers) {\n            mean += num;\n        }\n        mean /= numbers.size();\n        double mad = 0;\n        for (Double num : numbers) {\n            mad += Math.abs(num - mean);\n        }\n        mad /= numbers.size();\n        return mad;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double sum = 0;\n        double mean = 0;\n        for (Double number : numbers) {\n            sum += number;\n            mean += number;\n        }\n        mean /= numbers.size();\n        double mad = 0;\n        for (Double number : numbers) {\n            mad += Math.abs(number - mean);\n        }\n        mad /= numbers.size();\n        return mad;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n        double mean = 0.0;\n        double sum = 0.0;\n        for (Double number : numbers) {\n            mean += number;\n            sum += number * number;\n        }\n        mean /= numbers.size();\n        sum /= numbers.size();\n        double mad = 0.0;\n        for (Double number : numbers) {\n            mad += Math.abs(number - mean);\n        }\n        mad /= numbers.size();\n        return mad;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i != numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i == 0) {\n                result.add(numbers.get(i));\n            } else if (i == numbers.size() - 1) {\n                result.add(delimiter);\n                result.add(numbers.get(i));\n            } else {\n                result.add(numbers.get(i));\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i != numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i == 0) {\n                result.add(numbers.get(i));\n            } else if (i == numbers.size() - 1) {\n                result.add(delimiter);\n                result.add(numbers.get(i));\n            } else {\n                result.add(numbers.get(i));\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i != numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i != numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i == 0) {\n                result.add(numbers.get(i));\n            } else if (i == numbers.size() - 1) {\n                result.add(delimiter);\n                result.add(numbers.get(i));\n            } else {\n                result.add(numbers.get(i));\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i + 1 < numbers.size()) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i == 0) {\n                result.add(numbers.get(i));\n            } else if (i == numbers.size() - 1) {\n                result.add(delimiter);\n                result.add(numbers.get(i));\n            } else {\n                result.add(numbers.get(i));\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i != numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i == 0) {\n                result.add(numbers.get(i));\n            } else if (i % 2 == 0) {\n                result.add(delimiter);\n                result.add(numbers.get(i));\n            } else {\n                result.add(numbers.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i != numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i != numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i != numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i == 0) {\n                result.add(numbers.get(i));\n            } else if (i == numbers.size() - 1) {\n                result.add(delimiter);\n                result.add(numbers.get(i));\n            } else {\n                result.add(numbers.get(i));\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i != 0 && i % 2 == 0) {\n                result.add(delimiter);\n            }\n            result.add(numbers.get(i));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i + 1 < numbers.size()) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i != numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i));\n            if (i != numbers.size() - 1) {\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (i == 0) {\n                result.add(numbers.get(i));\n            } else if (i == numbers.size() - 1) {\n                result.add(delimiter);\n                result.add(numbers.get(i));\n            } else {\n                result.add(numbers.get(i));\n                result.add(delimiter);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Integer> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(i);\n            } else if (c == ')') {\n                int top = stack.pop();\n                if (top == i) {\n                    result.add(stack.size());\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    result.add(0, -1);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<Integer>();\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0, 0);\n                } else {\n                    int level = 1;\n                    while (!stack.isEmpty() && stack.peek() != '(') {\n                        level++;\n                        stack.pop();\n                    }\n                    result.add(level);\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    result.add(0, -1);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0, 0);\n                } else {\n                    int depth = 1;\n                    while (!stack.isEmpty() && stack.peek() != '(') {\n                        depth++;\n                        stack.pop();\n                    }\n                    result.add(depth);\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    result.add(0, -1);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0, 0);\n                } else {\n                    result.add(0, stack.pop());\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<Integer>();\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0, 0);\n                } else {\n                    int level = 1;\n                    while (!stack.isEmpty() && stack.peek() != '(') {\n                        stack.pop();\n                        level++;\n                    }\n                    result.add(level);\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0, -1);\n                } else {\n                    result.add(stack.pop());\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0, 0);\n                } else {\n                    result.add(stack.pop());\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0);\n                } else {\n                    result.add(stack.pop());\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Integer> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(0);\n            } else if (c == ')') {\n                int level = stack.pop();\n                if (level == 0) {\n                    result.add(0);\n                } else {\n                    result.add(level);\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<Integer>();\n        Stack<Integer> stack = new Stack<Integer>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(i);\n            } else if (c == ')') {\n                int top = stack.pop();\n                if (top == i) {\n                    result.add(stack.size());\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0, 0);\n                } else {\n                    result.add(stack.pop());\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Integer> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(i);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0, 0);\n                } else {\n                    int top = stack.pop();\n                    int level = 1;\n                    while (top > 0 && stack.peek() > top) {\n                        level++;\n                        top = stack.pop();\n                    }\n                    result.add(level);\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    result.add(0, -1);\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<Integer>();\n        Stack<Character> stack = new Stack<Character>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0, 0);\n                } else {\n                    result.add(stack.pop());\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return null;\n                }\n                stack.pop();\n            }\n        }\n        while (!stack.isEmpty()) {\n            result.add(stack.pop().equals('(') ? 1 : 0);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Character> stack = new Stack<>();\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty()) {\n                    result.add(0, 0);\n                } else {\n                    int level = 1;\n                    while (!stack.isEmpty() && stack.peek() != '(') {\n                        level++;\n                        stack.pop();\n                    }\n                    result.add(level);\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n        List<Integer> result = new ArrayList<>();\n        Stack<Integer> stack = new Stack<>();\n        for (int i = 0; i < paren_string.length(); i++) {\n            char c = paren_string.charAt(i);\n            if (c == '(') {\n                stack.push(i);\n            } else if (c == ')') {\n                int top = stack.pop();\n                if (top != -1) {\n                    int left = stack.peek();\n                    int level = i - left + 1;\n                    result.add(level);\n                }\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int i : numbers) {\n            sum += i;\n            product *= i;\n        }\n        return Arrays.asList(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n        return Arrays.asList(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int num : numbers) {\n            sum += num;\n            product *= num;\n        }\n        return List.of(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n        return List.of(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int num : numbers) {\n            sum += num;\n            product *= num;\n        }\n        return List.of(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int i : numbers) {\n            sum += i;\n            product *= i;\n        }\n        return List.of(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int i : numbers) {\n            sum += i;\n            product *= i;\n        }\n        return List.of(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int i : numbers) {\n            sum += i;\n            product *= i;\n        }\n        return List.of(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n        return List.of(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int num : numbers) {\n            sum += num;\n            product *= num;\n        }\n        return Arrays.asList(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int i : numbers) {\n            sum += i;\n            product *= i;\n        }\n        return Arrays.asList(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int i : numbers) {\n            sum += i;\n            product *= i;\n        }\n        return Arrays.asList(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int i : numbers) {\n            sum += i;\n            product *= i;\n        }\n        return Arrays.asList(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int i : numbers) {\n            sum += i;\n            product *= i;\n        }\n        return List.of(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int i : numbers) {\n            sum += i;\n            product *= i;\n        }\n        return Arrays.asList(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int i : numbers) {\n            sum += i;\n            product *= i;\n        }\n        return Arrays.asList(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int i : numbers) {\n            sum += i;\n            product *= i;\n        }\n        return Arrays.asList(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int num : numbers) {\n            sum += num;\n            product *= num;\n        }\n        return Arrays.asList(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int i : numbers) {\n            sum += i;\n            product *= i;\n        }\n        return Arrays.asList(sum, product);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n        int sum = 0;\n        int product = 1;\n        for (int number : numbers) {\n            sum += number;\n            product *= number;\n        }\n        return List.of(sum, product);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int n = numbers.size();\n        int[] dp = new int[n];\n        dp[0] = numbers.get(0);\n        for (int i = 1; i < n; i++) {\n            dp[i] = Math.max(dp[i - 1], numbers.get(i));\n        }\n        for (int i = n - 1; i >= 0; i--) {\n            result.add(dp[i]);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> rollingMax = new ArrayList<>();\n        int n = numbers.size();\n        int max = numbers.get(0);\n        for (int i = 1; i < n; i++) {\n            int current = numbers.get(i);\n            if (current > max) {\n                max = current;\n            }\n            rollingMax.add(max);\n        }\n        return rollingMax;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int n = numbers.size();\n        int[] max = new int[n];\n        for (int i = 0; i < n; i++) {\n            max[i] = numbers.get(i);\n        }\n        for (int i = n - 1; i >= 0; i--) {\n            int maxIndex = 0;\n            for (int j = 0; j < i; j++) {\n                if (numbers.get(j) > max[j]) {\n                    maxIndex = j;\n                    break;\n                }\n            }\n            result.add(max[maxIndex]);\n            max[maxIndex] = numbers.get(i);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int n = numbers.size();\n        int[] max = new int[n];\n        for (int i = 0; i < n; i++) {\n            max[i] = numbers.get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            max[i] = Math.max(max[i - 1], numbers.get(i));\n        }\n        for (int i = n - 1; i >= 0; i--) {\n            result.add(max[i]);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> rollingMax = new ArrayList<>();\n        int n = numbers.size();\n        int[] max = new int[n];\n        for (int i = 0; i < n; i++) {\n            max[i] = numbers.get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            max[i] = Math.max(max[i - 1], numbers.get(i));\n        }\n        for (int i = n - 2; i >= 0; i--) {\n            rollingMax.add(max[i]);\n        }\n        return rollingMax;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int max = Integer.MIN_VALUE;\n        for (int num : numbers) {\n            if (num > max) {\n                max = num;\n            }\n            result.add(max);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int max = 0;\n        int n = numbers.size();\n        for (int i = 0; i < n; i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n            result.add(max);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int n = numbers.size();\n        int[] max = new int[n];\n        int[] min = new int[n];\n        for (int i = 0; i < n; i++) {\n            max[i] = numbers.get(i);\n            min[i] = numbers.get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            max[i] = Math.max(max[i - 1], numbers.get(i));\n            min[i] = Math.min(min[i - 1], numbers.get(i));\n        }\n        for (int i = n - 1; i >= 0; i--) {\n            result.add(max[i]);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int n = numbers.size();\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int m = 0;\n        while (i < n) {\n            while (j < n && numbers.get(j) <= numbers.get(i)) {\n                j++;\n            }\n            if (j == n) {\n                result.add(numbers.get(i));\n                i++;\n            } else {\n                m = numbers.get(j);\n                while (k < n && numbers.get(k) <= m) {\n                    k++;\n                }\n                result.add(m);\n                j = k;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int n = numbers.size();\n        int i = 0;\n        while (i < n) {\n            int j = i + 1;\n            int max = numbers.get(i);\n            while (j < n && numbers.get(j) > max) {\n                max = numbers.get(j);\n                j++;\n            }\n            result.add(max);\n            i = j;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int n = numbers.size();\n        int[] max = new int[n];\n        for (int i = 0; i < n; i++) {\n            max[i] = numbers.get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            max[i] = Math.max(max[i - 1], numbers.get(i));\n        }\n        for (int i = n - 2; i >= 0; i--) {\n            result.add(max[i]);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int n = numbers.size();\n        int[] dp = new int[n];\n        dp[0] = numbers.get(0);\n        for (int i = 1; i < n; i++) {\n            dp[i] = Math.max(dp[i - 1], numbers.get(i));\n        }\n        for (int i = n - 1; i >= 0; i--) {\n            result.add(dp[i]);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> rollingMax = new ArrayList<>();\n        int n = numbers.size();\n        int max = numbers.get(0);\n        for (int i = 1; i < n; i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n            rollingMax.add(max);\n        }\n        return rollingMax;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> rollingMax = new ArrayList<>();\n        int n = numbers.size();\n        int i = 0;\n        int j = 0;\n        int max = numbers.get(i);\n        while (i < n) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n            rollingMax.add(max);\n            i++;\n        }\n        return rollingMax;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> rollingMax = new ArrayList<>();\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n            rollingMax.add(max);\n        }\n        return rollingMax;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> rollingMax = new ArrayList<>();\n        int max = 0;\n        for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n            rollingMax.add(max);\n        }\n        return rollingMax;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> res = new ArrayList<>();\n        int n = numbers.size();\n        int[] dp = new int[n];\n        dp[0] = numbers.get(0);\n        for (int i = 1; i < n; i++) {\n            dp[i] = Math.max(dp[i - 1], numbers.get(i));\n        }\n        for (int i = n - 1; i >= 0; i--) {\n            res.add(dp[i]);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> rollingMax = new ArrayList<>();\n        int n = numbers.size();\n        int i = 0;\n        while (i < n) {\n            int max = numbers.get(i);\n            int j = i + 1;\n            while (j < n && numbers.get(j) > max) {\n                max = numbers.get(j);\n                j++;\n            }\n            rollingMax.add(max);\n            i = j;\n        }\n        return rollingMax;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int n = numbers.size();\n        int[] dp = new int[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = numbers.get(i);\n        }\n        for (int i = 1; i < n; i++) {\n            dp[i] = Math.max(dp[i - 1], dp[i]);\n        }\n        for (int i = n - 2; i >= 0; i--) {\n            result.add(dp[i]);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n        List<Integer> result = new ArrayList<>();\n        int n = numbers.size();\n        int[] dp = new int[n];\n        dp[0] = numbers.get(0);\n        for (int i = 1; i < n; i++) {\n            dp[i] = Math.max(dp[i - 1], numbers.get(i));\n        }\n        for (int i = n - 1; i >= 0; i--) {\n            result.add(dp[i]);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j + 1);\n            }\n            i++;\n            j--;\n        }\n        return string;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j+1);\n            }\n            i++;\n            j--;\n        }\n        return string;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j + 1);\n            }\n            i++;\n            j--;\n        }\n        return string;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j + 1);\n            }\n            i++;\n            j--;\n        }\n        return string;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j + 1);\n            }\n            i++;\n            j--;\n        }\n        return string;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j + 1);\n            }\n            i++;\n            j--;\n        }\n        return string;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j+1);\n            }\n            i++;\n            j--;\n        }\n        return string;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        String longestPostfix = \"\";\n        String shortestPrefix = \"\";\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j)) {\n                longestPostfix = string.substring(i + 1, j + 1);\n                break;\n            }\n            i++;\n            j--;\n        }\n        while (i < j) {\n            if (string.charAt(i) != string.charAt(j)) {\n                shortestPrefix = string.substring(0, i + 1);\n                break;\n            }\n            i++;\n            j--;\n        }\n        String reversedString = \"\";\n        for (int k = 0; k < longestPostfix.length(); k++) {\n            reversedString += longestPostfix.charAt(k);\n        }\n        String reversedPrefix = \"\";\n        for (int k = 0; k < shortestPrefix.length(); k++) {\n            reversedPrefix += shortestPrefix.charAt(k);\n        }\n        return reversedString + reversedPrefix;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j + 1);\n            }\n            i++;\n            j--;\n        }\n        return string;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j + 1);\n            }\n            i++;\n            j--;\n        }\n        return string;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j + 1);\n            }\n            i++;\n            j--;\n        }\n        return string;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j + 1);\n            }\n            i++;\n            j--;\n        }\n        return string;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j + 1);\n            }\n            i++;\n            j--;\n        }\n        return string;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j + 1);\n            }\n            i++;\n            j--;\n        }\n        return string;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j + 1);\n            }\n            i++;\n            j--;\n        }\n        return string;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j + 1);\n            }\n            i++;\n            j--;\n        }\n        return string;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j + 1);\n            }\n            i++;\n            j--;\n        }\n        return string;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j + 1);\n            }\n            i++;\n            j--;\n        }\n        return string;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j + 1);\n            }\n            i++;\n            j--;\n        }\n        return string;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return string.substring(i, j + 1);\n            }\n            i++;\n            j--;\n        }\n        return string;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int a_int = Integer.parseInt(a, 2);\n        int b_int = Integer.parseInt(b, 2);\n        return Integer.toBinaryString(a_int ^ b_int);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        char[] aChars = a.toCharArray();\n        char[] bChars = b.toCharArray();\n        int aLen = aChars.length;\n        int bLen = bChars.length;\n        int xorLen = aLen + bLen;\n        char[] xorChars = new char[xorLen];\n        for (int i = 0; i < aLen; i++) {\n            xorChars[i] = (char) (aChars[i] ^ bChars[i]);\n        }\n        return new String(xorChars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == '1') {\n                sb.append('0');\n            } else {\n                sb.append('1');\n            }\n        }\n        for (int i = 0; i < b.length(); i++) {\n            if (b.charAt(i) == '1') {\n                sb.append('0');\n            } else {\n                sb.append('1');\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int[] aArr = new int[a.length()];\n        int[] bArr = new int[b.length()];\n        for(int i = 0; i < a.length(); i++) {\n            aArr[i] = a.charAt(i) - '0';\n        }\n        for(int i = 0; i < b.length(); i++) {\n            bArr[i] = b.charAt(i) - '0';\n        }\n        int xor = 0;\n        for(int i = 0; i < a.length(); i++) {\n            xor ^= aArr[i] ^ bArr[i];\n        }\n        return String.valueOf(xor);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int aLen = a.length();\n        int bLen = b.length();\n        int xor = 0;\n        int i = 0;\n        StringBuilder sb = new StringBuilder();\n        while (i < aLen) {\n            xor = a.charAt(i) ^ b.charAt(i);\n            sb.append(xor);\n            i++;\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        char[] aChar = a.toCharArray();\n        char[] bChar = b.toCharArray();\n        int n = aChar.length;\n        char[] result = new char[n];\n        for (int i = 0; i < n; i++) {\n            result[i] = (char) ((aChar[i] == '1') ? (bChar[i] == '1') ? 0 : 1 : 0);\n        }\n        return new String(result);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int aLen = a.length();\n        int bLen = b.length();\n        int xorLen = aLen + bLen;\n        char[] xorArray = new char[xorLen];\n        for (int i = 0; i < aLen; i++) {\n            xorArray[i] = (char) (a.charAt(i) ^ b.charAt(i));\n        }\n        return new String(xorArray);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int n = a.length();\n        int m = b.length();\n        int[] aArr = new int[n];\n        int[] bArr = new int[m];\n        for(int i = 0; i < n; i++) {\n            aArr[i] = a.charAt(i) == '1' ? 1 : 0;\n        }\n        for(int i = 0; i < m; i++) {\n            bArr[i] = b.charAt(i) == '1' ? 1 : 0;\n        }\n        int xor = 0;\n        for(int i = 0; i < n; i++) {\n            xor ^= aArr[i] ^ bArr[i];\n        }\n        return Integer.toBinaryString(xor);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int aLen = a.length();\n        int bLen = b.length();\n        int xorLen = aLen + bLen;\n        char[] xorArray = new char[xorLen];\n        for (int i = 0; i < aLen; i++) {\n            xorArray[i] = a.charAt(i) ^ b.charAt(i);\n        }\n        return new String(xorArray);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == '1') {\n                sb.append('0');\n            } else {\n                sb.append('1');\n            }\n        }\n        for (int i = 0; i < b.length(); i++) {\n            if (b.charAt(i) == '1') {\n                sb.append('0');\n            } else {\n                sb.append('1');\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int a_len = a.length();\n        int b_len = b.length();\n        int xor_len = a_len + b_len;\n        char[] xor_array = new char[xor_len];\n        for (int i = 0; i < xor_len; i++) {\n            xor_array[i] = (a.charAt(i) == '1') ? '0' : '1';\n        }\n        return String.valueOf(xor_array);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        StringBuilder sb = new StringBuilder();\n        int aLen = a.length();\n        int bLen = b.length();\n        int xor = 0;\n        for (int i = 0; i < aLen; i++) {\n            xor ^= a.charAt(i) ^ b.charAt(i);\n        }\n        for (int i = 0; i < bLen; i++) {\n            xor ^= a.charAt(aLen - i - 1) ^ b.charAt(bLen - i - 1);\n        }\n        sb.append(xor);\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int aLen = a.length();\n        int bLen = b.length();\n        int xorLen = aLen + bLen;\n        char[] xorArr = new char[xorLen];\n        for (int i = 0; i < aLen; i++) {\n            xorArr[i] = (char) (a.charAt(i) ^ b.charAt(i));\n        }\n        return new String(xorArr);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == '1') {\n                sb.append('0');\n            } else {\n                sb.append('1');\n            }\n        }\n        for (int i = 0; i < b.length(); i++) {\n            if (b.charAt(i) == '1') {\n                sb.append('0');\n            } else {\n                sb.append('1');\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < a.length(); i++) {\n            if(a.charAt(i) == '1') {\n                sb.append(\"0\");\n            } else {\n                sb.append(\"1\");\n            }\n        }\n        for(int i = 0; i < b.length(); i++) {\n            if(b.charAt(i) == '1') {\n                sb.append(\"0\");\n            } else {\n                sb.append(\"1\");\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int aLength = a.length();\n        int bLength = b.length();\n        int xor = 0;\n        String xorString = \"\";\n        for (int i = 0; i < aLength; i++) {\n            xor += a.charAt(i) ^ b.charAt(i);\n        }\n        xorString = Integer.toBinaryString(xor);\n        xorString = xorString.substring(xorString.length() - bLength);\n        return xorString;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int aLength = a.length();\n        int bLength = b.length();\n        int xor = 0;\n        String xorString = \"\";\n        for (int i = 0; i < aLength; i++) {\n            xor += a.charAt(i) ^ b.charAt(i);\n        }\n        for (int i = 0; i < aLength; i++) {\n            xorString += (xor % 2 == 0) ? \"0\" : \"1\";\n            xor /= 2;\n        }\n        return xorString;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int a_length = a.length();\n        int b_length = b.length();\n        int xor_result = 0;\n        int xor_result_length = a_length + b_length;\n        char[] a_chars = a.toCharArray();\n        char[] b_chars = b.toCharArray();\n        for(int i = 0; i < a_length; i++) {\n            xor_result += a_chars[i] ^ b_chars[i];\n        }\n        String xor_result_string = Integer.toBinaryString(xor_result);\n        xor_result_string = xor_result_string.substring(xor_result_string.length() - xor_result_length);\n        return xor_result_string;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        char[] a_chars = a.toCharArray();\n        char[] b_chars = b.toCharArray();\n        int a_length = a_chars.length;\n        int b_length = b_chars.length;\n        int xor_length = a_length + b_length;\n        char[] xor_chars = new char[xor_length];\n        for (int i = 0; i < a_length; i++) {\n            xor_chars[i] = (char) (a_chars[i] ^ b_chars[i]);\n        }\n        return new String(xor_chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n        int a_len = a.length();\n        int b_len = b.length();\n        int xor_len = a_len + b_len;\n        char[] xor_array = new char[xor_len];\n        for (int i = 0; i < a_len; i++) {\n            xor_array[i] = (char) (a.charAt(i) ^ b.charAt(i));\n        }\n        return new String(xor_array);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n\n        return Optional.of(longest);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        int x = a;\n        int y = b;\n        int z = 0;\n        while (x != 0) {\n            z = x;\n            x = y % x;\n            y = z;\n        }\n        return y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        return greatestCommonDivisor(b % a, a);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        return greatestCommonDivisor(b, a % b);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        return greatestCommonDivisor(b, a % b);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        return greatestCommonDivisor(b, a % b);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        return greatestCommonDivisor(b, a % b);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (b == 0) {\n            return a;\n        }\n        return greatestCommonDivisor(b, a % b);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        return greatestCommonDivisor(b, a % b);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        return greatestCommonDivisor(b, a % b);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) return b;\n        if (b == 0) return a;\n        return greatestCommonDivisor(b, a % b);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        return greatestCommonDivisor(b % a, a);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        int x = a;\n        int y = b;\n        int z = 0;\n        while (y != 0) {\n            z = x % y;\n            x = y;\n            y = z;\n        }\n        return x;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        if (a > b) {\n            int temp = a;\n            a = b;\n            b = temp;\n        }\n        int remainder = a % b;\n        while (remainder != 0) {\n            a = b;\n            b = remainder;\n            remainder = a % b;\n        }\n        return b;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        return greatestCommonDivisor(b, a % b);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        int x = a;\n        int y = b;\n        int z = 0;\n        while(x != 0) {\n            z = x;\n            x = y % x;\n            y = z;\n        }\n        return y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) return b;\n        if (b == 0) return a;\n        return greatestCommonDivisor(b, a % b);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        return greatestCommonDivisor(b, a % b);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        int x = a;\n        int y = b;\n        int z = 0;\n        while (x != 0) {\n            z = y;\n            y = x;\n            x = z % y;\n        }\n        return z;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        return greatestCommonDivisor(b, a % b);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n        if (a == 0) {\n            return b;\n        }\n        if (b == 0) {\n            return a;\n        }\n        return greatestCommonDivisor(b, a % b);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            for (int j = i; j >= 0; j--) {\n                if (string.charAt(j) == string.charAt(i)) {\n                    prefixes.add(string.substring(0, j + 1));\n                    break;\n                }\n            }\n        }\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            for (int j = i + 1; j < string.length(); j++) {\n                if (string.charAt(i) == string.charAt(j)) {\n                    prefixes.add(string.substring(i, j));\n                }\n            }\n        }\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        String prefix = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == 'a') {\n                prefix = \"a\";\n            } else {\n                prefix = prefix + string.charAt(i);\n            }\n            prefixes.add(prefix);\n        }\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        String prefix = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            prefix += string.charAt(i);\n            if (i == 0) {\n                prefixes.add(prefix);\n            } else {\n                if (prefix.length() > 0) {\n                    prefixes.add(prefix);\n                }\n                prefix = \"\";\n            }\n        }\n        if (prefix.length() > 0) {\n            prefixes.add(prefix);\n        }\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        String prefix = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == ' ') {\n                prefixes.add(prefix);\n                prefix = \"\";\n            } else {\n                prefix += string.charAt(i);\n            }\n        }\n        prefixes.add(prefix);\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<String>();\n        String prefix = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            prefix += string.charAt(i);\n            if (i == 0) {\n                prefixes.add(prefix);\n            } else {\n                if (prefix.length() > 0) {\n                    prefixes.add(prefix);\n                }\n                prefix = \"\";\n            }\n        }\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<String>();\n        String[] words = string.split(\" \");\n        for (int i = 0; i < words.length; i++) {\n            String prefix = \"\";\n            for (int j = 0; j < i; j++) {\n                prefix += words[j] + \" \";\n            }\n            prefix += words[i];\n            prefixes.add(prefix);\n        }\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        String prefix = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            if (Character.isLetter(string.charAt(i))) {\n                prefix += string.charAt(i);\n            } else {\n                prefixes.add(prefix);\n                prefix = \"\";\n            }\n        }\n        if (prefix.length() > 0) {\n            prefixes.add(prefix);\n        }\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            String prefix = string.substring(0, i);\n            if (prefix.length() > 0) {\n                prefixes.add(prefix);\n            }\n        }\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        String prefix = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == 'a') {\n                prefix = \"a\";\n            } else {\n                prefix = prefix + string.charAt(i);\n            }\n            prefixes.add(prefix);\n        }\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<String>();\n        String prefix = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == 'a') {\n                prefix = \"a\";\n            } else {\n                prefix = prefix + string.charAt(i);\n            }\n            prefixes.add(prefix);\n        }\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        String prefix = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == 'a') {\n                prefix += \"a\";\n            } else {\n                prefix += string.charAt(i);\n            }\n            if (i == 0) {\n                prefixes.add(prefix);\n            } else {\n                prefixes.add(prefix + \"->\" + prefixes.get(i - 1));\n            }\n            prefix = \"\";\n        }\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        String[] words = string.split(\" \");\n        for (int i = 0; i < words.length; i++) {\n            String prefix = \"\";\n            for (int j = 0; j < words.length - i; j++) {\n                prefix += words[j] + \" \";\n            }\n            prefixes.add(prefix);\n        }\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            String prefix = string.substring(0, i);\n            if (prefix.length() > 0) {\n                prefixes.add(prefix);\n            }\n        }\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            String prefix = string.substring(0, i);\n            if (prefix.length() > 0) {\n                prefixes.add(prefix);\n            }\n        }\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        String prefix = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == 'a') {\n                prefix += \"a\";\n            } else {\n                prefix += string.charAt(i);\n            }\n            if (i == 0) {\n                prefixes.add(prefix);\n            } else {\n                prefixes.add(prefix + string.substring(i));\n            }\n        }\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        String prefix = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == 'a') {\n                prefix += \"a\";\n            } else {\n                prefix += string.charAt(i);\n            }\n            if (i == 0) {\n                prefixes.add(prefix);\n            } else {\n                if (prefix.length() > 0) {\n                    prefixes.add(prefix);\n                }\n                prefix = \"\";\n            }\n        }\n        if (prefix.length() > 0) {\n            prefixes.add(prefix);\n        }\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        String prefix = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == 'a') {\n                prefix = prefix + \"a\";\n            } else {\n                prefix = prefix + string.charAt(i);\n            }\n            prefixes.add(prefix);\n        }\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        String prefix = \"\";\n        for (int i = 0; i < string.length(); i++) {\n            prefix += string.charAt(i);\n            if (i == 0) {\n                prefixes.add(prefix);\n            } else {\n                if (prefix.length() > 0) {\n                    prefixes.add(prefix);\n                }\n                prefix = \"\";\n            }\n        }\n        return prefixes;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n        List<String> prefixes = new ArrayList<>();\n        String[] words = string.split(\" \");\n        for (int i = 0; i < words.length; i++) {\n            String prefix = \"\";\n            for (int j = 0; j < i; j++) {\n                prefix += words[j] + \" \";\n            }\n            prefix += words[i];\n            prefixes.add(prefix);\n        }\n        return prefixes;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String s = \"\";\n        for (int i = 0; i < n; i++) {\n            s += \" \" + i;\n        }\n        return s;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String result = \"\";\n        for (int i = 0; i <= n; i++) {\n            result += \" \" + i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String s = \"\";\n        for (int i = 0; i < n; i++) {\n            s += \" \" + i;\n        }\n        return s;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String s = \"\";\n        for (int i = 0; i <= n; i++) {\n            s += \" \" + i;\n        }\n        return s;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String[] strs = new String[n];\n        for (int i = 0; i < n; i++) {\n            strs[i] = Integer.toString(i);\n        }\n        return String.join(\" \", strs);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String result = \"\";\n        for (int i = 0; i < n; i++) {\n            result += \" \" + i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String[] arr = new String[n];\n        for (int i = 0; i < n; i++) {\n            arr[i] = Integer.toString(i);\n        }\n        return String.join(\" \", arr);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String s = \"\";\n        for(int i = 0; i <= n; i++) {\n            s += \" \" + i;\n        }\n        return s;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String s = \"\";\n        for (int i = 0; i < n; i++) {\n            s = s + \" \" + i;\n        }\n        return s;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String s = \"\";\n        for (int i = 0; i <= n; i++) {\n            s += \" \" + i;\n        }\n        return s;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String s = \"\";\n        for(int i = 0; i <= n; i++) {\n            s = s + \" \" + i;\n        }\n        return s;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String[] numbers = new String[n];\n        for (int i = 0; i < n; i++) {\n            numbers[i] = String.valueOf(i);\n        }\n        return String.join(\" \", numbers);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String s = \"\";\n        for (int i = 0; i < n; i++) {\n            s += i + \" \";\n        }\n        return s;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String str = \"\";\n        for (int i = 0; i <= n; i++) {\n            str += \" \" + i;\n        }\n        return str;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String s = \"\";\n        for (int i = 0; i < n; i++) {\n            s += \" \" + i;\n        }\n        return s;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String s = \"\";\n        for (int i = 0; i < n; i++) {\n            s += \" \" + i;\n        }\n        return s;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String str = \"\";\n        for(int i = 0; i < n; i++) {\n            str += i + \" \";\n        }\n        return str;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String s = \"\";\n        for (int i = 0; i < n; i++) {\n            s = s + \" \" + i;\n        }\n        return s;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String s = \"\";\n        for (int i = 0; i < n; i++) {\n            s += \" \" + i;\n        }\n        return s;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n        String s = \"\";\n        for (int i = 0; i < n; i++) {\n            s += \" \" + i;\n        }\n        return s;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        char[] chars = string.toCharArray();\n        for (char c : chars) {\n            if (Character.isLetter(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        char[] chars = string.toCharArray();\n        for (char c : chars) {\n            if (Character.isLetter(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        char[] chars = string.toCharArray();\n        for(char c : chars) {\n            if(Character.isLetter(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        HashSet<Character> set = new HashSet<>();\n        for (char c : string.toCharArray()) {\n            set.add(c);\n        }\n        return set.size();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        char[] chars = string.toCharArray();\n        for (char c : chars) {\n            if (Character.isLetter(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (Character.isLetter(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        char[] chars = string.toCharArray();\n        for (char c : chars) {\n            if (Character.isLetter(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        char[] chars = string.toCharArray();\n        int count = 0;\n        for (char c : chars) {\n            if (c == c.toLowerCase()) {\n                count++;\n            } else if (c == c.toUpperCase()) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        char[] chars = string.toCharArray();\n        for (char c : chars) {\n            if (c >= 'a' && c <= 'z') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        char[] chars = string.toCharArray();\n        for (char c : chars) {\n            if (Character.isLetter(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        char[] chars = string.toCharArray();\n        for (char c : chars) {\n            if (Character.isLetter(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        char[] charArray = string.toCharArray();\n        int count = 0;\n        for (char c : charArray) {\n            if (c == c.toLowerCase()) {\n                count++;\n            } else if (c == c.toUpperCase()) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        char[] chars = string.toCharArray();\n        for (char c : chars) {\n            if (Character.isLetter(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        char[] chars = string.toCharArray();\n        for (char c : chars) {\n            if (Character.isLetter(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        char[] chars = string.toCharArray();\n        int count = 0;\n        for (char c : chars) {\n            if (c >= 'a' && c <= 'z') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        char[] chars = string.toCharArray();\n        for(char c : chars) {\n            if(Character.isLetter(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        char[] chars = string.toCharArray();\n        for (char c : chars) {\n            if (Character.isLetter(c)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        char[] chars = string.toCharArray();\n        for (char c : chars) {\n            if (c >= 'a' && c <= 'z') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        char[] chars = string.toCharArray();\n        int count = 0;\n        for (char c : chars) {\n            if (c >= 'A' && c <= 'Z') {\n                count++;\n            } else if (c >= 'a' && c <= 'z') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n        int count = 0;\n        char[] chars = string.toCharArray();\n        for (char c : chars) {\n            if (c >= 'A' && c <= 'Z') {\n                count++;\n            } else if (c >= 'a' && c <= 'z') {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        for (char c : string.toCharArray()) {\n            if (c == 'o') {\n                result.add(4);\n            } else if (c == '|') {\n                result.add(2);\n            } else if (c == '.') {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == 'o') {\n                result.add(4);\n            } else if (c == '|') {\n                result.add(2);\n            } else if (c == '.') {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        int currentBeat = 0;\n        for (char c : string.toCharArray()) {\n            if (c == 'o') {\n                currentBeat += 4;\n            } else if (c == '|') {\n                currentBeat += 2;\n            } else if (c == '.') {\n                currentBeat += 1;\n            } else {\n                throw new IllegalArgumentException(\"Invalid character: \" + c);\n            }\n            if (currentBeat > 12) {\n                result.add(currentBeat);\n                currentBeat = 0;\n            }\n        }\n        if (currentBeat > 0) {\n            result.add(currentBeat);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> list = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == 'o') {\n                list.add(4);\n            } else if (c == '|') {\n                list.add(2);\n            } else if (c == '.') {\n                list.add(1);\n            }\n        }\n        return list;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == 'o') {\n                result.add(4);\n            } else if (c == '|') {\n                result.add(2);\n            } else if (c == '.') {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == 'o') {\n                result.add(4);\n            } else if (c == '|') {\n                result.add(2);\n            } else if (c == '.') {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == 'o') {\n                result.add(4);\n            } else if (c == '|') {\n                result.add(2);\n            } else if (c == '.') {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == 'o') {\n                result.add(4);\n            } else if (c == '|') {\n                result.add(2);\n            } else if (c == '.') {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        for (char c : string.toCharArray()) {\n            if (c == 'o') {\n                result.add(4);\n            } else if (c == '|') {\n                result.add(2);\n            } else if (c == '.') {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == 'o') {\n                result.add(4);\n            } else if (c == '|') {\n                result.add(2);\n            } else if (c == '.') {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        int currentBeat = 0;\n        for (char c : string.toCharArray()) {\n            if (c == 'o') {\n                currentBeat += 4;\n            } else if (c == '|') {\n                currentBeat += 2;\n            } else if (c == '.') {\n                currentBeat += 1;\n            }\n            result.add(currentBeat);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> beats = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == 'o') {\n                beats.add(4);\n            } else if (c == 'o' || c == '|') {\n                beats.add(2);\n            } else if (c == '.') {\n                beats.add(1);\n            }\n        }\n        return beats;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == 'o') {\n                result.add(4);\n            } else if (c == '|') {\n                result.add(2);\n            } else if (c == '.') {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == 'o') {\n                result.add(4);\n            } else if (c == '|') {\n                result.add(2);\n            } else if (c == '.') {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        for (char c : string.toCharArray()) {\n            if (c == 'o') {\n                result.add(4);\n            } else if (c == '|') {\n                result.add(2);\n            } else if (c == '.') {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        for (char c : string.toCharArray()) {\n            if (c == 'o') {\n                result.add(4);\n            } else if (c == '|') {\n                result.add(2);\n            } else if (c == '.') {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == 'o') {\n                result.add(4);\n            } else if (c == '|') {\n                result.add(2);\n            } else if (c == '.') {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == 'o') {\n                result.add(4);\n            } else if (c == '|') {\n                result.add(2);\n            } else if (c == '.') {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == 'o') {\n                result.add(4);\n            } else if (c == '|') {\n                result.add(2);\n            } else if (c == '.') {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n        List<Integer> result = new ArrayList<>();\n        for (char c : string.toCharArray()) {\n            if (c == 'o') {\n                result.add(4);\n            } else if (c == '|') {\n                result.add(2);\n            } else if (c == '.') {\n                result.add(1);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int start = 0;\n        int end = 0;\n        while (end != -1) {\n            end = string.indexOf(substring, start);\n            if (end != -1) {\n                count++;\n                start = end + substring.length();\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int index = 0;\n        while (index != -1) {\n            index = string.indexOf(substring, index);\n            if (index != -1) {\n                count++;\n                index += substring.length();\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int start = 0;\n        int end = 0;\n        while (end != -1) {\n            end = string.indexOf(substring, start);\n            if (end != -1) {\n                count++;\n                start = end + substring.length();\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int start = 0;\n        int end = 0;\n        while (end != -1) {\n            end = string.indexOf(substring, start);\n            if (end != -1) {\n                count++;\n                start = end + substring.length();\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int i = 0;\n        int j = 0;\n        while (i < string.length() && j < substring.length()) {\n            if (string.charAt(i) == substring.charAt(j)) {\n                count++;\n                i++;\n                j++;\n            } else if (string.charAt(i) == substring.charAt(j)) {\n                count++;\n                i++;\n                j++;\n            } else {\n                count++;\n                i++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int start = 0;\n        while (start != -1) {\n            start = string.indexOf(substring, start);\n            if (start != -1) {\n                count++;\n                start += substring.length();\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int start = 0;\n        int end = 0;\n        while (end != -1) {\n            end = string.indexOf(substring, start);\n            if (end != -1) {\n                count++;\n                start = end + substring.length();\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int index = 0;\n        while (index != -1) {\n            index = string.indexOf(substring, index);\n            if (index != -1) {\n                count++;\n                index += substring.length();\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int i = 0;\n        while (i < string.length()) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                count++;\n            }\n            i++;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int index = 0;\n        while (index != -1) {\n            index = string.indexOf(substring, index);\n            if (index != -1) {\n                count++;\n                index += substring.length();\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int index = 0;\n        while (index != -1) {\n            index = string.indexOf(substring, index);\n            if (index != -1) {\n                count++;\n                index += substring.length();\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int index = 0;\n        while (index != -1) {\n            index = string.indexOf(substring, index);\n            if (index != -1) {\n                count++;\n                index += substring.length();\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int i = 0;\n        int j = 0;\n        while (i < string.length()) {\n            while (j < substring.length() && string.charAt(i) == substring.charAt(j)) {\n                j++;\n            }\n            if (j == substring.length()) {\n                count++;\n                i += substring.length();\n                j = 0;\n            } else {\n                j = 0;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int start = 0;\n        int end = 0;\n        while (start != -1) {\n            start = string.indexOf(substring, start);\n            end = start + substring.length();\n            if (start != -1) {\n                count++;\n                start = end;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int start = 0;\n        while (start != -1) {\n            start = string.indexOf(substring, start);\n            if (start != -1) {\n                count++;\n                start += substring.length();\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int index = 0;\n        while (index != -1) {\n            index = string.indexOf(substring, index);\n            if (index != -1) {\n                count++;\n                index += substring.length();\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int i = 0;\n        int j = 0;\n        while (i < string.length() && j < substring.length()) {\n            if (string.charAt(i) == substring.charAt(j)) {\n                i++;\n                j++;\n                count++;\n            } else if (string.charAt(i) == substring.charAt(j)) {\n                i++;\n                j++;\n            } else {\n                i++;\n                j = 0;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int start = 0;\n        int end = 0;\n        while (start != -1) {\n            end = string.indexOf(substring, start);\n            if (end != -1) {\n                count++;\n                start = end + substring.length();\n            } else {\n                start = -1;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int index = 0;\n        while (index != -1) {\n            index = string.indexOf(substring, index);\n            if (index != -1) {\n                count++;\n                index += substring.length();\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n        int count = 0;\n        int start = 0;\n        int end = 0;\n        while (start != -1) {\n            start = string.indexOf(substring, start);\n            if (start != -1) {\n                end = start + substring.length();\n                count++;\n                start = string.indexOf(substring, end);\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] numbersArray = numbers.split(\" \");\n        Arrays.sort(numbersArray);\n        String sortedNumbers = \"\";\n        for (int i = 0; i < numbersArray.length; i++) {\n            sortedNumbers += numbersArray[i] + \" \";\n        }\n        return sortedNumbers;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        // Write your code here\n        String[] numbersArray = numbers.split(\" \");\n        Arrays.sort(numbersArray);\n        String sortedNumbers = \"\";\n        for (int i = 0; i < numbersArray.length; i++) {\n            sortedNumbers += numbersArray[i] + \" \";\n        }\n        return sortedNumbers;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        // Write your code here\n        String[] nums = numbers.split(\" \");\n        Arrays.sort(nums);\n        return String.join(\" \", nums);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] numbersArray = numbers.split(\" \");\n        String sortedNumbers = \"\";\n        for (int i = 0; i < numbersArray.length; i++) {\n            sortedNumbers += numbersArray[i] + \" \";\n        }\n        return sortedNumbers;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        // Write your code here\n        String[] numbersArray = numbers.split(\" \");\n        String sortedNumbers = \"\";\n        for (int i = 0; i < numbersArray.length; i++) {\n            sortedNumbers += numbersArray[i] + \" \";\n        }\n        return sortedNumbers;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        // Write your code here\n        String[] nums = numbers.split(\" \");\n        Arrays.sort(nums);\n        return String.join(\" \", nums);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] numbersArray = numbers.split(\" \");\n        Arrays.sort(numbersArray);\n        StringBuilder sb = new StringBuilder();\n        for (String number : numbersArray) {\n            sb.append(number);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        // Write your code here\n        String[] numbersArray = numbers.split(\" \");\n        Arrays.sort(numbersArray);\n        String sortedNumbers = \"\";\n        for (String number : numbersArray) {\n            sortedNumbers += number + \" \";\n        }\n        return sortedNumbers;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] numbersArray = numbers.split(\" \");\n        String sortedNumbers = \"\";\n        for (int i = 0; i < numbersArray.length; i++) {\n            sortedNumbers += numbersArray[i] + \" \";\n        }\n        return sortedNumbers;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] nums = numbers.split(\" \");\n        String[] sortedNums = new String[nums.length];\n        for (int i = 0; i < nums.length; i++) {\n            sortedNums[i] = nums[i];\n        }\n        Arrays.sort(sortedNums);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < sortedNums.length; i++) {\n            sb.append(sortedNums[i]);\n            if (i != sortedNums.length - 1) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] nums = numbers.split(\" \");\n        String[] sortedNums = new String[nums.length];\n        for (int i = 0; i < nums.length; i++) {\n            sortedNums[i] = nums[i];\n        }\n        Arrays.sort(sortedNums);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < sortedNums.length; i++) {\n            sb.append(sortedNums[i]);\n            if (i != sortedNums.length - 1) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] nums = numbers.split(\" \");\n        Arrays.sort(nums);\n        return String.join(\" \", nums);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] numbersArray = numbers.split(\" \");\n        String[] sortedNumbers = new String[numbersArray.length];\n        for (int i = 0; i < numbersArray.length; i++) {\n            sortedNumbers[i] = numbersArray[i];\n        }\n        Arrays.sort(sortedNumbers);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < sortedNumbers.length; i++) {\n            sb.append(sortedNumbers[i]);\n            if (i != sortedNumbers.length - 1) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] nums = numbers.split(\" \");\n        Arrays.sort(nums);\n        return String.join(\" \", nums);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] nums = numbers.split(\" \");\n        Arrays.sort(nums);\n        return String.join(\" \", nums);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] nums = numbers.split(\" \");\n        Arrays.sort(nums);\n        return String.join(\" \", nums);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] numbersArray = numbers.split(\" \");\n        Arrays.sort(numbersArray);\n        StringBuilder sb = new StringBuilder();\n        for (String number : numbersArray) {\n            sb.append(number);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] nums = numbers.split(\" \");\n        Arrays.sort(nums);\n        StringBuilder sb = new StringBuilder();\n        for (String num : nums) {\n            sb.append(num);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] nums = numbers.split(\" \");\n        Arrays.sort(nums);\n        return String.join(\" \", nums);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n        String[] numbersArray = numbers.split(\" \");\n        Arrays.sort(numbersArray);\n        String sortedNumbers = \"\";\n        for (String number : numbersArray) {\n            sortedNumbers += number + \" \";\n        }\n        return sortedNumbers;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closest = new ArrayList<>();\n        double min = Double.MAX_VALUE;\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                double diff = Math.abs(numbers.get(i) - numbers.get(j));\n                if (diff < min) {\n                    min = diff;\n                    closest.add(numbers.get(i));\n                    closest.add(numbers.get(j));\n                }\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closest = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                double diff = Math.abs(numbers.get(i) - numbers.get(j));\n                if (diff < closest.get(0)) {\n                    closest.set(0, diff);\n                }\n                if (diff < closest.get(1)) {\n                    closest.set(1, diff);\n                }\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closest = new ArrayList<>();\n        double min = Double.MAX_VALUE;\n        for (Double number : numbers) {\n            if (number < min) {\n                min = number;\n            }\n        }\n        for (Double number : numbers) {\n            if (Math.abs(number - min) < Math.abs(number - closest.get(0))) {\n                closest.clear();\n                closest.add(number);\n                closest.add(min);\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        // Write your code here\n        List<Double> closest = new ArrayList<>();\n        double min = Double.MAX_VALUE;\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                double diff = Math.abs(numbers.get(i) - numbers.get(j));\n                if (diff < min) {\n                    min = diff;\n                    closest.clear();\n                    closest.add(numbers.get(i));\n                    closest.add(numbers.get(j));\n                }\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closest = new ArrayList<>();\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) < Math.abs(numbers.get(i) - numbers.get(i + 2))) {\n                closest.add(numbers.get(i));\n                closest.add(numbers.get(i + 1));\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closest = new ArrayList<>();\n        double min = Double.MAX_VALUE;\n        double max = Double.MIN_VALUE;\n        for (Double num : numbers) {\n            if (num < min) {\n                min = num;\n            }\n            if (num > max) {\n                max = num;\n            }\n        }\n        for (Double num : numbers) {\n            if (Math.abs(num - min) < Math.abs(num - max)) {\n                closest.add(num);\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closest = new ArrayList<>();\n        double min = Double.MAX_VALUE;\n        double max = Double.MIN_VALUE;\n        for (double num : numbers) {\n            if (num < min) {\n                min = num;\n            }\n            if (num > max) {\n                max = num;\n            }\n        }\n        for (double num : numbers) {\n            if (Math.abs(num - min) < Math.abs(num - max)) {\n                closest.add(num);\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closest = new ArrayList<>();\n        double min = Double.MAX_VALUE;\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            double diff = Math.abs(numbers.get(i) - numbers.get(i + 1));\n            if (diff < min) {\n                min = diff;\n                closest.clear();\n                closest.add(numbers.get(i));\n                closest.add(numbers.get(i + 1));\n            } else if (diff == min) {\n                closest.add(numbers.get(i));\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closest = new ArrayList<>();\n        double min = Double.MAX_VALUE;\n        double max = Double.MIN_VALUE;\n        for (Double number : numbers) {\n            if (number < min) {\n                min = number;\n            }\n            if (number > max) {\n                max = number;\n            }\n        }\n        for (Double number : numbers) {\n            if (Math.abs(number - min) < Math.abs(number - max)) {\n                closest.add(number);\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        // write your code here\n        List<Double> closest = new ArrayList<>();\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < Math.abs(numbers.get(i) - closest.get(0))) {\n                    closest.set(0, numbers.get(i));\n                    closest.set(1, numbers.get(j));\n                }\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closest = new ArrayList<>();\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < Math.abs(numbers.get(i) - closest.get(0))) {\n                    closest.set(0, numbers.get(i));\n                    closest.set(1, numbers.get(j));\n                }\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closest = new ArrayList<>();\n        double min = Double.MAX_VALUE;\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                double diff = Math.abs(numbers.get(i) - numbers.get(j));\n                if (diff < min) {\n                    min = diff;\n                    closest.clear();\n                    closest.add(numbers.get(i));\n                    closest.add(numbers.get(j));\n                }\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        // Write your code here\n        List<Double> closest = new ArrayList<>();\n        Collections.sort(numbers);\n        closest.add(numbers.get(0));\n        closest.add(numbers.get(1));\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        List<Double> closest = new ArrayList<>();\n        double min = Double.MAX_VALUE;\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                double diff = Math.abs(numbers.get(i) - numbers.get(j));\n                if (diff < min) {\n                    min = diff;\n                    closest.clear();\n                    closest.add(numbers.get(i));\n                    closest.add(numbers.get(j));\n                }\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        if (numbers.size() < 2) {\n            return new ArrayList<Double>();\n        }\n        Collections.sort(numbers);\n        List<Double> closest = new ArrayList<Double>();\n        closest.add(numbers.get(0));\n        closest.add(numbers.get(1));\n        for (int i = 2; i < numbers.size(); i++) {\n            double diff = Math.abs(numbers.get(i) - numbers.get(i - 1));\n            if (diff < closest.get(0)) {\n                closest.set(0, diff);\n            }\n            if (diff < closest.get(1)) {\n                closest.set(1, diff);\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        // Write your code here\n        List<Double> closest = new ArrayList<>();\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(in}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        // Write your code here\n        List<Double> closest = new ArrayList<Double>();\n        double min = Double.MAX_VALUE;\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = 0; j < numbers.size(); j++) {\n                if (i == j) {\n                    continue;\n                }\n                double dist = Math.abs(numbers.get(i) - numbers.get(j));\n                if (dist < min) {\n                    min = dist;\n                    closest.clear();\n                    closest.add(numbers.get(i));\n                    closest.add(numbers.get(j));\n                }\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        if (numbers.size() < 2) {\n            return numbers;\n        }\n\n        List<Double> closest = new ArrayList<>();\n        double min = numbers.get(0);\n        double max = numbers.get(0);\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) < min) {\n                min = numbers.get(i);\n            }\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n        }\n\n        for (int i = 0; i < numbers.size(); i++) {\n            if (numbers.get(i) == min) {\n                closest.add(numbers.get(i));\n            }\n            if (numbers.get(i) == max) {\n                closest.add(numbers.get(i));\n            }\n        }\n\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        // Write your code here\n        List<Double> closest = new ArrayList<>();\n        Collections.sort(numbers);\n        for(int i = 0; i < numbers.size() - 1; i++) {\n            if(numbers.get(i) == numbers.get(i + 1)) {\n                closest.add(numbers.get(i));\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n        // Write your code here\n        List<Double> closest = new ArrayList<>();\n        Collections.sort(numbers);\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            if (Math.abs(numbers.get(i) - numbers.get(i + 1)) < Math.abs(numbers.get(i) - numbers.get(i + 2))) {\n                closest.add(numbers.get(i));\n                closest.add(numbers.get(i + 1));\n            }\n        }\n        return closest;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        double min = Double.POSITIVE_INFINITY;\n        double max = Double.NEGATIVE_INFINITY;\n        for (double number : numbers) {\n            if (number < min) {\n                min = number;\n            }\n            if (number > max) {\n                max = number;\n            }\n        }\n        double range = max - min;\n        double scale = 1.0 / range;\n        List<Double> result = new ArrayList<>();\n        for (double number : numbers) {\n            result.add(number * scale);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        List<Double> result = new ArrayList<Double>();\n        double min = Double.POSITIVE_INFINITY;\n        double max = Double.NEGATIVE_INFINITY;\n        for (double number : numbers) {\n            if (number < min) {\n                min = number;\n            }\n            if (number > max) {\n                max = number;\n            }\n        }\n        double scale = 1.0 / (max - min);\n        for (double number : numbers) {\n            result.add(number * scale);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        double min = Double.POSITIVE_INFINITY;\n        double max = Double.NEGATIVE_INFINITY;\n        for (double num : numbers) {\n            if (num < min) {\n                min = num;\n            }\n            if (num > max) {\n                max = num;\n            }\n        }\n        double scale = 1.0 / (max - min);\n        for (int i = 0; i < numbers.size(); i++) {\n            numbers.set(i, numbers.get(i) * scale);\n        }\n        return numbers;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        if (numbers.size() < 2) {\n            return numbers;\n        }\n\n        double min = numbers.get(0);\n        double max = numbers.get(0);\n        for (double num : numbers) {\n            if (num < min) {\n                min = num;\n            }\n            if (num > max) {\n                max = num;\n            }\n        }\n\n        double scale = 1.0 / (max - min);\n        List<Double> result = new ArrayList<>();\n        for (double num : numbers) {\n            result.add(num * scale);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        if (numbers.size() < 2) {\n            return numbers;\n        }\n\n        double min = numbers.get(0);\n        double max = numbers.get(0);\n        for (double num : numbers) {\n            if (num < min) {\n                min = num;\n            }\n            if (num > max) {\n                max = num;\n            }\n        }\n\n        double range = max - min;\n        double scale = 1.0 / range;\n        List<Double> scaled = new ArrayList<Double>();\n        for (double num : numbers) {\n            scaled.add(num * scale);\n        }\n        return scaled;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        double range = max - min;\n        double[] rescaled = new double[numbers.size()];\n        for (int i = 0; i < numbers.size(); i++) {\n            rescaled[i] = (numbers.get(i) - min) / range;\n        }\n        return Arrays.asList(rescaled);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        double min = Double.POSITIVE_INFINITY;\n        double max = Double.NEGATIVE_INFINITY;\n        for (double number : numbers) {\n            if (number < min) {\n                min = number;\n            }\n            if (number > max) {\n                max = number;\n            }\n        }\n        double range = max - min;\n        double scale = 1.0 / range;\n        List<Double> result = new ArrayList<>();\n        for (double number : numbers) {\n            result.add(number * scale);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        List<Double> result = new ArrayList<>();\n        double min = Double.POSITIVE_INFINITY;\n        double max = Double.NEGATIVE_INFINITY;\n        for (double number : numbers) {\n            if (number < min) {\n                min = number;\n            }\n            if (number > max) {\n                max = number;\n            }\n        }\n        for (double number : numbers) {\n            result.add((number - min) / (max - min));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        // write your code here\n        if (numbers.size() < 2) {\n            return numbers;\n        }\n        double min = numbers.get(0);\n        double max = numbers.get(0);\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) < min) {\n                min = numbers.get(i);\n            }\n            if (numbers.get(i) > max) {\n                max = numbers.get(i);\n            }\n        }\n        double scale = (max - min) / 2.0;\n        List<Double> result = new ArrayList<Double>();\n        for (int i = 0; i < numbers.size(); i++) {\n            result.add(numbers.get(i) * scale + min);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        if (numbers.size() < 2) {\n            return numbers;\n        }\n        double min = numbers.get(0);\n        double max = numbers.get(0);\n        for (double num : numbers) {\n            if (num < min) {\n                min = num;\n            }\n            if (num > max) {\n                max = num;\n            }\n        }\n        double range = max - min;\n        double scale = 1.0 / range;\n        List<Double> result = new ArrayList<>();\n        for (double num : numbers) {\n            result.add(num * scale);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        double min = Double.POSITIVE_INFINITY;\n        double max = Double.NEGATIVE_INFINITY;\n        for (double num : numbers) {\n            if (num < min) {\n                min = num;\n            }\n            if (num > max) {\n                max = num;\n            }\n        }\n        double scale = 1.0 / (max - min);\n        List<Double> result = new ArrayList<>();\n        for (double num : numbers) {\n            result.add(num * scale);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        double min = Double.POSITIVE_INFINITY;\n        double max = Double.NEGATIVE_INFINITY;\n        for (double number : numbers) {\n            if (number < min) {\n                min = number;\n            }\n            if (number > max) {\n                max = number;\n            }\n        }\n        double range = max - min;\n        for (double number : numbers) {\n            number = (number - min) / range;\n        }\n        return numbers;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        if (numbers.size() < 2) {\n            return numbers;\n        }\n\n        double min = numbers.get(0);\n        double max = numbers.get(0);\n\n        for (double number : numbers) {\n            if (number < min) {\n                min = number;\n            }\n\n            if (number > max) {\n                max = number;\n            }\n        }\n\n        double scale = 1.0 / (max - min);\n        List<Double> rescaled = new ArrayList<>();\n\n        for (double number : numbers) {\n            rescaled.add(number * scale);\n        }\n\n        return rescaled;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        if (numbers.size() < 2) {\n            return numbers;\n        }\n        double min = numbers.get(0);\n        double max = numbers.get(0);\n        for (double num : numbers) {\n            if (num < min) {\n                min = num;\n            }\n            if (num > max) {\n                max = num;\n            }\n        }\n        double range = max - min;\n        double scale = 1.0 / range;\n        List<Double> rescaled = new ArrayList<>();\n        for (double num : numbers) {\n            rescaled.add(num * scale);\n        }\n        return rescaled;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        if (numbers.size() < 2) {\n            return numbers;\n        }\n        double min = numbers.get(0);\n        double max = numbers.get(0);\n        for (double number : numbers) {\n            if (number < min) {\n                min = number;\n            }\n            if (number > max) {\n                max = number;\n            }\n        }\n        double scale = (max - min) / (numbers.size() - 1);\n        List<Double> result = new ArrayList<Double>();\n        for (double number : numbers) {\n            result.add(number * scale + min);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        if (numbers.size() < 2) {\n            return numbers;\n        }\n        double min = numbers.get(0);\n        double max = numbers.get(0);\n        for (double number : numbers) {\n            if (number < min) {\n                min = number;\n            }\n            if (number > max) {\n                max = number;\n            }\n        }\n        double range = max - min;\n        double[] rescaled = new double[numbers.size()];\n        for (int i = 0; i < numbers.size(); i++) {\n            rescaled[i] = (numbers.get(i) - min) / range;\n        }\n        return Arrays.asList(rescaled);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        double min = Collections.min(numbers);\n        double max = Collections.max(numbers);\n        double range = max - min;\n        double[] rescaled = new double[numbers.size()];\n        for (int i = 0; i < numbers.size(); i++) {\n            rescaled[i] = (numbers.get(i) - min) / range;\n        }\n        return Arrays.asList(rescaled);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        if (numbers.size() < 2) {\n            return numbers;\n        }\n        double min = numbers.get(0);\n        double max = numbers.get(0);\n        for (double num : numbers) {\n            if (num < min) {\n                min = num;\n            }\n            if (num > max) {\n                max = num;\n            }\n        }\n        double range = max - min;\n        double scale = 1.0 / range;\n        List<Double> result = new ArrayList<>();\n        for (double num : numbers) {\n            result.add(num * scale);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        // Write your code here\n        List<Double> result = new ArrayList<>();\n        double min = Double.POSITIVE_INFINITY;\n        double max = Double.NEGATIVE_INFINITY;\n        for (double num : numbers) {\n            if (num < min) {\n                min = num;\n            }\n            if (num > max) {\n                max = num;\n            }\n        }\n        for (double num : numbers) {\n            result.add((num - min) / (max - min));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n        List<Double> result = new ArrayList<Double>();\n        double min = Double.POSITIVE_INFINITY;\n        double max = Double.NEGATIVE_INFINITY;\n        for (double number : numbers) {\n            if (number < min) {\n                min = number;\n            }\n            if (number > max) {\n                max = number;\n            }\n        }\n        double range = max - min;\n        for (double number : numbers) {\n            result.add((number - min) / range);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> filtered = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                filtered.add((Integer) value);\n            }\n        }\n        return filtered;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> filtered = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                filtered.add((Integer) value);\n            }\n        }\n        return filtered;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> filtered = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                filtered.add((Integer) value);\n            }\n        }\n        return filtered;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> filtered = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                filtered.add((Integer) value);\n            }\n        }\n        return filtered;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> filtered = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                filtered.add((Integer) value);\n            }\n        }\n        return filtered;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> result = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                result.add((Integer) value);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntegers(List<Object> values) {\n        List<Integer> integers = new ArrayList<>();\n        for (Object value : values) {\n            if (value instanceof Integer) {\n                integers.add((Integer) value);\n            }\n        }\n        return integers;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        return string.length();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (char c : string.toCharArray()) {\n            if (c == ' ') {\n                len++;\n            }\n        }\n        return len;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (int i = 0; i < string.length(); i++) {\n            len++;\n        }\n        return len;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (char c : string.toCharArray()) {\n            len++;\n        }\n        return len;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (char c : string.toCharArray()) {\n            len++;\n        }\n        return len;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (char c : string.toCharArray()) {\n            if (c == '\\n')\n                len++;\n        }\n        return len;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (int i = 0; i < string.length(); i++) {\n            len++;\n        }\n        return len;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (char c : string.toCharArray()) {\n            if (c == '\\n') {\n                len++;\n            }\n        }\n        return len;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (int i = 0; i < string.length(); i++) {\n            len++;\n        }\n        return len;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (int i = 0; i < string.length(); i++) {\n            len++;\n        }\n        return len;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        return string.length();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (char c : string.toCharArray()) {\n            len++;\n        }\n        return len;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        return string.length();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (char c : string.toCharArray()) {\n            len++;\n        }\n        return len;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (char c : string.toCharArray()) {\n            len++;\n        }\n        return len;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (char c : string.toCharArray()) {\n            len++;\n        }\n        return len;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (char c : string.toCharArray()) {\n            len++;\n        }\n        return len;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        return string.length();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        return string.length();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n        int len = 0;\n        for (char c : string.toCharArray()) {\n            len++;\n        }\n        return len;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int largest = 1;\n        int smallest = 1;\n        int mid;\n        while(smallest < n) {\n            mid = (smallest + largest) / 2;\n            if(n % mid == 0) {\n                largest = mid;\n            } else {\n                smallest = mid + 1;\n            }\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int largest = 1;\n        int smallest = 1;\n        int mid;\n        while (smallest <= n) {\n            mid = (smallest + largest) / 2;\n            if (n % mid == 0) {\n                largest = mid;\n            } else {\n                smallest = mid + 1;\n            }\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int largest = 1;\n        int smallest = 1;\n        int mid;\n        while (smallest <= n) {\n            mid = (smallest + largest) / 2;\n            if (n % mid == 0) {\n                largest = mid;\n            } else {\n                smallest = mid + 1;\n            }\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int max = 0;\n        int min = n;\n        while(min % 2 == 0) {\n            min /= 2;\n        }\n        while(max % 2 != 0) {\n            max++;\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int largest = 1;\n        int smallest = 1;\n        int mid;\n        while (smallest <= n) {\n            mid = (smallest + largest) / 2;\n            if (n % mid == 0) {\n                largest = mid;\n            } else {\n                smallest = mid + 1;\n            }\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int largest = 0;\n        int smallest = n;\n        int mid;\n        while(smallest != largest){\n            mid = (smallest + largest) / 2;\n            if(n % mid == 0){\n                largest = mid;\n            }\n            else{\n                smallest = mid + 1;\n            }\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int largest = 0;\n        int smallest = n;\n        int mid;\n        while (smallest != largest) {\n            mid = (smallest + largest) / 2;\n            if (n % mid == 0) {\n                largest = mid;\n            } else {\n                smallest = mid + 1;\n            }\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int largest = 1;\n        int smallest = 1;\n        int mid;\n        while (smallest <= n) {\n            mid = (smallest + largest) / 2;\n            if (n % mid == 0) {\n                largest = mid;\n            } else {\n                smallest = mid + 1;\n            }\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int max = 0;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                if (i > max) {\n                    max = i;\n                }\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int largest = 1;\n        int smallest = 1;\n        int mid;\n        while(smallest <= n) {\n            mid = (smallest + largest) / 2;\n            if(n % mid == 0) {\n                largest = mid;\n            } else {\n                smallest = mid + 1;\n            }\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int largest = 0;\n        int divisor = 2;\n        while (divisor <= n) {\n            if (n % divisor == 0) {\n                if (divisor > largest) {\n                    largest = divisor;\n                }\n            }\n            divisor++;\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int largest = 0;\n        int divisor = 2;\n        while (divisor <= n) {\n            if (n % divisor == 0) {\n                largest = divisor;\n            }\n            divisor++;\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int largest = 1;\n        int smallest = 1;\n        int mid;\n        while (smallest <= n) {\n            mid = (smallest + largest) / 2;\n            if (n % mid == 0) {\n                largest = mid;\n            } else {\n                smallest = mid + 1;\n            }\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int largest = 1;\n        int smallest = 1;\n        int middle;\n        while (smallest <= n) {\n            middle = (smallest + largest) / 2;\n            if (middle % 2 == 0) {\n                largest = middle;\n            } else {\n                smallest = middle + 1;\n            }\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int largest = 0;\n        int divisor = 2;\n        while(n % divisor != 0) {\n            divisor++;\n        }\n        while(n % divisor == 0) {\n            largest = divisor;\n            n /= divisor;\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int largest = 1;\n        int smallest = 1;\n        int middle;\n        while (n > 0) {\n            middle = n / largest;\n            if (middle * largest == n) {\n                largest = middle + 1;\n            } else {\n                smallest = middle + 1;\n            }\n            n = n % largest;\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int largest = 1;\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largest = i;\n            }\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int largest = 1;\n        int smallest = 1;\n        int mid;\n        while (smallest <= n) {\n            mid = (smallest + largest) / 2;\n            if (n % mid == 0) {\n                largest = mid;\n            } else {\n                smallest = mid + 1;\n            }\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int largest = 1;\n        int smallest = 1;\n        int mid;\n        while (smallest <= n) {\n            mid = (smallest + largest) / 2;\n            if (mid % 2 == 0) {\n                largest = mid;\n            } else {\n                smallest = mid + 1;\n            }\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n        int largest = 1;\n        int smallest = 1;\n        int mid;\n        while (smallest <= n) {\n            mid = (smallest + largest) / 2;\n            if (n % mid == 0) {\n                largest = mid;\n            } else {\n                smallest = mid + 1;\n            }\n        }\n        return largest;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int i = 2;\n        while (n % i == 0) {\n            factors.add(i);\n            n /= i;\n        }\n        if (n != 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<Integer>();\n        int i = 2;\n        while (n > 1) {\n            if (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n            i++;\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int i = 2;\n        while(i*i <= n) {\n            if(n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n            i++;\n        }\n        if(n > 1) factors.add(n);\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int i = 2;\n        while (n > 1) {\n            if (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<Integer>();\n        int i = 2;\n        while(n % i == 0) {\n            factors.add(i);\n            n /= i;\n        }\n        if(n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<Integer>();\n        int i = 2;\n        while(i*i <= n) {\n            if(n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n            i++;\n        }\n        if(n > 1)\n            factors.add(n);\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int i = 2;\n        while (n % i == 0) {\n            factors.add(i);\n            n /= i;\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int i = 2;\n        while(n % i == 0) {\n            factors.add(i);\n            n /= i;\n        }\n        if(n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int i = 2;\n        while (n % i == 0) {\n            factors.add(i);\n            n /= i;\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<Integer>();\n        int i = 2;\n        while (n % i == 0) {\n            factors.add(i);\n            n /= i;\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<Integer>();\n        int i = 2;\n        while (i <= n) {\n            if (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n            i++;\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int i = 2;\n        while(i*i <= n) {\n            if(n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n            i++;\n        }\n        if(n > 1)\n            factors.add(n);\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int i = 2;\n        while(n % i == 0) {\n            factors.add(i);\n            n /= i;\n        }\n        if(n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int i = 2;\n        while(i * i <= n) {\n            if(n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n            i++;\n        }\n        if(n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<Integer>();\n        int i = 2;\n        while (n > 1) {\n            if (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n            else {\n                i++;\n            }\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                factors.add(i);\n                factors.add(n / i);\n            }\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int i = 2;\n        while(i * i <= n) {\n            if(n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n            i++;\n        }\n        if(n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int i = 2;\n        while (n % i == 0) {\n            factors.add(i);\n            n /= i;\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int i = 2;\n        while (n % i == 0) {\n            factors.add(i);\n            n /= i;\n        }\n        if (n != 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n        List<Integer> factors = new ArrayList<>();\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                factors.add(i);\n                n /= i;\n            }\n            i++;\n        }\n        if (n > 1) {\n            factors.add(n);\n        }\n        return factors;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        Map<Integer, Integer> map = new HashMap<>();\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (map.containsKey(numbers.get(i))) {\n                map.put(numbers.get(i), map.get(numbers.get(i)) + 1);\n            } else {\n                map.put(numbers.get(i), 1);\n            }\n        }\n        for (int i = 0; i < numbers.size(); i++) {\n            if (map.get(numbers.get(i)) == 1) {\n                result.add(numbers.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        Map<Integer, Integer> map = new HashMap<>();\n        List<Integer> result = new ArrayList<>();\n        for (int number : numbers) {\n            if (map.containsKey(number)) {\n                map.put(number, map.get(number) + 1);\n            } else {\n                map.put(number, 1);\n            }\n        }\n        for (Integer number : map.keySet()) {\n            if (map.get(number) == 1) {\n                result.add(number);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        Set<Integer> set = new HashSet<>();\n        return numbers.stream().filter(x -> !set.contains(x)).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int num : numbers) {\n            map.put(num, map.getOrDefault(num, 0) + 1);\n        }\n        return map.entrySet().stream()\n                .filter(e -> e.getValue() > 1)\n                .map(Map.Entry::getKey)\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        Map<Integer, Integer> map = new HashMap<>();\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (map.containsKey(numbers.get(i))) {\n                map.put(numbers.get(i), map.get(numbers.get(i)) + 1);\n            } else {\n                map.put(numbers.get(i), 1);\n            }\n        }\n        for (int i = 0; i < numbers.size(); i++) {\n            if (map.get(numbers.get(i)) == 1) {\n                result.add(numbers.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        return numbers.stream().distinct().collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        return numbers.stream().distinct().collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        Map<Integer, Integer> map = new HashMap<>();\n        List<Integer> result = new ArrayList<>();\n        for (int number : numbers) {\n            if (map.containsKey(number)) {\n                map.put(number, map.get(number) + 1);\n            } else {\n                map.put(number, 1);\n            }\n        }\n        for (int number : map.keySet()) {\n            if (map.get(number) == 1) {\n                result.add(number);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        return numbers.stream().distinct().collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        Set<Integer> set = new HashSet<>();\n        for (int i : numbers) {\n            if (set.contains(i)) {\n                set.remove(i);\n            } else {\n                set.add(i);\n            }\n        }\n        return set.stream().collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        Map<Integer, Integer> map = new HashMap<>();\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n            if (map.containsKey(numbers.get(i))) {\n                map.put(numbers.get(i), map.get(numbers.get(i)) + 1);\n            } else {\n                map.put(numbers.get(i), 1);\n            }\n        }\n        for (int i = 0; i < numbers.size(); i++) {\n            if (map.get(numbers.get(i)) == 1) {\n                result.add(numbers.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        return numbers.stream().distinct().collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        Map<Integer, Integer> map = new HashMap<>();\n        for (Integer number : numbers) {\n            map.put(number, map.getOrDefault(number, 0) + 1);\n        }\n        return map.entrySet().stream()\n                .filter(entry -> entry.getValue() > 1)\n                .map(Map.Entry::getKey)\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        Set<Integer> set = new HashSet<>();\n        for (int number : numbers) {\n            if (set.contains(number)) {\n                set.remove(number);\n            } else {\n                set.add(number);\n            }\n        }\n        return set.stream().collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        Set<Integer> set = new HashSet<>();\n        return numbers.stream().filter(x -> !set.contains(x)).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        Set<Integer> set = new HashSet<>();\n        return numbers.stream().filter(x -> !set.contains(x)).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        Set<Integer> set = new HashSet<>();\n        return numbers.stream().filter(n -> !set.add(n)).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        Map<Integer, Integer> map = new HashMap<>();\n        List<Integer> result = new ArrayList<>();\n        for (Integer number : numbers) {\n            if (map.containsKey(number)) {\n                map.put(number, map.get(number) + 1);\n            } else {\n                map.put(number, 1);\n            }\n        }\n        for (Integer number : map.keySet()) {\n            if (map.get(number) == 1) {\n                result.add(number);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        return numbers.stream().distinct().collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n        Set<Integer> set = new HashSet<>();\n        List<Integer> result = new ArrayList<>();\n        for (int number : numbers) {\n            if (set.contains(number)) {\n                set.remove(number);\n            } else {\n                set.add(number);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for(int i = 0; i < chars.length; i++) {\n            if(Character.isLowerCase(chars[i])) {\n                chars[i] = Character.toUpperCase(chars[i]);\n            } else {\n                chars[i] = Character.toLowerCase(chars[i]);\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i] = Character.toUpperCase(chars[i]);\n            } else {\n                chars[i] = Character.toLowerCase(chars[i]);\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i] = Character.toUpperCase(chars[i]);\n            } else {\n                chars[i] = Character.toLowerCase(chars[i]);\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] charArray = string.toCharArray();\n        for (int i = 0; i < charArray.length; i++) {\n            if (Character.isLowerCase(charArray[i])) {\n                charArray[i] = Character.toUpperCase(charArray[i]);\n            } else {\n                charArray[i] = Character.toLowerCase(charArray[i]);\n            }\n        }\n        return new String(charArray);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i] = Character.toUpperCase(chars[i]);\n            } else {\n                chars[i] = Character.toLowerCase(chars[i]);\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i] = Character.toUpperCase(chars[i]);\n            } else {\n                chars[i] = Character.toLowerCase(chars[i]);\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i] = Character.toUpperCase(chars[i]);\n            } else {\n                chars[i] = Character.toLowerCase(chars[i]);\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        String str = string.toLowerCase();\n        char[] chars = str.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i] = Character.toUpperCase(chars[i]);\n            } else {\n                chars[i] = Character.toLowerCase(chars[i]);\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] charArray = string.toCharArray();\n        for (int i = 0; i < charArray.length; i++) {\n            if (Character.isLowerCase(charArray[i])) {\n                charArray[i] = Character.toUpperCase(charArray[i]);\n            } else {\n                charArray[i] = Character.toLowerCase(charArray[i]);\n            }\n        }\n        return new String(charArray);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i] = Character.toUpperCase(chars[i]);\n            } else {\n                chars[i] = Character.toLowerCase(chars[i]);\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for(int i = 0; i < chars.length; i++) {\n            if(Character.isLowerCase(chars[i])) {\n                chars[i] = Character.toUpperCase(chars[i]);\n            } else {\n                chars[i] = Character.toLowerCase(chars[i]);\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i] = Character.toUpperCase(chars[i]);\n            } else {\n                chars[i] = Character.toLowerCase(chars[i]);\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i] = Character.toUpperCase(chars[i]);\n            } else {\n                chars[i] = Character.toLowerCase(chars[i]);\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i] = Character.toUpperCase(chars[i]);\n            } else {\n                chars[i] = Character.toLowerCase(chars[i]);\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] charArray = string.toCharArray();\n        for (int i = 0; i < charArray.length; i++) {\n            if (charArray[i] >= 'a' && charArray[i] <= 'z') {\n                charArray[i] = (char)(charArray[i] + 32);\n            }\n            else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n                charArray[i] = (char)(charArray[i] - 32);\n            }\n        }\n        return new String(charArray);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i] = Character.toUpperCase(chars[i]);\n            } else {\n                chars[i] = Character.toLowerCase(chars[i]);\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i] = Character.toUpperCase(chars[i]);\n            } else {\n                chars[i] = Character.toLowerCase(chars[i]);\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i] = Character.toUpperCase(chars[i]);\n            } else {\n                chars[i] = Character.toLowerCase(chars[i]);\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i] = Character.toUpperCase(chars[i]);\n            } else {\n                chars[i] = Character.toLowerCase(chars[i]);\n            }\n        }\n        return new String(chars);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLowerCase(chars[i])) {\n                chars[i] = Character.toUpperCase(chars[i]);\n            } else {\n                chars[i] = Character.toLowerCase(chars[i]);\n            }\n        }\n        return new String(chars);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n        StringBuilder sb = new StringBuilder();\n        for (String s : strings) {\n            sb.append(s);\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream()\n                .filter(s -> s.startsWith(prefix))\n                .collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toList());\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x >= 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x >= 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x >= 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(i -> i >= 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x > 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x >= 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(n -> n >= 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(n -> n >= 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(n -> n >= 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(n -> n >= 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(n -> n > 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x >= 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(n -> n > 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x >= 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x >= 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(n -> n >= 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x >= 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x >= 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x >= 0).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n        return l.stream().filter(x -> x > 0).collect(Collectors.toList());\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n == 1 || n == 0) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n <= 1)\n            return false;\n        if (n == 2)\n            return true;\n        if (n % 2 == 0)\n            return false;\n        int i = 3;\n        while (i * i <= n) {\n            if (n % i == 0)\n                return false;\n            i += 2;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        int i = 3;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                return false;\n            }\n            i += 2;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n <= 1) return false;\n        if (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if(n == 1 || n == 0)\n            return false;\n        for(int i = 2; i <= Math.sqrt(n); i++)\n            if(n % i == 0)\n                return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n == 1) return false;\n        if (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n == 1 || n == 0) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        int i = 3;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                return false;\n            }\n            i += 2;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n <= 1)\n            return false;\n        if (n == 2)\n            return true;\n        if (n % 2 == 0)\n            return false;\n        int i = 3;\n        while (i * i <= n) {\n            if (n % i == 0)\n                return false;\n            i += 2;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n == 1)\n            return false;\n        if (n == 2)\n            return true;\n        if (n % 2 == 0)\n            return false;\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0)\n                return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        int i = 3;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                return false;\n            }\n            i += 2;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if(n <= 1)\n            return false;\n        if(n == 2)\n            return true;\n        if(n % 2 == 0)\n            return false;\n        int i = 3;\n        while(i * i <= n) {\n            if(n % i == 0)\n                return false;\n            i += 2;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n == 1) return false;\n        if (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n <= 1)\n            return false;\n        if (n == 2)\n            return true;\n        if (n % 2 == 0)\n            return false;\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0)\n                return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if (n == 1) return false;\n        if (n == 2) return true;\n        if (n % 2 == 0) return false;\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n        if(n <= 1) return false;\n        for(int i = 2; i <= Math.sqrt(n); i++) {\n            if(n % i == 0) return false;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"xs must have even number of coefficients\");\n        }\n        double maxCoeff = xs.get(xs.size() - 1);\n        for (int i = xs.size() - 2; i >= 0; i--) {\n            if (xs.get(i) > maxCoeff) {\n                maxCoeff = xs.get(i);\n            }\n        }\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(maxCoeff, i);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"xs must have even number of coefficients\");\n        }\n        double maxCoeff = xs.get(xs.size() - 1);\n        double minCoeff = xs.get(0);\n        for (int i = 0; i < xs.size() - 1; i++) {\n            if (xs.get(i) > maxCoeff) {\n                maxCoeff = xs.get(i);\n            }\n            if (xs.get(i) < minCoeff) {\n                minCoeff = xs.get(i);\n            }\n        }\n        double x = (maxCoeff - minCoeff) / 2;\n        return poly(xs, x);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"xs must have even number of coefficients\");\n        }\n        double result = 0;\n        for (int i = 0; i < xs.size(); i += 2) {\n            result += xs.get(i) * Math.pow(xs.get(i + 1), i / 2);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"xs must have even number of coefficients\");\n        }\n        double result = 0;\n        for (int i = 0; i < xs.size() / 2; i++) {\n            result += xs.get(i) * Math.pow(i, 2);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"xs must have even number of coefficients\");\n        }\n        double maxCoeff = xs.get(xs.size() - 1);\n        for (int i = xs.size() - 2; i >= 0; i--) {\n            if (xs.get(i) > maxCoeff) {\n                maxCoeff = xs.get(i);\n            }\n        }\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(maxCoeff, i);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"xs must have even number of coefficients\");\n        }\n        double maxCoeff = xs.get(xs.size() - 1);\n        double minCoeff = xs.get(0);\n        for (int i = 0; i < xs.size() - 1; i++) {\n            if (xs.get(i) > maxCoeff) {\n                maxCoeff = xs.get(i);\n            }\n            if (xs.get(i) < minCoeff) {\n                minCoeff = xs.get(i);\n            }\n        }\n        double x = (maxCoeff - minCoeff) / 2;\n        return poly(xs, x);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"xs must have even number of coefficients\");\n        }\n        double result = 0;\n        for (int i = 0; i < xs.size(); i += 2) {\n            result += xs.get(i) * Math.pow(xs.get(i + 1), i / 2);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"xs must have even number of coefficients\");\n        }\n        if (xs.size() == 0) {\n            return 0;\n        }\n        double maxCoeff = xs.get(xs.size() - 1);\n        for (int i = xs.size() - 2; i >= 0; i--) {\n            if (xs.get(i) > maxCoeff) {\n                maxCoeff = xs.get(i);\n            }\n        }\n        double x = 0;\n        while (Math.abs(poly(xs, x)) > 1e-10) {\n            x += 1e-10;\n        }\n        return x;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"xs must have even number of coefficients\");\n        }\n        double result = 0;\n        for (int i = 0; i < xs.size(); i += 2) {\n            result += xs.get(i) * Math.pow(xs.get(i + 1), i / 2);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"xs must have even number of coefficients\");\n        }\n        double result = 0;\n        for (int i = 0; i < xs.size(); i += 2) {\n            result += xs.get(i) * Math.pow(xs.get(i + 1), i / 2);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"xs must have even number of coefficients\");\n        }\n        double result = 0;\n        for (int i = 0; i < xs.size(); i += 2) {\n            result += xs.get(i) * Math.pow(xs.get(i + 1), i / 2);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"xs must have even number of coefficients\");\n        }\n        double result = 0;\n        for (int i = 0; i < xs.size(); i += 2) {\n            result += xs.get(i) * Math.pow(xs.get(i + 1), i / 2);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"xs must have even number of coefficients\");\n        }\n        if (xs.size() == 0) {\n            return 0;\n        }\n        double maxCoeff = xs.get(xs.size() - 1);\n        for (int i = xs.size() - 2; i >= 0; i--) {\n            if (xs.get(i) > maxCoeff) {\n                maxCoeff = xs.get(i);\n            }\n        }\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(maxCoeff, i);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"xs must have even number of coefficients\");\n        }\n        double maxCoeff = xs.get(xs.size() - 1);\n        for (int i = xs.size() - 2; i >= 0; i--) {\n            if (xs.get(i) > maxCoeff) {\n                maxCoeff = xs.get(i);\n            }\n        }\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(maxCoeff, i);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"xs must have even number of coefficients\");\n        }\n        double result = 0;\n        for (int i = 0; i < xs.size(); i += 2) {\n            result += xs.get(i) * Math.pow(xs.get(i + 1), i / 2);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"xs must have even number of coefficients\");\n        }\n        if (xs.get(0) == 0) {\n            throw new IllegalArgumentException(\"xs must have non zero coefficients\");\n        }\n        double x = 0;\n        for (int i = 0; i < xs.size() - 1; i += 2) {\n            x = x - (xs.get(i + 1) / xs.get(i));\n        }\n        return x;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"xs must have even number of coefficients\");\n        }\n        if (xs.size() == 0) {\n            return 0;\n        }\n        double max = xs.get(xs.size() - 1);\n        for (int i = xs.size() - 2; i >= 0; i--) {\n            if (xs.get(i) > max) {\n                max = xs.get(i);\n            }\n        }\n        double min = xs.get(0);\n        for (int i = 1; i < xs.size(); i++) {\n            if (xs.get(i) < min) {\n                min = xs.get(i);\n            }\n        }\n        double delta = max - min;\n        double x = (delta / 2) + min;\n        return poly(xs, x);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            throw new IllegalArgumentException(\"xs must have even number of coefficients\");\n        }\n        double max = xs.get(xs.size() - 1);\n        for (int i = xs.size() - 2; i >= 0; i--) {\n            if (xs.get(i) > max) {\n                max = xs.get(i);\n            }\n        }\n        for (int i = 0; i < xs.size(); i++) {\n            if (xs.get(i) == 0) {\n                return xs.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            return -1;\n        }\n        double maxCoeff = xs.get(xs.size() - 1);\n        for (int i = xs.size() - 2; i >= 0; i--) {\n            if (xs.get(i) > maxCoeff) {\n                maxCoeff = xs.get(i);\n            }\n        }\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(maxCoeff, i);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n        if (xs.size() % 2 != 0) {\n            return -1;\n        }\n        double maxCoeff = xs.get(xs.size() - 1);\n        double minCoeff = xs.get(0);\n        for (int i = 1; i < xs.size(); i++) {\n            if (xs.get(i) > maxCoeff) {\n                maxCoeff = xs.get(i);\n            }\n            if (xs.get(i) < minCoeff) {\n                minCoeff = xs.get(i);\n            }\n        }\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(minCoeff, i);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 3 != 0) {\n                l1.add(l.get(i));\n            }\n        }\n        Collections.sort(l1);\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        List<Integer> l2 = new ArrayList<Integer>();\n        List<Integer> l3 = new ArrayList<Integer>();\n        for(int i = 0; i < l.size(); i++) {\n            if(l.get(i) % 3 == 0) {\n                l1.add(l.get(i));\n            } else if(l.get(i) % 3 == 1) {\n                l2.add(l.get(i));\n            } else {\n                l3.add(l.get(i));\n            }\n        }\n        l1.sort(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                return o1.compareTo(o2);\n            }\n        });\n        l2.sort(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                return o1.compareTo(o2);\n            }\n        });\n        l3.sort(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                return o1.compareTo(o2);\n            }\n        });\n        l1.addAll(l2);\n        l1.addAll(l3);\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        List<Integer> l2 = new ArrayList<Integer>();\n        List<Integer> l3 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 3 == 0) {\n                l1.add(l.get(i));\n            } else if (l.get(i) % 3 == 1) {\n                l2.add(l.get(i));\n            } else {\n                l3.add(l.get(i));\n            }\n        }\n        l1.sort(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                return o1 - o2;\n            }\n        });\n        l2.sort(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                return o1 - o2;\n            }\n        });\n        l3.sort(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                return o1 - o2;\n            }\n        });\n        l1.addAll(l2);\n        l1.addAll(l3);\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 3 != 0) {\n                l1.add(l.get(i));\n            }\n        }\n        Collections.sort(l1);\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        List<Integer> l2 = new ArrayList<Integer>();\n        List<Integer> l3 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 3 == 0) {\n                l1.add(l.get(i));\n            } else if (l.get(i) % 3 == 1) {\n                l2.add(l.get(i));\n            } else {\n                l3.add(l.get(i));\n            }\n        }\n        l1.addAll(l2);\n        l1.addAll(l3);\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 3 != 0) {\n                l1.add(l.get(i));\n            }\n        }\n        Collections.sort(l1);\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 3 != 0) {\n                l1.add(l.get(i));\n            }\n        }\n        Collections.sort(l1);\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        List<Integer> l2 = new ArrayList<Integer>();\n        List<Integer> l3 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 3 == 0) {\n                l1.add(l.get(i));\n            } else if (l.get(i) % 3 == 1) {\n                l2.add(l.get(i));\n            } else {\n                l3.add(l.get(i));\n            }\n        }\n        l1.addAll(l2);\n        l1.addAll(l3);\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        List<Integer> l2 = new ArrayList<Integer>();\n        List<Integer> l3 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 3 == 0) {\n                l1.add(l.get(i));\n            } else if (l.get(i) % 3 == 1) {\n                l2.add(l.get(i));\n            } else {\n                l3.add(l.get(i));\n            }\n        }\n        l1.addAll(l2);\n        l1.addAll(l3);\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        List<Integer> l2 = new ArrayList<Integer>();\n        List<Integer> l3 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 3 == 0) {\n                l1.add(l.get(i));\n            } else if (i % 3 == 1) {\n                l2.add(l.get(i));\n            } else {\n                l3.add(l.get(i));\n            }\n        }\n        l1.sort(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                return o1 - o2;\n            }\n        });\n        l2.sort(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                return o1 - o2;\n            }\n        });\n        l3.sort(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                return o1 - o2;\n            }\n        });\n        l1.addAll(l2);\n        l1.addAll(l3);\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        List<Integer> l2 = new ArrayList<Integer>();\n        List<Integer> l3 = new ArrayList<Integer>();\n        for(int i = 0; i < l.size(); i++) {\n            if(i % 3 == 0) {\n                l1.add(l.get(i));\n            }\n            else if(i % 3 == 1) {\n                l2.add(l.get(i));\n            }\n            else {\n                l3.add(l.get(i));\n            }\n        }\n        l1.sort(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                return o1 - o2;\n            }\n        });\n        l2.sort(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                return o1 - o2;\n            }\n        });\n        l3.sort(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                return o1 - o2;\n            }\n        });\n        return l1.size() == 0 ? l2 : l1.size() == 0 ? l3 : l1.size() == l2.size() ? l1 : l2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        List<Integer> l2 = new ArrayList<Integer>();\n        List<Integer> l3 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 3 == 0) {\n                l1.add(l.get(i));\n            } else if (l.get(i) % 3 == 1) {\n                l2.add(l.get(i));\n            } else {\n                l3.add(l.get(i));\n            }\n        }\n        l1.addAll(l2);\n        l1.addAll(l3);\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 3 != 0) {\n                l1.add(l.get(i));\n            }\n        }\n        Collections.sort(l1);\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<>();\n        for(int i = 0; i < l.size(); i++) {\n            if(l.get(i) % 3 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        Collections.sort(l1);\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 3 != 0) {\n                l1.add(l.get(i));\n            }\n        }\n        Collections.sort(l1);\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 3 != 0) {\n                l1.add(l.get(i));\n            }\n        }\n        Collections.sort(l1);\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        List<Integer> l2 = new ArrayList<Integer>();\n        List<Integer> l3 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 3 == 0) {\n                l1.add(l.get(i));\n            } else if (l.get(i) % 3 == 1) {\n                l2.add(l.get(i));\n            } else {\n                l3.add(l.get(i));\n            }\n        }\n        l1.addAll(l2);\n        l1.addAll(l3);\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<>();\n        List<Integer> l2 = new ArrayList<>();\n        List<Integer> l3 = new ArrayList<>();\n        for(int i = 0; i < l.size(); i++) {\n            if(l.get(i) % 3 == 0) {\n                l1.add(l.get(i));\n            }\n            else if(l.get(i) % 3 == 1) {\n                l2.add(l.get(i));\n            }\n            else {\n                l3.add(l.get(i));\n            }\n        }\n        l1.addAll(l2);\n        l1.addAll(l3);\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        List<Integer> l2 = new ArrayList<Integer>();\n        List<Integer> l3 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 3 == 0) {\n                l1.add(l.get(i));\n            } else if (l.get(i) % 3 == 1) {\n                l2.add(l.get(i));\n            } else {\n                l3.add(l.get(i));\n            }\n        }\n        l1.sort(new Comparator<Integer>() {\n            public int compare(Integer o1, Integer o2) {\n                return o1 - o2;\n            }\n        });\n        l2.sort(new Comparator<Integer>() {\n            public int compare(Integer o1, Integer o2) {\n                return o1 - o2;\n            }\n        });\n        l3.sort(new Comparator<Integer>() {\n            public int compare(Integer o1, Integer o2) {\n                return o1 - o2;\n            }\n        });\n        l1.addAll(l2);\n        l1.addAll(l3);\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) % 3 != 0) {\n                l1.add(l.get(i));\n            }\n        }\n        Collections.sort(l1);\n        return l1;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> s = new HashSet<Integer>();\n        List<Integer> res = new ArrayList<Integer>();\n        for (int i : l) {\n            if (!s.contains(i)) {\n                s.add(i);\n                res.add(i);\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> s = new HashSet<Integer>();\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i : l) {\n            if (!s.contains(i)) {\n                result.add(i);\n                s.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> set = new HashSet<Integer>();\n        List<Integer> res = new ArrayList<Integer>();\n        for (int i : l) {\n            if (!set.contains(i)) {\n                set.add(i);\n                res.add(i);\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (set.add(l.get(i))) {\n                result.add(l.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> s = new HashSet<Integer>();\n        for (int i : l) {\n            s.add(i);\n        }\n        return new ArrayList<Integer>(s);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        // write your code here\n        List<Integer> result = new ArrayList<Integer>();\n        Set<Integer> set = new HashSet<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (!set.contains(l.get(i))) {\n                result.add(l.get(i));\n                set.add(l.get(i));\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        List<Integer> result = new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n        for (int i : l) {\n            if (!set.contains(i)) {\n                result.add(i);\n                set.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        List<Integer> unique = new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n        for (int i : l) {\n            if (!set.contains(i)) {\n                unique.add(i);\n                set.add(i);\n            }\n        }\n        return unique;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> s = new HashSet<>();\n        List<Integer> res = new ArrayList<>();\n        for (int i : l) {\n            if (!s.contains(i)) {\n                res.add(i);\n                s.add(i);\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        List<Integer> res = new ArrayList<Integer>();\n        Set<Integer> set = new HashSet<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (!set.contains(l.get(i))) {\n                set.add(l.get(i));\n                res.add(l.get(i));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> s = new HashSet<Integer>();\n        List<Integer> res = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (!s.contains(l.get(i))) {\n                s.add(l.get(i));\n                res.add(l.get(i));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> s = new HashSet<>();\n        List<Integer> res = new ArrayList<>();\n        for (int i : l) {\n            if (!s.contains(i)) {\n                s.add(i);\n                res.add(i);\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n        Set<Integer> set = new HashSet<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (!set.contains(l.get(i))) {\n                result.add(l.get(i));\n                set.add(l.get(i));\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        // write your code here\n        List<Integer> result = new ArrayList<>();\n        Set<Integer> set = new HashSet<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (!set.contains(l.get(i))) {\n                result.add(l.get(i));\n                set.add(l.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n        Set<Integer> set = new HashSet<Integer>();\n        for (int i : l) {\n            if (!set.contains(i)) {\n                result.add(i);\n                set.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> s = new HashSet<>();\n        for (int i : l) {\n            if (!s.add(i)) {\n                s.remove(i);\n            }\n        }\n        return new ArrayList<>(s);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n        Set<Integer> set = new HashSet<Integer>();\n        for (int i : l) {\n            if (!set.contains(i)) {\n                set.add(i);\n                result.add(i);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        List<Integer> result = new ArrayList<Integer>();\n        Set<Integer> set = new HashSet<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (!set.contains(l.get(i))) {\n                result.add(l.get(i));\n                set.add(l.get(i));\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        List<Integer> res = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (map.containsKey(l.get(i))) {\n                map.put(l.get(i), map.get(l.get(i))+1);\n            } else {\n                map.put(l.get(i), 1);\n            }\n        }\n        for (int i = 0; i < map.size(); i++) {\n            if (map.get(i) == 1) {\n                res.add(i);\n            }\n        }\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n        Set<Integer> set = new HashSet<Integer>();\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (!set.contains(l.get(i))) {\n                set.add(l.get(i));\n                result.add(l.get(i));\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 0) {\n                count++;\n            }\n            if (i % 13 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 0) {\n                count++;\n            }\n            if (i % 13 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 0) {\n                count++;\n            }\n            if (i % 13 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 11 == 0) {\n                count++;\n            }\n            if (i % 13 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for(int i = 0; i < l.size(); i++) {\n            if(i % 2 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for(int i = 0; i < l.size(); i++) {\n            if(i % 2 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        return l1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l2 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l2.add(l.get(i));\n            }\n        }\n        return l2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n        List<Integer> l1 = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n            if (i % 2 == 0) {\n                l1.add(l.get(i));\n            }\n        }\n        return l1;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(0) + groups.get(i).substring(1));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        String s = \"aabccba\";\n        System.out.println(new Solution().encodeCyclic(s));\n        System.out.println(new Solution().decodeCyclic(s));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        String s = \"aab\";\n        System.out.println(s + \" : \" + Solution.encodeCyclic(s));\n        System.out.println(s + \" : \" + Solution.decodeCyclic(s));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(0) + groups.get(i).substring(1));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        String s = \"aab\";\n        System.out.println(s);\n        System.out.println(encodeCyclic(s));\n        System.out.println(decodeCyclic(encodeCyclic(s)));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        String s = \"a\";\n        System.out.println(s + \" \" + Solution.encodeCyclic(s));\n        System.out.println(s + \" \" + Solution.decodeCyclic(Solution.encodeCyclic(s)));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        String s = \"aab\";\n        System.out.println(s + \" \" + decodeCyclic(encodeCyclic(s)));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        String s = \"aabccba\";\n        System.out.println(s);\n        System.out.println(encodeCyclic(s));\n        System.out.println(decodeCyclic(encodeCyclic(s)));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(0) + groups.get(i).substring(1));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(0) + groups.get(i).substring(1));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).charAt(0) + groups.get(i).substring(1));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        String s = \"aab\";\n        System.out.println(new Solution().encodeCyclic(s));\n        System.out.println(new Solution().decodeCyclic(s));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.encodeCyclic(\"a\"));\n        System.out.println(s.decodeCyclic(\"a\"));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.encodeCyclic(\"aab\"));\n        System.out.println(s.decodeCyclic(\"aab\"));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split encoded string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split encoded string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // reverse each group.\n        for (int i = 0; i < groups.size(); i++) {\n            groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n        }\n        // join groups back to string.\n        return String.join(\"\", groups);\n    }\n\n    public static void main(String[] args) {\n        String s = \"aabccba\";\n        System.out.println(new Solution().encodeCyclic(s));\n        System.out.println(new Solution().decodeCyclic(s));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        int[] fib = new int[n+1];\n        fib[0] = 0;\n        fib[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            fib[i] = fib[i-1] + fib[i-2];\n        }\n        return fib[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        if (n == 1) {\n            return 2;\n        }\n        if (n == 2) {\n            return 3;\n        }\n        int[] fib = new int[n+1];\n        fib[0] = 1;\n        fib[1] = 2;\n        for (int i = 2; i <= n; i++) {\n            fib[i] = fib[i-1] + fib[i-2];\n        }\n        return fib[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        if (n == 1) {\n            return 2;\n        }\n        if (n == 2) {\n            return 3;\n        }\n        int[] prime = new int[n];\n        prime[0] = 2;\n        prime[1] = 3;\n        for (int i = 2; i < n; i++) {\n            if (prime[i] == 0) {\n                for (int j = 2; j * i < n; j++) {\n                    prime[i] = j;\n                }\n            }\n        }\n        return prime[n - 1];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        int a = 0, b = 1, c = 0;\n        for (int i = 0; i < n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        int[] primes = new int[n+1];\n        primes[0] = 2;\n        primes[1] = 3;\n        for(int i = 2; i <= n; i++) {\n            if(primes[i] == 0) {\n                primes[i] = i;\n            }\n            else {\n                for(int j = 0; j < i; j++) {\n                    if(primes[j] * primes[i] == i) {\n                        primes[i] = i;\n                        break;\n                    }\n                }\n            }\n        }\n        return primes[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        int a = 0, b = 1, c = 0;\n        for (int i = 0; i < n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] fib = new int[n + 1];\n        fib[0] = 0;\n        fib[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2];\n        }\n        return fib[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] primeFactors = new int[n];\n        primeFactors[0] = 2;\n        primeFactors[1] = 1;\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                primeFactors[i] = primeFactors[i - 1] + primeFactors[i / i];\n            }\n        }\n        return primeFactors[n - 1];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        int a = 0, b = 1, c = 0, d = 1;\n        while (n > 0) {\n            if (n % 2 == 0) {\n                c = a + b;\n                a = b;\n                b = c;\n            }\n            n = n / 2;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        int[] f = new int[n+1];\n        f[0] = 0;\n        f[1] = 1;\n        for(int i = 2; i <= n; i++) {\n            f[i] = f[i-1] + f[i-2];\n        }\n        return f[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        int a = 0, b = 1, c = 0, d = 1;\n        while (n > 0) {\n            if (n % 2 == 0) {\n                c = a + b;\n                a = b;\n                b = c;\n            }\n            n = n / 2;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        int[] f = new int[n+1];\n        f[0] = 0;\n        f[1] = 1;\n        for(int i = 2; i <= n; i++) {\n            f[i] = f[i-1] + f[i-2];\n        }\n        return f[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        int[] fib = new int[n+1];\n        fib[0] = 0;\n        fib[1] = 1;\n        for(int i=2; i<=n; i++) {\n            fib[i] = fib[i-1] + fib[i-2];\n        }\n        return fib[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        if(n == 1 || n == 2)\n            return n;\n        int[] fib = new int[n+1];\n        fib[0] = 1;\n        fib[1] = 1;\n        for(int i = 2; i <= n; i++) {\n            fib[i] = fib[i-1] + fib[i-2];\n        }\n        return fib[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        if(n == 1 || n == 2) {\n            return n;\n        }\n        int[] fib = new int[n+1];\n        fib[0] = 1;\n        fib[1] = 1;\n        for(int i = 2; i <= n; i++) {\n            fib[i] = fib[i-1] + fib[i-2];\n        }\n        return fib[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        if (n == 1)\n            return 2;\n        if (n == 2)\n            return 3;\n        int p = 2;\n        int q = 3;\n        int r = 5;\n        while (p <= n) {\n            if (isPrime(p)) {\n                p += q;\n                q += r;\n                r += 2;\n            } else {\n                p += 2;\n            }\n        }\n        return r;\n    }\n\n    /**\n    isPrime returns true if n is a prime number.\n    >>> isPrime(2)\n    true\n    >>> isPrime(3)\n    true\n    >>> isPrime(4)\n    true\n    >>> isPrime(5)\n    true\n    >>> isPrime(6)\n    false\n    >>> isPrime(7)\n    false\n    >>> isPrime(8)\n    false\n    >>> isPrime(9)\n    false\n    >>> isPrime(10)\n    false\n    */\n    public boolean isPrime(int n) {\n        if (n <= 1)\n            return false;\n        if (n == 2)\n            return true;\n        if (n % 2 == 0)\n            return false;\n        int p = 3;\n        while (p * p <= n) {\n            if (n % p == 0)\n                return false;\n            p += 2;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        int a = 0, b = 1, c = 0;\n        int i = 0;\n        while(i < n) {\n            c = a + b;\n            a = b;\n            b = c;\n            i++;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        int[] f = new int[n+1];\n        f[0] = 0;\n        f[1] = 1;\n        for(int i=2; i<=n; i++) {\n            f[i] = f[i-1] + f[i-2];\n        }\n        return f[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        int[] primes = new int[n+1];\n        primes[0] = 2;\n        primes[1] = 3;\n        for (int i = 2; i <= n; i++) {\n            if (primes[i] == 0) {\n                primes[i] = i;\n            } else {\n                for (int j = 0; j < i; j++) {\n                    if (primes[j] == i) {\n                        primes[i] = i;\n                        break;\n                    }\n                }\n            }\n        }\n        return primes[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n        int[] f = new int[n+1];\n        f[0] = 0;\n        f[1] = 1;\n        for(int i = 2; i <= n; i++) {\n            f[i] = f[i-1] + f[i-2];\n        }\n        return f[n];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        int diff = 0;\n        for (int i = 0; i < l.size(); i++) {\n            diff += l.get(i);\n            if (diff == sum) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        for (int i = 0; i < l.size(); i++) {\n            if (sum - l.get(i) == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        for (int i = 0; i < l.size(); i++) {\n            if (sum == l.get(i)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        for (int i = 0; i < l.size(); i++) {\n            if (sum == l.get(i)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        int diff = 0;\n        for (int i = 0; i < l.size(); i++) {\n            diff += l.get(i);\n        }\n        if (diff == sum) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        for (int i = 0; i < l.size(); i++) {\n            if (sum - l.get(i) == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        for (int i = 0; i < l.size(); i++) {\n            if (sum == 0) {\n                return true;\n            }\n            sum -= l.get(i);\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        for (int i = 0; i < l.size(); i++) {\n            if (sum == l.get(i)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        for (int i = 0; i < l.size(); i++) {\n            if (sum == 0) {\n                return true;\n            }\n            sum -= l.get(i);\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        int diff = 0;\n        for (int i = 0; i < l.size(); i++) {\n            diff += l.get(i);\n        }\n        if (diff == sum) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        for (int i = 0; i < l.size(); i++) {\n            if (sum - l.get(i) == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        for (int i = 0; i < l.size(); i++) {\n            if (sum - l.get(i) == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        int count = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (sum - l.get(i) == 0) {\n                count++;\n            }\n        }\n        return count == 3;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        Set<Integer> set = new HashSet<Integer>();\n        for (int i : l) {\n            set.add(i);\n        }\n        if (set.size() == 3) {\n            for (int i : l) {\n                if (set.contains(i)) {\n                    set.remove(i);\n                }\n            }\n            return set.size() == 0;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            for (int i = 0; i < l.size(); i++) {\n                if (sum == l.get(i)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            for (int i = 0; i < l.size(); i++) {\n                if (l.get(i) != 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            for (int i = 0; i < l.size(); i++) {\n                if (l.get(i) != 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        for (int i = 0; i < l.size(); i++) {\n            if (sum - l.get(i) == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        Set<Integer> set = new HashSet<Integer>();\n        for (int i : l) {\n            set.add(i);\n        }\n        if (set.size() == 3) {\n            for (int i : set) {\n                if (set.contains(i)) {\n                    set.remove(i);\n                }\n            }\n            return set.size() == 0;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        int count = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (sum - l.get(i) == 0) {\n                count++;\n            }\n        }\n        return count == 3;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        int[] left = new int[n];\n        int[] right = new int[n];\n        for (int i = 0; i < n; i++) {\n            left[i] = i;\n            right[i] = n - 1 - i;\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (left[i] == right[j]) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == j) {\n                    continue;\n                }\n                if (i > j) {\n                    if (i + j == n - 1) {\n                        count++;\n                    }\n                } else {\n                    if (i + j == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        int[] left = new int[n];\n        int[] right = new int[n];\n        for (int i = 0; i < n; i++) {\n            left[i] = i;\n            right[i] = n - i - 1;\n        }\n        while (true) {\n            int i = 0;\n            int j = 0;\n            while (i < n && j < n) {\n                if (left[i] < right[j]) {\n                    i++;\n                } else {\n                    j++;\n                }\n            }\n            if (i == n) {\n                break;\n            }\n            int temp = left[i];\n            left[i] = right[j];\n            right[j] = temp;\n            count++;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (i == j) {\n                    continue;\n                }\n                if (i > j) {\n                    int temp = i;\n                    i = j;\n                    j = temp;\n                }\n                if (i % 2 == 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == j) {\n                    continue;\n                }\n                if (i > j) {\n                    if (i + j == n - 1) {\n                        count++;\n                    }\n                } else {\n                    if (i + j == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        int[] left = new int[n];\n        int[] right = new int[n];\n        for (int i = 0; i < n; i++) {\n            left[i] = i;\n            right[i] = n - i - 1;\n        }\n        while (true) {\n            int leftIndex = 0;\n            int rightIndex = 0;\n            int leftCollision = 0;\n            int rightCollision = 0;\n            for (int i = 0; i < n; i++) {\n                if (left[leftIndex] == right[rightIndex]) {\n                    leftCollision++;\n                    leftIndex++;\n                    rightIndex++;\n                } else if (left[leftIndex] < right[rightIndex]) {\n                    leftCollision++;\n                    leftIndex++;\n                } else {\n                    rightCollision++;\n                    rightIndex++;\n                }\n            }\n            if (leftCollision == n) {\n                break;\n            }\n            count++;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        int[] speed = new int[n];\n        for (int i = 0; i < n; i++) {\n            speed[i] = 1;\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (speed[i] == 1 && speed[j] == -1) {\n                    count++;\n                }\n                if (speed[i] == -1 && speed[j] == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        int[] left = new int[n];\n        int[] right = new int[n];\n        for (int i = 0; i < n; i++) {\n            left[i] = i;\n            right[i] = n - i - 1;\n        }\n        while (true) {\n            int leftIndex = 0;\n            int rightIndex = 0;\n            for (int i = 0; i < n; i++) {\n                if (left[leftIndex] == right[rightIndex]) {\n                    leftIndex++;\n                    rightIndex++;\n                } else if (left[leftIndex] < right[rightIndex]) {\n                    leftIndex++;\n                } else {\n                    rightIndex++;\n                }\n            }\n            if (leftIndex == n) {\n                break;\n            }\n            count++;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        int left = 0;\n        int right = n - 1;\n        while (left <= right) {\n            if (left == right) {\n                count++;\n                break;\n            }\n            if (left > right) {\n                count++;\n                left++;\n            } else {\n                count++;\n                right--;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n - i; j++) {\n                if (i == j) {\n                    continue;\n                }\n                if (i > j) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        int[] left = new int[n];\n        int[] right = new int[n];\n        for(int i = 0; i < n; i++) {\n            left[i] = i;\n            right[i] = n - i - 1;\n        }\n        while(true) {\n            int i = 0;\n            int j = 0;\n            while(i < n && j < n) {\n                if(left[i] > right[j]) {\n                    i++;\n                } else if(right[j] > left[i]) {\n                    j++;\n                } else {\n                    count++;\n                    left[i] = right[j] = -1;\n                }\n            }\n            if(i == n) {\n                break;\n            }\n            i++;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (i == j) {\n                    continue;\n                }\n                if (i > j) {\n                    Collections.swap(i, j);\n                }\n                if (carCollision(i, j)) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n\n    /**\n    Check if two cars are colliding.\n    */\n    public boolean carCollision(int i, int j) {\n        int left = i;\n        int right = j;\n        while (left >= 0 && right < n && cars[left] == cars[right]) {\n            left--;\n            right++;\n        }\n        return left < 0 || right >= n;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        int[] left = new int[n];\n        int[] right = new int[n];\n        for (int i = 0; i < n; i++) {\n            left[i] = i;\n            right[i] = n - 1 - i;\n        }\n        while (true) {\n            int leftIndex = -1;\n            int rightIndex = -1;\n            for (int i = 0; i < n; i++) {\n                if (left[i] == -1) {\n                    leftIndex = i;\n                }\n                if (right[i] == -1) {\n                    rightIndex = i;\n                }\n            }\n            if (leftIndex == -1 && rightIndex == -1) {\n                break;\n            }\n            if (leftIndex == -1) {\n                leftIndex = rightIndex;\n            }\n            if (rightIndex == -1) {\n                rightIndex = leftIndex;\n            }\n            if (left[leftIndex] == right[rightIndex]) {\n                count++;\n                left[leftIndex] = -1;\n                right[rightIndex] = -1;\n            } else {\n                left[leftIndex] = right[rightIndex];\n                right[rightIndex] = leftIndex;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == j) {\n                    continue;\n                }\n                if (i > j) {\n                    if (i + j == n - 1) {\n                        count++;\n                    }\n                } else {\n                    if (i + j == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        int[] left = new int[n];\n        int[] right = new int[n];\n        for (int i = 0; i < n; i++) {\n            left[i] = i;\n            right[i] = n - 1 - i;\n        }\n        while (true) {\n            int leftIndex = 0;\n            int rightIndex = 0;\n            for (int i = 0; i < n; i++) {\n                if (left[leftIndex] < right[rightIndex]) {\n                    leftIndex++;\n                } else if (left[leftIndex] > right[rightIndex]) {\n                    rightIndex++;\n                } else {\n                    count++;\n                    leftIndex++;\n                    rightIndex++;\n                }\n            }\n            if (leftIndex == n) {\n                break;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == j) {\n                    continue;\n                }\n                if (i > j) {\n                    if (i + j == n - 1) {\n                        count++;\n                    }\n                } else {\n                    if (i + j == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        int[] left = new int[n];\n        int[] right = new int[n];\n        for (int i = 0; i < n; i++) {\n            left[i] = i;\n            right[i] = n - i - 1;\n        }\n        int leftIndex = 0;\n        int rightIndex = 0;\n        while (leftIndex < n && rightIndex < n) {\n            if (left[leftIndex] < right[rightIndex]) {\n                leftIndex++;\n            } else {\n                rightIndex++;\n            }\n            count++;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        int[] left = new int[n];\n        int[] right = new int[n];\n        for (int i = 0; i < n; i++) {\n            left[i] = i;\n            right[i] = n - 1 - i;\n        }\n        while (true) {\n            int i = 0;\n            int j = 0;\n            while (i < n && j < n) {\n                if (left[i] < right[j]) {\n                    i++;\n                } else {\n                    j++;\n                }\n            }\n            if (i == n) {\n                break;\n            }\n            count++;\n            int temp = left[i];\n            left[i] = right[j];\n            right[j] = temp;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        int[] left = new int[n];\n        int[] right = new int[n];\n        for (int i = 0; i < n; i++) {\n            left[i] = i;\n            right[i] = n - i - 1;\n        }\n        while (true) {\n            int i = 0;\n            int j = 0;\n            while (i < n && j < n) {\n                if (left[i] > right[j]) {\n                    i++;\n                } else if (left[i] < right[j]) {\n                    j++;\n                } else {\n                    count++;\n                    left[i] = right[j] = -1;\n                }\n            }\n            if (i == n) {\n                break;\n            }\n            i = 0;\n            j = 0;\n            while (i < n && j < n) {\n                if (left[i] > right[j]) {\n                    i++;\n                } else if (left[i] < right[j]) {\n                    j++;\n                } else {\n                    left[i] = right[j] = -1;\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n        int count = 0;\n        int[] left = new int[n];\n        int[] right = new int[n];\n        for (int i = 0; i < n; i++) {\n            left[i] = i;\n            right[i] = n - 1 - i;\n        }\n        while (true) {\n            int leftIndex = 0;\n            int rightIndex = 0;\n            for (int i = 0; i < n; i++) {\n                if (left[leftIndex] < right[rightIndex]) {\n                    leftIndex++;\n                } else {\n                    rightIndex++;\n                }\n            }\n            if (leftIndex == n) {\n                break;\n            }\n            count++;\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(x -> x + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(x -> x + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(x -> x + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(x -> x + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(x -> x + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(x -> x + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}", "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n        return l.stream().map(i -> i + 1).collect(Collectors.toList());\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for(int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if(sum == 0) {\n            return true;\n        }\n        for(int i = 0; i < l.size(); i++) {\n            if(sum == 0) {\n                return true;\n            }\n            sum -= l.get(i);\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        for (int i = 0; i < l.size(); i++) {\n            if (sum == l.get(i)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        for (int i = 0; i < l.size(); i++) {\n            if (sum - l.get(i) == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        // write your code here\n        int sum = 0;\n        for(int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if(sum == 0) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        for (int i = 0; i < l.size(); i++) {\n            if (sum - l.get(i) == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        for (int i = 0; i < l.size(); i++) {\n            if (sum == 0) {\n                return true;\n            }\n            sum -= l.get(i);\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        if (l.size() < 2) {\n            return false;\n        }\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        for (int i = 0; i < l.size(); i++) {\n            if (sum - l.get(i) == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        if (l.size() < 2) {\n            return false;\n        }\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        for (int i = 0; i < l.size(); i++) {\n            if (sum - l.get(i) == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        for (int i = 0; i < l.size(); i++) {\n            if (sum - l.get(i) == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        for (int i = 0; i < l.size(); i++) {\n            if (sum - l.get(i) == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n        }\n        if (sum == 0) {\n            return true;\n        }\n        for (int i = 0; i < l.size(); i++) {\n            if (sum == 0) {\n                return true;\n            }\n            sum -= l.get(i);\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String str = Integer.toString(x, base);\n        StringBuilder sb = new StringBuilder();\n        for (int i = str.length() - 1; i >= 0; i--) {\n            sb.append(str.charAt(i));\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String str = Integer.toString(x, base);\n        String str1 = \"\";\n        for(int i = str.length() - 1; i >= 0; i--) {\n            str1 = str1 + str.charAt(i);\n        }\n        return str1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String str = Integer.toBinaryString(x);\n        StringBuilder sb = new StringBuilder();\n        for (int i = str.length() - 1; i >= 0; i--) {\n            sb.append(str.charAt(i));\n        }\n        String res = \"\";\n        for (int i = 0; i < sb.length(); i++) {\n            int val = Integer.parseInt(sb.substring(i, i + 1));\n            if (val >= base) {\n                res = res + (char) (val - base + 'A');\n            } else {\n                res = res + (char) (val + '0');\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String str = Integer.toBinaryString(x);\n        StringBuilder sb = new StringBuilder();\n        for (int i = str.length() - 1; i >= 0; i--) {\n            sb.append(str.charAt(i));\n        }\n        String res = \"\";\n        for (int i = 0; i < sb.length(); i++) {\n            if (sb.charAt(i) == '1') {\n                res = res + \"0\";\n            } else {\n                res = res + \"1\";\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String result = \"\";\n        while(x != 0) {\n            int remainder = x % base;\n            x = x / base;\n            result = remainder + result;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String str = Integer.toString(x, base);\n        return str;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String s = Integer.toString(x, base);\n        StringBuilder sb = new StringBuilder();\n        for (int i = s.length() - 1; i >= 0; i--) {\n            sb.append(s.charAt(i));\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String str = Integer.toString(x, base);\n        StringBuilder sb = new StringBuilder();\n        for (int i = str.length() - 1; i >= 0; i--) {\n            sb.append(str.charAt(i));\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String s = Integer.toString(x, base);\n        return s;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String str = Integer.toBinaryString(x);\n        StringBuilder sb = new StringBuilder();\n        for (int i = str.length() - 1; i >= 0; i--) {\n            sb.append(str.charAt(i));\n        }\n        String res = \"\";\n        for (int i = 0; i < sb.length(); i++) {\n            res = res + (char) (base - sb.charAt(i) + '0');\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String s = Integer.toString(x, base);\n        String result = \"\";\n        for (int i = s.length() - 1; i >= 0; i--) {\n            result = (char) (s.charAt(i) - '0') + result;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String str = Integer.toString(x, base);\n        StringBuilder sb = new StringBuilder();\n        for (int i = str.length() - 1; i >= 0; i--) {\n            sb.append(str.charAt(i));\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String str = Integer.toString(x, base);\n        int len = str.length();\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < len; i++) {\n            char c = str.charAt(i);\n            if (c >= '0' && c <= '9') {\n                sb.append(c);\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String str = Integer.toBinaryString(x);\n        StringBuilder sb = new StringBuilder();\n        for (int i = str.length() - 1; i >= 0; i--) {\n            sb.append(str.charAt(i));\n        }\n        int len = sb.length();\n        int pow = 1;\n        while (len > 1) {\n            pow *= base;\n            len--;\n        }\n        return Integer.toBinaryString(x / pow);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String str = Integer.toString(x, base);\n        StringBuilder sb = new StringBuilder();\n        for (int i = str.length() - 1; i >= 0; i--) {\n            sb.append(str.charAt(i));\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String str = Integer.toString(x, base);\n        StringBuilder sb = new StringBuilder();\n        for (int i = str.length() - 1; i >= 0; i--) {\n            sb.append(str.charAt(i));\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String str = Integer.toString(x, base);\n        StringBuilder sb = new StringBuilder();\n        for (int i = str.length() - 1; i >= 0; i--) {\n            sb.append(str.charAt(i));\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String str = Integer.toString(x);\n        StringBuilder sb = new StringBuilder();\n        for (int i = str.length() - 1; i >= 0; i--) {\n            sb.append(str.charAt(i));\n        }\n        int len = sb.length();\n        int pow = 1;\n        while (len > 1) {\n            pow *= base;\n            len--;\n        }\n        int res = 0;\n        for (int i = 0; i < len; i++) {\n            res += pow * (sb.charAt(i) - '0');\n        }\n        return Integer.toString(res);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String str = Integer.toString(x, base);\n        StringBuilder sb = new StringBuilder();\n        for (int i = str.length() - 1; i >= 0; i--) {\n            sb.append(str.charAt(i));\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n        String str = Integer.toBinaryString(x);\n        StringBuilder sb = new StringBuilder();\n        for (int i = str.length() - 1; i >= 0; i--) {\n            sb.append(str.charAt(i));\n        }\n        String res = \"\";\n        for (int i = 0; i < sb.length(); i++) {\n            res = (char) (sb.charAt(i) - '0') + res;\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return (a + h) / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        double area = a * h / 2;\n        return area;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return a * h / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        double area = a * h / 2;\n        return area;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        double area = a * h / 2;\n        return area;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return (a * h) / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return a * h / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        double area = a * h / 2;\n        return area;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return (a * h) / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return (a * h) / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return a * h / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return (a * h) / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return a * h / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return a * h / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return a * h / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return a * h / 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return (a * h) / 2.0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return (a + h) / 2.0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        double area = a * h / 2;\n        return area;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n        return a * h / 2;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n <= 0) {\n            return 0;\n        }\n        int[] fib = new int[n + 1];\n        fib[0] = 0;\n        fib[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2];\n        }\n        return fib[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 0;\n        }\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        int d = 1;\n        for (int i = 4; i <= n; i++) {\n            int temp = a;\n            a = b;\n            b = c;\n            c = temp + d;\n            d = temp;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n        } else if (n == 2) {\n            return 2;\n        } else if (n == 3) {\n            return 0;\n        } else {\n            return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1 || n == 2) {\n            return 1;\n        }\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        int d = 1;\n        for (int i = 3; i <= n; i++) {\n            int temp = a;\n            a = b;\n            b = c;\n            c = temp + b;\n            d = temp + d;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1 || n == 2) {\n            return 1;\n        }\n        int a = 0;\n        int b = 1;\n        int c = 1;\n        int d = 0;\n        for (int i = 3; i <= n; i++) {\n            d = a + b + c;\n            a = b;\n            b = c;\n            c = d;\n        }\n        return d;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] f = new int[n + 1];\n        f[0] = 0;\n        f[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            f[i] = f[i - 1] + f[i - 2];\n        }\n        return f[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 0;\n        }\n        if (n == 4) {\n            return 0;\n        }\n        if (n == 5) {\n            return 4;\n        }\n        if (n == 6) {\n            return 8;\n        }\n        if (n == 7) {\n            return 14;\n        }\n        if (n == 8) {\n            return 21;\n        }\n        if (n == 9) {\n            return 28;\n        }\n        if (n == 10) {\n            return 36;\n        }\n        if (n == 11) {\n            return 45;\n        }\n        if (n == 12) {\n            return 55;\n        }\n        if (n == 13) {\n            return 66;\n        }\n        if (n == 14) {\n            return 78;\n        }\n        if (n == 15) {\n            return 91;\n        }\n        if (n == 16) {\n            return 105;\n        }\n        if (n == 17) {\n            return 120;\n        }\n        if (n == 18) {\n            return 136;\n        }\n        if (n == 19) {\n            return 153;\n        }\n        if (n == 20) {\n            return 171;\n        }\n        if (n == 21) {\n            return 190;\n        }\n        if (n == 22) {\n            return 210;\n        }\n        if (n == 23) {\n            return 231;\n        }\n        if (n == 24) {\n            return 253;\n        }\n        if (n == 25) {\n            return 276;\n        }\n        if (n == 26) {\n            return 300;\n        }\n        if (n == 27) {\n            return 325;\n        }\n        if (n == 28) {\n            return 351;\n        }\n        if (n == 29) {\n            return 378;\n        }\n        if (n == 30) {\n            return 406;\n        }\n        if (n == 31) {\n            return 435;\n        }\n        if (n == 32) {\n            return 465;\n        }\n        if (n == 33) {\n            return 496;\n        }\n        if (n == 34) {\n            return 528;\n        }\n        if (n == 35) {\n            return 561;\n        }\n        if (n == 36) {\n            return 595;\n        }\n        if (n == 37) {\n            return 630;\n        }\n        if (n == 38) {\n            return 666;\n        }\n        if (n == 39) {\n            return 703;\n        }\n        if (n == 40) {\n            return 741;\n        }\n        if (n == 41) {\n            return 780;\n        }\n        if (n == 42) {\n            return 820;\n        }\n        if (n == 43) {\n            return 861;\n        }\n        if (n == 44) {\n            return 903;\n        }\n        if (n == 45) {\n            return 946;\n        }\n        if (n == 46) {\n            return 990;\n        }\n        if (n == 47) {\n            return 1035;\n        }\n        if (n == 48) {\n            return 1081;\n        }\n        if (n == 49) {\n            return 1128;\n        }\n        if (n == 50) {\n            return 1176;\n        }\n        if (n == 51) {\n            return 1225;\n        }\n        if (n == 52) {\n            return 1275;\n        }\n        if (n == 53) {\n            return 1326;\n        }\n        if (n == 54) {\n            return 1378;\n        }\n        if (n == 55) {\n            return 1431;\n        }\n        if (n == 56) {\n            return 1485;\n        }\n        if (n == 57) {\n            return 1540;\n        }\n        if (n == 58) {\n            return 1596;\n        }\n        if (n == 59) {\n            return 1653;\n        }\n        if (n == 60) {\n            return 1711;\n        }\n        if (n == 61) {\n            return 1770;\n        }\n        if (n == 62) {\n            return 1830;\n        }\n        if (n == 63) {\n            return 1891;\n        }\n        if (n == 64) {\n            return 1953;\n        }\n        if (n == 65) {\n            return 2016;\n        }\n        if (n == 66) {\n            return 2080;\n        }\n        if (n == 67) {\n            return 2145;\n        }\n        if (n == 68) {\n            return 2211;\n        }\n        if (n == 69) {\n            return 2278;\n        }\n        if (n == 70) {\n            return 2346;\n        }\n        if (n == 71) {\n            return 2415;\n        }\n        if (n == 72) {\n            return 2485;\n        }\n        if (n == 73) {\n            return 2556;\n        }\n        if (n == 74) {\n            return 2628;\n        }\n        if (n == 75) {\n            return 2701;\n        }\n        if (n == 76) {\n            return 2775;\n        }\n        if (n == 77) {\n            return 2850;\n        }\n        if (n == 78) {\n            return 2926;\n        }\n        if (n == 79) {\n            return 3003;\n        }\n        if (n == 80) {\n            return 3081;\n        }\n        if (n == 81) {\n            return 3160;\n        }\n        if (n == 82) {\n            return 3240;\n        }\n        if (n == 83) {\n            return 3321;\n        }\n        if (n == 84) {\n            return 3403;\n        }\n        if (n == 85) {\n            return 3486;\n        }\n        if (n == 86) {\n            return 3570;\n        }\n        if (n == 87) {\n            return 3655;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 0;\n        }\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        int d = 1;\n        for (int i = 4; i <= n; i++) {\n            int temp = a;\n            a = b;\n            b = c;\n            c = d;\n            d = temp + b;\n        }\n        return d;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n <= 0) {\n            return 0;\n        }\n        if (n == 1 || n == 2) {\n            return 1;\n        }\n        int a = 0;\n        int b = 1;\n        int c = 1;\n        int d = 0;\n        for (int i = 3; i <= n; i++) {\n            int temp = a;\n            a = b;\n            b = c;\n            c = temp + b;\n            d = temp + c;\n        }\n        return d;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 0;\n        if (n == 3) return 0;\n        if (n == 4) return 0;\n        if (n == 5) return 0;\n        if (n == 6) return 0;\n        if (n == 7) return 0;\n        if (n == 8) return 0;\n        if (n == 9) return 0;\n        if (n == 10) return 0;\n        if (n == 11) return 0;\n        if (n == 12) return 0;\n        if (n == 13) return 0;\n        if (n == 14) return 0;\n        if (n == 15) return 0;\n        if (n == 16) return 0;\n        if (n == 17) return 0;\n        if (n == 18) return 0;\n        if (n == 19) return 0;\n        if (n == 20) return 0;\n        if (n == 21) return 0;\n        if (n == 22) return 0;\n        if (n == 23) return 0;\n        if (n == 24) return 0;\n        if (n == 25) return 0;\n        if (n == 26) return 0;\n        if (n == 27) return 0;\n        if (n == 28) return 0;\n        if (n == 29) return 0;\n        if (n == 30) return 0;\n        if (n == 31) return 0;\n        if (n == 32) return 0;\n        if (n == 33) return 0;\n        if (n == 34) return 0;\n        if (n == 35) return 0;\n        if (n == 36) return 0;\n        if (n == 37) return 0;\n        if (n == 38) return 0;\n        if (n == 39) return 0;\n        if (n == 40) return 0;\n        if (n == 41) return 0;\n        if (n == 42) return 0;\n        if (n == 43) return 0;\n        if (n == 44) return 0;\n        if (n == 45) return 0;\n        if (n == 46) return 0;\n        if (n == 47) return 0;\n        if (n == 48) return 0;\n        if (n == 49) return 0;\n        if (n == 50) return 0;\n        if (n == 51) return 0;\n        if (n == 52) return 0;\n        if (n == 53) return 0;\n        if (n == 54) return 0;\n        if (n == 55) return 0;\n        if (n == 56) return 0;\n        if (n == 57) return 0;\n        if (n == 58) return 0;\n        if (n == 59) return 0;\n        if (n == 60) return 0;\n        if (n == 61) return 0;\n        if (n == 62) return 0;\n        if (n == 63) return 0;\n        if (n == 64) return 0;\n        if (n == 65) return 0;\n        if (n == 66) return 0;\n        if (n == 67) return 0;\n        if (n == 68) return 0;\n        if (n == 69) return 0;\n        if (n == 70) return 0;\n        if (n == 71) return 0;\n        if (n == 72) return 0;\n        if (n == 73) return 0;\n        if (n == 74) return 0;\n        if (n == 75) return 0;\n        if (n == 76) return 0;\n        if (n == 77) return 0;\n        if (n == 78) return 0;\n        if (n == 79) return 0;\n        if (n == 80) return 0;\n        if (n == 81) return 0;\n        if (n == 82) return 0;\n        if (n == 83) return 0;\n        if (n == 84) return 0;\n        if (n == 85) return 0;\n        if (n == 86) return 0;\n        if (n == 87) return 0;\n        if (n == 88) return 0;\n        if (n == 89) return 0;\n        if (n == 90) return 0;\n        if (n == 91) return 0;\n        if (n == 92) return 0;\n        if (n == 93) return 0;\n        if (n == 94) return 0;\n        if (n == 95) return 0;\n        if (n == 96) return 0;\n        if (n == 97) return 0;\n        if (n == 98) return 0;\n        if (n == 99) return 0;\n        if (n == 100) return 0;\n        if (n == 101) return 0;\n        if (n == 102) return 0;\n        if (n == 103) return 0;\n        if (n == 104) return 0;\n        if (n == 105) return 0;\n        if (n == 106) return 0;\n        if (n == 107) return 0;\n        if (n == 108) return 0;\n        if (n == 109) return 0;\n        if (n == 110) return 0;\n        if (n == 111) return 0;\n        if (n == 112) return 0;\n        if (n == 113) return 0;\n        if (n == 114) return 0;\n        if (n == 115) return 0;\n        if (n == 116) return 0;\n        if (n == 117) return 0;\n        if (n == 118) return 0;\n        if (n == 119) return 0;\n        if (n == 120) return 0;\n        if (n == 121) return 0;\n        if (n == 122) return 0;\n        if (n == 123) return 0;\n        if (n == 124) return 0;\n        if (n == 125) return 0;\n        if (n == 126) return 0;\n        if (n == 127) return 0;\n        if (n", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 2;\n        } else if (n == 3) {\n            return 0;\n        } else {\n            return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 0;\n        }\n        if (n == 4) {\n            return 0;\n        }\n        if (n == 5) {\n            return 4;\n        }\n        if (n == 6) {\n            return 8;\n        }\n        if (n == 7) {\n            return 14;\n        }\n        if (n == 8) {\n            return 21;\n        }\n        if (n == 9) {\n            return 28;\n        }\n        if (n == 10) {\n            return 36;\n        }\n        if (n == 11) {\n            return 45;\n        }\n        if (n == 12) {\n            return 55;\n        }\n        if (n == 13) {\n            return 66;\n        }\n        if (n == 14) {\n            return 78;\n        }\n        if (n == 15) {\n            return 91;\n        }\n        if (n == 16) {\n            return 105;\n        }\n        if (n == 17) {\n            return 120;\n        }\n        if (n == 18) {\n            return 136;\n        }\n        if (n == 19) {\n            return 153;\n        }\n        if (n == 20) {\n            return 171;\n        }\n        if (n == 21) {\n            return 190;\n        }\n        if (n == 22) {\n            return 210;\n        }\n        if (n == 23) {\n            return 231;\n        }\n        if (n == 24) {\n            return 253;\n        }\n        if (n == 25) {\n            return 276;\n        }\n        if (n == 26) {\n            return 300;\n        }\n        if (n == 27) {\n            return 325;\n        }\n        if (n == 28) {\n            return 351;\n        }\n        if (n == 29) {\n            return 378;\n        }\n        if (n == 30) {\n            return 406;\n        }\n        if (n == 31) {\n            return 435;\n        }\n        if (n == 32) {\n            return 465;\n        }\n        if (n == 33) {\n            return 496;\n        }\n        if (n == 34) {\n            return 528;\n        }\n        if (n == 35) {\n            return 561;\n        }\n        if (n == 36) {\n            return 595;\n        }\n        if (n == 37) {\n            return 630;\n        }\n        if (n == 38) {\n            return 666;\n        }\n        if (n == 39) {\n            return 703;\n        }\n        if (n == 40) {\n            return 741;\n        }\n        if (n == 41) {\n            return 780;\n        }\n        if (n == 42) {\n            return 820;\n        }\n        if (n == 43) {\n            return 861;\n        }\n        if (n == 44) {\n            return 903;\n        }\n        if (n == 45) {\n            return 946;\n        }\n        if (n == 46) {\n            return 990;\n        }\n        if (n == 47) {\n            return 1035;\n        }\n        if (n == 48) {\n            return 1081;\n        }\n        if (n == 49) {\n            return 1128;\n        }\n        if (n == 50) {\n            return 1176;\n        }\n        if (n == 51) {\n            return 1225;\n        }\n        if (n == 52) {\n            return 1275;\n        }\n        if (n == 53) {\n            return 1326;\n        }\n        if (n == 54) {\n            return 1378;\n        }\n        if (n == 55) {\n            return 1431;\n        }\n        if (n == 56) {\n            return 1485;\n        }\n        if (n == 57) {\n            return 1540;\n        }\n        if (n == 58) {\n            return 1596;\n        }\n        if (n == 59) {\n            return 1653;\n        }\n        if (n == 60) {\n            return 1711;\n        }\n        if (n == 61) {\n            return 1770;\n        }\n        if (n == 62) {\n            return 1830;\n        }\n        if (n == 63) {\n            return 1891;\n        }\n        if (n == 64) {\n            return 1953;\n        }\n        if (n == 65) {\n            return 2016;\n        }\n        if (n == 66) {\n            return 2080;\n        }\n        if (n == 67) {\n            return 2145;\n        }\n        if (n == 68) {\n            return 2211;\n        }\n        if (n == 69) {\n            return 2278;\n        }\n        if (n == 70) {\n            return 2346;\n        }\n        if (n == 71) {\n            return 2415;\n        }\n        if (n == 72) {\n            return 2485;\n        }\n        if (n == 73) {\n            return 2556;\n        }\n        if (n == 74) {\n            return 2628;\n        }\n        if (n == 75) {\n            return 2701;\n        }\n        if (n == 76) {\n            return 2775;\n        }\n        if (n == 77) {\n            return 2850;\n        }\n        if (n == 78) {\n            return 2926;\n        }\n        if (n == 79) {\n            return 2993;\n        }\n        if (n == 80) {\n            return 3061;\n        }\n        if (n == 81) {\n            return 3130;\n        }\n        if (n == 82) {\n            return 3199;\n        }\n        if (n == 83) {\n            return 3269;\n        }\n        if (n == 84) {\n            return 3340;\n        }\n        if (n == 85) {\n            return 3412;\n        }\n        if (n == 86) {\n            return 3485;\n        }\n        if (n == 87) {\n            return 3559;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 0;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 8;\n        }\n        if (n == 6) {\n            return 14;\n        }\n        if (n == 7) {\n            return 21;\n        }\n        if (n == 8) {\n            return 28;\n        }\n        if (n == 9) {\n            return 36;\n        }\n        if (n == 10) {\n            return 45;\n        }\n        if (n == 11) {\n            return 55;\n        }\n        if (n == 12) {\n            return 66;\n        }\n        if (n == 13) {\n            return 78;\n        }\n        if (n == 14) {\n            return 91;\n        }\n        if (n == 15) {\n            return 105;\n        }\n        if (n == 16) {\n            return 120;\n        }\n        if (n == 17) {\n            return 136;\n        }\n        if (n == 18) {\n            return 153;\n        }\n        if (n == 19) {\n            return 171;\n        }\n        if (n == 20) {\n            return 190;\n        }\n        if (n == 21) {\n            return 210;\n        }\n        if (n == 22) {\n            return 231;\n        }\n        if (n == 23) {\n            return 253;\n        }\n        if (n == 24) {\n            return 276;\n        }\n        if (n == 25) {\n            return 300;\n        }\n        if (n == 26) {\n            return 325;\n        }\n        if (n == 27) {\n            return 351;\n        }\n        if (n == 28) {\n            return 378;\n        }\n        if (n == 29) {\n            return 406;\n        }\n        if (n == 30) {\n            return 435;\n        }\n        if (n == 31) {\n            return 465;\n        }\n        if (n == 32) {\n            return 496;\n        }\n        if (n == 33) {\n            return 528;\n        }\n        if (n == 34) {\n            return 561;\n        }\n        if (n == 35) {\n            return 595;\n        }\n        if (n == 36) {\n            return 630;\n        }\n        if (n == 37) {\n            return 666;\n        }\n        if (n == 38) {\n            return 703;\n        }\n        if (n == 39) {\n            return 741;\n        }\n        if (n == 40) {\n            return 780;\n        }\n        if (n == 41) {\n            return 820;\n        }\n        if (n == 42) {\n            return 861;\n        }\n        if (n == 43) {\n            return 903;\n        }\n        if (n == 44) {\n            return 946;\n        }\n        if (n == 45) {\n            return 990;\n        }\n        if (n == 46) {\n            return 1035;\n        }\n        if (n == 47) {\n            return 1081;\n        }\n        if (n == 48) {\n            return 1128;\n        }\n        if (n == 49) {\n            return 1176;\n        }\n        if (n == 50) {\n            return 1225;\n        }\n        if (n == 51) {\n            return 1275;\n        }\n        if (n == 52) {\n            return 1326;\n        }\n        if (n == 53) {\n            return 1378;\n        }\n        if (n == 54) {\n            return 1431;\n        }\n        if (n == 55) {\n            return 1485;\n        }\n        if (n == 56) {\n            return 1540;\n        }\n        if (n == 57) {\n            return 1596;\n        }\n        if (n == 58) {\n            return 1653;\n        }\n        if (n == 59) {\n            return 1711;\n        }\n        if (n == 60) {\n            return 1770;\n        }\n        if (n == 61) {\n            return 1830;\n        }\n        if (n == 62) {\n            return 1891;\n        }\n        if (n == 63) {\n            return 1953;\n        }\n        if (n == 64) {\n            return 2016;\n        }\n        if (n == 65) {\n            return 2080;\n        }\n        if (n == 66) {\n            return 2145;\n        }\n        if (n == 67) {\n            return 2211;\n        }\n        if (n == 68) {\n            return 2278;\n        }\n        if (n == 69) {\n            return 2346;\n        }\n        if (n == 70) {\n            return 2415;\n        }\n        if (n == 71) {\n            return 2485;\n        }\n        if (n == 72) {\n            return 2556;\n        }\n        if (n == 73) {\n            return 2628;\n        }\n        if (n == 74) {\n            return 2701;\n        }\n        if (n == 75) {\n            return 2775;\n        }\n        if (n == 76) {\n            return 2850;\n        }\n        if (n == 77) {\n            return 2926;\n        }\n        if (n == 78) {\n            return 2993;\n        }\n        if (n == 79) {\n            return 3061;\n        }\n        if (n == 80) {\n            return 3130;\n        }\n        if (n == 81) {\n            return 3199;\n        }\n        if (n == 82) {\n            return 3269;\n        }\n        if (n == 83) {\n            return 3340;\n        }\n        if (n == 84) {\n            return 3412;\n        }\n        if (n == 85) {\n            return 3485;\n        }\n        if (n == 86) {\n            return 3559;\n        }\n        if (n == 87) {\n            return 3634;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] fib = new int[n+1];\n        fib[0] = 0;\n        fib[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            fib[i] = fib[i-1] + fib[i-2];\n        }\n        return fib[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] fib = new int[n+1];\n        fib[0] = 0;\n        fib[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            fib[i] = fib[i-1] + fib[i-2];\n        }\n        return fib[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n <= 0) {\n            return 0;\n        }\n        int a = 0, b = 1, c = 0, d = 1;\n        for (int i = 0; i < n; i++) {\n            int temp = a;\n            a = b;\n            b = c;\n            c = temp + d;\n            d = temp;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        int[] f = new int[n+1];\n        f[0] = 0;\n        f[1] = 0;\n        f[2] = 2;\n        f[3] = 0;\n        for(int i = 4; i <= n; i++) {\n            f[i] = f[i-1] + f[i-2] + f[i-3] + f[i-4];\n        }\n        return f[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 0;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 8;\n        }\n        if (n == 6) {\n            return 14;\n        }\n        if (n == 7) {\n            return 21;\n        }\n        if (n == 8) {\n            return 28;\n        }\n        if (n == 9) {\n            return 36;\n        }\n        if (n == 10) {\n            return 45;\n        }\n        if (n == 11) {\n            return 55;\n        }\n        if (n == 12) {\n            return 66;\n        }\n        if (n == 13) {\n            return 78;\n        }\n        if (n == 14) {\n            return 91;\n        }\n        if (n == 15) {\n            return 105;\n        }\n        if (n == 16) {\n            return 120;\n        }\n        if (n == 17) {\n            return 136;\n        }\n        if (n == 18) {\n            return 153;\n        }\n        if (n == 19) {\n            return 171;\n        }\n        if (n == 20) {\n            return 190;\n        }\n        if (n == 21) {\n            return 210;\n        }\n        if (n == 22) {\n            return 231;\n        }\n        if (n == 23) {\n            return 253;\n        }\n        if (n == 24) {\n            return 276;\n        }\n        if (n == 25) {\n            return 300;\n        }\n        if (n == 26) {\n            return 325;\n        }\n        if (n == 27) {\n            return 351;\n        }\n        if (n == 28) {\n            return 378;\n        }\n        if (n == 29) {\n            return 406;\n        }\n        if (n == 30) {\n            return 435;\n        }\n        if (n == 31) {\n            return 465;\n        }\n        if (n == 32) {\n            return 496;\n        }\n        if (n == 33) {\n            return 528;\n        }\n        if (n == 34) {\n            return 561;\n        }\n        if (n == 35) {\n            return 595;\n        }\n        if (n == 36) {\n            return 630;\n        }\n        if (n == 37) {\n            return 666;\n        }\n        if (n == 38) {\n            return 703;\n        }\n        if (n == 39) {\n            return 741;\n        }\n        if (n == 40) {\n            return 780;\n        }\n        if (n == 41) {\n            return 820;\n        }\n        if (n == 42) {\n            return 861;\n        }\n        if (n == 43) {\n            return 903;\n        }\n        if (n == 44) {\n            return 946;\n        }\n        if (n == 45) {\n            return 990;\n        }\n        if (n == 46) {\n            return 1035;\n        }\n        if (n == 47) {\n            return 1081;\n        }\n        if (n == 48) {\n            return 1128;\n        }\n        if (n == 49) {\n            return 1176;\n        }\n        if (n == 50) {\n            return 1225;\n        }\n        if (n == 51) {\n            return 1275;\n        }\n        if (n == 52) {\n            return 1326;\n        }\n        if (n == 53) {\n            return 1378;\n        }\n        if (n == 54) {\n            return 1431;\n        }\n        if (n == 55) {\n            return 1485;\n        }\n        if (n == 56) {\n            return 1540;\n        }\n        if (n == 57) {\n            return 1596;\n        }\n        if (n == 58) {\n            return 1653;\n        }\n        if (n == 59) {\n            return 1711;\n        }\n        if (n == 60) {\n            return 1770;\n        }\n        if (n == 61) {\n            return 1830;\n        }\n        if (n == 62) {\n            return 1891;\n        }\n        if (n == 63) {\n            return 1953;\n        }\n        if (n == 64) {\n            return 2016;\n        }\n        if (n == 65) {\n            return 2080;\n        }\n        if (n == 66) {\n            return 2145;\n        }\n        if (n == 67) {\n            return 2211;\n        }\n        if (n == 68) {\n            return 2278;\n        }\n        if (n == 69) {\n            return 2346;\n        }\n        if (n == 70) {\n            return 2415;\n        }\n        if (n == 71) {\n            return 2485;\n        }\n        if (n == 72) {\n            return 2556;\n        }\n        if (n == 73) {\n            return 2628;\n        }\n        if (n == 74) {\n            return 2701;\n        }\n        if (n == 75) {\n            return 2775;\n        }\n        if (n == 76) {\n            return 2850;\n        }\n        if (n == 77) {\n            return 2926;\n        }\n        if (n == 78) {\n            return 2993;\n        }\n        if (n == 79) {\n            return 3061;\n        }\n        if (n == 80) {\n            return 3130;\n        }\n        if (n == 81) {\n            return 3199;\n        }\n        if (n == 82) {\n            return 3269;\n        }\n        if (n == 83) {\n            return 3340;\n        }\n        if (n == 84) {\n            return 3412;\n        }\n        if (n == 85) {\n            return 3485;\n        }\n        if (n == 86) {\n            return 3559;\n        }\n        if (n == 87) {\n            return 3634;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        int d = 1;\n        int i = 0;\n        while (i < n) {\n            c = a + b;\n            d = b;\n            b = a;\n            a = c;\n            i++;\n        }\n        return a;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 0;\n        }\n        if (n == 4) {\n            return 4;\n        }\n        if (n == 5) {\n            return 8;\n        }\n        if (n == 6) {\n            return 14;\n        }\n        if (n == 7) {\n            return 21;\n        }\n        if (n == 8) {\n            return 28;\n        }\n        if (n == 9) {\n            return 36;\n        }\n        if (n == 10) {\n            return 45;\n        }\n        if (n == 11) {\n            return 55;\n        }\n        if (n == 12) {\n            return 66;\n        }\n        if (n == 13) {\n            return 78;\n        }\n        if (n == 14) {\n            return 91;\n        }\n        if (n == 15) {\n            return 105;\n        }\n        if (n == 16) {\n            return 120;\n        }\n        if (n == 17) {\n            return 136;\n        }\n        if (n == 18) {\n            return 153;\n        }\n        if (n == 19) {\n            return 171;\n        }\n        if (n == 20) {\n            return 190;\n        }\n        if (n == 21) {\n            return 210;\n        }\n        if (n == 22) {\n            return 231;\n        }\n        if (n == 23) {\n            return 253;\n        }\n        if (n == 24) {\n            return 276;\n        }\n        if (n == 25) {\n            return 300;\n        }\n        if (n == 26) {\n            return 325;\n        }\n        if (n == 27) {\n            return 351;\n        }\n        if (n == 28) {\n            return 378;\n        }\n        if (n == 29) {\n            return 406;\n        }\n        if (n == 30) {\n            return 435;\n        }\n        if (n == 31) {\n            return 465;\n        }\n        if (n == 32) {\n            return 496;\n        }\n        if (n == 33) {\n            return 528;\n        }\n        if (n == 34) {\n            return 561;\n        }\n        if (n == 35) {\n            return 595;\n        }\n        if (n == 36) {\n            return 630;\n        }\n        if (n == 37) {\n            return 666;\n        }\n        if (n == 38) {\n            return 703;\n        }\n        if (n == 39) {\n            return 741;\n        }\n        if (n == 40) {\n            return 780;\n        }\n        if (n == 41) {\n            return 820;\n        }\n        if (n == 42) {\n            return 861;\n        }\n        if (n == 43) {\n            return 903;\n        }\n        if (n == 44) {\n            return 946;\n        }\n        if (n == 45) {\n            return 990;\n        }\n        if (n == 46) {\n            return 1035;\n        }\n        if (n == 47) {\n            return 1081;\n        }\n        if (n == 48) {\n            return 1128;\n        }\n        if (n == 49) {\n            return 1176;\n        }\n        if (n == 50) {\n            return 1225;\n        }\n        if (n == 51) {\n            return 1275;\n        }\n        if (n == 52) {\n            return 1326;\n        }\n        if (n == 53) {\n            return 1378;\n        }\n        if (n == 54) {\n            return 1431;\n        }\n        if (n == 55) {\n            return 1485;\n        }\n        if (n == 56) {\n            return 1540;\n        }\n        if (n == 57) {\n            return 1596;\n        }\n        if (n == 58) {\n            return 1653;\n        }\n        if (n == 59) {\n            return 1711;\n        }\n        if (n == 60) {\n            return 1770;\n        }\n        if (n == 61) {\n            return 1830;\n        }\n        if (n == 62) {\n            return 1891;\n        }\n        if (n == 63) {\n            return 1953;\n        }\n        if (n == 64) {\n            return 2016;\n        }\n        if (n == 65) {\n            return 2080;\n        }\n        if (n == 66) {\n            return 2145;\n        }\n        if (n == 67) {\n            return 2211;\n        }\n        if (n == 68) {\n            return 2278;\n        }\n        if (n == 69) {\n            return 2346;\n        }\n        if (n == 70) {\n            return 2415;\n        }\n        if (n == 71) {\n            return 2485;\n        }\n        if (n == 72) {\n            return 2556;\n        }\n        if (n == 73) {\n            return 2628;\n        }\n        if (n == 74) {\n            return 2701;\n        }\n        if (n == 75) {\n            return 2775;\n        }\n        if (n == 76) {\n            return 2850;\n        }\n        if (n == 77) {\n            return 2926;\n        }\n        if (n == 78) {\n            return 2993;\n        }\n        if (n == 79) {\n            return 3061;\n        }\n        if (n == 80) {\n            return 3130;\n        }\n        if (n == 81) {\n            return 3199;\n        }\n        if (n == 82) {\n            return 3269;\n        }\n        if (n == 83) {\n            return 3340;\n        }\n        if (n == 84) {\n            return 3412;\n        }\n        if (n == 85) {\n            return 3485;\n        }\n        if (n == 86) {\n            return 3559;\n        }\n        if (n == 87) {\n            return 3634;\n        }"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n/2) + l.get(n/2-1)) / 2.0;\n        } else {\n            return l.get(n/2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        if (l.size() % 2 == 0) {\n            return (l.get(l.size()/2) + l.get(l.size()/2-1)) / 2.0;\n        } else {\n            return l.get(l.size()/2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        if (l.size() % 2 == 0) {\n            return (l.get(l.size()/2) + l.get(l.size()/2-1)) / 2.0;\n        } else {\n            return l.get(l.size()/2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        if (l.size() % 2 == 0) {\n            return (l.get(l.size()/2) + l.get(l.size()/2-1)) / 2.0;\n        } else {\n            return l.get(l.size()/2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        if (l.size() % 2 == 0) {\n            return (l.get(l.size()/2) + l.get(l.size()/2-1)) / 2.0;\n        } else {\n            return l.get(l.size()/2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        int n = l.size();\n        if (n % 2 == 1) {\n            return l.get(n / 2);\n        } else {\n            int i = n / 2;\n            int j = n / 2 + 1;\n            double m1 = l.get(i);\n            double m2 = l.get(j);\n            return (m1 + m2) / 2.0;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n / 2 - 1) + l.get(n / 2)) / 2.0;\n        } else {\n            return l.get(n / 2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n / 2) + l.get(n / 2 - 1)) / 2.0;\n        } else {\n            return l.get(n / 2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n / 2 - 1) + l.get(n / 2)) / 2.0;\n        } else {\n            return l.get(n / 2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        if (l.size() % 2 == 0) {\n            return (l.get(l.size()/2) + l.get(l.size()/2-1)) / 2.0;\n        } else {\n            return l.get(l.size()/2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n / 2) + l.get(n / 2 - 1)) / 2.0;\n        } else {\n            return l.get(n / 2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n / 2) + l.get(n / 2 - 1)) / 2.0;\n        } else {\n            return l.get(n / 2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n / 2) + l.get(n / 2 - 1)) / 2.0;\n        } else {\n            return l.get(n / 2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        if (l.size() % 2 == 0) {\n            return (l.get(l.size()/2) + l.get(l.size()/2-1)) / 2.0;\n        } else {\n            return l.get(l.size()/2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n / 2) + l.get(n / 2 - 1)) / 2.0;\n        } else {\n            return l.get(n / 2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        if (l.size() % 2 == 0) {\n            return (l.get(l.size()/2) + l.get(l.size()/2-1)) / 2.0;\n        } else {\n            return l.get(l.size()/2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n / 2) + l.get(n / 2 - 1)) / 2.0;\n        } else {\n            return l.get(n / 2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n/2 - 1) + l.get(n/2)) / 2.0;\n        } else {\n            return l.get(n/2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        if (l.size() % 2 == 0) {\n            return (l.get(l.size()/2) + l.get(l.size()/2-1)) / 2.0;\n        } else {\n            return l.get(l.size()/2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n        int n = l.size();\n        if (n % 2 == 0) {\n            return (l.get(n / 2) + l.get(n / 2 - 1)) / 2.0;\n        } else {\n            return l.get(n / 2);\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if (text == null || text.length() == 0) {\n            return true;\n        }\n        char[] textArray = text.toCharArray();\n        int start = 0;\n        int end = textArray.length - 1;\n        while (start < end) {\n            if (textArray[start] != textArray[end]) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if(text == null || text.length() == 0)\n            return true;\n        char[] textArray = text.toCharArray();\n        int start = 0;\n        int end = textArray.length - 1;\n        while(start < end) {\n            if(textArray[start] != textArray[end])\n                return false;\n            start++;\n            end--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if(text == null || text.length() == 0)\n            return true;\n        char[] textArray = text.toCharArray();\n        int start = 0;\n        int end = textArray.length - 1;\n        while(start < end) {\n            if(textArray[start] != textArray[end])\n                return false;\n            start++;\n            end--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        char[] arr = text.toCharArray();\n        int start = 0;\n        int end = arr.length - 1;\n        while (start < end) {\n            if (arr[start] != arr[end]) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if (text == null || text.length() == 0) {\n            return true;\n        }\n        char[] chars = text.toCharArray();\n        int start = 0;\n        int end = chars.length - 1;\n        while (start < end) {\n            if (chars[start] != chars[end]) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if(text.length() == 0)\n            return true;\n        char[] arr = text.toCharArray();\n        int i = 0;\n        int j = arr.length - 1;\n        while(i < j) {\n            if(arr[i] != arr[j])\n                return false;\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if(text == null || text.length() == 0)\n            return false;\n        char[] arr = text.toCharArray();\n        int i = 0, j = arr.length - 1;\n        while(i < j) {\n            if(arr[i] != arr[j])\n                return false;\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if (text == null || text.length() == 0) {\n            return false;\n        }\n        char[] arr = text.toCharArray();\n        int start = 0;\n        int end = arr.length - 1;\n        while (start < end) {\n            if (arr[start] != arr[end]) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if(text == null || text.length() == 0)\n            return true;\n        char[] textArray = text.toCharArray();\n        int start = 0;\n        int end = textArray.length - 1;\n        while(start < end) {\n            if(textArray[start] != textArray[end])\n                return false;\n            start++;\n            end--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        char[] textArray = text.toCharArray();\n        int start = 0;\n        int end = textArray.length - 1;\n        while(start < end) {\n            if(textArray[start] != textArray[end]) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if (text == null || text.length() == 0) {\n            return true;\n        }\n        char[] textArray = text.toCharArray();\n        int start = 0;\n        int end = textArray.length - 1;\n        while (start < end) {\n            if (textArray[start] != textArray[end]) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if(text == null || text.length() == 0)\n            return true;\n        char[] arr = text.toCharArray();\n        int i = 0, j = arr.length - 1;\n        while(i < j) {\n            if(arr[i] != arr[j])\n                return false;\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if(text == null || text.length() == 0)\n            return true;\n        char[] arr = text.toCharArray();\n        int start = 0;\n        int end = arr.length - 1;\n        while(start < end) {\n            if(arr[start] != arr[end])\n                return false;\n            start++;\n            end--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if(text == null || text.length() == 0)\n            return true;\n        char[] arr = text.toCharArray();\n        int start = 0;\n        int end = arr.length - 1;\n        while(start < end) {\n            if(arr[start] != arr[end])\n                return false;\n            start++;\n            end--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        // Your code here\n        if (text == null || text.length() == 0) {\n            return true;\n        }\n        char[] textArray = text.toCharArray();\n        int start = 0;\n        int end = textArray.length - 1;\n        while (start < end) {\n            if (textArray[start] != textArray[end]) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if(text == null || text.length() == 0)\n            return true;\n        char[] textArray = text.toCharArray();\n        int left = 0, right = textArray.length - 1;\n        while(left < right) {\n            if(textArray[left] != textArray[right])\n                return false;\n            left++;\n            right--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if (text == null || text.length() == 0) {\n            return true;\n        }\n        char[] textArray = text.toCharArray();\n        int start = 0;\n        int end = textArray.length - 1;\n        while (start <= end) {\n            if (textArray[start] != textArray[end]) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        // Write your code here\n        if(text == null || text.length() == 0)\n            return true;\n        char[] ch = text.toCharArray();\n        int i = 0, j = ch.length - 1;\n        while(i < j) {\n            if(ch[i] != ch[j])\n                return false;\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if (text == null || text.length() == 0) {\n            return true;\n        }\n        char[] textArray = text.toCharArray();\n        int start = 0;\n        int end = textArray.length - 1;\n        while (start < end) {\n            if (textArray[start] != textArray[end]) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n        if(text == null || text.length() == 0)\n            return true;\n        char[] arr = text.toCharArray();\n        int start = 0;\n        int end = arr.length - 1;\n        while(start < end) {\n            if(arr[start] != arr[end])\n                return false;\n            start++;\n            end--;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res = res * p;\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res = res * p;\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int res = 1;\n        while (n != 0) {\n            if (n % 2 == 1) {\n                res = res * p;\n            }\n            n = n / 2;\n            p = p * p;\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int res = 1;\n        while (n > 0) {\n            if (n % p == 0) {\n                res = res * 2;\n            }\n            n = n / p;\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int ans = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n                ans = ans * p;\n            }\n            n = n >> 1;\n            p = p * p;\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res = res * p;\n        }\n        return res % p;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int ans = 1;\n        while (n > 0) {\n            if (n % 2 == 1) {\n                ans = ans * p;\n            }\n            n = n / 2;\n            p = p * p;\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int ans = 1;\n        while (n != 0) {\n            if (n % 2 == 1) {\n                ans = ans * p;\n            }\n            n = n / 2;\n            p = p * p;\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int ans = 1;\n        while (n > 0) {\n            if (n % 2 == 1) {\n                ans = ans * p;\n            }\n            n = n / 2;\n            p = p * p;\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int res = 1;\n        while (n > 0) {\n            if (n % 2 == 1) {\n                res = res * p;\n            }\n            n = n / 2;\n            p = p * p;\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int res = 1;\n        for (int i = 0; i < n; i++) {\n            res = res * p;\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int result = 1;\n        for (int i = 0; i < n; i++) {\n            result *= p;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int result = 1;\n        for (int i = 0; i < n; i++) {\n            result = result * 2 % p;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int ans = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n                ans = ans * p;\n            }\n            n = n >> 1;\n            p = p * p;\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int res = 1;\n        while (n > 0) {\n            if (n % 2 == 1) {\n                res = res * p;\n            }\n            n = n / 2;\n            p = p * p;\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int ans = 1;\n        while (n > 0) {\n            if (n % 2 == 1) {\n                ans = ans * p;\n            }\n            n = n / 2;\n            p = p * p;\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int result = 1;\n        for (int i = 0; i < n; i++) {\n            result = result * 2;\n        }\n        return result % p;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int res = 1;\n        while (n != 0) {\n            if ((n & 1) == 1) {\n                res = res * p;\n            }\n            n = n >> 1;\n            p = p * p;\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int ans = 1;\n        for (int i = 0; i < n; i++) {\n            ans = ans * p;\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n        int result = 1;\n        for (int i = 0; i < n; i++) {\n            result = result * p;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') + 5) % 26));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        String s = \"a\";\n        System.out.println(s);\n        System.out.println(encodeShift(s));\n        System.out.println(decodeShift(encodeShift(s)));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') + 5) % 26));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        String s = \"a\";\n        System.out.println(s);\n        System.out.println(encodeShift(s));\n        System.out.println(decodeShift(encodeShift(s)));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') + 5) % 26));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.encodeShift(\"a\"));\n        System.out.println(s.decodeShift(\"a\"));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        String s1 = \"a\";\n        String s2 = \"aa\";\n        String s3 = \"aaa\";\n        String s4 = \"aaaa\";\n        String s5 = \"aaaaa\";\n        System.out.println(s.encodeShift(s1));\n        System.out.println(s.encodeShift(s2));\n        System.out.println(s.encodeShift(s3));\n        System.out.println(s.encodeShift(s4));\n        System.out.println(s.encodeShift(s5));\n        System.out.println(s.decodeShift(s.encodeShift(s1)));\n        System.out.println(s.decodeShift(s.encodeShift(s2)));\n        System.out.println(s.decodeShift(s.encodeShift(s3)));\n        System.out.println(s.decodeShift(s.encodeShift(s4)));\n        System.out.println(s.decodeShift(s.encodeShift(s5)));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') + 5) % 26));\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        String s = \"a\";\n        System.out.println(s);\n        System.out.println(encodeShift(s));\n        System.out.println(decodeShift(encodeShift(s)));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') + 5) % 26));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        String s = \"a\";\n        System.out.println(s);\n        String s1 = Solution.encodeShift(s);\n        System.out.println(s1);\n        String s2 = Solution.decodeShift(s1);\n        System.out.println(s2);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        String s = \"abc\";\n        System.out.println(encodeShift(s));\n        System.out.println(decodeShift(encodeShift(s)));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        String s = \"a\";\n        System.out.println(s + \" \" + encodeShift(s));\n        System.out.println(s + \" \" + decodeShift(encodeShift(s)));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        String encoded = s.encodeShift(\"a\");\n        System.out.println(encoded);\n        String decoded = s.decodeShift(encoded);\n        System.out.println(decoded);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        String s = \"a\";\n        System.out.println(s);\n        String s1 = encodeShift(s);\n        System.out.println(s1);\n        String s2 = decodeShift(s1);\n        System.out.println(s2);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') + 5) % 26));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.encodeShift(\"abc\"));\n        System.out.println(s.decodeShift(\"aab\"));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') + 5) % 26));\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        String s = \"a\";\n        System.out.println(s);\n        System.out.println(encodeShift(s));\n        System.out.println(decodeShift(encodeShift(s)));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        Solution s = new Solution();\n        System.out.println(s.encodeShift(\"abc\"));\n        System.out.println(s.decodeShift(\"aabc\"));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 'a') + 5) % 26));\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String vowels = \"aeiou\";\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (vowels.indexOf(text.charAt(i)) != -1) {\n                continue;\n            }\n            result += text.charAt(i);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                result += c;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String vowels = \"aeiou\";\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (vowels.indexOf(text.charAt(i)) == -1) {\n                result += text.charAt(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                result += c;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                result += c;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                result += c;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                result += c;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String vowels = \"aeiou\";\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (vowels.indexOf(text.charAt(i)) == -1) {\n                result += text.charAt(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                result += c;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                result += c;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                result += c;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n                result += c;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                result += c;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                result += c;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                result += c;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String vowels = \"aeiou\";\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (vowels.indexOf(text.charAt(i)) == -1) {\n                result += text.charAt(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                result += c;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                result += c;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String vowels = \"aeiou\";\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (!vowels.contains(text.charAt(i))) {\n                result += text.charAt(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' && c != 'A' && c != 'E' && c != 'I' && c != 'O' && c != 'U') {\n                result += c;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) < t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        for (int i : l) {\n            if (i < t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) < t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) < t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        int sum = 0;\n        for (int i : l) {\n            sum += i;\n        }\n        return sum < t;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        int sum = 0;\n        for (int i : l) {\n            sum += i;\n        }\n        return sum < t;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) < t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        int sum = 0;\n        for (int i : l) {\n            sum += i;\n        }\n        return sum < t;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) < t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        for (int i : l) {\n            if (i < t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) < t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) < t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        for (int i : l) {\n            if (i < t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) < t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        for (Integer i : l) {\n            if (i < t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) < t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        for (int i : l) {\n            if (i < t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        int sum = 0;\n        for (int i : l) {\n            sum += i;\n        }\n        return sum < t;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        int sum = 0;\n        for (int i : l) {\n            sum += i;\n        }\n        return sum < t;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n        for (int i : l) {\n            if (i < t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        int sum = x + y;\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        int sum = x + y;\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        int sum = 0;\n        int carry = 0;\n        while (x != 0) {\n            int temp = x % 10;\n            sum += temp + carry;\n            carry = x / 10;\n            x = carry;\n        }\n        if (carry != 0) {\n            sum += carry;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        int sum = x + y;\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n        return x + y;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        char[] s0Chars = s0.toCharArray();\n        char[] s1Chars = s1.toCharArray();\n        if (s0Chars.length != s1Chars.length) {\n            return false;\n        }\n        for (int i = 0; i < s0Chars.length; i++) {\n            if (s0Chars[i] != s1Chars[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        char[] s0Chars = s0.toCharArray();\n        char[] s1Chars = s1.toCharArray();\n        Arrays.sort(s0Chars);\n        Arrays.sort(s1Chars);\n        for (int i = 0; i < s0Chars.length; i++) {\n            if (s0Chars[i] != s1Chars[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length())\n            return false;\n        char[] s0Chars = s0.toCharArray();\n        char[] s1Chars = s1.toCharArray();\n        for (int i = 0; i < s0Chars.length; i++) {\n            if (s0Chars[i] != s1Chars[i])\n                return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        char[] s0Chars = s0.toCharArray();\n        char[] s1Chars = s1.toCharArray();\n        Arrays.sort(s0Chars);\n        Arrays.sort(s1Chars);\n        for (int i = 0; i < s0Chars.length; i++) {\n            if (s0Chars[i] != s1Chars[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        char[] s0_arr = s0.toCharArray();\n        char[] s1_arr = s1.toCharArray();\n        Arrays.sort(s0_arr);\n        Arrays.sort(s1_arr);\n        for (int i = 0; i < s0_arr.length; i++) {\n            if (s0_arr[i] != s1_arr[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        char[] s0Chars = s0.toCharArray();\n        char[] s1Chars = s1.toCharArray();\n        for (int i = 0; i < s0Chars.length; i++) {\n            if (s0Chars[i] != s1Chars[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        char[] s0Chars = s0.toCharArray();\n        char[] s1Chars = s1.toCharArray();\n        Arrays.sort(s0Chars);\n        Arrays.sort(s1Chars);\n        for (int i = 0; i < s0Chars.length; i++) {\n            if (s0Chars[i] != s1Chars[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length())\n            return false;\n        char[] s0_arr = s0.toCharArray();\n        char[] s1_arr = s1.toCharArray();\n        Arrays.sort(s0_arr);\n        Arrays.sort(s1_arr);\n        for (int i = 0; i < s0_arr.length; i++) {\n            if (s0_arr[i] != s1_arr[i])\n                return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if(s0.length() != s1.length()) return false;\n        char[] s0Chars = s0.toCharArray();\n        char[] s1Chars = s1.toCharArray();\n        Arrays.sort(s0Chars);\n        Arrays.sort(s1Chars);\n        for(int i = 0; i < s0Chars.length; i++) {\n            if(s0Chars[i] != s1Chars[i]) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        char[] s0_chars = s0.toCharArray();\n        char[] s1_chars = s1.toCharArray();\n        Arrays.sort(s0_chars);\n        Arrays.sort(s1_chars);\n        for (int i = 0; i < s0_chars.length; i++) {\n            if (s0_chars[i] != s1_chars[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        char[] s0_arr = s0.toCharArray();\n        char[] s1_arr = s1.toCharArray();\n        Arrays.sort(s0_arr);\n        Arrays.sort(s1_arr);\n        for (int i = 0; i < s0_arr.length; i++) {\n            if (s0_arr[i] != s1_arr[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        char[] s0Chars = s0.toCharArray();\n        char[] s1Chars = s1.toCharArray();\n        Arrays.sort(s0Chars);\n        Arrays.sort(s1Chars);\n        for (int i = 0; i < s0Chars.length; i++) {\n            if (s0Chars[i] != s1Chars[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if(s0.length() != s1.length())\n            return false;\n        char[] s0_arr = s0.toCharArray();\n        char[] s1_arr = s1.toCharArray();\n        for(int i = 0; i < s0_arr.length; i++) {\n            if(s0_arr[i] != s1_arr[i])\n                return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) return false;\n        char[] s0Chars = s0.toCharArray();\n        char[] s1Chars = s1.toCharArray();\n        Arrays.sort(s0Chars);\n        Arrays.sort(s1Chars);\n        for (int i = 0; i < s0Chars.length; i++) {\n            if (s0Chars[i] != s1Chars[i]) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        char[] s0Chars = s0.toCharArray();\n        char[] s1Chars = s1.toCharArray();\n        Arrays.sort(s0Chars);\n        Arrays.sort(s1Chars);\n        for (int i = 0; i < s0Chars.length; i++) {\n            if (s0Chars[i] != s1Chars[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) return false;\n        char[] s0Chars = s0.toCharArray();\n        char[] s1Chars = s1.toCharArray();\n        Arrays.sort(s0Chars);\n        Arrays.sort(s1Chars);\n        for (int i = 0; i < s0Chars.length; i++) {\n            if (s0Chars[i] != s1Chars[i]) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        char[] s0Chars = s0.toCharArray();\n        char[] s1Chars = s1.toCharArray();\n        if (s0Chars.length != s1Chars.length)\n            return false;\n        for (int i = 0; i < s0Chars.length; i++) {\n            if (s0Chars[i] != s1Chars[i])\n                return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        char[] s0_chars = s0.toCharArray();\n        char[] s1_chars = s1.toCharArray();\n        for (int i = 0; i < s0_chars.length; i++) {\n            if (s0_chars[i] != s1_chars[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        if (s0.length() != s1.length()) {\n            return false;\n        }\n        char[] s0Chars = s0.toCharArray();\n        char[] s1Chars = s1.toCharArray();\n        Arrays.sort(s0Chars);\n        Arrays.sort(s1Chars);\n        for (int i = 0; i < s0Chars.length; i++) {\n            if (s0Chars[i] != s1Chars[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n        char[] s0Chars = s0.toCharArray();\n        char[] s1Chars = s1.toCharArray();\n        if (s0Chars.length != s1Chars.length) {\n            return false;\n        }\n        for (int i = 0; i < s0Chars.length; i++) {\n            if (s0Chars[i] != s1Chars[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        int d = 1;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] f = new int[n + 1];\n        f[0] = 0;\n        f[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            f[i] = f[i - 1] + f[i - 2];\n        }\n        return f[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        int a = 0;\n        int b = 1;\n        int c;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        int d = 1;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        int d = 1;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] f = new int[n+1];\n        f[0] = 0;\n        f[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            f[i] = f[i-1] + f[i-2];\n        }\n        return f[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] fibs = new int[n+1];\n        fibs[0] = 0;\n        fibs[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            fibs[i] = fibs[i-1] + fibs[i-2];\n        }\n        return fibs[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        int a = 0, b = 1, c;\n        for (int i = 0; i < n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        int d = 1;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] f = new int[n + 1];\n        f[0] = 0;\n        f[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            f[i] = f[i - 1] + f[i - 2];\n        }\n        return f[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0, b = 1, c, d;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] dp = new int[n + 1];\n        dp[0] = 0;\n        dp[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            dp[i] = dp[i - 1] + dp[i - 2];\n        }\n        return dp[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        int a = 0, b = 1, c;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        int a = 0, b = 1, c;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] memo = new int[n + 1];\n        memo[0] = 0;\n        memo[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            memo[i] = memo[i - 1] + memo[i - 2];\n        }\n        return memo[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        int a = 0;\n        int b = 1;\n        int c;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        int a = 0, b = 1, c;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        int a = 0;\n        int b = 1;\n        int c;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0, b = 1, c = 0;\n        for (int i = 2; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n        if(n == 0)\n            return 0;\n        if(n == 1)\n            return 1;\n        int a = 0, b = 1;\n        for(int i = 2; i <= n; i++) {\n            int temp = a;\n            a = b;\n            b = temp + b;\n        }\n        return b;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets == null || brackets.length() == 0) {\n            return false;\n        }\n        Stack<Character> stack = new Stack<Character>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else if (c == '>') {\n                if (stack.isEmpty() || stack.peek() != '<') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets.length() % 2 != 0) {\n            return false;\n        }\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else if (c == '>') {\n                if (stack.isEmpty() || stack.peek() != '<') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets == null || brackets.length() == 0) {\n            return true;\n        }\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else if (c == '>') {\n                if (stack.isEmpty() || stack.peek() != '<') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<Character>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else if (c == '>') {\n                if (stack.empty() || stack.peek() != '<') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.empty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != c) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<Character>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else if (c == '>') {\n                if (stack.isEmpty() || stack.peek() != '<') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        char[] bracketsArray = brackets.toCharArray();\n        Stack<Character> stack = new Stack<Character>();\n        for (char c : bracketsArray) {\n            if (c == '<') {\n                stack.push(c);\n            } else if (c == '>') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets.length() == 0) {\n            return true;\n        }\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n            if (c == '<') {\n                stack.push(c);\n            } else if (c == '>') {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (top != '<') {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else if (c == '>') {\n                if (stack.isEmpty() || stack.peek() != '<') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<Character>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else if (c == '>') {\n                if (stack.isEmpty() || stack.peek() != '<') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<Character>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else if (c == '>') {\n                if (stack.isEmpty()) {\n                    return false;\n                } else {\n                    stack.pop();\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets == null || brackets.length() == 0) {\n            return false;\n        }\n        Stack<Character> stack = new Stack<Character>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else if (c == '>') {\n                if (stack.isEmpty() || stack.peek() != '<') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<Character>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else if (c == '>') {\n                if (stack.isEmpty() || stack.peek() != '<') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets == null || brackets.length() == 0) {\n            return false;\n        }\n        Stack<Character> stack = new Stack<Character>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else if (c == '>') {\n                if (stack.isEmpty() || stack.peek() != '<') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets == null || brackets.length() == 0) {\n            return false;\n        }\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n            if (c == '<') {\n                stack.push(c);\n            } else if (c == '>') {\n                if (stack.isEmpty() || stack.peek() != '<') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets.length() % 2 != 0) {\n            return false;\n        }\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else if (c == '>') {\n                if (stack.isEmpty() || stack.peek() != '<') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets.length() % 2 != 0) {\n            return false;\n        }\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else if (c == '>') {\n                if (stack.isEmpty() || stack.peek() != '<') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n                stack.push(c);\n            } else if (c == '>') {\n                if (stack.isEmpty() || stack.peek() != '<') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        // write your code here\n        char[] bracketsArray = brackets.toCharArray();\n        Stack<Character> stack = new Stack<Character>();\n        for (char c : bracketsArray) {\n            if (c == '<') {\n                stack.push(c);\n            } else if (c == '>') {\n                if (stack.isEmpty() || stack.peek() != '<') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        // write your code here\n        if(brackets.length() == 0)\n            return true;\n        Stack<Character> stack = new Stack<Character>();\n        for(char c : brackets.toCharArray()) {\n            if(c == '<')\n                stack.push(c);\n            else if(c == '>') {\n                if(stack.isEmpty() || stack.peek() != '<')\n                    return false;\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() == 1) {\n            return true;\n        }\n        int i = 0;\n        int j = l.size() - 1;\n        while (i < j) {\n            if (l.get(i) > l.get(j)) {\n                return false;\n            }\n            if (l.get(i) < l.get(j)) {\n                return true;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() == 1) {\n            return true;\n        }\n        int prev = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > prev) {\n                return false;\n            }\n            prev = l.get(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() == 0) {\n            return true;\n        }\n        int i = 0;\n        int j = l.size() - 1;\n        while (i < j) {\n            if (l.get(i) > l.get(j)) {\n                return false;\n            }\n            if (l.get(i) < l.get(j)) {\n                return true;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        int n = l.size();\n        int i = 0;\n        while (i < n - 1) {\n            if (l.get(i) > l.get(i + 1)) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() == 0) return true;\n        int prev = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < prev) return false;\n            prev = l.get(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() == 0) {\n            return true;\n        }\n        int i = 0;\n        int j = l.size() - 1;\n        while (i < j) {\n            if (l.get(i) > l.get(j)) {\n                return false;\n            }\n            if (l.get(i) < l.get(j)) {\n                return true;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        int n = l.size();\n        int i = 0;\n        while (i < n - 1) {\n            if (l.get(i) > l.get(i + 1)) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() == 0) {\n            return true;\n        }\n        int min = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < min) {\n                return false;\n            }\n            min = l.get(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() == 1) {\n            return true;\n        }\n        int i = 0;\n        int j = l.size() - 1;\n        while (i < j) {\n            if (l.get(i) > l.get(j)) {\n                return false;\n            }\n            if (l.get(i) < l.get(j)) {\n                return true;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() == 0) {\n            return true;\n        }\n        int min = l.get(0);\n        int max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < min) {\n                min = l.get(i);\n            }\n            if (l.get(i) > max) {\n                max = l.get(i);\n            }\n        }\n        return min >= max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() == 1) {\n            return true;\n        }\n        int last = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > last) {\n                return false;\n            }\n            last = l.get(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        int n = l.size();\n        int i = 0;\n        int j = n - 1;\n        while (i < j) {\n            if (l.get(i) > l.get(j)) {\n                return false;\n            }\n            if (l.get(i) < l.get(j)) {\n                return true;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() == 0) return true;\n        int i = 0;\n        int j = l.size() - 1;\n        while (i < j) {\n            if (l.get(i) > l.get(j)) {\n                return false;\n            }\n            if (l.get(i) < l.get(j)) {\n                return true;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() == 1) {\n            return true;\n        }\n        int prev = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (prev > l.get(i)) {\n                return false;\n            }\n            prev = l.get(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() == 1) {\n            return true;\n        }\n        int i = 0;\n        int j = l.size() - 1;\n        while (i < j) {\n            if (l.get(i) > l.get(j)) {\n                return false;\n            }\n            if (l.get(i) < l.get(j)) {\n                return true;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() == 1) {\n            return true;\n        }\n        int i = 0;\n        int j = l.size() - 1;\n        while (i < j) {\n            if (l.get(i) > l.get(j)) {\n                return false;\n            }\n            if (l.get(i) < l.get(j)) {\n                return true;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() == 0) return true;\n        int prev = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < prev) return false;\n            prev = l.get(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() == 0) {\n            return true;\n        }\n        int i = 0;\n        int j = l.size() - 1;\n        while (i < j) {\n            if (l.get(i) > l.get(j)) {\n                return false;\n            }\n            if (l.get(i) < l.get(j)) {\n                return true;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() == 0) {\n            return true;\n        }\n        int last = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > last) {\n                return false;\n            }\n            last = l.get(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n        if (l.size() == 1) {\n            return true;\n        }\n        int prev = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (prev > l.get(i)) {\n                return false;\n            }\n            prev = l.get(i);\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> s1 = new HashSet<>();\n        Set<Integer> s2 = new HashSet<>();\n        for (int i : l1) {\n            s1.add(i);\n        }\n        for (int i : l2) {\n            s2.add(i);\n        }\n        List<Integer> res = new ArrayList<>();\n        for (int i : s1) {\n            if (s2.contains(i)) {\n                res.add(i);\n            }\n        }\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> s1 = new HashSet<Integer>(l1);\n        Set<Integer> s2 = new HashSet<Integer>(l2);\n        s1.retainAll(s2);\n        return new ArrayList<Integer>(s1);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<>();\n        Set<Integer> set2 = new HashSet<>();\n        for (int i : l1) {\n            set1.add(i);\n        }\n        for (int i : l2) {\n            set2.add(i);\n        }\n        List<Integer> result = new ArrayList<>();\n        for (int i : set1) {\n            if (set2.contains(i)) {\n                result.add(i);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<>();\n        Set<Integer> set2 = new HashSet<>();\n        for (int i : l1) {\n            set1.add(i);\n        }\n        for (int i : l2) {\n            set2.add(i);\n        }\n        List<Integer> result = new ArrayList<>();\n        for (int i : set1) {\n            if (set2.contains(i)) {\n                result.add(i);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2 = new HashSet<Integer>(l2);\n        Set<Integer> set3 = new HashSet<Integer>(set1);\n        set3.retainAll(set2);\n        return new ArrayList<Integer>(set3);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2 = new HashSet<Integer>(l2);\n        List<Integer> result = new ArrayList<Integer>();\n        for (Integer i : set1) {\n            if (set2.contains(i)) {\n                result.add(i);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2 = new HashSet<Integer>(l2);\n        List<Integer> result = new ArrayList<Integer>();\n        for (Integer i : set1) {\n            if (set2.contains(i)) {\n                result.add(i);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2 = new HashSet<Integer>(l2);\n        List<Integer> result = new ArrayList<Integer>();\n        Iterator<Integer> it1 = set1.iterator();\n        Iterator<Integer> it2 = set2.iterator();\n        while(it1.hasNext() && it2.hasNext()) {\n            if(it1.next() == it2.next()) {\n                result.add(it1.next());\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2 = new HashSet<Integer>(l2);\n        Set<Integer> set3 = new HashSet<Integer>();\n        set3.addAll(set1);\n        set3.retainAll(set2);\n        return new ArrayList<Integer>(set3);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2 = new HashSet<Integer>(l2);\n        List<Integer> result = new ArrayList<Integer>();\n        for (Integer i : set1) {\n            if (set2.contains(i)) {\n                result.add(i);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2 = new HashSet<Integer>(l2);\n        List<Integer> result = new ArrayList<Integer>();\n        for (Integer i : set1) {\n            if (set2.contains(i)) {\n                result.add(i);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2 = new HashSet<Integer>(l2);\n        Set<Integer> common = new HashSet<Integer>();\n        Iterator<Integer> it1 = set1.iterator();\n        Iterator<Integer> it2 = set2.iterator();\n        while (it1.hasNext() && it2.hasNext()) {\n            common.add(it1.next());\n            common.add(it2.next());\n        }\n        return new ArrayList<Integer>(common);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        List<Integer> result = new ArrayList<>();\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n        for (Integer i : set1) {\n            if (set2.contains(i)) {\n                result.add(i);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2 = new HashSet<Integer>(l2);\n        List<Integer> result = new ArrayList<Integer>();\n        for (Integer i : set1) {\n            if (set2.contains(i)) {\n                result.add(i);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2 = new HashSet<Integer>(l2);\n        List<Integer> result = new ArrayList<Integer>();\n        for (Integer i : set1) {\n            if (set2.contains(i)) {\n                result.add(i);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2 = new HashSet<Integer>(l2);\n        Set<Integer> set3 = new HashSet<Integer>();\n        set3.addAll(set1);\n        set3.retainAll(set2);\n        return new ArrayList<Integer>(set3);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2 = new HashSet<Integer>(l2);\n        List<Integer> common = new ArrayList<Integer>();\n        Iterator<Integer> it1 = set1.iterator();\n        Iterator<Integer> it2 = set2.iterator();\n        while (it1.hasNext() && it2.hasNext()) {\n            common.add(it1.next());\n            it1.next();\n        }\n        while (it1.hasNext()) {\n            common.add(it1.next());\n            it1.next();\n        }\n        while (it2.hasNext()) {\n            common.add(it2.next());\n            it2.next();\n        }\n        Collections.sort(common);\n        return common;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2 = new HashSet<Integer>(l2);\n        Set<Integer> result = new HashSet<Integer>();\n        for (Integer i : set1) {\n            if (set2.contains(i)) {\n                result.add(i);\n            }\n        }\n        return new ArrayList<Integer>(result);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        Set<Integer> set1 = new HashSet<Integer>(l1);\n        Set<Integer> set2 = new HashSet<Integer>(l2);\n        List<Integer> result = new ArrayList<Integer>();\n        for (Integer i : set1) {\n            if (set2.contains(i)) {\n                result.add(i);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n        List<Integer> result = new ArrayList<>();\n        Set<Integer> set1 = new HashSet<>(l1);\n        Set<Integer> set2 = new HashSet<>(l2);\n        for (Integer i : set1) {\n            if (set2.contains(i)) {\n                result.add(i);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int largest = 1;\n        for (int i = 2; i <= n/2; i++) {\n            if (n % i == 0) {\n                largest = i;\n                n = n/i;\n            }\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int i = 2;\n        while(n % i == 0) {\n            n /= i;\n        }\n        return i;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int i = 2;\n        while(i*i <= n) {\n            if(n % i == 0) {\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return n;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int i = 2;\n        while(i*i <= n) {\n            if(n % i == 0) {\n                n /= i;\n                i++;\n            } else {\n                i++;\n            }\n        }\n        return i;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n                i++;\n            } else {\n                i++;\n            }\n        }\n        return i;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int i = 2;\n        while(n % i == 0) {\n            n /= i;\n        }\n        return i;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int i = 2;\n        while(i*i <= n) {\n            if(n%i == 0) {\n                n /= i;\n            }\n            else {\n                i++;\n            }\n        }\n        return i;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int largest = 1;\n        for (int i = 2; i <= n/2; i++) {\n            if (n % i == 0) {\n                largest = i;\n                n /= i;\n            }\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int largest = 1;\n        int smallest = 2;\n        while (smallest <= n) {\n            if (n % smallest == 0) {\n                largest = smallest;\n                n /= smallest;\n            }\n            else {\n                smallest++;\n            }\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return i;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int i = 2;\n        while (i*i <= n) {\n            if (n % i == 0) {\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return i;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int i = 2;\n        while(i*i <= n) {\n            if(n % i == 0) {\n                n /= i;\n            }\n            else {\n                i++;\n            }\n        }\n        return n;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int i = 2;\n        while(i*i <= n) {\n            if(n % i == 0) {\n                n /= i;\n            }\n            else {\n                i++;\n            }\n        }\n        return i;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int i = 2;\n        while (n % i == 0) {\n            i++;\n        }\n        return i;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return i;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int i = 2;\n        while (n % i == 0) {\n            i++;\n        }\n        return i;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int largest = 1;\n        int smallest = 1;\n        int i = 2;\n        while(i <= n) {\n            if(n % i == 0) {\n                largest = i;\n                smallest = n / i;\n                break;\n            }\n            i++;\n        }\n        return largest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return i;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return i;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n        if (n == 1) {\n            return 1;\n        }\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return i;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets.length() == 0) {\n            return true;\n        }\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets.length() == 0) {\n            return true;\n        }\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty()) {\n                    return false;\n                }\n                char top = stack.pop();\n                if (c != top) {\n                    return false;\n                }\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets == null || brackets.length() == 0) {\n            return true;\n        }\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '(') {\n                stack.push(brackets.charAt(i));\n            } else if (brackets.charAt(i) == ')') {\n                if (stack.isEmpty() || stack.peek() != brackets.charAt(i)) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<Character>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets == null || brackets.length() == 0) {\n            return true;\n        }\n        Stack<Character> stack = new Stack<Character>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        // write your code here\n        if (brackets.length() == 0) return true;\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') stack.push(c);\n            else if (c == ')') {\n                if (stack.empty() || stack.peek() != '(') return false;\n                stack.pop();\n            }\n        }\n        return stack.empty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets == null || brackets.length() == 0) {\n            return false;\n        }\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets == null || brackets.length() == 0) {\n            return false;\n        }\n\n        Stack<Character> stack = new Stack<Character>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets == null || brackets.length() == 0) {\n            return false;\n        }\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '(') {\n                stack.push(brackets.charAt(i));\n            } else {\n                if (stack.empty() || stack.peek() != brackets.charAt(i)) {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.empty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets.length() == 0) {\n            return true;\n        }\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets.length() == 0) {\n            return true;\n        }\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        if (brackets.length() % 2 != 0) {\n            return false;\n        }\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : brackets.toCharArray()) {\n            if (c == '(') {\n                stack.push(c);\n            } else if (c == ')') {\n                if (stack.isEmpty() || stack.peek() != '(') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        int n = xs.size();\n        List<Integer> result = new ArrayList<Integer>(n);\n        for (int i = 0; i < n; i++) {\n            result.add(0);\n        }\n        result.set(0, 1);\n        for (int i = 1; i < n; i++) {\n            result.set(i, result.get(i - 1) + xs.get(i - 1) * result.get(i - 2));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        int n = xs.size();\n        List<Integer> result = new ArrayList<Integer>(n);\n        for (int i = 0; i < n; i++) {\n            result.add(0);\n        }\n        result.set(0, 1);\n        for (int i = 1; i < n; i++) {\n            result.set(i, result.get(i - 1) + xs.get(i - 1) * result.get(i - 2));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        int n = xs.size();\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            int x = xs.get(i);\n            int y = 1;\n            for (int j = i + 1; j < n; j++) {\n                y *= j;\n            }\n            res.add(y * x);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        int n = xs.size();\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            res.add(xs.get(i) * (i + 1));\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        int n = xs.size();\n        List<Integer> ans = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            int x = xs.get(i);\n            int y = 0;\n            if (i != 0) {\n                y = xs.get(i - 1);\n            }\n            ans.add(y * x);\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n        int n = xs.size();\n        if (n == 1) {\n            result.add(0);\n            return result;\n        }\n        int i = 1;\n        int j = 2;\n        while (i < n) {\n            result.add(xs.get(i) * (j - 1));\n            i++;\n            j++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> ans = new ArrayList<>();\n        int n = xs.size();\n        for (int i = 0; i < n; i++) {\n            if (i == 0) {\n                ans.add(1);\n            } else if (i == 1) {\n                ans.add(xs.get(i) + xs.get(i + 1) * xs.get(i + 2));\n            } else {\n                ans.add(xs.get(i) + xs.get(i + 1) * xs.get(i + 2) + xs.get(i + 2) * xs.get(i + 3));\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        int n = xs.size();\n        List<Integer> ans = new ArrayList<Integer>(n);\n        for (int i = 0; i < n; i++) {\n            ans.add(xs.get(i) * (i + 1));\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        int n = xs.size();\n        List<Integer> ans = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            int x = xs.get(i);\n            int y = 0;\n            if (i > 0) {\n                y = xs.get(i - 1);\n            }\n            ans.add(y * x);\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n        if (xs.size() == 0) {\n            return result;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        int n = xs.size();\n        List<Integer> result = new ArrayList<Integer>(n);\n        for (int i = 0; i < n; i++) {\n            result.add(0);\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                result.set(i, result.get(i) + xs.get(j) * (i == j ? 1 : 0));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<Integer>();\n        int n = xs.size();\n        for (int i = 0; i < n; i++) {\n            int x = xs.get(i);\n            int y = 0;\n            if (i == 0) {\n                y = 1;\n            } else if (i == 1) {\n                y = x;\n            } else {\n                y = x * (i - 1);\n            }\n            result.add(y);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> ans = new ArrayList<>();\n        int n = xs.size();\n        int i = 0;\n        while (i < n) {\n            ans.add(xs.get(i) * (i + 1));\n            i++;\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        int n = xs.size();\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            result.add(0);\n        }\n        for (int i = n - 1; i >= 0; i--) {\n            result.set(i, result.get(i + 1) + xs.get(i) * result.get(i + 2));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> ans = new ArrayList<>();\n        int n = xs.size();\n        int i = 0;\n        while (i < n) {\n            ans.add(xs.get(i) * (i + 1));\n            i++;\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> ans = new ArrayList<Integer>();\n        int n = xs.size();\n        int i = 0;\n        while (i < n) {\n            ans.add(xs.get(i) * (i + 1));\n            i++;\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        int n = xs.size();\n        List<Integer> ans = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            int x = xs.get(i);\n            int y = 0;\n            if (i > 0) {\n                y = xs.get(i - 1);\n            }\n            ans.add(y + x * i);\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        int n = xs.size();\n        List<Integer> ans = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            ans.add(0);\n        }\n        for (int i = n - 1; i >= 0; i--) {\n            for (int j = 0; j < i; j++) {\n                ans.set(i, ans.get(i) + xs.get(j) * ans.get(j + 1));\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        int n = xs.size();\n        List<Integer> ans = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            if (i == 0) {\n                ans.add(1);\n            } else {\n                ans.add(xs.get(i) * ans.get(i - 1));\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n        List<Integer> result = new ArrayList<>();\n        int n = xs.size();\n        for (int i = 0; i < n; i++) {\n            int x = xs.get(i);\n            int y = 0;\n            if (i == 0) {\n                y = 1;\n            } else {\n                y = xs.get(i - 1);\n            }\n            result.add(y * x);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] fib = new int[n + 1];\n        fib[0] = 0;\n        fib[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2];\n        }\n        return fib[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 1;\n        } else {\n            return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        for (int i = 3; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        int d = 1;\n        for (int i = 3; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] fib = new int[n+1];\n        fib[0] = 0;\n        fib[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            fib[i] = fib[i-1] + fib[i-2];\n        }\n        return fib[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        for (int i = 3; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        for (int i = 3; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] fib = new int[n+1];\n        fib[0] = 0;\n        fib[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            fib[i] = fib[i-1] + fib[i-2];\n        }\n        return fib[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] fib = new int[n + 1];\n        fib[0] = 0;\n        fib[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2];\n        }\n        return fib[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] fib = new int[n + 1];\n        fib[0] = 0;\n        fib[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2];\n        }\n        return fib[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] fib = new int[n + 1];\n        fib[0] = 0;\n        fib[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2];\n        }\n        return fib[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 1;\n        } else {\n            return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        for (int i = 3; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 1;\n        } else {\n            return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] fib = new int[n+1];\n        fib[0] = 0;\n        fib[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            fib[i] = fib[i-1] + fib[i-2];\n        }\n        return fib[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n            return 0;\n        } else if (n == 2) {\n            return 1;\n        } else {\n            return fibfib(n-1) + fibfib(n-2);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int[] fib = new int[n + 1];\n        fib[0] = 0;\n        fib[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2];\n        }\n        return fib[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n <= 1) {\n            return n;\n        }\n        int a = 0, b = 1, c = 0;\n        for (int i = 3; i <= n; i++) {\n            c = a + b;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if (n == 2) return 1;\n        int[] fib = new int[n+1];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 1;\n        for (int i = 3; i <= n; i++) {\n            fib[i] = fib[i-1] + fib[i-2] + fib[i-3];\n        }\n        return fib[n];\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        int a = 0;\n        int b = 1;\n        int c = 0;\n        int d = 1;\n        for (int i = 3; i <= n; i++) {\n            c = a + b;\n            d = b;\n            b = a;\n            a = c;\n        }\n        return a;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        int len = Integer.toString(x).length();\n        if (shift > len) {\n            return Integer.toString(x).substring(len - shift, len);\n        }\n        int carry = 0;\n        StringBuilder sb = new StringBuilder();\n        while (shift > 0) {\n            int digit = x % 10;\n            x /= 10;\n            sb.append(digit);\n            shift--;\n        }\n        if (carry > 0) {\n            sb.append(carry);\n        }\n        return sb.reverse().toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        StringBuilder sb = new StringBuilder();\n        int n = x.toString().length();\n        int carry = 0;\n        for (int i = 0; i < n; i++) {\n            int digit = x % 10;\n            int nextDigit = (digit + carry) % 10;\n            carry = (digit + carry) / 10;\n            sb.append(nextDigit);\n        }\n        if (shift > n) {\n            sb.reverse();\n        }\n        if (shift < 0) {\n            sb.reverse();\n            sb.insert(0, '0');\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        StringBuilder sb = new StringBuilder();\n        int n = x.toString().length();\n        int carry = 0;\n        for (int i = n - 1; i >= 0; i--) {\n            int digit = x % 10;\n            int newDigit = digit + carry;\n            carry = newDigit / 10;\n            sb.append(newDigit % 10);\n        }\n        if (shift > n) {\n            sb.reverse();\n        }\n        if (shift < 0) {\n            sb.reverse();\n            sb.append(carry);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < shift; i++) {\n            sb.append(s.charAt(i));\n        }\n        if (shift > s.length()) {\n            sb.reverse();\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String str = Integer.toString(x);\n        if (shift > str.length()) {\n            return str.substring(str.length() - shift);\n        } else {\n            return str.substring(shift) + str.substring(0, shift);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        StringBuilder sb = new StringBuilder();\n        int n = x.toString().length();\n        int carry = 0;\n        for (int i = 0; i < n; i++) {\n            int digit = x % 10;\n            int newDigit = (digit + carry) % 10;\n            carry = (digit + carry) / 10;\n            sb.append(newDigit);\n        }\n        if (shift > n) {\n            sb.reverse();\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n        int len = s.length();\n        if (shift > len) {\n            return s.substring(len - shift, len);\n        }\n        return s.substring(shift, len);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n        if (shift > s.length()) {\n            return s.substring(s.length() - shift);\n        }\n        return s.substring(0, shift) + s.substring(shift);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n        int len = s.length();\n        if (shift > len) {\n            return s.substring(len - shift, len);\n        } else {\n            return s.substring(shift, len);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n        int n = s.length();\n        if (shift > n) {\n            return s.substring(n - shift, n);\n        }\n        return s.substring(shift, n);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n        int len = s.length();\n        if (shift > len) {\n            return s.substring(len - shift, len);\n        }\n        return s.substring(shift, len);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n        int len = s.length();\n        if (shift > len) {\n            return s.substring(len - shift, len);\n        } else {\n            return s.substring(shift, len);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n        int len = s.length();\n        if (shift > len) {\n            return s.substring(len - shift, len);\n        } else {\n            return s.substring(shift, len);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n        int n = s.length();\n        if (shift > n) {\n            return s.substring(n - shift, n);\n        } else {\n            return s.substring(shift, n);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n        int len = s.length();\n        if (shift > len) {\n            shift = shift - len;\n            s = s.substring(len - shift, len);\n        } else if (shift < 0) {\n            shift = shift + len;\n            s = s.substring(0, shift);\n        }\n        return s;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n        int len = s.length();\n        if (shift > len) {\n            return s.substring(len - shift, len);\n        }\n        else {\n            return s.substring(shift, len);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n        int len = s.length();\n        if (shift > len) {\n            return s.substring(len - shift, len);\n        } else {\n            return s.substring(shift, len);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String str = Integer.toString(x);\n        int len = str.length();\n        if (shift > len) {\n            return str.substring(len - shift, len);\n        } else {\n            return str.substring(shift, len);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < shift; i++) {\n            sb.append(s.charAt(i));\n        }\n        if (shift > s.length()) {\n            sb.reverse();\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n        String s = Integer.toString(x);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < shift; i++) {\n            sb.append(s.charAt(i));\n        }\n        if (shift > s.length()) {\n            sb.reverse();\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                sum += s.charAt(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                sum += s.charAt(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c >= 'A' && c <= 'Z') {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                sum += s.charAt(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                sum += s.charAt(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n                sum += s.charAt(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int[] arr = new int[2];\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n1 = 0;\n        int n2 = 0;\n        int n3 = 0;\n        int n4 = 0;\n        int n5 = 0;\n        int n6 = 0;\n        int n7 = 0;\n        int n8 = 0;\n        int n9 = 0;\n        int n10 = 0;\n        int n11 = 0;\n        int n12 = 0;\n        int n13 = 0;\n        int n14 = 0;\n        int n15 = 0;\n        int n16 = 0;\n        int n17 = 0;\n        int n18 = 0;\n        int n19 = 0;\n        int n20 = 0;\n        int n21 = 0;\n        int n22 = 0;\n        int n23 = 0;\n        int n24 = 0;\n        int n25 = 0;\n        int n26 = 0;\n        int n27 = 0;\n        int n28 = 0;\n        int n29 = 0;\n        int n30 = 0;\n        int n31 = 0;\n        int n32 = 0;\n        int n33 = 0;\n        int n34 = 0;\n        int n35 = 0;\n        int n36 = 0;\n        int n37 = 0;\n        int n38 = 0;\n        int n39 = 0;\n        int n40 = 0;\n        int n41 = 0;\n        int n42 = 0;\n        int n43 = 0;\n        int n44 = 0;\n        int n45 = 0;\n        int n46 = 0;\n        int n47 = 0;\n        int n48 = 0;\n        int n49 = 0;\n        int n50 = 0;\n        int n51 = 0;\n        int n52 = 0;\n        int n53 = 0;\n        int n54 = 0;\n        int n55 = 0;\n        int n56 = 0;\n        int n57 = 0;\n        int n58 = 0;\n        int n59 = 0;\n        int n60 = 0;\n        int n61 = 0;\n        int n62 = 0;\n        int n63 = 0;\n        int n64 = 0;\n        int n65 = 0;\n        int n66 = 0;\n        int n67 = 0;\n        int n68 = 0;\n        int n69 = 0;\n        int n70 = 0;\n        int n71 = 0;\n        int n72 = 0;\n        int n73 = 0;\n        int n74 = 0;\n        int n75 = 0;\n        int n76 = 0;\n        int n77 = 0;\n        int n78 = 0;\n        int n79 = 0;\n        int n80 = 0;\n        int n81 = 0;\n        int n82 = 0;\n        int n83 = 0;\n        int n84 = 0;\n        int n85 = 0;\n        int n86 = 0;\n        int n87 = 0;\n        int n88 = 0;\n        int n89 = 0;\n        int n90 = 0;\n        int n91 = 0;\n        int n92 = 0;\n        int n93 = 0;\n        int n94 = 0;\n        int n95 = 0;\n        int n96 = 0;\n        int n97 = 0;\n        int n98 = 0;\n        int n99 = 0;\n        int n100 = 0;\n        int n101 = 0;\n        int n102 = 0;\n        int n103 = 0;\n        int n104 = 0;\n        int n105 = 0;\n        int n106 = 0;\n        int n107 = 0;\n        int n108 = 0;\n        int n109 = 0;\n        int n110 = 0;\n        int n111 = 0;\n        int n112 = 0;\n        int n113 = 0;\n        int n114 = 0;\n        int n115 = 0;\n        int n116 = 0;\n        int n117 = 0;\n        int n118 = 0;\n        int n119 = 0;\n        int n120 = 0;\n        int n121 = 0;\n        int n122 = 0;\n        int n123 = 0;\n        int n124 = 0;\n        int n125 = 0;\n        int n126 = 0;\n        int n127 = 0;\n        int n128 = 0;\n        int n129 = 0;\n        int n130 = 0;\n        int n131 = 0;\n        int n132 = 0;\n        int n133 = 0;\n        int n134 = 0;\n        int n135 = 0;\n        int n136 = 0;\n        int n137 = 0;\n        int n138 = 0;\n        int n139 = 0;\n        int n140 = 0;\n        int n141 = 0;\n        int n142 = 0;\n        int n143 = 0;\n        int n144 = 0;\n        int n145 = 0;\n        int n146 = 0;\n        int n147 = 0;\n        int n148 = 0;\n        int n149 = 0;\n        int n150 = 0;\n        int n151 = 0;\n        int n152 = 0;\n        int n153 = 0;\n        int n154 = 0;\n        int n155 = 0;\n        int n156 = 0;\n        int n157 = 0;\n        int n158 = 0;\n        int n159 = 0;\n        int n160 = 0;\n        int n161 =", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        String[] str = s.split(\" \");\n        int count = 0;\n        for(int i = 0; i < str.length; i++) {\n            if(str[i].equals(\"mango\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int count = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n1 = 0;\n        int n2 = 0;\n        int n3 = 0;\n        int n4 = 0;\n        int n5 = 0;\n        int n6 = 0;\n        int n7 = 0;\n        int n8 = 0;\n        int n9 = 0;\n        int n10 = 0;\n        int n11 = 0;\n        int n12 = 0;\n        int n13 = 0;\n        int n14 = 0;\n        int n15 = 0;\n        int n16 = 0;\n        int n17 = 0;\n        int n18 = 0;\n        int n19 = 0;\n        int n20 = 0;\n        int n21 = 0;\n        int n22 = 0;\n        int n23 = 0;\n        int n24 = 0;\n        int n25 = 0;\n        int n26 = 0;\n        int n27 = 0;\n        int n28 = 0;\n        int n29 = 0;\n        int n30 = 0;\n        int n31 = 0;\n        int n32 = 0;\n        int n33 = 0;\n        int n34 = 0;\n        int n35 = 0;\n        int n36 = 0;\n        int n37 = 0;\n        int n38 = 0;\n        int n39 = 0;\n        int n40 = 0;\n        int n41 = 0;\n        int n42 = 0;\n        int n43 = 0;\n        int n44 = 0;\n        int n45 = 0;\n        int n46 = 0;\n        int n47 = 0;\n        int n48 = 0;\n        int n49 = 0;\n        int n50 = 0;\n        int n51 = 0;\n        int n52 = 0;\n        int n53 = 0;\n        int n54 = 0;\n        int n55 = 0;\n        int n56 = 0;\n        int n57 = 0;\n        int n58 = 0;\n        int n59 = 0;\n        int n60 = 0;\n        int n61 = 0;\n        int n62 = 0;\n        int n63 = 0;\n        int n64 = 0;\n        int n65 = 0;\n        int n66 = 0;\n        int n67 = 0;\n        int n68 = 0;\n        int n69 = 0;\n        int n70 = 0;\n        int n71 = 0;\n        int n72 = 0;\n        int n73 = 0;\n        int n74 = 0;\n        int n75 = 0;\n        int n76 = 0;\n        int n77 = 0;\n        int n78 = 0;\n        int n79 = 0;\n        int n80 = 0;\n        int n81 = 0;\n        int n82 = 0;\n        int n83 = 0;\n        int n84 = 0;\n        int n85 = 0;\n        int n86 = 0;\n        int n87 = 0;\n        int n88 = 0;\n        int n89 = 0;\n        int n90 = 0;\n        int n91 = 0;\n        int n92 = 0;\n        int n93 = 0;\n        int n94 = 0;\n        int n95 = 0;\n        int n96 = 0;\n        int n97 = 0;\n        int n98 = 0;\n        int n99 = 0;\n        int n100 = 0;\n        int n101 = 0;\n        int n102 = 0;\n        int n103 = 0;\n        int n104 = 0;\n        int n105 = 0;\n        int n106 = 0;\n        int n107 = 0;\n        int n108 = 0;\n        int n109 = 0;\n        int n110 = 0;\n        int n111 = 0;\n        int n112 = 0;\n        int n113 = 0;\n        int n114 = 0;\n        int n115 = 0;\n        int n116 = 0;\n        int n117 = 0;\n        int n118 = 0;\n        int n119 = 0;\n        int n120 = 0;\n        int n121 = 0;\n        int n122 = 0;\n        int n123 = 0;\n        int n124 = 0;\n        int n125 = 0;\n        int n126 = 0;\n        int n127 = 0;\n        int n128 = 0;\n        int n129 = 0;\n        int n130 = 0;\n        int n131 = 0;\n        int n132 = 0;\n        int n133 = 0;\n        int n134 = 0;\n        int n135 = 0;\n        int n136 = 0;\n        int n137 = 0;\n        int n138 = 0;\n        int n139 = 0;\n        int n140 = 0;\n        int n141 = 0;\n        int n142 = 0;\n        int n143 = 0;\n        int n144 = 0;\n        int n145 = 0;\n        int n146 = 0;\n        int n147 = 0;\n        int n148 = 0;\n        int n149 = 0;\n        int n150 = 0;\n        int n151 = 0;\n        int n152 = 0;\n        int n153 = 0;\n        int n154 = 0;\n        int n155 = 0;\n        int n156 = 0;\n        int n157 = 0;\n        int n158 = 0;\n        int n159 = 0;\n        int n160 = 0;\n        int n161 = 0;", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int[] arr = new int[2];\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int m = 0;\n        int n1 = 0;\n        int n2 = 0;\n        int n3 = 0;\n        int n4 = 0;\n        int n5 = 0;\n        int n6 = 0;\n        int n7 = 0;\n        int n8 = 0;\n        int n9 = 0;\n        int n10 = 0;\n        int n11 = 0;\n        int n12 = 0;\n        int n13 = 0;\n        int n14 = 0;\n        int n15 = 0;\n        int n16 = 0;\n        int n17 = 0;\n        int n18 = 0;\n        int n19 = 0;\n        int n20 = 0;\n        int n21 = 0;\n        int n22 = 0;\n        int n23 = 0;\n        int n24 = 0;\n        int n25 = 0;\n        int n26 = 0;\n        int n27 = 0;\n        int n28 = 0;\n        int n29 = 0;\n        int n30 = 0;\n        int n31 = 0;\n        int n32 = 0;\n        int n33 = 0;\n        int n34 = 0;\n        int n35 = 0;\n        int n36 = 0;\n        int n37 = 0;\n        int n38 = 0;\n        int n39 = 0;\n        int n40 = 0;\n        int n41 = 0;\n        int n42 = 0;\n        int n43 = 0;\n        int n44 = 0;\n        int n45 = 0;\n        int n46 = 0;\n        int n47 = 0;\n        int n48 = 0;\n        int n49 = 0;\n        int n50 = 0;\n        int n51 = 0;\n        int n52 = 0;\n        int n53 = 0;\n        int n54 = 0;\n        int n55 = 0;\n        int n56 = 0;\n        int n57 = 0;\n        int n58 = 0;\n        int n59 = 0;\n        int n60 = 0;\n        int n61 = 0;\n        int n62 = 0;\n        int n63 = 0;\n        int n64 = 0;\n        int n65 = 0;\n        int n66 = 0;\n        int n67 = 0;\n        int n68 = 0;\n        int n69 = 0;\n        int n70 = 0;\n        int n71 = 0;\n        int n72 = 0;\n        int n73 = 0;\n        int n74 = 0;\n        int n75 = 0;\n        int n76 = 0;\n        int n77 = 0;\n        int n78 = 0;\n        int n79 = 0;\n        int n80 = 0;\n        int n81 = 0;\n        int n82 = 0;\n        int n83 = 0;\n        int n84 = 0;\n        int n85 = 0;\n        int n86 = 0;\n        int n87 = 0;\n        int n88 = 0;\n        int n89 = 0;\n        int n90 = 0;\n        int n91 = 0;\n        int n92 = 0;\n        int n93 = 0;\n        int n94 = 0;\n        int n95 = 0;\n        int n96 = 0;\n        int n97 = 0;\n        int n98 = 0;\n        int n99 = 0;\n        int n100 = 0;\n        int n101 = 0;\n        int n102 = 0;\n        int n103 = 0;\n        int n104 = 0;\n        int n105 = 0;\n        int n106 = 0;\n        int n107 = 0;\n        int n108 = 0;\n        int n109 = 0;\n        int n110 = 0;\n        int n111 = 0;\n        int n112 = 0;\n        int n113 = 0;\n        int n114 = 0;\n        int n115 = 0;\n        int n116 = 0;\n        int n117 = 0;\n        int n118 = 0;\n        int n119 = 0;\n        int n120 = 0;\n        int n121 = 0;\n        int n122 = 0;\n        int n123 = 0;\n        int n124 = 0;\n        int n125 = 0;\n        int n126 = 0;\n        int n127 = 0;\n        int n128 = 0;\n        int n129 = 0;\n        int n130 = 0;\n        int n131 = 0;\n        int n132 = 0;\n        int n133 = 0;\n        int n134 = 0;\n        int n135 = 0;\n        int n136 = 0;\n        int n137 = 0;\n        int n138 = 0;\n        int n139 = 0;\n        int n140 = 0;\n        int n141 = 0;\n        int n142 = 0;\n        int n143 = 0;\n        int n144 = 0;\n        int n145 = 0;\n        int n146 = 0;\n        int n147 = 0;\n        int n148 = 0;\n        int n149 = 0;\n        int n150 = 0;\n        int n151 = 0;\n        int n152 = 0;\n        int n153 = 0;\n        int n154 = 0;\n        int n155 = 0;\n        int n156 = 0;\n        int n157 = 0;\n        int n158 = 0;\n        int n159 = 0;\n        int n160 = 0;\n        int n161 = 0;\n        int n1", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int[] arr = new int[2];\n        int count = 0;\n        for(int i = 0; i < s.length(); i++) {\n            if(s.charAt(i) == 'a') {\n                arr[0] += 1;\n            }\n            else if(s.charAt(i) == 'o') {\n                arr[1] += 1;\n            }\n        }\n        for(int i = 0; i < arr.length; i++) {\n            if(arr[i] == 0) {\n                count += 1;\n            }\n        }\n        if(count == n) {\n            return 1;\n        }\n        return 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int[] arr = new int[2];\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n1 = 0;\n        int n2 = 0;\n        int n3 = 0;\n        int n4 = 0;\n        int n5 = 0;\n        int n6 = 0;\n        int n7 = 0;\n        int n8 = 0;\n        int n9 = 0;\n        int n10 = 0;\n        int n11 = 0;\n        int n12 = 0;\n        int n13 = 0;\n        int n14 = 0;\n        int n15 = 0;\n        int n16 = 0;\n        int n17 = 0;\n        int n18 = 0;\n        int n19 = 0;\n        int n20 = 0;\n        int n21 = 0;\n        int n22 = 0;\n        int n23 = 0;\n        int n24 = 0;\n        int n25 = 0;\n        int n26 = 0;\n        int n27 = 0;\n        int n28 = 0;\n        int n29 = 0;\n        int n30 = 0;\n        int n31 = 0;\n        int n32 = 0;\n        int n33 = 0;\n        int n34 = 0;\n        int n35 = 0;\n        int n36 = 0;\n        int n37 = 0;\n        int n38 = 0;\n        int n39 = 0;\n        int n40 = 0;\n        int n41 = 0;\n        int n42 = 0;\n        int n43 = 0;\n        int n44 = 0;\n        int n45 = 0;\n        int n46 = 0;\n        int n47 = 0;\n        int n48 = 0;\n        int n49 = 0;\n        int n50 = 0;\n        int n51 = 0;\n        int n52 = 0;\n        int n53 = 0;\n        int n54 = 0;\n        int n55 = 0;\n        int n56 = 0;\n        int n57 = 0;\n        int n58 = 0;\n        int n59 = 0;\n        int n60 = 0;\n        int n61 = 0;\n        int n62 = 0;\n        int n63 = 0;\n        int n64 = 0;\n        int n65 = 0;\n        int n66 = 0;\n        int n67 = 0;\n        int n68 = 0;\n        int n69 = 0;\n        int n70 = 0;\n        int n71 = 0;\n        int n72 = 0;\n        int n73 = 0;\n        int n74 = 0;\n        int n75 = 0;\n        int n76 = 0;\n        int n77 = 0;\n        int n78 = 0;\n        int n79 = 0;\n        int n80 = 0;\n        int n81 = 0;\n        int n82 = 0;\n        int n83 = 0;\n        int n84 = 0;\n        int n85 = 0;\n        int n86 = 0;\n        int n87 = 0;\n        int n88 = 0;\n        int n89 = 0;\n        int n90 = 0;\n        int n91 = 0;\n        int n92 = 0;\n        int n93 = 0;\n        int n94 = 0;\n        int n95 = 0;\n        int n96 = 0;\n        int n97 = 0;\n        int n98 = 0;\n        int n99 = 0;\n        int n100 = 0;\n        int n101 = 0;\n        int n102 = 0;\n        int n103 = 0;\n        int n104 = 0;\n        int n105 = 0;\n        int n106 = 0;\n        int n107 = 0;\n        int n108 = 0;\n        int n109 = 0;\n        int n110 = 0;\n        int n111 = 0;\n        int n112 = 0;\n        int n113 = 0;\n        int n114 = 0;\n        int n115 = 0;\n        int n116 = 0;\n        int n117 = 0;\n        int n118 = 0;\n        int n119 = 0;\n        int n120 = 0;\n        int n121 = 0;\n        int n122 = 0;\n        int n123 = 0;\n        int n124 = 0;\n        int n125 = 0;\n        int n126 = 0;\n        int n127 = 0;\n        int n128 = 0;\n        int n129 = 0;\n        int n130 = 0;\n        int n131 = 0;\n        int n132 = 0;\n        int n133 = 0;\n        int n134 = 0;\n        int n135 = 0;\n        int n136 = 0;\n        int n137 = 0;\n        int n138 = 0;\n        int n139 = 0;\n        int n140 = 0;\n        int n141 = 0;\n        int n142 = 0;\n        int n143 = 0;\n        int n144 = 0;\n        int n145 = 0;\n        int n146 = 0;\n        int n147 = 0;\n        int n148 = 0;\n        int n149 = 0;\n        int n150 = 0;\n        int n151 = 0;\n        int n152 = 0;\n        int n153 = 0;\n        int n154 = 0;\n        int n155 = 0;\n        int n156 = 0;\n        int n157 = 0;\n        int n158 = 0;\n        int n159 = 0;\n        int n160 = 0;\n        int n161 =", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int count = 0;\n        int[] arr = new int[2];\n        for(int i = 0; i < s.length(); i++){\n            if(s.charAt(i) == 'a'){\n                arr[0] += 1;\n            }\n            else if(s.charAt(i) == 'o'){\n                arr[1] += 1;\n            }\n        }\n        if(arr[0] == arr[1]){\n            count = arr[0];\n        }\n        else{\n            count = arr[1];\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int[] arr = new int[10];\n        int count = 0;\n        int i = 0;\n        while(i < s.length()) {\n            if(s.charAt(i) == 'a') {\n                arr[0]++;\n            }\n            else if(s.charAt(i) == 'o') {\n                arr[1]++;\n            }\n            else if(s.charAt(i) == 'm') {\n                arr[2]++;\n            }\n            i++;\n        }\n        for(int j = 0; j < 3; j++) {\n            if(arr[j] > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int[] arr = new int[2];\n        arr[0] = 0;\n        arr[1] = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n1 = 0;\n        int n2 = 0;\n        int n3 = 0;\n        int n4 = 0;\n        int n5 = 0;\n        int n6 = 0;\n        int n7 = 0;\n        int n8 = 0;\n        int n9 = 0;\n        int n10 = 0;\n        int n11 = 0;\n        int n12 = 0;\n        int n13 = 0;\n        int n14 = 0;\n        int n15 = 0;\n        int n16 = 0;\n        int n17 = 0;\n        int n18 = 0;\n        int n19 = 0;\n        int n20 = 0;\n        int n21 = 0;\n        int n22 = 0;\n        int n23 = 0;\n        int n24 = 0;\n        int n25 = 0;\n        int n26 = 0;\n        int n27 = 0;\n        int n28 = 0;\n        int n29 = 0;\n        int n30 = 0;\n        int n31 = 0;\n        int n32 = 0;\n        int n33 = 0;\n        int n34 = 0;\n        int n35 = 0;\n        int n36 = 0;\n        int n37 = 0;\n        int n38 = 0;\n        int n39 = 0;\n        int n40 = 0;\n        int n41 = 0;\n        int n42 = 0;\n        int n43 = 0;\n        int n44 = 0;\n        int n45 = 0;\n        int n46 = 0;\n        int n47 = 0;\n        int n48 = 0;\n        int n49 = 0;\n        int n50 = 0;\n        int n51 = 0;\n        int n52 = 0;\n        int n53 = 0;\n        int n54 = 0;\n        int n55 = 0;\n        int n56 = 0;\n        int n57 = 0;\n        int n58 = 0;\n        int n59 = 0;\n        int n60 = 0;\n        int n61 = 0;\n        int n62 = 0;\n        int n63 = 0;\n        int n64 = 0;\n        int n65 = 0;\n        int n66 = 0;\n        int n67 = 0;\n        int n68 = 0;\n        int n69 = 0;\n        int n70 = 0;\n        int n71 = 0;\n        int n72 = 0;\n        int n73 = 0;\n        int n74 = 0;\n        int n75 = 0;\n        int n76 = 0;\n        int n77 = 0;\n        int n78 = 0;\n        int n79 = 0;\n        int n80 = 0;\n        int n81 = 0;\n        int n82 = 0;\n        int n83 = 0;\n        int n84 = 0;\n        int n85 = 0;\n        int n86 = 0;\n        int n87 = 0;\n        int n88 = 0;\n        int n89 = 0;\n        int n90 = 0;\n        int n91 = 0;\n        int n92 = 0;\n        int n93 = 0;\n        int n94 = 0;\n        int n95 = 0;\n        int n96 = 0;\n        int n97 = 0;\n        int n98 = 0;\n        int n99 = 0;\n        int n100 = 0;\n        int n101 = 0;\n        int n102 = 0;\n        int n103 = 0;\n        int n104 = 0;\n        int n105 = 0;\n        int n106 = 0;\n        int n107 = 0;\n        int n108 = 0;\n        int n109 = 0;\n        int n110 = 0;\n        int n111 = 0;\n        int n112 = 0;\n        int n113 = 0;\n        int n114 = 0;\n        int n115 = 0;\n        int n116 = 0;\n        int n117 = 0;\n        int n118 = 0;\n        int n119 = 0;\n        int n120 = 0;\n        int n121 = 0;\n        int n122 = 0;\n        int n123 = 0;\n        int n124 = 0;\n        int n125 = 0;\n        int n126 = 0;\n        int n127 = 0;\n        int n128 = 0;\n        int n129 = 0;\n        int n130 = 0;\n        int n131 = 0;\n        int n132 = 0;\n        int n133 = 0;\n        int n134 = 0;\n        int n135 = 0;\n        int n136 = 0;\n        int n137 = 0;\n        int n138 = 0;\n        int n139 = 0;\n        int n140 = 0;\n        int n141 = 0;\n        int n142 = 0;\n        int n143 = 0;\n        int n144 = 0;\n        int n145 = 0;\n        int n146 = 0;\n        int n147 = 0;\n        int n148 = 0;\n        int n149 = 0;\n        int n150 = 0;\n        int n151 = 0;\n        int n152 = 0;\n        int n153 = 0;\n        int n154 = 0;\n        int n155 = 0;\n        int n156 = 0;\n        int n157 = 0;\n        int n158 = 0;\n        int n159 = 0", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int[] arr = new int[2];\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n1 = 0;\n        int n2 = 0;\n        int n3 = 0;\n        int n4 = 0;\n        int n5 = 0;\n        int n6 = 0;\n        int n7 = 0;\n        int n8 = 0;\n        int n9 = 0;\n        int n10 = 0;\n        int n11 = 0;\n        int n12 = 0;\n        int n13 = 0;\n        int n14 = 0;\n        int n15 = 0;\n        int n16 = 0;\n        int n17 = 0;\n        int n18 = 0;\n        int n19 = 0;\n        int n20 = 0;\n        int n21 = 0;\n        int n22 = 0;\n        int n23 = 0;\n        int n24 = 0;\n        int n25 = 0;\n        int n26 = 0;\n        int n27 = 0;\n        int n28 = 0;\n        int n29 = 0;\n        int n30 = 0;\n        int n31 = 0;\n        int n32 = 0;\n        int n33 = 0;\n        int n34 = 0;\n        int n35 = 0;\n        int n36 = 0;\n        int n37 = 0;\n        int n38 = 0;\n        int n39 = 0;\n        int n40 = 0;\n        int n41 = 0;\n        int n42 = 0;\n        int n43 = 0;\n        int n44 = 0;\n        int n45 = 0;\n        int n46 = 0;\n        int n47 = 0;\n        int n48 = 0;\n        int n49 = 0;\n        int n50 = 0;\n        int n51 = 0;\n        int n52 = 0;\n        int n53 = 0;\n        int n54 = 0;\n        int n55 = 0;\n        int n56 = 0;\n        int n57 = 0;\n        int n58 = 0;\n        int n59 = 0;\n        int n60 = 0;\n        int n61 = 0;\n        int n62 = 0;\n        int n63 = 0;\n        int n64 = 0;\n        int n65 = 0;\n        int n66 = 0;\n        int n67 = 0;\n        int n68 = 0;\n        int n69 = 0;\n        int n70 = 0;\n        int n71 = 0;\n        int n72 = 0;\n        int n73 = 0;\n        int n74 = 0;\n        int n75 = 0;\n        int n76 = 0;\n        int n77 = 0;\n        int n78 = 0;\n        int n79 = 0;\n        int n80 = 0;\n        int n81 = 0;\n        int n82 = 0;\n        int n83 = 0;\n        int n84 = 0;\n        int n85 = 0;\n        int n86 = 0;\n        int n87 = 0;\n        int n88 = 0;\n        int n89 = 0;\n        int n90 = 0;\n        int n91 = 0;\n        int n92 = 0;\n        int n93 = 0;\n        int n94 = 0;\n        int n95 = 0;\n        int n96 = 0;\n        int n97 = 0;\n        int n98 = 0;\n        int n99 = 0;\n        int n100 = 0;\n        int n101 = 0;\n        int n102 = 0;\n        int n103 = 0;\n        int n104 = 0;\n        int n105 = 0;\n        int n106 = 0;\n        int n107 = 0;\n        int n108 = 0;\n        int n109 = 0;\n        int n110 = 0;\n        int n111 = 0;\n        int n112 = 0;\n        int n113 = 0;\n        int n114 = 0;\n        int n115 = 0;\n        int n116 = 0;\n        int n117 = 0;\n        int n118 = 0;\n        int n119 = 0;\n        int n120 = 0;\n        int n121 = 0;\n        int n122 = 0;\n        int n123 = 0;\n        int n124 = 0;\n        int n125 = 0;\n        int n126 = 0;\n        int n127 = 0;\n        int n128 = 0;\n        int n129 = 0;\n        int n130 = 0;\n        int n131 = 0;\n        int n132 = 0;\n        int n133 = 0;\n        int n134 = 0;\n        int n135 = 0;\n        int n136 = 0;\n        int n137 = 0;\n        int n138 = 0;\n        int n139 = 0;\n        int n140 = 0;\n        int n141 = 0;\n        int n142 = 0;\n        int n143 = 0;\n        int n144 = 0;\n        int n145 = 0;\n        int n146 = 0;\n        int n147 = 0;\n        int n148 = 0;\n        int n149 = 0;\n        int n150 = 0;\n        int n151 = 0;\n        int n152 = 0;\n        int n153 = 0;\n        int n154 = 0;\n        int n155 = 0;\n        int n156 = 0;\n        int n157 = 0;\n        int n158 = 0;\n        int n159 = 0;\n        int n160 = 0;\n        int n161 =", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int[] fruit = new int[n];\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n1 = 0;\n        int n2 = 0;\n        int n3 = 0;\n        int n4 = 0;\n        int n5 = 0;\n        int n6 = 0;\n        int n7 = 0;\n        int n8 = 0;\n        int n9 = 0;\n        int n10 = 0;\n        int n11 = 0;\n        int n12 = 0;\n        int n13 = 0;\n        int n14 = 0;\n        int n15 = 0;\n        int n16 = 0;\n        int n17 = 0;\n        int n18 = 0;\n        int n19 = 0;\n        int n20 = 0;\n        int n21 = 0;\n        int n22 = 0;\n        int n23 = 0;\n        int n24 = 0;\n        int n25 = 0;\n        int n26 = 0;\n        int n27 = 0;\n        int n28 = 0;\n        int n29 = 0;\n        int n30 = 0;\n        int n31 = 0;\n        int n32 = 0;\n        int n33 = 0;\n        int n34 = 0;\n        int n35 = 0;\n        int n36 = 0;\n        int n37 = 0;\n        int n38 = 0;\n        int n39 = 0;\n        int n40 = 0;\n        int n41 = 0;\n        int n42 = 0;\n        int n43 = 0;\n        int n44 = 0;\n        int n45 = 0;\n        int n46 = 0;\n        int n47 = 0;\n        int n48 = 0;\n        int n49 = 0;\n        int n50 = 0;\n        int n51 = 0;\n        int n52 = 0;\n        int n53 = 0;\n        int n54 = 0;\n        int n55 = 0;\n        int n56 = 0;\n        int n57 = 0;\n        int n58 = 0;\n        int n59 = 0;\n        int n60 = 0;\n        int n61 = 0;\n        int n62 = 0;\n        int n63 = 0;\n        int n64 = 0;\n        int n65 = 0;\n        int n66 = 0;\n        int n67 = 0;\n        int n68 = 0;\n        int n69 = 0;\n        int n70 = 0;\n        int n71 = 0;\n        int n72 = 0;\n        int n73 = 0;\n        int n74 = 0;\n        int n75 = 0;\n        int n76 = 0;\n        int n77 = 0;\n        int n78 = 0;\n        int n79 = 0;\n        int n80 = 0;\n        int n81 = 0;\n        int n82 = 0;\n        int n83 = 0;\n        int n84 = 0;\n        int n85 = 0;\n        int n86 = 0;\n        int n87 = 0;\n        int n88 = 0;\n        int n89 = 0;\n        int n90 = 0;\n        int n91 = 0;\n        int n92 = 0;\n        int n93 = 0;\n        int n94 = 0;\n        int n95 = 0;\n        int n96 = 0;\n        int n97 = 0;\n        int n98 = 0;\n        int n99 = 0;\n        int n100 = 0;\n        int n101 = 0;\n        int n102 = 0;\n        int n103 = 0;\n        int n104 = 0;\n        int n105 = 0;\n        int n106 = 0;\n        int n107 = 0;\n        int n108 = 0;\n        int n109 = 0;\n        int n110 = 0;\n        int n111 = 0;\n        int n112 = 0;\n        int n113 = 0;\n        int n114 = 0;\n        int n115 = 0;\n        int n116 = 0;\n        int n117 = 0;\n        int n118 = 0;\n        int n119 = 0;\n        int n120 = 0;\n        int n121 = 0;\n        int n122 = 0;\n        int n123 = 0;\n        int n124 = 0;\n        int n125 = 0;\n        int n126 = 0;\n        int n127 = 0;\n        int n128 = 0;\n        int n129 = 0;\n        int n130 = 0;\n        int n131 = 0;\n        int n132 = 0;\n        int n133 = 0;\n        int n134 = 0;\n        int n135 = 0;\n        int n136 = 0;\n        int n137 = 0;\n        int n138 = 0;\n        int n139 = 0;\n        int n140 = 0;\n        int n141 = 0;\n        int n142 = 0;\n        int n143 = 0;\n        int n144 = 0;\n        int n145 = 0;\n        int n146 = 0;\n        int n147 = 0;\n        int n148 = 0;\n        int n149 = 0;\n        int n150 = 0;\n        int n151 = 0;\n        int n152 = 0;\n        int n153 = 0;\n        int n154 = 0;\n        int n155 = 0;\n        int n156 = 0;\n        int n157 = 0;\n        int n158 = 0;\n        int n159 = 0;\n        int n160 = 0;\n        int n161 =", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int[] arr = new int[2];\n        int i = 0;\n        int j = 0;\n        int count = 0;\n        int total = 0;\n        for(int k = 0; k < s.length(); k++) {\n            if(s.charAt(k) == 'a') {\n                arr[0] += 1;\n                total += 1;\n            }\n            else if(s.charAt(k) == 'o') {\n                arr[1] += 1;\n                total += 1;\n            }\n            else if(s.charAt(k) == 'm') {\n                arr[2] += 1;\n                total += 1;\n            }\n        }\n        for(int k = 0; k < arr.length; k++) {\n            if(arr[k] == 0) {\n                count += 1;\n            }\n        }\n        if(count == 0) {\n            return 0;\n        }\n        else {\n            return (n - total) / count;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int[] arr = new int[2];\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n1 = 0;\n        int n2 = 0;\n        int n3 = 0;\n        int n4 = 0;\n        int n5 = 0;\n        int n6 = 0;\n        int n7 = 0;\n        int n8 = 0;\n        int n9 = 0;\n        int n10 = 0;\n        int n11 = 0;\n        int n12 = 0;\n        int n13 = 0;\n        int n14 = 0;\n        int n15 = 0;\n        int n16 = 0;\n        int n17 = 0;\n        int n18 = 0;\n        int n19 = 0;\n        int n20 = 0;\n        int n21 = 0;\n        int n22 = 0;\n        int n23 = 0;\n        int n24 = 0;\n        int n25 = 0;\n        int n26 = 0;\n        int n27 = 0;\n        int n28 = 0;\n        int n29 = 0;\n        int n30 = 0;\n        int n31 = 0;\n        int n32 = 0;\n        int n33 = 0;\n        int n34 = 0;\n        int n35 = 0;\n        int n36 = 0;\n        int n37 = 0;\n        int n38 = 0;\n        int n39 = 0;\n        int n40 = 0;\n        int n41 = 0;\n        int n42 = 0;\n        int n43 = 0;\n        int n44 = 0;\n        int n45 = 0;\n        int n46 = 0;\n        int n47 = 0;\n        int n48 = 0;\n        int n49 = 0;\n        int n50 = 0;\n        int n51 = 0;\n        int n52 = 0;\n        int n53 = 0;\n        int n54 = 0;\n        int n55 = 0;\n        int n56 = 0;\n        int n57 = 0;\n        int n58 = 0;\n        int n59 = 0;\n        int n60 = 0;\n        int n61 = 0;\n        int n62 = 0;\n        int n63 = 0;\n        int n64 = 0;\n        int n65 = 0;\n        int n66 = 0;\n        int n67 = 0;\n        int n68 = 0;\n        int n69 = 0;\n        int n70 = 0;\n        int n71 = 0;\n        int n72 = 0;\n        int n73 = 0;\n        int n74 = 0;\n        int n75 = 0;\n        int n76 = 0;\n        int n77 = 0;\n        int n78 = 0;\n        int n79 = 0;\n        int n80 = 0;\n        int n81 = 0;\n        int n82 = 0;\n        int n83 = 0;\n        int n84 = 0;\n        int n85 = 0;\n        int n86 = 0;\n        int n87 = 0;\n        int n88 = 0;\n        int n89 = 0;\n        int n90 = 0;\n        int n91 = 0;\n        int n92 = 0;\n        int n93 = 0;\n        int n94 = 0;\n        int n95 = 0;\n        int n96 = 0;\n        int n97 = 0;\n        int n98 = 0;\n        int n99 = 0;\n        int n100 = 0;\n        int n101 = 0;\n        int n102 = 0;\n        int n103 = 0;\n        int n104 = 0;\n        int n105 = 0;\n        int n106 = 0;\n        int n107 = 0;\n        int n108 = 0;\n        int n109 = 0;\n        int n110 = 0;\n        int n111 = 0;\n        int n112 = 0;\n        int n113 = 0;\n        int n114 = 0;\n        int n115 = 0;\n        int n116 = 0;\n        int n117 = 0;\n        int n118 = 0;\n        int n119 = 0;\n        int n120 = 0;\n        int n121 = 0;\n        int n122 = 0;\n        int n123 = 0;\n        int n124 = 0;\n        int n125 = 0;\n        int n126 = 0;\n        int n127 = 0;\n        int n128 = 0;\n        int n129 = 0;\n        int n130 = 0;\n        int n131 = 0;\n        int n132 = 0;\n        int n133 = 0;\n        int n134 = 0;\n        int n135 = 0;\n        int n136 = 0;\n        int n137 = 0;\n        int n138 = 0;\n        int n139 = 0;\n        int n140 = 0;\n        int n141 = 0;\n        int n142 = 0;\n        int n143 = 0;\n        int n144 = 0;\n        int n145 = 0;\n        int n146 = 0;\n        int n147 = 0;\n        int n148 = 0;\n        int n149 = 0;\n        int n150 = 0;\n        int n151 = 0;\n        int n152 = 0;\n        int n153 = 0;\n        int n154 = 0;\n        int n155 = 0;\n        int n156 = 0;\n        int n157 = 0;\n        int n158 = 0;\n        int n159 = 0;\n        int n160 = 0;\n        int n161 =", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int[] arr = new int[2];\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n1 = 0;\n        int n2 = 0;\n        int n3 = 0;\n        int n4 = 0;\n        int n5 = 0;\n        int n6 = 0;\n        int n7 = 0;\n        int n8 = 0;\n        int n9 = 0;\n        int n10 = 0;\n        int n11 = 0;\n        int n12 = 0;\n        int n13 = 0;\n        int n14 = 0;\n        int n15 = 0;\n        int n16 = 0;\n        int n17 = 0;\n        int n18 = 0;\n        int n19 = 0;\n        int n20 = 0;\n        int n21 = 0;\n        int n22 = 0;\n        int n23 = 0;\n        int n24 = 0;\n        int n25 = 0;\n        int n26 = 0;\n        int n27 = 0;\n        int n28 = 0;\n        int n29 = 0;\n        int n30 = 0;\n        int n31 = 0;\n        int n32 = 0;\n        int n33 = 0;\n        int n34 = 0;\n        int n35 = 0;\n        int n36 = 0;\n        int n37 = 0;\n        int n38 = 0;\n        int n39 = 0;\n        int n40 = 0;\n        int n41 = 0;\n        int n42 = 0;\n        int n43 = 0;\n        int n44 = 0;\n        int n45 = 0;\n        int n46 = 0;\n        int n47 = 0;\n        int n48 = 0;\n        int n49 = 0;\n        int n50 = 0;\n        int n51 = 0;\n        int n52 = 0;\n        int n53 = 0;\n        int n54 = 0;\n        int n55 = 0;\n        int n56 = 0;\n        int n57 = 0;\n        int n58 = 0;\n        int n59 = 0;\n        int n60 = 0;\n        int n61 = 0;\n        int n62 = 0;\n        int n63 = 0;\n        int n64 = 0;\n        int n65 = 0;\n        int n66 = 0;\n        int n67 = 0;\n        int n68 = 0;\n        int n69 = 0;\n        int n70 = 0;\n        int n71 = 0;\n        int n72 = 0;\n        int n73 = 0;\n        int n74 = 0;\n        int n75 = 0;\n        int n76 = 0;\n        int n77 = 0;\n        int n78 = 0;\n        int n79 = 0;\n        int n80 = 0;\n        int n81 = 0;\n        int n82 = 0;\n        int n83 = 0;\n        int n84 = 0;\n        int n85 = 0;\n        int n86 = 0;\n        int n87 = 0;\n        int n88 = 0;\n        int n89 = 0;\n        int n90 = 0;\n        int n91 = 0;\n        int n92 = 0;\n        int n93 = 0;\n        int n94 = 0;\n        int n95 = 0;\n        int n96 = 0;\n        int n97 = 0;\n        int n98 = 0;\n        int n99 = 0;\n        int n100 = 0;\n        int n101 = 0;\n        int n102 = 0;\n        int n103 = 0;\n        int n104 = 0;\n        int n105 = 0;\n        int n106 = 0;\n        int n107 = 0;\n        int n108 = 0;\n        int n109 = 0;\n        int n110 = 0;\n        int n111 = 0;\n        int n112 = 0;\n        int n113 = 0;\n        int n114 = 0;\n        int n115 = 0;\n        int n116 = 0;\n        int n117 = 0;\n        int n118 = 0;\n        int n119 = 0;\n        int n120 = 0;\n        int n121 = 0;\n        int n122 = 0;\n        int n123 = 0;\n        int n124 = 0;\n        int n125 = 0;\n        int n126 = 0;\n        int n127 = 0;\n        int n128 = 0;\n        int n129 = 0;\n        int n130 = 0;\n        int n131 = 0;\n        int n132 = 0;\n        int n133 = 0;\n        int n134 = 0;\n        int n135 = 0;\n        int n136 = 0;\n        int n137 = 0;\n        int n138 = 0;\n        int n139 = 0;\n        int n140 = 0;\n        int n141 = 0;\n        int n142 = 0;\n        int n143 = 0;\n        int n144 = 0;\n        int n145 = 0;\n        int n146 = 0;\n        int n147 = 0;\n        int n148 = 0;\n        int n149 = 0;\n        int n150 = 0;\n        int n151 = 0;\n        int n152 = 0;\n        int n153 = 0;\n        int n154 = 0;\n        int n155 = 0;\n        int n156 = 0;\n        int n157 = 0;\n        int n158 = 0;\n        int n159 = 0;\n        int n160 = 0;\n        int n161 =", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int count = 0;\n        int[] arr = new int[2];\n        for(int i = 0; i < s.length(); i++){\n            if(s.charAt(i) == 'a') arr[0]++;\n            else if(s.charAt(i) == 'o') arr[1]++;\n        }\n        for(int i = 0; i < arr.length; i++){\n            if(arr[i] >= n) count++;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int count = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n1 = 0;\n        int n2 = 0;\n        int n3 = 0;\n        int n4 = 0;\n        int n5 = 0;\n        int n6 = 0;\n        int n7 = 0;\n        int n8 = 0;\n        int n9 = 0;\n        int n10 = 0;\n        int n11 = 0;\n        int n12 = 0;\n        int n13 = 0;\n        int n14 = 0;\n        int n15 = 0;\n        int n16 = 0;\n        int n17 = 0;\n        int n18 = 0;\n        int n19 = 0;\n        int n20 = 0;\n        int n21 = 0;\n        int n22 = 0;\n        int n23 = 0;\n        int n24 = 0;\n        int n25 = 0;\n        int n26 = 0;\n        int n27 = 0;\n        int n28 = 0;\n        int n29 = 0;\n        int n30 = 0;\n        int n31 = 0;\n        int n32 = 0;\n        int n33 = 0;\n        int n34 = 0;\n        int n35 = 0;\n        int n36 = 0;\n        int n37 = 0;\n        int n38 = 0;\n        int n39 = 0;\n        int n40 = 0;\n        int n41 = 0;\n        int n42 = 0;\n        int n43 = 0;\n        int n44 = 0;\n        int n45 = 0;\n        int n46 = 0;\n        int n47 = 0;\n        int n48 = 0;\n        int n49 = 0;\n        int n50 = 0;\n        int n51 = 0;\n        int n52 = 0;\n        int n53 = 0;\n        int n54 = 0;\n        int n55 = 0;\n        int n56 = 0;\n        int n57 = 0;\n        int n58 = 0;\n        int n59 = 0;\n        int n60 = 0;\n        int n61 = 0;\n        int n62 = 0;\n        int n63 = 0;\n        int n64 = 0;\n        int n65 = 0;\n        int n66 = 0;\n        int n67 = 0;\n        int n68 = 0;\n        int n69 = 0;\n        int n70 = 0;\n        int n71 = 0;\n        int n72 = 0;\n        int n73 = 0;\n        int n74 = 0;\n        int n75 = 0;\n        int n76 = 0;\n        int n77 = 0;\n        int n78 = 0;\n        int n79 = 0;\n        int n80 = 0;\n        int n81 = 0;\n        int n82 = 0;\n        int n83 = 0;\n        int n84 = 0;\n        int n85 = 0;\n        int n86 = 0;\n        int n87 = 0;\n        int n88 = 0;\n        int n89 = 0;\n        int n90 = 0;\n        int n91 = 0;\n        int n92 = 0;\n        int n93 = 0;\n        int n94 = 0;\n        int n95 = 0;\n        int n96 = 0;\n        int n97 = 0;\n        int n98 = 0;\n        int n99 = 0;\n        int n100 = 0;\n        int n101 = 0;\n        int n102 = 0;\n        int n103 = 0;\n        int n104 = 0;\n        int n105 = 0;\n        int n106 = 0;\n        int n107 = 0;\n        int n108 = 0;\n        int n109 = 0;\n        int n110 = 0;\n        int n111 = 0;\n        int n112 = 0;\n        int n113 = 0;\n        int n114 = 0;\n        int n115 = 0;\n        int n116 = 0;\n        int n117 = 0;\n        int n118 = 0;\n        int n119 = 0;\n        int n120 = 0;\n        int n121 = 0;\n        int n122 = 0;\n        int n123 = 0;\n        int n124 = 0;\n        int n125 = 0;\n        int n126 = 0;\n        int n127 = 0;\n        int n128 = 0;\n        int n129 = 0;\n        int n130 = 0;\n        int n131 = 0;\n        int n132 = 0;\n        int n133 = 0;\n        int n134 = 0;\n        int n135 = 0;\n        int n136 = 0;\n        int n137 = 0;\n        int n138 = 0;\n        int n139 = 0;\n        int n140 = 0;\n        int n141 = 0;\n        int n142 = 0;\n        int n143 = 0;\n        int n144 = 0;\n        int n145 = 0;\n        int n146 = 0;\n        int n147 = 0;\n        int n148 = 0;\n        int n149 = 0;\n        int n150 = 0;\n        int n151 = 0;\n        int n152 = 0;\n        int n153 = 0;\n        int n154 = 0;\n        int n155 = 0;\n        int n156 = 0;\n        int n157 = 0;\n        int n158 = 0;\n        int n159 = 0;\n        int n160 = 0;\n        int n161 = 0;", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        String[] arr = s.split(\" \");\n        int count = 0;\n        for(int i = 0; i < arr.length; i++){\n            if(arr[i].equals(\"apple\")){\n                count++;\n            }\n            else if(arr[i].equals(\"orange\")){\n                count++;\n            }\n            else if(arr[i].equals(\"mango\")){\n                count++;\n            }\n        }\n        int mango = n - count;\n        return mango;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int[] arr = new int[2];\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n1 = 0;\n        int n2 = 0;\n        int n3 = 0;\n        int n4 = 0;\n        int n5 = 0;\n        int n6 = 0;\n        int n7 = 0;\n        int n8 = 0;\n        int n9 = 0;\n        int n10 = 0;\n        int n11 = 0;\n        int n12 = 0;\n        int n13 = 0;\n        int n14 = 0;\n        int n15 = 0;\n        int n16 = 0;\n        int n17 = 0;\n        int n18 = 0;\n        int n19 = 0;\n        int n20 = 0;\n        int n21 = 0;\n        int n22 = 0;\n        int n23 = 0;\n        int n24 = 0;\n        int n25 = 0;\n        int n26 = 0;\n        int n27 = 0;\n        int n28 = 0;\n        int n29 = 0;\n        int n30 = 0;\n        int n31 = 0;\n        int n32 = 0;\n        int n33 = 0;\n        int n34 = 0;\n        int n35 = 0;\n        int n36 = 0;\n        int n37 = 0;\n        int n38 = 0;\n        int n39 = 0;\n        int n40 = 0;\n        int n41 = 0;\n        int n42 = 0;\n        int n43 = 0;\n        int n44 = 0;\n        int n45 = 0;\n        int n46 = 0;\n        int n47 = 0;\n        int n48 = 0;\n        int n49 = 0;\n        int n50 = 0;\n        int n51 = 0;\n        int n52 = 0;\n        int n53 = 0;\n        int n54 = 0;\n        int n55 = 0;\n        int n56 = 0;\n        int n57 = 0;\n        int n58 = 0;\n        int n59 = 0;\n        int n60 = 0;\n        int n61 = 0;\n        int n62 = 0;\n        int n63 = 0;\n        int n64 = 0;\n        int n65 = 0;\n        int n66 = 0;\n        int n67 = 0;\n        int n68 = 0;\n        int n69 = 0;\n        int n70 = 0;\n        int n71 = 0;\n        int n72 = 0;\n        int n73 = 0;\n        int n74 = 0;\n        int n75 = 0;\n        int n76 = 0;\n        int n77 = 0;\n        int n78 = 0;\n        int n79 = 0;\n        int n80 = 0;\n        int n81 = 0;\n        int n82 = 0;\n        int n83 = 0;\n        int n84 = 0;\n        int n85 = 0;\n        int n86 = 0;\n        int n87 = 0;\n        int n88 = 0;\n        int n89 = 0;\n        int n90 = 0;\n        int n91 = 0;\n        int n92 = 0;\n        int n93 = 0;\n        int n94 = 0;\n        int n95 = 0;\n        int n96 = 0;\n        int n97 = 0;\n        int n98 = 0;\n        int n99 = 0;\n        int n100 = 0;\n        int n101 = 0;\n        int n102 = 0;\n        int n103 = 0;\n        int n104 = 0;\n        int n105 = 0;\n        int n106 = 0;\n        int n107 = 0;\n        int n108 = 0;\n        int n109 = 0;\n        int n110 = 0;\n        int n111 = 0;\n        int n112 = 0;\n        int n113 = 0;\n        int n114 = 0;\n        int n115 = 0;\n        int n116 = 0;\n        int n117 = 0;\n        int n118 = 0;\n        int n119 = 0;\n        int n120 = 0;\n        int n121 = 0;\n        int n122 = 0;\n        int n123 = 0;\n        int n124 = 0;\n        int n125 = 0;\n        int n126 = 0;\n        int n127 = 0;\n        int n128 = 0;\n        int n129 = 0;\n        int n130 = 0;\n        int n131 = 0;\n        int n132 = 0;\n        int n133 = 0;\n        int n134 = 0;\n        int n135 = 0;\n        int n136 = 0;\n        int n137 = 0;\n        int n138 = 0;\n        int n139 = 0;\n        int n140 = 0;\n        int n141 = 0;\n        int n142 = 0;\n        int n143 = 0;\n        int n144 = 0;\n        int n145 = 0;\n        int n146 = 0;\n        int n147 = 0;\n        int n148 = 0;\n        int n149 = 0;\n        int n150 = 0;\n        int n151 = 0;\n        int n152 = 0;\n        int n153 = 0;\n        int n154 = 0;\n        int n155 = 0;\n        int n156 = 0;\n        int n157 = 0;\n        int n158 = 0;\n        int n159 = 0;\n        int n160 = 0;\n        int n161 =", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        int count = 0;\n        int[] arr = new int[2];\n        for(int i = 0; i < s.length(); i++){\n            if(s.charAt(i) == 'a'){\n                arr[0] += 1;\n            }\n            else if(s.charAt(i) == 'o'){\n                arr[1] += 1;\n            }\n        }\n        if(arr[0] >= arr[1]){\n            count = arr[0];\n        }\n        else{\n            count = arr[1];\n        }\n        if(count >= n){\n            return count;\n        }\n        else{\n            return fruitDistribution(s, n);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n        String[] arr = s.split(\" \");\n        int count = 0;\n        int sum = 0;\n        for(int i = 0; i < arr.length; i++) {\n            if(arr[i].equals(\"apples\")) {\n                count++;\n            }\n            else if(arr[i].equals(\"oranges\")) {\n                count++;\n            }\n            else if(arr[i].equals(\"mango\")) {\n                count++;\n            }\n        }\n        sum = count * 2;\n        if(sum >= n) {\n            return count;\n        }\n        else {\n            return 0;\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        int even = 0;\n        int min = 0;\n        int max = arr.size() - 1;\n        while (even < arr.size() && arr.get(even) % 2 == 0) {\n            even++;\n        }\n        if (even == arr.size()) {\n            return new ArrayList<>();\n        }\n        while (min <= max) {\n            int mid = min + (max - min) / 2;\n            if (arr.get(mid) % 2 == 0) {\n                min = mid + 1;\n            } else {\n                max = mid - 1;\n            }\n        }\n        return Arrays.asList(arr.get(min), min);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        // Write your code here\n        int[] even = new int[arr.size()];\n        int[] odd = new int[arr.size()];\n        int i = 0;\n        for(int j : arr) {\n            if(j % 2 == 0) {\n                even[i] = j;\n                i++;\n            } else {\n                odd[i] = j;\n                i++;\n            }\n        }\n        if(i == 0) {\n            return new ArrayList<>();\n        }\n        if(i == 1) {\n            return Arrays.asList(even[0], 0);\n        }\n        int min = even[0];\n        int minIndex = 0;\n        for(int j = 1; j < i; j++) {\n            if(even[j] < min) {\n                min = even[j];\n                minIndex = j;\n            }\n        }\n        return Arrays.asList(min, minIndex);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        if(arr.size() == 0)\n            return new ArrayList<>();\n        int min = arr.get(0);\n        int max = arr.get(0);\n        for(int i = 1; i < arr.size(); i++) {\n            if(arr.get(i) < min)\n                min = arr.get(i);\n            if(arr.get(i) > max)\n                max = arr.get(i);\n        }\n        if(max % 2 == 0)\n            return new ArrayList<>(Arrays.asList(max, min));\n        else\n            return new ArrayList<>(Arrays.asList(min, max));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        int min = Integer.MAX_VALUE;\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                min = Math.min(min, arr.get(i));\n                max = Math.max(max, arr.get(i));\n            }\n        }\n        if (min == Integer.MAX_VALUE) {\n            return result;\n        }\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                result.add(arr.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        // Write your code here\n        int min = Integer.MAX_VALUE;\n        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                if (arr.get(i) < min) {\n                    min = arr.get(i);\n                    minIndex = i;\n                }\n            }\n        }\n        return Arrays.asList(min, minIndex);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        if (arr.size() == 0) {\n            return new ArrayList<Integer>();\n        }\n        int min = arr.get(0);\n        int max = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                max = arr.get(i);\n            } else {\n                min = arr.get(i);\n            }\n        }\n        List<Integer> result = new ArrayList<Integer>();\n        result.add(min);\n        result.add(max);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        if(arr.isEmpty())\n            return arr;\n        int min = arr.get(0);\n        int max = arr.get(0);\n        int index = 0;\n        for(int i = 1; i < arr.size(); i++) {\n            if(arr.get(i) % 2 == 0) {\n                if(min > arr.get(i))\n                    min = arr.get(i);\n                if(max < arr.get(i))\n                    max = arr.get(i);\n                index = i;\n            }\n        }\n        return Arrays.asList(min, index);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        if (arr.size() == 0) {\n            return new ArrayList<Integer>();\n        }\n\n        int min = arr.get(0);\n        int max = arr.get(0);\n        int index = 0;\n\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                max = arr.get(i);\n            } else {\n                min = arr.get(i);\n            }\n\n            if (max < min) {\n                index = i;\n            }\n        }\n\n        return Arrays.asList(min, index);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        // Write your code here\n        if(arr.size() == 0)\n            return new ArrayList<>();\n        int min = arr.get(0);\n        int max = arr.get(0);\n        for(int i = 1; i < arr.size(); i++) {\n            if(arr.get(i) % 2 == 0) {\n                min = Math.min(min, arr.get(i));\n                max = Math.max(max, arr.get(i));\n            }\n        }\n        if(min == max)\n            return new ArrayList<>();\n        else\n            return new ArrayList<>(Arrays.asList(min, max));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return arr;\n        }\n        int min = arr.get(0);\n        int max = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                min = Math.min(min, arr.get(i));\n                max = Math.max(max, arr.get(i));\n            }\n        }\n        if (min == max) {\n            return Arrays.asList(min, 0);\n        }\n        return Arrays.asList(min, Arrays.binarySearch(arr.toArray(), min));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return arr;\n        }\n\n        int min = arr.get(0);\n        int max = arr.get(0);\n        int index = 0;\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                max = Math.max(max, arr.get(i));\n            } else {\n                min = Math.min(min, arr.get(i));\n            }\n            if (max - min == 0) {\n                index = i;\n                break;\n            }\n        }\n\n        return Arrays.asList(min, index);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        if (arr.size() == 0) {\n            return new ArrayList<Integer>();\n        }\n        int min = arr.get(0);\n        int max = arr.get(0);\n        int index = 0;\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                max = arr.get(i);\n            } else {\n                min = arr.get(i);\n            }\n            if (max < min) {\n                index = i;\n            }\n        }\n        return new ArrayList<Integer>(Arrays.asList(min, index));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        if (arr.size() == 0) {\n            return result;\n        }\n        int min = arr.get(0);\n        int max = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                min = Math.min(min, arr.get(i));\n                max = Math.max(max, arr.get(i));\n            }\n        }\n        if (min == max) {\n            result.add(min);\n            result.add(0);\n        } else {\n            result.add(max);\n            result.add(arr.indexOf(max));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        int min = Integer.MAX_VALUE;\n        int index = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                min = Math.min(min, arr.get(i));\n                index = i;\n            }\n        }\n        result.add(min);\n        result.add(index);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        // Write your code here\n        if(arr.isEmpty()) return arr;\n        int min = arr.get(0);\n        int max = arr.get(0);\n        int index = 0;\n        for(int i = 1; i < arr.size(); i++) {\n            if(arr.get(i) % 2 == 0) {\n                if(min > arr.get(i)) {\n                    min = arr.get(i);\n                    index = i;\n                }\n            } else {\n                if(max < arr.get(i)) {\n                    max = arr.get(i);\n                    index = i;\n                }\n            }\n        }\n        return Arrays.asList(min, index);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        if (arr.isEmpty()) {\n            return result;\n        }\n        int min = arr.get(0);\n        int max = arr.get(0);\n        int index = 0;\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                max = arr.get(i);\n            } else {\n                min = arr.get(i);\n            }\n            if (max - min == 0) {\n                result.add(min);\n                index = i;\n            }\n        }\n        result.add(index);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        int min = arr.get(0);\n        int max = arr.get(0);\n        int index = 0;\n\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                if (arr.get(i) < min) {\n                    min = arr.get(i);\n                    index = i;\n                }\n            } else {\n                if (arr.get(i) > max) {\n                    max = arr.get(i);\n                    index = i;\n                }\n            }\n        }\n\n        return Arrays.asList(min, index);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        int even = 0;\n        int min = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                even++;\n            } else {\n                min = Math.min(min, arr.get(i));\n            }\n        }\n        if (even == 0) {\n            result.add(min);\n            return result;\n        }\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                result.add(arr.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        // Write your code here\n        List<Integer> res = new ArrayList<>();\n        int min = Integer.MAX_VALUE;\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                min = Math.min(min, arr.get(i));\n                max = Math.max(max, arr.get(i));\n            }\n        }\n        if (min == Integer.MAX_VALUE) {\n            return res;\n        }\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                res.add(arr.get(i));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n        // Write your code here\n        List<Integer> even = new ArrayList<>();\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) % 2 == 0) {\n                even.add(arr.get(i));\n            }\n        }\n        if(even.size() == 0) {\n            return new ArrayList<>();\n        }\n        int smallest = even.get(0);\n        int smallestIndex = 0;\n        for(int i = 1; i < even.size(); i++) {\n            if(even.get(i) < smallest) {\n                smallest = even.get(i);\n                smallestIndex = i;\n            }\n        }\n        return Arrays.asList(smallest, smallestIndex);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = lst.get(0);\n        int min = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n        }\n        return max >= 0 ? max : -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = 0;\n        int freq = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            freq = lst.get(i);\n            if (freq > 0) {\n                if (freq >= max) {\n                    max = freq;\n                }\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = 0;\n        int freq = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            freq = lst.get(i);\n            if (freq > 0) {\n                if (freq >= max) {\n                    max = freq;\n                }\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = 0;\n        int freq = 0;\n        for (int i : lst) {\n            if (i > 0) {\n                freq++;\n                if (freq > max) {\n                    max = i;\n                }\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = 0;\n        int freq = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            freq = lst.get(i);\n            if (freq > 0) {\n                if (freq >= max) {\n                    max = freq;\n                }\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return -1;\n        }\n        int max = lst.get(0);\n        int min = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n        }\n        return max >= 0 ? max : -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = 0;\n        int freq = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > 0) {\n                freq++;\n            }\n            if (freq >= lst.get(i)) {\n                max = lst.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = 0;\n        int freq = 0;\n        for (int i : lst) {\n            if (i > 0) {\n                freq++;\n            }\n            if (freq > max) {\n                max = freq;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = 0;\n        int freq = 0;\n        for (int i : lst) {\n            if (i > 0) {\n                freq++;\n                if (freq >= i) {\n                    max = i;\n                    freq = 0;\n                }\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = 0;\n        int freq = 0;\n        for (int i : lst) {\n            if (i > 0) {\n                freq++;\n            }\n        }\n        for (int i : lst) {\n            if (i > 0 && i >= max) {\n                max = i;\n                freq = 1;\n            } else if (i > 0 && i == max) {\n                freq++;\n            }\n        }\n        return freq > 0 ? max : -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = 0;\n        int freq = 0;\n        for (int i : lst) {\n            freq += i;\n            if (freq >= max) {\n                max = freq;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = 0;\n        int freq = 0;\n        for (int i : lst) {\n            if (i > 0) {\n                freq++;\n                if (freq > max) {\n                    max = i;\n                }\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = 0;\n        int freq = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > 0) {\n                freq++;\n            }\n            if (freq > max) {\n                max = freq;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = 0;\n        int freq = 0;\n        for (int i : lst) {\n            if (i > 0) {\n                freq++;\n            }\n        }\n        for (int i : lst) {\n            if (i > 0) {\n                if (freq >= i) {\n                    max = i;\n                    freq = 0;\n                }\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = lst.get(0);\n        int maxFreq = 1;\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) > 0 && lst.get(i) >= max) {\n                max = lst.get(i);\n                maxFreq = 1;\n            } else if (lst.get(i) > 0 && lst.get(i) >= max && lst.get(i) == max) {\n                maxFreq++;\n            } else {\n                maxFreq = 1;\n            }\n        }\n        return maxFreq > 0 ? max : -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = 0;\n        int freq = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            freq = lst.get(i);\n            if (freq > 0) {\n                if (freq >= max) {\n                    max = freq;\n                }\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = Integer.MIN_VALUE;\n        int maxIndex = -1;\n        for (int i = 0; i < lst.size(); i++) {\n            int freq = lst.get(i);\n            if (freq > 0) {\n                if (freq >= max) {\n                    max = freq;\n                    maxIndex = i;\n                }\n            }\n        }\n        return maxIndex;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = 0;\n        int freq = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            freq = lst.get(i);\n            if (freq > 0) {\n                if (freq >= max) {\n                    max = freq;\n                }\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = 0;\n        int freq = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > 0) {\n                freq++;\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > 0 && lst.get(i) >= freq) {\n                max = lst.get(i);\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n        int max = 0;\n        int freq = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            freq = lst.get(i);\n            if (freq > 0) {\n                if (freq >= max) {\n                    max = freq;\n                }\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        List<Integer> result = new ArrayList<>();\n        for (int i = min; i <= max; i++) {\n            result.add(i);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        List<Integer> result = new ArrayList<>();\n        for (int i = min; i <= max; i++) {\n            result.add(i);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> ans = new ArrayList<>();\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == min) {\n                ans.add(i);\n            }\n            if (lst.get(i) == max) {\n                ans.add(i);\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        if (lst == null || lst.isEmpty()) {\n            return lst;\n        }\n\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == min) {\n                res.add(max);\n            } else if (lst.get(i) == max) {\n                res.add(min);\n            } else {\n                res.add(lst.get(i));\n            }\n        }\n\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        // Write your code here\n        if(lst.size() == 0)\n            return lst;\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for(int i = 1; i < lst.size(); i++) {\n            if(lst.get(i) < min)\n                min = lst.get(i);\n            if(lst.get(i) > max)\n                max = lst.get(i);\n        }\n        List<Integer> res = new ArrayList<>();\n        for(int i = min; i <= max; i++)\n            res.add(i);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == min) {\n                res.add(max);\n                max--;\n            } else if (lst.get(i) == max) {\n                res.add(min);\n                min++;\n            } else {\n                res.add(lst.get(i));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        if (lst == null || lst.size() == 0) {\n            return lst;\n        }\n\n        List<Integer> result = new ArrayList<>();\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n\n        result.add(min);\n        result.add(max);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                result.add(lst.get(i));\n            }\n            if (lst.get(i) > max) {\n                result.add(lst.get(i));\n            }\n        }\n\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        List<Integer> result = new ArrayList<>();\n        for (int i = min; i <= max; i++) {\n            result.add(i);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> res = new ArrayList<Integer>();\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == min) {\n                res.add(lst.get(i));\n            } else if (lst.get(i) == max) {\n                res.add(lst.get(i));\n            } else {\n                res.add(lst.get(i));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> res = new ArrayList<>();\n        int min = Integer.MAX_VALUE;\n        int max = Integer.MIN_VALUE;\n        for (int i : lst) {\n            if (i < min) {\n                min = i;\n            }\n            if (i > max) {\n                max = i;\n            }\n        }\n        for (int i = min; i <= max; i++) {\n            res.add(i);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return lst;\n        }\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        List<Integer> result = new ArrayList<>();\n        for (int i = min; i <= max; i++) {\n            result.add(i);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> ans = new ArrayList<>();\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == min) {\n                ans.add(i);\n            }\n            if (lst.get(i) == max) {\n                ans.add(i);\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        // Write your code here\n        if (lst.size() == 0) {\n            return lst;\n        }\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        List<Integer> res = new ArrayList<>();\n        for (int i = min; i <= max; i++) {\n            res.add(i);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == min) {\n                res.add(max);\n            } else if (lst.get(i) == max) {\n                res.add(min);\n            } else {\n                res.add(lst.get(i));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == min) {\n                result.add(i);\n            }\n            if (lst.get(i) == max) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        // Write your code here\n        List<Integer> ans = new ArrayList<>();\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == min) {\n                ans.add(lst.get(i));\n            } else if (lst.get(i) == max) {\n                ans.add(lst.get(i));\n            } else {\n                ans.add(lst.get(i));\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        if (lst.isEmpty()) {\n            return lst;\n        }\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        List<Integer> odd = new ArrayList<>();\n        List<Integer> even = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) % 2 == 0) {\n                even.add(lst.get(i));\n            } else {\n                odd.add(lst.get(i));\n            }\n        }\n        odd.add(min);\n        odd.add(max);\n        odd.addAll(even);\n        return odd;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        if(lst.size() == 0)\n            return lst;\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for(int i = 1; i < lst.size(); i++) {\n            if(lst.get(i) < min)\n                min = lst.get(i);\n            if(lst.get(i) > max)\n                max = lst.get(i);\n        }\n        List<Integer> res = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++) {\n            if(lst.get(i) == min)\n                res.add(lst.get(i));\n            else if(lst.get(i) == max)\n                res.add(lst.get(i));\n            else\n                res.add(lst.get(i) - 1);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        List<Integer> result = new ArrayList<>();\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == min) {\n                result.add(max);\n                result.add(lst.get(i));\n                result.add(min);\n            } else if (lst.get(i) == max) {\n                result.add(lst.get(i));\n                result.add(min);\n                result.add(max);\n            } else {\n                result.add(lst.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n        // Write your code here\n        List<Integer> result = new ArrayList<>();\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) == min) {\n                result.add(i);\n            }\n            if (lst.get(i) == max) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double area = 0;\n        if (a + b > c) {\n            return -1;\n        } else {\n            area = (a + b + c) / 2;\n            return Math.round(area * 100.0) / 100.0;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double area = 0;\n        if (a + b > c && b + c > a && c + a > b) {\n            area = (a + b + c) / 2;\n        }\n        return Math.round(area * 100.0) / 100.0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double area = 0;\n        if (a + b > c) {\n            return -1;\n        }\n        else {\n            area = (a + b + c) / 2;\n        }\n        return Math.round(area * 100.0) / 100.0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        if (a + b > c && b + c > a && c + a > b) {\n            return (a + b + c) / 2.0;\n        } else {\n            return -1;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        if (a + b > c && b + c > a && c + a > b) {\n            return (a + b + c) / 2;\n        } else {\n            return -1;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double area = 0;\n        if (a + b > c && b + c > a && c + a > b) {\n            area = (a + b + c) / 2;\n        } else {\n            area = -1;\n        }\n        return Math.round(area * 100.0) / 100.0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double area = 0;\n        if (a + b > c && b + c > a && c + a > b) {\n            area = (a + b + c) / 2;\n        }\n        return Math.round(area * 100.0) / 100.0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        if (a + b > c && b + c > a && c + a > b) {\n            return (a + b + c) / 2.0;\n        } else {\n            return -1;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double area = 0;\n        if (a + b > c && b + c > a && c + a > b) {\n            area = (a + b + c) / 2;\n        }\n        return Math.round(area * 100.0) / 100.0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        if (a + b > c && b + c > a && c + a > b) {\n            return (a + b + c) / 2.0;\n        } else {\n            return -1;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double area = 0;\n        if (a + b > c && b + c > a && c + a > b) {\n            area = (a + b + c) / 2;\n        } else {\n            return -1;\n        }\n        return Math.round(area * 100.0) / 100.0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double area = 0;\n        if (a + b > c && b + c > a && c + a > b) {\n            area = (a + b + c) / 2;\n        } else {\n            area = -1;\n        }\n        return Math.round(area * 100.0) / 100.0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        double area = 0;\n        if (a + b > c && b + c > a && c + a > b) {\n            area = (a + b + c) / 2;\n        }\n        return Math.round(area * 100.0) / 100.0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        if (a + b > c && b + c > a && c + a > b) {\n            return (a + b + c) / 2.0;\n        } else {\n            return -1;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        if (a + b > c && b + c > a && c + a > b) {\n            return (a + b + c) / 2.0;\n        } else {\n            return -1;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        if (a + b > c && b + c > a && c + a > b) {\n            return (a + b + c) / 2.0;\n        } else {\n            return -1;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        if(a + b > c && b + c > a && c + a > b) {\n            return (a + b + c) / 2.0;\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        if (a + b > c && b + c > a && c + a > b) {\n            return (a + b + c) / 2;\n        } else {\n            return -1;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        if (a + b > c && b + c > a && c + a > b) {\n            return (a + b + c) / 2;\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n        if (a + b > c && b + c > a && c + a > b) {\n            return (a + b + c) / 2.0;\n        }\n        return -1;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) {\n            return false;\n        }\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        if (sum > w) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) {\n            return false;\n        }\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        if (sum > w) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) {\n            return false;\n        }\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        if (sum > w) {\n            return false;\n        }\n        int max = 0;\n        for (int i : q) {\n            max = Math.max(max, i);\n        }\n        return max <= w;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) {\n            return false;\n        }\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        if (sum > w) {\n            return false;\n        }\n        int max = Integer.MIN_VALUE;\n        for (int i : q) {\n            max = Math.max(max, i);\n        }\n        return max <= w;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) {\n            return false;\n        }\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        if (sum > w) {\n            return false;\n        }\n        int max = 0;\n        for (int i : q) {\n            max = Math.max(max, i);\n        }\n        return max <= w;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() != w) {\n            return false;\n        }\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        return sum <= w;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) {\n            return false;\n        }\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        if (sum > w) {\n            return false;\n        }\n        int max = 0;\n        for (int i : q) {\n            max = Math.max(max, i);\n        }\n        return max <= w;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) {\n            return false;\n        }\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        if (sum > w) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) {\n            return false;\n        }\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        if (sum > w) {\n            return false;\n        }\n        int max = 0;\n        for (int i : q) {\n            max = Math.max(max, i);\n        }\n        return max <= w;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) {\n            return false;\n        }\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        if (sum > w) {\n            return false;\n        }\n        int max = Integer.MIN_VALUE;\n        for (int i : q) {\n            max = Math.max(max, i);\n        }\n        return max <= w;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) {\n            return false;\n        }\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        if (sum > w) {\n            return false;\n        }\n        int max = Integer.MIN_VALUE;\n        for (int i : q) {\n            max = Math.max(max, i);\n        }\n        return max <= w;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) {\n            return false;\n        }\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        if (sum > w) {\n            return false;\n        }\n        int max = 0;\n        for (int i : q) {\n            max = Math.max(max, i);\n        }\n        if (max > w) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) {\n            return false;\n        }\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        if (sum > w) {\n            return false;\n        }\n        int max = Integer.MIN_VALUE;\n        for (int i : q) {\n            max = Math.max(max, i);\n        }\n        if (max == sum) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) return false;\n        int sum = 0;\n        for (int i : q) sum += i;\n        if (sum > w) return false;\n        int max = 0;\n        for (int i : q) max = Math.max(max, i);\n        return max <= w;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        if (sum <= w) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) {\n            return false;\n        }\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        if (sum > w) {\n            return false;\n        }\n        int max = 0;\n        for (int i : q) {\n            max = Math.max(max, i);\n        }\n        if (max > w) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 1) {\n            return q.get(0) <= w;\n        }\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        return sum <= w;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) {\n            return false;\n        }\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        if (sum > w) {\n            return false;\n        }\n        int max = 0;\n        for (int i : q) {\n            max = Math.max(max, i);\n        }\n        return max <= w;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) {\n            return false;\n        }\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        if (sum > w) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n        if (q.size() == 0) {\n            return false;\n        }\n        int sum = 0;\n        for (int i : q) {\n            sum += i;\n        }\n        if (sum > w) {\n            return false;\n        }\n        int max = 0;\n        for (int i : q) {\n            max = Math.max(max, i);\n        }\n        return max <= w;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int min = Integer.MAX_VALUE;\n        int i = 0;\n        int j = n - 1;\n        while(i < j) {\n            if(arr.get(i) != arr.get(j)) {\n                int temp = arr.get(i);\n                arr.set(i, arr.get(j));\n                arr.set(j, temp);\n                min = Math.min(min, j - i + 1);\n            }\n            i++;\n            j--;\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int min = Integer.MAX_VALUE;\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int temp = arr.get(i);\n            if (temp == arr.get(arr.size() - i - 1)) {\n                count++;\n            } else {\n                count = 0;\n            }\n            if (count < min) {\n                min = count;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int min = Integer.MAX_VALUE;\n        for(int i = 0; i < n; i++) {\n            int temp = arr.get(i);\n            arr.set(i, arr.get(n-i-1));\n            arr.set(n-i-1, temp);\n            int diff = Math.abs(temp - arr.get(i));\n            if(diff < min) {\n                min = diff;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int min = Integer.MAX_VALUE;\n        int i = 0;\n        int j = arr.size() - 1;\n        while (i < j) {\n            if (arr.get(i) != arr.get(j)) {\n                min = Math.min(min, j - i + 1);\n            }\n            if (arr.get(i) < arr.get(j)) {\n                i++;\n            } else {\n                j--;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int min = Integer.MAX_VALUE;\n        for(int i = 0; i < arr.size(); i++) {\n            int diff = arr.get(i) - arr.get(arr.size() - i - 1);\n            if(diff < 0) {\n                diff *= -1;\n            }\n            if(diff < min) {\n                min = diff;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < n; i++) {\n            int diff = arr.get(i) - arr.get(n - i - 1);\n            if (diff < 0) {\n                diff *= -1;\n            }\n            min = Math.min(min, diff);\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < n; i++) {\n            int diff = arr.get(i) - arr.get(n - i - 1);\n            if (diff < 0) {\n                diff = -diff;\n            }\n            min = Math.min(min, diff);\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < n; i++) {\n            int diff = arr.get(i) - arr.get(n - i - 1);\n            if (diff < 0) {\n                diff *= -1;\n            }\n            min = Math.min(min, diff);\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < n; i++) {\n            int diff = arr.get(i) - arr.get(n - i - 1);\n            if (diff < 0) {\n                diff *= -1;\n            }\n            min = Math.min(min, diff);\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int min = Integer.MAX_VALUE;\n        int i = 0;\n        int j = arr.size() - 1;\n        while (i < j) {\n            if (arr.get(i) != arr.get(j)) {\n                min = Math.min(min, j - i + 1);\n            }\n            if (arr.get(i) == arr.get(j)) {\n                i++;\n                j--;\n            } else {\n                i++;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int min = Integer.MAX_VALUE;\n        int i = 0;\n        int j = n - 1;\n        while (i < j) {\n            if (arr.get(i) != arr.get(j)) {\n                int diff = arr.get(i) - arr.get(j);\n                if (diff > 0) {\n                    i++;\n                } else {\n                    j--;\n                }\n            } else {\n                i++;\n                j--;\n            }\n        }\n        return i + 1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int min = Integer.MAX_VALUE;\n        int change = 0;\n        for (int i = 0; i < n; i++) {\n            int temp = arr.get(i);\n            arr.set(i, arr.get(n-1-i));\n            arr.set(n-1-i, temp);\n            int temp2 = arr.get(i);\n            arr.set(i, arr.get(n-1-i));\n            arr.set(n-1-i, temp2);\n            int temp3 = arr.get(i);\n            arr.set(i, arr.get(n-1-i));\n            arr.set(n-1-i, temp3);\n            if (arr.get(i) != arr.get(n-1-i)) {\n                change++;\n            }\n            if (change < min) {\n                min = change;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int min = Integer.MAX_VALUE;\n        for(int i = 0; i < n; i++) {\n            int temp = arr.get(i);\n            arr.set(i, arr.get(n-i-1));\n            arr.set(n-i-1, temp);\n            int diff = 0;\n            for(int j = 0; j < n; j++) {\n                diff += Math.abs(arr.get(j) - arr.get(n-j-1));\n            }\n            if(diff < min) {\n                min = diff;\n            }\n            arr.set(i, temp);\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int min = n;\n        for (int i = 0; i < n; i++) {\n            int diff = arr.get(i) - arr.get(n - i - 1);\n            if (diff < 0) {\n                diff = -diff;\n            }\n            if (diff < min) {\n                min = diff;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int min = arr.size();\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) != arr.get(arr.size() - i - 1)) {\n                min = Math.min(min, i + 1);\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int min = Integer.MAX_VALUE;\n        for(int i = 0; i < n; i++) {\n            int diff = arr.get(i) - arr.get(n - i - 1);\n            if(diff < 0) {\n                diff *= -1;\n            }\n            min = Math.min(min, diff);\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < n; i++) {\n            int diff = arrCopy[i] - arrCopy[n - i - 1];\n            if (diff < 0) {\n                diff *= -1;\n            }\n            if (diff < min) {\n                min = diff;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int n = arr.size();\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < n; i++) {\n            int temp = arr.get(i);\n            arr.set(i, arr.get(n - i - 1));\n            arr.set(n - i - 1, temp);\n            int diff = Math.abs(temp - arr.get(i));\n            if (diff < min) {\n                min = diff;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int min = Integer.MAX_VALUE;\n        int i = 0;\n        int j = arr.size() - 1;\n        while(i < j) {\n            if(arr.get(i) != arr.get(j)) {\n                int temp = arr.get(i);\n                arr.set(i, arr.get(j));\n                arr.set(j, temp);\n                min = Math.min(min, j - i + 1);\n            }\n            i++;\n            j--;\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n        int min = Integer.MAX_VALUE;\n        int i = 0;\n        int j = arr.size() - 1;\n        while(i < j) {\n            if(arr.get(i) != arr.get(j)) {\n                min = Math.min(min, j - i + 1);\n            }\n            if(arr.get(i) > arr.get(j)) {\n                i++;\n            } else {\n                j--;\n            }\n        }\n        return min;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        // Write your code here\n        if(lst1.size() == lst2.size()) {\n            return lst1;\n        }\n        List<String> result = new ArrayList<>();\n        for(String s1 : lst1) {\n            int count = 0;\n            for(String s2 : lst2) {\n                if(s1.equals(s2)) {\n                    count++;\n                }\n            }\n            if(count < lst2.size()) {\n                result.add(s1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> result = new ArrayList<>();\n        int i = 0;\n        int j = 0;\n        while(i < lst1.size() && j < lst2.size()) {\n            if(lst1.get(i).length() < lst2.get(j).length()) {\n                i++;\n            } else if(lst1.get(i).length() > lst2.get(j).length()) {\n                j++;\n            } else {\n                result.add(lst1.get(i));\n                i++;\n                j++;\n            }\n        }\n        while(i < lst1.size()) {\n            result.add(lst1.get(i));\n            i++;\n        }\n        while(j < lst2.size()) {\n            result.add(lst2.get(j));\n            j++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> result = new ArrayList<>();\n        if (lst1.size() == lst2.size()) {\n            return lst1;\n        }\n        for (int i = 0; i < lst1.size(); i++) {\n            for (int j = 0; j < lst2.size(); j++) {\n                if (lst1.get(i).length() < lst2.get(j).length()) {\n                    result.add(lst1.get(i));\n                } else if (lst1.get(i).length() > lst2.get(j).length()) {\n                    result.add(lst2.get(j));\n                } else {\n                    if (lst1.get(i).equals(lst2.get(j))) {\n                        result.add(lst1.get(i));\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> result = new ArrayList<String>();\n        int i = 0;\n        int j = 0;\n        while(i < lst1.size() && j < lst2.size()) {\n            if(lst1.get(i).length() < lst2.get(j).length()) {\n                i++;\n            } else if(lst1.get(i).length() > lst2.get(j).length()) {\n                j++;\n            } else {\n                result.add(lst1.get(i));\n                i++;\n                j++;\n            }\n        }\n        while(i < lst1.size()) {\n            result.add(lst1.get(i));\n            i++;\n        }\n        while(j < lst2.size()) {\n            result.add(lst2.get(j));\n            j++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        if (lst1.size() != lst2.size()) {\n            return lst1;\n        }\n        List<String> result = new ArrayList<>();\n        for (String s : lst1) {\n            int count = 0;\n            for (String t : lst2) {\n                if (s.equals(t)) {\n                    count++;\n                }\n            }\n            result.add(s);\n            result.add(Integer.toString(count));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> result = new ArrayList<>();\n        if(lst1.size() == lst2.size()) {\n            for(int i = 0; i < lst1.size(); i++) {\n                if(lst1.get(i).length() < lst2.get(i).length()) {\n                    result.add(lst1.get(i));\n                } else {\n                    result.add(lst2.get(i));\n                }\n            }\n        } else {\n            result = lst1;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> result = new ArrayList<>();\n        if(lst1.size() != lst2.size()) {\n            return result;\n        }\n        int count = 0;\n        for(String s1 : lst1) {\n            for(String s2 : lst2) {\n                if(s1.length() == s2.length()) {\n                    count += s1.length();\n                }\n            }\n        }\n        for(String s1 : lst1) {\n            if(count >= s1.length()) {\n                result.add(s1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        // Write your code here\n        if(lst1.size() == lst2.size()) {\n            return lst1;\n        }\n        int[] count = new int[26];\n        for(String s : lst1) {\n            count[s.charAt(0) - 'a']++;\n        }\n        for(String s : lst2) {\n            count[s.charAt(0) - 'a']--;\n        }\n        List<String> result = new ArrayList<>();\n        for(int i = 0; i < 26; i++) {\n            if(count[i] >= 0) {\n                result.add(String.valueOf((char)('a' + i)));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> result = new ArrayList<>();\n        if (lst1.size() == lst2.size()) {\n            for (int i = 0; i < lst1.size(); i++) {\n                if (lst1.get(i).length() < lst2.get(i).length()) {\n                    result.add(lst1.get(i));\n                } else {\n                    result.add(lst2.get(i));\n                }\n            }\n        } else {\n            result = lst1;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> result = new ArrayList<>();\n        int i = 0;\n        int j = 0;\n        while (i < lst1.size() && j < lst2.size()) {\n            if (lst1.get(i).length() < lst2.get(j).length()) {\n                i++;\n            } else if (lst1.get(i).length() > lst2.get(j).length()) {\n                j++;\n            } else {\n                result.add(lst1.get(i));\n                i++;\n                j++;\n            }\n        }\n        while (i < lst1.size()) {\n            result.add(lst1.get(i));\n            i++;\n        }\n        while (j < lst2.size()) {\n            result.add(lst2.get(j));\n            j++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        if (lst1.size() == lst2.size()) {\n            return lst1;\n        }\n        List<String> result = new ArrayList<>();\n        for (String s : lst1) {\n            int count = 0;\n            for (String t : lst2) {\n                if (s.equals(t)) {\n                    count++;\n                }\n            }\n            if (count < lst2.size()) {\n                result.add(s);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        if (lst1.size() != lst2.size()) {\n            return lst1;\n        }\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i < lst1.size(); i++) {\n            if (lst1.get(i).length() < lst2.get(i).length()) {\n                result.add(lst1.get(i));\n            } else {\n                result.add(lst2.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        if (lst1.size() == lst2.size()) {\n            return lst1;\n        }\n        int[] count = new int[26];\n        for (String s : lst1) {\n            count[s.charAt(0) - 'a']++;\n        }\n        for (String s : lst2) {\n            count[s.charAt(0) - 'a']--;\n        }\n        List<String> res = new ArrayList<>();\n        for (int i = 0; i < 26; i++) {\n            if (count[i] > 0) {\n                res.add(String.valueOf((char) ('a' + i)));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> result = new ArrayList<>();\n        int len1 = lst1.size();\n        int len2 = lst2.size();\n        int len = Math.min(len1, len2);\n        for (int i = 0; i < len; i++) {\n            if (lst1.get(i).length() == lst2.get(i).length()) {\n                result.add(lst1.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        if (lst1.size() != lst2.size()) {\n            return lst1;\n        }\n        int[] count = new int[26];\n        for (String s : lst1) {\n            count[s.charAt(0) - 'a']++;\n        }\n        for (String s : lst2) {\n            count[s.charAt(0) - 'a']--;\n        }\n        List<String> res = new ArrayList<>();\n        for (int i = 0; i < 26; i++) {\n            if (count[i] == 0) {\n                res.add(String.valueOf((char)('a' + i)));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> result = new ArrayList<String>();\n        if (lst1.size() == lst2.size()) {\n            for (int i = 0; i < lst1.size(); i++) {\n                if (lst1.get(i).length() < lst2.get(i).length()) {\n                    result.add(lst1.get(i));\n                } else {\n                    result.add(lst2.get(i));\n                }\n            }\n        } else {\n            result.add(lst1.get(0));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        if (lst1.size() != lst2.size()) {\n            return lst1;\n        }\n\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i < lst1.size(); i++) {\n            if (lst1.get(i).length() < lst2.get(i).length()) {\n                result.add(lst1.get(i));\n            } else if (lst1.get(i).length() > lst2.get(i).length()) {\n                result.add(lst2.get(i));\n            } else {\n                result.add(lst1.get(i));\n                result.add(lst2.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        // Write your code here\n        if(lst1.size() == lst2.size())\n            return lst1;\n        else if(lst1.size() < lst2.size())\n            return totalMatch(lst2, lst1);\n        else\n            return totalMatch(lst1, lst2);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        List<String> result = new ArrayList<>();\n        if (lst1.size() != lst2.size()) {\n            return result;\n        }\n        for (int i = 0; i < lst1.size(); i++) {\n            if (lst1.get(i).length() < lst2.get(i).length()) {\n                result.add(lst1.get(i));\n            } else if (lst1.get(i).length() > lst2.get(i).length()) {\n                result.add(lst2.get(i));\n            } else {\n                result.add(lst1.get(i));\n                result.add(lst2.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n        // Write your code here\n        List<String> result = new ArrayList<>();\n        if (lst1.size() == lst2.size()) {\n            for (int i = 0; i < lst1.size(); i++) {\n                if (lst1.get(i).length() < lst2.get(i).length()) {\n                    result.add(lst1.get(i));\n                } else {\n                    result.add(lst2.get(i));\n                }\n            }\n        } else {\n            result = lst1;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if (a < 100) {\n            for (int i = 2; i <= a / 2; i++) {\n                if (a % i == 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if (a < 100) {\n            int n = (int) Math.sqrt(a);\n            for (int i = 2; i <= n; i++) {\n                if (a % i == 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if (a < 100) {\n            for (int i = 2; i <= a / 2; i++) {\n                if (a % i == 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if (a < 100) {\n            int i = 2;\n            while (i <= a / i) {\n                if (a % i == 0) {\n                    return false;\n                }\n                i++;\n            }\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if (a < 100) {\n            int i = 2;\n            while (i * i <= a) {\n                if (a % i == 0) {\n                    return false;\n                }\n                i++;\n            }\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if (a < 100) {\n            int i = 2;\n            while (i * i <= a) {\n                if (a % i == 0) {\n                    return false;\n                }\n                i++;\n            }\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if (a < 100) {\n            for (int i = 2; i <= a / 2; i++) {\n                if (a % i == 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if (a < 100) {\n            for (int i = 2; i <= a / 2; i++) {\n                if (a % i == 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if (a < 100) {\n            int i = 2;\n            while (i <= a / i) {\n                if (a % i == 0) {\n                    return false;\n                }\n                i++;\n            }\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if(a < 100) {\n            for(int i = 2; i <= a/2; i++) {\n                if(a % i == 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if (a < 100) {\n            for (int i = 2; i <= a / 2; i++) {\n                if (a % i == 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if (a < 100) {\n            int i = 2;\n            while (i <= a / i) {\n                if (a % i == 0) {\n                    return false;\n                }\n                i++;\n            }\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if(a < 100) {\n            for(int i = 2; i < a; i++) {\n                if(a % i == 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if (a < 100) {\n            for (int i = 2; i <= a / 2; i++) {\n                if (a % i == 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if (a < 100) {\n            int i = 2;\n            while (i * i <= a) {\n                if (a % i == 0) {\n                    return false;\n                }\n                i++;\n            }\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if(a < 100) {\n            for(int i = 2; i <= a/2; i++) {\n                if(a % i == 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        int n = a;\n        int i = 2;\n        while (i <= n) {\n            if (n % i == 0) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if (a < 100) {\n            int i = 2;\n            while (i * i <= a) {\n                if (a % i == 0) {\n                    return false;\n                }\n                i++;\n            }\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if (a < 100) {\n            int i = 2;\n            while (i * i <= a) {\n                if (a % i == 0) {\n                    return false;\n                }\n                i++;\n            }\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n        if (a < 100) {\n            for (int i = 2; i < a; i++) {\n                if (a % i == 0) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if(n==0) return true;\n        if(n==1) return x==1;\n        if(n%2==0) return isSimplePower(x, n/2);\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if(n==0)\n            return true;\n        if(n==1)\n            return false;\n        if(n%2==0)\n            return isSimplePower(x, n/2);\n        else\n            return isSimplePower(x*x, n/2);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 0) {\n            return true;\n        }\n        int power = 1;\n        while (power < n) {\n            power *= 2;\n        }\n        return x == power;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 0)\n            return true;\n        if (n == 1)\n            return x == 1;\n        if (n == 2)\n            return x == 1 || x == 2;\n        if (n == 3)\n            return x == 1 || x == 2 || x == 3;\n        if (n == 4)\n            return x == 1 || x == 2 || x == 3 || x == 4;\n        if (n == 5)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5;\n        if (n == 6)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6;\n        if (n == 7)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7;\n        if (n == 8)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8;\n        if (n == 9)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9;\n        if (n == 10)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10;\n        if (n == 11)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11;\n        if (n == 12)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12;\n        if (n == 13)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13;\n        if (n == 14)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14;\n        if (n == 15)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15;\n        if (n == 16)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16;\n        if (n == 17)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17;\n        if (n == 18)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18;\n        if (n == 19)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19;\n        if (n == 20)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20;\n        if (n == 21)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20 || x == 21;\n        if (n == 22)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20 || x == 21 || x == 22;\n        if (n == 23)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20 || x == 21 || x == 22 || x == 23;\n        if (n == 2", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 0)\n            return true;\n        if (n == 1)\n            return x == 1;\n        if (n == 2)\n            return x == 1 || x == 2;\n        if (n == 3)\n            return x == 1 || x == 2 || x == 3;\n        if (n == 4)\n            return x == 1 || x == 2 || x == 3 || x == 4;\n        if (n == 5)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5;\n        if (n == 6)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6;\n        if (n == 7)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7;\n        if (n == 8)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8;\n        if (n == 9)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9;\n        if (n == 10)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10;\n        if (n == 11)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11;\n        if (n == 12)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12;\n        if (n == 13)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13;\n        if (n == 14)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14;\n        if (n == 15)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15;\n        if (n == 16)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16;\n        if (n == 17)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17;\n        if (n == 18)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18;\n        if (n == 19)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19;\n        if (n == 20)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20;\n        if (n == 21)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20 || x == 21;\n        if (n == 22)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20 || x == 21 || x == 22;\n        if (n == 23)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20 || x == 21 || x == 22 || x == 23;\n        if (n == 2", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 0)\n            return true;\n        if (n == 1)\n            return x == 1;\n        if (n == 2)\n            return x == 2;\n        if (n == 3)\n            return x == 3;\n        if (n == 4)\n            return x == 4;\n        if (n == 5)\n            return x == 5;\n        if (n == 6)\n            return x == 6;\n        if (n == 7)\n            return x == 7;\n        if (n == 8)\n            return x == 8;\n        if (n == 9)\n            return x == 9;\n        if (n == 10)\n            return x == 10;\n        if (n == 11)\n            return x == 11;\n        if (n == 12)\n            return x == 12;\n        if (n == 13)\n            return x == 13;\n        if (n == 14)\n            return x == 14;\n        if (n == 15)\n            return x == 15;\n        if (n == 16)\n            return x == 16;\n        if (n == 17)\n            return x == 17;\n        if (n == 18)\n            return x == 18;\n        if (n == 19)\n            return x == 19;\n        if (n == 20)\n            return x == 20;\n        if (n == 21)\n            return x == 21;\n        if (n == 22)\n            return x == 22;\n        if (n == 23)\n            return x == 23;\n        if (n == 24)\n            return x == 24;\n        if (n == 25)\n            return x == 25;\n        if (n == 26)\n            return x == 26;\n        if (n == 27)\n            return x == 27;\n        if (n == 28)\n            return x == 28;\n        if (n == 29)\n            return x == 29;\n        if (n == 30)\n            return x == 30;\n        if (n == 31)\n            return x == 31;\n        if (n == 32)\n            return x == 32;\n        if (n == 33)\n            return x == 33;\n        if (n == 34)\n            return x == 34;\n        if (n == 35)\n            return x == 35;\n        if (n == 36)\n            return x == 36;\n        if (n == 37)\n            return x == 37;\n        if (n == 38)\n            return x == 38;\n        if (n == 39)\n            return x == 39;\n        if (n == 40)\n            return x == 40;\n        if (n == 41)\n            return x == 41;\n        if (n == 42)\n            return x == 42;\n        if (n == 43)\n            return x == 43;\n        if (n == 44)\n            return x == 44;\n        if (n == 45)\n            return x == 45;\n        if (n == 46)\n            return x == 46;\n        if (n == 47)\n            return x == 47;\n        if (n == 48)\n            return x == 48;\n        if (n == 49)\n            return x == 49;\n        if (n == 50)\n            return x == 50;\n        if (n == 51)\n            return x == 51;\n        if (n == 52)\n            return x == 52;\n        if (n == 53)\n            return x == 53;\n        if (n == 54)\n            return x == 54;\n        if (n == 55)\n            return x == 55;\n        if (n == 56)\n            return x == 56;\n        if (n == 57)\n            return x == 57;\n        if (n == 58)\n            return x == 58;\n        if (n == 59)\n            return x == 59;\n        if (n == 60)\n            return x == 60;\n        if (n == 61)\n            return x == 61;\n        if (n == 62)\n            return x == 62;\n        if (n == 63)\n            return x == 63;\n        if (n == 64)\n            return x == 64;\n        if (n == 65)\n            return x == 65;\n        if (n == 66)\n            return x == 66;\n        if (n == 67)\n            return x == 67;\n        if (n == 68)\n            return x == 68;\n        if (n == 69)\n            return x == 69;\n        if (n == 70)\n            return x == 70;\n        if (n == 71)\n            return x == 71;\n        if (n == 72)\n            return x == 72;\n        if (n == 73)\n            return x == 73;\n        if (n == 74)\n            return x == 74;\n        if (n == 75)\n            return x == 75;\n        if (n == 76)\n            return x == 76;\n        if (n == 77)\n            return x == 77;\n        if (n == 78)\n            return x == 78;\n        if (n == 79)\n            return x == 79;\n        if (n == 80)\n            return x == 80;\n        if (n == 81)\n            return x == 81;\n        if (n == 82)\n            return x == 82;\n        if (n == 83)\n            return x == 83;\n        if (n == 84)\n            return x == 84;\n        if (n == 85)\n            return x == 85;\n        if (n == 86)\n            return x == 86;\n        if (n == 87)\n            return x == 87;\n        if (n == 88)\n            return x == 88;\n        if (n == 89)\n            return x == 89;\n        if (n == 90)\n            return x == 90;\n        if (n == 91)\n            return x == 91;\n        if (n == 92)\n            return x == 92;\n        if (n == 93)\n            return x == 93;\n        if (n == 94)\n            return x == 94;\n        if (n == 95)\n            return x == 95;\n        if (n == 96)\n            return x == 96;\n        if (n == 97)\n            return x == 97;\n        if (n == 98)\n            return x == 98;\n        if (n == 99)\n            return x == 99;\n        if (n == 100)\n            return x == 100;\n        if (n == 101)\n            return x == 101;\n        if (n == 102)\n            return x == 102;\n        if (n == 103)\n            return x ==", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 0) {\n            return true;\n        }\n        if (n == 1) {\n            return x == 1;\n        }\n        if (n == 2) {\n            return x == 1 || x == 2;\n        }\n        if (n == 3) {\n            return x == 1 || x == 2 || x == 3;\n        }\n        if (n == 4) {\n            return x == 1 || x == 2 || x == 3 || x == 4;\n        }\n        if (n == 5) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5;\n        }\n        if (n == 6) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6;\n        }\n        if (n == 7) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7;\n        }\n        if (n == 8) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8;\n        }\n        if (n == 9) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9;\n        }\n        if (n == 10) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10;\n        }\n        if (n == 11) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11;\n        }\n        if (n == 12) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12;\n        }\n        if (n == 13) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13;\n        }\n        if (n == 14) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14;\n        }\n        if (n == 15) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15;\n        }\n        if (n == 16) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16;\n        }\n        if (n == 17) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17;\n        }\n        if (n == 18) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18;\n        }\n        if (n == 19) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19;\n        }\n        if (n == 20) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20;\n        }\n        if (n == 21) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20 || x == 21;\n        }\n        if (n == 22) {\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20 || x == 21 || x == 22;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 0) return true;\n        if (n == 1) return x == 1;\n        if (n % 2 == 0) {\n            if (isSimplePower(x, n/2)) return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 0) {\n            return true;\n        }\n        if (n == 1) {\n            return x == 1;\n        }\n        if (n == 2) {\n            return x == 2;\n        }\n        if (n == 3) {\n            return x == 3;\n        }\n        if (n == 4) {\n            return x == 4;\n        }\n        if (n == 5) {\n            return x == 5;\n        }\n        if (n == 6) {\n            return x == 6;\n        }\n        if (n == 7) {\n            return x == 7;\n        }\n        if (n == 8) {\n            return x == 8;\n        }\n        if (n == 9) {\n            return x == 9;\n        }\n        if (n == 10) {\n            return x == 10;\n        }\n        if (n == 11) {\n            return x == 11;\n        }\n        if (n == 12) {\n            return x == 12;\n        }\n        if (n == 13) {\n            return x == 13;\n        }\n        if (n == 14) {\n            return x == 14;\n        }\n        if (n == 15) {\n            return x == 15;\n        }\n        if (n == 16) {\n            return x == 16;\n        }\n        if (n == 17) {\n            return x == 17;\n        }\n        if (n == 18) {\n            return x == 18;\n        }\n        if (n == 19) {\n            return x == 19;\n        }\n        if (n == 20) {\n            return x == 20;\n        }\n        if (n == 21) {\n            return x == 21;\n        }\n        if (n == 22) {\n            return x == 22;\n        }\n        if (n == 23) {\n            return x == 23;\n        }\n        if (n == 24) {\n            return x == 24;\n        }\n        if (n == 25) {\n            return x == 25;\n        }\n        if (n == 26) {\n            return x == 26;\n        }\n        if (n == 27) {\n            return x == 27;\n        }\n        if (n == 28) {\n            return x == 28;\n        }\n        if (n == 29) {\n            return x == 29;\n        }\n        if (n == 30) {\n            return x == 30;\n        }\n        if (n == 31) {\n            return x == 31;\n        }\n        if (n == 32) {\n            return x == 32;\n        }\n        if (n == 33) {\n            return x == 33;\n        }\n        if (n == 34) {\n            return x == 34;\n        }\n        if (n == 35) {\n            return x == 35;\n        }\n        if (n == 36) {\n            return x == 36;\n        }\n        if (n == 37) {\n            return x == 37;\n        }\n        if (n == 38) {\n            return x == 38;\n        }\n        if (n == 39) {\n            return x == 39;\n        }\n        if (n == 40) {\n            return x == 40;\n        }\n        if (n == 41) {\n            return x == 41;\n        }\n        if (n == 42) {\n            return x == 42;\n        }\n        if (n == 43) {\n            return x == 43;\n        }\n        if (n == 44) {\n            return x == 44;\n        }\n        if (n == 45) {\n            return x == 45;\n        }\n        if (n == 46) {\n            return x == 46;\n        }\n        if (n == 47) {\n            return x == 47;\n        }\n        if (n == 48) {\n            return x == 48;\n        }\n        if (n == 49) {\n            return x == 49;\n        }\n        if (n == 50) {\n            return x == 50;\n        }\n        if (n == 51) {\n            return x == 51;\n        }\n        if (n == 52) {\n            return x == 52;\n        }\n        if (n == 53) {\n            return x == 53;\n        }\n        if (n == 54) {\n            return x == 54;\n        }\n        if (n == 55) {\n            return x == 55;\n        }\n        if (n == 56) {\n            return x == 56;\n        }\n        if (n == 57) {\n            return x == 57;\n        }\n        if (n == 58) {\n            return x == 58;\n        }\n        if (n == 59) {\n            return x == 59;\n        }\n        if (n == 60) {\n            return x == 60;\n        }\n        if (n == 61) {\n            return x == 61;\n        }\n        if (n == 62) {\n            return x == 62;\n        }\n        if (n == 63) {\n            return x == 63;\n        }\n        if (n == 64) {\n            return x == 64;\n        }\n        if (n == 65) {\n            return x == 65;\n        }\n        if (n == 66) {\n            return x == 66;\n        }\n        if (n == 67) {\n            return x == 67;\n        }\n        if (n == 68) {\n            return x == 68;\n        }\n        if (n == 69) {\n            return x == 69;\n        }\n        if (n == 70) {\n            return x == 70;\n        }\n        if (n == 71) {\n            return x == 71;\n        }\n        if (n == 72) {\n            return x == 72;\n        }\n        if (n == 73) {\n            return x == 73;\n        }\n        if (n == 74) {\n            return x == 74;\n        }\n        if (n == 75) {\n            return x == 75;\n        }\n        if (n == 76) {\n            return x == 76;\n        }\n        if (n == 77) {\n            return x == 77;\n        }\n        if (n == 78) {\n            return x == 78;\n        }\n        if (n == 79) {\n            return x == 79;\n        }\n        if (n == 80) {\n            return x == 80;\n        }\n        if (n == 81) {\n            return x == 81;\n        }\n        if (n == 82) {\n            return x == 82;\n        }\n        if (n == 83) {\n            return x == 83;\n        }\n        if (n == 84) {\n            return x == 84;\n        }\n        if (n == 85) {\n            return x == 85;\n        }\n        if (n == 86) {\n            return x == 86;\n        }\n        if (n == 87) {\n            return x == 87;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 0) {\n            return true;\n        }\n        int power = 1;\n        while (power < n) {\n            power *= 2;\n        }\n        return power == x;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 0) return true;\n        if (n == 1) return x == 1;\n        if (n % 2 == 0) {\n            if (isSimplePower(x, n/2)) return true;\n            else return false;\n        }\n        else {\n            if (isSimplePower(x, n/2)) return true;\n            else return false;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 0) {\n            return true;\n        }\n        if (n == 1) {\n            return x == 1;\n        }\n        if (n == 2) {\n            return x == 2;\n        }\n        if (n == 3) {\n            return x == 3;\n        }\n        if (n == 4) {\n            return x == 4;\n        }\n        if (n == 5) {\n            return x == 5;\n        }\n        if (n == 6) {\n            return x == 6;\n        }\n        if (n == 7) {\n            return x == 7;\n        }\n        if (n == 8) {\n            return x == 8;\n        }\n        if (n == 9) {\n            return x == 9;\n        }\n        if (n == 10) {\n            return x == 10;\n        }\n        if (n == 11) {\n            return x == 11;\n        }\n        if (n == 12) {\n            return x == 12;\n        }\n        if (n == 13) {\n            return x == 13;\n        }\n        if (n == 14) {\n            return x == 14;\n        }\n        if (n == 15) {\n            return x == 15;\n        }\n        if (n == 16) {\n            return x == 16;\n        }\n        if (n == 17) {\n            return x == 17;\n        }\n        if (n == 18) {\n            return x == 18;\n        }\n        if (n == 19) {\n            return x == 19;\n        }\n        if (n == 20) {\n            return x == 20;\n        }\n        if (n == 21) {\n            return x == 21;\n        }\n        if (n == 22) {\n            return x == 22;\n        }\n        if (n == 23) {\n            return x == 23;\n        }\n        if (n == 24) {\n            return x == 24;\n        }\n        if (n == 25) {\n            return x == 25;\n        }\n        if (n == 26) {\n            return x == 26;\n        }\n        if (n == 27) {\n            return x == 27;\n        }\n        if (n == 28) {\n            return x == 28;\n        }\n        if (n == 29) {\n            return x == 29;\n        }\n        if (n == 30) {\n            return x == 30;\n        }\n        if (n == 31) {\n            return x == 31;\n        }\n        if (n == 32) {\n            return x == 32;\n        }\n        if (n == 33) {\n            return x == 33;\n        }\n        if (n == 34) {\n            return x == 34;\n        }\n        if (n == 35) {\n            return x == 35;\n        }\n        if (n == 36) {\n            return x == 36;\n        }\n        if (n == 37) {\n            return x == 37;\n        }\n        if (n == 38) {\n            return x == 38;\n        }\n        if (n == 39) {\n            return x == 39;\n        }\n        if (n == 40) {\n            return x == 40;\n        }\n        if (n == 41) {\n            return x == 41;\n        }\n        if (n == 42) {\n            return x == 42;\n        }\n        if (n == 43) {\n            return x == 43;\n        }\n        if (n == 44) {\n            return x == 44;\n        }\n        if (n == 45) {\n            return x == 45;\n        }\n        if (n == 46) {\n            return x == 46;\n        }\n        if (n == 47) {\n            return x == 47;\n        }\n        if (n == 48) {\n            return x == 48;\n        }\n        if (n == 49) {\n            return x == 49;\n        }\n        if (n == 50) {\n            return x == 50;\n        }\n        if (n == 51) {\n            return x == 51;\n        }\n        if (n == 52) {\n            return x == 52;\n        }\n        if (n == 53) {\n            return x == 53;\n        }\n        if (n == 54) {\n            return x == 54;\n        }\n        if (n == 55) {\n            return x == 55;\n        }\n        if (n == 56) {\n            return x == 56;\n        }\n        if (n == 57) {\n            return x == 57;\n        }\n        if (n == 58) {\n            return x == 58;\n        }\n        if (n == 59) {\n            return x == 59;\n        }\n        if (n == 60) {\n            return x == 60;\n        }\n        if (n == 61) {\n            return x == 61;\n        }\n        if (n == 62) {\n            return x == 62;\n        }\n        if (n == 63) {\n            return x == 63;\n        }\n        if (n == 64) {\n            return x == 64;\n        }\n        if (n == 65) {\n            return x == 65;\n        }\n        if (n == 66) {\n            return x == 66;\n        }\n        if (n == 67) {\n            return x == 67;\n        }\n        if (n == 68) {\n            return x == 68;\n        }\n        if (n == 69) {\n            return x == 69;\n        }\n        if (n == 70) {\n            return x == 70;\n        }\n        if (n == 71) {\n            return x == 71;\n        }\n        if (n == 72) {\n            return x == 72;\n        }\n        if (n == 73) {\n            return x == 73;\n        }\n        if (n == 74) {\n            return x == 74;\n        }\n        if (n == 75) {\n            return x == 75;\n        }\n        if (n == 76) {\n            return x == 76;\n        }\n        if (n == 77) {\n            return x == 77;\n        }\n        if (n == 78) {\n            return x == 78;\n        }\n        if (n == 79) {\n            return x == 79;\n        }\n        if (n == 80) {\n            return x == 80;\n        }\n        if (n == 81) {\n            return x == 81;\n        }\n        if (n == 82) {\n            return x == 82;\n        }\n        if (n == 83) {\n            return x == 83;\n        }\n        if (n == 84) {\n            return x == 84;\n        }\n        if (n == 85) {\n            return x == 85;\n        }\n        if (n == 86) {\n            return x == 86;\n        }\n        if (n == 87) {\n            return x == 87;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if(n == 0) return true;\n        int power = 1;\n        while(power < n) {\n            power *= 2;\n        }\n        return x == power;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if(n==0) return true;\n        if(n==1) return false;\n        if(n%2==0) return isSimplePower(x, n/2);\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if(n == 0)\n            return true;\n        else if(n == 1)\n            return x == 1;\n        else if(n == 2)\n            return x == 2 || x == 4;\n        else if(n == 3)\n            return x == 3 || x == 6;\n        else if(n == 4)\n            return x == 5 || x == 8;\n        else if(n == 5)\n            return x == 7 || x == 10;\n        else if(n == 6)\n            return x == 9 || x == 12;\n        else if(n == 7)\n            return x == 13 || x == 16;\n        else if(n == 8)\n            return x == 17 || x == 20;\n        else if(n == 9)\n            return x == 19 || x == 24;\n        else if(n == 10)\n            return x == 23 || x == 28;\n        else if(n == 11)\n            return x == 27 || x == 32;\n        else if(n == 12)\n            return x == 31 || x == 36;\n        else if(n == 13)\n            return x == 35 || x == 40;\n        else if(n == 14)\n            return x == 39 || x == 44;\n        else if(n == 15)\n            return x == 43 || x == 48;\n        else if(n == 16)\n            return x == 47 || x == 52;\n        else if(n == 17)\n            return x == 51 || x == 56;\n        else if(n == 18)\n            return x == 55 || x == 60;\n        else if(n == 19)\n            return x == 59 || x == 64;\n        else if(n == 20)\n            return x == 63 || x == 68;\n        else if(n == 21)\n            return x == 67 || x == 72;\n        else if(n == 22)\n            return x == 71 || x == 76;\n        else if(n == 23)\n            return x == 75 || x == 80;\n        else if(n == 24)\n            return x == 79 || x == 84;\n        else if(n == 25)\n            return x == 83 || x == 88;\n        else if(n == 26)\n            return x == 87 || x == 92;\n        else if(n == 27)\n            return x == 91 || x == 96;\n        else if(n == 28)\n            return x == 95 || x == 100;\n        else if(n == 29)\n            return x == 99 || x == 104;\n        else if(n == 30)\n            return x == 103 || x == 108;\n        else if(n == 31)\n            return x == 107 || x == 112;\n        else if(n == 32)\n            return x == 111 || x == 116;\n        else if(n == 33)\n            return x == 115 || x == 120;\n        else if(n == 34)\n            return x == 119 || x == 124;\n        else if(n == 35)\n            return x == 123 || x == 128;\n        else if(n == 36)\n            return x == 127 || x == 132;\n        else if(n == 37)\n            return x == 131 || x == 136;\n        else if(n == 38)\n            return x == 135 || x == 140;\n        else if(n == 39)\n            return x == 139 || x == 144;\n        else if(n == 40)\n            return x == 143 || x == 148;\n        else if(n == 41)\n            return x == 147 || x == 152;\n        else if(n == 42)\n            return x == 151 || x == 156;\n        else if(n == 43)\n            return x == 155 || x == 160;\n        else if(n == 44)\n            return x == 159 || x == 164;\n        else if(n == 45)\n            return x == 163 || x == 168;\n        else if(n == 46)\n            return x == 167 || x == 172;\n        else if(n == 47)\n            return x == 171 || x == 176;\n        else if(n == 48)\n            return x == 175 || x == 180;\n        else if(n == 49)\n            return x == 179 || x == 184;\n        else if(n == 50)\n            return x == 183 || x == 188;\n        else if(n == 51)\n            return x == 187 || x == 192;\n        else if(n == 52)\n            return x == 191 || x == 196;\n        else if(n == 53)\n            return x == 195 || x == 200;\n        else if(n == 54)\n            return x == 199 || x == 204;\n        else if(n == 55)\n            return x == 203 || x == 208;\n        else if(n == 56)\n            return x == 207 || x == 212;\n        else if(n == 57)\n            return x == 211 || x == 216;\n        else if(n == 58)\n            return x == 215 || x == 220;\n        else if(n == 59)\n            return x == 219 || x == 224;\n        else if(n == 60)\n            return x == 223 || x == 228;\n        else if(n == 61)\n            return x == 227 || x == 232;\n        else if(n == 62)\n            return x == 231 || x == 236;\n        else if(n == 63)\n            return x == 235 || x == 240;\n        else if(n == 64)\n            return x == 239 || x == 244;\n        else if(n == 65)\n            return x == 243 || x == 248;\n        else if(n == 66)\n            return x == 247 || x == 252;\n        else if(n == 67)\n            return x == 251 || x == 256;\n        else if(n == 68)\n            return x == 255 || x == 260;\n        else if(n == 69)\n            return x == 259 || x == 264;\n        else if(n == 70)\n            return x == 263 || x ==", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        int power = 1;\n        while (power < n) {\n            power *= x;\n        }\n        return power == n;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 0) {\n            return true;\n        }\n        int power = 1;\n        while (n > 0) {\n            if (n % 2 == 1) {\n                power *= x;\n            }\n            x *= x;\n            n /= 2;\n        }\n        return power == x;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 0)\n            return true;\n        if (n == 1)\n            return x == 1;\n        if (n == 2)\n            return x == 1 || x == 2;\n        if (n == 3)\n            return x == 1 || x == 2 || x == 3;\n        if (n == 4)\n            return x == 1 || x == 2 || x == 3 || x == 4;\n        if (n == 5)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5;\n        if (n == 6)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6;\n        if (n == 7)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7;\n        if (n == 8)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8;\n        if (n == 9)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9;\n        if (n == 10)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10;\n        if (n == 11)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11;\n        if (n == 12)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12;\n        if (n == 13)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13;\n        if (n == 14)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14;\n        if (n == 15)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15;\n        if (n == 16)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16;\n        if (n == 17)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17;\n        if (n == 18)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18;\n        if (n == 19)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19;\n        if (n == 20)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20;\n        if (n == 21)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20 || x == 21;\n        if (n == 22)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20 || x == 21 || x == 22;\n        if (n == 23)\n            return x == 1 || x == 2 || x == 3 || x == 4 || x == 5 || x == 6 || x == 7 || x == 8 || x == 9 || x == 10 || x == 11 || x == 12 || x == 13 || x == 14 || x == 15 || x == 16 || x == 17 || x == 18 || x == 19 || x == 20 || x == 21 || x == 22 || x == 23;\n        if (n == 2", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 0) return true;\n        if (n == 1) return x == 1;\n        if (n == 2) return x == 2;\n        if (n == 3) return x == 3;\n        if (n == 4) return x == 4;\n        if (n == 5) return x == 5;\n        if (n == 6) return x == 6;\n        if (n == 7) return x == 7;\n        if (n == 8) return x == 8;\n        if (n == 9) return x == 9;\n        if (n == 10) return x == 10;\n        if (n == 11) return x == 11;\n        if (n == 12) return x == 12;\n        if (n == 13) return x == 13;\n        if (n == 14) return x == 14;\n        if (n == 15) return x == 15;\n        if (n == 16) return x == 16;\n        if (n == 17) return x == 17;\n        if (n == 18) return x == 18;\n        if (n == 19) return x == 19;\n        if (n == 20) return x == 20;\n        if (n == 21) return x == 21;\n        if (n == 22) return x == 22;\n        if (n == 23) return x == 23;\n        if (n == 24) return x == 24;\n        if (n == 25) return x == 25;\n        if (n == 26) return x == 26;\n        if (n == 27) return x == 27;\n        if (n == 28) return x == 28;\n        if (n == 29) return x == 29;\n        if (n == 30) return x == 30;\n        if (n == 31) return x == 31;\n        if (n == 32) return x == 32;\n        if (n == 33) return x == 33;\n        if (n == 34) return x == 34;\n        if (n == 35) return x == 35;\n        if (n == 36) return x == 36;\n        if (n == 37) return x == 37;\n        if (n == 38) return x == 38;\n        if (n == 39) return x == 39;\n        if (n == 40) return x == 40;\n        if (n == 41) return x == 41;\n        if (n == 42) return x == 42;\n        if (n == 43) return x == 43;\n        if (n == 44) return x == 44;\n        if (n == 45) return x == 45;\n        if (n == 46) return x == 46;\n        if (n == 47) return x == 47;\n        if (n == 48) return x == 48;\n        if (n == 49) return x == 49;\n        if (n == 50) return x == 50;\n        if (n == 51) return x == 51;\n        if (n == 52) return x == 52;\n        if (n == 53) return x == 53;\n        if (n == 54) return x == 54;\n        if (n == 55) return x == 55;\n        if (n == 56) return x == 56;\n        if (n == 57) return x == 57;\n        if (n == 58) return x == 58;\n        if (n == 59) return x == 59;\n        if (n == 60) return x == 60;\n        if (n == 61) return x == 61;\n        if (n == 62) return x == 62;\n        if (n == 63) return x == 63;\n        if (n == 64) return x == 64;\n        if (n == 65) return x == 65;\n        if (n == 66) return x == 66;\n        if (n == 67) return x == 67;\n        if (n == 68) return x == 68;\n        if (n == 69) return x == 69;\n        if (n == 70) return x == 70;\n        if (n == 71) return x == 71;\n        if (n == 72) return x == 72;\n        if (n == 73) return x == 73;\n        if (n == 74) return x == 74;\n        if (n == 75) return x == 75;\n        if (n == 76) return x == 76;\n        if (n == 77) return x == 77;\n        if (n == 78) return x == 78;\n        if (n == 79) return x == 79;\n        if (n == 80) return x == 80;\n        if (n == 81) return x == 81;\n        if (n == 82) return x == 82;\n        if (n == 83) return x == 83;\n        if (n == 84) return x == 84;\n        if (n == 85) return x == 85;\n        if (n == 86) return x == 86;\n        if (n == 87) return x == 87;\n        if (n == 88) return x == 88;\n        if (n == 89) return x == 89;\n        if (n == 90) return x == 90;\n        if (n == 91) return x == 91;\n        if (n == 92) return x == 92;\n        if (n == 93) return x == 93;\n        if (n == 94) return x == 94;\n        if (n == 95) return x == 95;\n        if (n == 96) return x == 96;\n        if (n == 97) return x == 97;\n        if (n == 98) return x == 98;\n        if (n == 99) return x == 99;\n        if (n == 100) return x == 100;\n        if (n == 101) return x == 101;\n        if (n == 102) return x == 102;\n        if (n == 103) return x == 103;\n        if (n == 104) return x == 104;\n        if (n == 105) return x == 105;\n        if (n == 106) return x == 106;\n        if (n == 107) return x == 107;\n        if (n == 108) return x == 108;\n        if (n == 109", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n        if (n == 0)\n            return true;\n        int temp = x;\n        while (n > 0) {\n            if (n % 2 == 1)\n                temp = temp * x;\n            n = n / 2;\n            x = x * x;\n        }\n        return temp == x;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if(a == 0)\n            return true;\n        if(a % 6 == 0)\n            return true;\n        if(a % 6 == 5)\n            return true;\n        if(a % 6 == 4)\n            return true;\n        if(a % 6 == 3)\n            return true;\n        if(a % 6 == 2)\n            return true;\n        if(a % 6 == 1)\n            return true;\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if(a == 0) return true;\n        if(a == 1) return true;\n        if(a % 6 == 0) return true;\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if(a<0) return false;\n        if(a==0) return true;\n        if(a%2==0) return false;\n        int n=a/2;\n        int sum=0;\n        while(n>0) {\n            sum+=n%10;\n            n/=10;\n        }\n        return sum==a;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if (a == 0) {\n            return true;\n        }\n        int n = (int) Math.sqrt(a);\n        for (int i = 2; i <= n; i++) {\n            if (a % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if(a==0)\n            return true;\n        if(a%2==0)\n            return false;\n        if(a%3==0)\n            return false;\n        if(a%4==0)\n            return false;\n        if(a%5==0)\n            return false;\n        if(a%6==0)\n            return false;\n        if(a%7==0)\n            return false;\n        if(a%8==0)\n            return false;\n        if(a%9==0)\n            return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if (a == 0) {\n            return true;\n        }\n        if (a == 1) {\n            return false;\n        }\n        if (a % 6 == 0) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if (a == 0) {\n            return true;\n        }\n        if (a % 6 == 0) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if (a == 0) return true;\n        if (a == 1) return true;\n        if (a % 6 == 0) return true;\n        if (a % 2 == 0) return false;\n        if (a % 3 == 0) return false;\n        if (a % 4 == 0) return false;\n        if (a % 5 == 0) return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if (a == 0) {\n            return true;\n        }\n        if (a % 6 == 0) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if (a == 0) {\n            return true;\n        }\n        if (a % 6 == 0) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if (a == 0) {\n            return true;\n        }\n        if (a % 6 == 0) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if (a <= 0) {\n            return false;\n        }\n        int n = (int) Math.sqrt(a);\n        if (n * n == a) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if (a < 0) {\n            return false;\n        }\n        int n = (int) Math.sqrt(a);\n        if (a == n * n) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if (a == 0) {\n            return true;\n        }\n        if (a == 1) {\n            return false;\n        }\n        if (a % 6 == 0) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if(a < 0)\n            return false;\n        if(a == 0)\n            return true;\n        if(a % 6 == 0)\n            return true;\n        if(a % 6 == 5)\n            return true;\n        if(a % 6 == 4)\n            return true;\n        if(a % 6 == 3)\n            return true;\n        if(a % 6 == 2)\n            return true;\n        if(a % 6 == 1)\n            return true;\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if(a==0) return true;\n        if(a==1) return false;\n        if(a%2==0) return false;\n        int n=Math.sqrt(a);\n        for(int i=3;i<=n;i+=2) {\n            if(a%i==0) return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if (a <= 0) {\n            return false;\n        }\n        int n = (int) Math.sqrt(a);\n        if (n * n == a) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if(a == 0)\n            return true;\n        if(a == 1)\n            return true;\n        if(a % 6 == 0)\n            return true;\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if (a == 0) {\n            return true;\n        }\n        if (a % 6 == 0) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n        if(a == 0)\n            return true;\n        else if(a == 1)\n            return false;\n        else if(a % 6 == 0)\n            return true;\n        else\n            return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (Character.isDigit(num.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (Character.isDigit(num.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) == 'A' || num.charAt(i) == 'B' || num.charAt(i) == 'C' || num.charAt(i) == 'D' || num.charAt(i) == 'E' || num.charAt(i) == 'F') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (Character.isDigit(num.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) >= '0' && num.charAt(i) <= '9') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) >= '0' && num.charAt(i) <= '9') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (Character.isDigit(num.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (Character.isDigit(num.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (Character.isDigit(num.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) == 'A' || num.charAt(i) == 'B' || num.charAt(i) == 'C' || num.charAt(i) == 'D' || num.charAt(i) == 'E' || num.charAt(i) == 'F') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (Character.isDigit(num.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (Character.isDigit(num.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        int len = num.length();\n        for (int i = 0; i < len; i++) {\n            if (Character.isDigit(num.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) >= '0' && num.charAt(i) <= '9') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (Character.isDigit(num.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        int len = num.length();\n        for (int i = 0; i < len; i++) {\n            char c = num.charAt(i);\n            if (c >= '0' && c <= '9') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (Character.isDigit(num.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (Character.isDigit(num.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (num.charAt(i) >= '0' && num.charAt(i) <= '9') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            if (Character.isDigit(num.charAt(i))) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        int remainder = decimal;\n        while (remainder != 0) {\n            binary = (remainder & 1) + binary;\n            remainder = remainder >> 1;\n        }\n        binary = binary.substring(binary.length() - 1, binary.length());\n        return \"db\" + binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        int remainder = decimal;\n        while (remainder != 0) {\n            binary = remainder % 2 + binary;\n            remainder = remainder / 2;\n        }\n        return binary.substring(binary.length() - 8, binary.length());\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        int i = 0;\n        while(decimal != 0) {\n            binary = (decimal % 2) + binary;\n            decimal /= 2;\n            i++;\n        }\n        binary = binary.substring(i);\n        binary = \"db\" + binary;\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        int temp = decimal;\n        while(temp > 0) {\n            binary = (temp % 2) + binary;\n            temp = temp / 2;\n        }\n        binary = \"db\" + binary;\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        int remainder = decimal;\n        while (remainder != 0) {\n            binary = remainder % 2 + binary;\n            remainder = remainder / 2;\n        }\n        binary = \"db\" + binary;\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        int remainder = decimal;\n        while(remainder != 0) {\n            binary = remainder%2 + binary;\n            remainder = remainder/2;\n        }\n        return binary.substring(binary.length()-1, binary.length());\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        int remainder = decimal;\n        while (remainder != 0) {\n            binary = (remainder % 2) + binary;\n            remainder = remainder / 2;\n        }\n        binary = binary.substring(binary.length() - 1, binary.length());\n        binary = \"db\" + binary;\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        int remainder = decimal;\n        while (remainder != 0) {\n            binary = (remainder % 2) + binary;\n            remainder = remainder / 2;\n        }\n        binary = \"db\" + binary;\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        int remainder = decimal;\n        while (remainder != 0) {\n            binary = (remainder % 2) + binary;\n            remainder = remainder / 2;\n        }\n        binary = \"db\" + binary;\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        int remainder = decimal;\n        while (remainder != 0) {\n            binary = (remainder % 2) + binary;\n            remainder = remainder / 2;\n        }\n        binary = \"db\" + binary;\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        int remainder = decimal;\n        while (remainder != 0) {\n            binary = (remainder % 2) + binary;\n            remainder = remainder / 2;\n        }\n        return binary.substring(binary.length() - 8, binary.length());\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        int remainder = decimal;\n        while(remainder != 0) {\n            binary = (remainder & 1) + binary;\n            remainder = remainder >> 1;\n        }\n        binary = \"db\" + binary;\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        StringBuilder binary = new StringBuilder();\n        while (decimal != 0) {\n            binary.append(decimal % 2);\n            decimal = decimal / 2;\n        }\n        binary.reverse();\n        binary.insert(0, 'db');\n        binary.append('db');\n        return binary.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        int remainder = decimal;\n        while (remainder != 0) {\n            binary = (remainder % 2) + binary;\n            remainder = remainder / 2;\n        }\n        binary = binary.substring(binary.length() - 1, binary.length());\n        binary = \"db\" + binary;\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        StringBuilder binary = new StringBuilder();\n        while (decimal > 0) {\n            binary.insert(0, (decimal % 2) + '0');\n            decimal /= 2;\n        }\n        binary.insert(0, 'db');\n        return binary.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        int remainder = decimal;\n        while (remainder != 0) {\n            binary = (remainder % 2) + binary;\n            remainder = remainder / 2;\n        }\n        return binary.substring(binary.length() - 8, binary.length());\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        int remainder = decimal;\n        while (remainder > 0) {\n            binary = (remainder % 2) + binary;\n            remainder = remainder / 2;\n        }\n        binary = \"db\" + binary;\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        int remainder = decimal;\n        while (remainder != 0) {\n            binary = remainder % 2 + binary;\n            remainder = remainder / 2;\n        }\n        return binary.substring(binary.length() - 1, binary.length());\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        while (decimal > 0) {\n            binary = (decimal % 2) + binary;\n            decimal = decimal / 2;\n        }\n        binary = \"db\" + binary;\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n        String binary = \"\";\n        int remainder = decimal;\n        while (remainder > 0) {\n            binary = (remainder % 2) + binary;\n            remainder = remainder / 2;\n        }\n        return binary.substring(binary.length() - 8, binary.length());\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        // Write your code here\n        int count = 0;\n        char[] arr = s.toCharArray();\n        for(int i = 0; i < arr.length; i++) {\n            if(arr[i] == arr[i+1] && arr[i] == arr[i+2]) {\n                count++;\n            }\n        }\n        return count >= 3;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        int count = 0;\n        int[] arr = new int[26];\n        for(int i = 0; i < s.length(); i++) {\n            arr[s.charAt(i) - 'a']++;\n        }\n        for(int i = 0; i < 26; i++) {\n            if(arr[i] == 0) {\n                count++;\n            }\n        }\n        return count >= 3;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        int[] count = new int[26];\n        for(int i = 0; i < s.length(); i++) {\n            count[s.charAt(i) - 'a']++;\n        }\n        for(int i = 0; i < count.length; i++) {\n            if(count[i] > 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        if(s == null || s.length() < 3) return false;\n        int count = 0;\n        char[] arr = s.toCharArray();\n        for(int i = 0; i < arr.length; i++) {\n            if(arr[i] == arr[i+1]) {\n                count++;\n                if(count > 2) return false;\n            }\n            else count = 0;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        if(s.length() < 3) return false;\n        int count = 0;\n        char[] arr = s.toCharArray();\n        for(int i = 0; i < arr.length; i++) {\n            if(arr[i] == arr[i+1] && arr[i] == arr[i+2]) {\n                count++;\n                i++;\n            }\n        }\n        return count >= 3;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        int[] count = new int[26];\n        for(int i = 0; i < s.length(); i++) {\n            int c = s.charAt(i) - 'a';\n            count[c]++;\n        }\n        for(int i = 0; i < 26; i++) {\n            if(count[i] > 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        HashSet<Character> set = new HashSet<>();\n        for(int i=0;i<s.length();i++){\n            if(set.contains(s.charAt(i))){\n                set.remove(s.charAt(i));\n            }else{\n                set.add(s.charAt(i));\n            }\n        }\n        return set.size()==0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        if(s.length() < 3)\n            return false;\n        int count = 0;\n        for(int i = 0; i < s.length(); i++) {\n            if(s.charAt(i) == s.charAt(i+1))\n                count++;\n            else\n                count = 0;\n            if(count == 3)\n                return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        // Your code here\n        int count = 0;\n        int[] arr = new int[26];\n        for(int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            arr[c-'a']++;\n        }\n        for(int i = 0; i < arr.length; i++) {\n            if(arr[i] > 1) {\n                count++;\n            }\n        }\n        return count == 1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        // Write your code here\n        int n = s.length();\n        int[] count = new int[26];\n        for(int i=0; i<n; i++) {\n            count[s.charAt(i)-'a']++;\n        }\n        for(int i=0; i<26; i++) {\n            if(count[i] > 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        int n = s.length();\n        int[] count = new int[26];\n        for(int i=0; i<n; i++) {\n            int c = s.charAt(i) - 'a';\n            count[c]++;\n        }\n        for(int i=0; i<26; i++) {\n            if(count[i] > 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        if(s.length() < 3) return true;\n        HashSet<Character> set = new HashSet<>();\n        for(int i = 0; i < s.length(); i++) {\n            if(set.contains(s.charAt(i))) return false;\n            set.add(s.charAt(i));\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        int n = s.length();\n        int[] count = new int[26];\n        for(int i = 0; i < n; i++) {\n            char c = s.charAt(i);\n            count[c - 'a']++;\n        }\n        for(int i = 0; i < 26; i++) {\n            if(count[i] > 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        int n = s.length();\n        int[] count = new int[26];\n        for (int i = 0; i < n; i++) {\n            count[s.charAt(i) - 'a']++;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (count[i] > 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        // Write your code here\n        int n = s.length();\n        int[] count = new int[26];\n        for(int i=0; i<n; i++) {\n            int c = s.charAt(i) - 'a';\n            count[c]++;\n        }\n        for(int i=0; i<26; i++) {\n            if(count[i] > 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        int n = s.length();\n        int[] count = new int[26];\n        for(int i = 0; i < n; i++) {\n            count[s.charAt(i) - 'a']++;\n        }\n        for(int i = 0; i < 26; i++) {\n            if(count[i] > 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        if (s == null || s.length() < 3) {\n            return false;\n        }\n        int[] count = new int[26];\n        for (char c : s.toCharArray()) {\n            count[c - 'a']++;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (count[i] > 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        if(s == null || s.length() < 3)\n            return false;\n        int[] count = new int[26];\n        for(int i = 0; i < s.length(); i++) {\n            int c = s.charAt(i) - 'a';\n            count[c]++;\n        }\n        for(int i = 0; i < 26; i++) {\n            if(count[i] > 1)\n                return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        int n = s.length();\n        int[] count = new int[26];\n        for(int i = 0; i < n; i++) {\n            int c = s.charAt(i) - 'a';\n            count[c]++;\n        }\n        for(int i = 0; i < 26; i++) {\n            if(count[i] > 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n        int n = s.length();\n        int[] count = new int[26];\n        for(int i = 0; i < n; i++) {\n            char c = s.charAt(i);\n            count[c-'a']++;\n        }\n        for(int i = 0; i < 26; i++) {\n            if(count[i] > 1) return false;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4) {\n                letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade >= 3) {\n                letterGrades.add(\"B+\");\n            } else if (grade >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade >= 2) {\n                letterGrades.add(\"C+\");\n            } else if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade >= 1) {\n                letterGrades.add(\"D+\");\n            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\");\n            } else {\n                letterGrades.add(\"D-\");\n            }\n        }\n        return letterGrades;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (int i = 0; i < grades.size(); i++) {\n            if (grades.get(i) >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grades.get(i) >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grades.get(i) >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grades.get(i) >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grades.get(i) >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grades.get(i) >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grades.get(i) >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grades.get(i) >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grades.get(i) >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grades.get(i) >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grades.get(i) >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grades.get(i) >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> result = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                result.add(\"A+\");\n            } else if (grade >= 3.7) {\n                result.add(\"A\");\n            } else if (grade >= 3.3) {\n                result.add(\"A-\");\n            } else if (grade >= 3.0) {\n                result.add(\"B+\");\n            } else if (grade >= 2.7) {\n                result.add(\"B\");\n            } else if (grade >= 2.3) {\n                result.add(\"B-\");\n            } else if (grade >= 2.0) {\n                result.add(\"C+\");\n            } else if (grade >= 1.7) {\n                result.add(\"C\");\n            } else if (grade >= 1.3) {\n                result.add(\"C-\");\n            } else if (grade >= 1.0) {\n                result.add(\"D+\");\n            } else if (grade >= 0.7) {\n                result.add(\"D\");\n            } else if (grade >= 0.0) {\n                result.add(\"D-\");\n            } else {\n                result.add(\"E\");\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (int i = 0; i < grades.size(); i++) {\n            if (grades.get(i) >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grades.get(i) >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grades.get(i) >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grades.get(i) >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grades.get(i) >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grades.get(i) >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grades.get(i) >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grades.get(i) >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grades.get(i) >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grades.get(i) >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grades.get(i) >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grades.get(i) >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (int i = 0; i < grades.size(); i++) {\n            if (grades.get(i) >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grades.get(i) >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grades.get(i) >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grades.get(i) >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grades.get(i) >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grades.get(i) >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grades.get(i) >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grades.get(i) >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grades.get(i) >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grades.get(i) >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grades.get(i) >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grades.get(i) >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4) {\n                letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade >= 3) {\n                letterGrades.add(\"B+\");\n            } else if (grade >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade >= 2) {\n                letterGrades.add(\"C+\");\n            } else if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade >= 1) {\n                letterGrades.add(\"D+\");\n            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade >= 0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> result = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                result.add(\"A+\");\n            } else if (grade >= 3.7) {\n                result.add(\"A\");\n            } else if (grade >= 3.3) {\n                result.add(\"A-\");\n            } else if (grade >= 3.0) {\n                result.add(\"B+\");\n            } else if (grade >= 2.7) {\n                result.add(\"B\");\n            } else if (grade >= 2.3) {\n                result.add(\"B-\");\n            } else if (grade >= 2.0) {\n                result.add(\"C+\");\n            } else if (grade >= 1.7) {\n                result.add(\"C\");\n            } else if (grade >= 1.3) {\n                result.add(\"C-\");\n            } else if (grade >= 1.0) {\n                result.add(\"D+\");\n            } else if (grade >= 0.7) {\n                result.add(\"D\");\n            } else if (grade >= 0.0) {\n                result.add(\"D-\");\n            } else {\n                result.add(\"E\");\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n        List<String> letterGrades = new ArrayList<>();\n        for (Double grade : grades) {\n            if (grade >= 4.0) {\n                letterGrades.add(\"A+\");\n            } else if (grade >= 3.7) {\n                letterGrades.add(\"A\");\n            } else if (grade >= 3.3) {\n                letterGrades.add(\"A-\");\n            } else if (grade >= 3.0) {\n                letterGrades.add(\"B+\");\n            } else if (grade >= 2.7) {\n                letterGrades.add(\"B\");\n            } else if (grade >= 2.3) {\n                letterGrades.add(\"B-\");\n            } else if (grade >= 2.0) {\n                letterGrades.add(\"C+\");\n            } else if (grade >= 1.7) {\n                letterGrades.add(\"C\");\n            } else if (grade >= 1.3) {\n                letterGrades.add(\"C-\");\n            } else if (grade >= 1.0) {\n                letterGrades.add(\"D+\");\n            } else if (grade >= 0.7) {\n                letterGrades.add(\"D\");\n            } else if (grade >= 0.0) {\n                letterGrades.add(\"D-\");\n            } else {\n                letterGrades.add(\"E\");\n            }\n        }\n        return letterGrades;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int length = string.length();\n        if (length == 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int len = string.length();\n        for (int i = 2; i <= Math.sqrt(len); i++) {\n            if (len % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int length = string.length();\n        if (length == 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int len = string.length();\n        if (len == 1) {\n            return false;\n        }\n        int i = 2;\n        while (i * i <= len) {\n            if (len % i == 0) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int length = string.length();\n        int count = 0;\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                count++;\n            }\n        }\n        return count == 2;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int len = string.length();\n        if (len == 1) return true;\n        if (len == 2) return false;\n        if (len % 2 == 0) return false;\n        int i = 3;\n        while (i * i <= len) {\n            if (len % i == 0) return false;\n            i += 2;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int length = string.length();\n        if (length == 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int length = string.length();\n        if (length == 1) {\n            return false;\n        }\n        if (length == 2) {\n            return true;\n        }\n        if (length % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i <= Math.sqrt(length); i += 2) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int length = string.length();\n        int count = 0;\n        for (int i = 2; i <= length; i++) {\n            if (length % i == 0) {\n                count++;\n            }\n        }\n        return count == 1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int len = string.length();\n        if (len == 0) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(len); i++) {\n            if (len % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int length = string.length();\n        if (length == 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int length = string.length();\n        int i = 2;\n        while(i < length){\n            if(length % i == 0){\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int len = string.length();\n        if (len == 0) return false;\n        if (len == 1) return true;\n        if (len == 2) return true;\n        if (len == 3) return true;\n        if (len % 2 == 0) return false;\n        int i = 3;\n        while (i * i <= len) {\n            if (len % i == 0) return false;\n            i += 2;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int len = string.length();\n        int i = 2;\n        while(i < len) {\n            if(len % i == 0) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int len = string.length();\n        int i = 2;\n        while (i < len) {\n            if (string.charAt(i) == string.charAt(i + 1)) {\n                i++;\n            } else {\n                break;\n            }\n        }\n        return i == len;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int length = string.length();\n        if (length == 0) {\n            return false;\n        }\n        if (length == 1) {\n            return true;\n        }\n        if (length == 2) {\n            return true;\n        }\n        if (length % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i <= Math.sqrt(length); i += 2) {\n            if (length % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int length = string.length();\n        if (length == 1) {\n            return false;\n        }\n        int i = 2;\n        while (i < length) {\n            if (length % i == 0) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int length = string.length();\n        int i = 2;\n        while (i <= length) {\n            if (length % i == 0) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int len = string.length();\n        if (len == 1) {\n            return false;\n        }\n        int i = 2;\n        while (i * i <= len) {\n            if (len % i == 0) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n        int length = string.length();\n        if (length == 0) {\n            return false;\n        }\n        int count = 0;\n        for (int i = 2; i <= Math.sqrt(length); i++) {\n            if (length % i == 0) {\n                count++;\n            }\n        }\n        return count == 0;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i == 1 || i == n) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i == 1 || i == n) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i == 1 || i == n) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 10 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i == 1 || i == n) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i == 1 || i == n) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i == 1 || i == n) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i == 1 || i == n) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i == 1 || i == n) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 10 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i == 1 || i == n) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i == 1) {\n                count++;\n            } else if (i == n + 1) {\n                count++;\n            } else {\n                count += (n - i + 1) / 2;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i == 1) {\n                count++;\n            } else if (i == n) {\n                count++;\n            } else {\n                if (i % 10 == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 10 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i == 1 || i == n + 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 10 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i == 1) {\n                count++;\n            } else if (i == n) {\n                count++;\n            } else if (i % 10 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i == 1 || i == n) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i == 1 || i == n + 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i == 1) {\n                count++;\n            }\n            if (i == n) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = 0; i < binary.length(); i++) {\n            sum += Integer.parseInt(binary.charAt(i) + \"\");\n        }\n        return String.valueOf(sum);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = binary.length() - 1; i >= 0; i--) {\n            sum += Integer.parseInt(binary.substring(i, i + 1));\n        }\n        return String.valueOf(sum);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = binary.length() - 1; i >= 0; i--) {\n            sum += Integer.parseInt(binary.substring(i, i + 1));\n        }\n        return String.valueOf(sum);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        StringBuilder sb = new StringBuilder();\n        while(N != 0) {\n            int rem = N % 2;\n            sb.append(rem);\n            N = N / 2;\n        }\n        return sb.reverse().toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = \"\";\n        while(N != 0) {\n            binary = String.valueOf(N % 2) + binary;\n            N = N / 2;\n        }\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        StringBuilder sb = new StringBuilder();\n        while (N != 0) {\n            sb.append(N % 2);\n            N /= 2;\n        }\n        return sb.reverse().toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = binary.length() - 1; i >= 0; i--) {\n            sum += Integer.parseInt(binary.substring(i, i + 1));\n        }\n        return String.valueOf(sum);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = \"\";\n        int i = 0;\n        while(N != 0) {\n            binary = (N % 2) + binary;\n            N = N / 2;\n            i++;\n        }\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = \"\";\n        while(N != 0) {\n            binary = (N % 2) + binary;\n            N = N / 2;\n        }\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = \"\";\n        int i = 0;\n        while(N != 0) {\n            binary = (N % 2) + binary;\n            N /= 2;\n            i++;\n        }\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = \"\";\n        while(N != 0) {\n            binary = (N % 2) + binary;\n            N = N / 2;\n        }\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        StringBuilder sb = new StringBuilder();\n        while(N != 0) {\n            sb.append(N % 2);\n            N = N / 2;\n        }\n        return sb.reverse().toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = Integer.toBinaryString(N);\n        String sum = \"\";\n        for(int i = binary.length()-1; i >= 0; i--) {\n            sum += binary.charAt(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = \"\";\n        while(N > 0) {\n            binary = (N % 2) + binary;\n            N = N / 2;\n        }\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = \"\";\n        while(N != 0) {\n            binary = (N % 2) + binary;\n            N = N / 2;\n        }\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = binary.length() - 1; i >= 0; i--) {\n            sum += Integer.parseInt(binary.substring(i, i + 1));\n        }\n        return String.valueOf(sum);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = \"\";\n        int i = 0;\n        while(N > 0) {\n            binary = (N % 2) + binary;\n            N = N / 2;\n            i++;\n        }\n        return binary;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = Integer.toBinaryString(N);\n        int sum = 0;\n        for (int i = binary.length() - 1; i >= 0; i--) {\n            sum += Integer.parseInt(binary.substring(i, i + 1));\n        }\n        return String.valueOf(sum);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = Integer.toBinaryString(N);\n        String sum = \"\";\n        for (int i = binary.length() - 1; i >= 0; i--) {\n            sum += binary.charAt(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n        String binary = \"\";\n        while (N > 0) {\n            binary = (N % 2) + binary;\n            N = N / 2;\n        }\n        return binary;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int even = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                even += lst.get(i);\n            }\n        }\n        return even;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int even = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                even += lst.get(i);\n            }\n        }\n        return even;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int ans = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                ans += lst.get(i);\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int even = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                even += lst.get(i);\n            }\n        }\n        return even;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] shuffled = new String[words.length];\n        for (int i = 0; i < words.length; i++) {\n            shuffled[i] = words[i];\n        }\n        Arrays.sort(shuffled);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < shuffled.length; i++) {\n            sb.append(shuffled[i]);\n            if (i != shuffled.length - 1) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for (int i = 0; i < words.length; i++) {\n            newWords[i] = words[i].substring(0, 1) + words[i].substring(1);\n        }\n        return String.join(\" \", newWords);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] shuffledWords = new String[words.length];\n        for(int i = 0; i < words.length; i++) {\n            char[] chars = words[i].toCharArray();\n            Arrays.sort(chars);\n            shuffledWords[i] = new String(chars);\n        }\n        return String.join(\" \", shuffledWords);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for (int i = 0; i < words.length; i++) {\n            newWords[i] = words[i].substring(0, 1).toUpperCase() + words[i].substring(1);\n        }\n        return String.join(\" \", newWords);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for (int i = 0; i < words.length; i++) {\n            char[] chars = words[i].toCharArray();\n            Arrays.sort(chars);\n            newWords[i] = new String(chars);\n        }\n        return String.join(\" \", newWords);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for(int i = 0; i < words.length; i++) {\n            newWords[i] = \"\";\n            for(int j = 0; j < words[i].length(); j++) {\n                newWords[i] += words[i].charAt(j);\n            }\n        }\n        return String.join(\" \", newWords);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for (int i = 0; i < words.length; i++) {\n            newWords[i] = words[i].substring(0, 1).toUpperCase() + words[i].substring(1);\n        }\n        return String.join(\" \", newWords);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for(int i = 0; i < words.length; i++) {\n            newWords[i] = words[i].substring(0, 1) + words[i].substring(1);\n        }\n        return String.join(\" \", newWords);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for (int i = 0; i < words.length; i++) {\n            newWords[i] = words[i].substring(0, 1).toUpperCase() + words[i].substring(1);\n        }\n        return String.join(\" \", newWords);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for (int i = 0; i < words.length; i++) {\n            newWords[i] = words[i].substring(0, 1) + words[i].substring(1).toLowerCase();\n        }\n        return String.join(\" \", newWords);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] shuffled = new String[words.length];\n        for(int i = 0; i < words.length; i++) {\n            char[] chars = words[i].toCharArray();\n            Arrays.sort(chars);\n            shuffled[i] = new String(chars);\n        }\n        return String.join(\" \", shuffled);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for (int i = 0; i < words.length; i++) {\n            newWords[i] = words[i].substring(0, 1) + words[i].substring(1).toLowerCase();\n        }\n        return String.join(\" \", newWords);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for(int i = 0; i < words.length; i++) {\n            newWords[i] = words[i].substring(0, 1).toUpperCase() + words[i].substring(1);\n        }\n        return String.join(\" \", newWords);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for(int i = 0; i < words.length; i++) {\n            newWords[i] = words[i].substring(0, 1) + words[i].substring(1);\n        }\n        return String.join(\" \", newWords);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for(int i = 0; i < words.length; i++) {\n            newWords[i] = words[i].substring(0, 1) + words[i].substring(1);\n        }\n        return String.join(\" \", newWords);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for (int i = 0; i < words.length; i++) {\n            newWords[i] = String.valueOf((int)words[i].charAt(0));\n        }\n        return String.join(\" \", newWords);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for(int i = 0; i < words.length; i++) {\n            newWords[i] = String.valueOf((char) (words[i].charAt(0) + 1));\n        }\n        return String.join(\" \", newWords);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for (int i = 0; i < words.length; i++) {\n            newWords[i] = words[i].substring(0, 1) + words[i].substring(1);\n        }\n        return String.join(\" \", newWords);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] newWords = new String[words.length];\n        for (int i = 0; i < words.length; i++) {\n            newWords[i] = String.valueOf((int)words[i].charAt(0));\n        }\n        return String.join(\" \", newWords);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n        String[] words = s.split(\" \");\n        String[] shuffledWords = new String[words.length];\n        for(int i = 0; i < words.length; i++) {\n            shuffledWords[i] = words[i];\n        }\n        Arrays.sort(shuffledWords);\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < shuffledWords.length; i++) {\n            sb.append(shuffledWords[i]);\n            if(i != shuffledWords.length - 1) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        List<Integer> row = new ArrayList<>();\n        int rowSize = lst.size();\n        int colSize = lst.get(0).size();\n        int rowStart = 0;\n        int colStart = 0;\n        int rowEnd = rowSize - 1;\n        int colEnd = colSize - 1;\n        while (rowStart <= rowEnd && colStart <= colEnd) {\n            if (lst.get(rowStart).get(colStart) == x) {\n                row.add(lst.get(rowStart).get(colStart));\n                rowStart++;\n                colStart++;\n            } else if (lst.get(rowStart).get(colStart) > x) {\n                rowEnd--;\n            } else {\n                colEnd--;\n            }\n        }\n        if (rowStart > rowEnd) {\n            row.add(x);\n        } else if (colStart > colEnd) {\n            row.add(x);\n        }\n        result.add(row);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> res = new ArrayList<>();\n        if (lst == null || lst.size() == 0) return res;\n        List<Integer> row = lst.get(0);\n        int rowSize = row.size();\n        int colSize = lst.size();\n        int startRow = 0;\n        int startCol = 0;\n        int endRow = rowSize - 1;\n        int endCol = colSize - 1;\n        if (x < row.get(0)) {\n            startRow = 0;\n            startCol = x;\n        } else if (x > row.get(rowSize - 1)) {\n            endRow = rowSize - 1;\n            endCol = x;\n        } else {\n            startRow = 0;\n            startCol = 0;\n            endRow = rowSize - 1;\n            endCol = x;\n        }\n        for (int i = startRow; i <= endRow; i++) {\n            List<Integer> rowCopy = new ArrayList<>();\n            for (int j = startCol; j <= endCol; j++) {\n                rowCopy.add(row.get(i).get(j));\n            }\n            res.add(rowCopy);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> res = new ArrayList<>();\n        List<Integer> row = new ArrayList<>();\n        row.add(x);\n        res.add(row);\n        for (int i = 0; i < lst.size(); i++) {\n            row = new ArrayList<>();\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                row.add(lst.get(i).get(j));\n            }\n            Collections.sort(row);\n            res.add(row);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        List<Integer> row = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            row.add(lst.get(i).get(x));\n        }\n        result.add(row);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> res = new ArrayList<>();\n        List<Integer> row = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            row.add(lst.get(i).get(x));\n        }\n        res.add(row);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> res = new ArrayList<>();\n        List<Integer> row = new ArrayList<>();\n        int i = 0;\n        for (List<Integer> l : lst) {\n            row.add(l.get(i));\n            i++;\n        }\n        Collections.sort(row);\n        int j = 0;\n        for (List<Integer> l : lst) {\n            if (l.get(j) == x) {\n                res.add(row);\n            }\n            j++;\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        List<Integer> row = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            row.add(lst.get(i).get(x));\n        }\n        result.add(row);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        List<Integer> row = new ArrayList<>();\n        row.add(x);\n        result.add(row);\n        for (int i = 0; i < lst.size(); i++) {\n            row = new ArrayList<>();\n            row.add(i);\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                row.add(lst.get(i).get(j));\n            }\n            result.add(row);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        // Write your code here\n        List<List<Integer>> result = new ArrayList<>();\n        List<Integer> row = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            row.add(lst.get(i).get(x));\n        }\n        result.add(row);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        // Write your code here\n        List<List<Integer>> result = new ArrayList<>();\n        List<Integer> temp = new ArrayList<>();\n        for (List<Integer> row : lst) {\n            for (int i = 0; i < row.size(); i++) {\n                if (row.get(i) == x) {\n                    temp.add(i);\n                }\n            }\n            result.add(temp);\n            temp = new ArrayList<>();\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> res = new ArrayList<>();\n        List<Integer> row = new ArrayList<>();\n        int i = 0;\n        for (List<Integer> l : lst) {\n            row.add(l.get(i));\n            i++;\n        }\n        Collections.sort(row);\n        int j = 0;\n        for (List<Integer> l : lst) {\n            if (l.get(i) == x) {\n                res.add(row);\n                break;\n            }\n            j++;\n            i++;\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        // Write your code here\n        List<List<Integer>> result = new ArrayList<>();\n        List<Integer> row = new ArrayList<>();\n        List<Integer> col = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            row = lst.get(i);\n            for (int j = 0; j < row.size(); j++) {\n                col.add(row.get(j));\n            }\n            Collections.sort(col);\n            row.clear();\n            row.addAll(col);\n            result.add(row);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> res = new ArrayList<>();\n        List<Integer> row = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            row.add(lst.get(i).get(x));\n        }\n        row.sort(Comparator.naturalOrder());\n        res.add(row);\n        for (int i = 0; i < lst.size(); i++) {\n            row.clear();\n            for (int j = 0; j < lst.get(i).size(); j++) {\n                if (lst.get(i).get(j) == x) {\n                    row.add(i);\n                }\n            }\n            row.sort(Comparator.naturalOrder());\n            res.add(row);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> res = new ArrayList<>();\n        List<Integer> row = new ArrayList<>();\n        int i = 0;\n        for (List<Integer> l : lst) {\n            row.add(l.get(i));\n            i++;\n        }\n        Collections.sort(row);\n        for (int j = 0; j < row.size(); j++) {\n            if (row.get(j) == x) {\n                res.add(new ArrayList<>(Arrays.asList(j, row.get(j))));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> res = new ArrayList<>();\n        List<Integer> row = new ArrayList<>();\n        int row_size = lst.size();\n        int col_size = lst.get(0).size();\n        int i = 0;\n        while (i < row_size) {\n            int j = 0;\n            while (j < col_size) {\n                if (lst.get(i).get(j) == x) {\n                    row.add(j);\n                }\n                j++;\n            }\n            row.sort(Collections.reverseOrder());\n            res.add(row);\n            row = new ArrayList<>();\n            i++;\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> res = new ArrayList<>();\n        List<Integer> row = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            row.add(lst.get(i).get(0));\n        }\n        Collections.sort(row);\n        for (int i = 0; i < row.size(); i++) {\n            if (row.get(i) == x) {\n                res.add(lst.get(i));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        // Write your code here\n        List<List<Integer>> result = new ArrayList<>();\n        int row = 0;\n        int col = 0;\n        for (List<Integer> rowList : lst) {\n            if (rowList.get(col) == x) {\n                result.add(new ArrayList<Integer>(Arrays.asList(row, col)));\n            }\n            col++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        // Write your code here\n        List<List<Integer>> result = new ArrayList<>();\n        List<Integer> row = new ArrayList<>();\n        for (List<Integer> l : lst) {\n            row.add(l.get(x));\n        }\n        result.add(row);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        List<Integer> row = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            row.add(lst.get(i).get(x));\n        }\n        row.sort(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                return o1.compareTo(o2);\n            }\n        });\n        result.add(row);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2] ...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n        List<List<Integer>> result = new ArrayList<>();\n        if (lst == null || lst.isEmpty()) {\n            return result;\n        }\n        List<Integer> row = lst.get(0);\n        int rowSize = row.size();\n        int colSize = lst.size();\n        int rowStart = 0;\n        int colStart = 0;\n        int rowEnd = rowSize - 1;\n        int colEnd = colSize - 1;\n        while (rowStart <= rowEnd && colStart <= colEnd) {\n            if (row.get(rowStart) == x) {\n                result.add(new ArrayList<>(Arrays.asList(rowStart, colStart)));\n            }\n            if (row.get(rowEnd) == x) {\n                result.add(new ArrayList<>(Arrays.asList(rowEnd, colEnd)));\n            }\n            if (col.get(colStart) == x) {\n                result.add(new ArrayList<>(Arrays.asList(rowStart, colStart)));\n            }\n            if (col.get(colEnd) == x) {\n                result.add(new ArrayList<>(Arrays.asList(rowEnd, colEnd)));\n            }\n            rowStart++;\n            rowEnd--;\n            colStart++;\n            colEnd--;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        // write your code here\n        List<Integer> result = new ArrayList<Integer>();\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n            if (sum % 2 == 0) {\n                result.add(array.get(i));\n            } else {\n                result.add(array.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n        if (sum % 2 == 0) {\n            return array;\n        }\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < array.size(); i++) {\n            if (sum % 2 == 1) {\n                result.add(array.get(i));\n            }\n            sum -= array.get(i);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        if (array == null || array.size() == 0) {\n            return array;\n        }\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n        if (sum % 2 == 0) {\n            for (int i = 0; i < array.size(); i++) {\n                result.add(array.get(i));\n            }\n        } else {\n            for (int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        // write your code here\n        int sum = 0;\n        int[] arr = new int[array.size()];\n        for(int i = 0; i < array.size(); i++) {\n            arr[i] = array.get(i);\n            sum += array.get(i);\n        }\n        if(sum % 2 == 0) {\n            return array;\n        }\n        List<Integer> result = new ArrayList<>();\n        for(int i = 0; i < array.size(); i++) {\n            result.add(arr[i]);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        for(int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n        if(sum % 2 == 0) {\n            for(int i = 0; i < array.size(); i++) {\n                result.add(array.get(i));\n            }\n        } else {\n            for(int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        if(array == null || array.size() == 0) {\n            return array;\n        }\n        int sum = 0;\n        for(int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n        if(sum % 2 == 0) {\n            return array;\n        }\n        List<Integer> result = new ArrayList<>();\n        for(int i = 0; i < array.size(); i++) {\n            result.add(array.get(i));\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        if (array == null || array.size() == 0) {\n            return array;\n        }\n\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n\n        if (sum % 2 == 0) {\n            return array;\n        }\n\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < array.size(); i++) {\n            if (sum % 2 == 0) {\n                result.add(array.get(i));\n            } else {\n                result.add(array.get(array.size() - 1 - i));\n            }\n        }\n\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n        if (sum % 2 == 0) {\n            for (int i = 0; i < array.size(); i++) {\n                result.add(array.get(i));\n            }\n        } else {\n            for (int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        if (array == null || array.size() == 0) {\n            return array;\n        }\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n        if (sum % 2 == 0) {\n            return array;\n        }\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < array.size(); i++) {\n            result.add(array.get(i));\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        // Write your code here\n        if (array.size() == 0) return array;\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n        if (sum % 2 == 0) {\n            return array;\n        }\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < array.size(); i++) {\n            if (sum % 2 == 0) {\n                result.add(array.get(i));\n            } else {\n                result.add(array.get(array.size() - 1 - i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        if (array == null || array.size() == 0) {\n            return array;\n        }\n\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n        if (sum % 2 == 0) {\n            for (int i = 0; i < array.size(); i++) {\n                result.add(array.get(i));\n            }\n        } else {\n            for (int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        if (array == null || array.size() == 0) {\n            return array;\n        }\n\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n\n        if (sum % 2 == 0) {\n            return array;\n        }\n\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < array.size(); i++) {\n            if (array.get(i) % 2 == 0) {\n                result.add(array.get(i));\n            }\n        }\n\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        // Write your code here\n        int sum = 0;\n        for(int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n        if(sum % 2 == 0) {\n            return array;\n        } else {\n            List<Integer> result = new ArrayList<>();\n            for(int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n            }\n            return result;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n        if (sum % 2 == 1) {\n            for (int i = 0; i < array.size(); i++) {\n                result.add(array.get(i));\n            }\n        } else {\n            for (int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n        if (sum % 2 == 1) {\n            for (int i = 0; i < array.size(); i++) {\n                result.add(array.get(i));\n            }\n        } else {\n            for (int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        // write your code here\n        if (array == null || array.size() == 0) return array;\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n        if (sum % 2 == 0) {\n            for (int i = 0; i < array.size(); i++) {\n                result.add(array.get(i));\n            }\n        } else {\n            for (int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        List<Integer> result = new ArrayList<Integer>();\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n            if (sum % 2 == 0) {\n                result.add(array.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n        if (sum % 2 == 1) {\n            for (int i = 0; i < array.size(); i++) {\n                result.add(array.get(i));\n            }\n        } else {\n            for (int i = array.size() - 1; i >= 0; i--) {\n                result.add(array.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        if (array == null || array.size() == 0) {\n            return array;\n        }\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n        if (sum % 2 == 0) {\n            return array;\n        }\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < array.size(); i++) {\n            result.add(array.get(i));\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n        int sum = 0;\n        for (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n        }\n        if (sum % 2 == 0) {\n            return array;\n        }\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < array.size(); i++) {\n            result.add(array.get(i));\n        }\n        Collections.sort(result);\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] arr = s.toCharArray();\n        int n = arr.length;\n        int shift = 2 * n;\n        char[] rotated = new char[n];\n        for (int i = 0; i < n; i++) {\n            rotated[i] = arr[i + shift];\n        }\n        return new String(rotated);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] arr = s.toCharArray();\n        int len = arr.length;\n        int shift = 2;\n        int[] arr2 = new int[len];\n        for (int i = 0; i < len; i++) {\n            arr2[i] = arr[i];\n        }\n        for (int i = 0; i < len; i++) {\n            arr2[i] = arr2[i] + arr2[i + shift];\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < len; i++) {\n            sb.append(arr2[i]);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        String encrypted = \"\";\n        char[] arr = s.toCharArray();\n        for (int i = 0; i < arr.length; i++) {\n            char c = arr[i];\n            if (i % 2 == 0) {\n                c = (char) (c + 2);\n            } else {\n                c = (char) (c - 2);\n            }\n            encrypted += c;\n        }\n        return encrypted;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] arr = s.toCharArray();\n        char[] rotated = new char[arr.length];\n        int shift = 2;\n        for (int i = 0; i < arr.length; i++) {\n            rotated[i] = arr[i];\n        }\n        for (int i = 0; i < rotated.length; i++) {\n            rotated[i] = rotated[i + shift];\n        }\n        return new String(rotated);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] arr = s.toCharArray();\n        char[] rotated = new char[arr.length];\n        for (int i = 0; i < arr.length; i++) {\n            rotated[i] = arr[(i + 2) % arr.length];\n        }\n        return new String(rotated);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] arr = s.toCharArray();\n        char[] rotated = new char[arr.length];\n        for (int i = 0; i < arr.length; i++) {\n            rotated[i] = arr[(i + 2) % arr.length];\n        }\n        return String.valueOf(rotated);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] arr = s.toCharArray();\n        char[] rotated = new char[arr.length];\n        for (int i = 0; i < arr.length; i++) {\n            rotated[i] = arr[(i + 2) % arr.length];\n        }\n        return new String(rotated);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] arr = s.toCharArray();\n        char[] rotated = new char[arr.length];\n        for(int i = 0; i < arr.length; i++) {\n            rotated[i] = arr[(i+2)%arr.length];\n        }\n        return new String(rotated);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] arr = s.toCharArray();\n        int n = arr.length;\n        int k = 2;\n        for (int i = 0; i < n; i++) {\n            arr[i] = (char) (arr[i] + k);\n        }\n        return new String(arr);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] arr = s.toCharArray();\n        int n = arr.length;\n        char[] rotated = new char[n];\n        for (int i = 0; i < n; i++) {\n            rotated[i] = arr[(i + 2) % n];\n        }\n        return new String(rotated);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] arr = s.toCharArray();\n        int len = arr.length;\n        int shift = 2;\n        int[] arr2 = new int[len];\n        for(int i = 0; i < len; i++) {\n            arr2[i] = arr[i];\n        }\n        for(int i = 0; i < len; i++) {\n            arr2[i] = arr2[i] + arr2[i+shift];\n        }\n        String res = \"\";\n        for(int i = 0; i < len; i++) {\n            res = res + arr2[i];\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] arr = s.toCharArray();\n        int[] shift = {2, 2};\n        int[] count = {0, 0};\n        for (int i = 0; i < arr.length; i++) {\n            count[arr[i] - 'a']++;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (count[i] > 0) {\n                arr[i + shift[0]] = (char) ('a' + i);\n                count[i]--;\n            }\n        }\n        return new String(arr);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] arr = s.toCharArray();\n        char[] rotated = new char[arr.length];\n        for (int i = 0; i < arr.length; i++) {\n            rotated[i] = arr[(i + 2) % arr.length];\n        }\n        return new String(rotated);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] arr = s.toCharArray();\n        char[] rotated = new char[arr.length];\n        for (int i = 0; i < arr.length; i++) {\n            rotated[i] = arr[(i + 2) % arr.length];\n        }\n        return new String(rotated);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] arr = s.toCharArray();\n        int n = arr.length;\n        int shift = 2;\n        int[] arr2 = new int[n];\n        for(int i=0; i<n; i++) {\n            arr2[i] = arr[i];\n        }\n        for(int i=0; i<shift; i++) {\n            for(int j=0; j<n/2; j++) {\n                int temp = arr2[j];\n                arr2[j] = arr2[j+n/2];\n                arr2[j+n/2] = temp;\n            }\n        }\n        String ans = \"\";\n        for(int i=0; i<n; i++) {\n            ans += arr2[i];\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        String encrypted = \"\";\n        char[] arr = s.toCharArray();\n        for (int i = 0; i < arr.length; i++) {\n            if (i % 2 == 0) {\n                encrypted += arr[i];\n            } else {\n                encrypted += arr[i] + arr[i + 1];\n            }\n        }\n        return encrypted;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        String[] arr = s.toCharArray();\n        char[] rotated = new char[arr.length];\n        for (int i = 0; i < arr.length; i++) {\n            rotated[i] = arr[i];\n        }\n        char[] rotated2 = new char[rotated.length];\n        for (int i = 0; i < rotated.length; i++) {\n            rotated2[i] = rotated[i];\n        }\n        rotated2[rotated.length - 1] = rotated2[rotated.length - 2];\n        rotated2[rotated.length - 2] = rotated[0];\n        return String.valueOf(rotated2);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] arr = s.toCharArray();\n        int n = arr.length;\n        char[] rotated = new char[n];\n        for (int i = 0; i < n; i++) {\n            rotated[i] = arr[(i + 2) % n];\n        }\n        return new String(rotated);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] arr = s.toCharArray();\n        char[] arr2 = new char[arr.length];\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i1 = 0;\n        int j1 = 0;\n        int k1 = 0;\n        int l1 = 0;\n        int m1 = 0;\n        int n1 = 0;\n        int o1 = 0;\n        int p1 = 0;\n        int q1 = 0;\n        int r1 = 0;\n        int s1 = 0;\n        int t1 = 0;\n        int u1 = 0;\n        int v1 = 0;\n        int w1 = 0;\n        int x1 = 0;\n        int y1 = 0;\n        int z1 = 0;\n        int a1 = 0;\n        int b1 = 0;\n        int c1 = 0;\n        int d1 = 0;\n        int e1 = 0;\n        int f1 = 0;\n        int g1 = 0;\n        int h1 = 0;\n        int i2 = 0;\n        int j2 = 0;\n        int k2 = 0;\n        int l2 = 0;\n        int m2 = 0;\n        int n2 = 0;\n        int o2 = 0;\n        int p2 = 0;\n        int q2 = 0;\n        int r2 = 0;\n        int s2 = 0;\n        int t2 = 0;\n        int u2 = 0;\n        int v2 = 0;\n        int w2 = 0;\n        int x2 = 0;\n        int y2 = 0;\n        int z2 = 0;\n        int a2 = 0;\n        int b2 = 0;\n        int c2 = 0;\n        int d2 = 0;\n        int e2 = 0;\n        int f2 = 0;\n        int g2 = 0;\n        int h2 = 0;\n        int i3 = 0;\n        int j3 = 0;\n        int k3 = 0;\n        int l3 = 0;\n        int m3 = 0;\n        int n3 = 0;\n        int o3 = 0;\n        int p3 = 0;\n        int q3 = 0;\n        int r3 = 0;\n        int s3 = 0;\n        int t3 = 0;\n        int u3 = 0;\n        int v3 = 0;\n        int w3 = 0;\n        int x3 = 0;\n        int y3 = 0;\n        int z3 = 0;\n        int a3 = 0;\n        int b3 = 0;\n        int c3 = 0;\n        int d3 = 0;\n        int e3 = 0;\n        int f3 = 0;\n        int g3 = 0;\n        int h3 = 0;\n        int i4 = 0;\n        int j4 = 0;\n        int k4 = 0;\n        int l4 = 0;\n        int m4 = 0;\n        int n4 = 0;\n        int o4 = 0;\n        int p4 = 0;\n        int q4 = 0;\n        int r4 = 0;\n        int s4 = 0;\n        int t4 = 0;\n        int u4 = 0;\n        int v4 = 0;\n        int w4 = 0;\n        int x4 = 0;\n        int y4 = 0;\n        int z4 = 0;\n        int a4 = 0;\n        int b4 = 0;\n        int c4 = 0;\n        int d4 = 0;\n        int e4 = 0;\n        int f4 = 0;\n        int g4 = 0;\n        int h4 = 0;\n        int i5 = 0;\n        int j5 = 0;\n        int k5 = 0;\n        int l5 = 0;\n        int m5 = 0;\n        int n5 = 0;\n        int o5 = 0;\n        int p5 = 0;\n        int q5 = 0;\n        int r5 = 0;\n        int s5 = 0;\n        int t5 = 0;\n        int u5 = 0;\n        int v5 = 0;\n        int w5 = 0;\n        int x5 = 0;\n        int y5 = 0;\n        int z5 = 0;\n        int a5 = 0;\n        int b5 = 0;\n        int c5 = 0;\n        int d5 = 0;\n        int e5 = 0;\n        int f5 = 0;\n        int g5 = 0;\n        int h5 = 0;\n        int i6 = 0;\n        int j6 = 0;\n        int k6 = 0;\n        int l6 = 0;\n        int m6 = 0;\n        int n6 = 0;\n        int o6 = 0;\n        int p6 = 0;\n        int q6 = 0;\n        int r6 = 0;\n        int s6 = 0;\n        int t6 = 0;\n        int u6 = 0;\n        int v6 = 0;\n        int w6 = 0;\n        int x6 = 0;\n        int y6 = 0;\n        int z6 = 0;\n        int a6 = 0;\n        int b6 = 0;\n        int c6 = 0;\n        int d6 = 0;\n        int e6 = 0;\n        int f6 = 0;\n        int g6 = 0;\n        int h6 = 0;\n        int i7 = 0;\n        int j7 = 0;\n        int k7 = 0;\n        int l7 = 0;\n        int m7 = 0;\n        int n7 = 0;\n        int o7 = 0;\n        int p7 = 0;\n        int q7 = 0;\n        int r7 = 0;\n        int s7 = 0;\n        int t7 = 0;\n        int u7 = 0;\n        int v7 = 0;\n        int w7 = 0;\n        int x7 = 0;\n        int y7 = 0;\n        int z7 = 0;\n        int a7 = 0;\n        int b7 = 0;\n        int c7 = 0;\n        int d7 = 0;\n        int e7 = 0;\n        int f7 = 0;\n        int g7 = 0;\n        int h7 = 0;\n        int i8 = 0;\n        int j8 = 0;\n        int k8 = 0;\n        int l8 = 0;\n        int m8 = 0;\n        int n8 = 0;\n        int o8 = 0;\n        int p8 = 0;\n        int q8 = 0;\n        int r8 = 0;\n        int s8 = 0;\n        int t8 = 0;\n        int u8 = 0;\n        int v8 = 0;\n        int w8 = 0;\n        int x8 = 0;\n        int y8 = 0;\n        int z8 = 0;", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n        char[] arr = s.toCharArray();\n        char[] rotated = new char[arr.length];\n        int i = 0;\n        int j = 0;\n        while(i < arr.length) {\n            rotated[j] = arr[i];\n            j++;\n            if(j == arr.length) {\n                j = 0;\n            }\n            i++;\n        }\n        return String.valueOf(rotated);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return Optional.empty();\n        }\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        return Optional.of(max);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n        Collections.sort(lst);\n        return Optional.of(lst.get(1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n        Collections.sort(lst);\n        return Optional.of(lst.get(1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n        Collections.sort(lst);\n        return Optional.of(lst.get(1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n\n        Collections.sort(lst);\n        return Optional.of(lst.get(1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n        Collections.sort(lst);\n        return Optional.of(lst.get(1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return Optional.empty();\n        }\n        Collections.sort(lst);\n        return Optional.of(lst.get(1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return Optional.empty();\n        }\n        Collections.sort(lst);\n        return Optional.of(lst.get(1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n        Collections.sort(lst);\n        return Optional.of(lst.get(1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return Optional.empty();\n        }\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        if (min == max) {\n            return Optional.empty();\n        }\n        return Optional.of(max);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n        Collections.sort(lst);\n        return Optional.of(lst.get(1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n        Collections.sort(lst);\n        return Optional.of(lst.get(1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return Optional.empty();\n        }\n\n        Collections.sort(lst);\n\n        return Optional.of(lst.get(1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return Optional.empty();\n        }\n\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n\n        if (max == min) {\n            return Optional.empty();\n        }\n\n        return Optional.of(max);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return Optional.empty();\n        }\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        return Optional.of(max);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return Optional.empty();\n        }\n        Collections.sort(lst);\n        return Optional.of(lst.get(1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n        Collections.sort(lst);\n        return Optional.of(lst.get(1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return Optional.empty();\n        }\n        Collections.sort(lst);\n        return Optional.of(lst.get(1));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return Optional.empty();\n        }\n        if (lst.size() == 1) {\n            return Optional.of(lst.get(0));\n        }\n        int min = lst.get(0);\n        int max = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                min = lst.get(i);\n            }\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        return Optional.of(max);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n        if (lst.isEmpty()) {\n            return Optional.empty();\n        }\n        Collections.sort(lst);\n        return Optional.of(lst.get(1));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int boredoms = 0;\n        String[] words = S.split(\"\\\\s+\");\n        for (String word : words) {\n            if (word.equals(\"I\")) {\n                boredoms++;\n            }\n        }\n        return boredoms;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int boredoms = 0;\n        for (int i = 0; i < S.length(); i++) {\n            char c = S.charAt(i);\n            if (c == 'I') {\n                boredoms++;\n            }\n        }\n        return boredoms;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int boredom = 0;\n        for (int i = 0; i < S.length(); i++) {\n            if (S.charAt(i) == 'I') {\n                boredom++;\n            }\n        }\n        return boredom;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int boredoms = 0;\n        String[] words = S.split(\" \");\n        for (String word : words) {\n            if (word.equals(\"I\")) {\n                boredoms++;\n            }\n        }\n        return boredoms;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int count = 0;\n        StringTokenizer st = new StringTokenizer(S, \".,?!\");\n        while (st.hasMoreTokens()) {\n            String word = st.nextToken();\n            if (word.equals(\"I\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int bored = 0;\n        for (int i = 0; i < S.length(); i++) {\n            if (S.charAt(i) == 'I') {\n                bored++;\n            }\n        }\n        return bored;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int count = 0;\n        for (int i = 0; i < S.length(); i++) {\n            if (S.charAt(i) == 'I') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int count = 0;\n        StringTokenizer st = new StringTokenizer(S, \" .?!\");\n        while (st.hasMoreTokens()) {\n            String word = st.nextToken();\n            if (word.equals(\"I\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int boredoms = 0;\n        for (int i = 0; i < S.length(); i++) {\n            if (S.charAt(i) == 'I') {\n                boredoms++;\n            }\n        }\n        return boredoms;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int count = 0;\n        StringTokenizer st = new StringTokenizer(S, \".,?!\");\n        while (st.hasMoreTokens()) {\n            String word = st.nextToken();\n            if (word.equals(\"I\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int count = 0;\n        for (int i = 0; i < S.length(); i++) {\n            if (S.charAt(i) == 'I') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int count = 0;\n        for (int i = 0; i < S.length(); i++) {\n            if (S.charAt(i) == 'I') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int count = 0;\n        String[] words = S.split(\"\\\\s+\");\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].equals(\"I\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int count = 0;\n        StringTokenizer st = new StringTokenizer(S, \".,?!\");\n        while (st.hasMoreTokens()) {\n            String token = st.nextToken();\n            if (token.equals(\"I\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int count = 0;\n        for (int i = 0; i < S.length(); i++) {\n            if (S.charAt(i) == 'I') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int count = 0;\n        String[] words = S.split(\" \");\n        for (String word : words) {\n            if (word.equals(\"I\")) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int count = 0;\n        for (int i = 0; i < S.length(); i++) {\n            if (S.charAt(i) == 'I') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int boredoms = 0;\n        StringTokenizer st = new StringTokenizer(S, \".,?!\");\n        while (st.hasMoreTokens()) {\n            String token = st.nextToken();\n            if (token.equals(\"I\")) {\n                boredoms++;\n            }\n        }\n        return boredoms;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int count = 0;\n        for (int i = 0; i < S.length(); i++) {\n            if (S.charAt(i) == 'I') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n        int boredoms = 0;\n        for (int i = 0; i < S.length(); i++) {\n            char c = S.charAt(i);\n            if (c == 'I') {\n                boredoms++;\n            }\n        }\n        return boredoms;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        int xInt = (int) x;\n        int yInt = (int) y;\n        int zInt = (int) z;\n        int sum = xInt + yInt + zInt;\n        if (sum == xInt || sum == yInt || sum == zInt) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        int xInt = (int) x;\n        int yInt = (int) y;\n        int zInt = (int) z;\n\n        int sum = xInt + yInt + zInt;\n        return sum == xInt || sum == yInt || sum == zInt;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        int xInt = (int) x;\n        int yInt = (int) y;\n        int zInt = (int) z;\n        int sum = xInt + yInt + zInt;\n        if (xInt == sum && yInt == sum && zInt == sum) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        int xInt = (int) x;\n        int yInt = (int) y;\n        int zInt = (int) z;\n\n        int sum = xInt + yInt + zInt;\n\n        if (xInt == sum && yInt == sum && zInt == sum) {\n            return true;\n        }\n\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        int xInt = (int) x;\n        int yInt = (int) y;\n        int zInt = (int) z;\n        int sum = xInt + yInt + zInt;\n        if (xInt == sum && yInt == sum && zInt == sum) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        int a = (int) x;\n        int b = (int) y;\n        int c = (int) z;\n        int sum = a + b + c;\n        if (sum == a + b + c) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int xInt = (Integer) x;\n            int yInt = (Integer) y;\n            int zInt = (Integer) z;\n            return xInt + yInt == zInt;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        int xInt = (int) x;\n        int yInt = (int) y;\n        int zInt = (int) z;\n        int sum = xInt + yInt + zInt;\n        if (sum == xInt || sum == yInt || sum == zInt) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        // Write your code here\n        int xInt = (int) x;\n        int yInt = (int) y;\n        int zInt = (int) z;\n\n        int sum = xInt + yInt + zInt;\n        if (sum == xInt || sum == yInt || sum == zInt) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        int a = (int) x;\n        int b = (int) y;\n        int c = (int) z;\n        int sum = a + b + c;\n        if (sum == a + b + c) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        int a = (int) x;\n        int b = (int) y;\n        int c = (int) z;\n\n        int sum = a + b + c;\n        int diff = a - b;\n        int prod = a * b;\n\n        if (sum == diff + prod) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        int xInt = (int) x;\n        int yInt = (int) y;\n        int zInt = (int) z;\n\n        int sum = xInt + yInt + zInt;\n        int diff = xInt - yInt;\n        int prod = xInt * yInt;\n\n        if (sum == diff + prod) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int xInt = (int) x;\n            int yInt = (int) y;\n            int zInt = (int) z;\n            return xInt + yInt == zInt;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        int xInt = (int) x;\n        int yInt = (int) y;\n        int zInt = (int) z;\n        int sum = xInt + yInt + zInt;\n        if (sum == xInt || sum == yInt || sum == zInt) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        int xInt = (int)x;\n        int yInt = (int)y;\n        int zInt = (int)z;\n        int sum = xInt + yInt + zInt;\n        if (sum == xInt || sum == yInt || sum == zInt) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        int xInt = (int)x;\n        int yInt = (int)y;\n        int zInt = (int)z;\n        int sum = xInt + yInt + zInt;\n        if (sum == xInt || sum == yInt || sum == zInt) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            int sum = (int) x + (int) y;\n            return sum == (int) z;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        int a = (int) x;\n        int b = (int) y;\n        int c = (int) z;\n        int sum = a + b + c;\n        if (sum == a || sum == b || sum == c) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        int xInt = (int) x;\n        int yInt = (int) y;\n        int zInt = (int) z;\n        int sum = xInt + yInt + zInt;\n        if (sum == xInt || sum == yInt || sum == zInt) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n        // Write your code here\n        int xInt = (int) x;\n        int yInt = (int) y;\n        int zInt = (int) z;\n        int sum = xInt + yInt + zInt;\n        return (sum == xInt + yInt + zInt) && (xInt % 1 == 0) && (yInt % 1 == 0) && (zInt % 1 == 0);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        String result = \"\";\n        char[] messageChars = message.toCharArray();\n        for (int i = 0; i < messageChars.length; i++) {\n            char c = messageChars[i];\n            if (Character.isLetter(c)) {\n                char next = messageChars[i + 1];\n                if (Character.isUpperCase(next)) {\n                    result += Character.toLowerCase(c);\n                } else {\n                    result += Character.toUpperCase(c);\n                }\n            } else {\n                result += c;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        String encoded = \"\";\n        char[] messageArray = message.toCharArray();\n        for (int i = 0; i < messageArray.length; i++) {\n            char currentChar = messageArray[i];\n            if (Character.isLetter(currentChar)) {\n                char nextChar = messageArray[i + 1];\n                if (Character.isLetter(nextChar)) {\n                    char nextNextChar = messageArray[i + 2];\n                    if (Character.isLetter(nextNextChar)) {\n                        encoded += currentChar;\n                        i += 2;\n                    } else {\n                        encoded += Character.toLowerCase(currentChar);\n                        i++;\n                    }\n                } else {\n                    encoded += Character.toLowerCase(currentChar);\n                    i++;\n                }\n            } else {\n                encoded += currentChar;\n                i++;\n            }\n        }\n        return encoded;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        String encoded = \"\";\n        char[] messageArray = message.toCharArray();\n        for (int i = 0; i < messageArray.length; i++) {\n            char currentChar = messageArray[i];\n            if (Character.isLetter(currentChar)) {\n                char nextChar = messageArray[i + 1];\n                if (Character.isLetter(nextChar) && nextChar != currentChar) {\n                    encoded += Character.toLowerCase(currentChar);\n                    i++;\n                } else {\n                    encoded += currentChar;\n                }\n            } else {\n                encoded += currentChar;\n            }\n        }\n        return encoded;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        char[] messageArray = message.toCharArray();\n        char[] encodedArray = new char[messageArray.length];\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int aa = 0;\n        int ab = 0;\n        int ac = 0;\n        int ad = 0;\n        int ae = 0;\n        int af = 0;\n        int ag = 0;\n        int ah = 0;\n        int ai = 0;\n        int aj = 0;\n        int ak = 0;\n        int al = 0;\n        int am = 0;\n        int an = 0;\n        int ao = 0;\n        int ap = 0;\n        int aq = 0;\n        int ar = 0;\n        int as = 0;\n        int at = 0;\n        int au = 0;\n        int av = 0;\n        int aw = 0;\n        int ax = 0;\n        int ay = 0;\n        int az = 0;\n        int ba = 0;\n        int bb = 0;\n        int bc = 0;\n        int bd = 0;\n        int be = 0;\n        int bf = 0;\n        int bg = 0;\n        int bh = 0;\n        int bi = 0;\n        int bj = 0;\n        int bk = 0;\n        int bl = 0;\n        int bm = 0;\n        int bn = 0;\n        int bo = 0;\n        int bp = 0;\n        int bq = 0;\n        int br = 0;\n        int bs = 0;\n        int bt = 0;\n        int bu = 0;\n        int bv = 0;\n        int bw = 0;\n        int bx = 0;\n        int by = 0;\n        int bz = 0;\n        int ca = 0;\n        int cb = 0;\n        int cc = 0;\n        int cd = 0;\n        int ce = 0;\n        int cf = 0;\n        int cg = 0;\n        int ch = 0;\n        int ci = 0;\n        int cj = 0;\n        int ck = 0;\n        int cl = 0;\n        int cm = 0;\n        int cn = 0;\n        int co = 0;\n        int cp = 0;\n        int cq = 0;\n        int cr = 0;\n        int cs = 0;\n        int ct = 0;\n        int cu = 0;\n        int cv = 0;\n        int cw = 0;\n        int cx = 0;\n        int cy = 0;\n        int cz = 0;\n        int da = 0;\n        int db = 0;\n        int dc = 0;\n        int dd = 0;\n        int de = 0;\n        int df = 0;\n        int dg = 0;\n        int dh = 0;\n        int di = 0;\n        int dj = 0;\n        int dk = 0;\n        int dl = 0;\n        int dm = 0;\n        int dn = 0;\n        int do = 0;\n        int dp = 0;\n        int dq = 0;\n        int dr = 0;\n        int ds = 0;\n        int dt = 0;\n        int du = 0;\n        int dv = 0;\n        int dw = 0;\n        int dx = 0;\n        int dy = 0;\n        int dz = 0;\n        int ea = 0;\n        int eb = 0;\n        int ec = 0;\n        int ed = 0;\n        int ee = 0;\n        int ef = 0;\n        int eg = 0;\n        int eh = 0;\n        int ei = 0;\n        int ej = 0;\n        int ek = 0;\n        int el = 0;\n        int em = 0;\n        int en = 0;\n        int eo = 0;\n        int ep = 0;\n        int eq = 0;\n        int er = 0;\n        int es = 0;\n        int et = 0;\n        int eu = 0;\n        int ev = 0;\n        int ew = 0;\n        int ex = 0;\n        int ey = 0;\n        int ez = 0;\n        int fa = 0;\n        int fb = 0;\n        int fc = 0;\n        int fd = 0;\n        int fe = 0;\n        int ff = 0;\n        int fg = 0;\n        int fh = 0;\n        int fi = 0;\n        int fj = 0;\n        int fk = 0;\n        int fl = 0;\n        int fm = 0;\n        int fn = 0;\n        int fo = 0;\n        int fp = 0;\n        int fq = 0;\n        int fr = 0;\n        int fs = 0;\n        int ft = 0;\n        int fu = 0;\n        int fv = 0;\n        int fw = 0;\n        int fx = 0;\n        int fy = 0;\n        int fz = 0;\n        int ga = 0;\n        int gb = 0;\n        int gc = 0;\n        int gd = 0;\n        int ge = 0;\n        int gf = 0;\n        int gg = 0;\n        int gh = 0;\n        int gi = 0;\n        int gj = 0;\n        int gk = 0;\n        int gl = 0;\n        int gm = 0;\n        int gn = 0;\n        int go = 0;\n        int gp = 0;\n        int gq = 0;\n        int gr = 0;\n        int gs = 0;\n        int gt = 0;\n        int gu = 0;\n        int gv = 0;\n        int gw = 0;\n        int gx = 0;\n        int gy = 0;\n        int gz = 0;\n        int ha = 0;\n        int hb = 0;\n        int hc = 0;\n        int hd = 0;\n        int he = 0;\n        int hf = 0;\n        int hg = 0;\n        int hh = 0;\n        int hi = 0;\n        int hj = 0;\n        int hk = 0;\n        int hl = 0;\n        int hm = 0;\n        int hn = 0;\n        int ho = 0;\n        int hp = 0;\n        int hq = 0;\n        int hr = 0;\n        int hs = 0;\n        int ht = 0;\n        int hu = 0;\n        int hv = 0;\n        int hw = 0;\n        int hx = 0;\n        int hy = 0;\n        int hz = 0;\n        int ia = 0;\n        int ib = 0;\n        int ic = 0;\n        int id = 0;\n        int ie = 0;\n        int if = 0;\n        int ig = 0;\n        int ih = 0;\n        int ii = 0;\n        int ij = 0;\n        int ik = 0;\n        int il = 0;\n        int im = 0;\n        int in = 0;\n        int io = 0;\n        int ip = 0;\n        int iq = 0;\n        int ir = 0;\n        int is = 0;\n        int it = 0;\n        intiu = 0;\n        int iv = 0;\n        int iw = 0;\n        int ix = 0;\n        int iy = 0;", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        String result = \"\";\n        for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n            if (Character.isLetter(c)) {\n                result += Character.toLowerCase(c);\n            } else if (Character.isVowel(c)) {\n                result += c;\n                result += c;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        char[] messageArray = message.toCharArray();\n        char[] encodedArray = new char[messageArray.length];\n        for (int i = 0; i < messageArray.length; i++) {\n            if (messageArray[i] == 'a' || messageArray[i] == 'e' || messageArray[i] == 'i' || messageArray[i] == 'o' || messageArray[i] == 'u') {\n                encodedArray[i] = messageArray[i];\n                encodedArray[i + 1] = messageArray[i + 1];\n                encodedArray[i + 2] = messageArray[i + 2];\n                i += 2;\n            } else {\n                encodedArray[i] = messageArray[i];\n                encodedArray[i + 1] = messageArray[i + 1];\n                encodedArray[i + 2] = messageArray[i + 2];\n                i += 2;\n            }\n        }\n        return new String(encodedArray);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        String encoded = \"\";\n        char[] messageArray = message.toCharArray();\n        for (int i = 0; i < messageArray.length; i++) {\n            char currentChar = messageArray[i];\n            if (Character.isLetter(currentChar)) {\n                char nextChar = messageArray[i + 1];\n                if (Character.isLetter(nextChar)) {\n                    encoded += Character.toLowerCase(currentChar);\n                    encoded += Character.toLowerCase(nextChar);\n                    i++;\n                } else {\n                    encoded += Character.toLowerCase(currentChar);\n                }\n            } else {\n                encoded += currentChar;\n            }\n        }\n        return encoded;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        String encoded = \"\";\n        char[] messageArray = message.toCharArray();\n        for (int i = 0; i < messageArray.length; i++) {\n            if (Character.isLetter(messageArray[i])) {\n                char c = messageArray[i];\n                char next = messageArray[i + 1];\n                if (Character.isUpperCase(c) && Character.isLowerCase(next)) {\n                    encoded += Character.toLowerCase(c);\n                    i++;\n                } else if (Character.isLowerCase(c) && Character.isUpperCase(next)) {\n                    encoded += Character.toUpperCase(c);\n                    i++;\n                } else {\n                    encoded += c;\n                }\n            } else {\n                encoded += messageArray[i];\n            }\n        }\n        return encoded;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        String encoded = \"\";\n        char[] messageChars = message.toCharArray();\n        for (int i = 0; i < messageChars.length; i++) {\n            char c = messageChars[i];\n            if (c >= 'a' && c <= 'z') {\n                encoded += (char) (c + 2);\n            } else if (c >= 'A' && c <= 'Z') {\n                encoded += (char) (c - 2);\n            } else {\n                encoded += c;\n            }\n        }\n        return encoded;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        char[] messageArray = message.toCharArray();\n        char[] encodedArray = new char[messageArray.length];\n        for (int i = 0; i < messageArray.length; i++) {\n            char currentChar = messageArray[i];\n            if (currentChar == 'a' || currentChar == 'e' || currentChar == 'i' || currentChar == 'o' || currentChar == 'u') {\n                int nextCharIndex = i + 1;\n                if (nextCharIndex < messageArray.length) {\n                    char nextChar = messageArray[nextCharIndex];\n                    if (nextChar == 'a' || nextChar == 'e' || nextChar == 'i' || nextChar == 'o' || nextChar == 'u') {\n                        encodedArray[i] = nextChar;\n                        encodedArray[nextCharIndex] = currentChar;\n                    }\n                }\n            } else {\n                encodedArray[i] = currentChar;\n            }\n        }\n        return new String(encodedArray);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        String encoded = \"\";\n        char[] messageArray = message.toCharArray();\n        for (int i = 0; i < messageArray.length; i++) {\n            char currentChar = messageArray[i];\n            if (Character.isLetter(currentChar)) {\n                char nextChar = messageArray[i + 1];\n                if (Character.isLetter(nextChar) && nextChar != currentChar) {\n                    encoded += Character.toLowerCase(currentChar);\n                    i++;\n                } else {\n                    encoded += currentChar;\n                }\n            } else {\n                encoded += currentChar;\n            }\n        }\n        return encoded;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        String encoded = \"\";\n        String message_lower = message.toLowerCase();\n        for (int i = 0; i < message_lower.length(); i++) {\n            char c = message_lower.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                encoded += c;\n            } else {\n                encoded += (char) (c + 2);\n            }\n        }\n        return encoded;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        String encoded = \"\";\n        char[] messageArray = message.toCharArray();\n        for (int i = 0; i < messageArray.length; i++) {\n            char c = messageArray[i];\n            if (c >= 'a' && c <= 'z') {\n                encoded += (char) (c + 1);\n            } else if (c >= 'A' && c <= 'Z') {\n                encoded += (char) (c - 1);\n            } else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                encoded += (char) (c + 2);\n            } else {\n                encoded += c;\n            }\n        }\n        return encoded;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        String result = \"\";\n        char[] messageArray = message.toCharArray();\n        for (int i = 0; i < messageArray.length; i++) {\n            char currentChar = messageArray[i];\n            if (Character.isLetter(currentChar)) {\n                char nextChar = messageArray[i + 1];\n                if (Character.isLetter(nextChar) && nextChar != currentChar) {\n                    result += Character.toLowerCase(currentChar);\n                    i++;\n                } else {\n                    result += currentChar;\n                }\n            } else {\n                result += currentChar;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        String encoded = \"\";\n        char[] messageArray = message.toCharArray();\n        for (int i = 0; i < messageArray.length; i++) {\n            char currentChar = messageArray[i];\n            if (currentChar >= 'a' && currentChar <= 'z') {\n                encoded += (char) (currentChar + 1);\n            } else if (currentChar >= 'A' && currentChar <= 'Z') {\n                encoded += (char) (currentChar - 1);\n            } else if (currentChar == 'a' || currentChar == 'e' || currentChar == 'i' || currentChar == 'o' || currentChar == 'u') {\n                encoded += (char) (currentChar + 2);\n            } else {\n                encoded += currentChar;\n            }\n        }\n        return encoded;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        String encoded = \"\";\n        for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n            if (c >= 'a' && c <= 'z') {\n                encoded += (char) (c + 1);\n            } else if (c >= 'A' && c <= 'Z') {\n                encoded += (char) (c - 1);\n            } else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                encoded += (char) (c + 2);\n            } else {\n                encoded += c;\n            }\n        }\n        return encoded;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        String encoded = \"\";\n        for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n            if (Character.isLetter(c)) {\n                char next = message.charAt(i + 1);\n                if (Character.isUpperCase(next)) {\n                    encoded += Character.toLowerCase(c);\n                } else if (Character.isLowerCase(next)) {\n                    encoded += Character.toUpperCase(c);\n                } else {\n                    encoded += c;\n                }\n            } else {\n                encoded += c;\n            }\n        }\n        return encoded;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        String encoded = \"\";\n        for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n            if (c >= 'A' && c <= 'Z') {\n                encoded += (char) ((c - 'A' + 2) % 26 + 'A');\n            } else if (c >= 'a' && c <= 'z') {\n                encoded += (char) ((c - 'a' + 2) % 26 + 'a');\n            } else if (c == ' ') {\n                encoded += c;\n            } else {\n                encoded += c;\n            }\n        }\n        return encoded;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        String encoded = \"\";\n        char[] messageArray = message.toCharArray();\n        for (int i = 0; i < messageArray.length; i++) {\n            char c = messageArray[i];\n            if (c >= 'a' && c <= 'z') {\n                encoded += (char) (c + 1);\n            } else if (c >= 'A' && c <= 'Z') {\n                encoded += (char) (c - 1);\n            } else if (c == ' ') {\n                encoded += c;\n            }\n        }\n        return encoded;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n        String encoded = \"\";\n        for (int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n            if (Character.isLetter(c)) {\n                encoded += Character.toLowerCase(c);\n            } else if (Character.isVowel(c)) {\n                encoded += Character.toUpperCase(c);\n            }\n        }\n        return encoded;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if (num > max) {\n                max = num;\n            }\n            sum += num;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if (num > max) {\n                max = num;\n            }\n            sum += num;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if (num > max) {\n                max = num;\n            }\n            sum += num;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if(num > max) {\n                max = num;\n            }\n            sum += num;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if (num > max) {\n                max = num;\n            }\n            sum += num;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if (num > max) {\n                max = num;\n            }\n            sum += num;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = lst.get(0);\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if (num > max) {\n                max = num;\n            }\n            sum += num;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if (num > max) {\n                max = num;\n            }\n            sum += num;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if (num > max) {\n                max = num;\n            }\n            sum += num;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if (num > max) {\n                max = num;\n            }\n            sum += num;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if(num > max) {\n                max = num;\n            }\n            sum += num;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if (num > max) {\n                max = num;\n            }\n            sum += num;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = lst.get(0);\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if (num > max) {\n                max = num;\n            }\n            sum += num;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n            sum += lst.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if (num > max) {\n                max = num;\n            }\n            sum += num;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if (num > max) {\n                max = num;\n            }\n            sum += num;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if (num > max) {\n                max = num;\n            }\n            sum += num;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = lst.get(0);\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if (num > max) {\n                max = num;\n            }\n            sum += num;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n        int max = 0;\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            int num = lst.get(i);\n            if (num > max) {\n                max = num;\n            }\n            sum += num;\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Map.Entry<Object, Object> entry : dict.entrySet()) {\n            if (!(entry.getKey() instanceof String)) {\n                return false;\n            }\n            String key = (String) entry.getKey();\n            if (key.toLowerCase().equals(key) || key.toUpperCase().equals(key)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            String keyStr = (String) key;\n            if (keyStr.toLowerCase().equals(keyStr) || keyStr.toUpperCase().equals(keyStr)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Map.Entry<Object, Object> entry : dict.entrySet()) {\n            if (!(entry.getKey() instanceof String)) {\n                return false;\n            }\n            if (entry.getValue() instanceof String) {\n                if (((String)entry.getValue()).toLowerCase().equals(entry.getKey().toString())) {\n                    continue;\n                }\n            }\n            if (entry.getValue() instanceof Integer) {\n                if (((Integer)entry.getValue()).toString().toLowerCase().equals(entry.getKey().toString())) {\n                    continue;\n                }\n            }\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            String keyStr = (String) key;\n            if (keyStr.toLowerCase().equals(keyStr) || keyStr.toUpperCase().equals(keyStr)) {\n                continue;\n            }\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            if (((String) key).toLowerCase().equals(key) || ((String) key).toUpperCase().equals(key)) {\n                continue;\n            }\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            String keyStr = (String) key;\n            if (keyStr.toLowerCase().equals(keyStr) || keyStr.toUpperCase().equals(keyStr)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            String keyStr = (String) key;\n            if (keyStr.toLowerCase().equals(keyStr) || keyStr.toUpperCase().equals(keyStr)) {\n                continue;\n            }\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            if (dict.get(key).toString().toLowerCase().equals(key.toString()) ||\n                    dict.get(key).toString().toUpperCase().equals(key.toString())) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            String keyStr = (String) key;\n            if (keyStr.toLowerCase().equals(keyStr) || keyStr.toUpperCase().equals(keyStr)) {\n                continue;\n            }\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            if (((String)key).toLowerCase().equals(key) || ((String)key).toUpperCase().equals(key)) {\n                continue;\n            }\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Map.Entry<Object, Object> entry : dict.entrySet()) {\n            if (!(entry.getKey() instanceof String)) {\n                return false;\n            }\n            if (!(entry.getValue() instanceof String)) {\n                return false;\n            }\n            if (((String)entry.getKey()).toLowerCase().equals(entry.getKey()) ||\n                    ((String)entry.getKey()).toUpperCase().equals(entry.getKey())) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            String keyStr = (String) key;\n            if (keyStr.toLowerCase().equals(keyStr) || keyStr.toUpperCase().equals(keyStr)) {\n                continue;\n            }\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Map.Entry<Object, Object> entry : dict.entrySet()) {\n            if (!(entry.getKey() instanceof String)) {\n                return false;\n            }\n            if (entry.getValue() instanceof String) {\n                String key = (String) entry.getKey();\n                if (!key.toLowerCase().equals(key)) {\n                    return false;\n                }\n            } else {\n                String key = (String) entry.getKey();\n                if (!key.toUpperCase().equals(key)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            String keyStr = (String) key;\n            if (keyStr.toLowerCase().equals(keyStr) || keyStr.toUpperCase().equals(keyStr)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Map.Entry<Object, Object> entry : dict.entrySet()) {\n            if (!(entry.getKey() instanceof String)) {\n                return false;\n            }\n            if (!(entry.getValue() instanceof String)) {\n                return false;\n            }\n            if (((String) entry.getKey()).toLowerCase().equals(entry.getKey().toString()) ||\n                    ((String) entry.getKey()).toUpperCase().equals(entry.getKey().toString())) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            String keyStr = (String) key;\n            if (keyStr.toLowerCase().equals(keyStr) || keyStr.toUpperCase().equals(keyStr)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            String keyString = (String) key;\n            if (keyString.toLowerCase().equals(keyString) || keyString.toUpperCase().equals(keyString)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            if (((String) key).toLowerCase().equals(key)) {\n                return false;\n            }\n            if (((String) key).toUpperCase().equals(key)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Map.Entry<Object, Object> entry : dict.entrySet()) {\n            if (!(entry.getKey() instanceof String)) {\n                return false;\n            }\n            if (!(entry.getValue() instanceof String)) {\n                return false;\n            }\n            if (((String)entry.getKey()).toLowerCase().equals((String)entry.getValue())) {\n                return false;\n            }\n            if (((String)entry.getKey()).toUpperCase().equals((String)entry.getValue())) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n        if (dict.isEmpty()) {\n            return false;\n        }\n        for (Object key : dict.keySet()) {\n            if (!(key instanceof String)) {\n                return false;\n            }\n            String keyStr = (String) key;\n            if (keyStr.toLowerCase().equals(keyStr) || keyStr.toUpperCase().equals(keyStr)) {\n                continue;\n            }\n            return false;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        for(int i = 2; i <= n; i++) {\n            if(isPrime(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n\n    /**\n    Returns true if the given number is prime.\n    */\n    public boolean isPrime(int n) {\n        if(n == 1 || n == 0) {\n            return false;\n        }\n        for(int i = 2; i <= Math.sqrt(n); i++) {\n            if(n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n\n    /**\n    Returns true if the given number is prime.\n    */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n\n    /**\n    Returns true if the given number is prime.\n    */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n\n    private boolean isPrime(int n) {\n        if (n == 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> primeNumbers = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                primeNumbers.add(i);\n            }\n        }\n        return primeNumbers;\n    }\n\n    /**\n    Check if a number is prime or not\n    */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n\n    /**\n    Returns true if the given number is prime.\n    */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> primeNumbers = new ArrayList<>();\n        for(int i = 2; i <= n; i++) {\n            if(isPrime(i)) {\n                primeNumbers.add(i);\n            }\n        }\n        return primeNumbers;\n    }\n\n    /**\n    Check if a number is prime or not.\n    @param n number to check\n    @return true if the number is prime, false otherwise\n    */\n    public boolean isPrime(int n) {\n        if(n <= 1) {\n            return false;\n        }\n        if(n % 2 == 0) {\n            return false;\n        }\n        for(int i = 3; i <= Math.sqrt(n); i += 2) {\n            if(n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> primeNumbers = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                primeNumbers.add(i);\n            }\n        }\n        return primeNumbers;\n    }\n\n    /**\n    Returns true if n is a prime number.\n    */\n    public boolean isPrime(int n) {\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> primeNumbers = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                primeNumbers.add(i);\n            }\n        }\n        return primeNumbers;\n    }\n\n    /**\n    Returns true if the given number is prime.\n    */\n    public boolean isPrime(int n) {\n        if (n == 1) {\n            return false;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n\n    /**\n    Returns true if the given number is prime.\n    */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> primeNumbers = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                primeNumbers.add(i);\n            }\n        }\n        return primeNumbers;\n    }\n\n    /**\n    Check if a number is prime or not.\n    */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> primeNumbers = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                primeNumbers.add(i);\n            }\n        }\n        return primeNumbers;\n    }\n\n    /**\n    Returns true if the given number is prime.\n    */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n == 2) {\n            return true;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n\n    /**\n    Check if a number is prime\n    */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> primeNumbers = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                primeNumbers.add(i);\n            }\n        }\n        return primeNumbers;\n    }\n\n    /**\n    Returns true if n is a prime number\n    */\n    public boolean isPrime(int n) {\n        if (n == 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> primeNumbers = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                primeNumbers.add(i);\n            }\n        }\n        return primeNumbers;\n    }\n\n    /**\n    Returns true if the given number is prime\n    */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n\n    /**\n    Returns true if the given number is prime.\n    */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> primeNumbers = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                primeNumbers.add(i);\n            }\n        }\n        return primeNumbers;\n    }\n\n    /**\n    Check if a number is prime or not\n    */\n    private boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> primeNumbers = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                primeNumbers.add(i);\n            }\n        }\n        return primeNumbers;\n    }\n\n    /**\n    Returns true if the given number is prime.\n    */\n    public boolean isPrime(int n) {\n        if (n == 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n\n    /**\n    Check if a number is prime or not.\n    */\n    public boolean isPrime(int n) {\n        if (n == 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n        List<Integer> primeNumbers = new ArrayList<Integer>();\n        for (int i = 2; i <= n; i++) {\n            if (isPrime(i)) {\n                primeNumbers.add(i);\n            }\n        }\n        return primeNumbers;\n    }\n\n    /**\n    Returns true if the given number is prime.\n    */\n    public boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        String sA = Integer.toString(a);\n        String sB = Integer.toString(b);\n        int lenA = sA.length();\n        int lenB = sB.length();\n        int len = lenA + lenB;\n        int[] arrA = new int[len];\n        int[] arrB = new int[len];\n        int[] arrC = new int[len];\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        while(i < lenA){\n            arrA[i] = Integer.parseInt(sA.substring(i, i+1));\n            i++;\n        }\n        while(j < lenB){\n            arrB[j] = Integer.parseInt(sB.substring(j, j+1));\n            j++;\n        }\n        for(i = 0; i < len; i++){\n            arrC[i] = arrA[i] * arrB[i];\n        }\n        int ans = 0;\n        for(i = 0; i < len; i++){\n            ans += arrC[i];\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int a_str = a + \"\";\n        int b_str = b + \"\";\n        int a_len = a_str.length();\n        int b_len = b_str.length();\n        int a_sum = 0;\n        int b_sum = 0;\n        int a_i = a_len - 1;\n        int b_i = b_len - 1;\n        int a_j = a_len - 1;\n        int b_j = b_len - 1;\n        int a_k = a_len - 1;\n        int b_k = b_len - 1;\n        int a_l = a_len - 1;\n        int b_l = b_len - 1;\n        int a_m = a_len - 1;\n        int b_m = b_len - 1;\n        int a_n = a_len - 1;\n        int b_n = b_len - 1;\n        int a_o = a_len - 1;\n        int b_o = b_len - 1;\n        int a_p = a_len - 1;\n        int b_p = b_len - 1;\n        int a_q = a_len - 1;\n        int b_q = b_len - 1;\n        int a_r = a_len - 1;\n        int b_r = b_len - 1;\n        int a_s = a_len - 1;\n        int b_s = b_len - 1;\n        int a_t = a_len - 1;\n        int b_t = b_len - 1;\n        int a_u = a_len - 1;\n        int b_u = b_len - 1;\n        int a_v = a_len - 1;\n        int b_v = b_len - 1;\n        int a_w = a_len - 1;\n        int b_w = b_len - 1;\n        int a_x = a_len - 1;\n        int b_x = b_len - 1;\n        int a_y = a_len - 1;\n        int b_y = b_len - 1;\n        int a_z = a_len - 1;\n        int b_z = b_len - 1;\n        int a_aa = a_len - 1;\n        int b_aa = b_len - 1;\n        int a_ab = a_len - 1;\n        int b_ab = b_len - 1;\n        int a_ac = a_len - 1;\n        int b_ac = b_len - 1;\n        int a_ad = a_len - 1;\n        int b_ad = b_len - 1;\n        int a_ae = a_len - 1;\n        int b_ae = b_len - 1;\n        int a_af = a_len - 1;\n        int b_af = b_len - 1;\n        int a_ag = a_len - 1;\n        int b_ag = b_len - 1;\n        int a_ah = a_len - 1;\n        int b_ah = b_len - 1;\n        int a_ai = a_len - 1;\n        int b_ai = b_len - 1;\n        int a_aj = a_len - 1;\n        int b_aj = b_len - 1;\n        int a_ak = a_len - 1;\n        int b_ak = b_len - 1;\n        int a_al = a_len - 1;\n        int b_al = b_len - 1;\n        int a_am = a_len - 1;\n        int b_am = b_len - 1;\n        int a_an = a_len - 1;\n        int b_an = b_len - 1;\n        int a_ao = a_len - 1;\n        int b_ao = b_len - 1;\n        int a_ap = a_len - 1;\n        int b_ap = b_len - 1;\n        int a_aq = a_len - 1;\n        int b_aq = b_len - 1;\n        int a_ar = a_len - 1;\n        int b_ar = b_len - 1;\n        int a_as = a_len - 1;\n        int b_as = b_len - 1;\n        int a_at = a_len - 1;\n        int b_at = b_len - 1;\n        int a_au = a_len - 1;\n        int b_au = b_len - 1;\n        int a_av = a_len - 1;\n        int b_av = b_len - 1;\n        int a_aw = a_len - 1;\n        int b_aw = b_len - 1;\n        int a_ax = a_len - 1;\n        int b_ax = b_len - 1;\n        int a_ay = a_len - 1;\n        int b_ay = b_len - 1;\n        int a_az = a_len - 1;\n        int b_az = b_len - 1;\n        int a_ba = a_len - 1;\n        int b_ba = b_len - 1;\n        int a_bb = a_len - 1;\n        int b_bb = b_len - 1;\n        int a_bc = a_len - 1;\n        int b_bc = b_len - 1;\n        int a_bd = a_len - 1;\n        int b_bd = b_len - 1;\n        int a_be = a_len - 1;\n        int b_be = b_len - 1;\n        int a_bf = a_len - 1;\n        int b_bf = b_len - 1;\n        int a_bg = a_len - 1;\n        int b_bg = b_len - 1;\n        int a_bh = a_len - 1;\n        int b_bh = b_len - 1;\n        int a_bi = a_len - 1;\n        int b_bi = b_len - 1;\n        int a_bj = a_len - 1;\n        int b_bj = b_len - 1;\n        int a_bk = a_len - 1;\n        int b_bk = b_len - 1;\n        int a_bl = a_len - 1;\n        int b_bl = b_len - 1;\n        int a_bm = a_len - 1;\n        int b_bm = b_len - 1;\n        int a_bn = a_len - 1;\n        int b_bn = b_len - 1;\n        int a_bo = a_len - 1;\n        int b_bo = b_len - 1;\n        int a_bp = a_len - 1;\n        int b_bp = b_len - 1;\n        int a_bq = a_len - 1;\n        int b_bq = b_len - 1;\n        int a_br = a_len - 1;\n        int b_br = b_len - 1;\n        int a_bs = a_len - 1;\n        int b_bs = b_len - 1;\n        int a_bt = a_len - 1;\n        int b_bt = b_len - 1;\n        int a_bu = a_len - 1;\n        int b_bu = b_len - 1;\n        int a_bv = a_len - 1;\n        int b_bv = b_len - 1;\n        int a_bw = a_len - 1;\n        int b_", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        String aString = Integer.toString(a);\n        String bString = Integer.toString(b);\n        int aLength = aString.length();\n        int bLength = bString.length();\n        int aIndex = aLength - 1;\n        int bIndex = bLength - 1;\n        int product = 0;\n        while (aIndex >= 0 && bIndex >= 0) {\n            int aDigit = Integer.parseInt(aString.charAt(aIndex--));\n            int bDigit = Integer.parseInt(bString.charAt(bIndex--));\n            product = product + (aDigit * bDigit);\n        }\n        while (aIndex >= 0) {\n            int aDigit = Integer.parseInt(aString.charAt(aIndex--));\n            product = product + aDigit;\n        }\n        while (bIndex >= 0) {\n            int bDigit = Integer.parseInt(bString.charAt(bIndex--));\n            product = product + bDigit;\n        }\n        return product;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int a1 = a/10;\n        int a2 = a%10;\n        int b1 = b/10;\n        int b2 = b%10;\n        int c1 = a1*b1;\n        int c2 = a2*b2;\n        int c3 = c1+c2;\n        int c4 = c3/10;\n        int c5 = c3%10;\n        int c6 = c4+c5;\n        return c6;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int result = 0;\n        int a_length = a.toString().length();\n        int b_length = b.toString().length();\n        int a_index = a_length - 1;\n        int b_index = b_length - 1;\n        while(a_index >= 0 && b_index >= 0){\n            int a_digit = a.toString().charAt(a_index) - '0';\n            int b_digit = b.toString().charAt(b_index) - '0';\n            int product = a_digit * b_digit;\n            result = result + product;\n            a_index--;\n            b_index--;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        String sA = Integer.toString(a);\n        String sB = Integer.toString(b);\n        int lenA = sA.length();\n        int lenB = sB.length();\n        int len = lenA + lenB;\n        int[] aArr = new int[len];\n        int[] bArr = new int[len];\n        int[] cArr = new int[len];\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        while(i < lenA && j < lenB) {\n            if(sA.charAt(i) == '0') {\n                aArr[k] = 0;\n                k++;\n            } else {\n                aArr[k] = sA.charAt(i) - '0';\n                k++;\n            }\n            if(sB.charAt(j) == '0') {\n                bArr[k] = 0;\n                k++;\n            } else {\n                bArr[k] = sB.charAt(j) - '0';\n                k++;\n            }\n            cArr[k] = aArr[k] * bArr[k];\n            k++;\n            i++;\n            j++;\n        }\n        while(i < lenA) {\n            if(sA.charAt(i) == '0') {\n                aArr[k] = 0;\n                k++;\n            } else {\n                aArr[k] = sA.charAt(i) - '0';\n                k++;\n            }\n            cArr[k] = aArr[k] * 0;\n            k++;\n            i++;\n        }\n        while(j < lenB) {\n            if(sB.charAt(j) == '0') {\n                bArr[k] = 0;\n                k++;\n            } else {\n                bArr[k] = sB.charAt(j) - '0';\n                k++;\n            }\n            cArr[k] = bArr[k] * 0;\n            k++;\n            j++;\n        }\n        int ans = 0;\n        for(int i = len - 1; i >= 0; i--) {\n            ans = ans + cArr[i] * Math.pow(10, i);\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        String sA = Integer.toString(a);\n        String sB = Integer.toString(b);\n        int lenA = sA.length();\n        int lenB = sB.length();\n        int len = lenA + lenB;\n        int[] arrA = new int[len];\n        int[] arrB = new int[len];\n        int[] arrC = new int[len];\n        int i = 0;\n        int j = 0;\n        while(i < lenA && j < lenB){\n            arrA[i] = sA.charAt(i) - '0';\n            arrB[j] = sB.charAt(j) - '0';\n            arrC[i + j] = arrA[i] * arrB[j];\n            i++;\n            j++;\n        }\n        if(i == lenA){\n            for(; j < lenB; j++){\n                arrC[i + j] = arrB[j];\n            }\n        }\n        else if(j == lenB){\n            for(; i < lenA; i++){\n                arrC[i + j] = arrA[i];\n            }\n        }\n        int sum = 0;\n        for(int k = 0; k < len; k++){\n            sum += arrC[k];\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int ans = 0;\n        int a_str = a + \"\";\n        int b_str = b + \"\";\n        int a_len = a_str.length();\n        int b_len = b_str.length();\n        int a_index = a_len - 1;\n        int b_index = b_len - 1;\n        while (a_index >= 0 && b_index >= 0) {\n            int a_digit = a_str.charAt(a_index) - '0';\n            int b_digit = b_str.charAt(b_index) - '0';\n            int product = a_digit * b_digit;\n            ans = ans + product;\n            a_index--;\n            b_index--;\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        String sA = Integer.toString(a);\n        String sB = Integer.toString(b);\n        StringBuilder sb = new StringBuilder();\n        for (int i = sA.length() - 1; i >= 0; i--) {\n            sb.append(sA.charAt(i));\n        }\n        for (int i = sB.length() - 1; i >= 0; i--) {\n            sb.append(sB.charAt(i));\n        }\n        return Integer.parseInt(sb.toString());\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int sum = 0;\n        int carry = 0;\n        while(a != 0) {\n            int digit = a % 10;\n            sum += digit * b;\n            carry += digit * b;\n            a /= 10;\n            b *= 10;\n        }\n        if(carry != 0) {\n            sum += carry;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        String sA = Integer.toString(a);\n        String sB = Integer.toString(b);\n        int lenA = sA.length();\n        int lenB = sB.length();\n        int len = lenA + lenB;\n        String s = \"\";\n        int i = 0;\n        while(i < len){\n            if(sA.charAt(i) == '0')\n                s += \"0\";\n            else\n                s += sA.charAt(i);\n            i++;\n        }\n        i = 0;\n        while(i < lenB){\n            if(sB.charAt(i) == '0')\n                s += \"0\";\n            else\n                s += sB.charAt(i);\n            i++;\n        }\n        int res = 0;\n        for(int j = 0; j < len; j++){\n            res += (s.charAt(j) - '0') * (sB.charAt(j) - '0');\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int product = 0;\n        int a_digits = a;\n        int b_digits = b;\n        while(a_digits != 0) {\n            int digit = a_digits % 10;\n            product = product * digit;\n            a_digits = a_digits / 10;\n        }\n        while(b_digits != 0) {\n            int digit = b_digits % 10;\n            product = product * digit;\n            b_digits = b_digits / 10;\n        }\n        return product;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        String aString = Integer.toString(a);\n        String bString = Integer.toString(b);\n        String result = \"\";\n        int i = aString.length() - 1;\n        int j = bString.length() - 1;\n        while (i >= 0 && j >= 0) {\n            int sum = 0;\n            int digit1 = aString.charAt(i) - '0';\n            int digit2 = bString.charAt(j) - '0';\n            sum = digit1 * digit2;\n            result = sum + result;\n            i--;\n            j--;\n        }\n        if (i >= 0) {\n            result = result + aString.substring(i + 1);\n        }\n        if (j >= 0) {\n            result = result + bString.substring(j + 1);\n        }\n        return Integer.parseInt(result);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int result = 0;\n        int a_digits = 0;\n        int b_digits = 0;\n        int a_index = a.length() - 1;\n        int b_index = b.length() - 1;\n        while(a_index >= 0 || b_index >= 0){\n            int digit = 0;\n            if(a_index >= 0){\n                digit += a.charAt(a_index) - '0';\n                a_index--;\n            }\n            if(b_index >= 0){\n                digit += b.charAt(b_index) - '0';\n                b_index--;\n            }\n            digit *= 10;\n            digit += result;\n            result = digit % 10;\n            a_digits = digit / 10;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int ans = 0;\n        int a1 = a;\n        int a2 = a;\n        int b1 = b;\n        int b2 = b;\n        while(a1 != 0) {\n            int rem = a1 % 10;\n            a1 /= 10;\n            ans = ans + (rem * b2);\n            b2 = b2 * 10;\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        String sA = Integer.toString(a);\n        String sB = Integer.toString(b);\n        int lenA = sA.length();\n        int lenB = sB.length();\n        int len = lenA + lenB;\n        StringBuilder sb = new StringBuilder(len);\n        for (int i = 0; i < lenA; i++) {\n            for (int j = 0; j < lenB; j++) {\n                sb.append(sA.charAt(i) * sB.charAt(j));\n            }\n        }\n        return Integer.parseInt(sb.toString());\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        String aStr = Integer.toString(a);\n        String bStr = Integer.toString(b);\n        int aLen = aStr.length();\n        int bLen = bStr.length();\n        int len = aLen + bLen;\n        char[] aChars = aStr.toCharArray();\n        char[] bChars = bStr.toCharArray();\n        int[] aArr = new int[aLen];\n        int[] bArr = new int[bLen];\n        for (int i = 0; i < aLen; i++) {\n            aArr[i] = aChars[i] - '0';\n        }\n        for (int i = 0; i < bLen; i++) {\n            bArr[i] = bChars[i] - '0';\n        }\n        int[] resArr = new int[len];\n        int carry = 0;\n        for (int i = aLen - 1; i >= 0; i--) {\n            int sum = aArr[i] * bArr[bLen - 1 - i] + carry;\n            carry = sum / 10;\n            resArr[len - 1 - i] = sum % 10;\n        }\n        int res = 0;\n        for (int i = 0; i < len; i++) {\n            res += resArr[i] * (10 - i);\n        }\n        if (carry == 1) {\n            res++;\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        String sA = Integer.toString(a);\n        String sB = Integer.toString(b);\n        String sC = \"\";\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int A = 0;\n        int B = 0;\n        int C = 0;\n        int D = 0;\n        int E = 0;\n        int F = 0;\n        int G = 0;\n        int H = 0;\n        int I = 0;\n        int J = 0;\n        int K = 0;\n        int L = 0;\n        int M = 0;\n        int N = 0;\n        int O = 0;\n        int P = 0;\n        int Q = 0;\n        int R = 0;\n        int S = 0;\n        int T = 0;\n        int U = 0;\n        int V = 0;\n        int W = 0;\n        int X = 0;\n        int Y = 0;\n        int Z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int A = 0;\n        int B = 0;\n        int C = 0;\n        int D = 0;\n        int E = 0;\n        int F = 0;\n        int G = 0;\n        int H = 0;\n        int I = 0;\n        int J = 0;\n        int K = 0;\n        int L = 0;\n        int M = 0;\n        int N = 0;\n        int O = 0;\n        int P = 0;\n        int Q = 0;\n        int R = 0;\n        int S = 0;\n        int T = 0;\n        int U = 0;\n        int V = 0;\n        int W = 0;\n        int X = 0;\n        int Y = 0;\n        int Z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int A = 0;\n        int B = 0;\n        int C = 0;\n        int D = 0;\n        int E = 0;\n        int F = 0;\n        int G = 0;\n        int H = 0;\n        int I = 0;\n        int J = 0;\n        int K = 0;\n        int L = 0;\n        int M = 0;\n        int N = 0;\n        int O = 0;\n        int P = 0;\n        int Q = 0;\n        int R = 0;\n        int S = 0;\n        int T = 0;\n        int U = 0;\n        int V = 0;\n        int W = 0;\n        int X = 0;\n        int Y = 0;\n        int Z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int A = 0;\n        int B = 0;\n        int C = 0;\n        int D = 0;\n        int E = 0;\n        int F = 0;\n        int G = 0;\n        int H = 0;\n        int I = 0;\n        int J = 0;\n        int K = 0;\n        int L = 0;\n        int M = 0;\n        int N = 0;\n        int O = 0;\n        int P = 0;\n        int Q = 0;\n        int R = 0;\n        int S = 0;\n        int T = 0;\n        int U = 0;\n        int V = 0;\n        int W = 0;\n        int X = 0;\n        int Y = 0;\n        int Z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int A = 0;\n        int B = 0;\n        int C = 0;\n        int D = 0;\n        int E = 0;\n        int F = 0;\n        int G = 0;\n        int H = 0;\n        int I = 0;\n        int J = 0;\n        int K = 0;\n        int L = 0;\n        int M = 0;\n        int N = 0;\n        int O = 0;\n        int P = 0;\n        int Q = 0;\n        int R = 0;\n        int S = 0;\n        int T = 0;\n        int U = 0;\n        int V = 0;\n        int W = 0;\n        int X = 0;\n        int Y = 0;\n        int Z = 0;", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int a_str = Integer.toString(a);\n        int b_str = Integer.toString(b);\n        int a_len = a_str.length();\n        int b_len = b_str.length();\n        int a_pos = a_len - 1;\n        int b_pos = b_len - 1;\n        int a_sum = 0;\n        int b_sum = 0;\n        int a_prod = 1;\n        int b_prod = 1;\n        while(a_pos >= 0 && b_pos >= 0) {\n            int a_digit = a_str.charAt(a_pos) - '0';\n            int b_digit = b_str.charAt(b_pos) - '0';\n            int sum = a_digit * b_digit;\n            a_sum += sum;\n            a_prod *= a_digit;\n            b_sum += sum;\n            b_prod *= b_digit;\n            a_pos--;\n            b_pos--;\n        }\n        while(a_pos >= 0) {\n            int a_digit = a_str.charAt(a_pos) - '0';\n            int sum = a_digit * b_prod;\n            a_sum += sum;\n            a_prod *= a_digit;\n            a_pos--;\n        }\n        while(b_pos >= 0) {\n            int b_digit = b_str.charAt(b_pos) - '0';\n            int sum = a_prod * b_digit;\n            b_sum += sum;\n            b_prod *= b_digit;\n            b_pos--;\n        }\n        int result = a_sum + b_sum;\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n        int a_digits = a;\n        int b_digits = b;\n        int product = 0;\n        while (a_digits != 0) {\n            int digit = a_digits % 10;\n            product = product * digit;\n            a_digits = a_digits / 10;\n        }\n        while (b_digits != 0) {\n            int digit = b_digits % 10;\n            product = product * digit;\n            b_digits = b_digits / 10;\n        }\n        return product;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0 && s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0 && s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0 && s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0 && s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0 && s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0 && s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0) {\n                if (s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U') {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for(int i = 0; i < s.length(); i++) {\n            if(i % 2 == 0) {\n                if(s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U') {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0) {\n                if (s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U') {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0) {\n                if (s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U') {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0 && s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0 && s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0 && s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0 && s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0 && s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0) {\n                if (s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U') {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0) {\n                if (s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U') {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0 && s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0 && s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U') {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (i % 2 == 0 && s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U') {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        String str = value.trim();\n        if (str.length() == 0) {\n            return 0;\n        }\n        int len = str.length();\n        int i = 0;\n        while (i < len) {\n            if (str.charAt(i) >= 'A' && str.charAt(i) <= 'Z') {\n                return i;\n            }\n            i++;\n        }\n        return len;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int closest = 0;\n        int diff = 0;\n        int count = 0;\n        for (int i = 0; i < value.length(); i++) {\n            char c = value.charAt(i);\n            if (c >= '0' && c <= '9') {\n                diff = c - '0';\n                count++;\n            } else {\n                closest = diff;\n                diff = 0;\n                count = 1;\n            }\n        }\n        return closest + count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        // Write your code here\n        int closest = 0;\n        int diff = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i1 = 0;\n        int i2 = 0;\n        int j1 = 0;\n        int j2 = 0;\n        int k1 = 0;\n        int k2 = 0;\n        int l1 = 0;\n        int l2 = 0;\n        int m1 = 0;\n        int m2 = 0;\n        int n1 = 0;\n        int n2 = 0;\n        int o1 = 0;\n        int o2 = 0;\n        int p1 = 0;\n        int p2 = 0;\n        int q1 = 0;\n        int q2 = 0;\n        int r1 = 0;\n        int r2 = 0;\n        int s1 = 0;\n        int s2 = 0;\n        int t1 = 0;\n        int t2 = 0;\n        int u1 = 0;\n        int u2 = 0;\n        int v1 = 0;\n        int v2 = 0;\n        int w1 = 0;\n        int w2 = 0;\n        int x1 = 0;\n        int x2 = 0;\n        int y1 = 0;\n        int y2 = 0;\n        int z1 = 0;\n        int z2 = 0;\n        int a1 = 0;\n        int a2 = 0;\n        int b1 = 0;\n        int b2 = 0;\n        int c1 = 0;\n        int c2 = 0;\n        int d1 = 0;\n        int d2 = 0;\n        int e1 = 0;\n        int e2 = 0;\n        int f1 = 0;\n        int f2 = 0;\n        int g1 = 0;\n        int g2 = 0;\n        int h1 = 0;\n        int h2 = 0;\n        int i3 = 0;\n        int i4 = 0;\n        int j3 = 0;\n        int j4 = 0;\n        int k3 = 0;\n        int k4 = 0;\n        int l3 = 0;\n        int l4 = 0;\n        int m3 = 0;\n        int m4 = 0;\n        int n3 = 0;\n        int n4 = 0;\n        int o3 = 0;\n        int o4 = 0;\n        int p3 = 0;\n        int p4 = 0;\n        int q3 = 0;\n        int q4 = 0;\n        int r3 = 0;\n        int r4 = 0;\n        int s3 = 0;\n        int s4 = 0;\n        int t3 = 0;\n        int t4 = 0;\n        int u3 = 0;\n        int u4 = 0;\n        int v3 = 0;\n        int v4 = 0;\n        int w3 = 0;\n        int w4 = 0;\n        int x3 = 0;\n        int x4 = 0;\n        int y3 = 0;\n        int y4 = 0;\n        int z3 = 0;\n        int z4 = 0;\n        int a3 = 0;\n        int a4 = 0;\n        int b3 = 0;\n        int b4 = 0;\n        int c3 = 0;\n        int c4 = 0;\n        int d3 = 0;\n        int d4 = 0;\n        int e3 = 0;\n        int e4 = 0;\n        int f3 = 0;\n        int f4 = 0;\n        int g3 = 0;\n        int g4 = 0;\n        int h3 = 0;\n        int h4 = 0;\n        int i5 = 0;\n        int i6 = 0;\n        int j5 = 0;\n        int j6 = 0;\n        int k5 = 0;\n        int k6 = 0;\n        int l5 = 0;\n        int l6 = 0;\n        int m5 = 0;\n        int m6 = 0;\n        int n5 = 0;\n        int n6 = 0;\n        int o5 = 0;\n        int o6 = 0;\n        int p5 = 0;\n        int p6 = 0;\n        int q5 = 0;\n        int q6 = 0;\n        int r5 = 0;\n        int r6 = 0;\n        int s5 = 0;\n        int s6 = 0;\n        int t5 = 0;\n        int t6 = 0;\n        int u5 = 0;\n        int u6 = 0;\n        int v5 = 0;\n        int v6 = 0;\n        int w5 = 0;\n        int w6 = 0;\n        int x5 = 0;\n        int x6 = 0;\n        int y5 = 0;\n        int y6 = 0;\n        int z5 = 0;\n        int z6 = 0;\n        int a5 = 0;\n        int a6 = 0;\n        int b5 = 0;\n        int b6 = 0;\n        int c5 = 0;\n        int c6 = 0;\n        int d5 = 0;\n        int d6 = 0;\n        int e5 = 0;\n        int e6 = 0;\n        int f5 = 0;\n        int f6 = 0;\n        int g5 = 0;\n        int g6 = 0;\n        int h5 = 0;\n        int h6 = 0;\n        int i7 = 0;\n        int i8 = 0;\n        int j7 = 0;\n        int j8 = 0;\n        int k7 = 0;\n        int k8 = 0;\n        int l7 = 0;\n        int l8 = 0;\n        int m7 = 0;\n        int m8 = 0;\n        int n7 = 0;\n        int n8 = 0;\n        int o7 = 0;\n        int o8 = 0;\n        int p7 = 0;\n        int p8 = 0;\n        int q7 = 0;\n        int q8 = 0;\n        int r7 = 0;\n        int r8 = 0;\n        int s7 = 0;\n        int s8 = 0;\n        int t7 = 0;\n        int t8 = 0;\n        int u7 = 0;\n        int u8 = 0;\n        int v7 = 0;\n        int v8 = 0;\n        int w7 = 0;\n        int w8 = 0;\n        int x7 = 0;\n        int x8 =", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int upper = 0;\n        int lower = 0;\n        int count = 0;\n        int index = 0;\n        int length = value.length();\n        int value_int = Integer.parseInt(value);\n        int value_int_lower = value_int - 1;\n        int value_int_upper = value_int + 1;\n        int value_int_lower_lower = value_int_lower - 1;\n        int value_int_lower_upper = value_int_lower + 1;\n        int value_int_upper_lower = value_int_upper - 1;\n        int value_int_upper_upper = value_int_upper + 1;\n        int value_int_lower_lower_lower = value_int_lower_lower - 1;\n        int value_int_lower_lower_upper = value_int_lower_lower + 1;\n        int value_int_lower_upper_lower = value_int_lower_upper - 1;\n        int value_int_lower_upper_upper = value_int_lower_upper + 1;\n        int value_int_upper_lower_lower = value_int_upper_lower - 1;\n        int value_int_upper_lower_upper = value_int_upper_lower + 1;\n        int value_int_upper_upper_lower = value_int_upper_upper - 1;\n        int value_int_upper_upper_upper = value_int_upper_upper + 1;\n\n        if (value_int == 0) {\n            return 0;\n        }\n        if (value_int == 1) {\n            return 1;\n        }\n        if (value_int == 2) {\n            return 2;\n        }\n        if (value_int == 3) {\n            return 3;\n        }\n        if (value_int == 4) {\n            return 4;\n        }\n        if (value_int == 5) {\n            return 5;\n        }\n        if (value_int == 6) {\n            return 6;\n        }\n        if (value_int == 7) {\n            return 7;\n        }\n        if (value_int == 8) {\n            return 8;\n        }\n        if (value_int == 9) {\n            return 9;\n        }\n        if (value_int == 10) {\n            return 10;\n        }\n        if (value_int == 11) {\n            return 11;\n        }\n        if (value_int == 12) {\n            return 12;\n        }\n        if (value_int == 13) {\n            return 13;\n        }\n        if (value_int == 14) {\n            return 14;\n        }\n        if (value_int == 15) {\n            return 15;\n        }\n        if (value_int == 16) {\n            return 16;\n        }\n        if (value_int == 17) {\n            return 17;\n        }\n        if (value_int == 18) {\n            return 18;\n        }\n        if (value_int == 19) {\n            return 19;\n        }\n        if (value_int == 20) {\n            return 20;\n        }\n        if (value_int == 21) {\n            return 21;\n        }\n        if (value_int == 22) {\n            return 22;\n        }\n        if (value_int == 23) {\n            return 23;\n        }\n        if (value_int == 24) {\n            return 24;\n        }\n        if (value_int == 25) {\n            return 25;\n        }\n        if (value_int == 26) {\n            return 26;\n        }\n        if (value_int == 27) {\n            return 27;\n        }\n        if (value_int == 28) {\n            return 28;\n        }\n        if (value_int == 29) {\n            return 29;\n        }\n        if (value_int == 30) {\n            return 30;\n        }\n        if (value_int == 31) {\n            return 31;\n        }\n        if (value_int == 32) {\n            return 32;\n        }\n        if (value_int == 33) {\n            return 33;\n        }\n        if (value_int == 34) {\n            return 34;\n        }\n        if (value_int == 35) {\n            return 35;\n        }\n        if (value_int == 36) {\n            return 36;\n        }\n        if (value_int == 37) {\n            return 37;\n        }\n        if (value_int == 38) {\n            return 38;\n        }\n        if (value_int == 39) {\n            return 39;\n        }\n        if (value_int == 40) {\n            return 40;\n        }\n        if (value_int == 41) {\n            return 41;\n        }\n        if (value_int == 42) {\n            return 42;\n        }\n        if (value_int == 43) {\n            return 43;\n        }\n        if (value_int == 44) {\n            return 44;\n        }\n        if (value_int == 45) {\n            return 45;\n        }\n        if (value_int == 46) {\n            return 46;\n        }\n        if (value_int == 47) {\n            return 47;\n        }\n        if (value_int == 48) {\n            return 48;\n        }\n        if (value_int == 49) {\n            return 49;\n        }\n        if (value_int == 50) {\n            return 50;\n        }\n        if (value_int == 51) {\n            return 51;\n        }\n        if (value_int == 52) {\n            return 52;\n        }\n        if (value_int == 53) {\n            return 53;\n        }\n        if (value_int == 54) {\n            return 54;\n        }\n        if (value_int == 55) {\n            return 55;\n        }\n        if (value_int == 56) {\n            return 56;\n        }\n        if (value_int == 57) {\n            return 57;\n        }\n        if (value_int == 58) {\n            return 58;\n        }\n        if (value_int == 59) {\n            return 59;\n        }\n        if (value_int == 60) {\n            return 60;\n        }\n        if (value_int == 61) {\n            return 61;\n        }\n        if (value_int == 62) {\n            return 62;\n        }\n        if (value_int == 63) {\n            return 63;\n        }\n        if (value_int == 64) {\n            return 64;\n        }\n        if (value_int == 65) {\n            return 65;\n        }\n        if (value_int == 66) {\n            return 66;\n        }\n        if (value_int == 67) {\n            return 67;\n        }\n        if (value_int == 68) {\n            return 68;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int closest = Integer.MAX_VALUE;\n        int closest_index = 0;\n        for (int i = 0; i < value.length(); i++) {\n            if (value.charAt(i) >= 'A' && value.charAt(i) <= 'Z') {\n                closest = Math.min(closest, i);\n                closest_index = i;\n            }\n        }\n        return closest_index;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        String s = value.trim();\n        String[] split = s.split(\"\\\\.\");\n        String[] split2 = split[1].split(\"\");\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i1 = 0;\n        int i2 = 0;\n        int j1 = 0;\n        int j2 = 0;\n        int k1 = 0;\n        int k2 = 0;\n        int l = 0;\n        int m1 = 0;\n        int m2 = 0;\n        int n1 = 0;\n        int n2 = 0;\n        int o1 = 0;\n        int o2 = 0;\n        int p1 = 0;\n        int p2 = 0;\n        int q1 = 0;\n        int q2 = 0;\n        int r1 = 0;\n        int r2 = 0;\n        int s1 = 0;\n        int s2 = 0;\n        int t1 = 0;\n        int t2 = 0;\n        int u1 = 0;\n        int u2 = 0;\n        int v1 = 0;\n        int v2 = 0;\n        int w1 = 0;\n        int w2 = 0;\n        int x1 = 0;\n        int x2 = 0;\n        int y1 = 0;\n        int y2 = 0;\n        int z1 = 0;\n        int z2 = 0;\n        int a1 = 0;\n        int a2 = 0;\n        int b1 = 0;\n        int b2 = 0;\n        int c1 = 0;\n        int c2 = 0;\n        int d1 = 0;\n        int d2 = 0;\n        int e1 = 0;\n        int e2 = 0;\n        int f1 = 0;\n        int f2 = 0;\n        int g1 = 0;\n        int g2 = 0;\n        int h1 = 0;\n        int h2 = 0;\n        int i3 = 0;\n        int i4 = 0;\n        int j3 = 0;\n        int j4 = 0;\n        int k3 = 0;\n        int k4 = 0;\n        int l1 = 0;\n        int l2 = 0;\n        int m3 = 0;\n        int m4 = 0;\n        int n3 = 0;\n        int n4 = 0;\n        int o3 = 0;\n        int o4 = 0;\n        int p3 = 0;\n        int p4 = 0;\n        int q3 = 0;\n        int q4 = 0;\n        int r3 = 0;\n        int r4 = 0;\n        int s3 = 0;\n        int s4 = 0;\n        int t3 = 0;\n        int t4 = 0;\n        int u3 = 0;\n        int u4 = 0;\n        int v3 = 0;\n        int v4 = 0;\n        int w3 = 0;\n        int w4 = 0;\n        int x3 = 0;\n        int x4 = 0;\n        int y3 = 0;\n        int y4 = 0;\n        int z3 = 0;\n        int z4 = 0;\n        int a3 = 0;\n        int a4 = 0;\n        int b3 = 0;\n        int b4 = 0;\n        int c3 = 0;\n        int c4 = 0;\n        int d3 = 0;\n        int d4 = 0;\n        int e3 = 0;\n        int e4 = 0;\n        int f3 = 0;\n        int f4 = 0;\n        int g3 = 0;\n        int g4 = 0;\n        int h3 = 0;\n        int h4 = 0;\n        int i5 = 0;\n        int i6 = 0;\n        int j5 = 0;\n        int j6 = 0;\n        int k5 = 0;\n        int k6 = 0;\n        int l3 = 0;\n        int l4 = 0;\n        int m5 = 0;\n        int m6 = 0;\n        int n5 = 0;\n        int n6 = 0;\n        int o5 = 0;\n        int o6 = 0;\n        int p5 = 0;\n        int p6 = 0;\n        int q5 = 0;\n        int q6 = 0;\n        int r5 = 0;\n        int r6 = 0;\n        int s5 = 0;\n        int s6 = 0;\n        int t5 = 0;\n        int t6 = 0;\n        int u5 = 0;\n        int u6 = 0;\n        int v5 = 0;\n        int v6 = 0;\n        int w5 = 0;\n        int w6 = 0;\n        int x5 = 0;\n        int x6 = 0;\n        int y5 = 0;\n        int y6 = 0;\n        int z5 = 0;\n        int z6 = 0;\n        int a5 = 0;\n        int a6 = 0;\n        int b5 = 0;\n        int b6 = 0;\n        int c5 = 0;\n        int c6 = 0;\n        int d5 = 0;\n        int d6 = 0;\n        int e5 = 0;\n        int e6 = 0;\n        int f5 = 0;\n        int f6 = 0;\n        int g5 = 0;\n        int g6 = 0;\n        int h5 = 0;\n        int h6 = 0;\n        int i7 = 0;\n        int i8 = 0;\n        int j7 = 0;\n        int j8 = 0;\n        int k7 = 0;\n        int k8 = 0;\n        int l5 = 0;\n        int l6 = 0;\n        int m7 = 0;\n        int m8 = 0;\n        int n7 = 0;\n        int n8 = 0;\n        int o7 = 0;\n        int o8 = 0;\n        int p7 = 0;\n        int p8 = 0;\n        int q7 = 0;\n        int q8 = 0;\n        int r7 = 0;\n        int r8 = 0;\n        int s7 = 0;\n        int s8 = 0;\n        int t7 = 0;\n        int t8 = 0;\n        int u7 = 0;\n        int u8 = 0;\n        int v7 = 0;\n        int v8 = 0;\n        int w7 = 0;\n        int w8 = 0;\n        int x7 = 0;\n        int x8 = 0;\n        int y7", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int closest = Integer.parseInt(value);\n        int upper = 0;\n        int lower = 0;\n        int diff = 0;\n        int count = 0;\n        int upper_count = 0;\n        int lower_count = 0;\n        int upper_diff = 0;\n        int lower_diff = 0;\n        int upper_count_diff = 0;\n        int lower_count_diff = 0;\n        int upper_diff_count = 0;\n        int lower_diff_count = 0;\n        int upper_count_diff_count = 0;\n        int lower_count_diff_count = 0;\n        int upper_diff_count_count = 0;\n        int lower_diff_count_count = 0;\n        int upper_count_diff_count_count = 0;\n        int lower_count_diff_count_count = 0;\n        int upper_diff_count_count_count = 0;\n        int lower_diff_count_count_count = 0;\n        int upper_count_diff_count_count_count = 0;\n        int lower_count_diff_count_count_count = 0;\n        int upper_diff_count_count_count_count = 0;\n        int lower_diff_count_count_count_count = 0;\n        int upper_count_diff_count_count_count_count = 0;\n        int lower_count_diff_count_count_count_count = 0;\n        int upper_diff_count_count_count_count_count = 0;\n        int lower_diff_count_count_count_count_count = 0;\n        int upper_count_diff_count_count_count_count_count = 0;\n        int lower_count_diff_count_count_count_count_count = 0;\n        int upper_diff_count_count_count_count_count_count = 0;\n        int lower_diff_count_count_count_count_count_count = 0;\n        int upper_count_diff_count_count_count_count_count_count = 0;\n        int lower_count_diff_count_count_count_count_count_count = 0;\n        int upper_diff_count_count_count_count_count_count_count = 0;\n        int lower_diff_count_count_count_count_count_count_count = 0;\n        int upper_count_diff_count_count_count_count_count_count_count = 0;\n        int lower_count_diff_count_count_count_count_count_count_count = 0;\n        int upper_diff_count_count_count_count_count_count_count_count = 0;\n        int lower_diff_count_count_count_count_count_count_count_count = 0;\n        int upper_count_diff_count_count_count_count_count_count_count_count = 0;\n        int lower_count_diff_count_count_count_count_count_count_count_count = 0;\n        int upper_diff_count_count_count_count_count_count_count_count_count = 0;\n        int lower_diff_count_count_count_count_count_count_count_count_count = 0;\n        int upper_count_diff_count_count_count_count_count_count_count_count_count = 0;\n        int lower_count_diff_count_count_count_count_count_count_count_count_count = 0;\n        int upper_diff_count_count_count_count_count_count_count_count_count_count = 0;\n        int lower_diff_count_count_count_count_count_count_count_count_count_count = 0;\n        int upper_count_diff_count_count_count_count_count_count_count_count_count_count = 0;\n        int lower_count_diff_count_count_count_count_count_count_count_count_count_count = 0;\n        int upper_diff_count_count_count_count_count_count_count_count_count_count_count = 0;\n        int lower_diff_count_count_count_count_count_count_count_count_count_count_count = 0;\n        int upper_count_diff_count_count_count_count_count_count_count_count_count_count_count = 0;\n        int lower_count_diff_count_count_count_count_count_count_count_count_count_count_count = 0;\n        int upper_diff_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n        int lower_diff_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n        int upper_count_diff_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n        int lower_count_diff_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n        int upper_diff_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n        int lower_diff_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n        int upper_count_diff_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n        int lower_count_diff_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n        int upper_diff_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n        int lower_diff_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n        int upper_count_diff_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n        int lower_count_diff_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n        int upper_diff_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n        int lower_diff_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n        int upper_count_diff_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n        int lower_count_diff_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n        int upper_diff_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n        int lower_diff_count_count_count_count_count_count_count_count", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int closest = 0;\n        int diff = 0;\n        int len = value.length();\n        for (int i = 0; i < len; i++) {\n            diff = Math.abs(value.charAt(i) - 'A');\n            if (diff < closest) {\n                closest = diff;\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int upper = 0;\n        int lower = 0;\n        int count = 0;\n        int value_int = Integer.parseInt(value);\n        if (value_int == 0) {\n            return 0;\n        }\n        if (value_int == 1) {\n            return 1;\n        }\n        if (value_int == 2) {\n            return 2;\n        }\n        if (value_int == 3) {\n            return 3;\n        }\n        if (value_int == 4) {\n            return 4;\n        }\n        if (value_int == 5) {\n            return 5;\n        }\n        if (value_int == 6) {\n            return 6;\n        }\n        if (value_int == 7) {\n            return 7;\n        }\n        if (value_int == 8) {\n            return 8;\n        }\n        if (value_int == 9) {\n            return 9;\n        }\n        if (value_int == 10) {\n            return 10;\n        }\n        if (value_int == 11) {\n            return 11;\n        }\n        if (value_int == 12) {\n            return 12;\n        }\n        if (value_int == 13) {\n            return 13;\n        }\n        if (value_int == 14) {\n            return 14;\n        }\n        if (value_int == 15) {\n            return 15;\n        }\n        if (value_int == 16) {\n            return 16;\n        }\n        if (value_int == 17) {\n            return 17;\n        }\n        if (value_int == 18) {\n            return 18;\n        }\n        if (value_int == 19) {\n            return 19;\n        }\n        if (value_int == 20) {\n            return 20;\n        }\n        if (value_int == 21) {\n            return 21;\n        }\n        if (value_int == 22) {\n            return 22;\n        }\n        if (value_int == 23) {\n            return 23;\n        }\n        if (value_int == 24) {\n            return 24;\n        }\n        if (value_int == 25) {\n            return 25;\n        }\n        if (value_int == 26) {\n            return 26;\n        }\n        if (value_int == 27) {\n            return 27;\n        }\n        if (value_int == 28) {\n            return 28;\n        }\n        if (value_int == 29) {\n            return 29;\n        }\n        if (value_int == 30) {\n            return 30;\n        }\n        if (value_int == 31) {\n            return 31;\n        }\n        if (value_int == 32) {\n            return 32;\n        }\n        if (value_int == 33) {\n            return 33;\n        }\n        if (value_int == 34) {\n            return 34;\n        }\n        if (value_int == 35) {\n            return 35;\n        }\n        if (value_int == 36) {\n            return 36;\n        }\n        if (value_int == 37) {\n            return 37;\n        }\n        if (value_int == 38) {\n            return 38;\n        }\n        if (value_int == 39) {\n            return 39;\n        }\n        if (value_int == 40) {\n            return 40;\n        }\n        if (value_int == 41) {\n            return 41;\n        }\n        if (value_int == 42) {\n            return 42;\n        }\n        if (value_int == 43) {\n            return 43;\n        }\n        if (value_int == 44) {\n            return 44;\n        }\n        if (value_int == 45) {\n            return 45;\n        }\n        if (value_int == 46) {\n            return 46;\n        }\n        if (value_int == 47) {\n            return 47;\n        }\n        if (value_int == 48) {\n            return 48;\n        }\n        if (value_int == 49) {\n            return 49;\n        }\n        if (value_int == 50) {\n            return 50;\n        }\n        if (value_int == 51) {\n            return 51;\n        }\n        if (value_int == 52) {\n            return 52;\n        }\n        if (value_int == 53) {\n            return 53;\n        }\n        if (value_int == 54) {\n            return 54;\n        }\n        if (value_int == 55) {\n            return 55;\n        }\n        if (value_int == 56) {\n            return 56;\n        }\n        if (value_int == 57) {\n            return 57;\n        }\n        if (value_int == 58) {\n            return 58;\n        }\n        if (value_int == 59) {\n            return 59;\n        }\n        if (value_int == 60) {\n            return 60;\n        }\n        if (value_int == 61) {\n            return 61;\n        }\n        if (value_int == 62) {\n            return 62;\n        }\n        if (value_int == 63) {\n            return 63;\n        }\n        if (value_int == 64) {\n            return 64;\n        }\n        if (value_int == 65) {\n            return 65;\n        }\n        if (value_int == 66) {\n            return 66;\n        }\n        if (value_int == 67) {\n            return 67;\n        }\n        if (value_int == 68) {\n            return 68;\n        }\n        if (value_int == 69) {\n            return 69;\n        }\n        if (value_int == 70) {\n            return 70;\n        }\n        if (value_int == 71) {\n            return 71;\n        }\n        if (value_int == 72) {\n            return 72;\n        }\n        if (value_int == 73) {\n            return 73;\n        }\n        if (value_int == 74) {\n            return 74;\n        }\n        if (value_int == 75) {\n            return 75;\n        }\n        if (value_int == 76) {\n            return 76;\n        }\n        if (value_int == 77) {\n            return 77;\n        }\n        if (value_int == 78) {\n            return 78;\n        }\n        if (value_int == 79) {\n            return 79;\n        }\n        if (value_int == 80) {\n            return 80;\n        }\n        if (value_int == 81) {\n            return 81;\n        }\n        if (value_int == 82) {\n            return 82;\n        }\n        if (value_int == 83) {\n            return 83;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int value_int = Integer.parseInt(value);\n        int closest_int = 0;\n        int diff = 0;\n        for (int i = 0; i < value.length(); i++) {\n            diff = value_int - closest_int;\n            if (diff == 0) {\n                return closest_int;\n            }\n            closest_int = value_int;\n            value_int = diff;\n        }\n        return closest_int;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int closest = 0;\n        int diff = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i1 = 0;\n        int i2 = 0;\n        int i3 = 0;\n        int i4 = 0;\n        int i5 = 0;\n        int i6 = 0;\n        int i7 = 0;\n        int i8 = 0;\n        int i9 = 0;\n        int i10 = 0;\n        int i11 = 0;\n        int i12 = 0;\n        int i13 = 0;\n        int i14 = 0;\n        int i15 = 0;\n        int i16 = 0;\n        int i17 = 0;\n        int i18 = 0;\n        int i19 = 0;\n        int i20 = 0;\n        int i21 = 0;\n        int i22 = 0;\n        int i23 = 0;\n        int i24 = 0;\n        int i25 = 0;\n        int i26 = 0;\n        int i27 = 0;\n        int i28 = 0;\n        int i29 = 0;\n        int i30 = 0;\n        int i31 = 0;\n        int i32 = 0;\n        int i33 = 0;\n        int i34 = 0;\n        int i35 = 0;\n        int i36 = 0;\n        int i37 = 0;\n        int i38 = 0;\n        int i39 = 0;\n        int i40 = 0;\n        int i41 = 0;\n        int i42 = 0;\n        int i43 = 0;\n        int i44 = 0;\n        int i45 = 0;\n        int i46 = 0;\n        int i47 = 0;\n        int i48 = 0;\n        int i49 = 0;\n        int i50 = 0;\n        int i51 = 0;\n        int i52 = 0;\n        int i53 = 0;\n        int i54 = 0;\n        int i55 = 0;\n        int i56 = 0;\n        int i57 = 0;\n        int i58 = 0;\n        int i59 = 0;\n        int i60 = 0;\n        int i61 = 0;\n        int i62 = 0;\n        int i63 = 0;\n        int i64 = 0;\n        int i65 = 0;\n        int i66 = 0;\n        int i67 = 0;\n        int i68 = 0;\n        int i69 = 0;\n        int i70 = 0;\n        int i71 = 0;\n        int i72 = 0;\n        int i73 = 0;\n        int i74 = 0;\n        int i75 = 0;\n        int i76 = 0;\n        int i77 = 0;\n        int i78 = 0;\n        int i79 = 0;\n        int i80 = 0;\n        int i81 = 0;\n        int i82 = 0;\n        int i83 = 0;\n        int i84 = 0;\n        int i85 = 0;\n        int i86 = 0;\n        int i87 = 0;\n        int i88 = 0;\n        int i89 = 0;\n        int i90 = 0;\n        int i91 = 0;\n        int i92 = 0;\n        int i93 = 0;\n        int i94 = 0;\n        int i95 = 0;\n        int i96 = 0;\n        int i97 = 0;\n        int i98 = 0;\n        int i99 = 0;\n        int i100 = 0;\n        int i101 = 0;\n        int i102 = 0;\n        int i103 = 0;\n        int i104 = 0;\n        int i105 = 0;\n        int i106 = 0;\n        int i107 = 0;\n        int i108 = 0;\n        int i109 = 0;\n        int i110 = 0;\n        int i111 = 0;\n        int i112 = 0;\n        int i113 = 0;\n        int i114 = 0;\n        int i115 = 0;\n        int i116 = 0;\n        int i117 = 0;\n        int i118 = 0;\n        int i119 = 0;\n        int i120 = 0;\n        int i121 = 0;\n        int i122 = 0;\n        int i123 = 0;\n        int i124 = 0;\n        int i125 = 0;\n        int i126 = 0;\n        int i127 = 0;\n        int i128 = 0;\n        int i129 = 0;\n        int i130 = 0;\n        int i131 = 0;\n        int i132 = 0;\n        int i133 = 0;\n        int i134 = 0;\n        int i135 = 0;\n        int i136 = 0;\n        int i137 = 0;\n        int i138 = 0;\n        int i139 = 0;\n        int i140 = 0;\n        int i141 = 0;\n        int i142 = 0;\n        int i143 = 0;\n        int i144 = 0;\n        int i145 = 0;\n        int i146 = 0;\n        int i147 = 0;\n        int i148 = 0;\n        int i149 = 0;\n        int i150 = 0;\n        int i151 = 0;\n        int i152 = 0;\n        int i153 = 0;\n        int i154 = 0;\n        int i155 = 0;\n        int i156 = 0;\n        int i157 = 0;\n        int i158 = 0;\n        int i159 = 0;\n        int i160 = 0;\n        int i161 = 0;\n        int i162", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        // TODO: Write your code here\n        String[] nums = value.split(\"\\\\.\");\n        int num = Integer.parseInt(nums[0]);\n        int upper = Integer.MAX_VALUE;\n        for (int i = 0; i < nums.length; i++) {\n            int num2 = Integer.parseInt(nums[i]);\n            if (num2 > num) {\n                num = num2;\n            }\n            if (num2 > upper) {\n                upper = num2;\n            }\n        }\n        return upper;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int num = Integer.parseInt(value);\n        int upper = 0;\n        int lower = 0;\n        int mid = 0;\n        int count = 0;\n        int diff = 0;\n        int diff2 = 0;\n        int diff3 = 0;\n        int diff4 = 0;\n        int diff5 = 0;\n        int diff6 = 0;\n        int diff7 = 0;\n        int diff8 = 0;\n        int diff9 = 0;\n        int diff10 = 0;\n        int diff11 = 0;\n        int diff12 = 0;\n        int diff13 = 0;\n        int diff14 = 0;\n        int diff15 = 0;\n        int diff16 = 0;\n        int diff17 = 0;\n        int diff18 = 0;\n        int diff19 = 0;\n        int diff20 = 0;\n        int diff21 = 0;\n        int diff22 = 0;\n        int diff23 = 0;\n        int diff24 = 0;\n        int diff25 = 0;\n        int diff26 = 0;\n        int diff27 = 0;\n        int diff28 = 0;\n        int diff29 = 0;\n        int diff30 = 0;\n        int diff31 = 0;\n        int diff32 = 0;\n        int diff33 = 0;\n        int diff34 = 0;\n        int diff35 = 0;\n        int diff36 = 0;\n        int diff37 = 0;\n        int diff38 = 0;\n        int diff39 = 0;\n        int diff40 = 0;\n        int diff41 = 0;\n        int diff42 = 0;\n        int diff43 = 0;\n        int diff44 = 0;\n        int diff45 = 0;\n        int diff46 = 0;\n        int diff47 = 0;\n        int diff48 = 0;\n        int diff49 = 0;\n        int diff50 = 0;\n        int diff51 = 0;\n        int diff52 = 0;\n        int diff53 = 0;\n        int diff54 = 0;\n        int diff55 = 0;\n        int diff56 = 0;\n        int diff57 = 0;\n        int diff58 = 0;\n        int diff59 = 0;\n        int diff60 = 0;\n        int diff61 = 0;\n        int diff62 = 0;\n        int diff63 = 0;\n        int diff64 = 0;\n        int diff65 = 0;\n        int diff66 = 0;\n        int diff67 = 0;\n        int diff68 = 0;\n        int diff69 = 0;\n        int diff70 = 0;\n        int diff71 = 0;\n        int diff72 = 0;\n        int diff73 = 0;\n        int diff74 = 0;\n        int diff75 = 0;\n        int diff76 = 0;\n        int diff77 = 0;\n        int diff78 = 0;\n        int diff79 = 0;\n        int diff80 = 0;\n        int diff81 = 0;\n        int diff82 = 0;\n        int diff83 = 0;\n        int diff84 = 0;\n        int diff85 = 0;\n        int diff86 = 0;\n        int diff87 = 0;\n        int diff88 = 0;\n        int diff89 = 0;\n        int diff90 = 0;\n        int diff91 = 0;\n        int diff92 = 0;\n        int diff93 = 0;\n        int diff94 = 0;\n        int diff95 = 0;\n        int diff96 = 0;\n        int diff97 = 0;\n        int diff98 = 0;\n        int diff99 = 0;\n        int diff100 = 0;\n        int diff101 = 0;\n        int diff102 = 0;\n        int diff103 = 0;\n        int diff104 = 0;\n        int diff105 = 0;\n        int diff106 = 0;\n        int diff107 = 0;\n        int diff108 = 0;\n        int diff109 = 0;\n        int diff110 = 0;\n        int diff111 = 0;\n        int diff112 = 0;\n        int diff113 = 0;\n        int diff114 = 0;\n        int diff115 = 0;\n        int diff116 = 0;\n        int diff117 = 0;\n        int diff118 = 0;\n        int diff119 = 0;\n        int diff120 = 0;\n        int diff121 = 0;\n        int diff122 = 0;\n        int diff123 = 0;\n        int diff124 = 0;\n        int diff125 = 0;\n        int diff126 = 0;\n        int diff127 = 0;\n        int diff128 = 0;\n        int diff129 = 0;\n        int diff130 = 0;\n        int diff131 = 0;\n        int diff132 = 0;\n        int diff133 = 0;\n        int diff134 = 0;\n        int diff135 = 0;\n        int diff136 = 0;\n        int diff137 = 0;\n        int diff138 = 0;\n        int diff139 = 0;\n        int diff140 = 0;\n        int diff141 = 0;\n        int diff142 = 0;\n        int diff143 = 0;\n        int diff144 = 0;\n        int diff145 = 0;\n        int diff146 = 0;\n        int diff147 = 0;\n        int diff148 = 0;\n        int diff149 = 0;\n        int diff150 = 0;\n        int diff151 = 0;\n        int diff152 = 0;\n        int diff153 = 0;\n        int diff154 = 0;\n        int diff155 = 0;\n        int diff156 = 0;\n        int diff157 = 0;\n        int diff158 = 0;\n        int diff159 = 0;\n        int diff160 = 0;\n        int diff161 = 0;\n        int diff162 = 0;\n        int diff163 = 0;\n        int diff164 = 0;\n        int diff165 = 0;\n        int diff166 = 0;\n        int diff167 = 0;\n        int diff168 = 0;\n        int diff169 = 0;\n        int diff170 = 0;\n        int diff171 = 0;\n        int diff172 = 0;\n        int diff173 = 0;\n        int diff174 = 0;\n        int diff175 = 0;\n        int diff176 = 0;\n        int diff177 = 0;\n        int diff17", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        String[] numbers = value.split(\"\\\\.\");\n        int num1 = Integer.parseInt(numbers[0]);\n        int num2 = Integer.parseInt(numbers[1]);\n        int diff = num1 - num2;\n        int closest = 0;\n        if (diff == 0) {\n            closest = num1;\n        } else if (diff > 0) {\n            closest = num1 + 1;\n        } else {\n            closest = num1 - 1;\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        // Write your code here\n        int closest = 0;\n        int closest_diff = Integer.MAX_VALUE;\n        int diff = 0;\n        for (int i = 0; i < value.length(); i++) {\n            diff = Integer.parseInt(value.substring(i, i + 1));\n            if (diff == 0) {\n                diff = 1;\n            }\n            if (diff < closest_diff) {\n                closest = diff;\n                closest_diff = diff;\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int closest = 0;\n        int diff = 0;\n        int upper = 0;\n        int lower = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i1 = 0;\n        int j1 = 0;\n        int k1 = 0;\n        int l1 = 0;\n        int m1 = 0;\n        int n1 = 0;\n        int o1 = 0;\n        int p1 = 0;\n        int q1 = 0;\n        int r1 = 0;\n        int s1 = 0;\n        int t1 = 0;\n        int u1 = 0;\n        int v1 = 0;\n        int w1 = 0;\n        int x1 = 0;\n        int y1 = 0;\n        int z1 = 0;\n        int a1 = 0;\n        int b1 = 0;\n        int c1 = 0;\n        int d1 = 0;\n        int e1 = 0;\n        int f1 = 0;\n        int g1 = 0;\n        int h1 = 0;\n        int i2 = 0;\n        int j2 = 0;\n        int k2 = 0;\n        int l2 = 0;\n        int m2 = 0;\n        int n2 = 0;\n        int o2 = 0;\n        int p2 = 0;\n        int q2 = 0;\n        int r2 = 0;\n        int s2 = 0;\n        int t2 = 0;\n        int u2 = 0;\n        int v2 = 0;\n        int w2 = 0;\n        int x2 = 0;\n        int y2 = 0;\n        int z2 = 0;\n        int a2 = 0;\n        int b2 = 0;\n        int c2 = 0;\n        int d2 = 0;\n        int e2 = 0;\n        int f2 = 0;\n        int g2 = 0;\n        int h2 = 0;\n        int i3 = 0;\n        int j3 = 0;\n        int k3 = 0;\n        int l3 = 0;\n        int m3 = 0;\n        int n3 = 0;\n        int o3 = 0;\n        int p3 = 0;\n        int q3 = 0;\n        int r3 = 0;\n        int s3 = 0;\n        int t3 = 0;\n        int u3 = 0;\n        int v3 = 0;\n        int w3 = 0;\n        int x3 = 0;\n        int y3 = 0;\n        int z3 = 0;\n        int a3 = 0;\n        int b3 = 0;\n        int c3 = 0;\n        int d3 = 0;\n        int e3 = 0;\n        int f3 = 0;\n        int g3 = 0;\n        int h3 = 0;\n        int i4 = 0;\n        int j4 = 0;\n        int k4 = 0;\n        int l4 = 0;\n        int m4 = 0;\n        int n4 = 0;\n        int o4 = 0;\n        int p4 = 0;\n        int q4 = 0;\n        int r4 = 0;\n        int s4 = 0;\n        int t4 = 0;\n        int u4 = 0;\n        int v4 = 0;\n        int w4 = 0;\n        int x4 = 0;\n        int y4 = 0;\n        int z4 = 0;\n        int a4 = 0;\n        int b4 = 0;\n        int c4 = 0;\n        int d4 = 0;\n        int e4 = 0;\n        int f4 = 0;\n        int g4 = 0;\n        int h4 = 0;\n        int i5 = 0;\n        int j5 = 0;\n        int k5 = 0;\n        int l5 = 0;\n        int m5 = 0;\n        int n5 = 0;\n        int o5 = 0;\n        int p5 = 0;\n        int q5 = 0;\n        int r5 = 0;\n        int s5 = 0;\n        int t5 = 0;\n        int u5 = 0;\n        int v5 = 0;\n        int w5 = 0;\n        int x5 = 0;\n        int y5 = 0;\n        int z5 = 0;\n        int a5 = 0;\n        int b5 = 0;\n        int c5 = 0;\n        int d5 = 0;\n        int e5 = 0;\n        int f5 = 0;\n        int g5 = 0;\n        int h5 = 0;\n        int i6 = 0;\n        int j6 = 0;\n        int k6 = 0;\n        int l6 = 0;\n        int m6 = 0;\n        int n6 = 0;\n        int o6 = 0;\n        int p6 = 0;\n        int q6 = 0;\n        int r6 = 0;\n        int s6 = 0;\n        int t6 = 0;\n        int u6 = 0;\n        int v6 = 0;\n        int w6 = 0;\n        int x6 = 0;\n        int y6 = 0;\n        int z6 = 0;\n        int a6 = 0;\n        int b6 = 0;\n        int c6 = 0;\n        int d6 = 0;\n        int e6 = 0;\n        int f6 = 0;\n        int g6 = 0;\n        int h6 = 0;\n        int i7 = 0;\n        int j7 = 0;\n        int k7 = 0;\n        int l7 = 0;\n        int m7 = 0;\n        int n7 = 0;\n        int o7 = 0;\n        int p7 = 0;\n        int q7 = 0;\n        int r7 = 0;\n        int s7 = 0;\n        int t7 = 0;\n        int u7 = 0;\n        int v7 = 0;\n        int w7 = 0;\n        int x7 = 0;\n        int y7 = 0;\n        int z7 = 0;\n        int a7 = 0;\n        int b7 = 0;\n        int c7 = 0;\n        int d7 = 0;\n        int e7 = 0;\n        int f7 = 0;\n        int g7 = 0;\n        int h7 = 0;\n        int i8 = 0;\n        int j8 = 0;\n        int k8 = 0;\n        int l8 = 0;\n        int m8 =", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        String[] values = value.split(\"\\\\.\");\n        int i = 0;\n        int j = values.length - 1;\n        int k = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        while (i < j) {\n            if (values[i].equals(\"0\")) {\n                i++;\n                continue;\n            }\n            if (values[j].equals(\"0\")) {\n                j--;\n                continue;\n            }\n            if (values[i].equals(\"1\")) {\n                i++;\n                continue;\n            }\n            if (values[j].equals(\"1\")) {\n                j--;\n                continue;\n            }\n            if (values[i].equals(\"2\")) {\n                i++;\n                continue;\n            }\n            if (values[j].equals(\"2\")) {\n                j--;\n                continue;\n            }\n            if (values[i].equals(\"3\")) {\n                i++;\n                continue;\n            }\n            if (values[j].equals(\"3\")) {\n                j--;\n                continue;\n            }\n            if (values[i].equals(\"4\")) {\n                i++;\n                continue;\n            }\n            if (values[j].equals(\"4\")) {\n                j--;\n                continue;\n            }\n            if (values[i].equals(\"5\")) {\n                i++;\n                continue;\n            }\n            if (values[j].equals(\"5\")) {\n                j--;\n                continue;\n            }\n            if (values[i].equals(\"6\")) {\n                i++;\n                continue;\n            }\n            if (values[j].equals(\"6\")) {\n                j--;\n                continue;\n            }\n            if (values[i].equals(\"7\")) {\n                i++;\n                continue;\n            }\n            if (values[j].equals(\"7\")) {\n                j--;\n                continue;\n            }\n            if (values[i].equals(\"8\")) {\n                i++;\n                continue;\n            }\n            if (values[j].equals(\"8\")) {\n                j--;\n                continue;\n            }\n            if (values[i].equals(\"9\")) {\n                i++;\n                continue;\n            }\n            if (values[j].equals(\"9\")) {\n                j--;\n                continue;\n            }\n            if (values[i].equals(\"10\")) {\n                i++;\n                continue;\n            }\n            if (values[j].equals(\"10\")) {\n                j--;\n                continue;\n            }\n            if (values[i].equals(\"11\")) {\n                i++;\n                continue;\n            }\n            if (values[j].equals(\"11\")) {\n                j--;\n                continue;\n            }\n            if (values[i].equals(\"12\")) {\n                i++;\n                continue;\n            }\n            if (values[j].equals(\"12\")) {\n                j--;\n                continue;\n            }\n            if (values[i].equals(\"13\")) {\n                i++;\n                continue;\n            }\n            if (values[j].equals(\"13\")) {\n                j--;\n                continue;\n            }\n            if (values[i].equals(\"14\")) {\n                i++;\n                continue;\n            }\n            if (values[j].equals(\"14\")) {\n                j--;\n                continue;\n            }\n            if (values[i].equals(\"15\")) {\n                i++;\n                continue;\n            }\n            if (values[j].equals(\"15\")) {\n                j--;\n                continue;\n            }\n            if (values[i].equals(\"16\")) {\n                i++;\n                continue;\n            }\n            if (values[j].equals(\"16\")) {\n                j--;\n                continue;\n            }\n            if (values[i].equals(\"17\")) {\n                i++;\n                continue;\n            }\n            if (values[j].equals(\"17\")) {\n                j--;\n                continue;\n            }\n            if (values[i].equals(\"18\")) {\n                i++;\n                continue;\n            }\n            if (values[j].equals(\"18\")) {\n                j--;\n                continue;\n            }\n            if (values[i].equals(\"19\")) {\n                i++;\n                continue;\n            }\n            if (values[j].equals(\"19\")) {\n                j--;\n                continue;\n            }\n            if (values[i].equals(\"20\")) {\n                i++;\n                continue;\n            }\n            if (values[j].equals(\"20\")) {\n                j--;\n                continue;\n            }\n            if (values[i].equals(\"21\")) {\n                i++;\n                continue;\n            }\n            if (values[j].equals(\"21\")) {\n                j--;\n                continue;\n            }\n            if (values[i].equals(\"22\")) {\n                i++;\n                continue;\n            }\n            if (values[j].equals(\"22\")) {\n                j--;\n                continue;\n            }\n            if (values[i].equals(\"23\")) {\n                i++;\n                continue;\n            }\n            if (values[j].equals(\"23\")) {\n                j--;\n                continue;\n            }\n            if (values[i].equals(\"24\")) {\n                i++;\n                continue;\n            }\n            if (values[j].equals(\"24\")) {\n                j--;\n                continue;\n            }\n            if (values[i].equals(\"25\")) {\n                i++;\n                continue;\n            }\n            if (values[j].equals(\"25\")) {\n                j--;\n                continue;\n            }\n            if (values[i].equals(\"26\")) {\n                i++;\n                continue;\n            }\n            if (values[j].equals(\"26\")) {\n                j--;\n                continue;\n            }\n            if (values[i].equals(\"27\")) {\n                i++;\n                continue;\n            }\n            if (values[j].equals(\"27\")) {\n                j--;\n                continue;\n            }\n            if (values[i].equals(\"28\")) {\n                i++;\n                continue;\n            }\n            if (values[j].equals(\"28\")) {\n                j--;\n                continue;\n            }\n            if (values[i].equals(\"29\")) {\n                i++;\n                continue;\n            }\n            if (values[j].equals(\"29\")) {\n                j--;\n                continue;\n            }\n            if (values[i].equals(\"30\")) {\n                i++;\n                continue;\n            }\n            if (values[j].equals(\"30\")) {\n                j--;\n                continue;\n            }\n            if (values[i].equals(\"31\")) {\n                i++;\n                continue;\n            }\n            if (values[j].equals(\"31\")) {\n                j--;\n                continue;\n            }\n            if (values[i].equals(\"32\")) {\n                i++;\n                continue;\n            }\n            if (values[j].equals(\"32\")) {\n                j--;\n                continue;\n            }\n            if (values[i].equals(\"33\")) {\n                i++;\n                continue;\n            }\n            if (values[j].equals(\"33\")) {\n                j--;\n                continue;\n            }\n            if (values[i].equals(\"34\")) {\n                i++;\n                continue;\n            }\n            if (values[j].equals(\"34\")) {\n                j--;\n                continue;\n            }\n            if (values[i].equals(\"35\")) {\n                i++;\n                continue;\n            }\n            if (values[j].equals(\"35\")) {\n                j--;\n                continue;\n            }\n            if (values[i].equals(\"36\")) {\n                i++;\n                continue;\n            }\n            if (values[j].equals(\"36\")) {\n                j--;\n                continue;\n            }\n            if (values[i].equals(\"37\")) {\n                i++;\n                continue;\n            }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int closest = Integer.MAX_VALUE;\n        int diff = Integer.MAX_VALUE;\n        for (int i = 0; i < value.length(); i++) {\n            int current = value.charAt(i) - '0';\n            diff = Math.abs(current - closest);\n            if (diff == 0) {\n                closest = current;\n            }\n        }\n        return closest;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        // TODO: Write your code here\n        int closest = 0;\n        int current = 0;\n        int diff = 0;\n        int count = 0;\n        int max = 0;\n        int min = 0;\n        int sum = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i1 = 0;\n        int j1 = 0;\n        int k1 = 0;\n        int l1 = 0;\n        int m1 = 0;\n        int n1 = 0;\n        int o1 = 0;\n        int p1 = 0;\n        int q1 = 0;\n        int r1 = 0;\n        int s1 = 0;\n        int t1 = 0;\n        int u1 = 0;\n        int v1 = 0;\n        int w1 = 0;\n        int x1 = 0;\n        int y1 = 0;\n        int z1 = 0;\n        int a1 = 0;\n        int b1 = 0;\n        int c1 = 0;\n        int d1 = 0;\n        int e1 = 0;\n        int f1 = 0;\n        int g1 = 0;\n        int h1 = 0;\n        int i2 = 0;\n        int j2 = 0;\n        int k2 = 0;\n        int l2 = 0;\n        int m2 = 0;\n        int n2 = 0;\n        int o2 = 0;\n        int p2 = 0;\n        int q2 = 0;\n        int r2 = 0;\n        int s2 = 0;\n        int t2 = 0;\n        int u2 = 0;\n        int v2 = 0;\n        int w2 = 0;\n        int x2 = 0;\n        int y2 = 0;\n        int z2 = 0;\n        int a2 = 0;\n        int b2 = 0;\n        int c2 = 0;\n        int d2 = 0;\n        int e2 = 0;\n        int f2 = 0;\n        int g2 = 0;\n        int h2 = 0;\n        int i3 = 0;\n        int j3 = 0;\n        int k3 = 0;\n        int l3 = 0;\n        int m3 = 0;\n        int n3 = 0;\n        int o3 = 0;\n        int p3 = 0;\n        int q3 = 0;\n        int r3 = 0;\n        int s3 = 0;\n        int t3 = 0;\n        int u3 = 0;\n        int v3 = 0;\n        int w3 = 0;\n        int x3 = 0;\n        int y3 = 0;\n        int z3 = 0;\n        int a3 = 0;\n        int b3 = 0;\n        int c3 = 0;\n        int d3 = 0;\n        int e3 = 0;\n        int f3 = 0;\n        int g3 = 0;\n        int h3 = 0;\n        int i4 = 0;\n        int j4 = 0;\n        int k4 = 0;\n        int l4 = 0;\n        int m4 = 0;\n        int n4 = 0;\n        int o4 = 0;\n        int p4 = 0;\n        int q4 = 0;\n        int r4 = 0;\n        int s4 = 0;\n        int t4 = 0;\n        int u4 = 0;\n        int v4 = 0;\n        int w4 = 0;\n        int x4 = 0;\n        int y4 = 0;\n        int z4 = 0;\n        int a4 = 0;\n        int b4 = 0;\n        int c4 = 0;\n        int d4 = 0;\n        int e4 = 0;\n        int f4 = 0;\n        int g4 = 0;\n        int h4 = 0;\n        int i5 = 0;\n        int j5 = 0;\n        int k5 = 0;\n        int l5 = 0;\n        int m5 = 0;\n        int n5 = 0;\n        int o5 = 0;\n        int p5 = 0;\n        int q5 = 0;\n        int r5 = 0;\n        int s5 = 0;\n        int t5 = 0;\n        int u5 = 0;\n        int v5 = 0;\n        int w5 = 0;\n        int x5 = 0;\n        int y5 = 0;\n        int z5 = 0;\n        int a5 = 0;\n        int b5 = 0;\n        int c5 = 0;\n        int d5 = 0;\n        int e5 = 0;\n        int f5 = 0;\n        int g5 = 0;\n        int h5 = 0;\n        int i6 = 0;\n        int j6 = 0;\n        int k6 = 0;\n        int l6 = 0;\n        int m6 = 0;\n        int n6 = 0;\n        int o6 = 0;\n        int p6 = 0;\n        int q6 = 0;\n        int r6 = 0;\n        int s6 = 0;\n        int t6 = 0;\n        int u6 = 0;\n        int v6 = 0;\n        int w6 = 0;\n        int x6 = 0;\n        int y6 = 0;\n        int z6 = 0;\n        int a6 = 0;\n        int b6 = 0;\n        int c6 = 0;\n        int d6 = 0;\n        int e6 = 0;\n        int f6 = 0;\n        int g6 = 0;\n        int h6 = 0;\n        int i7 = 0;\n        int j7 = 0;\n        int k7 = 0;\n        int l7 = 0;\n        int m7 = 0;\n        int n7 = 0;\n        int o7 = 0;\n        int p7 = 0;\n        int q7 = 0;\n        int r7 = 0;\n        int s7 = 0;\n        int t7 = 0;\n        int u7 = 0;\n        int v7 = 0;\n        int w7 = 0;\n        int x7 = 0;\n        int y7 = 0;\n        int z7 = 0;\n        int a7 = 0;\n        int b7 = 0;\n        int c7 = 0;\n        int d7 = 0;\n        int e7 = 0;\n        int f7 = 0;\n        int g7 = 0;\n        int h7 = 0;\n        int i8 = 0;", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n        int closest = 0;\n        int diff = 0;\n        int len = value.length();\n        for (int i = 0; i < len; i++) {\n            int digit = value.charAt(i) - '0';\n            diff = closest - digit;\n            if (diff == 0) {\n                closest = digit;\n            } else if (diff > 0) {\n                closest = digit + 1;\n            } else {\n                closest = digit - 1;\n            }\n        }\n        return closest;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        if (n % 2 == 0) {\n            pile.add(n / 2);\n        } else {\n            pile.add(n / 2 + 1);\n        }\n        for (int i = 2; i < n; i += 2) {\n            pile.add(pile.get(i - 1) + pile.get(i - 2));\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                count += i;\n            } else {\n                count += i + 1;\n            }\n        }\n        pile.add(count);\n        for (int i = 2; i <= n; i++) {\n            count = 0;\n            for (int j = 1; j <= i; j++) {\n                if (j % 2 == 0) {\n                    count += j;\n                } else {\n                    count += j + 1;\n                }\n            }\n            pile.add(count);\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<Integer>();\n        int i = 0;\n        while (n > 0) {\n            pile.add(n % 2);\n            n /= 2;\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<Integer>();\n        int i = 0;\n        while (n > 0) {\n            pile.add(n % 2);\n            n = n / 2;\n            i++;\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        int i = 0;\n        while (n > 0) {\n            if (n % 2 == 0) {\n                pile.add(n);\n            }\n            n = n / 2;\n            i++;\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        int i = 0;\n        while (n > 0) {\n            pile.add(n % 2);\n            n = n / 2;\n            i++;\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        int num = n;\n        while (num > 0) {\n            int next = num % 2;\n            pile.add(next);\n            num = num / 2;\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        int i = 1;\n        while (n > 0) {\n            pile.add(n % 2 == 0 ? n / 2 : n / 2 + 1);\n            n /= 2;\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            pile.add(i % 2 == 0 ? n - i : i);\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            pile.add(i % 2 == 0 ? i : i + 1);\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        int level = 1;\n        int count = 0;\n        while(n > 0) {\n            if(n % 2 == 0) {\n                count += n / 2;\n            } else {\n                count += n / 2 + 1;\n            }\n            pile.add(count);\n            n = n / 2;\n            level++;\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        int i = 0;\n        while (n > 0) {\n            if (n % 2 == 0) {\n                pile.add(n);\n            }\n            n /= 2;\n            i++;\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        int i = 0;\n        while (n > 0) {\n            pile.add(n % 2);\n            n = n / 2;\n            i++;\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        int i = 1;\n        while (n > 0) {\n            pile.add(n % 2 == 0 ? n / 2 : n / 2 + 1);\n            n /= 2;\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            pile.add(i % 2 == 0 ? n - i : i + 1);\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<Integer>();\n        int i = 0;\n        while (n > 0) {\n            pile.add(n % 2);\n            n = n / 2;\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        int i = 0;\n        while (n > 0) {\n            if (n % 2 == 0) {\n                pile.add(n);\n            }\n            n = n / 2;\n            i++;\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        int count = 0;\n        while (n > 0) {\n            if (n % 2 == 0) {\n                pile.add(count);\n                n /= 2;\n            } else {\n                pile.add(count + 1);\n                n = n / 2 - 1;\n            }\n            count++;\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        int i = 0;\n        while (n > 0) {\n            if (n % 2 == 0) {\n                pile.add(n);\n                n /= 2;\n            } else {\n                pile.add(n + 1);\n                n = n / 2;\n            }\n            i++;\n        }\n        return pile;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n        List<Integer> pile = new ArrayList<>();\n        int i = 0;\n        while (n > 0) {\n            pile.add(n % 2);\n            n = n / 2;\n            i++;\n        }\n        return pile;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<String>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<String>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<String>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<String>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<String>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<String>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<String>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        List<String> words = new ArrayList<String>();\n        StringTokenizer st = new StringTokenizer(s, \",\");\n        while (st.hasMoreTokens()) {\n            words.add(st.nextToken());\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<String>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<String>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<String>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<String>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<String>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n        String[] words = s.split(\",\");\n        List<String> result = new ArrayList<String>();\n        for (String word : words) {\n            result.add(word);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        int ans = 0;\n        int i = 0;\n        while (i < y) {\n            ans = ans + x;\n            i++;\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        int ans = 0;\n        int i = x;\n        while (i <= y) {\n            ans = ans + i;\n            i = i + 2;\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        int min = Math.min(x, y);\n        int max = Math.max(x, y);\n        int ans = 0;\n        for (int i = min; i <= max; i++) {\n            if (i % 2 == 0) {\n                ans = i;\n                break;\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        int ans = 0;\n        int i = x;\n        while (i <= y) {\n            ans = ans + 2;\n            i = i + 2;\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        int ans = 0;\n        int i = 1;\n        while (i <= x && i <= y) {\n            ans = ans + i;\n            i = i + 2;\n        }\n        if (ans == 0) {\n            return -1;\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        if (x == y) return x;\n        if (x > y) {\n            int temp = x;\n            x = y;\n            y = temp;\n        }\n        int ans = 0;\n        for (int i = x; i <= y; i += 2) {\n            ans = i;\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        int result = 0;\n        int i = x;\n        int j = y;\n        while (i <= j) {\n            result = result + 2;\n            i = i + 2;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        int ans = 0;\n        int i = x;\n        while (i <= y) {\n            ans = ans + i;\n            i = i + 2;\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        if (x == 0 || y == 0) {\n            return -1;\n        }\n        int num = x;\n        int count = 0;\n        while (num > 0) {\n            num = num / 2;\n            count++;\n        }\n        int ans = 0;\n        for (int i = 0; i < count; i++) {\n            ans = ans * 2 + 1;\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        if (x == 0 || y == 0) {\n            return -1;\n        }\n        int ans = 0;\n        for (int i = x; i <= y; i += 2) {\n            ans = Math.max(ans, i);\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        if (x == y) return x;\n        if (x < y) return chooseNum(y, x);\n        int i = x;\n        int j = y;\n        int k = 0;\n        while (i < j) {\n            k = i + j;\n            if (k % 2 == 0) {\n                i = k;\n            } else {\n                j = k;\n            }\n        }\n        return k;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        int ans = 0;\n        int i = x;\n        while (i <= y) {\n            ans = ans + i;\n            i = i + 2;\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        int ans = 0;\n        int n = x;\n        while (n > 0) {\n            ans = ans + n % 2;\n            n = n / 2;\n        }\n        if (ans > y) {\n            return -1;\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        int ans = 0;\n        int i = 0;\n        while(i < x) {\n            ans = ans + 2;\n            i = i + 2;\n        }\n        while(i < y) {\n            ans = ans + 2;\n            i = i + 2;\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        if(x == y) return x;\n        if(x > y) {\n            int temp = x;\n            x = y;\n            y = temp;\n        }\n        int ans = x;\n        for(int i = x; i <= y; i += 2) {\n            ans = Math.max(ans, i);\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        if (x == y) return x;\n        if (x < y) {\n            int temp = x;\n            x = y;\n            y = temp;\n        }\n        int min = x;\n        int max = y;\n        while (min <= max) {\n            int mid = min + (max - min) / 2;\n            if (mid % 2 == 0) {\n                return mid;\n            } else {\n                if (mid > y) {\n                    min = mid + 1;\n                } else {\n                    max = mid - 1;\n                }\n            }\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        int result = -1;\n        int temp = x;\n        int temp2 = y;\n        int temp3 = 0;\n        int temp4 = 0;\n        int temp5 = 0;\n        int temp6 = 0;\n        int temp7 = 0;\n        int temp8 = 0;\n        int temp9 = 0;\n        int temp10 = 0;\n        int temp11 = 0;\n        int temp12 = 0;\n        int temp13 = 0;\n        int temp14 = 0;\n        int temp15 = 0;\n        int temp16 = 0;\n        int temp17 = 0;\n        int temp18 = 0;\n        int temp19 = 0;\n        int temp20 = 0;\n        int temp21 = 0;\n        int temp22 = 0;\n        int temp23 = 0;\n        int temp24 = 0;\n        int temp25 = 0;\n        int temp26 = 0;\n        int temp27 = 0;\n        int temp28 = 0;\n        int temp29 = 0;\n        int temp30 = 0;\n        int temp31 = 0;\n        int temp32 = 0;\n        int temp33 = 0;\n        int temp34 = 0;\n        int temp35 = 0;\n        int temp36 = 0;\n        int temp37 = 0;\n        int temp38 = 0;\n        int temp39 = 0;\n        int temp40 = 0;\n        int temp41 = 0;\n        int temp42 = 0;\n        int temp43 = 0;\n        int temp44 = 0;\n        int temp45 = 0;\n        int temp46 = 0;\n        int temp47 = 0;\n        int temp48 = 0;\n        int temp49 = 0;\n        int temp50 = 0;\n        int temp51 = 0;\n        int temp52 = 0;\n        int temp53 = 0;\n        int temp54 = 0;\n        int temp55 = 0;\n        int temp56 = 0;\n        int temp57 = 0;\n        int temp58 = 0;\n        int temp59 = 0;\n        int temp60 = 0;\n        int temp61 = 0;\n        int temp62 = 0;\n        int temp63 = 0;\n        int temp64 = 0;\n        int temp65 = 0;\n        int temp66 = 0;\n        int temp67 = 0;\n        int temp68 = 0;\n        int temp69 = 0;\n        int temp70 = 0;\n        int temp71 = 0;\n        int temp72 = 0;\n        int temp73 = 0;\n        int temp74 = 0;\n        int temp75 = 0;\n        int temp76 = 0;\n        int temp77 = 0;\n        int temp78 = 0;\n        int temp79 = 0;\n        int temp80 = 0;\n        int temp81 = 0;\n        int temp82 = 0;\n        int temp83 = 0;\n        int temp84 = 0;\n        int temp85 = 0;\n        int temp86 = 0;\n        int temp87 = 0;\n        int temp88 = 0;\n        int temp89 = 0;\n        int temp90 = 0;\n        int temp91 = 0;\n        int temp92 = 0;\n        int temp93 = 0;\n        int temp94 = 0;\n        int temp95 = 0;\n        int temp96 = 0;\n        int temp97 = 0;\n        int temp98 = 0;\n        int temp99 = 0;\n        int temp100 = 0;\n        int temp101 = 0;\n        int temp102 = 0;\n        int temp103 = 0;\n        int temp104 = 0;\n        int temp105 = 0;\n        int temp106 = 0;\n        int temp107 = 0;\n        int temp108 = 0;\n        int temp109 = 0;\n        int temp110 = 0;\n        int temp111 = 0;\n        int temp112 = 0;\n        int temp113 = 0;\n        int temp114 = 0;\n        int temp115 = 0;\n        int temp116 = 0;\n        int temp117 = 0;\n        int temp118 = 0;\n        int temp119 = 0;\n        int temp120 = 0;\n        int temp121 = 0;\n        int temp122 = 0;\n        int temp123 = 0;\n        int temp124 = 0;\n        int temp125 = 0;\n        int temp126 = 0;\n        int temp127 = 0;\n        int temp128 = 0;\n        int temp129 = 0;\n        int temp130 = 0;\n        int temp131 = 0;\n        int temp132 = 0;\n        int temp133 = 0;\n        int temp134 = 0;\n        int temp135 = 0;\n        int temp136 = 0;\n        int temp137 = 0;\n        int temp138 = 0;\n        int temp139 = 0;\n        int temp140 = 0;\n        int temp141 = 0;\n        int temp142 = 0;\n        int temp143 = 0;\n        int temp144 = 0;\n        int temp145 = 0;\n        int temp146 = 0;\n        int temp147 = 0;\n        int temp148 = 0;\n        int temp149 = 0;\n        int temp150 = 0;\n        int temp151 = 0;\n        int temp152 = 0;\n        int temp153 = 0;\n        int temp154 = 0;\n        int temp155 = 0;\n        int temp156 = 0;\n        int temp157 = 0;\n        int temp158 = 0;\n        int temp159 = 0;\n        int temp160 = 0;\n        int temp161 = 0;\n        int temp162 = 0;\n        int temp163 = 0;\n        int temp164 = 0;\n        int temp165 = 0;\n        int temp166 = 0;\n        int temp167 = 0;\n        int temp168 = 0;\n        int temp169 = 0;\n        int temp170 = 0;\n        int temp171 = 0;\n        int temp172 = 0;\n        int temp173 = 0;\n        int temp174 = 0;\n        int temp175 = 0;\n        int temp176 = 0;\n        int temp177 = 0;\n        int temp178 = 0;\n        int temp179 = 0;\n        int temp180 = 0;\n        int temp181 = 0;\n        int temp182 = 0;\n        int temp183 = 0;\n        int temp184 = 0;\n        int temp185 = 0;\n        int temp186 = 0;\n        int temp187 = 0;\n        int temp188 = 0;\n        int temp189 = 0;\n        int temp190 = 0;\n        int temp191 = 0;\n        int temp192 = 0;\n        int temp193 = 0;", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        int ans = 0;\n        int i = 0;\n        while(i < x) {\n            ans = ans + 2;\n            i++;\n        }\n        while(i < y) {\n            ans = ans + 2;\n            i++;\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        int ans = 0;\n        for (int i = x; i <= y; i += 2) {\n            ans = i;\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n        if (x == y) {\n            return x;\n        }\n        if (x > y) {\n            int temp = x;\n            x = y;\n            y = temp;\n        }\n        int count = 0;\n        int temp = x;\n        while (temp > 0) {\n            temp = temp / 2;\n            count++;\n        }\n        int ans = x;\n        for (int i = 0; i < count; i++) {\n            ans = ans * 2;\n        }\n        return ans;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        int sum = 0;\n        int count = 0;\n        while (n >= 0 && m >= 0) {\n            sum += n % 2;\n            count++;\n            n /= 2;\n            m--;\n        }\n        if (count == 0) {\n            return -1;\n        }\n        return String.valueOf(sum / count);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        // Write your code here\n        int roundedN = (int) Math.round(n);\n        int roundedM = (int) Math.round(m);\n        int sum = roundedN + roundedM;\n        int avg = sum / 2;\n        String binaryAvg = Integer.toBinaryString(avg);\n        if (roundedN > roundedM) {\n            return -1;\n        } else {\n            return binaryAvg;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        int sum = 0;\n        int count = 0;\n        int min = Math.min(n, m);\n        int max = Math.max(n, m);\n        for (int i = min; i <= max; i++) {\n            sum += i;\n            count++;\n        }\n        return (sum / count) + \"\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        int n_binary = Integer.toBinaryString(n).length();\n        int m_binary = Integer.toBinaryString(m).length();\n        int n_binary_length = n_binary.length();\n        int m_binary_length = m_binary.length();\n        int n_binary_length_minus_1 = n_binary_length - 1;\n        int m_binary_length_minus_1 = m_binary_length - 1;\n        int n_binary_length_minus_1_minus_1 = n_binary_length_minus_1 - 1;\n        int m_binary_length_minus_1_minus_1 = m_binary_length_minus_1 - 1;\n        int n_binary_length_minus_1_minus_1_minus_1 = n_binary_length_minus_1_minus_1 - 1;\n        int m_binary_length_minus_1_minus_1_minus_1 = m_binary_length_minus_1_minus_1 - 1;\n        int n_binary_length_minus_1_minus_1_minus_1_minus_1 = n_binary_length_minus_1_minus_1_minus_1 - 1;\n        int m_binary_length_minus_1_minus_1_minus_1_minus_1 = m_binary_length_minus_1_minus_1_minus_1 - 1;\n        int n_binary_length_minus_1_minus_1_minus_1_minus_1_minus_1 = n_binary_length_minus_1_minus_1_minus_1_minus_1 - 1;\n        int m_binary_length_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1 = m_binary_length_minus_1_minus_1_minus_1_minus_1 - 1;\n        int n_binary_length_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1 = n_binary_length_minus_1_minus_1_minus_1_minus_1_minus_1 - 1;\n        int m_binary_length_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1 = m_binary_length_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1;\n        int n_binary_length_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1 = n_binary_length_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1;\n        int m_binary_length_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1 = m_binary_length_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1;\n        int n_binary_length_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1 = n_binary_length_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1;\n        int m_binary_length_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1_minus", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if(n > m)\n            return -1;\n        int ans = 0;\n        int i = n;\n        while(i <= m) {\n            ans += i;\n            i++;\n        }\n        ans /= 2;\n        return Integer.toBinaryString(ans);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if(n > m)\n            return -1;\n        int n_binary = Integer.toBinaryString(n).length();\n        int m_binary = Integer.toBinaryString(m).length();\n        int n_binary_length = n_binary;\n        int m_binary_length = m_binary;\n        int n_binary_length_minus_one = n_binary_length - 1;\n        int m_binary_length_minus_one = m_binary_length - 1;\n        int n_binary_length_minus_one_binary = Integer.toBinaryString(n_binary_length_minus_one).length();\n        int m_binary_length_minus_one_binary = Integer.toBinaryString(m_binary_length_minus_one).length();\n        int n_binary_length_minus_one_binary_length = n_binary_length_minus_one_binary;\n        int m_binary_length_minus_one_binary_length = m_binary_length_minus_one_binary;\n        int n_binary_length_minus_one_binary_length_minus_one = n_binary_length_minus_one_binary_length - 1;\n        int m_binary_length_minus_one_binary_length_minus_one = m_binary_length_minus_one_binary_length - 1;\n        int n_binary_length_minus_one_binary_length_minus_one_binary = Integer.toBinaryString(n_binary_length_minus_one_binary_length_minus_one).length();\n        int m_binary_length_minus_one_binary_length_minus_one_binary = Integer.toBinaryString(m_binary_length_minus_one_binary_length_minus_one).length();\n        int n_binary_length_minus_one_binary_length_minus_one_binary_length = n_binary_length_minus_one_binary_length_minus_one_binary;\n        int m_binary_length_minus_one_binary_length_minus_one_binary_length = m_binary_length_minus_one_binary_length_minus_one_binary;\n        int n_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one = n_binary_length_minus_one_binary_length_minus_one_binary_length - 1;\n        int m_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one = m_binary_length_minus_one_binary_length_minus_one_binary_length - 1;\n        int n_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary = Integer.toBinaryString(n_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one).length();\n        int m_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary = Integer.toBinaryString(m_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one).length();\n        int n_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length = n_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary;\n        int m_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length = m_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary;\n        int n_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one = n_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length - 1;\n        int m_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one = m_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length - 1;\n        int n_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length = n_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one;\n        int m_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length = m_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one;\n        int n_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one = n_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length - 1;\n        int m_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one = m_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length - 1;\n        int n_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length = n_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one;\n        int m_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length = m_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length - 1;\n        int n_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one = n_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length - 1;\n        int m_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one = m_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length - 1;\n        int n_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length = n", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        int ans = 0;\n        int count = 0;\n        while (n > 0) {\n            ans += n % 2;\n            count++;\n            n = n / 2;\n        }\n        while (m > 0) {\n            ans += m % 2;\n            count++;\n            m = m / 2;\n        }\n        ans = ans / count;\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        int sum = 0;\n        int count = 0;\n        int count2 = 0;\n        int count3 = 0;\n        int count4 = 0;\n        int count5 = 0;\n        int count6 = 0;\n        int count7 = 0;\n        int count8 = 0;\n        int count9 = 0;\n        int count10 = 0;\n        int count11 = 0;\n        int count12 = 0;\n        int count13 = 0;\n        int count14 = 0;\n        int count15 = 0;\n        int count16 = 0;\n        int count17 = 0;\n        int count18 = 0;\n        int count19 = 0;\n        int count20 = 0;\n        int count21 = 0;\n        int count22 = 0;\n        int count23 = 0;\n        int count24 = 0;\n        int count25 = 0;\n        int count26 = 0;\n        int count27 = 0;\n        int count28 = 0;\n        int count29 = 0;\n        int count30 = 0;\n        int count31 = 0;\n        int count32 = 0;\n        int count33 = 0;\n        int count34 = 0;\n        int count35 = 0;\n        int count36 = 0;\n        int count37 = 0;\n        int count38 = 0;\n        int count39 = 0;\n        int count40 = 0;\n        int count41 = 0;\n        int count42 = 0;\n        int count43 = 0;\n        int count44 = 0;\n        int count45 = 0;\n        int count46 = 0;\n        int count47 = 0;\n        int count48 = 0;\n        int count49 = 0;\n        int count50 = 0;\n        int count51 = 0;\n        int count52 = 0;\n        int count53 = 0;\n        int count54 = 0;\n        int count55 = 0;\n        int count56 = 0;\n        int count57 = 0;\n        int count58 = 0;\n        int count59 = 0;\n        int count60 = 0;\n        int count61 = 0;\n        int count62 = 0;\n        int count63 = 0;\n        int count64 = 0;\n        int count65 = 0;\n        int count66 = 0;\n        int count67 = 0;\n        int count68 = 0;\n        int count69 = 0;\n        int count70 = 0;\n        int count71 = 0;\n        int count72 = 0;\n        int count73 = 0;\n        int count74 = 0;\n        int count75 = 0;\n        int count76 = 0;\n        int count77 = 0;\n        int count78 = 0;\n        int count79 = 0;\n        int count80 = 0;\n        int count81 = 0;\n        int count82 = 0;\n        int count83 = 0;\n        int count84 = 0;\n        int count85 = 0;\n        int count86 = 0;\n        int count87 = 0;\n        int count88 = 0;\n        int count89 = 0;\n        int count90 = 0;\n        int count91 = 0;\n        int count92 = 0;\n        int count93 = 0;\n        int count94 = 0;\n        int count95 = 0;\n        int count96 = 0;\n        int count97 = 0;\n        int count98 = 0;\n        int count99 = 0;\n        int count100 = 0;\n        int count101 = 0;\n        int count102 = 0;\n        int count103 = 0;\n        int count104 = 0;\n        int count105 = 0;\n        int count106 = 0;\n        int count107 = 0;\n        int count108 = 0;\n        int count109 = 0;\n        int count110 = 0;\n        int count111 = 0;\n        int count112 = 0;\n        int count113 = 0;\n        int count114 = 0;\n        int count115 = 0;\n        int count116 = 0;\n        int count117 = 0;\n        int count118 = 0;\n        int count119 = 0;\n        int count120 = 0;\n        int count121 = 0;\n        int count122 = 0;\n        int count123 = 0;\n        int count124 = 0;\n        int count125 = 0;\n        int count126 = 0;\n        int count127 = 0;\n        int count128 = 0;\n        int count129 = 0;\n        int count130 = 0;\n        int count131 = 0;\n        int count132 = 0;\n        int count133 = 0;\n        int count134 = 0;\n        int count135 = 0;\n        int count136 = 0;\n        int count137 = 0;\n        int count138 = 0;\n        int count139 = 0;\n        int count140 = 0;\n        int count141 = 0;\n        int count142 = 0;\n        int count143 = 0;\n        int count144 = 0;\n        int count145 = 0;\n        int count146 = 0;\n        int count147 = 0;\n        int count148 = 0;\n        int count149 = 0;\n        int count150 = 0;\n        int count151 = 0;\n        int count152 = 0;\n        int count153 = 0;\n        int count154 = 0;\n        int count155 = 0;\n        int count156 = 0;\n        int count157 = 0;\n        int count158 = 0;\n        int count159 = 0;\n        int count160 = 0;\n        int count161 = 0;\n        int count162 = 0;\n        int count163 = 0;\n        int count164 = 0;\n        int count165 = 0;\n        int count166 = 0;\n        int count167 = 0;\n        int count168 = 0;\n        int count169 = 0;\n        int count170 = 0;\n        int count171 = 0;\n        int count172 = 0;\n        int count173 = 0;\n        int count174 = 0;\n        int count175 = 0;\n        int count176 = 0;\n        int count177 = 0;\n        int count178 = 0;\n        int count179 = 0;\n        int count180 = 0;\n        int count181 = 0;\n        int count182 = 0;\n        int count183 = 0;\n        int count184 =", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        int sum = 0;\n        int count = 0;\n        int i = n;\n        while (i <= m) {\n            sum += i;\n            count++;\n            i++;\n        }\n        return (sum / count);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if(n > m)\n            return -1;\n        int n_binary = Integer.toBinaryString(n).length();\n        int m_binary = Integer.toBinaryString(m).length();\n        int n_binary_length = n_binary;\n        int m_binary_length = m_binary;\n        int n_binary_length_minus_one = n_binary_length - 1;\n        int m_binary_length_minus_one = m_binary_length - 1;\n        int n_binary_length_minus_one_binary = Integer.toBinaryString(n_binary_length_minus_one).length();\n        int m_binary_length_minus_one_binary = Integer.toBinaryString(m_binary_length_minus_one).length();\n        int n_binary_length_minus_one_binary_length = n_binary_length_minus_one_binary;\n        int m_binary_length_minus_one_binary_length = m_binary_length_minus_one_binary;\n        int n_binary_length_minus_one_binary_length_minus_one = n_binary_length_minus_one_binary_length - 1;\n        int m_binary_length_minus_one_binary_length_minus_one = m_binary_length_minus_one_binary_length - 1;\n        int n_binary_length_minus_one_binary_length_minus_one_binary = Integer.toBinaryString(n_binary_length_minus_one_binary_length_minus_one).length();\n        int m_binary_length_minus_one_binary_length_minus_one_binary = Integer.toBinaryString(m_binary_length_minus_one_binary_length_minus_one).length();\n        int n_binary_length_minus_one_binary_length_minus_one_binary_length = n_binary_length_minus_one_binary_length_minus_one_binary;\n        int m_binary_length_minus_one_binary_length_minus_one_binary_length = m_binary_length_minus_one_binary_length_minus_one_binary;\n        int n_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one = n_binary_length_minus_one_binary_length_minus_one_binary_length - 1;\n        int m_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one = m_binary_length_minus_one_binary_length_minus_one_binary_length - 1;\n        int n_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary = Integer.toBinaryString(n_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one).length();\n        int m_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary = Integer.toBinaryString(m_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one).length();\n        int n_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length = n_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary;\n        int m_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length = m_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary;\n        int n_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one = n_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length - 1;\n        int m_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one = m_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length - 1;\n        int n_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length = n_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one;\n        int m_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length = m_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one;\n        int n_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one = n_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length - 1;\n        int m_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one = m_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length - 1;\n        int n_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length = n_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one;\n        int m_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length = m_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length - 1;\n        int n_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one = n_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length - 1;\n        int m_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one = m_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length - 1;\n        int n_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length_minus_one_binary_length = n", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        int min = Math.min(n, m);\n        int max = Math.max(n, m);\n        int mid = (min + max) / 2;\n        String binary = Integer.toBinaryString(mid);\n        int count = 0;\n        for (int i = 0; i < binary.length(); i++) {\n            if (binary.charAt(i) == '1') {\n                count++;\n            }\n        }\n        return count == 0 ? -1 : mid;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        int roundedN = (int) Math.round(n);\n        int roundedM = (int) Math.round(m);\n        int roundedAvg = roundedN + roundedM;\n        String roundedAvgString = Integer.toBinaryString(roundedAvg);\n        return roundedAvgString.substring(roundedAvgString.length() - 1);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if(n > m)\n            return -1;\n        int sum = 0;\n        int count = 0;\n        int i = n;\n        while(i <= m) {\n            sum += i;\n            count++;\n            i++;\n        }\n        return (double)sum/count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        int n_binary = Integer.toBinaryString(n).length();\n        int m_binary = Integer.toBinaryString(m).length();\n        int n_binary_length = n_binary.length();\n        int m_binary_length = m_binary.length();\n        int n_binary_index = n_binary_length - 1;\n        int m_binary_index = m_binary_length - 1;\n        int n_binary_sum = 0;\n        int m_binary_sum = 0;\n        int n_binary_avg = 0;\n        int m_binary_avg = 0;\n        int n_binary_avg_index = 0;\n        int m_binary_avg_index = 0;\n        while(n_binary_index >= 0 && m_binary_index >= 0){\n            if(n_binary.charAt(n_binary_index) == '1' && m_binary.charAt(m_binary_index) == '1'){\n                n_binary_sum += 1;\n                m_binary_sum += 1;\n                n_binary_avg += 1;\n                m_binary_avg += 1;\n                n_binary_avg_index += 1;\n                m_binary_avg_index += 1;\n            }\n            else if(n_binary.charAt(n_binary_index) == '1' && m_binary.charAt(m_binary_index) == '0'){\n                n_binary_sum += 1;\n                m_binary_sum += 1;\n                n_binary_avg += 1;\n                m_binary_avg += 1;\n                n_binary_avg_index += 1;\n            }\n            else if(n_binary.charAt(n_binary_index) == '0' && m_binary.charAt(m_binary_index) == '1'){\n                n_binary_sum += 1;\n                m_binary_sum += 1;\n                n_binary_avg += 1;\n                m_binary_avg += 1;\n                n_binary_avg_index += 1;\n                m_binary_avg_index += 1;\n            }\n            else if(n_binary.charAt(n_binary_index) == '0' && m_binary.charAt(m_binary_index) == '0'){\n                n_binary_sum += 1;\n                m_binary_sum += 1;\n                n_binary_avg += 1;\n                m_binary_avg += 1;\n                n_binary_avg_index += 1;\n                m_binary_avg_index += 1;\n            }\n            n_binary_index -= 1;\n            m_binary_index -= 1;\n        }\n        if(n_binary_index == -1 && m_binary_index == -1){\n            return -1;\n        }\n        else if(n_binary_index == -1 && m_binary_index != -1){\n            return n_binary_avg / m_binary_avg;\n        }\n        else if(n_binary_index != -1 && m_binary_index == -1){\n            return n_binary_avg / n_binary_avg;\n        }\n        else{\n            return n_binary_avg / (n_binary_avg + m_binary_avg);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        // Write your code here\n        int sum = 0;\n        int count = 0;\n        int count2 = 0;\n        int count3 = 0;\n        int count4 = 0;\n        int count5 = 0;\n        int count6 = 0;\n        int count7 = 0;\n        int count8 = 0;\n        int count9 = 0;\n        int count10 = 0;\n        int count11 = 0;\n        int count12 = 0;\n        int count13 = 0;\n        int count14 = 0;\n        int count15 = 0;\n        int count16 = 0;\n        int count17 = 0;\n        int count18 = 0;\n        int count19 = 0;\n        int count20 = 0;\n        int count21 = 0;\n        int count22 = 0;\n        int count23 = 0;\n        int count24 = 0;\n        int count25 = 0;\n        int count26 = 0;\n        int count27 = 0;\n        int count28 = 0;\n        int count29 = 0;\n        int count30 = 0;\n        int count31 = 0;\n        int count32 = 0;\n        int count33 = 0;\n        int count34 = 0;\n        int count35 = 0;\n        int count36 = 0;\n        int count37 = 0;\n        int count38 = 0;\n        int count39 = 0;\n        int count40 = 0;\n        int count41 = 0;\n        int count42 = 0;\n        int count43 = 0;\n        int count44 = 0;\n        int count45 = 0;\n        int count46 = 0;\n        int count47 = 0;\n        int count48 = 0;\n        int count49 = 0;\n        int count50 = 0;\n        int count51 = 0;\n        int count52 = 0;\n        int count53 = 0;\n        int count54 = 0;\n        int count55 = 0;\n        int count56 = 0;\n        int count57 = 0;\n        int count58 = 0;\n        int count59 = 0;\n        int count60 = 0;\n        int count61 = 0;\n        int count62 = 0;\n        int count63 = 0;\n        int count64 = 0;\n        int count65 = 0;\n        int count66 = 0;\n        int count67 = 0;\n        int count68 = 0;\n        int count69 = 0;\n        int count70 = 0;\n        int count71 = 0;\n        int count72 = 0;\n        int count73 = 0;\n        int count74 = 0;\n        int count75 = 0;\n        int count76 = 0;\n        int count77 = 0;\n        int count78 = 0;\n        int count79 = 0;\n        int count80 = 0;\n        int count81 = 0;\n        int count82 = 0;\n        int count83 = 0;\n        int count84 = 0;\n        int count85 = 0;\n        int count86 = 0;\n        int count87 = 0;\n        int count88 = 0;\n        int count89 = 0;\n        int count90 = 0;\n        int count91 = 0;\n        int count92 = 0;\n        int count93 = 0;\n        int count94 = 0;\n        int count95 = 0;\n        int count96 = 0;\n        int count97 = 0;\n        int count98 = 0;\n        int count99 = 0;\n        int count100 = 0;\n        int count101 = 0;\n        int count102 = 0;\n        int count103 = 0;\n        int count104 = 0;\n        int count105 = 0;\n        int count106 = 0;\n        int count107 = 0;\n        int count108 = 0;\n        int count109 = 0;\n        int count110 = 0;\n        int count111 = 0;\n        int count112 = 0;\n        int count113 = 0;\n        int count114 = 0;\n        int count115 = 0;\n        int count116 = 0;\n        int count117 = 0;\n        int count118 = 0;\n        int count119 = 0;\n        int count120 = 0;\n        int count121 = 0;\n        int count122 = 0;\n        int count123 = 0;\n        int count124 = 0;\n        int count125 = 0;\n        int count126 = 0;\n        int count127 = 0;\n        int count128 = 0;\n        int count129 = 0;\n        int count130 = 0;\n        int count131 = 0;\n        int count132 = 0;\n        int count133 = 0;\n        int count134 = 0;\n        int count135 = 0;\n        int count136 = 0;\n        int count137 = 0;\n        int count138 = 0;\n        int count139 = 0;\n        int count140 = 0;\n        int count141 = 0;\n        int count142 = 0;\n        int count143 = 0;\n        int count144 = 0;\n        int count145 = 0;\n        int count146 = 0;\n        int count147 = 0;\n        int count148 = 0;\n        int count149 = 0;\n        int count150 = 0;\n        int count151 = 0;\n        int count152 = 0;\n        int count153 = 0;\n        int count154 = 0;\n        int count155 = 0;\n        int count156 = 0;\n        int count157 = 0;\n        int count158 = 0;\n        int count159 = 0;\n        int count160 = 0;\n        int count161 = 0;\n        int count162 = 0;\n        int count163 = 0;\n        int count164 = 0;\n        int count165 = 0;\n        int count166 = 0;\n        int count167 = 0;\n        int count168 = 0;\n        int count169 = 0;\n        int count170 = 0;\n        int count171 = 0;\n        int count172 = 0;\n        int count173 = 0;\n        int count174 = 0;\n        int count175 = 0;\n        int count176 = 0;\n        int count177 = 0;\n        int count178 = 0;\n        int count179 = 0;\n        int count180 = 0;\n        int count181 = 0;\n        int count182 = 0;\n        int count183 = 0;\n        int", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        // Write your code here\n        int n_rounded = (int) Math.round(n);\n        int m_rounded = (int) Math.round(m);\n        int sum = n_rounded + m_rounded;\n        int avg = sum / 2;\n        String binary_avg = Integer.toBinaryString(avg);\n        if (n_rounded > m_rounded) {\n            return -1;\n        }\n        return binary_avg;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if (n > m) {\n            return -1;\n        }\n        int n_binary = Integer.toBinaryString(n).length();\n        int m_binary = Integer.toBinaryString(m).length();\n        int n_binary_length = n_binary;\n        int m_binary_length = m_binary;\n        if (n_binary_length > m_binary_length) {\n            n_binary_length = m_binary_length;\n            m_binary_length = n_binary_length;\n        }\n        int n_binary_length_minus_one = n_binary_length - 1;\n        int m_binary_length_minus_one = m_binary_length - 1;\n        int n_binary_length_minus_one_binary = Integer.toBinaryString(n_binary_length_minus_one).length();\n        int m_binary_length_minus_one_binary = Integer.toBinaryString(m_binary_length_minus_one).length();\n        int n_binary_length_minus_one_binary_length = n_binary_length_minus_one_binary;\n        int m_binary_length_minus_one_binary_length = m_binary_length_minus_one_binary;\n        if (n_binary_length_minus_one_binary_length > m_binary_length_minus_one_binary_length) {\n            n_binary_length_minus_one_binary_length = m_binary_length_minus_one_binary_length;\n            m_binary_length_minus_one_binary_length = n_binary_length_minus_one_binary_length;\n        }\n        int n_binary_length_minus_one_binary_length_minus_one = n_binary_length_minus_one_binary_length - 1;\n        int m_binary_length_minus_one_binary_length_minus_one = m_binary_length_minus_one_binary_length - 1;\n        int n_binary_length_minus_one_binary_length_minus_one_binary = Integer.toBinaryString(n_binary_length_minus_one_binary_length_minus_one).length();\n        int m_binary_length_minus_one_binary_length_minus_one_binary = Integer.toBinaryString(m_binary_length_minus_one_binary_length_minus_one).length();\n        int n_binary_length_minus_one_binary_length_minus_one_binary_length = n_binary_length_minus_one_binary_length_minus_one_binary;\n        int m_binary_length_minus_one_binary_length_minus_one_binary_length = m_binary_length_minus_one_binary_length_minus_one_binary;\n        if (n_binary_length_minus_one_binary_length_minus_one_binary_length > m_binary_length_minus_one_binary_length_minus_one_binary_length) {\n            n_binary_length_minus_one_binary_length_minus_one_binary_length = m_binary_length_minus_one_binary_length_minus_one_binary_length;\n            m_binary_length_minus_one_binary_length_minus_one_binary_length = n_binary_length_minus_one_binary_length_minus_one_binary_length;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        if(n > m) {\n            return -1;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n        // Write your code here\n        if(n>m)\n            return -1;\n        int sum=0;\n        int count=0;\n        int temp=0;\n        while(n<=m){\n            temp=n;\n            n=n+1;\n            sum=sum+temp;\n            count=count+1;\n        }\n        return String.valueOf(sum/count);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < x.size(); i++) {\n            int digit = x.get(i);\n            if (digit % 2 == 0) {\n                continue;\n            }\n            res.add(digit);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < x.size(); i++) {\n            int digit = x.get(i);\n            if (digit % 2 == 0) {\n                continue;\n            }\n            result.add(digit);\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < x.size(); i++) {\n            int num = x.get(i);\n            if (num % 2 == 0) {\n                continue;\n            }\n            res.add(num);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < x.size(); i++) {\n            if (x.get(i) % 2 == 0) {\n                continue;\n            }\n            res.add(x.get(i));\n        }\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < x.size(); i++) {\n            if (x.get(i) % 2 == 0) {\n                continue;\n            }\n            res.add(x.get(i));\n        }\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> res = new ArrayList<>();\n        for(int i = 0; i < x.size(); i++) {\n            if(x.get(i) % 2 == 0) {\n                res.add(x.get(i));\n            }\n        }\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < x.size(); i++) {\n            if (x.get(i) % 2 != 0) {\n                result.add(x.get(i));\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> res = new ArrayList<Integer>();\n        for (int i = 0; i < x.size(); i++) {\n            int num = x.get(i);\n            if (num % 2 == 0) {\n                continue;\n            }\n            res.add(num);\n        }\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> res = new ArrayList<Integer>();\n        for (int i = 0; i < x.size(); i++) {\n            if (x.get(i) % 2 != 0) {\n                res.add(x.get(i));\n            }\n        }\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < x.size(); i++) {\n            if (x.get(i) % 2 == 0) {\n                result.add(x.get(i));\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < x.size(); i++) {\n            if (x.get(i) % 2 == 0) {\n                continue;\n            }\n            res.add(x.get(i));\n        }\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> res = new ArrayList<>();\n        for(int i : x) {\n            if(i % 2 == 0) {\n                res.add(i);\n            }\n        }\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        for(int i: x) {\n            if(i % 2 == 0) {\n                continue;\n            }\n            result.add(i);\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> ans = new ArrayList<Integer>();\n        for (int i : x) {\n            if (i % 2 == 0) {\n                ans.add(i);\n            }\n        }\n        Collections.sort(ans);\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < x.size(); i++) {\n            if (x.get(i) % 2 == 0) {\n                continue;\n            }\n            result.add(x.get(i));\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < x.size(); i++) {\n            if (x.get(i) % 2 != 0) {\n                result.add(x.get(i));\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 0; i < x.size(); i++) {\n            if (x.get(i) % 2 == 0) {\n                continue;\n            }\n            result.add(x.get(i));\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < x.size(); i++) {\n            if (x.get(i) % 2 == 0) {\n                continue;\n            }\n            res.add(x.get(i));\n        }\n        Collections.sort(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < x.size(); i++) {\n            if (x.get(i) % 2 != 0) {\n                result.add(x.get(i));\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n        List<Integer> result = new ArrayList<>();\n        for(int i = 0; i < x.size(); i++) {\n            if(x.get(i) % 2 != 0) {\n                result.add(x.get(i));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> result = new ArrayList<>();\n        if (arr.size() == 0) {\n            return result;\n        }\n        int max = 9;\n        int min = 1;\n        int len = arr.size();\n        for (int i = 0; i < len; i++) {\n            int num = arr.get(i);\n            if (num > max) {\n                max = num;\n            }\n            if (num < min) {\n                min = num;\n            }\n        }\n        for (int i = max; i >= min; i--) {\n            result.add(String.valueOf(i));\n        }\n        Collections.reverse(result);\n        for (int i = 0; i < len; i++) {\n            int num = arr.get(i);\n            if (num >= min && num <= max) {\n                result.set(i, String.valueOf(num));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> result = new ArrayList<>();\n        if (arr.isEmpty()) {\n            return result;\n        }\n        int max = 0;\n        for (int i : arr) {\n            if (i > max) {\n                max = i;\n            }\n        }\n        int min = 1;\n        for (int i : arr) {\n            if (i < min) {\n                min = i;\n            }\n        }\n        for (int i = min; i <= max; i++) {\n            int count = 0;\n            for (int j : arr) {\n                if (j == i) {\n                    count++;\n                }\n            }\n            String name = \"\";\n            switch (count) {\n                case 1:\n                    name = \"One\";\n                    break;\n                case 2:\n                    name = \"Two\";\n                    break;\n                case 3:\n                    name = \"Three\";\n                    break;\n                case 4:\n                    name = \"Four\";\n                    break;\n                case 5:\n                    name = \"Five\";\n                    break;\n                case 6:\n                    name = \"Six\";\n                    break;\n                case 7:\n                    name = \"Seven\";\n                    break;\n                case 8:\n                    name = \"Eight\";\n                    break;\n                case 9:\n                    name = \"Nine\";\n                    break;\n            }\n            result.add(name);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> result = new ArrayList<>();\n        if (arr.isEmpty()) {\n            return result;\n        }\n        int max = 9;\n        int min = 1;\n        int length = arr.size();\n        int[] digits = new int[length];\n        for (int i = 0; i < length; i++) {\n            digits[i] = arr.get(i);\n        }\n        Arrays.sort(digits);\n        for (int i = 0; i < length; i++) {\n            result.add(String.valueOf(digits[i]));\n        }\n        for (int i = 0; i < length; i++) {\n            if (digits[i] != i + 1) {\n                result.set(i, result.get(i) + \" \" + (i + 1));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        // Write your code here\n        List<String> res = new ArrayList<>();\n        if(arr.size() == 0) return res;\n        int max = 9;\n        int min = 1;\n        int len = 0;\n        for(int i : arr) {\n            if(i > max) max = i;\n            if(i < min) min = i;\n            len++;\n        }\n        int[] arr2 = new int[len];\n        int i = 0;\n        for(int j : arr) {\n            arr2[i++] = j;\n        }\n        Arrays.sort(arr2);\n        for(int j : arr2) {\n            res.add(String.valueOf(j));\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        // write your code here\n        List<String> result = new ArrayList<>();\n        if (arr.size() == 0) {\n            return result;\n        }\n        int max = 9;\n        int min = 1;\n        int length = arr.size();\n        int[] digits = new int[length];\n        for (int i = 0; i < length; i++) {\n            digits[i] = arr.get(i);\n        }\n        Arrays.sort(digits);\n        for (int i = 0; i < length; i++) {\n            if (digits[i] == max) {\n                result.add(\"Nine\");\n            } else if (digits[i] == min) {\n                result.add(\"One\");\n            } else {\n                result.add(String.valueOf(digits[i]));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        // write your code here\n        List<String> res = new ArrayList<>();\n        if(arr.isEmpty()) return res;\n        int len = arr.size();\n        int[] arr_int = new int[len];\n        for(int i = 0; i < len; i++) arr_int[i] = arr.get(i);\n        Arrays.sort(arr_int);\n        for(int i = 0; i < len; i++) res.add(String.valueOf(arr_int[i]));\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> result = new ArrayList<>();\n        if (arr.isEmpty()) {\n            return result;\n        }\n        Arrays.sort(arr.toArray());\n        for (int i = 0; i < arr.size(); i++) {\n            result.add(String.valueOf(arr.get(i)));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> res = new ArrayList<>();\n        int n = arr.size();\n        int[] arr_int = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr_int[i] = arr.get(i);\n        }\n        Arrays.sort(arr_int);\n        for (int i = 0; i < n; i++) {\n            res.add(String.valueOf(arr_int[i]));\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        // Write your code here\n        List<String> res = new ArrayList<>();\n        if (arr.size() == 0) return res;\n        Arrays.sort(arr.toArray());\n        for (int i = 0; i < arr.size(); i++) {\n            res.add(String.valueOf(arr.get(i)));\n        }\n        Collections.reverse(res);\n        for (int i = 0; i < res.size(); i++) {\n            res.set(i, res.get(i).charAt(0) + res.get(i).substring(1));\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> res = new ArrayList<>();\n        if (arr.size() == 0) {\n            return res;\n        }\n        int[] arr_int = new int[10];\n        for (int i = 0; i < arr.size(); i++) {\n            arr_int[arr.get(i) - 1]++;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (arr_int[i] > 0) {\n                res.add(i + \" \" + arr_int[i]);\n            }\n        }\n        Collections.reverse(res);\n        for (int i = 0; i < res.size(); i++) {\n            res.set(i, res.get(i).replace(\" \", \"\"));\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> result = new ArrayList<>();\n        if (arr.isEmpty()) {\n            return result;\n        }\n        Arrays.sort(arr.toArray());\n        for (int i = 0; i < arr.size(); i++) {\n            result.add(String.valueOf(arr.get(i)));\n        }\n        Collections.reverse(result);\n        for (int i = 0; i < result.size(); i++) {\n            result.set(i, result.get(i).replace(\"1\", \"One\"));\n            result.set(i, result.get(i).replace(\"2\", \"Two\"));\n            result.set(i, result.get(i).replace(\"3\", \"Three\"));\n            result.set(i, result.get(i).replace(\"4\", \"Four\"));\n            result.set(i, result.get(i).replace(\"5\", \"Five\"));\n            result.set(i, result.get(i).replace(\"6\", \"Six\"));\n            result.set(i, result.get(i).replace(\"7\", \"Seven\"));\n            result.set(i, result.get(i).replace(\"8\", \"Eight\"));\n            result.set(i, result.get(i).replace(\"9\", \"Nine\"));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> result = new ArrayList<>();\n        if (arr.isEmpty()) {\n            return result;\n        }\n        Collections.sort(arr);\n        for (int i = 0; i < arr.size(); i++) {\n            result.add(String.valueOf(arr.get(i)));\n        }\n        Collections.reverse(result);\n        for (int i = 0; i < result.size(); i++) {\n            result.set(i, result.get(i).charAt(0) + \"\");\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        // write your code here\n        List<String> result = new ArrayList<>();\n        if (arr.isEmpty()) {\n            return result;\n        }\n        Collections.sort(arr);\n        for (int i = 0; i < arr.size(); i++) {\n            result.add(String.valueOf(arr.get(i)));\n        }\n        Collections.reverse(result);\n        for (int i = 0; i < result.size(); i++) {\n            result.set(i, result.get(i).charAt(0) + \"\");\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> result = new ArrayList<>();\n        if (arr.isEmpty()) {\n            return result;\n        }\n        int[] digits = new int[10];\n        for (int i = 0; i < arr.size(); i++) {\n            digits[arr.get(i) - 1]++;\n        }\n        for (int i = 0; i < 10; i++) {\n            while (digits[i] > 0) {\n                result.add(i + \" \" + (i + 1));\n                digits[i]--;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        // Write your code here\n        List<String> result = new ArrayList<>();\n        if (arr.size() == 0) {\n            return result;\n        }\n        Arrays.sort(arr.toArray());\n        for (int i = 0; i < arr.size(); i++) {\n            result.add(String.valueOf(arr.get(i)));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> result = new ArrayList<>();\n        if (arr.isEmpty()) {\n            return result;\n        }\n        Arrays.sort(arr.toArray());\n        for (int i = arr.size() - 1; i >= 0; i--) {\n            result.add(String.valueOf(arr.get(i)));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        // Write your code here\n        List<String> result = new ArrayList<>();\n        if (arr.isEmpty()) {\n            return result;\n        }\n        Arrays.sort(arr.toArray());\n        for (int i = 0; i < arr.size(); i++) {\n            result.add(String.valueOf(arr.get(i)));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        // Write your code here\n        List<String> result = new ArrayList<>();\n        if (arr.isEmpty()) {\n            return result;\n        }\n        int max = 9;\n        int min = 1;\n        int len = arr.size();\n        int[] arr_rev = new int[len];\n        for (int i = 0; i < len; i++) {\n            arr_rev[i] = arr.get(i);\n        }\n        Arrays.sort(arr_rev);\n        for (int i = 0; i < len; i++) {\n            if (arr_rev[i] == max) {\n                result.add(\"Nine\");\n            } else if (arr_rev[i] == min) {\n                result.add(\"One\");\n            } else {\n                result.add(String.valueOf(arr_rev[i]));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> res = new ArrayList<>();\n        if (arr.isEmpty()) {\n            return res;\n        }\n        int[] arr_int = new int[10];\n        for (int i = 0; i < arr.size(); i++) {\n            arr_int[arr.get(i) - 1] += 1;\n        }\n        for (int i = 0; i < 10; i++) {\n            if (arr_int[i] > 0) {\n                res.add(i + \" \" + arr_int[i]);\n            }\n        }\n        Collections.reverse(res);\n        for (int i = 0; i < res.size(); i++) {\n            res.set(i, res.get(i).replace(\" \", \"\"));\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n        List<String> result = new ArrayList<>();\n        if (arr.isEmpty()) {\n            return result;\n        }\n\n        // sort the array\n        Collections.sort(arr);\n\n        // reverse the array\n        Collections.reverse(arr);\n\n        // replace each digit by its corresponding name from\n        // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n        for (int i = 0; i < arr.size(); i++) {\n            result.add(String.valueOf(arr.get(i)));\n        }\n\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            } else {\n                result.add(i * f(i - 1).get(0));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                res.add(i);\n            } else {\n                res.add(i * f(i - 1).get(0));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            } else {\n                result.add(i * f(i - 1).get(0));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            } else {\n                result.add(i * f(i - 1).get(0));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> list = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                list.add(i);\n            } else {\n                list.add(i * f(i - 1).get(0));\n            }\n        }\n        return list;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> list = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            if(i % 2 == 0) {\n                list.add(i);\n            } else {\n                list.add(i * f(i - 1).get(0));\n            }\n        }\n        return list;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                res.add(i);\n            } else {\n                res.add(i * f(i - 1).get(0));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            } else {\n                result.add(i * f(i - 1).get(0));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                res.add(i);\n            } else {\n                res.add(i * f(i - 1).get(0));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            } else {\n                result.add(i * f(i - 1).get(0));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            } else {\n                result.add(i * f(i - 1).get(0));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                res.add(i);\n            } else {\n                res.add(i * f(i - 1).get(0));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> res = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                res.add(i);\n            } else {\n                res.add(i * f(i - 1).get(0));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            } else {\n                result.add(i * f(i - 1).get(0));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            } else {\n                result.add(i * f(i - 1).get(0));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        if (n == 0) {\n            return result;\n        }\n        if (n % 2 == 0) {\n            for (int i = 1; i <= n; i++) {\n                result.add(i);\n            }\n        } else {\n            for (int i = 1; i <= n; i++) {\n                result.add(i);\n            }\n            for (int i = n; i >= 2; i--) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> list = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                list.add(i);\n            } else {\n                list.add(i * f(i - 1).get(0));\n            }\n        }\n        return list;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            } else {\n                result.add(i * f(i - 1).get(0));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            } else {\n                result.add(i * f(i - 1).get(0));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.add(i);\n            } else {\n                result.add(i + 1);\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int start = 1;\n        int end = n;\n        while (start <= end) {\n            int count = 0;\n            int num = start;\n            while (num != 0) {\n                num = num / 10;\n                count++;\n            }\n            if (count % 2 == 0) {\n                result.add(start);\n            }\n            start++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> even = new ArrayList<>();\n        List<Integer> odd = new ArrayList<>();\n        int start = 1;\n        int end = n;\n        while (start <= end) {\n            int num = start;\n            while (num != 0) {\n                int rem = num % 10;\n                if (rem % 2 == 0) {\n                    even.add(num);\n                } else {\n                    odd.add(num);\n                }\n                num /= 10;\n            }\n            start++;\n        }\n        return new ArrayList<>(even)\n                .equals(new ArrayList<>(odd)) ? even : odd;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int start = 1;\n        int end = n;\n        while (start <= end) {\n            int count = 0;\n            int num = start;\n            while (num != 0) {\n                num = num / 10;\n                count++;\n            }\n            if (count % 2 == 0) {\n                result.add(start);\n            }\n            start++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int start = 1;\n        int end = n;\n        while(start <= end){\n            int count = 0;\n            int temp = start;\n            while(temp <= end){\n                if(temp % 2 == 0){\n                    count++;\n                }\n                temp++;\n            }\n            if(count % 2 == 0){\n                result.add(start);\n            }\n            start++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> ans = new ArrayList<>();\n        int low = 1, high = n;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (isPalindrome(mid)) {\n                ans.add(mid);\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return ans;\n    }\n\n    private boolean isPalindrome(int n) {\n        String s = Integer.toString(n);\n        return s.equals(s.reverse());\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> even = new ArrayList<>();\n        List<Integer> odd = new ArrayList<>();\n\n        for (int i = 1; i <= n; i++) {\n            if (isPalindrome(i)) {\n                even.add(i);\n            } else {\n                odd.add(i);\n            }\n        }\n\n        return even.size() == odd.size() ? even : odd;\n    }\n\n    /**\n    Given a positive integer n, return true if it is a palindrome, and false otherwise.\n\n    Example 1:\n\n        Input: 121\n        Output: true\n\n    Example 2:\n\n        Input: 123\n        Output: false\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned boolean value.\n     */\n    public boolean isPalindrome(int n) {\n        int reverse = 0;\n        while (n != 0) {\n            int digit = n % 10;\n            reverse = reverse * 10 + digit;\n            n /= 10;\n        }\n\n        return reverse == n;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int start = 1;\n        int end = n;\n        while(start <= end){\n            int count = 0;\n            while(start <= end){\n                if(start % 2 == 0){\n                    count++;\n                }\n                start++;\n            }\n            result.add(count);\n            count = 0;\n            while(start <= end){\n                if(end % 2 == 0){\n                    count++;\n                }\n                end--;\n            }\n            result.add(count);\n            start++;\n            end--;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> ans = new ArrayList<>();\n        int low = 1;\n        int high = n;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            if (isPalindrome(mid)) {\n                ans.add(mid);\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return ans;\n    }\n\n    private boolean isPalindrome(int n) {\n        String str = Integer.toString(n);\n        return str.equals(str.reverse());\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int start = 1;\n        int end = n;\n        while (start <= end) {\n            int sum = 0;\n            int temp = start;\n            while (temp <= end) {\n                sum += temp;\n                temp++;\n            }\n            if (sum % 2 == 0) {\n                result.add(start);\n            }\n            start++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> even = new ArrayList<>();\n        List<Integer> odd = new ArrayList<>();\n        int start = 1;\n        int end = n;\n        while(start <= end){\n            int num = start;\n            while(num % 2 == 0){\n                num = num / 2;\n                even.add(num);\n            }\n            num = end;\n            while(num % 2 == 1){\n                num = num / 2;\n                odd.add(num);\n            }\n            start++;\n            end--;\n        }\n        return Arrays.asList(even.size(), odd.size());\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int start = 1;\n        int end = n;\n        while(start <= end){\n            int count = 0;\n            int num = start;\n            while(num != 0){\n                num = num/10;\n                count++;\n            }\n            if(count % 2 == 0){\n                result.add(start);\n            }\n            start++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int start = 1;\n        int end = n;\n        while (start <= end) {\n            int count = 0;\n            int temp = start;\n            while (temp <= end) {\n                if (temp % 2 == 0) {\n                    count++;\n                }\n                temp++;\n            }\n            if (count % 2 == 0) {\n                result.add(start);\n            }\n            start++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int start = 1;\n        int end = n;\n        while (start <= end) {\n            int count = 0;\n            int temp = start;\n            while (temp <= end) {\n                if (temp % 2 == 0) {\n                    count++;\n                }\n                temp++;\n            }\n            if (count % 2 == 0) {\n                result.add(start);\n            }\n            start++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int start = 1;\n        int end = n;\n        while (start <= end) {\n            int count = 0;\n            int temp = start;\n            while (temp <= end) {\n                if (temp % 2 == 0) {\n                    count++;\n                }\n                temp++;\n            }\n            if (count % 2 == 0) {\n                result.add(start);\n            }\n            start++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> ans = new ArrayList<>();\n        int low = 1, high = n;\n        while(low <= high){\n            int mid = low + (high - low)/2;\n            if(isPalindrome(mid)){\n                ans.add(mid);\n                low = mid + 1;\n            }else{\n                high = mid - 1;\n            }\n        }\n        return ans;\n    }\n\n    private boolean isPalindrome(int n){\n        int rev = 0;\n        while(n != 0){\n            rev = rev * 10 + n % 10;\n            n = n / 10;\n        }\n        return rev == n;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int start = 1;\n        int end = n;\n        while(start <= end){\n            int mid = (start + end) / 2;\n            if(isPalindrome(mid)){\n                result.add(mid);\n                end = mid - 1;\n            }\n            else{\n                start = mid + 1;\n            }\n        }\n        return result;\n    }\n\n    private boolean isPalindrome(int n){\n        int temp = n;\n        int rev = 0;\n        while(temp != 0){\n            rev = rev * 10 + temp % 10;\n            temp = temp / 10;\n        }\n        return n == rev;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int start = 1;\n        int end = n;\n        while(start <= end){\n            int count = 0;\n            while(start <= end && start % 2 == 0){\n                count++;\n                start++;\n            }\n            while(start <= end && start % 2 != 0){\n                count++;\n                start++;\n            }\n            result.add(count);\n            end--;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int start = 1;\n        int end = n;\n        while (start <= end) {\n            int count = 0;\n            int temp = start;\n            while (temp <= end) {\n                if (temp % 2 == 0) {\n                    count++;\n                }\n                temp++;\n            }\n            result.add(count);\n            start++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int start = 1;\n        int end = n;\n        while(start <= end){\n            int count = 0;\n            int temp = start;\n            while(temp <= end){\n                if(temp % 2 == 0){\n                    count++;\n                }\n                temp++;\n            }\n            result.add(count);\n            start++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n        List<Integer> result = new ArrayList<>();\n        int start = 1;\n        int end = n;\n        while (start <= end) {\n            int count = 0;\n            int temp = start;\n            while (temp <= end) {\n                if (temp % 2 == 0) {\n                    count++;\n                }\n                temp++;\n            }\n            if (count % 2 == 0) {\n                result.add(start);\n            }\n            start++;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for(int i : arr) {\n            if(i >= 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            if (num >= 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            if (num >= 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int sum = 0;\n            for (int j = i; j < arr.size(); j++) {\n                sum += arr.get(j);\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            if (num < 0) {\n                num = -num;\n            }\n            int sum = 0;\n            while (num > 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            if (num >= 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            if (num > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            if (num >= 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int sum = 0;\n            for (int j = 0; j < arr.get(i).toString().length(); j++) {\n                sum += arr.get(i).toString().charAt(j) - '0';\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            if (num >= 0) {\n                count++;\n            } else {\n                int firstDigit = num / 10;\n                if (firstDigit >= 0) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            if (num < 0) {\n                num = -num;\n            }\n            int sum = 0;\n            while (num > 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            if (num < 0) {\n                num = -num;\n            }\n            int sum = 0;\n            while (num > 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int sum = 0;\n            for (int j = 0; j < arr.get(i).toString().length(); j++) {\n                sum += Integer.parseInt(arr.get(i).toString().charAt(j).toString());\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) >= 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            if (num >= 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i : arr) {\n            if (i > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i : arr) {\n            if (i > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for(int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n            if(num >= 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int sum = 0;\n            for (int j = 0; j < arr.get(i).toString().length(); j++) {\n                sum += (arr.get(i).toString().charAt(j) - '0');\n            }\n            if (sum > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        if(arr.size() == 0)\n            return true;\n        int n = arr.size();\n        int i = 0;\n        int j = n-1;\n        while(i<j){\n            if(arr.get(i) > arr.get(j))\n                arr.set(i, arr.get(j));\n            else\n                break;\n            i++;\n            j--;\n        }\n        if(i == j)\n            return true;\n        else\n            return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        int n = arr.size();\n        int i = 0;\n        int j = n-1;\n        while(i<j){\n            if(arr.get(i)>arr.get(j)){\n                int temp = arr.get(i);\n                arr.set(i, arr.get(j));\n                arr.set(j, temp);\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        // Write your code here\n        int n = arr.size();\n        int i = 0;\n        int j = n - 1;\n        while (i < j) {\n            if (arr.get(i) > arr.get(j)) {\n                int temp = arr.get(i);\n                arr.set(i, arr.get(j));\n                arr.set(j, temp);\n                i++;\n                j--;\n            } else {\n                j--;\n            }\n        }\n        return i == j;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        if(arr.size() == 0)\n            return true;\n        int n = arr.size();\n        int[] arr1 = new int[n];\n        for(int i = 0; i < n; i++)\n            arr1[i] = arr.get(i);\n        Arrays.sort(arr1);\n        for(int i = 0; i < n; i++)\n            if(arr1[i] != arr.get(i))\n                return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        int n = arr.size();\n        int i = 0;\n        int j = n-1;\n        while(i<j){\n            if(arr.get(i)>arr.get(j)){\n                int temp = arr.get(i);\n                arr.set(i, arr.get(j));\n                arr.set(j, temp);\n                i++;\n                j--;\n            }\n            else{\n                j--;\n            }\n        }\n        return i==j;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        if(arr.size() == 0)\n            return true;\n        int n = arr.size();\n        int i = 0;\n        while(i < n) {\n            if(arr.get(i) > arr.get(i+1)) {\n                int temp = arr.get(i);\n                arr.set(i, arr.get(i+1));\n                arr.set(i+1, temp);\n            }\n            i++;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        if(arr.size() == 0)\n            return true;\n        int n = arr.size();\n        int i = 0;\n        int j = n-1;\n        while(i < j){\n            if(arr.get(i) > arr.get(j))\n                arr.set(i, arr.get(j));\n            else\n                break;\n            i++;\n            j--;\n        }\n        arr.set(i, arr.get(j));\n        arr.set(j, 0);\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        if(arr.size() == 0)\n            return true;\n        int n = arr.size();\n        int i = 0;\n        int j = n-1;\n        while(i < j){\n            if(arr.get(i) > arr.get(j)){\n                int temp = arr.get(i);\n                arr.set(i, arr.get(j));\n                arr.set(j, temp);\n                i++;\n                j--;\n            }\n            else{\n                j--;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        if(arr.size() == 0)\n            return true;\n        int n = arr.size();\n        int i = 0;\n        int j = n-1;\n        while(i < j){\n            if(arr.get(i) > arr.get(j))\n                arr.set(i, arr.get(j));\n            else\n                break;\n            i++;\n            j--;\n        }\n        if(i == j)\n            return true;\n        else\n            return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        if(arr.size() == 0)\n            return true;\n        int n = arr.size();\n        int i = 0;\n        int j = n-1;\n        while(i < j) {\n            if(arr.get(i) > arr.get(j)) {\n                int temp = arr.get(i);\n                arr.set(i, arr.get(j));\n                arr.set(j, temp);\n                i++;\n                j--;\n            }\n            else {\n                j--;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        if(arr.size() == 0)\n            return true;\n        int n = arr.size();\n        int i = 0;\n        while(i < n-1) {\n            if(arr.get(i) > arr.get(i+1)) {\n                int temp = arr.get(i);\n                arr.set(i, arr.get(i+1));\n                arr.set(i+1, temp);\n            }\n            i++;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        // Write your code here\n        int n = arr.size();\n        int i = 0;\n        while(i < n-1) {\n            if(arr.get(i) > arr.get(i+1)) {\n                int temp = arr.get(i);\n                arr.set(i, arr.get(i+1));\n                arr.set(i+1, temp);\n            }\n            i++;\n        }\n        if(i == n-1) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        if(arr.size() == 0)\n            return true;\n        int n = arr.size();\n        int i = 0;\n        int j = n-1;\n        while(i < j) {\n            if(arr.get(i) > arr.get(j)) {\n                int temp = arr.get(i);\n                arr.set(i, arr.get(j));\n                arr.set(j, temp);\n                i++;\n                j--;\n            }\n            else {\n                j--;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        if(arr.size() == 0)\n            return true;\n        int n = arr.size();\n        int i = 0;\n        int j = n-1;\n        while(i < j) {\n            if(arr.get(i) > arr.get(j)) {\n                int temp = arr.get(i);\n                arr.set(i, arr.get(j));\n                arr.set(j, temp);\n                i++;\n                j--;\n            }\n            else {\n                j--;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        int n = arr.size();\n        int i = 0;\n        int j = n - 1;\n        while (i < j) {\n            if (arr.get(i) > arr.get(j)) {\n                arr.set(i, arr.get(j));\n                arr.set(j, arr.get(i));\n                i++;\n                j--;\n            } else {\n                j--;\n            }\n        }\n        return i == j;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        if(arr.size() == 0)\n            return true;\n        int n = arr.size();\n        int i = 0;\n        while(i < n) {\n            if(arr.get(i) > arr.get(i+1)) {\n                int temp = arr.get(i);\n                arr.set(i, arr.get(i+1));\n                arr.set(i+1, temp);\n            }\n            i++;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for(int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        for(int i = 0; i < n; i++) {\n            if(arrCopy[i] != arr.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for(int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        for(int i = 0; i < n; i++) {\n            if(arrCopy[i] != arr.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        int n = arr.size();\n        int i = 0;\n        int j = n-1;\n        while(i<j){\n            if(arr.get(i) > arr.get(j)){\n                int temp = arr.get(i);\n                arr.set(i, arr.get(j));\n                arr.set(j, temp);\n                i++;\n                j--;\n            }\n            else{\n                j--;\n            }\n        }\n        return i == j;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n        int n = arr.size();\n        if(n == 0)\n            return true;\n        int[] arrCopy = new int[n];\n        for(int i = 0; i < n; i++)\n            arrCopy[i] = arr.get(i);\n        Arrays.sort(arrCopy);\n        for(int i = 0; i < n; i++)\n            if(arrCopy[i] != arr.get(i))\n                return false;\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        // Write your code here\n        int n1 = lst1.size();\n        int n2 = lst2.size();\n        if (n1 != n2) {\n            return \"NO\";\n        }\n        int[] arr1 = new int[n1];\n        int[] arr2 = new int[n2];\n        for (int i = 0; i < n1; i++) {\n            arr1[i] = lst1.get(i);\n        }\n        for (int i = 0; i < n2; i++) {\n            arr2[i] = lst2.get(i);\n        }\n        for (int i = 0; i < n1; i++) {\n            if (arr1[i] % 2 == 0) {\n                arr1[i] = arr1[i] / 2;\n            }\n        }\n        for (int i = 0; i < n2; i++) {\n            if (arr2[i] % 2 == 0) {\n                arr2[i] = arr2[i] / 2;\n            }\n        }\n        if (Arrays.equals(arr1, arr2)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        // Write your code here\n        int n1 = lst1.size();\n        int n2 = lst2.size();\n        int[] arr1 = new int[n1];\n        int[] arr2 = new int[n2];\n        for(int i = 0; i < n1; i++) {\n            arr1[i] = lst1.get(i);\n        }\n        for(int i = 0; i < n2; i++) {\n            arr2[i] = lst2.get(i);\n        }\n        int[] arr3 = new int[n1];\n        int[] arr4 = new int[n2];\n        for(int i = 0; i < n1; i++) {\n            if(arr1[i] % 2 == 0) {\n                arr3[i] = arr1[i];\n            } else {\n                arr3[i] = arr1[i] + 1;\n            }\n        }\n        for(int i = 0; i < n2; i++) {\n            if(arr2[i] % 2 == 0) {\n                arr4[i] = arr2[i];\n            } else {\n                arr4[i] = arr2[i] + 1;\n            }\n        }\n        if(arr3.equals(arr4)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int n1 = lst1.size();\n        int n2 = lst2.size();\n        if(n1 != n2) return \"NO\";\n        int[] arr1 = new int[n1];\n        int[] arr2 = new int[n2];\n        for(int i = 0; i < n1; i++) arr1[i] = lst1.get(i);\n        for(int i = 0; i < n2; i++) arr2[i] = lst2.get(i);\n        for(int i = 0; i < n1; i++) {\n            if(arr1[i] % 2 == 0) arr1[i] /= 2;\n            else arr1[i] *= 2;\n        }\n        for(int i = 0; i < n2; i++) {\n            if(arr2[i] % 2 == 0) arr2[i] /= 2;\n            else arr2[i] *= 2;\n        }\n        for(int i = 0; i < n1; i++) {\n            if(arr1[i] != arr2[i]) return \"NO\";\n        }\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        if (lst1.size() != lst2.size()) {\n            return \"NO\";\n        }\n        int[] arr1 = new int[lst1.size()];\n        int[] arr2 = new int[lst2.size()];\n        for (int i = 0; i < lst1.size(); i++) {\n            arr1[i] = lst1.get(i);\n            arr2[i] = lst2.get(i);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        for (int i = 0; i < lst1.size(); i++) {\n            if (arr1[i] != arr2[i]) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int n1 = lst1.size();\n        int n2 = lst2.size();\n        if (n1 == 0 || n2 == 0) {\n            return \"NO\";\n        }\n        int[] arr1 = new int[n1];\n        int[] arr2 = new int[n2];\n        for (int i = 0; i < n1; i++) {\n            arr1[i] = lst1.get(i);\n        }\n        for (int i = 0; i < n2; i++) {\n            arr2[i] = lst2.get(i);\n        }\n        int[] arr3 = new int[n1];\n        int[] arr4 = new int[n2];\n        for (int i = 0; i < n1; i++) {\n            if (arr1[i] % 2 == 0) {\n                arr3[i] = arr1[i];\n            } else {\n                arr3[i] = arr1[i] + 1;\n            }\n        }\n        for (int i = 0; i < n2; i++) {\n            if (arr2[i] % 2 == 0) {\n                arr4[i] = arr2[i];\n            } else {\n                arr4[i] = arr2[i] + 1;\n            }\n        }\n        if (Arrays.equals(arr3, arr4)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int n1 = lst1.size();\n        int n2 = lst2.size();\n        if (n1 != n2) {\n            return \"NO\";\n        }\n        int[] arr1 = new int[n1];\n        int[] arr2 = new int[n2];\n        for (int i = 0; i < n1; i++) {\n            arr1[i] = lst1.get(i);\n        }\n        for (int i = 0; i < n2; i++) {\n            arr2[i] = lst2.get(i);\n        }\n        int[] arr3 = new int[n1];\n        int[] arr4 = new int[n2];\n        for (int i = 0; i < n1; i++) {\n            if (arr1[i] % 2 == 0) {\n                arr3[i] = arr1[i];\n            } else {\n                arr3[i] = arr2[i];\n            }\n        }\n        for (int i = 0; i < n2; i++) {\n            if (arr2[i] % 2 == 0) {\n                arr4[i] = arr2[i];\n            } else {\n                arr4[i] = arr3[i];\n            }\n        }\n        if (Arrays.equals(arr3, arr4)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        if (lst1.size() != lst2.size()) {\n            return \"NO\";\n        }\n        int[] arr1 = new int[lst1.size()];\n        int[] arr2 = new int[lst2.size()];\n        for (int i = 0; i < lst1.size(); i++) {\n            arr1[i] = lst1.get(i);\n            arr2[i] = lst2.get(i);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        for (int i = 0; i < lst1.size(); i++) {\n            if (arr1[i] != arr2[i]) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        if (lst1.size() != lst2.size()) {\n            return \"NO\";\n        }\n        int[] arr1 = new int[lst1.size()];\n        int[] arr2 = new int[lst1.size()];\n        for (int i = 0; i < lst1.size(); i++) {\n            arr1[i] = lst1.get(i);\n            arr2[i] = lst2.get(i);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        for (int i = 0; i < arr1.length; i++) {\n            if (arr1[i] != arr2[i]) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        if (lst1.size() != lst2.size()) {\n            return \"NO\";\n        }\n        int[] arr1 = new int[lst1.size()];\n        int[] arr2 = new int[lst2.size()];\n        for (int i = 0; i < lst1.size(); i++) {\n            arr1[i] = lst1.get(i);\n            arr2[i] = lst2.get(i);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        for (int i = 0; i < lst1.size(); i++) {\n            if (arr1[i] != arr2[i]) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int len1 = lst1.size();\n        int len2 = lst2.size();\n        if(len1 != len2)\n            return \"NO\";\n        int[] arr1 = new int[len1];\n        int[] arr2 = new int[len2];\n        for(int i = 0; i < len1; i++)\n            arr1[i] = lst1.get(i);\n        for(int i = 0; i < len2; i++)\n            arr2[i] = lst2.get(i);\n        for(int i = 0; i < len1; i++)\n            if(arr1[i] % 2 == 0)\n                arr1[i] = arr1[i] / 2;\n            else\n                arr1[i] = arr1[i] * 2;\n        for(int i = 0; i < len2; i++)\n            if(arr2[i] % 2 == 0)\n                arr2[i] = arr2[i] / 2;\n            else\n                arr2[i] = arr2[i] * 2;\n        for(int i = 0; i < len1; i++)\n            if(arr1[i] != arr2[i])\n                return \"NO\";\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int len1 = lst1.size();\n        int len2 = lst2.size();\n        if (len1 != len2) {\n            return \"NO\";\n        }\n        int[] arr1 = new int[len1];\n        int[] arr2 = new int[len2];\n        for (int i = 0; i < len1; i++) {\n            arr1[i] = lst1.get(i);\n        }\n        for (int i = 0; i < len2; i++) {\n            arr2[i] = lst2.get(i);\n        }\n        int[] arr3 = new int[len1];\n        int[] arr4 = new int[len2];\n        for (int i = 0; i < len1; i++) {\n            if (arr1[i] % 2 == 0) {\n                arr3[i] = arr1[i];\n            } else {\n                arr3[i] = arr2[i];\n            }\n        }\n        for (int i = 0; i < len2; i++) {\n            if (arr2[i] % 2 == 0) {\n                arr4[i] = arr2[i];\n            } else {\n                arr4[i] = arr3[i];\n            }\n        }\n        if (Arrays.equals(arr3, arr4)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        if (lst1.size() != lst2.size()) {\n            return \"NO\";\n        }\n        int[] arr1 = new int[lst1.size()];\n        int[] arr2 = new int[lst2.size()];\n        for (int i = 0; i < lst1.size(); i++) {\n            arr1[i] = lst1.get(i);\n        }\n        for (int i = 0; i < lst2.size(); i++) {\n            arr2[i] = lst2.get(i);\n        }\n        for (int i = 0; i < lst1.size(); i++) {\n            if (arr1[i] % 2 == 0) {\n                arr1[i] = arr1[i] / 2;\n            }\n        }\n        for (int i = 0; i < lst2.size(); i++) {\n            if (arr2[i] % 2 == 0) {\n                arr2[i] = arr2[i] / 2;\n            }\n        }\n        for (int i = 0; i < lst1.size(); i++) {\n            if (arr1[i] != arr2[i]) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        // Write your code here\n        int len1 = lst1.size();\n        int len2 = lst2.size();\n        if(len1 == 0 || len2 == 0)\n            return \"NO\";\n        if(len1 == 1 && len2 == 1)\n            return \"YES\";\n        int[] arr1 = new int[len1];\n        int[] arr2 = new int[len2];\n        for(int i = 0; i < len1; i++)\n            arr1[i] = lst1.get(i);\n        for(int i = 0; i < len2; i++)\n            arr2[i] = lst2.get(i);\n        int[] arr3 = new int[len1];\n        int[] arr4 = new int[len2];\n        for(int i = 0; i < len1; i++)\n            arr3[i] = arr1[i] % 2;\n        for(int i = 0; i < len2; i++)\n            arr4[i] = arr2[i] % 2;\n        for(int i = 0; i < len1; i++)\n            arr1[i] = arr3[i];\n        for(int i = 0; i < len2; i++)\n            arr2[i] = arr4[i];\n        int count = 0;\n        for(int i = 0; i < len1; i++)\n            if(arr1[i] == 0)\n                count++;\n        for(int i = 0; i < len2; i++)\n            if(arr2[i] == 0)\n                count++;\n        if(count == len1)\n            return \"YES\";\n        return \"NO\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int n = lst1.size();\n        int m = lst2.size();\n        if (n != m) {\n            return \"NO\";\n        }\n        int[] arr1 = new int[n];\n        int[] arr2 = new int[m];\n        for (int i = 0; i < n; i++) {\n            arr1[i] = lst1.get(i);\n        }\n        for (int i = 0; i < m; i++) {\n            arr2[i] = lst2.get(i);\n        }\n        int[] arr3 = new int[n];\n        int[] arr4 = new int[m];\n        for (int i = 0; i < n; i++) {\n            if (arr1[i] % 2 == 0) {\n                arr3[i] = arr1[i];\n            } else {\n                arr3[i] = arr2[i];\n            }\n        }\n        for (int i = 0; i < m; i++) {\n            if (arr2[i] % 2 == 0) {\n                arr4[i] = arr2[i];\n            } else {\n                arr4[i] = arr3[i];\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (arr3[i] != arr4[i]) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        if (lst1.size() != lst2.size()) {\n            return \"NO\";\n        }\n        int[] arr1 = new int[lst1.size()];\n        int[] arr2 = new int[lst2.size()];\n        for (int i = 0; i < lst1.size(); i++) {\n            arr1[i] = lst1.get(i);\n        }\n        for (int i = 0; i < lst2.size(); i++) {\n            arr2[i] = lst2.get(i);\n        }\n        for (int i = 0; i < lst1.size(); i++) {\n            if (arr1[i] % 2 == 0) {\n                arr1[i] = arr1[i] / 2;\n            }\n        }\n        for (int i = 0; i < lst2.size(); i++) {\n            if (arr2[i] % 2 == 0) {\n                arr2[i] = arr2[i] / 2;\n            }\n        }\n        for (int i = 0; i < lst1.size(); i++) {\n            if (arr1[i] != arr2[i]) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        if (lst1.size() != lst2.size()) {\n            return \"NO\";\n        }\n        int[] arr1 = new int[lst1.size()];\n        int[] arr2 = new int[lst2.size()];\n        for (int i = 0; i < lst1.size(); i++) {\n            arr1[i] = lst1.get(i);\n            arr2[i] = lst2.get(i);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        for (int i = 0; i < arr1.length; i++) {\n            if (arr1[i] != arr2[i]) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        // Write your code here\n        int n1 = lst1.size();\n        int n2 = lst2.size();\n        if(n1 == 0 || n2 == 0)\n            return \"NO\";\n        if(n1 == 1 && n2 == 1)\n            return \"YES\";\n        int[] arr1 = new int[n1];\n        int[] arr2 = new int[n2];\n        for(int i = 0; i < n1; i++)\n            arr1[i] = lst1.get(i);\n        for(int i = 0; i < n2; i++)\n            arr2[i] = lst2.get(i);\n        int[] arr3 = new int[n1];\n        int[] arr4 = new int[n2];\n        for(int i = 0; i < n1; i++)\n            arr3[i] = arr1[i] % 2;\n        for(int i = 0; i < n2; i++)\n            arr4[i] = arr2[i] % 2;\n        for(int i = 0; i < n1; i++)\n            arr1[i] = arr3[i];\n        for(int i = 0; i < n2; i++)\n            arr2[i] = arr4[i];\n        for(int i = 0; i < n1; i++)\n            if(arr1[i] != arr2[i])\n                return \"NO\";\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int len1 = lst1.size();\n        int len2 = lst2.size();\n        if (len1 != len2) {\n            return \"NO\";\n        }\n        int[] arr1 = new int[len1];\n        int[] arr2 = new int[len2];\n        for (int i = 0; i < len1; i++) {\n            arr1[i] = lst1.get(i);\n        }\n        for (int i = 0; i < len2; i++) {\n            arr2[i] = lst2.get(i);\n        }\n        for (int i = 0; i < len1; i++) {\n            if (arr1[i] % 2 == 0) {\n                arr1[i] = arr1[i] / 2;\n            } else {\n                arr1[i] = arr1[i] * 2;\n            }\n        }\n        for (int i = 0; i < len2; i++) {\n            if (arr2[i] % 2 == 0) {\n                arr2[i] = arr2[i] / 2;\n            } else {\n                arr2[i] = arr2[i] * 2;\n            }\n        }\n        if (Arrays.equals(arr1, arr2)) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        int len1 = lst1.size();\n        int len2 = lst2.size();\n        if(len1 == 0 || len2 == 0)\n            return \"NO\";\n        if(len1 == 1 && len2 == 1)\n            return \"YES\";\n        if(len1 == 0 || len2 == 0)\n            return \"NO\";\n        int[] arr1 = new int[len1];\n        int[] arr2 = new int[len2];\n        for(int i = 0; i < len1; i++)\n            arr1[i] = lst1.get(i);\n        for(int i = 0; i < len2; i++)\n            arr2[i] = lst2.get(i);\n        int i = 0;\n        int j = 0;\n        while(i < len1 && j < len2) {\n            if(arr1[i] % 2 == 0)\n                i++;\n            else\n                j++;\n        }\n        if(i == len1)\n            return \"YES\";\n        else\n            return \"NO\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n        if(lst1.size() != lst2.size()) {\n            return \"NO\";\n        }\n        int[] arr1 = new int[lst1.size()];\n        int[] arr2 = new int[lst2.size()];\n        for(int i = 0; i < lst1.size(); i++) {\n            arr1[i] = lst1.get(i);\n            arr2[i] = lst2.get(i);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        int i = 0;\n        int j = 0;\n        while(i < lst1.size() && j < lst2.size()) {\n            if(arr1[i] % 2 == 0) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        if(i == lst1.size()) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> result = new HashMap<String, Integer>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (result.containsKey(word)) {\n                result.put(word, result.get(word) + 1);\n            } else {\n                result.put(word, 1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> map = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (map.containsKey(word)) {\n                map.put(word, map.get(word) + 1);\n            } else {\n                map.put(word, 1);\n            }\n        }\n        return map;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> counts = new HashMap<String, Integer>();\n        for (int i = 0; i < test.length(); i++) {\n            char c = test.charAt(i);\n            if (counts.containsKey(c)) {\n                counts.put(c, counts.get(c) + 1);\n            } else {\n                counts.put(c, 1);\n            }\n        }\n        return counts;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> map = new HashMap<String, Integer>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (map.containsKey(word)) {\n                map.put(word, map.get(word) + 1);\n            } else {\n                map.put(word, 1);\n            }\n        }\n        return map;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> histogram = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (histogram.containsKey(word)) {\n                histogram.put(word, histogram.get(word) + 1);\n            } else {\n                histogram.put(word, 1);\n            }\n        }\n        return histogram;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> histogram = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (histogram.containsKey(word)) {\n                histogram.put(word, histogram.get(word) + 1);\n            } else {\n                histogram.put(word, 1);\n            }\n        }\n        return histogram;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> map = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (map.containsKey(word)) {\n                map.put(word, map.get(word) + 1);\n            } else {\n                map.put(word, 1);\n            }\n        }\n        return map;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> histogram = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (histogram.containsKey(word)) {\n                histogram.put(word, histogram.get(word) + 1);\n            } else {\n                histogram.put(word, 1);\n            }\n        }\n        return histogram;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> result = new HashMap<String, Integer>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (result.containsKey(word)) {\n                result.put(word, result.get(word) + 1);\n            } else {\n                result.put(word, 1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> histogram = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (histogram.containsKey(word)) {\n                histogram.put(word, histogram.get(word) + 1);\n            } else {\n                histogram.put(word, 1);\n            }\n        }\n        return histogram;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> result = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (result.containsKey(word)) {\n                result.put(word, result.get(word) + 1);\n            } else {\n                result.put(word, 1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> result = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (result.containsKey(word)) {\n                result.put(word, result.get(word) + 1);\n            } else {\n                result.put(word, 1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> histogram = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (histogram.containsKey(word)) {\n                histogram.put(word, histogram.get(word) + 1);\n            } else {\n                histogram.put(word, 1);\n            }\n        }\n        return histogram;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> histogram = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (histogram.containsKey(word)) {\n                histogram.put(word, histogram.get(word) + 1);\n            } else {\n                histogram.put(word, 1);\n            }\n        }\n        return histogram;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> histogram = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (histogram.containsKey(word)) {\n                histogram.put(word, histogram.get(word) + 1);\n            } else {\n                histogram.put(word, 1);\n            }\n        }\n        return histogram;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> histogram = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (histogram.containsKey(word)) {\n                histogram.put(word, histogram.get(word) + 1);\n            } else {\n                histogram.put(word, 1);\n            }\n        }\n        return histogram;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> histogram = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (histogram.containsKey(word)) {\n                histogram.put(word, histogram.get(word) + 1);\n            } else {\n                histogram.put(word, 1);\n            }\n        }\n        return histogram;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> map = new HashMap<String, Integer>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (map.containsKey(word)) {\n                map.put(word, map.get(word) + 1);\n            } else {\n                map.put(word, 1);\n            }\n        }\n        return map;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> result = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (result.containsKey(word)) {\n                result.put(word, result.get(word) + 1);\n            } else {\n                result.put(word, 1);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n        Map<String, Integer> histogram = new HashMap<>();\n        String[] words = test.split(\" \");\n        for (String word : words) {\n            if (histogram.containsKey(word)) {\n                histogram.put(word, histogram.get(word) + 1);\n            } else {\n                histogram.put(word, 1);\n            }\n        }\n        return histogram;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        int i = 0;\n        int j = 0;\n        while(i < s.length() && j < c.length()) {\n            if(s.charAt(i) == c.charAt(j)) {\n                i++;\n                j++;\n            } else {\n                result.add(s.charAt(i));\n                i++;\n            }\n        }\n        if(i == s.length()) {\n            result.add(c);\n        }\n        if(j == c.length()) {\n            result.add(s);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == c.charAt(0)) {\n                result.add(s.substring(0, i) + s.substring(i + 1));\n            }\n        }\n        if (result.get(0).equals(result.get(1))) {\n            result.set(0, \"\");\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        char[] sArr = s.toCharArray();\n        char[] cArr = c.toCharArray();\n        int sLen = sArr.length;\n        int cLen = cArr.length;\n        int[] sArrIndex = new int[sLen];\n        int[] cArrIndex = new int[cLen];\n        for (int i = 0; i < sLen; i++) {\n            sArrIndex[i] = -1;\n        }\n        for (int i = 0; i < cLen; i++) {\n            cArrIndex[i] = -1;\n        }\n        for (int i = 0; i < sLen; i++) {\n            for (int j = 0; j < cLen; j++) {\n                if (sArr[i] == cArr[j]) {\n                    sArrIndex[i] = j;\n                    cArrIndex[j] = i;\n                    break;\n                }\n            }\n        }\n        for (int i = 0; i < sLen; i++) {\n            if (sArrIndex[i] != -1) {\n                sArr[i] = cArr[cArrIndex[i]];\n            }\n        }\n        for (int i = 0; i < sLen; i++) {\n            if (sArr[i] != s[i]) {\n                result.add(s[i]);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        if (s == null || c == null) {\n            result.add(null);\n            result.add(null);\n            return result;\n        }\n        char[] sArray = s.toCharArray();\n        char[] cArray = c.toCharArray();\n        int i = 0;\n        int j = 0;\n        while (i < sArray.length && j < cArray.length) {\n            if (sArray[i] == cArray[j]) {\n                i++;\n                j++;\n            } else {\n                result.add(sArray[i]);\n                i++;\n            }\n        }\n        while (i < sArray.length) {\n            result.add(sArray[i]);\n            i++;\n        }\n        while (j < cArray.length) {\n            result.add(cArray[j]);\n            j++;\n        }\n        if (i == sArray.length && j == cArray.length) {\n            result.add(s);\n            result.add(true);\n        } else {\n            result.add(null);\n            result.add(false);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        char[] sArray = s.toCharArray();\n        char[] cArray = c.toCharArray();\n        int i = 0;\n        int j = 0;\n        while(i < sArray.length && j < cArray.length){\n            if(sArray[i] == cArray[j]){\n                i++;\n                j++;\n            }\n            else{\n                result.add(sArray[i]);\n                i++;\n            }\n        }\n        while(i < sArray.length){\n            result.add(sArray[i]);\n            i++;\n        }\n        while(j < cArray.length){\n            result.add(cArray[j]);\n            j++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        char[] sArray = s.toCharArray();\n        char[] cArray = c.toCharArray();\n        int i = 0;\n        int j = 0;\n        while(i < sArray.length && j < cArray.length){\n            if(sArray[i] == cArray[j]){\n                i++;\n                j++;\n            }else{\n                result.add(sArray[i]);\n                i++;\n            }\n        }\n        if(i == sArray.length){\n            result.add(cArray[j]);\n        }\n        if(j == cArray.length){\n            result.add(sArray[i]);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        char[] sArray = s.toCharArray();\n        char[] cArray = c.toCharArray();\n        for (int i = 0; i < sArray.length; i++) {\n            if (sArray[i] == cArray[i]) {\n                result.add(sArray[i]);\n            }\n        }\n        if (isPalindrome(result.toArray(new String[result.size()]))) {\n            result.add(true);\n        } else {\n            result.add(false);\n        }\n        return result;\n    }\n\n    /**\n    Check if the string is palindrome\n    */\n    public boolean isPalindrome(String s) {\n        char[] sArray = s.toCharArray();\n        int left = 0;\n        int right = sArray.length - 1;\n        while (left < right) {\n            if (sArray[left] != sArray[right]) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        char[] sArr = s.toCharArray();\n        char[] cArr = c.toCharArray();\n        int i = 0;\n        int j = 0;\n        while(i < sArr.length && j < cArr.length){\n            if(sArr[i] == cArr[j]){\n                i++;\n                j++;\n            }\n            else{\n                result.add(sArr[i]);\n                i++;\n            }\n        }\n        while(i < sArr.length){\n            result.add(sArr[i]);\n            i++;\n        }\n        while(j < cArr.length){\n            result.add(cArr[j]);\n            j++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        while(i < s.length()){\n            if(s.charAt(i) == c.charAt(j)){\n                i++;\n                j++;\n            }\n            else{\n                result.add(s.charAt(i));\n                i++;\n                j = 0;\n            }\n        }\n        while(i < s.length()){\n            result.add(s.charAt(i));\n            i++;\n        }\n        while(j < c.length()){\n            result.add(c.charAt(j));\n            j++;\n        }\n        while(k < result.size()){\n            result.set(k, result.get(k).toString().charAt(0) + \"\");\n            k++;\n        }\n        result.add(result.get(0).toString().charAt(0) + \"\");\n        result.add(result.get(result.size()-1).toString().charAt(0) + \"\");\n        result.add(result.get(result.size()-2).toString().charAt(0) + \"\");\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        if (s == null || c == null || s.length() == 0 || c.length() == 0) {\n            result.add(null);\n            result.add(false);\n            return result;\n        }\n        char[] sArr = s.toCharArray();\n        char[] cArr = c.toCharArray();\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s1 = 0;\n        int s2 = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        while (i < sArr.length) {\n            if (sArr[i] == cArr[j]) {\n                i++;\n                j++;\n            } else {\n                if (j > 0) {\n                    j = 0;\n                } else {\n                    result.add(null);\n                    result.add(false);\n                    return result;\n                }\n            }\n        }\n        if (j > 0) {\n            j = 0;\n        } else {\n            result.add(null);\n            result.add(false);\n            return result;\n        }\n        if (i == sArr.length) {\n            result.add(s);\n            result.add(true);\n            return result;\n        }\n        while (i < sArr.length) {\n            if (sArr[i] == cArr[j]) {\n                i++;\n                j++;\n            } else {\n                if (j > 0) {\n                    j = 0;\n                } else {\n                    result.add(null);\n                    result.add(false);\n                    return result;\n                }\n            }\n        }\n        if (j > 0) {\n            j = 0;\n        } else {\n            result.add(null);\n            result.add(false);\n            return result;\n        }\n        if (i == sArr.length) {\n            result.add(s);\n            result.add(true);\n            return result;\n        }\n        while (i < sArr.length) {\n            if (sArr[i] == cArr[j]) {\n                i++;\n                j++;\n            } else {\n                if (j > 0) {\n                    j = 0;\n                } else {\n                    result.add(null);\n                    result.add(false);\n                    return result;\n                }\n            }\n        }\n        if (j > 0) {\n            j = 0;\n        } else {\n            result.add(null);\n            result.add(false);\n            return result;\n        }\n        if (i == sArr.length) {\n            result.add(s);\n            result.add(true);\n            return result;\n        }\n        while (i < sArr.length) {\n            if (sArr[i] == cArr[j]) {\n                i++;\n                j++;\n            } else {\n                if (j > 0) {\n                    j = 0;\n                } else {\n                    result.add(null);\n                    result.add(false);\n                    return result;\n                }\n            }\n        }\n        if (j > 0) {\n            j = 0;\n        } else {\n            result.add(null);\n            result.add(false);\n            return result;\n        }\n        if (i == sArr.length) {\n            result.add(s);\n            result.add(true);\n            return result;\n        }\n        while (i < sArr.length) {\n            if (sArr[i] == cArr[j]) {\n                i++;\n                j++;\n            } else {\n                if (j > 0) {\n                    j = 0;\n                } else {\n                    result.add(null);\n                    result.add(false);\n                    return result;\n                }\n            }\n        }\n        if (j > 0) {\n            j = 0;\n        } else {\n            result.add(null);\n            result.add(false);\n            return result;\n        }\n        if (i == sArr.length) {\n            result.add(s);\n            result.add(true);\n            return result;\n        }\n        while (i < sArr.length) {\n            if (sArr[i] == cArr[j]) {\n                i++;\n                j++;\n            } else {\n                if (j > 0) {\n                    j = 0;\n                } else {\n                    result.add(null);\n                    result.add(false);\n                    return result;\n                }\n            }\n        }\n        if (j > 0) {\n            j = 0;\n        } else {\n            result.add(null);\n            result.add(false);\n            return result;\n        }\n        if (i == sArr.length) {\n            result.add(s);\n            result.add(true);\n            return result;\n        }\n        while (i < sArr.length) {\n            if (sArr[i] == cArr[j]) {\n                i++;\n                j++;\n            } else {\n                if (j > 0) {\n                    j = 0;\n                } else {\n                    result.add(null);\n                    result.add(false);\n                    return result;\n                }\n            }\n        }\n        if (j > 0) {\n            j = 0;\n        } else {\n            result.add(null);\n            result.add(false);\n            return result;\n        }\n        if (i == sArr.length) {\n            result.add(s);\n            result.add(true);\n            return result;\n        }\n        while (i < sArr.length) {\n            if (sArr[i] == cArr[j]) {\n                i++;\n                j++;\n            } else {\n                if (j > 0) {\n                    j = 0;\n                } else {\n                    result.add(null);\n                    result.add(false);\n                    return result;\n                }\n            }\n        }\n        if (j > 0) {\n            j = 0;\n        } else {\n            result.add(null);\n            result.add(false);\n            return result;\n        }\n        if (i == sArr.length) {\n            result.add(s);\n            result.add(true);\n            return result;\n        }\n        while (i < sArr.length) {\n            if (sArr[i] == cArr[j]) {\n                i++;\n                j++;\n            } else {\n                if (j > 0) {\n                    j = 0;\n                } else {\n                    result.add(null);\n                    result.add(false);\n                    return result;\n                }\n            }\n        }\n        if (j > 0) {\n            j = 0;\n        } else {\n            result.add(null);\n            result.add(false);\n            return result;\n        }\n        if (i == sArr.length) {\n            result.add(s);\n            result.add(true);\n            return result;\n        }\n        while (i < sArr.length) {\n            if (sArr[i] == cArr[j]) {\n                i++;\n                j++;\n            } else {\n                if (j > 0) {\n                    j = 0;\n                } else {\n                    result.add(null);\n                    result.add(false);\n                    return result;\n                }\n            }\n        }\n        if (j > 0) {\n            j = 0;\n        } else {\n            result.add(null);\n            result.add(false);\n            return result;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        char[] sArray = s.toCharArray();\n        char[] cArray = c.toCharArray();\n        int sLength = sArray.length;\n        int cLength = cArray.length;\n        int sIndex = 0;\n        int cIndex = 0;\n        while(sIndex < sLength && cIndex < cLength) {\n            if(sArray[sIndex] == cArray[cIndex]) {\n                sIndex++;\n                cIndex++;\n            } else {\n                result.add(sArray[sIndex]);\n                sIndex++;\n            }\n        }\n        if(sIndex == sLength) {\n            result.add(cArray[cIndex]);\n        }\n        if(cIndex == cLength) {\n            result.add(sArray[sIndex]);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == c.charAt(0)) {\n                result.add(s.substring(0, i) + s.substring(i + 1));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s1 = 0;\n        int s2 = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i1 = 0;\n        int j1 = 0;\n        int k1 = 0;\n        int l1 = 0;\n        int m1 = 0;\n        int n1 = 0;\n        int o1 = 0;\n        int p1 = 0;\n        int q1 = 0;\n        int r1 = 0;\n        int s11 = 0;\n        int s21 = 0;\n        int t1 = 0;\n        int u1 = 0;\n        int v1 = 0;\n        int w1 = 0;\n        int x1 = 0;\n        int y1 = 0;\n        int z1 = 0;\n        int a1 = 0;\n        int b1 = 0;\n        int c1 = 0;\n        int d1 = 0;\n        int e1 = 0;\n        int f1 = 0;\n        int g1 = 0;\n        int h1 = 0;\n        int i2 = 0;\n        int j2 = 0;\n        int k2 = 0;\n        int l2 = 0;\n        int m2 = 0;\n        int n2 = 0;\n        int o2 = 0;\n        int p2 = 0;\n        int q2 = 0;\n        int r2 = 0;\n        int s22 = 0;\n        int s3 = 0;\n        int t2 = 0;\n        int u2 = 0;\n        int v2 = 0;\n        int w2 = 0;\n        int x2 = 0;\n        int y2 = 0;\n        int z2 = 0;\n        int a2 = 0;\n        int b2 = 0;\n        int c2 = 0;\n        int d2 = 0;\n        int e2 = 0;\n        int f2 = 0;\n        int g2 = 0;\n        int h2 = 0;\n        int i3 = 0;\n        int j3 = 0;\n        int k3 = 0;\n        int l3 = 0;\n        int m3 = 0;\n        int n3 = 0;\n        int o3 = 0;\n        int p3 = 0;\n        int q3 = 0;\n        int r3 = 0;\n        int s33 = 0;\n        int s4 = 0;\n        int t3 = 0;\n        int u3 = 0;\n        int v3 = 0;\n        int w3 = 0;\n        int x3 = 0;\n        int y3 = 0;\n        int z3 = 0;\n        int a3 = 0;\n        int b3 = 0;\n        int c3 = 0;\n        int d3 = 0;\n        int e3 = 0;\n        int f3 = 0;\n        int g3 = 0;\n        int h3 = 0;\n        int i4 = 0;\n        int j4 = 0;\n        int k4 = 0;\n        int l4 = 0;\n        int m4 = 0;\n        int n4 = 0;\n        int o4 = 0;\n        int p4 = 0;\n        int q4 = 0;\n        int r4 = 0;\n        int s44 = 0;\n        int s5 = 0;\n        int t4 = 0;\n        int u4 = 0;\n        int v4 = 0;\n        int w4 = 0;\n        int x4 = 0;\n        int y4 = 0;\n        int z4 = 0;\n        int a4 = 0;\n        int b4 = 0;\n        int c4 = 0;\n        int d4 = 0;\n        int e4 = 0;\n        int f4 = 0;\n        int g4 = 0;\n        int h4 = 0;\n        int i5 = 0;\n        int j5 = 0;\n        int k5 = 0;\n        int l5 = 0;\n        int m5 = 0;\n        int n5 = 0;\n        int o5 = 0;\n        int p5 = 0;\n        int q5 = 0;\n        int r5 = 0;\n        int s55 = 0;\n        int s6 = 0;\n        int t5 = 0;\n        int u5 = 0;\n        int v5 = 0;\n        int w5 = 0;\n        int x5 = 0;\n        int y5 = 0;\n        int z5 = 0;\n        int a5 = 0;\n        int b5 = 0;\n        int c5 = 0;\n        int d5 = 0;\n        int e5 = 0;\n        int f5 = 0;\n        int g5 = 0;\n        int h5 = 0;\n        int i6 = 0;\n        int j6 = 0;\n        int k6 = 0;\n        int l6 = 0;\n        int m6 = 0;\n        int n6 = 0;\n        int o6 = 0;\n        int p6 = 0;\n        int q6 = 0;\n        int r6 = 0;\n        int s66 = 0;\n        int s7 = 0;\n        int t6 = 0;\n        int u6 = 0;\n        int v6 = 0;\n        int w6 = 0;\n        int x6 = 0;\n        int y6 = 0;\n        int z6 = 0;\n        int a6 = 0;\n        int b6 = 0;\n        int c6 = 0;\n        int d6 = 0;\n        int e6 = 0;\n        int f6 = 0;\n        int g6 = 0;\n        int h6 = 0;\n        int i7 = 0;\n        int j7 = 0;\n        int k7 = 0;\n        int l7 = 0;\n        int m7 = 0;\n        int n7 = 0;\n        int o7 = 0;\n        int p7 = 0;\n        int q7 = 0;\n        int r7 = 0;\n        int s77 = 0;\n        int s8 = 0;\n        int t7 = 0;\n        int u7 = 0;\n        int v7 = 0;\n        int w7 = 0;\n        int x7 = 0;\n        int y7 = 0;\n        int z7 = 0;\n        int a7 = 0;\n        int b7 = 0;\n        int c7 = 0;\n        int d7 = 0", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        int i = 0;\n        int j = 0;\n        while (i < s.length() && j < c.length()) {\n            if (s.charAt(i) == c.charAt(j)) {\n                i++;\n                j++;\n            } else {\n                result.add(s.charAt(i));\n                i++;\n            }\n        }\n        if (i == s.length()) {\n            result.add(s.charAt(i));\n        }\n        if (j == c.length()) {\n            result.add(c.charAt(j));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        int i = 0;\n        int j = 0;\n        int n = s.length();\n        int m = c.length();\n        while(i < n && j < m) {\n            if(s.charAt(i) == c.charAt(j)) {\n                i++;\n                j++;\n            } else {\n                result.add(s.charAt(i));\n                i++;\n            }\n        }\n        while(i < n) {\n            result.add(s.charAt(i));\n            i++;\n        }\n        while(j < m) {\n            result.add(c.charAt(j));\n            j++;\n        }\n        result.add(s.charAt(n-1));\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        int i = 0;\n        int j = 0;\n        while (i < s.length() && j < c.length()) {\n            if (s.charAt(i) == c.charAt(j)) {\n                i++;\n                j++;\n            } else {\n                result.add(s.charAt(i));\n                i++;\n            }\n        }\n        if (i == s.length()) {\n            result.add(s.charAt(i));\n        }\n        if (j == c.length()) {\n            result.add(c.charAt(j));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        char[] sArr = s.toCharArray();\n        char[] cArr = c.toCharArray();\n        for(int i = 0; i < sArr.length; i++){\n            if(sArr[i] == cArr[i]){\n                result.add(sArr[i]);\n            }\n        }\n        if(result.size() == 0){\n            result.add(s);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        if (s == null || s.length() == 0) {\n            result.add(null);\n            result.add(false);\n            return result;\n        }\n        char[] sArr = s.toCharArray();\n        char[] cArr = c.toCharArray();\n        char[] resultArr = new char[sArr.length];\n        int resultIndex = 0;\n        for (int i = 0; i < sArr.length; i++) {\n            if (sArr[i] == cArr[0]) {\n                resultArr[resultIndex] = sArr[i];\n                resultIndex++;\n            }\n        }\n        resultArr[resultIndex] = '\\0';\n        result.add(new String(resultArr));\n        result.add(isPalindrome(new String(resultArr)));\n        return result;\n    }\n\n    /**\n    Check if the string is palindrome\n    */\n    public boolean isPalindrome(String s) {\n        if (s == null || s.length() == 0) {\n            return true;\n        }\n        char[] sArr = s.toCharArray();\n        int left = 0;\n        int right = sArr.length - 1;\n        while (left < right) {\n            if (sArr[left] != sArr[right]) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        int i = 0;\n        int j = 0;\n        while (i < s.length()) {\n            if (s.charAt(i) == c.charAt(j)) {\n                i++;\n                j++;\n            } else {\n                result.add(s.charAt(i));\n                i++;\n                j = 0;\n            }\n        }\n        result.add(s.charAt(i));\n        result.add(s.charAt(i));\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n        List<Object> result = new ArrayList<>();\n        int i = 0;\n        int j = 0;\n        while(i < s.length() && j < c.length()) {\n            if(s.charAt(i) == c.charAt(j)) {\n                i++;\n                j++;\n            } else {\n                result.add(s.charAt(i));\n                i++;\n            }\n        }\n        while(i < s.length()) {\n            result.add(s.charAt(i));\n            i++;\n        }\n        while(j < c.length()) {\n            result.add(c.charAt(j));\n            j++;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            String str = lst.get(i);\n            int count = 0;\n            for (int j = 0; j < str.length(); j++) {\n                if (Character.isDigit(str.charAt(j))) {\n                    count++;\n                }\n            }\n            result.add(String.valueOf(count));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> res = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            String s = lst.get(i);\n            int n = 0;\n            for (int j = 0; j < s.length(); j++) {\n                if (Character.isDigit(s.charAt(j))) {\n                    n++;\n                }\n            }\n            res.add(String.valueOf(n));\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> oddCount = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            String s = lst.get(i);\n            int count = 0;\n            for (char c : s.toCharArray()) {\n                if (Character.isDigit(c)) {\n                    count++;\n                }\n            }\n            if (count % 2 == 1) {\n                oddCount.add(\"the number of odd elements \" + count + \" the str\" + i + \" of the \" + i + \"put.\");\n            }\n        }\n        return oddCount;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> res = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            String s = lst.get(i);\n            int count = 0;\n            for (int j = 0; j < s.length(); j++) {\n                if (Character.isDigit(s.charAt(j))) {\n                    count++;\n                }\n            }\n            if (count % 2 == 1) {\n                res.add(\"the number of odd elements \" + count + \" the str\" + i + \" of the \" + i + \"put.\");\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> result = new ArrayList<String>();\n        for (int i = 0; i < lst.size(); i++) {\n            String str = lst.get(i);\n            int count = 0;\n            for (int j = 0; j < str.length(); j++) {\n                if (Character.isDigit(str.charAt(j))) {\n                    count++;\n                }\n            }\n            if (count % 2 == 1) {\n                result.add(\"the number of odd elements \" + count + \" the str\" + i + \" of the \" + count + \"put.\");\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> res = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            String s = lst.get(i);\n            int n = 0;\n            for (int j = 0; j < s.length(); j++) {\n                if (Character.isDigit(s.charAt(j))) {\n                    n++;\n                }\n            }\n            res.add(String.valueOf(n));\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> ans = new ArrayList<String>();\n        for (int i = 0; i < lst.size(); i++) {\n            String s = lst.get(i);\n            int count = 0;\n            for (int j = 0; j < s.length(); j++) {\n                if (Character.isDigit(s.charAt(j))) {\n                    count++;\n                }\n            }\n            if (count % 2 == 1) {\n                ans.add(\"the number of odd elements \" + count + \" the str\" + i + \" of the \" + i + \"put.\");\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> res = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            String s = lst.get(i);\n            int count = 0;\n            for (int j = 0; j < s.length(); j++) {\n                if (Character.isDigit(s.charAt(j))) {\n                    count++;\n                }\n            }\n            res.add(String.valueOf(count));\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> oddCountList = new ArrayList<String>();\n        for (int i = 0; i < lst.size(); i++) {\n            String str = lst.get(i);\n            int count = 0;\n            for (int j = 0; j < str.length(); j++) {\n                if (Character.isDigit(str.charAt(j))) {\n                    count++;\n                }\n            }\n            if (count % 2 == 1) {\n                oddCountList.add(\"the number of odd elements \" + count + \" the str\" + i + \" of the \" + count + \"nput.\");\n            }\n        }\n        return oddCountList;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> res = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            String s = lst.get(i);\n            int count = 0;\n            for (int j = 0; j < s.length(); j++) {\n                if (Character.isDigit(s.charAt(j))) {\n                    count++;\n                }\n            }\n            if (count % 2 == 1) {\n                res.add(\"the number of odd elements \" + count + \" the str\" + i + \" of the \" + i + \"put.\");\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> output = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            String str = lst.get(i);\n            int count = 0;\n            for (int j = 0; j < str.length(); j++) {\n                if (str.charAt(j) % 2 != 0) {\n                    count++;\n                }\n            }\n            output.add(String.format(\"the number of odd elements %d the str%dng %d of the %dput.\", count, i, count, lst.size()));\n        }\n        return output;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> result = new ArrayList<String>();\n        for (int i = 0; i < lst.size(); i++) {\n            String str = lst.get(i);\n            int count = 0;\n            for (int j = 0; j < str.length(); j++) {\n                if (Character.isDigit(str.charAt(j))) {\n                    count++;\n                }\n            }\n            if (count % 2 == 1) {\n                result.add(\"the number of odd elements \" + count + \" the str\" + i + \" of the \" + i + \"put.\");\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> res = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            String s = lst.get(i);\n            int count = 0;\n            for (int j = 0; j < s.length(); j++) {\n                if (Character.isDigit(s.charAt(j))) {\n                    count++;\n                }\n            }\n            if (count % 2 != 0) {\n                res.add(\"the number of odd elements \" + count + \" the str\" + i + \" of the \" + i + \"put.\");\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> res = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            String s = lst.get(i);\n            int count = 0;\n            for (int j = 0; j < s.length(); j++) {\n                if (Character.isDigit(s.charAt(j))) {\n                    count++;\n                }\n            }\n            if (count % 2 == 1) {\n                res.add(\"the number of odd elements \" + count + \" the str\" + i + \" of the \" + i + \"put.\");\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            String str = lst.get(i);\n            int count = 0;\n            for (int j = 0; j < str.length(); j++) {\n                if (Character.isDigit(str.charAt(j))) {\n                    count++;\n                }\n            }\n            if (count % 2 == 1) {\n                result.add(\"the number of odd elements \" + count + \" the str\" + i + \" of the \" + i + \"put.\");\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> output = new ArrayList<String>();\n        for (int i = 0; i < lst.size(); i++) {\n            String s = lst.get(i);\n            int count = 0;\n            for (int j = 0; j < s.length(); j++) {\n                if (Character.isDigit(s.charAt(j))) {\n                    count++;\n                }\n            }\n            if (count % 2 == 1) {\n                output.add(\"the number of odd elements \" + count + \" the str\" + i + \" of the \" + count + \"nput.\");\n            }\n        }\n        return output;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> res = new ArrayList<String>();\n        for (int i = 0; i < lst.size(); i++) {\n            String s = lst.get(i);\n            int count = 0;\n            for (int j = 0; j < s.length(); j++) {\n                if (Character.isDigit(s.charAt(j))) {\n                    count++;\n                }\n            }\n            if (count % 2 == 1) {\n                res.add(\"the number of odd elements \" + count + \" the str\" + i + \" of the \" + i + \"put.\");\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> res = new ArrayList<String>();\n        for (int i = 0; i < lst.size(); i++) {\n            String s = lst.get(i);\n            int count = 0;\n            for (int j = 0; j < s.length(); j++) {\n                if (Character.isDigit(s.charAt(j))) {\n                    count++;\n                }\n            }\n            if (count % 2 == 1) {\n                res.add(\"the number of odd elements \" + count + \" the str\" + i + \" of the \" + i + \"put.\");\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> result = new ArrayList<String>();\n        for (int i = 0; i < lst.size(); i++) {\n            String str = lst.get(i);\n            int count = 0;\n            for (int j = 0; j < str.length(); j++) {\n                if (Character.isDigit(str.charAt(j))) {\n                    count++;\n                }\n            }\n            if (count % 2 == 1) {\n                result.add(\"the number of odd elements \" + count + \" the str\" + i + \" of the \" + count + \"nput.\");\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n        List<String> oddCount = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            String str = lst.get(i);\n            int count = 0;\n            for (int j = 0; j < str.length(); j++) {\n                if (Character.isDigit(str.charAt(j))) {\n                    count++;\n                }\n            }\n            if (count % 2 != 0) {\n                oddCount.add(\"the number of odd elements \" + count + \" the str\" + i + \" of the \" + i + \"put.\");\n            }\n        }\n        return oddCount;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum < 0) {\n                sum = 0;\n            }\n            if (sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int min = Integer.MAX_VALUE;\n        for (int num : nums) {\n            sum += num;\n            min = Math.min(min, sum);\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int min = Integer.MAX_VALUE;\n        for (int num : nums) {\n            sum += num;\n            if (sum < 0) {\n                sum = 0;\n            }\n            if (sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum < 0) {\n                sum = 0;\n            }\n            if (sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum < 0) {\n                sum = 0;\n            }\n            if (sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum < 0) {\n                sum = 0;\n            }\n            if (sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum < 0) {\n                sum = 0;\n            }\n            if (sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int min = Integer.MAX_VALUE;\n        for(int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if(sum < 0) {\n                sum = 0;\n            }\n            if(sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum < 0) {\n                sum = 0;\n            }\n            if (sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum < 0) {\n                sum = 0;\n            }\n            if (sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum < 0) {\n                sum = 0;\n            }\n            if (sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum < 0) {\n                sum = 0;\n            }\n            if (sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int min = Integer.MAX_VALUE;\n        for (int num : nums) {\n            sum += num;\n            if (sum < 0) {\n                sum = 0;\n            }\n            if (sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum < 0) {\n                sum = 0;\n            }\n            if (sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int min = Integer.MAX_VALUE;\n        for(int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if(sum < 0) {\n                sum = 0;\n            }\n            if(sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum < 0) {\n                sum = 0;\n            }\n            if (sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum < 0) {\n                sum = 0;\n            }\n            if (sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum < 0) {\n                sum = 0;\n            }\n            if (sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n        int sum = 0;\n        int min = Integer.MAX_VALUE;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if (sum < 0) {\n                sum = 0;\n            }\n            if (sum < min) {\n                min = sum;\n            }\n        }\n        return min;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    ans++;\n                }\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    if (dp[i][j] == 1) {\n                        dp[i][j] = 0;\n                    } else {\n                        dp[i][j] = 1;\n                    }\n                }\n            }\n        }\n        int res = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    res++;\n                }\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                    ans++;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    for (int k = 0; k < capacity; k++) {\n                        dp[i][j] = 0;\n                        ans++;\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    if (dp[i][j] == 1) {\n                        dp[i][j] = 0;\n                    } else {\n                        dp[i][j] = 1;\n                    }\n                }\n            }\n        }\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    ans++;\n                }\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        int ans = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                    ans++;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == 1) {\n                    int bucket = 0;\n                    for(int k = j; k < m; k++) {\n                        if(grid[i][k] == 1) {\n                            bucket++;\n                        } else {\n                            break;\n                        }\n                    }\n                    if(bucket == capacity) {\n                        dp[i][j] = 0;\n                        ans++;\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    ans++;\n                    for (int k = 0; k < m; k++) {\n                        if (grid[i][k] == 1) {\n                            dp[i][k] = 1;\n                        } else {\n                            dp[i][k] = 0;\n                        }\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    int bucket = 0;\n                    for (int k = j; k < m; k++) {\n                        if (dp[i][k] == 1) {\n                            bucket++;\n                        } else {\n                            break;\n                        }\n                    }\n                    if (bucket >= capacity) {\n                        ans++;\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    ans++;\n                    int bucket = 0;\n                    while (bucket < capacity && j + bucket < m && grid[i][j + bucket] == 1) {\n                        bucket++;\n                    }\n                    dp[i][j] = bucket;\n                }\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    dp[i][j] = 0;\n                    ans++;\n                }\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    int bucket = 0;\n                    for (int k = j; k < m; k++) {\n                        if (grid[i][k] == 1) {\n                            bucket++;\n                        } else {\n                            break;\n                        }\n                    }\n                    dp[i][j] = bucket;\n                }\n            }\n        }\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    ans++;\n                }\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    dp[i][j] = 0;\n                    ans++;\n                }\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for(int i=0; i<n; i++) {\n            for(int j=0; j<m; j++) {\n                if(grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        int ans = 0;\n        for(int i=0; i<n; i++) {\n            for(int j=0; j<m; j++) {\n                if(dp[i][j] == 1) {\n                    dp[i][j] = 0;\n                    for(int k=0; k<capacity; k++) {\n                        if(grid[i][j+k] == 1) {\n                            dp[i][j] += 1;\n                            break;\n                        }\n                    }\n                    ans += dp[i][j];\n                }\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    int bucket = 0;\n                    for (int k = j; k < m; k++) {\n                        if (grid[i][k] == 1) {\n                            bucket++;\n                        } else {\n                            break;\n                        }\n                    }\n                    if (bucket >= capacity) {\n                        ans++;\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    int bucket = 0;\n                    for (int k = j; k < m; k++) {\n                        if (grid[i][k] == 1) {\n                            bucket++;\n                        } else {\n                            break;\n                        }\n                    }\n                    if (bucket >= capacity) {\n                        ans++;\n                    }\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    for (int k = 0; k < capacity; k++) {\n                        if (j + k >= 0 && j + k < m && dp[i][j + k] == 1) {\n                            dp[i][j] += 1;\n                        }\n                    }\n                }\n            }\n        }\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] > ans) {\n                    ans = dp[i][j];\n                }\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        int res = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == 1) {\n                    res++;\n                    for(int k = 0; k < m; k++) {\n                        if(grid[i][k] == 1) {\n                            dp[i][k] = 1;\n                        } else {\n                            dp[i][k] = 0;\n                        }\n                    }\n                }\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    ans++;\n                }\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        int ans = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(dp[i][j] == 1) {\n                    dp[i][j] = 0;\n                    ans++;\n                }\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        int res = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] == 1) {\n                    res++;\n                    if (j + 1 < m && grid[i][j + 1] == 1) {\n                        dp[i][j] = 1;\n                    } else if (i + 1 < n && grid[i + 1][j] == 1) {\n                        dp[i][j] = 1;\n                    } else if (i - 1 >= 0 && grid[i - 1][j] == 1) {\n                        dp[i][j] = 1;\n                    } else if (j - 1 >= 0 && grid[i][j - 1] == 1) {\n                        dp[i][j] = 1;\n                    } else if (j + 1 < m && i + 1 < n && grid[i + 1][j + 1] == 1) {\n                        dp[i][j] = 1;\n                    } else if (j - 1 >= 0 && i - 1 >= 0 && grid[i - 1][j - 1] == 1) {\n                        dp[i][j] = 1;\n                    } else if (j + 1 < m && i - 1 >= 0 && grid[i - 1][j + 1] == 1) {\n                        dp[i][j] = 1;\n                    } else if (j - 1 >= 0 && i + 1 < n && grid[i + 1][j - 1] == 1) {\n                        dp[i][j] = 1;\n                    } else if (j + 1 < m && i + 1 < n && grid[i + 1][j + 1] == 1) {\n                        dp[i][j] = 1;\n                    }\n                }\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(grid[i][j] == 1) {\n                    dp[i][j] = 1;\n                } else {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(grid[i][j] == 1) {\n                    for(int k = 0; k < capacity; k++) {\n                        if(j + k >= 0 && j + k < m && dp[i][j + k] == 1) {\n                            dp[i][j] = Math.max(dp[i][j], dp[i][j + k] + 1);\n                        }\n                    }\n                }\n            }\n        }\n        return dp[n - 1][m - 1];\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        // Write your code here\n        int[] arr_int = new int[arr.size()];\n        for (int i = 0; i < arr.size(); i++) {\n            arr_int[i] = arr.get(i);\n        }\n        Arrays.sort(arr_int);\n        List<Integer> sorted_arr = new ArrayList<Integer>();\n        for (int i = 0; i < arr_int.length; i++) {\n            sorted_arr.add(arr_int[i]);\n        }\n        return sorted_arr;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        // Write your code here\n        List<Integer> sorted = new ArrayList<Integer>();\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == 1) {\n                count++;\n            } else {\n                sorted.add(count);\n                count = 1;\n            }\n        }\n        sorted.add(count);\n        return sorted;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> sortedArr = new ArrayList<Integer>();\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == 1) {\n                count++;\n            } else {\n                sortedArr.add(count);\n                count = 1;\n            }\n        }\n        sortedArr.add(count);\n        return sortedArr;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        // Write your code here\n        List<Integer> result = new ArrayList<>();\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == 1) {\n                count++;\n            } else {\n                result.add(count);\n                count = 0;\n            }\n        }\n        result.add(count);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        // Write your code here\n        List<Integer> sortedArr = new ArrayList<>();\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == 1) {\n                count++;\n            } else {\n                sortedArr.add(count);\n                count = 1;\n            }\n        }\n        sortedArr.add(count);\n        return sortedArr;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == 1) {\n                count++;\n            } else {\n                result.add(count);\n                count = 0;\n            }\n        }\n        result.add(count);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        // Write your code here\n        int[] arr_int = new int[arr.size()];\n        for (int i = 0; i < arr.size(); i++) {\n            arr_int[i] = arr.get(i);\n        }\n        Arrays.sort(arr_int);\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < arr_int.length; i++) {\n            result.add(arr_int[i]);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> sortedArr = new ArrayList<Integer>();\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == 1) {\n                count++;\n            } else {\n                sortedArr.add(count);\n                count = 1;\n            }\n        }\n        sortedArr.add(count);\n        return sortedArr;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        // Write your code here\n        int count = 0;\n        int[] binary = new int[arr.size()];\n        for (int i = 0; i < arr.size(); i++) {\n            binary[i] = Integer.bitCount(arr.get(i));\n            count += binary[i];\n        }\n        int[] sorted = new int[count];\n        int index = 0;\n        for (int i = 0; i < binary.length; i++) {\n            if (binary[i] > 0) {\n                sorted[index++] = arr.get(i);\n            }\n        }\n        return Arrays.asList(sorted);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == 1) {\n                count++;\n            } else {\n                result.add(count);\n                count = 1;\n            }\n        }\n        result.add(count);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> sortedArr = new ArrayList<>();\n        int count = 0;\n        for (int i = arr.size() - 1; i >= 0; i--) {\n            if (arr.get(i) == 1) {\n                count++;\n            } else {\n                sortedArr.add(count);\n                count = 0;\n            }\n        }\n        sortedArr.add(count);\n        return sortedArr;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        // Write your code here\n        int[] arr_int = new int[arr.size()];\n        for (int i = 0; i < arr.size(); i++) {\n            arr_int[i] = arr.get(i);\n        }\n        Arrays.sort(arr_int);\n        List<Integer> sorted_arr = new ArrayList<Integer>();\n        for (int i = 0; i < arr_int.length; i++) {\n            sorted_arr.add(arr_int[i]);\n        }\n        return sorted_arr;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        // write your code here\n        int[] binary = new int[arr.size()];\n        for (int i = 0; i < arr.size(); i++) {\n            binary[i] = Integer.bitCount(arr.get(i));\n        }\n        int[] sorted = new int[arr.size()];\n        for (int i = 0; i < arr.size(); i++) {\n            sorted[i] = arr.get(i);\n        }\n        int i = 0;\n        int j = 0;\n        while (i < arr.size() && j < binary.length) {\n            if (binary[i] > binary[j]) {\n                sorted[i] = arr.get(j);\n                i++;\n            } else {\n                sorted[i] = arr.get(i);\n                j++;\n            }\n        }\n        return Arrays.asList(sorted);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> sortedArr = new ArrayList<>();\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == 1) {\n                count++;\n            } else {\n                sortedArr.add(count);\n                count = 1;\n            }\n        }\n        sortedArr.add(count);\n        return sortedArr;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        List<Integer> result = new ArrayList<>();\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == 1) {\n                count++;\n            } else {\n                result.add(count);\n                count = 1;\n            }\n        }\n        result.add(count);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        // Write your code here\n        int[] arr_int = new int[arr.size()];\n        for (int i = 0; i < arr.size(); i++) {\n            arr_int[i] = arr.get(i);\n        }\n        Arrays.sort(arr_int);\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < arr_int.length; i++) {\n            res.add(arr_int[i]);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        // Write your code here\n        int[] arr_int = new int[arr.size()];\n        for (int i = 0; i < arr.size(); i++) {\n            arr_int[i] = arr.get(i);\n        }\n        Arrays.sort(arr_int);\n        List<Integer> sorted_arr = new ArrayList<Integer>();\n        for (int i = 0; i < arr_int.length; i++) {\n            sorted_arr.add(arr_int[i]);\n        }\n        return sorted_arr;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        // Write your code here\n        int[] binary = new int[arr.size()];\n        for (int i = 0; i < arr.size(); i++) {\n            binary[i] = Integer.numberOfLeadingZeros(arr.get(i));\n        }\n        int[] sorted = new int[arr.size()];\n        for (int i = 0; i < arr.size(); i++) {\n            sorted[i] = arr.get(i);\n        }\n        for (int i = 0; i < binary.length; i++) {\n            for (int j = 0; j < binary.length - i - 1; j++) {\n                if (binary[j] > binary[j + 1]) {\n                    int temp = binary[j];\n                    binary[j] = binary[j + 1];\n                    binary[j + 1] = temp;\n                    int temp2 = sorted[j];\n                    sorted[j] = sorted[j + 1];\n                    sorted[j + 1] = temp2;\n                }\n            }\n        }\n        return Arrays.asList(sorted);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        int[] arrInt = new int[arr.size()];\n        for(int i = 0; i < arr.size(); i++) {\n            arrInt[i] = arr.get(i);\n        }\n        Arrays.sort(arrInt);\n        List<Integer> sortedArr = new ArrayList<>();\n        for(int i = 0; i < arrInt.length; i++) {\n            sortedArr.add(arrInt[i]);\n        }\n        return sortedArr;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n        int[] arrInt = new int[arr.size()];\n        for (int i = 0; i < arr.size(); i++) {\n            arrInt[i] = arr.get(i);\n        }\n        Arrays.sort(arrInt);\n        List<Integer> sortedArr = new ArrayList<Integer>();\n        for (int i = 0; i < arrInt.length; i++) {\n            sortedArr.add(arrInt[i]);\n        }\n        return sortedArr;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> result = new ArrayList<String>();\n        if (s.length() == 0) {\n            return result;\n        }\n        char[] chars = s.toCharArray();\n        int count = 0;\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] == ' ') {\n                count++;\n            } else {\n                count = 0;\n            }\n            if (count == n) {\n                result.add(s.substring(i, i + n));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<>();\n        if (s.length() == 0) {\n            return words;\n        }\n        char[] chars = s.toCharArray();\n        int[] counts = new int[26];\n        for (int i = 0; i < chars.length; i++) {\n            counts[chars[i] - 'a']++;\n        }\n        for (int i = 0; i < counts.length; i++) {\n            if (counts[i] == n) {\n                words.add(String.valueOf((char) ('a' + i)));\n            }\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<String>();\n        if(s.length() == 0)\n            return words;\n        char[] chars = s.toCharArray();\n        int count = 0;\n        for(int i = 0; i < chars.length; i++) {\n            if(chars[i] == ' ')\n                continue;\n            if(count == n)\n                words.add(new String(chars, i, chars.length - i));\n            count++;\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<>();\n        if (s.isEmpty()) {\n            return words;\n        }\n        char[] chars = s.toCharArray();\n        int count = 0;\n        for (char c : chars) {\n            if (c == ' ') {\n                continue;\n            }\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count++;\n            }\n        }\n        if (count >= n) {\n            for (int i = 0; i < chars.length; i++) {\n                if (chars[i] == ' ') {\n                    continue;\n                }\n                if (chars[i] == 'a' || chars[i] == 'e' || chars[i] == 'i' || chars[i] == 'o' || chars[i] == 'u') {\n                    words.add(String.valueOf(chars[i]));\n                }\n            }\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<String>();\n        if (s.length() == 0) {\n            return words;\n        }\n        char[] chars = s.toCharArray();\n        int[] counts = new int[26];\n        for (int i = 0; i < chars.length; i++) {\n            counts[chars[i] - 'a']++;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (counts[i] == n) {\n                words.add(String.valueOf((char)('a' + i)));\n            }\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<>();\n        if (s.isEmpty()) {\n            return words;\n        }\n        char[] chars = s.toCharArray();\n        int count = 0;\n        for (char c : chars) {\n            if (c == ' ') {\n                count++;\n            } else {\n                count = 0;\n            }\n            if (count == n) {\n                words.add(String.valueOf(c));\n            }\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<>();\n        if (s.isEmpty()) {\n            return words;\n        }\n        char[] chars = s.toCharArray();\n        int count = 0;\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] == ' ') {\n                count++;\n            } else {\n                count = 0;\n            }\n            if (count == n) {\n                words.add(s.substring(i, i + n));\n            }\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<>();\n        if (s.isEmpty()) {\n            return words;\n        }\n        char[] chars = s.toCharArray();\n        int count = 0;\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] == ' ') {\n                continue;\n            }\n            if (count == n) {\n                words.add(String.valueOf(chars[i]));\n                count = 0;\n            }\n            count++;\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<String>();\n        if (s.isEmpty()) {\n            return words;\n        }\n        String[] wordsArray = s.split(\" \");\n        for (String word : wordsArray) {\n            if (word.length() == n && word.matches(\"[a-z]+\")) {\n                words.add(word);\n            }\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<>();\n        if (s.isEmpty()) {\n            return words;\n        }\n        char[] chars = s.toCharArray();\n        int count = 0;\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLetter(chars[i])) {\n                count++;\n            }\n        }\n        if (count >= n) {\n            for (int i = 0; i < chars.length; i++) {\n                if (Character.isLetter(chars[i])) {\n                    words.add(String.valueOf(chars[i]));\n                }\n            }\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<>();\n        if (s.isEmpty()) {\n            return words;\n        }\n        String[] wordsArray = s.split(\" \");\n        for (String word : wordsArray) {\n            if (word.length() == n) {\n                words.add(word);\n            }\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<String>();\n        if (s.isEmpty()) {\n            return words;\n        }\n        char[] chars = s.toCharArray();\n        int count = 0;\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLetter(chars[i])) {\n                count++;\n            }\n        }\n        if (count >= n) {\n            for (int i = 0; i < chars.length; i++) {\n                if (Character.isLetter(chars[i])) {\n                    words.add(String.valueOf(chars[i]));\n                }\n            }\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<>();\n        if (s.isEmpty()) {\n            return words;\n        }\n        String[] wordsArray = s.split(\" \");\n        for (String word : wordsArray) {\n            if (word.length() == n) {\n                words.add(word);\n            }\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<String>();\n        if (s.isEmpty()) {\n            return words;\n        }\n        char[] chars = s.toCharArray();\n        int count = 0;\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLetter(chars[i])) {\n                count++;\n            }\n        }\n        if (count >= n) {\n            for (int i = 0; i < chars.length; i++) {\n                if (Character.isLetter(chars[i])) {\n                    words.add(String.valueOf(chars[i]));\n                }\n            }\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<>();\n        if (s == null || s.length() == 0) {\n            return words;\n        }\n        char[] chars = s.toCharArray();\n        int count = 0;\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLetter(chars[i])) {\n                count++;\n            }\n        }\n        if (count >= n) {\n            for (int i = 0; i < chars.length; i++) {\n                if (Character.isLetter(chars[i])) {\n                    words.add(String.valueOf(chars[i]));\n                }\n            }\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> result = new ArrayList<String>();\n        if (s == null || s.length() == 0) {\n            return result;\n        }\n        char[] chars = s.toCharArray();\n        int count = 0;\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] == ' ') {\n                count++;\n            } else {\n                count = 0;\n            }\n            if (count == n) {\n                result.add(String.valueOf(chars[i]));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<String>();\n        if (s.length() == 0) {\n            return words;\n        }\n        char[] chars = s.toCharArray();\n        int count = 0;\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLetter(chars[i])) {\n                count++;\n            }\n        }\n        if (count >= n) {\n            for (int i = 0; i < chars.length; i++) {\n                if (Character.isLetter(chars[i])) {\n                    words.add(String.valueOf(chars[i]));\n                }\n            }\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<String>();\n        if (s.length() == 0) {\n            return words;\n        }\n        char[] chars = s.toCharArray();\n        int count = 0;\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] == ' ') {\n                continue;\n            }\n            if (count == n) {\n                words.add(new String(chars, i, chars.length - i));\n                break;\n            }\n            count++;\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<String>();\n        if (s.length() == 0) {\n            return words;\n        }\n        char[] chars = s.toCharArray();\n        int count = 0;\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] == ' ') {\n                count++;\n            } else {\n                count = 0;\n            }\n            if (count == n) {\n                words.add(s.substring(i, i + n));\n            }\n        }\n        return words;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n        List<String> words = new ArrayList<String>();\n        if (s.length() == 0) {\n            return words;\n        }\n        char[] chars = s.toCharArray();\n        int count = 0;\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] == ' ') {\n                count++;\n            } else {\n                count = 0;\n            }\n            if (count == n) {\n                words.add(s.substring(i, i + n));\n            }\n        }\n        return words;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String vowel = \"\";\n        char[] wordChars = word.toCharArray();\n        for (int i = wordChars.length - 1; i >= 0; i--) {\n            if (wordChars[i] == 'a' || wordChars[i] == 'e' || wordChars[i] == 'i' || wordChars[i] == 'o' || wordChars[i] == 'u') {\n                vowel = word.substring(i + 1, word.length());\n                break;\n            }\n        }\n        return vowel;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        if (word == null || word.length() == 0) {\n            return \"\";\n        }\n        char[] wordChars = word.toCharArray();\n        char[] vowelChars = {'a', 'e', 'i', 'o', 'u'};\n        int vowelIndex = 0;\n        int wordIndex = 0;\n        int wordLength = word.length();\n        int vowelLength = vowelChars.length;\n        while (wordIndex < wordLength) {\n            if (wordChars[wordIndex] == vowelChars[vowelIndex]) {\n                wordIndex++;\n                vowelIndex++;\n            } else {\n                vowelIndex = 0;\n            }\n        }\n        if (wordIndex == wordLength) {\n            return vowelChars[vowelIndex];\n        } else {\n            return \"\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String vowel = \"\";\n        for (int i = word.length() - 1; i >= 0; i--) {\n            if (word.charAt(i) == 'a' || word.charAt(i) == 'e' || word.charAt(i) == 'i' || word.charAt(i) == 'o' || word.charAt(i) == 'u') {\n                vowel = word.charAt(i) + \"\";\n                break;\n            }\n        }\n        return vowel;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String vowel = \"\";\n        for (int i = word.length() - 1; i >= 0; i--) {\n            if (word.charAt(i) == 'a' || word.charAt(i) == 'e' || word.charAt(i) == 'i' || word.charAt(i) == 'o' || word.charAt(i) == 'u') {\n                vowel = word.charAt(i) + \"\";\n                break;\n            }\n        }\n        return vowel;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String vowel = \"\";\n        for (int i = word.length() - 1; i >= 0; i--) {\n            if (word.charAt(i) == 'a' || word.charAt(i) == 'e' || word.charAt(i) == 'i' || word.charAt(i) == 'o' || word.charAt(i) == 'u') {\n                vowel = word.charAt(i) + \"\";\n                break;\n            }\n        }\n        return vowel;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String vowel = \"\";\n        for(int i = word.length() - 1; i >= 0; i--) {\n            if(word.charAt(i) == 'a' || word.charAt(i) == 'e' || word.charAt(i) == 'i' || word.charAt(i) == 'o' || word.charAt(i) == 'u') {\n                vowel = word.charAt(i) + \"\";\n                break;\n            }\n        }\n        return vowel;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String vowels = \"aeiou\";\n        int left = 0, right = word.length() - 1;\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            if (vowels.indexOf(word.charAt(mid)) == 0) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return word.charAt(left) == 'u' ? \"u\" : \"\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String result = \"\";\n        char[] chars = word.toCharArray();\n        int len = chars.length;\n        for (int i = 0; i < len; i++) {\n            if (chars[i] == 'a' || chars[i] == 'e' || chars[i] == 'i' || chars[i] == 'o' || chars[i] == 'u') {\n                result = chars[i] + \"\";\n                break;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String vowel = \"\";\n        for (int i = word.length() - 1; i >= 0; i--) {\n            if (word.charAt(i) == 'a' || word.charAt(i) == 'e' || word.charAt(i) == 'i' || word.charAt(i) == 'o' || word.charAt(i) == 'u') {\n                vowel = word.charAt(i) + \"\";\n                break;\n            }\n        }\n        return vowel;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String vowel = \"\";\n        char[] wordArr = word.toCharArray();\n        for (int i = wordArr.length - 1; i >= 0; i--) {\n            if (wordArr[i] == 'a' || wordArr[i] == 'e' || wordArr[i] == 'i' || wordArr[i] == 'o' || wordArr[i] == 'u') {\n                vowel = wordArr[i] + \"\";\n                break;\n            }\n        }\n        return vowel;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String vowel = \"\";\n        char[] wordArr = word.toCharArray();\n        for (int i = wordArr.length - 1; i >= 0; i--) {\n            if (Character.isLetter(wordArr[i])) {\n                if (Character.isUpperCase(wordArr[i])) {\n                    vowel = \"U\";\n                } else {\n                    vowel = \"u\";\n                }\n                break;\n            }\n        }\n        return vowel;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        char[] wordArr = word.toCharArray();\n        char[] vowelArr = {'a','e','i','o','u'}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String vowel = \"\";\n        for (int i = word.length() - 1; i >= 0; i--) {\n            if (word.charAt(i) == 'a' || word.charAt(i) == 'e' || word.charAt(i) == 'i' || word.charAt(i) == 'o' || word.charAt(i) == 'u') {\n                vowel = word.substring(i + 1);\n                break;\n            }\n        }\n        return vowel;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String vowels = \"aeiou\";\n        String closestVowel = \"\";\n        int closestVowelIndex = 0;\n        for (int i = 0; i < word.length(); i++) {\n            if (vowels.indexOf(word.charAt(i)) != -1) {\n                if (i - 1 >= 0 && vowels.indexOf(word.charAt(i - 1)) != -1) {\n                    closestVowel = \"u\";\n                    closestVowelIndex = i - 1;\n                    break;\n                } else if (i + 1 < word.length() && vowels.indexOf(word.charAt(i + 1)) != -1) {\n                    closestVowel = \"u\";\n                    closestVowelIndex = i + 1;\n                    break;\n                }\n            }\n        }\n        return closestVowel;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String vowels = \"aeiou\";\n        String closestVowel = \"\";\n        int closestVowelIndex = 0;\n        int wordLength = word.length();\n        for (int i = wordLength - 1; i >= 0; i--) {\n            if (vowels.indexOf(word.charAt(i)) != -1) {\n                if (i == 0) {\n                    closestVowel = \"a\";\n                    closestVowelIndex = 0;\n                } else if (i == wordLength - 1) {\n                    closestVowel = \"y\";\n                    closestVowelIndex = 1;\n                } else {\n                    closestVowel = \"e\";\n                    closestVowelIndex = 2;\n                }\n                break;\n            }\n        }\n        return closestVowel;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        if(word.length() == 0) return \"\";\n        char[] wordArr = word.toCharArray();\n        char[] vowelArr = {'a','e','i','o','u'};\n        int vowelCount = 0;\n        for(int i=wordArr.length-1; i>=0; i--) {\n            if(vowelArr[i] == wordArr[i]) {\n                vowelCount++;\n            }\n            else {\n                break;\n            }\n        }\n        if(vowelCount == 0) return \"\";\n        if(vowelCount == 1) return vowelArr[0] + \"\";\n        if(vowelCount == 2) return vowelArr[1] + vowelArr[0] + \"\";\n        return \"\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        char[] wordChars = word.toCharArray();\n        int left = 0;\n        int right = wordChars.length - 1;\n        char leftChar = wordChars[left];\n        char rightChar = wordChars[right];\n        while (left < right) {\n            if (leftChar == 'a' && rightChar == 'e') {\n                return \"a\";\n            } else if (leftChar == 'e' && rightChar == 'i') {\n                return \"e\";\n            } else if (leftChar == 'i' && rightChar == 'o') {\n                return \"i\";\n            } else if (leftChar == 'o' && rightChar == 'u') {\n                return \"o\";\n            } else if (leftChar == 'u' && rightChar == 'a') {\n                return \"u\";\n            }\n            left++;\n            right--;\n        }\n        return \"\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        char[] wordChars = word.toCharArray();\n        char[] vowelChars = {'a','e','i','o','u'};\n        int vowelCount = 0;\n        for (char c : wordChars) {\n            if (vowelChars[vowelCount].equals(c)) {\n                vowelCount++;\n            }\n        }\n        if (vowelCount == 0) {\n            return \"\";\n        }\n        if (vowelCount == 1) {\n            return vowelChars[0] + \"\";\n        }\n        return vowelChars[vowelCount-1] + \"\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String vowel = \"\";\n        char[] wordArray = word.toCharArray();\n        for(int i = wordArray.length - 1; i >= 0; i--) {\n            if(wordArray[i] == 'a' || wordArray[i] == 'e' || wordArray[i] == 'i' || wordArray[i] == 'o' || wordArray[i] == 'u') {\n                vowel = wordArray[i] + \"\";\n                break;\n            }\n        }\n        return vowel;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n        String vowel = \"\";\n        for (int i = word.length() - 1; i >= 0; i--) {\n            if (word.charAt(i) == 'a' || word.charAt(i) == 'e' || word.charAt(i) == 'i' || word.charAt(i) == 'o' || word.charAt(i) == 'u') {\n                vowel = word.charAt(i) + \"\";\n                break;\n            }\n        }\n        return vowel;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        if(lst.size() == 1)\n            return \"Yes\";\n        String str = lst.get(0);\n        for(int i = 1; i < lst.size(); i++) {\n            if(str.charAt(str.length()-1) == '(')\n                str = str.substring(0, str.length()-1);\n            else\n                str = str + lst.get(i);\n        }\n        return str.equals(\"()\") ? \"Yes\" : \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        String str1 = lst.get(0);\n        String str2 = lst.get(1);\n        if (str1.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str1.equals(\")\") && str2.equals(\"(\")) {\n            return \"No\";\n        } else {\n            return \"No\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        if(lst.size() == 1)\n            return lst.get(0).equals(\"()\");\n        if(lst.size() == 2)\n            return lst.get(0).equals(\"(\") && lst.get(1).equals(\")\");\n        if(lst.size() == 3)\n            return lst.get(0).equals(\"(\") && lst.get(1).equals(\")\") && lst.get(2).equals(\")\");\n        if(lst.size() == 4)\n            return lst.get(0).equals(\"(\") && lst.get(1).equals(\")\") && lst.get(2).equals(\")\") && lst.get(3).equals(\")\");\n        return \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        int open = 0;\n        int close = 0;\n        for (String s : lst) {\n            if (s.equals(\"(\")) {\n                open++;\n            } else {\n                close++;\n            }\n        }\n        if (open == close) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        if(lst.size() == 0) return \"No\";\n        String s1 = lst.get(0);\n        String s2 = lst.get(1);\n        if(s1.equals(\"(\") && s2.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\"(\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1.equals(\"(\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1.equals(\")\")) return \"Yes\";\n        if(s1.equals(\")\") && s2.equals(\")\") && s1", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        String str1 = lst.get(0);\n        String str2 = lst.get(1);\n        if (str1.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        } else if (str1.equals(\")\") && str2.equals(\"(\")) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        // Write your code here\n        if (lst.size() == 2) {\n            String s1 = lst.get(0);\n            String s2 = lst.get(1);\n            if (s1.equals(\"(\") && s2.equals(\")\") || s1.equals(\")\") && s2.equals(\"(\")) {\n                return \"Yes\";\n            }\n        }\n        return \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        if(lst.size() == 1)\n            return lst.get(0).equals(\"()\");\n        if(lst.size() == 2)\n            return lst.get(0).equals(\"(\") && lst.get(1).equals(\")\");\n        if(lst.get(0).equals(\"(\") && lst.get(1).equals(\"(\"))\n            return matchParens(lst.subList(2, lst.size()));\n        return \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        if(lst.size() == 1) {\n            return \"Yes\";\n        }\n        int open = 0;\n        int close = 0;\n        for(String s : lst) {\n            if(s.equals(\"(\")) {\n                open++;\n            } else {\n                close++;\n            }\n        }\n        if(open == close) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        if(lst.size() == 1) {\n            return \"Yes\";\n        }\n        String str1 = lst.get(0);\n        String str2 = lst.get(1);\n        if(str1.equals(\"(\") && str2.equals(\")\")) {\n            return \"Yes\";\n        }\n        if(str1.equals(\")\") && str2.equals(\"(\")) {\n            return \"Yes\";\n        }\n        return \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        if (lst.size() == 1) {\n            return lst.get(0).equals(\"(\") ? \"Yes\" : \"No\";\n        }\n\n        int open = 0;\n        int close = 0;\n        for (String s : lst) {\n            if (s.equals(\"(\")) {\n                open++;\n            } else if (s.equals(\")\")) {\n                close++;\n            }\n        }\n\n        if (open == close) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        int count = 0;\n        for (String s : lst) {\n            if (s.equals(\"(\")) {\n                count++;\n            } else if (s.equals(\")\")) {\n                count--;\n            }\n        }\n        if (count == 0) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        // Write your code here\n        String s1 = lst.get(0);\n        String s2 = lst.get(1);\n        int n1 = s1.length();\n        int n2 = s2.length();\n        int n = n1 + n2;\n        int[] dp = new int[n + 1];\n        dp[0] = 0;\n        for (int i = 1; i <= n; i++) {\n            if (s1.charAt(i - 1) == '(') {\n                dp[i] = dp[i - 1] + 1;\n            } else {\n                dp[i] = dp[i - 1];\n            }\n        }\n        if (dp[n] == n1 + n2) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        int open = 0;\n        int close = 0;\n        for(String s: lst) {\n            if(s.equals(\"(\")) {\n                open++;\n            } else {\n                close++;\n            }\n        }\n        if(open == close) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        if (lst.size() == 0)\n            return \"No\";\n        String s1 = lst.get(0);\n        String s2 = lst.get(1);\n        if (s1.equals(\"(\") && s2.equals(\")\"))\n            return \"Yes\";\n        else if (s1.equals(\")\") && s2.equals(\"(\"))\n            return \"Yes\";\n        else\n            return \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        if (lst.size() == 1) {\n            return lst.get(0).equals(\"()\");\n        }\n        if (lst.size() == 2) {\n            return lst.get(0).equals(\"(\") && lst.get(1).equals(\")\");\n        }\n        if (lst.size() == 3) {\n            return lst.get(0).equals(\"(\") && lst.get(1).equals(\")\") && lst.get(2).equals(\")\");\n        }\n        if (lst.size() == 4) {\n            return lst.get(0).equals(\"(\") && lst.get(1).equals(\")\") && lst.get(2).equals(\")\") && lst.get(3).equals(\")\");\n        }\n        if (lst.size() == 5) {\n            return lst.get(0).equals(\"(\") && lst.get(1).equals(\")\") && lst.get(2).equals(\")\") && lst.get(3).equals(\")\") && lst.get(4).equals(\")\");\n        }\n        if (lst.size() == 6) {\n            return lst.get(0).equals(\"(\") && lst.get(1).equals(\")\") && lst.get(2).equals(\")\") && lst.get(3).equals(\")\") && lst.get(4).equals(\")\") && lst.get(5).equals(\")\");\n        }\n        if (lst.size() == 7) {\n            return lst.get(0).equals(\"(\") && lst.get(1).equals(\")\") && lst.get(2).equals(\")\") && lst.get(3).equals(\")\") && lst.get(4).equals(\")\") && lst.get(5).equals(\")\") && lst.get(6).equals(\")\");\n        }\n        if (lst.size() == 8) {\n            return lst.get(0).equals(\"(\") && lst.get(1).equals(\")\") && lst.get(2).equals(\")\") && lst.get(3).equals(\")\") && lst.get(4).equals(\")\") && lst.get(5).equals(\")\") && lst.get(6).equals(\")\") && lst.get(7).equals(\")\");\n        }\n        if (lst.size() == 9) {\n            return lst.get(0).equals(\"(\") && lst.get(1).equals(\")\") && lst.get(2).equals(\")\") && lst.get(3).equals(\")\") && lst.get(4).equals(\")\") && lst.get(5).equals(\")\") && lst.get(6).equals(\")\") && lst.get(7).equals(\")\") && lst.get(8).equals(\")\");\n        }\n        return \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        Stack<Character> stack = new Stack<>();\n        for(String str : lst) {\n            for(char c : str.toCharArray()) {\n                if(c == '(') {\n                    stack.push(c);\n                } else {\n                    if(stack.isEmpty() || stack.peek() != '(') {\n                        return \"No\";\n                    }\n                    stack.pop();\n                }\n            }\n        }\n        return stack.isEmpty() ? \"Yes\" : \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        if(lst.size() == 0)\n            return \"No\";\n        String str1 = lst.get(0);\n        String str2 = lst.get(1);\n        if(str1.equals(\"(\") && str2.equals(\"(\"))\n            return \"Yes\";\n        if(str1.equals(\")\") && str2.equals(\")\"))\n            return \"Yes\";\n        if(str1.equals(\")\") && str2.equals(\"(\"))\n            return \"No\";\n        if(str1.equals(\"(\") && str2.equals(\")\"))\n            return \"No\";\n        return \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        if (lst.size() == 1) {\n            return \"Yes\";\n        }\n        Stack<Character> stack = new Stack<>();\n        for (String s : lst) {\n            for (char c : s.toCharArray()) {\n                if (c == '(') {\n                    stack.push(c);\n                } else {\n                    if (stack.isEmpty() || stack.peek() != '(') {\n                        return \"No\";\n                    }\n                    stack.pop();\n                }\n            }\n        }\n        return stack.isEmpty() ? \"Yes\" : \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n        int open = 0;\n        int close = 0;\n        for (String s : lst) {\n            if (s.equals(\"(\")) {\n                open++;\n            } else if (s.equals(\")\")) {\n                close++;\n            }\n        }\n        if (open == close) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Write your code here\n        List<Integer> res = new ArrayList<>();\n        int n = arr.size();\n        int[] arr_copy = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr_copy[i] = arr.get(i);\n        }\n        Arrays.sort(arr_copy);\n        for(int i = 0; i < k; i++) {\n            res.add(arr_copy[i]);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        List<Integer> res = new ArrayList<>();\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        for (int i = 0; i < k; i++) {\n            res.add(arrCopy[i]);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        List<Integer> ans = new ArrayList<>();\n        int n = arr.size();\n        int[] arr_copy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr_copy[i] = arr.get(i);\n        }\n        Arrays.sort(arr_copy);\n        for (int i = 0; i < k; i++) {\n            ans.add(arr_copy[i]);\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Write your code here\n        List<Integer> result = new ArrayList<>();\n        int n = arr.size();\n        int[] arr_copy = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr_copy[i] = arr.get(i);\n        }\n        Arrays.sort(arr_copy);\n        for(int i = 0; i < k; i++) {\n            result.add(arr_copy[i]);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Write your code here\n        List<Integer> result = new ArrayList<>();\n        int max = arr.get(0);\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i) > max) {\n                max = arr.get(i);\n            }\n        }\n        for (int i = k - 1; i >= 0; i--) {\n            if (arr.get(i) > max) {\n                max = arr.get(i);\n            }\n            result.add(arr.get(i));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        List<Integer> result = new ArrayList<>();\n        int max = arr.get(0);\n        int count = 1;\n        for(int i = 1; i < arr.size(); i++) {\n            if(arr.get(i) > max) {\n                max = arr.get(i);\n                count = 1;\n            } else if(arr.get(i) == max) {\n                count++;\n            } else {\n                result.add(max);\n                result.add(count);\n                max = arr.get(i);\n                count = 1;\n            }\n        }\n        result.add(max);\n        result.add(count);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Write your code here\n        List<Integer> result = new ArrayList<>();\n        int max = arr.get(0);\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i) > max) {\n                max = arr.get(i);\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i) == max) {\n                result.add(arr.get(i));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Write your code here\n        List<Integer> res = new ArrayList<>();\n        int n = arr.size();\n        int[] arr_copy = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr_copy[i] = arr.get(i);\n        }\n        Arrays.sort(arr_copy);\n        for(int i = 0; i < k; i++) {\n            res.add(arr_copy[i]);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Write your code here\n        List<Integer> res = new ArrayList<>();\n        int n = arr.size();\n        int[] arr_copy = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr_copy[i] = arr.get(i);\n        }\n        Arrays.sort(arr_copy);\n        for(int i = 0; i < k; i++) {\n            res.add(arr_copy[i]);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Write your code here\n        List<Integer> res = new ArrayList<>();\n        int n = arr.size();\n        int[] nums = new int[n];\n        for (int i = 0; i < n; i++) {\n            nums[i] = arr.get(i);\n        }\n        Arrays.sort(nums);\n        for (int i = 0; i < k; i++) {\n            res.add(nums[i]);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Write your code here\n        List<Integer> res = new ArrayList<>();\n        int n = arr.size();\n        int[] arr_copy = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr_copy[i] = arr.get(i);\n        }\n        Arrays.sort(arr_copy);\n        for(int i = 0; i < k; i++) {\n            res.add(arr_copy[i]);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        List<Integer> ans = new ArrayList<>();\n        int n = arr.size();\n        if(n == 0)\n            return ans;\n        int[] arr_copy = new int[n];\n        for(int i = 0; i < n; i++)\n            arr_copy[i] = arr.get(i);\n        Arrays.sort(arr_copy);\n        for(int i = 0; i < k; i++)\n            ans.add(arr_copy[i]);\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Write your code here\n        List<Integer> result = new ArrayList<>();\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for(int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        for(int i = 0; i < k; i++) {\n            result.add(arrCopy[i]);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        List<Integer> result = new ArrayList<>();\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        for (int i = 0; i < k; i++) {\n            result.add(arrCopy[i]);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Write your code here\n        List<Integer> result = new ArrayList<>();\n        int max = arr.get(0);\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > max) {\n                max = arr.get(i);\n            }\n        }\n        for (int i = 0; i < k; i++) {\n            result.add(max);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Write your code here\n        List<Integer> result = new ArrayList<>();\n        int n = arr.size();\n        int[] max = new int[n];\n        int[] min = new int[n];\n        for(int i = 0; i < n; i++) {\n            max[i] = arr.get(i);\n            min[i] = arr.get(i);\n        }\n        for(int i = 0; i < k; i++) {\n            int maxIndex = 0;\n            int minIndex = 0;\n            for(int j = 0; j < n; j++) {\n                if(max[j] > max[maxIndex]) {\n                    maxIndex = j;\n                }\n                if(min[j] < min[minIndex]) {\n                    minIndex = j;\n                }\n            }\n            result.add(max[maxIndex]);\n            result.add(min[minIndex]);\n            max[maxIndex] = max[minIndex];\n            min[minIndex] = min[maxIndex];\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        List<Integer> res = new ArrayList<>();\n        int n = arr.size();\n        int[] arr_copy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr_copy[i] = arr.get(i);\n        }\n        Arrays.sort(arr_copy);\n        for (int i = 0; i < k; i++) {\n            res.add(arr_copy[i]);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Write your code here\n        List<Integer> result = new ArrayList<>();\n        int n = arr.size();\n        int[] max = new int[k];\n        int[] min = new int[k];\n        int[] count = new int[k];\n        for (int i = 0; i < n; i++) {\n            max[0] = arr.get(i);\n            min[0] = arr.get(i);\n            count[0] = 1;\n            for (int j = 1; j < k; j++) {\n                if (arr.get(i) > max[j - 1]) {\n                    max[j] = arr.get(i);\n                    count[j] = count[j - 1] + 1;\n                } else if (arr.get(i) < min[j - 1]) {\n                    min[j] = arr.get(i);\n                    count[j] = count[j - 1];\n                }\n            }\n            for (int j = 0; j < k; j++) {\n                if (count[j] == k) {\n                    result.add(max[j]);\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Write your code here\n        int n = arr.size();\n        List<Integer> res = new ArrayList<>();\n        int[] arr_copy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr_copy[i] = arr.get(i);\n        }\n        Arrays.sort(arr_copy);\n        for (int i = 0; i < k; i++) {\n            res.add(arr_copy[i]);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n        // Write your code here\n        List<Integer> result = new ArrayList<>();\n        int n = arr.size();\n        int[] max = new int[n];\n        int[] min = new int[n];\n        for (int i = 0; i < n; i++) {\n            max[i] = arr.get(i);\n            min[i] = arr.get(i);\n        }\n        for (int i = 0; i < k; i++) {\n            int maxIndex = 0;\n            int minIndex = 0;\n            for (int j = 0; j < n; j++) {\n                if (max[j] > max[maxIndex]) {\n                    maxIndex = j;\n                }\n                if (min[j] < min[minIndex]) {\n                    minIndex = j;\n                }\n            }\n            result.add(max[maxIndex]);\n            result.add(min[minIndex]);\n            max[maxIndex] = max[minIndex];\n            min[minIndex] = min[maxIndex];\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++){\n            if(i % 2 == 0){\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++){\n            if(i % 2 == 0){\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum += arr.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum += arr.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum += arr.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        int i = 0;\n        while (i < k) {\n            int num = arr.get(i);\n            sum += num;\n            i++;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum += arr.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum += arr.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum += arr.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum += arr.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        int i = 0;\n        while(i < k) {\n            sum += arr.get(i);\n            i++;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum += arr.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum += arr.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum += arr.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum += arr.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        int i = 0;\n        while(i < k) {\n            sum += arr.get(i);\n            i++;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        int i = 0;\n        while (i < k) {\n            int num = arr.get(i);\n            if (num < 10) {\n                sum += num;\n            }\n            i++;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum += arr.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum += arr.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        int n = arr.size();\n        int i = 0;\n        while (i < k && i < n) {\n            int num = arr.get(i);\n            sum += num / 100;\n            sum += num % 10;\n            i++;\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum += arr.get(i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n        int sum = 0;\n        for (int i = 0; i < k; i++) {\n            sum += arr.get(i);\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<Integer>();\n        int i = 1;\n        while (i <= n) {\n            if (n % i == 0) {\n                oddCollatz.add(i);\n                n = n / i;\n            } else {\n                i++;\n            }\n        }\n        oddCollatz.add(n);\n        Collections.sort(oddCollatz);\n        return oddCollatz;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<Integer>();\n        int i = 1;\n        while (i <= n) {\n            if (n % i == 0) {\n                oddCollatz.add(i);\n                n = n / i;\n            } else {\n                i++;\n            }\n        }\n        oddCollatz.add(n);\n        Collections.sort(oddCollatz);\n        return oddCollatz;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<Integer>();\n        int i = 1;\n        while (i <= n) {\n            if (n % i == 0) {\n                oddCollatz.add(i);\n                n = n / i;\n            } else {\n                i++;\n            }\n        }\n        oddCollatz.add(n);\n        Collections.sort(oddCollatz);\n        return oddCollatz;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        int i = 0;\n        while (n != 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = 3 * n + 1;\n            }\n            result.add(i, n);\n            i++;\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<>();\n        int i = 1;\n        while(i <= n) {\n            if(n % i == 0) {\n                oddCollatz.add(i);\n                n = n / i;\n            } else {\n                i++;\n            }\n        }\n        oddCollatz.add(n);\n        Collections.sort(oddCollatz);\n        return oddCollatz;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<>();\n        int i = 1;\n        while (i <= n) {\n            if (n % i == 0) {\n                oddCollatz.add(i);\n                n = n / i;\n            } else {\n                i++;\n            }\n        }\n        oddCollatz.add(n);\n        Collections.sort(oddCollatz);\n        return oddCollatz;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<>();\n        int i = 1;\n        while (i <= n) {\n            if (n % i == 0) {\n                oddCollatz.add(i);\n                n = n / i;\n            } else {\n                i++;\n            }\n        }\n        oddCollatz.add(n);\n        Collections.sort(oddCollatz);\n        return oddCollatz;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<>();\n        int i = 1;\n        while (i <= n) {\n            if (n % i == 0) {\n                oddCollatz.add(i);\n                n = n / i;\n            } else {\n                i++;\n            }\n        }\n        oddCollatz.add(n);\n        Collections.sort(oddCollatz);\n        return oddCollatz;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<Integer>();\n        int i = 1;\n        while (i <= n) {\n            if (n % i == 0) {\n                oddCollatz.add(i);\n                n = n / i;\n            } else {\n                i++;\n            }\n        }\n        oddCollatz.add(n);\n        Collections.sort(oddCollatz);\n        return oddCollatz;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<>();\n        int i = 1;\n        while(i <= n) {\n            if(n % i == 0) {\n                oddCollatz.add(i);\n                n = n / i;\n            } else {\n                i++;\n            }\n        }\n        oddCollatz.add(n);\n        Collections.sort(oddCollatz);\n        return oddCollatz;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<Integer>();\n        int i = 1;\n        while (i <= n) {\n            if (n % i == 0) {\n                oddCollatz.add(i);\n                n = n / i;\n            } else {\n                i++;\n            }\n        }\n        oddCollatz.add(n);\n        Collections.sort(oddCollatz);\n        return oddCollatz;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<>();\n        int i = 1;\n        while(i <= n) {\n            if(n % i == 0) {\n                oddCollatz.add(i);\n                n = n / i;\n            } else {\n                i++;\n            }\n        }\n        oddCollatz.add(n);\n        Collections.sort(oddCollatz);\n        return oddCollatz;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<Integer>();\n        int i = 1;\n        while (i <= n) {\n            if (n % i == 0) {\n                oddCollatz.add(i);\n                n = n / i;\n            } else {\n                i++;\n            }\n        }\n        oddCollatz.add(n);\n        Collections.sort(oddCollatz);\n        return oddCollatz;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        int i = 1;\n        while (i <= n) {\n            if (n % i == 0) {\n                n = n / i;\n                result.add(i);\n            }\n            else {\n                i++;\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<>();\n        int i = 1;\n        while (i <= n) {\n            if (n % i == 0) {\n                oddCollatz.add(i);\n                n = n / i;\n            } else {\n                i++;\n            }\n        }\n        oddCollatz.add(n);\n        Collections.sort(oddCollatz);\n        return oddCollatz;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<>();\n        int i = 1;\n        while(i <= n) {\n            if(i % 2 == 0) {\n                i = i / 2;\n            } else {\n                i = 3 * i + 1;\n            }\n            oddCollatz.add(i);\n        }\n        Collections.sort(oddCollatz);\n        return oddCollatz;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<>();\n        int i = 1;\n        while (i <= n) {\n            if (n % i == 0) {\n                oddCollatz.add(i);\n                n = n / i;\n            } else {\n                i++;\n            }\n        }\n        oddCollatz.add(n);\n        Collections.sort(oddCollatz);\n        return oddCollatz;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<Integer>();\n        int i = 1;\n        while (i <= n) {\n            if (n % i == 0) {\n                oddCollatz.add(i);\n                n = n / i;\n            } else {\n                i++;\n            }\n        }\n        oddCollatz.add(n);\n        Collections.sort(oddCollatz);\n        return oddCollatz;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<>();\n        int i = 1;\n        while (i <= n) {\n            if (n % i == 0) {\n                oddCollatz.add(i);\n                n = n / i;\n            } else {\n                i++;\n            }\n        }\n        oddCollatz.add(n);\n        Collections.sort(oddCollatz);\n        return oddCollatz;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n        List<Integer> oddCollatz = new ArrayList<Integer>();\n        int i = 1;\n        while(i <= n) {\n            if(n % i == 0) {\n                oddCollatz.add(i);\n                n = n / i;\n            }\n            else {\n                i++;\n            }\n        }\n        oddCollatz.add(n);\n        Collections.sort(oddCollatz);\n        return oddCollatz;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        if (date == null || date.length() == 0) {\n            return false;\n        }\n        String[] dateArray = date.split(\"-\");\n        if (dateArray.length != 3) {\n            return false;\n        }\n        int day = Integer.parseInt(dateArray[2]);\n        int month = Integer.parseInt(dateArray[1]);\n        int year = Integer.parseInt(dateArray[0]);\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (day < 1 || day > 31) {\n            return false;\n        }\n        if (month == 2 && day > 29) {\n            return false;\n        }\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day > 30) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        String[] dateArray = date.split(\"-\");\n        int month = Integer.parseInt(dateArray[1]);\n        int day = Integer.parseInt(dateArray[2]);\n        int year = Integer.parseInt(dateArray[0]);\n        if (dateArray.length != 3) {\n            return false;\n        }\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (day < 1 || day > 31) {\n            return false;\n        }\n        if (month == 2 && day > 29) {\n            return false;\n        }\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day > 30) {\n                return false;\n            }\n        }\n        if (month == 1) {\n            if (year % 400 == 0) {\n                if (year % 100 == 0) {\n                    if (year % 4 == 0) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        // Write your code here\n        String[] dateParts = date.split(\"-\");\n        int month = Integer.parseInt(dateParts[1]);\n        int day = Integer.parseInt(dateParts[2]);\n        int year = Integer.parseInt(dateParts[0]);\n        int daysInMonth = 0;\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n            daysInMonth = 31;\n        } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n            daysInMonth = 30;\n        } else if (month == 2) {\n            if (year % 4 == 0 && year % 100 != 0) {\n                daysInMonth = 29;\n            } else {\n                daysInMonth = 28;\n            }\n        }\n        if (day < 1 || day > daysInMonth) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        if (date == null || date.isEmpty()) {\n            return false;\n        }\n\n        String[] dateParts = date.split(\"-\");\n        int month = Integer.parseInt(dateParts[0]);\n        int day = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        if (day < 1 || day > 31) {\n            return false;\n        }\n\n        if (month == 2 && day > 29) {\n            return false;\n        }\n\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day > 30) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        String[] dateArray = date.split(\"-\");\n        int month = Integer.parseInt(dateArray[1]);\n        int day = Integer.parseInt(dateArray[2]);\n        int year = Integer.parseInt(dateArray[0]);\n        if (dateArray.length != 3) {\n            return false;\n        }\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (day < 1 || day > 31) {\n            return false;\n        }\n        if (month == 2 && day > 29) {\n            return false;\n        }\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day > 30) {\n                return false;\n            }\n        }\n        if (month == 1 && day == 1) {\n            if (year % 400 == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        if (date == null || date.isEmpty()) {\n            return false;\n        }\n\n        String[] dateParts = date.split(\"-\");\n        if (dateParts.length != 3) {\n            return false;\n        }\n\n        int day = Integer.parseInt(dateParts[2]);\n        int month = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[0]);\n\n        if (month < 1 || month > 12) {\n            return false;\n        }\n\n        if (day < 1 || day > 31) {\n            return false;\n        }\n\n        if (month == 2 && day == 29) {\n            return false;\n        }\n\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 30) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        if (date == null || date.isEmpty()) {\n            return false;\n        }\n        String[] dateParts = date.split(\"-\");\n        int month = Integer.parseInt(dateParts[1]);\n        int day = Integer.parseInt(dateParts[2]);\n        int year = Integer.parseInt(dateParts[0]);\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (day < 1 || day > 31) {\n            return false;\n        }\n        if (month == 2 && day > 29) {\n            return false;\n        }\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day > 30) {\n                return false;\n            }\n        }\n        if (month == 1 && day == 1) {\n            if (year % 400 == 0 || (year % 4 == 0 && year % 100 != 0)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        // Write your code here\n        String[] dateArray = date.split(\"-\");\n        int month = Integer.parseInt(dateArray[1]);\n        int day = Integer.parseInt(dateArray[2]);\n        int year = Integer.parseInt(dateArray[0]);\n        int numberOfDays = 0;\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n            numberOfDays = 31;\n        } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n            numberOfDays = 30;\n        } else if (month == 2) {\n            if (year % 4 == 0) {\n                numberOfDays = 29;\n            } else {\n                numberOfDays = 28;\n            }\n        }\n        if (day <= numberOfDays) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        if(date == null || date.equals(\"\")){\n            return false;\n        }\n        String[] dateArray = date.split(\"-\");\n        int month = Integer.parseInt(dateArray[1]);\n        int day = Integer.parseInt(dateArray[2]);\n        int year = Integer.parseInt(dateArray[0]);\n        if(month < 1 || month > 12){\n            return false;\n        }\n        if(day < 1 || day > 31){\n            return false;\n        }\n        if(year < 1 || year > 2040){\n            return false;\n        }\n        if(month == 2 && day == 29){\n            if(year % 4 == 0 && (year % 100 != 0 || year % 400 == 0)){\n                return true;\n            }\n            else{\n                return false;\n            }\n        }\n        else if(month == 2 && day > 29){\n            return false;\n        }\n        else if(month == 4 || month == 6 || month == 9 || month == 11){\n            if(day > 30){\n                return false;\n            }\n        }\n        else if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12){\n            if(day > 31){\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        // Write your code here\n        String[] dateArray = date.split(\"-\");\n        int month = Integer.parseInt(dateArray[1]);\n        int day = Integer.parseInt(dateArray[2]);\n        int year = Integer.parseInt(dateArray[0]);\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (day < 1 || day > 31) {\n            return false;\n        }\n        if (month == 2 && day > 29) {\n            return false;\n        }\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day > 30) {\n                return false;\n            }\n        }\n        if (month == 1) {\n            if (year % 400 == 0 || (year % 4 == 0 && year % 100 != 0)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        // Write your code here\n        String[] dateArray = date.split(\"-\");\n        int month = Integer.parseInt(dateArray[1]);\n        int day = Integer.parseInt(dateArray[2]);\n        int year = Integer.parseInt(dateArray[0]);\n        if (dateArray.length != 3) {\n            return false;\n        }\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (day < 1 || day > 31) {\n            return false;\n        }\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n            if (day < 1 || day > 30) {\n                return false;\n            }\n        }\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 29) {\n                return false;\n            }\n        }\n        if (month == 2) {\n            if (day < 1 || day > 28) {\n                return false;\n            }\n        }\n        if (year < 1900 || year > 2099) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        if (date == null || date.isEmpty()) {\n            return false;\n        }\n        String[] dateParts = date.split(\"-\");\n        int month = Integer.parseInt(dateParts[1]);\n        int day = Integer.parseInt(dateParts[2]);\n        int year = Integer.parseInt(dateParts[0]);\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (day < 1 || day > 31) {\n            return false;\n        }\n        if (month == 2 && day == 29) {\n            return false;\n        }\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 30) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        String[] dateArray = date.split(\"-\");\n        if(dateArray.length != 3)\n            return false;\n        int month = Integer.parseInt(dateArray[1]);\n        int day = Integer.parseInt(dateArray[2]);\n        int year = Integer.parseInt(dateArray[0]);\n        if(month < 1 || month > 12)\n            return false;\n        if(day < 1 || day > 31)\n            return false;\n        if(month == 2 && day > 29)\n            return false;\n        if(month == 4 || month == 6 || month == 9 || month == 11)\n            if(day > 30)\n                return false;\n        if(month == 1 && day == 1)\n            if(year % 400 == 0 || (year % 4 == 0 && year % 100 != 0))\n                return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        String[] dateSplit = date.split(\"-\");\n        if (dateSplit.length != 3) {\n            return false;\n        }\n        int day = Integer.parseInt(dateSplit[2]);\n        int month = Integer.parseInt(dateSplit[1]);\n        int year = Integer.parseInt(dateSplit[0]);\n        if (day < 1 || day > 31) {\n            return false;\n        }\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (year < 1 || year > 9999) {\n            return false;\n        }\n        if (month == 2 && day == 29) {\n            return false;\n        }\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 30) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        if (date == null || date.isEmpty()) {\n            return false;\n        }\n        String[] dateArray = date.split(\"-\");\n        int month = Integer.parseInt(dateArray[1]);\n        int day = Integer.parseInt(dateArray[2]);\n        int year = Integer.parseInt(dateArray[0]);\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (day < 1 || day > 31) {\n            return false;\n        }\n        if (month == 2 && day == 29) {\n            return false;\n        }\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 30) {\n                return false;\n            }\n        }\n        if (month == 1) {\n            if (day < 1 || day > 31) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        if (date == null || date.isEmpty()) {\n            return false;\n        }\n        String[] dateArray = date.split(\"-\");\n        if (dateArray.length != 3) {\n            return false;\n        }\n        int month = Integer.parseInt(dateArray[1]);\n        int day = Integer.parseInt(dateArray[2]);\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (day < 1 || day > 31) {\n            return false;\n        }\n        if (month == 2 && day == 29) {\n            return false;\n        }\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 30) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        // Write your code here\n        String[] dateArray = date.split(\"-\");\n        int month = Integer.parseInt(dateArray[1]);\n        int day = Integer.parseInt(dateArray[2]);\n        int year = Integer.parseInt(dateArray[0]);\n        if(month < 1 || month > 12)\n            return false;\n        if(day < 1 || day > 31)\n            return false;\n        if(year < 1900 || year > 2050)\n            return false;\n        if(month == 2 && day == 29 && year % 400 == 0)\n            return false;\n        if(month == 2 && day == 29 && year % 100 == 0)\n            return false;\n        if(month == 2 && day == 28 && year % 4 == 0)\n            return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        if (date == null || date.isEmpty()) {\n            return false;\n        }\n        String[] dateParts = date.split(\"-\");\n        int month = Integer.parseInt(dateParts[1]);\n        int day = Integer.parseInt(dateParts[2]);\n        int year = Integer.parseInt(dateParts[0]);\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (day < 1 || day > 31) {\n            return false;\n        }\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n            if (day < 1 || day > 30) {\n                return false;\n            }\n        }\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day < 1 || day > 29) {\n                return false;\n            }\n        }\n        if (month == 2) {\n            if (day < 1 || day > 28) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        String[] dateArray = date.split(\"-\");\n        int month = Integer.parseInt(dateArray[1]);\n        int day = Integer.parseInt(dateArray[2]);\n        int year = Integer.parseInt(dateArray[0]);\n        if (dateArray.length != 3) {\n            return false;\n        }\n        if (month < 1 || month > 12) {\n            return false;\n        }\n        if (day < 1 || day > 31) {\n            return false;\n        }\n        if (month == 2 && day > 29) {\n            return false;\n        }\n        if (month == 4 || month == 6 || month == 9 || month == 11) {\n            if (day > 30) {\n                return false;\n            }\n        }\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n            if (day > 31) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n        String[] dateArray = date.split(\"-\");\n        if(dateArray.length != 3) {\n            return false;\n        }\n        int day = Integer.parseInt(dateArray[2]);\n        int month = Integer.parseInt(dateArray[1]);\n        int year = Integer.parseInt(dateArray[0]);\n        if(day < 1 || day > 31) {\n            return false;\n        }\n        if(month < 1 || month > 12) {\n            return false;\n        }\n        if(month == 2 && day > 29) {\n            return false;\n        }\n        if(month == 4 || month == 6 || month == 9 || month == 11) {\n            if(day < 1 || day > 30) {\n                return false;\n            }\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\"\\\\s+\");\n        int count = 0;\n        for (String word : words) {\n            if (word.length() % 2 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        // Write your code here\n        String[] words = txt.split(\"\\\\s+\");\n        int count = 0;\n        int odd = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() % 2 == 0) {\n                count++;\n            } else {\n                odd++;\n            }\n        }\n        return count + odd;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\"\\\\s+\");\n        int count = 0;\n        int odd = 0;\n        for (String word : words) {\n            if (word.length() % 2 == 1) {\n                count++;\n            } else {\n                odd++;\n            }\n        }\n        return count + odd;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\"\\\\s+\");\n        int count = 0;\n        int odd = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() % 2 == 0) {\n                count++;\n            } else {\n                odd++;\n            }\n        }\n        return count + odd;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\"\\\\s+\");\n        int count = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() % 2 == 0) {\n                count += words[i].length() / 2;\n            } else {\n                count += words[i].length() / 2 + 1;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\"\\\\s+\");\n        int count = 0;\n        int odd = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() % 2 == 0) {\n                count++;\n            } else {\n                odd++;\n            }\n        }\n        return count + odd;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\"\\\\s+\");\n        int count = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() % 2 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\"\\\\s+\");\n        int count = 0;\n        int odd = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() % 2 == 0) {\n                count++;\n            } else {\n                odd++;\n            }\n        }\n        return count + odd;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\"\\\\s+\");\n        int count = 0;\n        int odd = 0;\n        for (String word : words) {\n            if (word.length() % 2 == 0) {\n                count++;\n            } else {\n                odd++;\n            }\n        }\n        return count + odd;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\"\\\\s+\");\n        int count = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() % 2 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\"\\\\s+\");\n        int count = 0;\n        int odd = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() % 2 == 0) {\n                count++;\n            } else {\n                odd++;\n            }\n        }\n        if (count == 0) {\n            return odd;\n        } else {\n            return count;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\"\\\\s+\");\n        int count = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() % 2 == 1) {\n                count += words[i].length() / 2;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\" \");\n        int count = 0;\n        int odd = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() % 2 == 0) {\n                count++;\n            } else {\n                odd++;\n            }\n        }\n        return count + \" \" + odd;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\"\\\\s+\");\n        int count = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() % 2 == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\"\\\\s+\");\n        int count = 0;\n        for (String word : words) {\n            if (word.length() % 2 == 1) {\n                count += word.length() / 2;\n            } else {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\" \");\n        int count = 0;\n        int odd = 0;\n        for (String word : words) {\n            if (word.length() > 1) {\n                count++;\n                if (word.toLowerCase().charAt(0) % 2 == 1) {\n                    odd++;\n                }\n            }\n        }\n        return count + \" \" + odd;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\"\\\\s+\");\n        int count = 0;\n        int odd = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() % 2 == 1) {\n                count++;\n            } else {\n                odd++;\n            }\n        }\n        return count + odd;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\"\\\\s+\");\n        int count = 0;\n        int odd = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() % 2 == 0) {\n                count++;\n            } else {\n                odd++;\n            }\n        }\n        return count + odd;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\"\\\\s+\");\n        int count = 0;\n        int odd = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() % 2 == 0) {\n                count++;\n            } else {\n                odd++;\n            }\n        }\n        return count + \" \" + odd;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n        String[] words = txt.split(\"\\\\s+\");\n        int count = 0;\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() % 2 == 0) {\n                count += words[i].length() / 2;\n            } else {\n                count += words[i].length() / 2 + 1;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() <= 1) {\n            return true;\n        }\n        int i = 0;\n        int j = lst.size() - 1;\n        while (i < j) {\n            if (lst.get(i) > lst.get(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() == 1) {\n            return true;\n        }\n        int i = 0;\n        int j = lst.size() - 1;\n        while (i < j) {\n            if (lst.get(i) > lst.get(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() <= 1) {\n            return true;\n        }\n\n        int i = 0;\n        int j = lst.size() - 1;\n\n        while (i < j) {\n            if (lst.get(i) > lst.get(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() <= 1) {\n            return true;\n        }\n        int i = 0;\n        int j = lst.size() - 1;\n        while (i < j) {\n            if (lst.get(i) > lst.get(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() <= 1) {\n            return true;\n        }\n\n        int i = 0;\n        int j = lst.size() - 1;\n        while (i < j) {\n            if (lst.get(i) > lst.get(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() <= 1) {\n            return true;\n        }\n        int i = 0;\n        int j = lst.size() - 1;\n        while (i < j) {\n            if (lst.get(i) > lst.get(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() <= 1) {\n            return true;\n        }\n\n        int i = 0;\n        int j = lst.size() - 1;\n        while (i < j) {\n            if (lst.get(i) > lst.get(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        // write your code here\n        if (lst.size() <= 1) {\n            return true;\n        }\n        int i = 0;\n        int j = lst.size() - 1;\n        while (i < j) {\n            if (lst.get(i) > lst.get(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return true;\n        }\n        int i = 0;\n        int j = lst.size() - 1;\n        while (i < j) {\n            if (lst.get(i) > lst.get(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() <= 1) {\n            return true;\n        }\n        int i = 0;\n        int j = lst.size() - 1;\n        while (i < j) {\n            if (lst.get(i) > lst.get(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() <= 1) {\n            return true;\n        }\n\n        int last = lst.get(lst.size() - 1);\n        int i = lst.size() - 2;\n        while (i >= 0) {\n            if (lst.get(i) > last) {\n                return false;\n            }\n            i--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        // write your code here\n        if (lst.size() <= 1) {\n            return true;\n        }\n        int i = 0;\n        int j = lst.size() - 1;\n        while (i < j) {\n            if (lst.get(i) > lst.get(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() == 0) {\n            return true;\n        }\n        int i = 0;\n        int j = lst.size() - 1;\n        while (i < j) {\n            if (lst.get(i) > lst.get(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() <= 1) {\n            return true;\n        }\n\n        int i = 0;\n        int j = lst.size() - 1;\n        while (i < j) {\n            if (lst.get(i) > lst.get(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() <= 1) {\n            return true;\n        }\n        int i = 0;\n        int j = lst.size() - 1;\n        while (i < j) {\n            if (lst.get(i) > lst.get(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() <= 1) {\n            return true;\n        }\n        int i = 0;\n        int j = lst.size() - 1;\n        while (i < j) {\n            if (lst.get(i) > lst.get(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() <= 1) {\n            return true;\n        }\n\n        int i = 0;\n        int j = lst.size() - 1;\n        while (i < j) {\n            if (lst.get(i) > lst.get(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() <= 1) {\n            return true;\n        }\n\n        int last = lst.get(0);\n        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) != last) {\n                return false;\n            }\n            last = lst.get(i);\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() <= 1) {\n            return true;\n        }\n        int i = 0;\n        while (i < lst.size() - 1) {\n            if (lst.get(i) > lst.get(i + 1)) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n        if (lst.size() <= 1) {\n            return true;\n        }\n\n        int last = lst.get(lst.size() - 1);\n        int i = lst.size() - 2;\n        while (i >= 0) {\n            if (lst.get(i) > last) {\n                return false;\n            }\n            i--;\n        }\n        return true;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        if (interval1.size() == 0 || interval2.size() == 0) {\n            return \"NO\";\n        }\n        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n        if (start1 <= end2 && start2 <= end1) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        // write your code here\n        int len1 = interval1.size();\n        int len2 = interval2.size();\n        int len = len1 + len2;\n        int[] arr = new int[len];\n        int i = 0, j = 0;\n        while(i < len1 && j < len2) {\n            if(interval1.get(i) <= interval2.get(j)) {\n                arr[i] = interval1.get(i);\n                i++;\n            }\n            else {\n                arr[j] = interval2.get(j);\n                j++;\n            }\n        }\n        while(i < len1) {\n            arr[i] = interval1.get(i);\n            i++;\n        }\n        while(j < len2) {\n            arr[j] = interval2.get(j);\n            j++;\n        }\n        int prime = 0;\n        for(int k = 0; k < len; k++) {\n            if(arr[k] == 1) {\n                prime++;\n            }\n        }\n        if(prime == len) {\n            return \"YES\";\n        }\n        else {\n            return \"NO\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        // Write your code here\n        if(interval1.size() == 0 || interval2.size() == 0)\n            return \"NO\";\n        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n        if(start1 > end2 || start2 > end1)\n            return \"NO\";\n        if(start1 == end2 && start2 == end1)\n            return \"YES\";\n        int diff = end1 - start2;\n        if(diff % 2 == 0)\n            return \"NO\";\n        return \"YES\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        if (interval1.size() == 0 || interval2.size() == 0) {\n            return \"NO\";\n        }\n        int i = 0;\n        int j = 0;\n        int count = 0;\n        int len = 0;\n        int max = 0;\n        while (i < interval1.size() && j < interval2.size()) {\n            if (interval1.get(i) <= interval2.get(j)) {\n                i++;\n            } else {\n                j++;\n            }\n            count++;\n        }\n        if (i == interval1.size()) {\n            len = count;\n        } else {\n            len = i - count;\n        }\n        if (len > 0) {\n            max = len;\n        }\n        if (len == 0) {\n            return \"NO\";\n        }\n        if (len == 1) {\n            return \"YES\";\n        }\n        if (len > 1) {\n            return \"YES\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int A = 0;\n        int B = 0;\n        int C = 0;\n        int D = 0;\n        int E = 0;\n        int F = 0;\n        int G = 0;\n        int H = 0;\n        int I = 0;\n        int J = 0;\n        int K = 0;\n        int L = 0;\n        int M = 0;\n        int N = 0;\n        int O = 0;\n        int P = 0;\n        int Q = 0;\n        int R = 0;\n        int S = 0;\n        int T = 0;\n        int U = 0;\n        int V = 0;\n        int W = 0;\n        int X = 0;\n        int Y = 0;\n        int Z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int aa = 0;\n        int bb = 0;\n        int cc = 0;\n        int dd = 0;\n        int ee = 0;\n        int ff = 0;\n        int gg = 0;\n        int hh = 0;\n        int ii = 0;\n        int jj = 0;\n        int kk = 0;\n        int ll = 0;\n        int mm = 0;\n        int nn = 0;\n        int oo = 0;\n        int pp = 0;\n        int qq = 0;\n        int rr = 0;\n        int ss = 0;\n        int tt = 0;\n        int uu = 0;\n        int vv = 0;\n        int ww = 0;\n        int xx = 0;\n        int yy = 0;\n        int zz = 0;\n        int aa1 = 0;\n        int bb1 = 0;\n        int cc1 = 0;\n        int dd1 = 0;\n        int ee1 = 0;\n        int ff1 = 0;\n        int gg1 = 0;\n        int hh1 = 0;\n        int ii1 = 0;\n        int jj1 = 0;\n        int kk1 = 0;\n        int ll1 = 0;\n        int mm1 = 0;\n        int nn1 = 0;\n        int oo1 = 0;\n        int pp1 = 0;\n        int qq1 = 0;\n        int rr1 = 0;\n        int ss1 = 0;\n        int tt1 = 0;\n        int uu1 = 0;\n        int vv1 = 0;\n        int ww1 = 0;\n        int xx1 = 0;\n        int yy1 = 0;\n        int zz1 = 0;\n        int aa2 = 0;\n        int bb2 = 0;\n        int cc2 = 0;\n        int dd2 = 0;\n        int ee2 = 0;\n        int ff2 = 0;\n        int gg2 = 0;\n        int hh2 = 0;\n        int ii2 = 0;\n        int jj2 = 0;\n        int kk2 = 0;\n        int ll2 = 0;\n        int mm2 = 0;\n        int nn2 = 0;\n        int oo2 = 0;\n        int pp2 = 0;\n        int qq2 = 0;\n        int rr2 = 0;\n        int ss2 = 0;\n        int tt2 = 0;\n        int uu2 = 0;\n        int vv2 = 0;\n        int ww2 = 0;\n        int xx2 = 0;\n        int yy2 = 0;\n        int zz2 = 0;\n        int aa3 = 0;\n        int bb3 = 0;\n        int cc3 = 0;\n        int dd3 = 0;\n        int ee3 = 0;\n        int ff3 = 0;\n        int gg3 = 0;\n        int hh3 = 0;\n        int ii3 = 0;\n        int jj3 = 0;\n        int kk3 = 0;\n        int ll3 = 0;\n        int mm3 = 0;\n        int nn3 = 0;\n        int oo3 = 0;\n        int pp3 = 0;\n        int qq3 = 0;\n        int rr3 = 0;\n        int ss3 = 0;\n        int tt3 = 0;\n        int uu3 = 0;\n        int vv3 = 0;\n        int ww3 = 0;\n        int xx3 = 0;\n        int yy3 = 0;\n        int zz3 = 0;\n        int aa4 = 0;\n        int bb4 = 0;\n        int cc4 = 0;\n        int dd4 = 0;\n        int ee4 = 0;\n        int ff4 = 0;\n        int gg4 = 0;\n        int hh4 = 0;\n        int ii4 = 0;\n        int jj4 = 0;\n        int kk4 = 0;\n        int ll4 = 0;\n        int mm4 = 0;\n        int nn4 = 0;\n        int oo4 = 0;\n        int pp4 = 0;\n        int qq4 = 0;\n        int rr4 = 0;\n        int ss4 = 0;\n        int tt4 = 0;\n        int uu4 = 0;\n        int vv4 = 0;\n        int ww4 = 0;\n        int xx4 = 0;\n        int", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        if (interval1.size() == 0 || interval2.size() == 0) {\n            return \"NO\";\n        }\n        if (interval1.get(0) > interval2.get(1)) {\n            return \"NO\";\n        }\n        if (interval1.get(1) < interval2.get(0)) {\n            return \"NO\";\n        }\n        int i = 0;\n        int j = 0;\n        while (i < interval1.size() && j < interval2.size()) {\n            if (interval1.get(i) <= interval2.get(j)) {\n                i++;\n            }\n            j++;\n        }\n        if (i == interval1.size()) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        if(interval1.size() == 0 || interval2.size() == 0)\n            return \"NO\";\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int A = 0;\n        int B = 0;\n        int C = 0;\n        int D = 0;\n        int E = 0;\n        int F = 0;\n        int G = 0;\n        int H = 0;\n        int I = 0;\n        int J = 0;\n        int K = 0;\n        int L = 0;\n        int M = 0;\n        int N = 0;\n        int O = 0;\n        int P = 0;\n        int Q = 0;\n        int R = 0;\n        int S = 0;\n        int T = 0;\n        int U = 0;\n        int V = 0;\n        int W = 0;\n        int X = 0;\n        int Y = 0;\n        int Z = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n        int f = 0;\n        int g = 0;\n        int h = 0;\n        int i1 = 0;\n        int i2 = 0;\n        int j1 = 0;\n        int j2 = 0;\n        int k1 = 0;\n        int k2 = 0;\n        int l1 = 0;\n        int l2 = 0;\n        int m1 = 0;\n        int m2 = 0;\n        int n1 = 0;\n        int n2 = 0;\n        int o1 = 0;\n        int o2 = 0;\n        int p1 = 0;\n        int p2 = 0;\n        int q1 = 0;\n        int q2 = 0;\n        int r1 = 0;\n        int r2 = 0;\n        int s1 = 0;\n        int s2 = 0;\n        int t1 = 0;\n        int t2 = 0;\n        int u1 = 0;\n        int u2 = 0;\n        int v1 = 0;\n        int v2 = 0;\n        int w1 = 0;\n        int w2 = 0;\n        int x1 = 0;\n        int x2 = 0;\n        int y1 = 0;\n        int y2 = 0;\n        int z1 = 0;\n        int z2 = 0;\n        int aa = 0;\n        int bb = 0;\n        int cc = 0;\n        int dd = 0;\n        int ee = 0;\n        int ff = 0;\n        int gg = 0;\n        int hh = 0;\n        int ii = 0;\n        int jj = 0;\n        int kk = 0;\n        int ll = 0;\n        int mm = 0;\n        int nn = 0;\n        int oo = 0;\n        int pp = 0;\n        int qq = 0;\n        int rr = 0;\n        int ss = 0;\n        int tt = 0;\n        int uu = 0;\n        int vv = 0;\n        int ww = 0;\n        int xx = 0;\n        int yy = 0;\n        int zz = 0;\n        int aa1 = 0;\n        int bb1 = 0;\n        int cc1 = 0;\n        int dd1 = 0;\n        int ee1 = 0;\n        int ff1 = 0;\n        int gg1 = 0;\n        int hh1 = 0;\n        int ii1 = 0;\n        int jj1 = 0;\n        int kk1 = 0;\n        int ll1 = 0;\n        int mm1 = 0;\n        int nn1 = 0;\n        int oo1 = 0;\n        int pp1 = 0;\n        int qq1 = 0;\n        int rr1 = 0;\n        int ss1 = 0;\n        int tt1 = 0;\n        int uu1 = 0;\n        int vv1 = 0;\n        int ww1 = 0;\n        int xx1 = 0;\n        int yy1 = 0;\n        int zz1 = 0;\n        int aa2 = 0;\n        int bb2 = 0;\n        int cc2 = 0;\n        int dd2 = 0;\n        int ee2 = 0;\n        int ff2 = 0;\n        int gg2 = 0;\n        int hh2 = 0;\n        int ii2 = 0;\n        int jj2 = 0;\n        int kk2 = 0;\n        int ll2 = 0;\n        int mm2 = 0;\n        int nn2 = 0;\n        int oo2 = 0;\n        int pp2 = 0;\n        int qq2 = 0;\n        int rr2 = 0;\n        int ss2 = 0;\n        int tt2 = 0;\n        int uu2 = 0;\n        int vv2 = 0;\n        int ww2 = 0;\n        int xx2 = 0;\n        int yy2 = 0;\n        int zz2 = 0;\n        int aa3 = 0;\n        int bb3 = 0;\n        int cc3 = 0;\n        int dd3 = 0;\n        int ee3 = 0;\n        int ff3 = 0;\n        int gg3 = 0;\n        int hh3 = 0;\n        int ii3 = 0;\n        int jj3 = 0;\n        int kk3 = 0;\n        int ll3 = 0;\n        int mm3 = 0;\n        int nn3 = 0;\n        int oo3 = 0;\n        int pp3 = 0;\n        int qq3 = 0;\n        int rr3 = 0;\n        int ss3 = 0;\n        int tt3 = 0;\n        int uu3 = 0;\n        int vv3 = 0;\n        int ww3 = 0;\n        int xx3 = 0;\n        int yy3 = 0;\n        int zz3 = 0;\n        int aa4 = 0;", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int len1 = interval1.size();\n        int len2 = interval2.size();\n        if (len1 == 0 || len2 == 0) {\n            return \"NO\";\n        }\n        int[] arr1 = new int[len1];\n        int[] arr2 = new int[len2];\n        for (int i = 0; i < len1; i++) {\n            arr1[i] = interval1.get(i);\n        }\n        for (int i = 0; i < len2; i++) {\n            arr2[i] = interval2.get(i);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        int i = 0;\n        int j = 0;\n        int len = len1 + len2;\n        while (i < len1 && j < len2) {\n            if (arr1[i] <= arr2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        if (i == len1 && j == len2) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int len1 = interval1.size();\n        int len2 = interval2.size();\n        int len = len1 + len2;\n        int[] arr = new int[len];\n        int i = 0;\n        int j = 0;\n        while(i < len1 && j < len2) {\n            if(interval1.get(i) <= interval2.get(j)) {\n                arr[i] = interval1.get(i);\n                i++;\n            }\n            else {\n                arr[j] = interval2.get(j);\n                j++;\n            }\n        }\n        if(i == len1) {\n            return \"YES\";\n        }\n        else if(j == len2) {\n            return \"YES\";\n        }\n        else {\n            return \"NO\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        if (interval1.size() == 0 || interval2.size() == 0) {\n            return \"NO\";\n        }\n        int i = 0;\n        int j = 0;\n        int n = interval1.size();\n        int m = interval2.size();\n        int[] arr = new int[n + m];\n        for (int k = 0; k < n; k++) {\n            arr[k] = interval1.get(k);\n        }\n        for (int k = 0; k < m; k++) {\n            arr[n + k] = interval2.get(k);\n        }\n        Arrays.sort(arr);\n        for (int k = 0; k < n; k++) {\n            for (int l = 0; l < m; l++) {\n                if (arr[k] == arr[n + l]) {\n                    i = k;\n                    j = l;\n                    break;\n                }\n            }\n        }\n        if (i == j) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        if (interval1.size() == 0 || interval2.size() == 0) {\n            return \"NO\";\n        }\n        if (interval1.get(0) > interval2.get(1)) {\n            return \"NO\";\n        }\n        if (interval1.get(1) < interval2.get(0)) {\n            return \"NO\";\n        }\n        int start = interval1.get(0);\n        int end = interval1.get(1);\n        int count = 0;\n        for (int i = 0; i < interval2.size(); i++) {\n            if (start <= interval2.get(i)) {\n                count++;\n                start = interval2.get(i) + 1;\n            }\n        }\n        if (count == interval2.size()) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        if(interval1.size() == 0 || interval2.size() == 0)\n            return \"NO\";\n        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n        if(start1 > end2)\n            return \"NO\";\n        if(start2 > end1)\n            return \"NO\";\n        if(start1 == end2)\n            return \"YES\";\n        if(start1 == start2)\n            return \"YES\";\n        if(start1 == end1)\n            return \"YES\";\n        if(start2 == end1)\n            return \"YES\";\n        if(start1 == start2)\n            return \"YES\";\n        if(start1 == end2)\n            return \"YES\";\n        if(start2 == end2)\n            return \"YES\";\n        if(start1 == start2)\n            return \"YES\";\n        if(start1 == end1)\n            return \"YES\";\n        if(start2 == end1)\n            return \"YES\";\n        if(start1 == start2)\n            return \"YES\";\n        if(start1 == end2)\n            return \"YES\";\n        if(start2 == end2)\n            return \"YES\";\n        if(start1 == start2)\n            return \"YES\";\n        if(start1 == end1)\n            return \"YES\";\n        if(start2 == end1)\n            return \"YES\";\n        if(start1 == start2)\n            return \"YES\";\n        if(start1 == end2)\n            return \"YES\";\n        if(start2 == end2)\n            return \"YES\";\n        if(start1 == start2)\n            return \"YES\";\n        if(start1 == end1)\n            return \"YES\";\n        if(start2 == end1)\n            return \"YES\";\n        if(start1 == start2)\n            return \"YES\";\n        if(start1 == end2)\n            return \"YES\";\n        if(start2 == end2)\n            return \"YES\";\n        if(start1 == start2)\n            return \"YES\";\n        if(start1 == end1)\n            return \"YES\";\n        if(start2 == end1)\n            return \"YES\";\n        if(start1 == start2)\n            return \"YES\";\n        if(start1 == end2)\n            return \"YES\";\n        if(start2 == end2)\n            return \"YES\";\n        if(start1 == start2)\n            return \"YES\";\n        if(start1 == end1)\n            return \"YES\";\n        if(start2 == end1)\n            return \"YES\";\n        if(start1 == start2)\n            return \"YES\";\n        if(start1 == end2)\n            return \"YES\";\n        if(start2 == end2)\n            return \"YES\";\n        if(start1 == start2)\n            return \"YES\";\n        if(start1 == end1)\n            return \"YES\";\n        if(start2 == end1)\n            return \"YES\";\n        if(start1 == start2)\n            return \"YES\";\n        if(start1 == end2)\n            return \"YES\";\n        if(start2 == end2)\n            return \"YES\";\n        if(start1 == start2)\n            return \"YES\";\n        if(start1 == end1)\n            return \"YES\";\n        if(start2 == end1)\n            return \"YES\";\n        if(start1 == start2)\n            return \"YES\";\n        if(start1 == end2)\n            return \"YES\";\n        if(start2 == end2)\n            return \"YES\";\n        if(start1 == start2)\n            return \"YES\";\n        if(start1 == end1)\n            return \"YES\";\n        if(start2 == end1)\n            return \"YES\";\n        if(start1 == start2)\n            return \"YES\";\n        if(start1 == end2)\n            return \"YES\";\n        if(start2 == end2)\n            return \"YES\";\n        if(start1 == start2)\n            return \"YES\";\n        if(start1 == end1)\n            return \"YES\";\n        if(start2 == end1)\n            return \"YES\";\n        if(start1 == start2)\n            return \"YES\";\n        if(start1 == end2)\n            return \"YES\";\n        if(start2 == end2)\n            return \"YES\";\n        if(start1 == start2)\n            return \"YES\";\n        if(start1 == end1)\n            return \"YES\";\n        if(start2 == end1)\n            return \"YES\";\n        if(start1 == start2)\n            return \"YES\";\n        if(start1 == end2)\n            return \"YES\";\n        if(start2 == end2)\n            return \"YES\";\n        if(start1 == start2)\n            return \"YES\";\n        if(start1 == end1)\n            return \"YES\";\n        if(start2 == end1)\n            return \"YES\";\n        if(start1 == start2)\n            return \"YES\";\n        if(start1 == end2)\n            return \"YES\";\n        if(start2 == end2)\n            return \"YES\";\n        if(start1 == start2)\n            return \"YES\";\n        if(start1 == end1)\n            return \"YES\";\n        if(start2 == end1)\n            return \"YES\";\n        if(start1 == start2)\n            return \"YES\";\n        if(start1 == end2)\n            return \"YES\";\n        if(start2 == end2)\n            return \"YES\";\n        if(start1 == start2)\n            return \"YES\";\n        if(start1 == end1)\n            return \"YES\";\n        if(start2 == end1)\n            return \"YES\";\n        if(start1 == start2)\n            return \"YES\";\n        if(start1 == end2)\n            return \"YES\";\n        if(start2 == end2)\n            return \"YES\";\n        if(start1 == start2)\n            return \"YES\";\n        if(start1 == end1)\n            return \"YES\";\n        if(start2 == end1)\n            return \"YES\";\n        if(start1 == start2)\n            return \"YES\";\n        if(start1 == end2)\n            return \"YES\";\n        if(start2 == end2)\n            return \"YES\";\n        if(start1 == start2)\n            return \"YES\";\n        if(start1 == end1)\n            return \"YES\";\n        if(start2 == end1)\n            return \"YES\";\n        if(start1 == start2)\n            return \"YES\";\n        if(start1 == end2)\n            return \"YES\";\n        if(start2 == end2)\n            return \"YES\";\n        if(start1 == start2)\n            return \"YES\";\n        if(start1 == end1)\n            return \"YES\";\n        if(start2 == end1)\n            return \"", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int i = 0;\n        int j = 0;\n        int len = interval1.size();\n        int len2 = interval2.size();\n        int len3 = len + len2;\n        int len4 = len2 + len3;\n        int len5 = len3 + len4;\n        int len6 = len4 + len5;\n        int len7 = len5 + len6;\n        int len8 = len6 + len7;\n        int len9 = len7 + len8;\n        int len10 = len8 + len9;\n        int len11 = len9 + len10;\n        int len12 = len10 + len11;\n        int len13 = len11 + len12;\n        int len14 = len12 + len13;\n        int len15 = len13 + len14;\n        int len16 = len14 + len15;\n        int len17 = len15 + len16;\n        int len18 = len16 + len17;\n        int len19 = len17 + len18;\n        int len20 = len18 + len19;\n        int len21 = len19 + len20;\n        int len22 = len20 + len21;\n        int len23 = len21 + len22;\n        int len24 = len22 + len23;\n        int len25 = len23 + len24;\n        int len26 = len24 + len25;\n        int len27 = len25 + len26;\n        int len28 = len26 + len27;\n        int len29 = len27 + len28;\n        int len30 = len28 + len29;\n        int len31 = len29 + len30;\n        int len32 = len30 + len31;\n        int len33 = len31 + len32;\n        int len34 = len32 + len33;\n        int len35 = len33 + len34;\n        int len36 = len34 + len35;\n        int len37 = len35 + len36;\n        int len38 = len36 + len37;\n        int len39 = len37 + len38;\n        int len40 = len38 + len39;\n        int len41 = len39 + len40;\n        int len42 = len40 + len41;\n        int len43 = len41 + len42;\n        int len44 = len42 + len43;\n        int len45 = len43 + len44;\n        int len46 = len44 + len45;\n        int len47 = len45 + len46;\n        int len48 = len46 + len47;\n        int len49 = len47 + len48;\n        int len50 = len48 + len49;\n        int len51 = len49 + len50;\n        int len52 = len50 + len51;\n        int len53 = len51 + len52;\n        int len54 = len52 + len53;\n        int len55 = len53 + len54;\n        int len56 = len54 + len55;\n        int len57 = len55 + len56;\n        int len58 = len56 + len57;\n        int len59 = len57 + len58;\n        int len60 = len58 + len59;\n        int len61 = len59 + len60;\n        int len62 = len60 + len61;\n        int len63 = len61 + len62;\n        int len64 = len62 + len63;\n        int len65 = len63 + len64;\n        int len66 = len64 + len65;\n        int len67 = len65 + len66;\n        int len68 = len66 + len67;\n        int len69 = len67 + len68;\n        int len70 = len68 + len69;\n        int len71 = len69 + len70;\n        int len72 = len70 + len71;\n        int len73 = len71 + len72;\n        int len74 = len72 + len73;\n        int len75 = len73 + len74;\n        int len76 = len74 + len75;\n        int len77 = len75 + len76;\n        int len78 = len76 + len77;\n        int len79 = len77 + len78;\n        int len80 = len78 + len79;\n        int len81 = len79 + len80;\n        int len82 = len80 + len81;\n        int len83 = len81 + len82;\n        int len84 = len82 + len83;\n        int len85 = len83 + len84;\n        int len86 = len84 + len85;\n        int len87 = len85 + len86;\n        int len88 = len86 + len87;\n        int len89 = len87 + len88;\n        int len90 = len88 + len89;\n        int len91 = len89 + len90;\n        int len92 = len90 + len91;\n        int len93 = len91 + len92;\n        int len94 = len92 + len93;\n        int len95 = len93 + len94;\n        int len96 = len94 + len95;\n        int len97 = len95 + len96;\n        int len98 = len96 + len97;\n        int len99 = len97 + len98;\n        int len100 = len98 + len99;\n        int len101 = len99 + len100;\n        int len102 = len100 + len101;\n        int len103 = len101 + len102;\n        int len104 = len102 + len103;\n        int len105 = len103 + len104;\n        int len106 = len104 + len105;\n        int len107 = len105 + len106;", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        // write your code here\n        int len1 = interval1.size();\n        int len2 = interval2.size();\n        int len = len1 + len2;\n        int[] arr = new int[len];\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n        int n = 0;\n        int p = 0;\n        int q = 0;\n        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n        int z = 0;\n        int aa = 0;\n        int bb = 0;\n        int cc = 0;\n        int dd = 0;\n        int ee = 0;\n        int ff = 0;\n        int gg = 0;\n        int hh = 0;\n        int ii = 0;\n        int jj = 0;\n        int kk = 0;\n        int ll = 0;\n        int mm = 0;\n        int nn = 0;\n        int oo = 0;\n        int pp = 0;\n        int qq = 0;\n        int rr = 0;\n        int ss = 0;\n        int tt = 0;\n        int uu = 0;\n        int vv = 0;\n        int ww = 0;\n        int xx = 0;\n        int yy = 0;\n        int zz = 0;\n        int aa1 = 0;\n        int bb1 = 0;\n        int cc1 = 0;\n        int dd1 = 0;\n        int ee1 = 0;\n        int ff1 = 0;\n        int gg1 = 0;\n        int hh1 = 0;\n        int ii1 = 0;\n        int jj1 = 0;\n        int kk1 = 0;\n        int ll1 = 0;\n        int mm1 = 0;\n        int nn1 = 0;\n        int oo1 = 0;\n        int pp1 = 0;\n        int qq1 = 0;\n        int rr1 = 0;\n        int ss1 = 0;\n        int tt1 = 0;\n        int uu1 = 0;\n        int vv1 = 0;\n        int ww1 = 0;\n        int xx1 = 0;\n        int yy1 = 0;\n        int zz1 = 0;\n        int aa2 = 0;\n        int bb2 = 0;\n        int cc2 = 0;\n        int dd2 = 0;\n        int ee2 = 0;\n        int ff2 = 0;\n        int gg2 = 0;\n        int hh2 = 0;\n        int ii2 = 0;\n        int jj2 = 0;\n        int kk2 = 0;\n        int ll2 = 0;\n        int mm2 = 0;\n        int nn2 = 0;\n        int oo2 = 0;\n        int pp2 = 0;\n        int qq2 = 0;\n        int rr2 = 0;\n        int ss2 = 0;\n        int tt2 = 0;\n        int uu2 = 0;\n        int vv2 = 0;\n        int ww2 = 0;\n        int xx2 = 0;\n        int yy2 = 0;\n        int zz2 = 0;\n        int aa3 = 0;\n        int bb3 = 0;\n        int cc3 = 0;\n        int dd3 = 0;\n        int ee3 = 0;\n        int ff3 = 0;\n        int gg3 = 0;\n        int hh3 = 0;\n        int ii3 = 0;\n        int jj3 = 0;\n        int kk3 = 0;\n        int ll3 = 0;\n        int mm3 = 0;\n        int nn3 = 0;\n        int oo3 = 0;\n        int pp3 = 0;\n        int qq3 = 0;\n        int rr3 = 0;\n        int ss3 = 0;\n        int tt3 = 0;\n        int uu3 = 0;\n        int vv3 = 0;\n        int ww3 = 0;\n        int xx3 = 0;\n        int yy3 = 0;\n        int zz3 = 0;\n        int aa4 = 0;\n        int bb4 = 0;\n        int cc4 = 0;\n        int dd4 = 0;\n        int ee4 = 0;\n        int ff4 = 0;\n        int gg4 = 0;\n        int hh4 = 0;\n        int ii4 = 0;\n        int jj4 = 0;\n        int kk4 = 0;\n        int ll4 = 0;\n        int mm4 = 0;\n        int nn4 = 0;\n        int oo4 = 0;\n        int pp4 = 0;\n        int qq4 = 0;\n        int rr4 = 0;\n        int ss4 = 0;\n        int tt4 = 0;\n        int uu4 = 0;\n        int vv4 = 0;\n        int ww4 = 0;\n        int xx4 = 0;\n        int yy4 = 0;\n        int zz4 = 0;\n        int aa5 = 0;\n        int bb5 = 0;\n        int cc5 = 0;\n        int dd5 = 0;\n        int ee5 = 0;\n        int ff5 = 0;\n        int gg5 = 0;\n        int hh5 = 0;\n        int ii5 = 0;\n        int jj5 = 0;\n        int kk5 = 0;\n        int ll5 = 0;\n        int mm5 = 0;\n        int nn5 = 0;\n        int oo5 = 0;\n        int pp5 = 0;\n        int qq5 = 0;\n        int rr5 = 0;\n        int ss5 = 0;\n        int tt5 = 0;\n        int uu5 = 0;\n        int vv5 = 0;\n        int ww5 = 0;\n        int xx5 = 0;\n        int yy5 = 0;\n        int zz5 = 0;\n        int aa6 = 0;\n        int bb6 = 0;\n        int cc6 = 0;\n        int dd6 = 0;\n        int ee6 = 0;\n        int ff6 = 0;\n        int gg6 = 0;\n        int hh6 = 0;\n        int ii6 = 0;\n        int jj6 = 0;\n        int kk6 = 0;\n        int ll6 = 0;\n        int mm6 =", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        if (interval1.size() == 0 || interval2.size() == 0) {\n            return \"NO\";\n        }\n        int i = 0;\n        int j = 0;\n        int len = 0;\n        while (i < interval1.size() && j < interval2.size()) {\n            if (interval1.get(i) <= interval2.get(j)) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        if (i == interval1.size()) {\n            len = j;\n        } else {\n            len = i;\n        }\n        if (len == interval1.size()) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        // write your code here\n        int len1 = interval1.size();\n        int len2 = interval2.size();\n        int len = len1 + len2;\n        int[] arr = new int[len];\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        while (i < len1 && j < len2) {\n            if (interval1.get(i) <= interval2.get(j)) {\n                arr[k] = interval1.get(i);\n                i++;\n            } else {\n                arr[k] = interval2.get(j);\n                j++;\n            }\n            k++;\n        }\n        while (i < len1) {\n            arr[k] = interval1.get(i);\n            i++;\n            k++;\n        }\n        while (j < len2) {\n            arr[k] = interval2.get(j);\n            j++;\n            k++;\n        }\n        int prime = 0;\n        for (int i = 0; i < len; i++) {\n            if (arr[i] == 1) {\n                prime++;\n            }\n        }\n        if (prime == len) {\n            return \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        // write your code here\n        int i = 0;\n        int j = 0;\n        int len = 0;\n        int len1 = 0;\n        int len2 = 0;\n        int len3 = 0;\n        int len4 = 0;\n        int len5 = 0;\n        int len6 = 0;\n        int len7 = 0;\n        int len8 = 0;\n        int len9 = 0;\n        int len10 = 0;\n        int len11 = 0;\n        int len12 = 0;\n        int len13 = 0;\n        int len14 = 0;\n        int len15 = 0;\n        int len16 = 0;\n        int len17 = 0;\n        int len18 = 0;\n        int len19 = 0;\n        int len20 = 0;\n        int len21 = 0;\n        int len22 = 0;\n        int len23 = 0;\n        int len24 = 0;\n        int len25 = 0;\n        int len26 = 0;\n        int len27 = 0;\n        int len28 = 0;\n        int len29 = 0;\n        int len30 = 0;\n        int len31 = 0;\n        int len32 = 0;\n        int len33 = 0;\n        int len34 = 0;\n        int len35 = 0;\n        int len36 = 0;\n        int len37 = 0;\n        int len38 = 0;\n        int len39 = 0;\n        int len40 = 0;\n        int len41 = 0;\n        int len42 = 0;\n        int len43 = 0;\n        int len44 = 0;\n        int len45 = 0;\n        int len46 = 0;\n        int len47 = 0;\n        int len48 = 0;\n        int len49 = 0;\n        int len50 = 0;\n        int len51 = 0;\n        int len52 = 0;\n        int len53 = 0;\n        int len54 = 0;\n        int len55 = 0;\n        int len56 = 0;\n        int len57 = 0;\n        int len58 = 0;\n        int len59 = 0;\n        int len60 = 0;\n        int len61 = 0;\n        int len62 = 0;\n        int len63 = 0;\n        int len64 = 0;\n        int len65 = 0;\n        int len66 = 0;\n        int len67 = 0;\n        int len68 = 0;\n        int len69 = 0;\n        int len70 = 0;\n        int len71 = 0;\n        int len72 = 0;\n        int len73 = 0;\n        int len74 = 0;\n        int len75 = 0;\n        int len76 = 0;\n        int len77 = 0;\n        int len78 = 0;\n        int len79 = 0;\n        int len80 = 0;\n        int len81 = 0;\n        int len82 = 0;\n        int len83 = 0;\n        int len84 = 0;\n        int len85 = 0;\n        int len86 = 0;\n        int len87 = 0;\n        int len88 = 0;\n        int len89 = 0;\n        int len90 = 0;\n        int len91 = 0;\n        int len92 = 0;\n        int len93 = 0;\n        int len94 = 0;\n        int len95 = 0;\n        int len96 = 0;\n        int len97 = 0;\n        int len98 = 0;\n        int len99 = 0;\n        int len100 = 0;\n        int len101 = 0;\n        int len102 = 0;\n        int len103 = 0;\n        int len104 = 0;\n        int len105 = 0;\n        int len106 = 0;\n        int len107 = 0;\n        int len108 = 0;\n        int len109 = 0;\n        int len110 = 0;\n        int len111 = 0;\n        int len112 = 0;\n        int len113 = 0;\n        int len114 = 0;\n        int len115 = 0;\n        int len116 = 0;\n        int len117 = 0;\n        int len118 = 0;\n        int len119 = 0;\n        int len120 = 0;\n        int len121 = 0;\n        int len122 = 0;\n        int len123 = 0;\n        int len124 = 0;\n        int len125 = 0;\n        int len126 = 0;\n        int len127 = 0;\n        int len128 = 0;\n        int len129 = 0;\n        int len130 = 0;\n        int len131 = 0;\n        int len132 = 0;\n        int len133 = 0;\n        int len134 = 0;\n        int len135 = 0;\n        int len136 = 0;\n        int len137 = 0;\n        int len138 = 0;\n        int len139 = 0;\n        int len140 = 0;\n        int len141 = 0;\n        int len142 = 0;\n        int len143 = 0;\n        int len144 = 0;\n        int len145 = 0;\n        int len146 = 0;\n        int len147 = 0;\n        int len148 = 0;\n        int len149 = 0;\n        int len150 = 0;\n        int len151 = 0;\n        int len152 = 0;\n        int len153 = 0;\n        int len154 = 0;\n        int len155 = 0;\n        int len156 = 0;\n        int len157 = 0;\n        int len158 = 0;", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        if (interval1.size() == 0 || interval2.size() == 0) {\n            return \"NO\";\n        }\n        if (interval1.get(0) <= interval2.get(0)) {\n            return \"NO\";\n        }\n        if (interval1.get(1) >= interval2.get(1)) {\n            return \"NO\";\n        }\n        int start = interval1.get(0);\n        int end = interval1.get(1);\n        int count = 0;\n        for (int i = 0; i < interval2.size(); i++) {\n            if (start <= interval2.get(i) && interval2.get(i) <= end) {\n                count++;\n            }\n        }\n        if (count == interval2.size()) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int i = 0, j = 0;\n        int len1 = interval1.size(), len2 = interval2.size();\n        int[] arr1 = new int[len1], arr2 = new int[len2];\n        int[] arr = new int[len1 + len2];\n        while (i < len1 && j < len2) {\n            if (interval1.get(i) <= interval2.get(j)) {\n                arr1[i] = interval1.get(i);\n                i++;\n            } else {\n                arr1[i] = interval2.get(j);\n                j++;\n            }\n        }\n        while (i < len1) {\n            arr1[i] = interval1.get(i);\n            i++;\n        }\n        while (j < len2) {\n            arr2[j] = interval2.get(j);\n            j++;\n        }\n        for (int k = 0; k < len1 + len2; k++) {\n            arr[k] = arr1[k] + arr2[k];\n        }\n        int len = arr.length;\n        for (int k = 0; k < len; k++) {\n            if (arr[k] == len) {\n                return \"YES\";\n            }\n        }\n        return \"NO\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n        int[] arr1 = new int[interval1.size()];\n        int[] arr2 = new int[interval2.size()];\n        for(int i = 0; i < interval1.size(); i++) {\n            arr1[i] = interval1.get(i);\n        }\n        for(int i = 0; i < interval2.size(); i++) {\n            arr2[i] = interval2.get(i);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        int i = 0;\n        int j = 0;\n        int len = 0;\n        while(i < arr1.length && j < arr2.length) {\n            if(arr1[i] <= arr2[j]) {\n                i++;\n            }\n            else {\n                j++;\n            }\n            len++;\n        }\n        if(i == arr1.length) {\n            return \"YES\";\n        }\n        else if(j == arr2.length) {\n            return \"YES\";\n        }\n        else {\n            return \"NO\";\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int sum = 0;\n        int prod = 1;\n        for (int i : arr) {\n            sum += Math.abs(i);\n            prod *= Math.signum(i);\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int sum = 0;\n        int prod = 1;\n        for (int i : arr) {\n            sum += i;\n            prod *= i;\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int sum = 0;\n        int prod = 1;\n        for (int i : arr) {\n            sum += i;\n            prod *= i;\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int sum = 0;\n        int prod = 1;\n        for (int i : arr) {\n            sum += Math.abs(i);\n            prod *= Math.signum(i);\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int sum = 0;\n        int prod = 1;\n        for (int i : arr) {\n            sum += i;\n            prod *= i;\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if(arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int sum = 0;\n        int prod = 1;\n        for(int i : arr) {\n            sum += Math.abs(i);\n            prod *= Math.signum(i);\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int sum = 0;\n        int prod = 1;\n        for (int i : arr) {\n            sum += Math.abs(i);\n            prod *= Math.signum(i);\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int sum = 0;\n        int prod = 1;\n        for (int i : arr) {\n            sum += i * prod;\n            prod *= i;\n        }\n        return Optional.of(sum);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int sum = 0;\n        int prod = 1;\n        for (int i : arr) {\n            sum += i;\n            prod *= i;\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int sum = 0;\n        int prod = 1;\n        for (int i : arr) {\n            sum += i * prod;\n            prod *= -1;\n        }\n        return Optional.of(sum);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int prod = 1;\n        int sum = 0;\n        for (int i : arr) {\n            prod *= i;\n            sum += i * i;\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if(arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int sum = 0;\n        int prod = 1;\n        for(int i : arr) {\n            sum += i;\n            prod *= i;\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int sum = 0;\n        int prod = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            sum += arr.get(i);\n            prod *= arr.get(i);\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int prod = 1;\n        int sum = 0;\n        for (int i : arr) {\n            prod *= i;\n            sum += Math.abs(i);\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int sum = 0;\n        int prod = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            sum += arr.get(i);\n            prod *= arr.get(i);\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int sum = 0;\n        int prod = 1;\n        for (int i : arr) {\n            sum += Math.abs(i);\n            prod *= Math.abs(i);\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int sum = 0;\n        int prod = 1;\n        for (int i : arr) {\n            sum += i * prod;\n            prod *= -1;\n        }\n        return Optional.of(sum);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int sum = 0;\n        int prod = 1;\n        for (int i : arr) {\n            sum += i;\n            prod *= i;\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int sum = 0;\n        int prod = 1;\n        for (int i : arr) {\n            sum += i;\n            prod *= i;\n        }\n        return Optional.of(sum * prod);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n        if(arr.isEmpty()) {\n            return Optional.empty();\n        }\n        int sum = 0;\n        int prod = 1;\n        for(int i: arr) {\n            sum += i;\n            prod *= i;\n        }\n        return Optional.of(sum * prod);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        // Write your code here\n        List<Integer> result = new ArrayList<>();\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = grid[i][j];\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + grid[i][j];\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + grid[i][j];\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n                }\n            }\n        }\n        for (int i = n - 1; i >= 0; i--) {\n            for (int j = m - 1; j >= 0; j--) {\n                result.add(dp[i][j]);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = grid[i][j];\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + grid[i][j];\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + grid[i][j];\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n                }\n            }\n        }\n        List<Integer> res = new ArrayList<>();\n        for (int i = n - 1; i >= 0; i--) {\n            for (int j = m - 1; j >= 0; j--) {\n                res.add(dp[i][j]);\n            }\n        }\n        Collections.reverse(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int m = grid[0].size();\n        List<Integer> path = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    path.add(grid[i][j]);\n                } else {\n                    int min = Integer.MAX_VALUE;\n                    for (int x = i - 1; x >= 0; x--) {\n                        for (int y = j - 1; y >= 0; y--) {\n                            if (x == i - 1 && y == j - 1) {\n                                min = Math.min(min, grid[x][y]);\n                            } else {\n                                min = Math.min(min, grid[x][y] + minPath(grid, k - 1));\n                            }\n                        }\n                    }\n                    path.add(min);\n                }\n            }\n        }\n        return path;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        if (n == 0) {\n            return new ArrayList<Integer>();\n        }\n        int m = grid[0].size();\n        if (m == 0) {\n            return new ArrayList<Integer>();\n        }\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = grid[i][j];\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + grid[i][j];\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + grid[i][j];\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n                }\n            }\n        }\n        List<Integer> res = new ArrayList<Integer>();\n        for (int i = 0; i < k; i++) {\n            res.add(dp[n - 1][m - 1]);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        if (n == 0) return new ArrayList<Integer>();\n        int m = grid[0].size();\n        if (m == 0) return new ArrayList<Integer>();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = grid[i][j];\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n                }\n            }\n        }\n        List<Integer> res = new ArrayList<Integer>();\n        for (int i = n - 1; i >= 0; i--) {\n            for (int j = m - 1; j >= 0; j--) {\n                if (i == n - 1 && j == m - 1) {\n                    res.add(dp[i][j]);\n                } else {\n                    res.add(Math.min(dp[i][j], dp[i + 1][j], dp[i][j + 1]));\n                }\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = grid[i][j];\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + grid[i][j];\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + grid[i][j];\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n                }\n            }\n        }\n        List<Integer> ans = new ArrayList<>();\n        for (int i = n - 1; i >= 0; i--) {\n            for (int j = m - 1; j >= 0; j--) {\n                ans.add(dp[i][j]);\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        List<Integer> result = new ArrayList<>();\n        if (grid == null || grid.size() == 0 || k <= 0) {\n            return result;\n        }\n        int m = grid.size();\n        int n = grid[0].size();\n        int[][] dp = new int[m][n];\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = grid[i][j];\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n                }\n            }\n        }\n        for (int i = m - 1; i >= 0; i--) {\n            for (int j = n - 1; j >= 0; j--) {\n                if (i == m - 1 && j == n - 1) {\n                    result.add(dp[i][j]);\n                } else {\n                    result.add(Math.min(dp[i][j], dp[i + 1][j], dp[i][j + 1]));\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        List<Integer> result = new ArrayList<Integer>();\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = grid.get(i).get(j);\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + grid.get(i).get(j);\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + grid.get(i).get(j);\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid.get(i).get(j);\n                }\n            }\n        }\n        for (int i = n - 1; i >= 0; i--) {\n            for (int j = m - 1; j >= 0; j--) {\n                result.add(dp[i][j]);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int m = grid[0].size();\n        List<Integer> path = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    path.add(grid.get(i).get(j));\n                } else {\n                    int min = Integer.MAX_VALUE;\n                    for (int d = 0; d < k; d++) {\n                        int x = j + d;\n                        int y = i + d;\n                        if (x >= 0 && x < m && y >= 0 && y < n) {\n                            min = Math.min(min, grid.get(y).get(x));\n                        }\n                    }\n                    path.add(min);\n                }\n            }\n        }\n        return path;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        List<Integer> ans = new ArrayList<>();\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = grid[i][j];\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + grid[i][j];\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + grid[i][j];\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n                }\n            }\n        }\n        for (int i = n - 1; i >= 0; i--) {\n            for (int j = m - 1; j >= 0; j--) {\n                ans.add(dp[i][j]);\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = grid[i][j];\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + grid[i][j];\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + grid[i][j];\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n                }\n            }\n        }\n        List<Integer> res = new ArrayList<>();\n        for (int i = n - 1; i >= 0; i--) {\n            for (int j = m - 1; j >= 0; j--) {\n                res.add(dp[i][j]);\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        // Write your code here\n        List<Integer> res = new ArrayList<>();\n        if (grid == null || grid.size() == 0) return res;\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = grid[i][j];\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + grid[i][j];\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + grid[i][j];\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n                }\n            }\n        }\n        for (int i = n - 1; i >= 0; i--) {\n            for (int j = m - 1; j >= 0; j--) {\n                res.add(dp[i][j]);\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = grid[i][j];\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + grid[i][j];\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + grid[i][j];\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n                }\n            }\n        }\n        List<Integer> res = new ArrayList<>();\n        for (int i = n - 1; i >= 0; i--) {\n            for (int j = m - 1; j >= 0; j--) {\n                res.add(dp[i][j]);\n            }\n        }\n        Collections.reverse(res);\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = grid[i][j];\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n                }\n            }\n        }\n        List<Integer> ans = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            ans.add(dp[n - 1][m - 1]);\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        // Write your code here\n        List<Integer> path = new ArrayList<>();\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] directions = new int[][] {{-1, 0}, {1, 0}, {0, -1}, {0, 1}}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = grid.get(i).get(j);\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + grid.get(i).get(j);\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + grid.get(i).get(j);\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid.get(i).get(j);\n                }\n            }\n        }\n        List<Integer> ans = new ArrayList<>();\n        for (int i = k - 1; i >= 0; i--) {\n            ans.add(dp[n - 1][i]);\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int m = grid.get(0).size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = grid.get(i).get(j);\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + grid.get(i).get(j);\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + grid.get(i).get(j);\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid.get(i).get(j);\n                }\n            }\n        }\n        List<Integer> res = new ArrayList<>();\n        for (int i = k - 1; i >= 0; i--) {\n            res.add(dp[n - 1][i]);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        // Write your code here\n        List<Integer> res = new ArrayList<>();\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = grid[i][j];\n                } else if (i == 0) {\n                    dp[i][j] = dp[i][j - 1] + grid[i][j];\n                } else if (j == 0) {\n                    dp[i][j] = dp[i - 1][j] + grid[i][j];\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n                }\n            }\n        }\n        for (int i = n - 1; i >= 0; i--) {\n            for (int j = m - 1; j >= 0; j--) {\n                res.add(dp[i][j]);\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i == 0 && j == 0) {\n                    dp[i][j] = grid[i][j];\n                } else {\n                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n                }\n            }\n        }\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            res.add(dp[n - 1][m - 1]);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n        // Write your code here\n        int n = grid.size();\n        int m = grid[0].size();\n        int[][] dp = new int[n][m];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(i == 0 && j == 0) {\n                    dp[i][j] = grid[i][j];\n                } else if(i == 0) {\n                    dp[i][j] = dp[i][j-1] + grid[i][j];\n                } else if(j == 0) {\n                    dp[i][j] = dp[i-1][j] + grid[i][j];\n                } else {\n                    dp[i][j] = Math.min(dp[i-1][j], dp[i][j-1]) + grid[i][j];\n                }\n            }\n        }\n        List<Integer> res = new ArrayList<>();\n        for(int i = n-1; i >= 0; i--) {\n            for(int j = m-1; j >= 0; j--) {\n                res.add(dp[i][j]);\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            result.add(1);\n            result.add(1);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1);\n            result.add(1);\n            result.add(2);\n            return result;\n        }\n        if (n == 3) {\n            result.add(1);\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            return result;\n        }\n        int a = 1;\n        int b = 1;\n        int c = 2;\n        for (int i = 0; i < n - 2; i++) {\n            int temp = a;\n            a = b;\n            b = c;\n            c = temp + b;\n        }\n        result.add(a);\n        result.add(b);\n        result.add(c);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> list = new ArrayList<>();\n        if (n <= 0) {\n            return list;\n        }\n        list.add(1);\n        list.add(1);\n        list.add(1);\n        for (int i = 2; i <= n; i++) {\n            list.add(list.get(i - 1) + list.get(i - 2) + list.get(i - 3));\n        }\n        return list;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> res = new ArrayList<>();\n        if(n == 0) return res;\n        if(n == 1) return Arrays.asList(1);\n        if(n == 2) return Arrays.asList(1, 1);\n        if(n == 3) return Arrays.asList(1, 1, 2);\n        res.add(1);\n        res.add(1);\n        res.add(2);\n        for(int i = 3; i <= n; i++) {\n            res.add(res.get(i - 1) + res.get(i - 2) + res.get(i - 3));\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            result.add(1);\n            result.add(1);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1);\n            result.add(1);\n            result.add(2);\n            return result;\n        }\n        if (n == 3) {\n            result.add(1);\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            return result;\n        }\n        if (n == 4) {\n            result.add(1);\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(5);\n            return result;\n        }\n        if (n == 5) {\n            result.add(1);\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(5);\n            result.add(8);\n            return result;\n        }\n        if (n == 6) {\n            result.add(1);\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(5);\n            result.add(8);\n            result.add(13);\n            return result;\n        }\n        if (n == 7) {\n            result.add(1);\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(5);\n            result.add(8);\n            result.add(13);\n            result.add(21);\n            return result;\n        }\n        if (n == 8) {\n            result.add(1);\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(5);\n            result.add(8);\n            result.add(13);\n            result.add(21);\n            result.add(34);\n            return result;\n        }\n        if (n == 9) {\n            result.add(1);\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(5);\n            result.add(8);\n            result.add(13);\n            result.add(21);\n            result.add(34);\n            result.add(55);\n            return result;\n        }\n        if (n == 10) {\n            result.add(1);\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(5);\n            result.add(8);\n            result.add(13);\n            result.add(21);\n            result.add(34);\n            result.add(55);\n            result.add(89);\n            return result;\n        }\n        if (n == 11) {\n            result.add(1);\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(5);\n            result.add(8);\n            result.add(13);\n            result.add(21);\n            result.add(34);\n            result.add(55);\n            result.add(89);\n            result.add(144);\n            return result;\n        }\n        if (n == 12) {\n            result.add(1);\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(5);\n            result.add(8);\n            result.add(13);\n            result.add(21);\n            result.add(34);\n            result.add(55);\n            result.add(89);\n            result.add(144);\n            result.add(233);\n            return result;\n        }\n        if (n == 13) {\n            result.add(1);\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(5);\n            result.add(8);\n            result.add(13);\n            result.add(21);\n            result.add(34);\n            result.add(55);\n            result.add(89);\n            result.add(144);\n            result.add(233);\n            result.add(377);\n            return result;\n        }\n        if (n == 14) {\n            result.add(1);\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(5);\n            result.add(8);\n            result.add(13);\n            result.add(21);\n            result.add(34);\n            result.add(55);\n            result.add(89);\n            result.add(144);\n            result.add(233);\n            result.add(377);\n            result.add(610);\n            return result;\n        }\n        if (n == 15) {\n            result.add(1);\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(5);\n            result.add(8);\n            result.add(13);\n            result.add(21);\n            result.add(34);\n            result.add(55);\n            result.add(89);\n            result.add(144);\n            result.add(233);\n            result.add(377);\n            result.add(610);\n            result.add(987);\n            return result;\n        }\n        if (n == 16) {\n            result.add(1);\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            result.add(5);\n            result.add(8);\n            result.add(13);\n            result.add(21);\n            result.add(34);\n            result.add(55);\n            result.add(89);\n            result.add(144);\n            result.add(233);\n            result.add(377);\n            result.add(610);\n            result.add(987);\n            result.add(1597);\n            return result;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> ans = new ArrayList<Integer>();\n        if(n <= 0) return ans;\n        if(n == 1) ans.add(1);\n        if(n == 2) ans.add(1);\n        if(n == 3) ans.add(1);\n        for(int i = 4; i <= n; i++) {\n            ans.add(ans.get(i - 1) + ans.get(i - 2) + ans.get(i - 3));\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        if (n <= 0) {\n            return result;\n        }\n        result.add(1);\n        result.add(1);\n        for (int i = 2; i <= n; i++) {\n            result.add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        if (n <= 0) {\n            return result;\n        }\n        result.add(1);\n        result.add(1);\n        result.add(1);\n        for (int i = 2; i <= n; i++) {\n            result.add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        if(n <= 0)\n            return result;\n        result.add(1);\n        result.add(1);\n        result.add(1);\n        for(int i = 2; i <= n; i++) {\n            result.add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        if (n <= 0) {\n            return result;\n        }\n        result.add(1);\n        result.add(1);\n        result.add(2);\n        for (int i = 3; i <= n; i++) {\n            result.add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> list = new ArrayList<>();\n        if(n == 0) {\n            return list;\n        }\n        if(n == 1) {\n            list.add(1);\n            return list;\n        }\n        if(n == 2) {\n            list.add(1);\n            list.add(1);\n            return list;\n        }\n        if(n == 3) {\n            list.add(1);\n            list.add(1);\n            list.add(1);\n            return list;\n        }\n        int a = 1;\n        int b = 1;\n        int c = 1;\n        for(int i = 0; i < n - 2; i++) {\n            int temp = a;\n            a = b;\n            b = c;\n            c = temp + b;\n        }\n        list.add(a);\n        list.add(b);\n        list.add(c);\n        return list;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> ans = new ArrayList<>();\n        ans.add(1);\n        ans.add(3);\n        for (int i = 2; i <= n; i++) {\n            ans.add(ans.get(i - 1) + ans.get(i - 2) + ans.get(i + 1));\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        if (n <= 0) {\n            return result;\n        }\n        int a = 0;\n        int b = 1;\n        int c = 1;\n        for (int i = 0; i < n; i++) {\n            result.add(a);\n            a = b;\n            b = c;\n            c = a + b;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> ans = new ArrayList<>();\n        if(n == 0) return ans;\n        if(n == 1) return ans;\n        if(n == 2) return ans.add(1).add(1);\n        ans.add(1);\n        ans.add(1);\n        ans.add(2);\n        for(int i = 3; i <= n; i++) {\n            ans.add(ans.get(i - 1) + ans.get(i - 2) + ans.get(i - 3));\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        if (n <= 0) return result;\n        if (n == 1) result.add(1);\n        if (n == 2) result.add(1);\n        if (n == 3) result.add(1);\n        for (int i = 4; i <= n; i++) {\n            result.add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            result.add(1);\n            result.add(1);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1);\n            result.add(1);\n            result.add(2);\n            return result;\n        }\n        int a = 1;\n        int b = 1;\n        int c = 2;\n        for (int i = 3; i <= n; i++) {\n            int temp = a;\n            a = b;\n            b = c;\n            c = temp + b;\n        }\n        result.add(a);\n        result.add(b);\n        result.add(c);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> ans = new ArrayList<Integer>();\n        if(n == 0)\n            return ans;\n        if(n == 1)\n            ans.add(1);\n        else if(n == 2)\n            ans.add(1);\n        else if(n == 3)\n            ans.add(1);\n        else {\n            ans.add(1);\n            ans.add(1);\n            ans.add(1);\n            for(int i = 2; i <= n; i++) {\n                ans.add(ans.get(i - 1) + ans.get(i - 2) + ans.get(i - 3));\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        if (n <= 0) {\n            return result;\n        }\n        if (n == 1) {\n            result.add(1);\n            result.add(1);\n            return result;\n        }\n        result.add(1);\n        result.add(1);\n        result.add(1);\n        for (int i = 2; i <= n; i++) {\n            result.add(result.get(i - 1) + result.get(i - 2) + result.get(i - 3));\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> ans = new ArrayList<>();\n        if (n == 0) {\n            return ans;\n        }\n        ans.add(1);\n        ans.add(1);\n        ans.add(2);\n        for (int i = 3; i <= n; i++) {\n            ans.add(ans.get(i - 1) + ans.get(i - 2) + ans.get(i - 3));\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<Integer>();\n        if (n == 0) {\n            return result;\n        }\n        if (n == 1) {\n            result.add(1);\n            result.add(1);\n            return result;\n        }\n        if (n == 2) {\n            result.add(1);\n            result.add(1);\n            result.add(2);\n            return result;\n        }\n        if (n == 3) {\n            result.add(1);\n            result.add(1);\n            result.add(2);\n            result.add(3);\n            return result;\n        }\n        int a = 1;\n        int b = 1;\n        int c = 2;\n        for (int i = 3; i <= n; i++) {\n            int temp = a;\n            a = b;\n            b = c;\n            c = temp + b;\n        }\n        result.add(a);\n        result.add(b);\n        result.add(c);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n        List<Integer> result = new ArrayList<>();\n        if(n == 0) return result;\n        if(n == 1) return Arrays.asList(1);\n        if(n == 2) return Arrays.asList(1, 1);\n        if(n == 3) return Arrays.asList(1, 1, 2);\n        if(n == 4) return Arrays.asList(1, 1, 2, 3);\n        if(n == 5) return Arrays.asList(1, 1, 2, 3, 5);\n        if(n == 6) return Arrays.asList(1, 1, 2, 3, 5, 8);\n        if(n == 7) return Arrays.asList(1, 1, 2, 3, 5, 8, 13);\n        if(n == 8) return Arrays.asList(1, 1, 2, 3, 5, 8, 13, 21);\n        if(n == 9) return Arrays.asList(1, 1, 2, 3, 5, 8, 13, 21, 34);\n        if(n == 10) return Arrays.asList(1, 1, 2, 3, 5, 8, 13, 21, 34, 55);\n        if(n == 11) return Arrays.asList(1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89);\n        if(n == 12) return Arrays.asList(1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144);\n        if(n == 13) return Arrays.asList(1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233);\n        if(n == 14) return Arrays.asList(1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377);\n        if(n == 15) return Arrays.asList(1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610);\n        if(n == 16) return Arrays.asList(1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987);\n        if(n == 17) return Arrays.asList(1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597);\n        if(n == 18) return Arrays.asList(1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 3194);\n        if(n == 19) return Arrays.asList(1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 3194, 6748);\n        if(n == 20) return Arrays.asList(1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 3194, 6748, 12640);\n        if(n == 21) return Arrays.asList(1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 3194, 6748, 12640, 20920);\n        if(n == 22) return Arrays.asList(1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 3194, 6748, 12640, 20920, 35560);\n        if(n == 23) return Arrays.asList(1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 3194, 6748, 12640, 20920, 35560, 76296);\n        if(n == 24) return Arrays.asList(1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 3194, 6748, 12640, 20920, 35560"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int count = 0;\n        while (n != 0) {\n            int digit = n % 10;\n            if (digit % 2 == 1) {\n                count++;\n            }\n            n /= 10;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int count = 0;\n        while(n != 0) {\n            int digit = n % 10;\n            n /= 10;\n            if(digit % 2 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int ans = 1;\n        while (n != 0) {\n            int rem = n % 10;\n            n /= 10;\n            if (rem % 2 == 1) {\n                ans *= rem;\n            }\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int count = 0;\n        while (n != 0) {\n            count++;\n            n = n / 10;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int count = 0;\n        while(n != 0) {\n            count++;\n            n /= 10;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int count = 0;\n        while(n != 0) {\n            int digit = n % 10;\n            if(digit % 2 == 0) {\n                count++;\n            }\n            n /= 10;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int count = 0;\n        while(n != 0) {\n            n = n / 10;\n            count++;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int count = 0;\n        while(n > 0) {\n            int digit = n % 10;\n            if(digit % 2 == 1) {\n                count++;\n            }\n            n = n / 10;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int count = 0;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 == 1) {\n                count++;\n            }\n            n /= 10;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int count = 0;\n        while (n > 0) {\n            count += n % 10;\n            n /= 10;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int count = 0;\n        while(n != 0) {\n            n = n/10;\n            count++;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int count = 0;\n        while (n != 0) {\n            count++;\n            n /= 10;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int count = 0;\n        while (n > 0) {\n            count += n % 10;\n            n /= 10;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int prod = 1;\n        while (n != 0) {\n            int rem = n % 10;\n            n = n / 10;\n            if (rem % 2 == 1) {\n                prod *= rem;\n            }\n        }\n        return prod;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int ans = 1;\n        while(n != 0) {\n            ans *= n % 10;\n            n /= 10;\n        }\n        return ans;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int count = 0;\n        while(n != 0) {\n            count++;\n            n = n / 10;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int count = 0;\n        while (n > 0) {\n            int digit = n % 10;\n            if (digit % 2 == 0) {\n                count++;\n            }\n            n /= 10;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int count = 0;\n        while(n > 0) {\n            int digit = n % 10;\n            if(digit % 2 == 0) {\n                count++;\n            }\n            n /= 10;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int count = 0;\n        while(n != 0) {\n            if(n % 10 == 0) {\n                count++;\n            }\n            n /= 10;\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n        int result = 1;\n        while(n != 0) {\n            int digit = n % 10;\n            if(digit % 2 == 1) {\n                result *= digit;\n            }\n            n /= 10;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        if (string.length() < 2) {\n            return false;\n        }\n\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        if (string.length() == 0) {\n            return false;\n        }\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for(char c : string.toCharArray()) {\n            if(c == '[') {\n                stack.push(c);\n            } else if(c == ']') {\n                if(stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        if (string.length() == 0) {\n            return false;\n        }\n        Stack<Character> stack = new Stack<>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for(char c : string.toCharArray()) {\n            if(c == '[') {\n                stack.push(c);\n            }\n            else if(c == ']') {\n                if(stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<Character>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        if (string.length() == 0) {\n            return false;\n        }\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<Character>();\n        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n        Stack<Character> stack = new Stack<>();\n        for (char c : string.toCharArray()) {\n            if (c == '[') {\n                stack.push(c);\n            } else if (c == ']') {\n                if (stack.isEmpty() || stack.peek() != '[') {\n                    return false;\n                }\n                stack.pop();\n            }\n        }\n        return stack.isEmpty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            sum += (int) Math.round(num * num);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            sum += (int) Math.ceil(num * num);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for(Double d : lst) {\n            sum += d * d;\n        }\n        return (int) Math.ceil(sum);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            sum += (int) Math.round(num * num);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            sum += (int) Math.ceil(num * num);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            sum += num * num;\n        }\n        return (int) Math.ceil(sum);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double i : lst) {\n            sum += (int) Math.round(i * i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            sum += (int) Math.ceil(num * num);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            sum += (int) Math.ceil(num * num);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            sum += (int) Math.ceil(num * num);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            sum += (int) Math.ceil(num * num);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for(Double i : lst) {\n            sum += (int)Math.ceil(i * i);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            sum += (int) Math.round(num * num);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for(Double num : lst) {\n            sum += num * num;\n        }\n        return (int) Math.ceil(sum);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for(Double num : lst) {\n            sum += (int) Math.ceil(num * num);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double num : lst) {\n            sum += (int) Math.ceil(num * num);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for(Double d: lst) {\n            sum += (int)Math.ceil(d*d);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for(Double i: lst) {\n            sum += (int) Math.pow(i, 2);\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double d : lst) {\n            sum += d * d;\n        }\n        return (int) Math.ceil(sum);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n        int sum = 0;\n        for (Double d : lst) {\n            sum += d * d;\n        }\n        return (int) Math.ceil(sum);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.length() == 0) {\n            return false;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.length() == 0) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        if (Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isDigit(lastChar)) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.length() == 0) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        if (Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isDigit(lastChar)) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        char[] txtArr = txt.toCharArray();\n        char lastChar = txtArr[txtArr.length - 1];\n        if (Character.isLetter(lastChar)) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if(txt.length() == 0)\n            return false;\n        char lastChar = txt.charAt(txt.length()-1);\n        if(Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.is", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if(txt.length() == 0)\n            return false;\n        char lastChar = txt.charAt(txt.length() - 1);\n        if(Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar))\n            return true;\n        else\n            return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.length() == 0) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        if (Character.isLetter(lastChar)) {\n            return false;\n        }\n        for (int i = txt.length() - 2; i >= 0; i--) {\n            char c = txt.charAt(i);\n            if (Character.isLetter(c) || Character.isDigit(c)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        char lastChar = txt.charAt(txt.length() - 1);\n        if (Character.isAlphabetic(lastChar)) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        char[] txtArray = txt.toCharArray();\n        char lastChar = txtArray[txtArray.length - 1];\n        if (Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isSpaceChar(lastChar)) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.length() == 0) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        if (Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isSpaceChar(lastChar)) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.length() == 0) {\n            return false;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.length() == 0)\n            return false;\n        char lastChar = txt.charAt(txt.length() - 1);\n        if (Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar))\n            return true;\n        else\n            return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.length() == 0) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        if (Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isSpaceChar(lastChar)) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if(txt.length() == 0)\n            return false;\n        char lastChar = txt.charAt(txt.length() - 1);\n        if(Character.isLetter(lastChar))\n            return false;\n        for(int i = txt.length() - 2; i >= 0; i--) {\n            char c = txt.charAt(i);\n            if(Character.isLetter(c))\n                return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.length() == 0) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        if (Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isSpaceChar(lastChar)) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.length() == 0) {\n            return false;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.length() == 0) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        if (Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isSpaceChar(lastChar)) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.length() == 0) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        if (Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isDigit(lastChar)) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        if (txt.length() == 0) {\n            return false;\n        }\n        char lastChar = txt.charAt(txt.length() - 1);\n        if (Character.isLetter(lastChar) && !Character.isLetterOrDigit(lastChar)) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n        char[] chars = txt.toCharArray();\n        if(chars.length == 0)\n            return false;\n        char lastChar = chars[chars.length - 1];\n        if(Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(lastChar) && !Character.isLetter(last"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        if (n == 0) return -1;\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        for (int i = 0; i < n; i++) {\n            if (arrCopy[i] >= arrCopy[i + 1]) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for(int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        int i = 0;\n        while(i < n && arrCopy[i] >= arrCopy[i+1]) {\n            i++;\n        }\n        return i == n ? -1 : i;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        if (n == 0) return -1;\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        int i = 0;\n        int j = n - 1;\n        while (i < j) {\n            if (arrCopy[i] >= arrCopy[j]) {\n                i++;\n            } else {\n                j--;\n            }\n        }\n        if (arrCopy[i] == arrCopy[j]) {\n            return i;\n        } else {\n            return -1;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        int[] arr_copy = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr_copy[i] = arr.get(i);\n        }\n        Arrays.sort(arr_copy);\n        for(int i = 0; i < n; i++) {\n            if(arr_copy[i] != i+1) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        int[] arr1 = new int[n];\n        int[] arr2 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr1[i] = arr.get(i);\n            arr2[i] = arr.get(i);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        for (int i = 0; i < n; i++) {\n            if (arr1[i] >= arr2[i]) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        int[] arr1 = new int[n];\n        int[] arr2 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr1[i] = arr.get(i);\n            arr2[i] = arr.get(i+1);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        int i = 0;\n        int j = 0;\n        while(i < n && j < n) {\n            if(arr1[i] >= arr2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        if(i == n) {\n            return -1;\n        }\n        return i;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        int[] arr1 = new int[n];\n        int[] arr2 = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr1[i] = arr.get(i);\n        }\n        for(int i = 0; i < n; i++) {\n            arr2[i] = arr.get(i+1);\n        }\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        for(int i = 0; i < n; i++) {\n            if(arr1[i] >= arr2[i]) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        int index = 0;\n        for (int i = 0; i < n; i++) {\n            if (arrCopy[i] >= arrCopy[index]) {\n                index++;\n            } else {\n                break;\n            }\n        }\n        return index == n ? -1 : index;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        if(n == 0) return -1;\n        int[] arrCopy = new int[n];\n        for(int i = 0; i < n; i++) arrCopy[i] = arr.get(i);\n        Arrays.sort(arrCopy);\n        for(int i = 0; i < n; i++) {\n            if(arrCopy[i] >= arrCopy[i+1]) return i;\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        if (n == 0) {\n            return -1;\n        }\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        int i = 0;\n        int j = n - 1;\n        while (i < j) {\n            if (arrCopy[i] >= arrCopy[j]) {\n                i++;\n            } else {\n                j--;\n            }\n        }\n        if (arrCopy[i] >= arrCopy[j]) {\n            return -1;\n        }\n        return i;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        for (int i = 0; i < n; i++) {\n            if (arrCopy[i] >= arrCopy[i + 1]) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        if (arr.size() == 0) {\n            return -1;\n        }\n        int n = arr.size();\n        int[] arr_copy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr_copy[i] = arr.get(i);\n        }\n        Arrays.sort(arr_copy);\n        int i = 0;\n        int j = 1;\n        while (i < n && j < n) {\n            if (arr_copy[i] >= arr_copy[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        if (i == n) {\n            return j;\n        } else {\n            return -1;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        if (arr.size() == 0) {\n            return -1;\n        }\n        int max = arr.get(0);\n        int min = arr.get(0);\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) > max) {\n                max = arr.get(i);\n            }\n            if (arr.get(i) < min) {\n                min = arr.get(i);\n            }\n        }\n        if (max >= min) {\n            return -1;\n        }\n        int i = 0;\n        while (i < arr.size() && arr.get(i) >= max) {\n            i++;\n        }\n        return i;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        int[] arr2 = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr2[i] = arr.get(i);\n        }\n        Arrays.sort(arr2);\n        int i = 0;\n        int j = n - 1;\n        while (i < j) {\n            if (arr2[i] >= arr2[j]) {\n                j--;\n            } else {\n                i++;\n            }\n        }\n        if (arr2[i] == arr2[j]) {\n            return i;\n        } else {\n            return -1;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        if (n == 0) return -1;\n        int[] arrCopy = new int[n];\n        arr.toArray(arrCopy);\n        Arrays.sort(arrCopy);\n        int i = 0;\n        int j = n-1;\n        while (i < j) {\n            if (arrCopy[i] >= arrCopy[j]) {\n                j--;\n            } else {\n                i++;\n            }\n        }\n        return i;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        int[] arr_copy = new int[n];\n        for(int i = 0; i < n; i++) {\n            arr_copy[i] = arr.get(i);\n        }\n        Arrays.sort(arr_copy);\n        for(int i = 0; i < n; i++) {\n            if(arr_copy[i] != arr.get(i)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        int i = 0;\n        int j = n - 1;\n        while(i < j) {\n            if(arr.get(i) >= arr.get(j)) {\n                i++;\n            } else {\n                j--;\n            }\n        }\n        return i;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        for (int i = 0; i < n; i++) {\n            if (arrCopy[i] >= arrCopy[i + 1]) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        int[] arrCopy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arrCopy[i] = arr.get(i);\n        }\n        Arrays.sort(arrCopy);\n        int i = 0;\n        while (i < n && arrCopy[i] >= arrCopy[i+1]) {\n            i++;\n        }\n        return i == n ? -1 : i;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n        int n = arr.size();\n        int[] arr_copy = new int[n];\n        for (int i = 0; i < n; i++) {\n            arr_copy[i] = arr.get(i);\n        }\n        Arrays.sort(arr_copy);\n        int i = 0;\n        int j = n - 1;\n        while (i < j) {\n            if (arr_copy[i] >= arr_copy[j]) {\n                j--;\n            } else {\n                i++;\n            }\n        }\n        return i;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> res = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0)\n                res.add(Optional.empty());\n            else\n                res.add(Optional.of(lst.get(i)));\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        if(lst.isEmpty()){\n            return Arrays.asList(Optional.empty(), Optional.empty());\n        }\n        int a = lst.get(0);\n        int b = lst.get(0);\n        for(int i = 1; i < lst.size(); i++){\n            if(lst.get(i) < 0){\n                a = Math.max(a, lst.get(i));\n            }\n            else{\n                b = Math.min(b, lst.get(i));\n            }\n        }\n        return Arrays.asList(Optional.of(a), Optional.of(b));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> result = new ArrayList<>();\n        if(lst.isEmpty()) return result;\n        int max = Integer.MIN_VALUE;\n        int min = Integer.MAX_VALUE;\n        for(int i : lst){\n            if(i < 0) max = Math.max(max, i);\n            else min = Math.min(min, i);\n        }\n        result.add(Optional.of(max));\n        result.add(Optional.of(min));\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> res = new ArrayList<>();\n        if(lst.isEmpty()) return res;\n        int max = Integer.MIN_VALUE;\n        int min = Integer.MAX_VALUE;\n        for(int i : lst){\n            if(i < 0) max = Math.max(max, i);\n            else min = Math.min(min, i);\n        }\n        res.add(Optional.of(max));\n        res.add(Optional.of(min));\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> result = new ArrayList<>();\n        if(lst.isEmpty()){\n            return result;\n        }\n        int a = lst.get(0);\n        int b = lst.get(0);\n        for(int i = 1; i < lst.size(); i++){\n            if(lst.get(i) > a){\n                a = lst.get(i);\n            }\n            if(lst.get(i) < b){\n                b = lst.get(i);\n            }\n        }\n        result.add(Optional.of(a));\n        result.add(Optional.of(b));\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> res = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0){\n                res.add(Optional.empty());\n            } else {\n                res.add(Optional.of(lst.get(i)));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        if(lst.isEmpty()){\n            return Arrays.asList(Optional.empty(), Optional.empty());\n        }\n        int a = lst.get(0);\n        int b = lst.get(0);\n        for(int i = 1; i < lst.size(); i++){\n            if(lst.get(i) > a){\n                a = lst.get(i);\n            }\n            if(lst.get(i) < b){\n                b = lst.get(i);\n            }\n        }\n        return Arrays.asList(Optional.of(a), Optional.of(b));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> res = new ArrayList<>();\n        int a = Integer.MIN_VALUE, b = Integer.MAX_VALUE;\n        for(int i : lst){\n            if(i < 0) a = Math.max(a, i);\n            else b = Math.min(b, i);\n        }\n        res.add(Optional.of(a));\n        res.add(Optional.of(b));\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> res = new ArrayList<>();\n        int max = Integer.MIN_VALUE;\n        int min = Integer.MAX_VALUE;\n        for(int i : lst){\n            if(i < 0){\n                max = Math.max(max, i);\n            }\n            else{\n                min = Math.min(min, i);\n            }\n        }\n        if(max == Integer.MIN_VALUE){\n            res.add(Optional.empty());\n        }\n        else{\n            res.add(Optional.of(max));\n        }\n        if(min == Integer.MAX_VALUE){\n            res.add(Optional.empty());\n        }\n        else{\n            res.add(Optional.of(min));\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> result = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0){\n                result.add(Optional.of(lst.get(i)));\n            }\n        }\n        for(int i = lst.size() - 1; i >= 0; i--){\n            if(lst.get(i) > 0){\n                result.add(Optional.of(lst.get(i)));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> result = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0){\n                result.add(Optional.of(lst.get(i)));\n            }\n        }\n        for(int i = lst.size() - 1; i >= 0; i--){\n            if(lst.get(i) > 0){\n                result.add(Optional.of(lst.get(i)));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        if(lst.isEmpty()){\n            return Arrays.asList(Optional.empty(), Optional.empty());\n        }\n        int a = lst.get(0);\n        int b = lst.get(0);\n        for(int i = 1; i < lst.size(); i++){\n            if(lst.get(i) < 0){\n                a = lst.get(i);\n            }\n            else{\n                b = lst.get(i);\n            }\n        }\n        return Arrays.asList(Optional.of(a), Optional.of(b));\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> result = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0){\n                result.add(Optional.of(lst.get(i)));\n            }\n        }\n        if(result.isEmpty()){\n            result.add(Optional.empty());\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> result = new ArrayList<>();\n        if(lst.isEmpty()) return result;\n        int max = Integer.MIN_VALUE;\n        int min = Integer.MAX_VALUE;\n        for(int i : lst){\n            if(i > max) max = i;\n            if(i < min) min = i;\n        }\n        result.add(Optional.of(max));\n        result.add(Optional.of(min));\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> result = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0){\n                result.add(Optional.empty());\n            }\n            else{\n                result.add(Optional.of(lst.get(i)));\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> res = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0){\n                res.add(Optional.empty());\n            } else {\n                res.add(Optional.of(lst.get(i)));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> res = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0){\n                res.add(Optional.empty());\n            }\n            else{\n                res.add(Optional.of(lst.get(i)));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> res = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0)\n                res.add(Optional.empty());\n            else\n                res.add(Optional.of(lst.get(i)));\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> res = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0){\n                res.add(Optional.empty());\n            }else{\n                res.add(Optional.of(lst.get(i)));\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n        List<Optional<Integer>> result = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++){\n            if(lst.get(i) < 0){\n                result.add(Optional.empty());\n            }\n            else{\n                result.add(Optional.of(lst.get(i)));\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of((Integer) a > (Integer) b ? a : b);\n        } else if (a instanceof Float && b instanceof Float) {\n            return Optional.of((Float) a > (Float) b ? a : b);\n        } else if (a instanceof String && b instanceof String) {\n            return Optional.of((String) a > (String) b ? a : b);\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(((Integer) a).compareTo((Integer) b));\n        } else if (a instanceof Float && b instanceof Float) {\n            return Optional.of(((Float) a).compareTo((Float) b));\n        } else if (a instanceof String && b instanceof String) {\n            return Optional.of(((String) a).compareTo((String) b));\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer) {\n            if (b instanceof Integer) {\n                return Optional.of((Integer) a);\n            } else if (b instanceof Float) {\n                return Optional.of((Integer) a);\n            } else {\n                return Optional.of((Integer) b);\n            }\n        } else if (a instanceof Float) {\n            if (b instanceof Integer) {\n                return Optional.of((Float) a);\n            } else if (b instanceof Float) {\n                return Optional.of((Float) b);\n            } else {\n                return Optional.of((Float) b);\n            }\n        } else {\n            if (b instanceof Integer) {\n                return Optional.of((String) a);\n            } else if (b instanceof Float) {\n                return Optional.of((String) a);\n            } else {\n                return Optional.of((String) b);\n            }\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer) {\n            return Optional.of((Integer) a);\n        } else if (a instanceof Float) {\n            return Optional.of((Float) a);\n        } else if (a instanceof String) {\n            return Optional.of((String) a);\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer) {\n            if (b instanceof Integer) {\n                return Optional.of((Integer) a);\n            } else if (b instanceof Float) {\n                return Optional.of((Integer) a);\n            } else {\n                return Optional.of((Integer) b);\n            }\n        } else if (a instanceof Float) {\n            if (b instanceof Integer) {\n                return Optional.of((Float) a);\n            } else if (b instanceof Float) {\n                return Optional.of((Float) a);\n            } else {\n                return Optional.of((Float) b);\n            }\n        } else if (a instanceof String) {\n            if (b instanceof Integer) {\n                return Optional.of((String) a);\n            } else if (b instanceof Float) {\n                return Optional.of((String) a);\n            } else {\n                return Optional.of((String) b);\n            }\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(((Integer) a).compareTo((Integer) b));\n        } else if (a instanceof Float && b instanceof Float) {\n            return Optional.of(((Float) a).compareTo((Float) b));\n        } else if (a instanceof String && b instanceof String) {\n            return Optional.of(((String) a).compareTo((String) b));\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer) {\n            if (b instanceof Integer) {\n                return Optional.of((Integer) a);\n            } else if (b instanceof Float) {\n                return Optional.of((Integer) a);\n            } else if (b instanceof String) {\n                return Optional.of((Integer) a);\n            }\n        } else if (a instanceof Float) {\n            if (b instanceof Integer) {\n                return Optional.of((Float) a);\n            } else if (b instanceof Float) {\n                return Optional.of((Float) a);\n            } else if (b instanceof String) {\n                return Optional.of((Float) a);\n            }\n        } else if (a instanceof String) {\n            if (b instanceof Integer) {\n                return Optional.of((String) a);\n            } else if (b instanceof Float) {\n                return Optional.of((String) a);\n            } else if (b instanceof String) {\n                return Optional.of((String) a);\n            }\n        }\n        return Optional.empty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer) {\n            if (b instanceof Integer) {\n                return Optional.of(a);\n            } else if (b instanceof Float) {\n                return Optional.of(b);\n            } else if (b instanceof String) {\n                return Optional.of(b);\n            }\n        } else if (a instanceof Float) {\n            if (b instanceof Integer) {\n                return Optional.of(b);\n            } else if (b instanceof Float) {\n                return Optional.of(a);\n            } else if (b instanceof String) {\n                return Optional.of(b);\n            }\n        } else if (a instanceof String) {\n            if (b instanceof Integer) {\n                return Optional.of(b);\n            } else if (b instanceof Float) {\n                return Optional.of(b);\n            } else if (b instanceof String) {\n                return Optional.of(a);\n            }\n        }\n        return Optional.empty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer) {\n            return Optional.of(a);\n        } else if (a instanceof Float) {\n            return Optional.of(a);\n        } else if (a instanceof String) {\n            return Optional.of(a);\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer) {\n            if (b instanceof Integer) {\n                return Optional.of((Integer) a);\n            } else if (b instanceof Float) {\n                return Optional.of((Integer) a);\n            } else if (b instanceof String) {\n                return Optional.of((Integer) a);\n            } else {\n                return Optional.empty();\n            }\n        } else if (a instanceof Float) {\n            if (b instanceof Integer) {\n                return Optional.of((Float) a);\n            } else if (b instanceof Float) {\n                return Optional.of((Float) a);\n            } else if (b instanceof String) {\n                return Optional.of((Float) a);\n            } else {\n                return Optional.empty();\n            }\n        } else if (a instanceof String) {\n            if (b instanceof Integer) {\n                return Optional.of((String) a);\n            } else if (b instanceof Float) {\n                return Optional.of((String) a);\n            } else if (b instanceof String) {\n                return Optional.of((String) a);\n            } else {\n                return Optional.empty();\n            }\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer) {\n            return Optional.of(a);\n        } else if (a instanceof Float) {\n            return Optional.of(a);\n        } else if (a instanceof String) {\n            return Optional.of(a);\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer) {\n            if (b instanceof Integer) {\n                return Optional.of((Integer) a);\n            } else if (b instanceof Float) {\n                return Optional.of((Integer) a);\n            } else if (b instanceof String) {\n                return Optional.of((Integer) a);\n            } else {\n                return Optional.empty();\n            }\n        } else if (a instanceof Float) {\n            if (b instanceof Integer) {\n                return Optional.of((Float) a);\n            } else if (b instanceof Float) {\n                return Optional.of((Float) a);\n            } else if (b instanceof String) {\n                return Optional.of((Float) a);\n            } else {\n                return Optional.empty();\n            }\n        } else if (a instanceof String) {\n            if (b instanceof Integer) {\n                return Optional.of((String) a);\n            } else if (b instanceof Float) {\n                return Optional.of((String) a);\n            } else if (b instanceof String) {\n                return Optional.of((String) a);\n            } else {\n                return Optional.empty();\n            }\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of((Integer) a);\n        } else if (a instanceof Float && b instanceof Float) {\n            return Optional.of((Float) a);\n        } else if (a instanceof String && b instanceof String) {\n            return Optional.of((String) a);\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer) {\n            if (b instanceof Integer) {\n                return Optional.of((Integer) a);\n            } else if (b instanceof Float) {\n                return Optional.of((Integer) a);\n            } else if (b instanceof String) {\n                return Optional.of((Integer) a);\n            }\n        } else if (a instanceof Float) {\n            if (b instanceof Integer) {\n                return Optional.of((Float) a);\n            } else if (b instanceof Float) {\n                return Optional.of((Float) a);\n            } else if (b instanceof String) {\n                return Optional.of((Float) a);\n            }\n        } else if (a instanceof String) {\n            if (b instanceof Integer) {\n                return Optional.of((String) a);\n            } else if (b instanceof Float) {\n                return Optional.of((String) a);\n            } else if (b instanceof String) {\n                return Optional.of((String) a);\n            }\n        }\n        return Optional.empty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of((Integer) a);\n        } else if (a instanceof Float && b instanceof Float) {\n            return Optional.of((Float) a);\n        } else if (a instanceof String && b instanceof String) {\n            return Optional.of((String) a);\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(((Integer) a).compareTo((Integer) b));\n        } else if (a instanceof Float && b instanceof Float) {\n            return Optional.of(((Float) a).compareTo((Float) b));\n        } else if (a instanceof String && b instanceof String) {\n            return Optional.of(((String) a).compareTo((String) b));\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of(((Integer) a).compareTo((Integer) b));\n        }\n        if (a instanceof Float && b instanceof Float) {\n            return Optional.of(((Float) a).compareTo((Float) b));\n        }\n        if (a instanceof String && b instanceof String) {\n            return Optional.of(((String) a).compareTo((String) b));\n        }\n        return Optional.empty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer) {\n            if (b instanceof Integer) {\n                return Optional.of(a);\n            } else if (b instanceof Float) {\n                return Optional.of(b);\n            } else if (b instanceof String) {\n                return Optional.of(b);\n            }\n        } else if (a instanceof Float) {\n            if (b instanceof Integer) {\n                return Optional.of(b);\n            } else if (b instanceof Float) {\n                return Optional.of(a);\n            } else if (b instanceof String) {\n                return Optional.of(b);\n            }\n        } else if (a instanceof String) {\n            if (b instanceof Integer) {\n                return Optional.of(b);\n            } else if (b instanceof Float) {\n                return Optional.of(b);\n            } else if (b instanceof String) {\n                return Optional.of(a);\n            }\n        }\n        return Optional.empty();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer) {\n            if (b instanceof Integer) {\n                return Optional.of((Integer) a);\n            } else if (b instanceof Float) {\n                return Optional.of((Integer) a);\n            } else if (b instanceof String) {\n                return Optional.of((Integer) a);\n            } else {\n                return Optional.empty();\n            }\n        } else if (a instanceof Float) {\n            if (b instanceof Integer) {\n                return Optional.of((Float) a);\n            } else if (b instanceof Float) {\n                return Optional.of((Float) a);\n            } else if (b instanceof String) {\n                return Optional.of((Float) a);\n            } else {\n                return Optional.empty();\n            }\n        } else if (a instanceof String) {\n            if (b instanceof Integer) {\n                return Optional.of((String) a);\n            } else if (b instanceof Float) {\n                return Optional.of((String) a);\n            } else if (b instanceof String) {\n                return Optional.of((String) a);\n            } else {\n                return Optional.empty();\n            }\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of((Integer) a > (Integer) b ? a : b);\n        }\n        if (a instanceof Float && b instanceof Float) {\n            return Optional.of((Float) a > (Float) b ? a : b);\n        }\n        if (a instanceof String && b instanceof String) {\n            return Optional.of((String) a.toString().compareTo((String) b.toString()) > 0 ? a : b);\n        }\n        return Optional.empty();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        if(n == 0) return false;\n        int sum = 0;\n        int num = 0;\n        while(n != 0) {\n            num = n % 10;\n            sum += num;\n            n /= 10;\n        }\n        return sum == 4;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += i;\n            }\n        }\n        return sum == 4;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += i;\n                count++;\n            }\n        }\n        return count == 4 && sum == 10;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += i;\n                count++;\n            }\n        }\n        return count == 4 && sum == 12;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += i;\n            }\n        }\n        return sum == 4;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += i;\n            }\n        }\n        return sum == 4;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += i;\n            }\n        }\n        return sum == 4;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += i;\n            }\n        }\n        return sum == 4;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += i;\n            }\n        }\n        return sum == 4;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        int count = 0;\n        while(n != 0) {\n            int digit = n % 10;\n            sum += digit;\n            n /= 10;\n            count++;\n        }\n        if(count == 4 && sum == 0) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += i;\n            }\n        }\n        return sum == 4;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        int num = 0;\n        while(n != 0) {\n            num = n % 10;\n            sum += num;\n            n = n / 10;\n        }\n        return sum == 4;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        int count = 0;\n        while(n != 0) {\n            sum += n % 2;\n            n /= 2;\n            count++;\n        }\n        return count == 4 && sum == 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        for(int i = 1; i <= n; i++) {\n            if(i % 2 == 0) {\n                sum += i;\n            }\n        }\n        return sum == 4;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        int count = 0;\n        while(n > 0) {\n            if(n % 2 == 0) {\n                sum += n;\n                count++;\n            }\n            n /= 2;\n        }\n        return count == 4 && sum == 12;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += i;\n            }\n        }\n        return sum == 4;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        int count = 0;\n        while(n != 0){\n            sum += n % 2;\n            n /= 2;\n            count++;\n        }\n        return count == 4 && sum == 0;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        for(int i = 1; i <= n; i++) {\n            if(i % 2 == 0) {\n                sum += i;\n            }\n        }\n        return sum == 4;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        int i = 1;\n        while(i <= n){\n            if(i % 2 == 0){\n                sum += i;\n            }\n            i++;\n        }\n        return sum == 4;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                sum += i;\n            }\n        }\n        return sum == 4;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 2; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 2; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String[] words = text.split(\" \");\n        String fixedText = \"\";\n        for (String word : words) {\n            if (word.length() > 1) {\n                fixedText += word.substring(0, 1).toUpperCase() + word.substring(1);\n            } else {\n                fixedText += word;\n            }\n        }\n        return fixedText;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String result = text;\n        String[] words = result.split(\" \");\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() > 2) {\n                result = result.replace(words[i], \"_\" + words[i]);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String[] words = text.split(\" \");\n        String result = \"\";\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() > 2) {\n                result += words[i].substring(0, 1).toUpperCase() + words[i].substring(1);\n            } else {\n                result += words[i];\n            }\n            if (i < words.length - 1) {\n                result += \" \";\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String fixedText = text;\n        String[] words = fixedText.split(\" \");\n        for (int i = 0; i < words.length; i++) {\n            String word = words[i];\n            if (word.length() > 1) {\n                String newWord = \"\";\n                for (int j = 0; j < word.length(); j++) {\n                    if (word.charAt(j) == ' ') {\n                        newWord += \"_\";\n                    } else {\n                        newWord += word.charAt(j);\n                    }\n                }\n                words[i] = newWord;\n            }\n        }\n        fixedText = \"\";\n        for (int i = 0; i < words.length; i++) {\n            fixedText += words[i] + \" \";\n        }\n        return fixedText;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n                result += \"_\";\n            } else {\n                result += text.charAt(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String result = text;\n        String[] words = result.split(\" \");\n        for (int i = 0; i < words.length; i++) {\n            String word = words[i];\n            if (word.length() > 1) {\n                StringBuilder sb = new StringBuilder();\n                for (int j = 0; j < word.length(); j++) {\n                    if (word.charAt(j) == ' ') {\n                        sb.append(\"_\");\n                    } else {\n                        sb.append(word.charAt(j));\n                    }\n                }\n                words[i] = sb.toString();\n            }\n        }\n        result = String.join(\" \", words);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n                result += \"_\";\n            } else {\n                result += text.charAt(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n                result += \"_\";\n            } else {\n                result += text.charAt(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String fixed = text.replaceAll(\"\\\\s+\", \"_\");\n        if (fixed.length() > 2) {\n            fixed = fixed.replaceAll(\" +\", \"-\");\n        }\n        return fixed;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String fixedText = text.replaceAll(\"\\\\s+\", \"_\");\n        if (fixedText.length() > 2) {\n            String[] words = fixedText.split(\" \");\n            for (int i = 0; i < words.length; i++) {\n                if (words[i].length() > 2) {\n                    words[i] = words[i].substring(0, 2);\n                }\n            }\n            fixedText = String.join(\" \", words);\n        }\n        return fixedText;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String[] words = text.split(\" \");\n        StringBuilder sb = new StringBuilder();\n        for (String word : words) {\n            if (word.length() > 1) {\n                sb.append(word.substring(0, 1).toUpperCase());\n                sb.append(word.substring(1));\n            } else {\n                sb.append(word);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String result = text;\n        String[] words = result.split(\" \");\n        for (int i = 0; i < words.length; i++) {\n            String word = words[i];\n            if (word.length() > 1) {\n                StringBuilder sb = new StringBuilder();\n                for (int j = 0; j < word.length(); j++) {\n                    char c = word.charAt(j);\n                    if (c == ' ') {\n                        sb.append(\"_\");\n                    } else {\n                        sb.append(c);\n                    }\n                }\n                words[i] = sb.toString();\n            }\n        }\n        result = String.join(\" \", words);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n            if (c == ' ') {\n                result += \"_\";\n            } else {\n                result += c;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n                result += \"_\";\n            } else {\n                result += text.charAt(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String fixed = text.replaceAll(\"\\\\s+\", \"_\");\n        if (text.length() > 2 && fixed.length() > 2) {\n            fixed = fixed.substring(0, 2) + fixed.substring(fixed.length() - 2, fixed.length());\n        }\n        return fixed;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String result = \"\";\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n                result += \"_\";\n            } else {\n                result += text.charAt(i);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String fixedText = text.replaceAll(\"\\\\s+\", \"_\");\n        int spaces = 0;\n        for (int i = 0; i < fixedText.length(); i++) {\n            if (fixedText.charAt(i) == ' ') {\n                spaces++;\n            }\n        }\n        if (spaces > 2) {\n            fixedText = fixedText.replaceAll(\" \", \"-\");\n        }\n        return fixedText;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String result = \"\";\n        StringTokenizer st = new StringTokenizer(text, \" \");\n        while (st.hasMoreTokens()) {\n            String token = st.nextToken();\n            if (token.equals(\" \")) {\n                result += \"_\";\n            } else {\n                result += token;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String result = text;\n        String[] words = result.split(\" \");\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length() > 2) {\n                words[i] = words[i].substring(0, words[i].length() - 1);\n            }\n        }\n        result = String.join(\" \", words);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n        String result = text;\n        String pattern = \"\\\\s+\";\n        String replacement = \"_\";\n        Pattern p = Pattern.compile(pattern);\n        Matcher m = p.matcher(result);\n        while (m.find()) {\n            result = result.replace(m.group(), replacement);\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] file_name_split = file_name.split(\"\\\\.\");\n        int file_name_split_length = file_name_split.length;\n        if (file_name_split_length > 3) {\n            return \"No\";\n        }\n        if (file_name_split_length == 3) {\n            if (file_name_split[0].matches(\"[a-zA-Z]\")) {\n                return \"Yes\";\n            }\n            return \"No\";\n        }\n        return \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        // Write your code here\n        String[] file_name_split = file_name.split(\"\\\\.\");\n        int file_name_split_length = file_name_split.length;\n        if(file_name_split_length > 3) {\n            return \"No\";\n        }\n        if(file_name_split_length == 3) {\n            if(file_name_split[0].matches(\"[a-zA-Z]\")) {\n                if(file_name_split[1].matches(\"[0-9]\")) {\n                    if(file_name_split[2].matches(\"[a-zA-Z0-9]\")) {\n                        return \"Yes\";\n                    }\n                }\n            }\n        }\n        return \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] file_name_split = file_name.split(\"\\\\.\");\n        int file_name_split_length = file_name_split.length;\n        if (file_name_split_length > 3) {\n            return \"No\";\n        }\n        if (file_name_split_length == 3) {\n            String file_name_split_first_letter = file_name_split[0].substring(0, 1);\n            if (!file_name_split_first_letter.equals(\"a\") && !file_name_split_first_letter.equals(\"A\")) {\n                return \"No\";\n            }\n        }\n        String file_name_split_last_letter = file_name_split[file_name_split_length - 1];\n        if (!file_name_split_last_letter.equals(\".\") && !file_name_split_last_letter.equals(\"txt\") && !file_name_split_last_letter.equals(\"exe\") && !file_name_split_last_letter.equals(\"dll\")) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] file_name_split = file_name.split(\"\\\\.\");\n        if (file_name_split.length > 3) {\n            return \"No\";\n        }\n        if (file_name_split.length == 1) {\n            return \"No\";\n        }\n        if (file_name_split[0].length() == 1) {\n            return \"No\";\n        }\n        if (file_name_split[0].charAt(0) >= 'a' && file_name_split[0].charAt(0) <= 'z') {\n            return \"No\";\n        }\n        if (file_name_split[0].charAt(0) >= 'A' && file_name_split[0].charAt(0) <= 'Z') {\n            return \"No\";\n        }\n        if (file_name_split[1].equals(\"txt\") || file_name_split[1].equals(\"exe\") || file_name_split[1].equals(\"dll\")) {\n            return \"Yes\";\n        }\n        return \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] split_file_name = file_name.split(\"\\\\.\");\n        if (split_file_name.length > 3) {\n            return \"No\";\n        }\n        if (split_file_name[0].length() > 1) {\n            return \"No\";\n        }\n        if (split_file_name[1].length() > 1) {\n            return \"No\";\n        }\n        if (split_file_name[2].length() > 1) {\n            return \"No\";\n        }\n        if (split_file_name[2].equals(\"txt\") || split_file_name[2].equals(\"exe\") || split_file_name[2].equals(\"dll\")) {\n            return \"Yes\";\n        }\n        return \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        if (file_name.length() > 3) {\n            return \"No\";\n        }\n        if (file_name.charAt(0) != '.') {\n            return \"No\";\n        }\n        if (file_name.charAt(file_name.length() - 1) != '.') {\n            return \"No\";\n        }\n        if (file_name.charAt(0) >= 'a' && file_name.charAt(0) <= 'z') {\n            return \"No\";\n        }\n        if (file_name.charAt(file_name.length() - 1) >= 'a' && file_name.charAt(file_name.length() - 1) <= 'z') {\n            return \"No\";\n        }\n        if (file_name.substring(0, file_name.length() - 1).matches(\"[a-zA-Z]+\")) {\n            return \"Yes\";\n        }\n        return \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] file_name_split = file_name.split(\"\\\\.\");\n        int file_name_split_length = file_name_split.length;\n        if (file_name_split_length > 3) {\n            return \"No\";\n        }\n        if (file_name_split_length == 3) {\n            if (file_name_split[0].matches(\"[a-zA-Z]\")) {\n                if (file_name_split[1].matches(\"[0-9]\")) {\n                    if (file_name_split[2].matches(\"[a-zA-Z0-9.]\")) {\n                        return \"Yes\";\n                    }\n                }\n            }\n        }\n        return \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        // Write your code here\n        String[] split = file_name.split(\"\\\\.\");\n        if (split.length > 3) {\n            return \"No\";\n        }\n        if (split.length == 3) {\n            if (split[0].matches(\"[a-zA-Z]\")) {\n                if (split[1].equals(\".\") && split[2].equals(\"txt\") || split[1].equals(\".\") && split[2].equals(\"exe\") || split[1].equals(\".\") && split[2].equals(\"dll\")) {\n                    return \"Yes\";\n                }\n            }\n        }\n        return \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] file_name_split = file_name.split(\"\\\\.\");\n        int file_name_split_length = file_name_split.length;\n        if (file_name_split_length > 3) {\n            return \"No\";\n        }\n        if (file_name_split_length == 3) {\n            if (file_name_split[0].matches(\"[a-zA-Z]\")) {\n                if (file_name_split[1].equals(\".\") && file_name_split[2].equals(\"txt\")) {\n                    return \"Yes\";\n                }\n            }\n        }\n        return \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        // TODO: Write your code here\n        String[] split = file_name.split(\"\\\\.\");\n        if (split.length > 3) {\n            return \"No\";\n        }\n        if (split.length == 3 && !split[0].matches(\"[a-zA-Z]\")) {\n            return \"No\";\n        }\n        if (split.length == 3 && split[1].equals(\".\") && split[2].equals(\"\")) {\n            return \"Yes\";\n        }\n        return \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] split_file_name = file_name.split(\"\\\\.\");\n        String[] split_file_name_split = split_file_name[0].split(\"\");\n        String[] split_file_name_split_2 = split_file_name_split[1].split(\"\");\n        String[] split_file_name_split_3 = split_file_name_split_2[0].split(\"\");\n        String[] split_file_name_split_4 = split_file_name_split_3[1].split(\"\");\n        String[] split_file_name_split_5 = split_file_name_split_4[0].split(\"\");\n        String[] split_file_name_split_6 = split_file_name_split_5[1].split(\"\");\n        String[] split_file_name_split_7 = split_file_name_split_6[0].split(\"\");\n        String[] split_file_name_split_8 = split_file_name_split_7[1].split(\"\");\n        String[] split_file_name_split_9 = split_file_name_split_8[0].split(\"\");\n        String[] split_file_name_split_10 = split_file_name_split_9[1].split(\"\");\n        String[] split_file_name_split_11 = split_file_name_split_10[0].split(\"\");\n        String[] split_file_name_split_12 = split_file_name_split_11[1].split(\"\");\n        String[] split_file_name_split_13 = split_file_name_split_12[0].split(\"\");\n        String[] split_file_name_split_14 = split_file_name_split_13[1].split(\"\");\n        String[] split_file_name_split_15 = split_file_name_split_14[0].split(\"\");\n        String[] split_file_name_split_16 = split_file_name_split_15[1].split(\"\");\n        String[] split_file_name_split_17 = split_file_name_split_16[0].split(\"\");\n        String[] split_file_name_split_18 = split_file_name_split_17[1].split(\"\");\n        String[] split_file_name_split_19 = split_file_name_split_18[0].split(\"\");\n        String[] split_file_name_split_20 = split_file_name_split_19[1].split(\"\");\n        String[] split_file_name_split_21 = split_file_name_split_20[0].split(\"\");\n        String[] split_file_name_split_22 = split_file_name_split_21[1].split(\"\");\n        String[] split_file_name_split_23 = split_file_name_split_22[0].split(\"\");\n        String[] split_file_name_split_24 = split_file_name_split_23[1].split(\"\");\n        String[] split_file_name_split_25 = split_file_name_split_24[0].split(\"\");\n        String[] split_file_name_split_26 = split_file_name_split_25[1].split(\"\");\n        String[] split_file_name_split_27 = split_file_name_split_26[0].split(\"\");\n        String[] split_file_name_split_28 = split_file_name_split_27[1].split(\"\");\n        String[] split_file_name_split_29 = split_file_name_split_28[0].split(\"\");\n        String[] split_file_name_split_30 = split_file_name_split_29[1].split(\"\");\n        String[] split_file_name_split_31 = split_file_name_split_30[0].split(\"\");\n        String[] split_file_name_split_32 = split_file_name_split_31[1].split(\"\");\n        String[] split_file_name_split_33 = split_file_name_split_32[0].split(\"\");\n        String[] split_file_name_split_34 = split_file_name_split_33[1].split(\"\");\n        String[] split_file_name_split_35 = split_file_name_split_34[0].split(\"\");\n        String[] split_file_name_split_36 = split_file_name_split_35[1].split(\"\");\n        String[] split_file_name_split_37 = split_file_name_split_36[0].split(\"\");\n        String[] split_file_name_split_38 = split_file_name_split_37[1].split(\"\");\n        String[] split_file_name_split_39 = split_file_name_split_38[0].split(\"\");\n        String[] split_file_name_split_40 = split_file_name_split_39[1].split(\"\");\n        String[] split_file_name_split_41 = split_file_name_split_40[0].split(\"\");\n        String[] split_file_name_split_42 = split_file_name_split_41[1].split(\"\");\n        String[] split_file_name_split_43 = split_file_name_split_42[0].split(\"\");\n        String[] split_file_name_split_44 = split_file_name_split_43[1].split(\"\");\n        String[] split_file_name_split_45 = split_file_name_split_44[0].split(\"\");\n        String[] split_file_name_split_46 = split_file_name_split_45[1].split(\"\");\n        String[] split_file_name_split_47 = split_file_name_split_46[0].split(\"\");\n        String[] split_file_name_split_48 = split_file_name_split_47[1].split(\"\");\n        String[] split_file_name_split_49 = split_file_name_split_48[0].split(\"\");\n        String[] split_file_name_split_50 = split_file_name_split_49[1].split(\"\");\n        String[] split_file_name_split_51 = split_file_name_split_50[0].split(\"\");\n        String[] split_file_name_split_52 = split_file_name_split_51[1].split(\"\");\n        String[] split_file_name_split_53 = split_file_name_split_52[0].split(\"\");\n        String[] split_file_name_split_54 = split_file_name_split_53[1].split(\"\");\n        String[] split_file_name_split_55 = split_file_name_split_54[0].split(\"\");", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] file_name_split = file_name.split(\"\\\\.\");\n        if (file_name_split.length > 3) {\n            return \"No\";\n        }\n        if (file_name_split.length == 3) {\n            if (file_name_split[0].matches(\"[a-zA-Z]\")) {\n                if (file_name_split[1].equals(\".\") && file_name_split[2].equals(\"txt\")) {\n                    return \"Yes\";\n                }\n            }\n        }\n        return \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] split = file_name.split(\"\\\\.\");\n        int count = 0;\n        for (int i = 0; i < split.length; i++) {\n            if (split[i].length() > 3) {\n                return \"No\";\n            }\n            if (split[i].charAt(0) != 'a' && split[i].charAt(0) != 'A') {\n                return \"No\";\n            }\n            if (split[i].charAt(split[i].length() - 1) != '.') {\n                return \"No\";\n            }\n            count++;\n        }\n        if (count == 3) {\n            return \"Yes\";\n        }\n        return \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] file_name_split = file_name.split(\"\\\\.\");\n        if(file_name_split.length > 3) {\n            return \"No\";\n        }\n        if(file_name_split.length == 3) {\n            if(file_name_split[0].matches(\"[a-zA-Z]\")) {\n                if(file_name_split[1].equals(\".\") && file_name_split[2].equals(\"txt\")) {\n                    return \"Yes\";\n                }\n            }\n        }\n        return \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        // Write your code here\n        String[] file_name_split = file_name.split(\"\\\\.\");\n        int file_name_split_length = file_name_split.length;\n        if (file_name_split_length > 3) {\n            return \"No\";\n        }\n        if (file_name_split_length == 3) {\n            if (file_name_split[0].matches(\"[a-zA-Z]\")) {\n                return \"Yes\";\n            }\n        }\n        return \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] file_name_split = file_name.split(\"\\\\.\");\n        if (file_name_split.length > 3) {\n            return \"No\";\n        }\n        if (file_name_split.length == 3) {\n            if (file_name_split[0].matches(\"[a-zA-Z]\")) {\n                if (file_name_split[1].equals(\".\") && file_name_split[2].equals(\"txt\")) {\n                    return \"Yes\";\n                }\n            }\n        }\n        return \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] file_name_split = file_name.split(\"\\\\.\");\n        int file_name_split_length = file_name_split.length;\n        if (file_name_split_length > 3) {\n            return \"No\";\n        }\n        if (file_name_split_length == 3) {\n            if (file_name_split[0].matches(\"[a-zA-Z]\")) {\n                if (file_name_split[1].equals(\".\") && file_name_split[2].equals(\".\")) {\n                    return \"Yes\";\n                }\n            }\n        }\n        return \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        // Write your code here\n        String[] file_name_split = file_name.split(\"\\\\.\");\n        String file_name_split_last = file_name_split[file_name_split.length-1];\n        String file_name_split_last_split = file_name_split_last.split(\".\");\n        int file_name_split_last_split_length = file_name_split_last_split.length;\n        int file_name_split_last_split_length_minus_one = file_name_split_last_split_length - 1;\n        String file_name_split_last_split_last = file_name_split_last_split[file_name_split_last_split_length_minus_one];\n        String file_name_split_last_split_last_split = file_name_split_last_split_last.split(\".\");\n        int file_name_split_last_split_last_split_length = file_name_split_last_split_last_split.length;\n        int file_name_split_last_split_last_split_length_minus_one = file_name_split_last_split_last_split_length - 1;\n        String file_name_split_last_split_last_split_last = file_name_split_last_split_last_split[file_name_split_last_split_last_split_length_minus_one];\n        String file_name_split_last_split_last_split_last_split = file_name_split_last_split_last_split_last.split(\".\");\n        int file_name_split_last_split_last_split_last_split_length = file_name_split_last_split_last_split_last_split.length;\n        int file_name_split_last_split_last_split_last_split_length_minus_one = file_name_split_last_split_last_split_last_split_length - 1;\n        String file_name_split_last_split_last_split_last_split_last = file_name_split_last_split_last_split_last_split_last_split[file_name_split_last_split_last_split_last_split_length_minus_one];\n        String file_name_split_last_split_last_split_last_split_last_split_last = file_name_split_last_split_last_split_last_split_last_split_last.split(\".\");\n        int file_name_split_last_split_last_split_last_split_last_split_last_split_length = file_name_split_last_split_last_split_last_split_last_split_last_split.length;\n        int file_name_split_last_split_last_split_last_split_last_split_last_split_length_minus_one = file_name_split_last_split_last_split_last_split_last_split_last_split_length - 1;\n        String file_name_split_last_split_last_split_last_split_last_split_last_split_last = file_name_split_last_split_last_split_last_split_last_split_last_split_last[file_name_split_last_split_last_split_last_split_last_split_last_split_length_minus_one];\n        String file_name_split_last_split_last_split_last_split_last_split_last_split_last_split = file_name_split_last_split_last_split_last_split_last_split_last_split_last_split[file_name_split_last_split_last_split_last_split_last_split_last_split_last_split_length_minus_one];\n        String file_name_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split = file_name_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split[file_name_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_length_minus_one];\n        String file_name_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split = file_name_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split[file_name_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_last_split_", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        // Write your code here\n        String[] file_name_split = file_name.split(\"\\\\.\");\n        int file_name_split_length = file_name_split.length;\n        if (file_name_split_length > 3) {\n            return \"No\";\n        }\n        if (file_name_split_length == 3) {\n            if (file_name_split[0].matches(\"[a-zA-Z]\")) {\n                if (file_name_split[1].equals(\".\") && file_name_split[2].equals(\".\")) {\n                    return \"Yes\";\n                }\n            }\n        }\n        return \"No\";\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n        String[] file_name_split = file_name.split(\"\\\\.\");\n        if (file_name_split.length > 3) {\n            return \"No\";\n        }\n        if (file_name_split.length == 1) {\n            return \"No\";\n        }\n        if (file_name_split[0].length() == 1) {\n            return \"No\";\n        }\n        if (file_name_split[0].charAt(0) >= 'A' && file_name_split[0].charAt(0) <= 'Z') {\n            return \"No\";\n        }\n        if (file_name_split[0].charAt(0) >= 'a' && file_name_split[0].charAt(0) <= 'z') {\n            return \"No\";\n        }\n        if (file_name_split[1].equals(\"txt\") || file_name_split[1].equals(\"exe\") || file_name_split[1].equals(\"dll\")) {\n            return \"Yes\";\n        }\n        return \"No\";\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 3 != 0 && i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 3 != 0 && i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 3 != 0 && i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n            else if(i % 3 != 0 && i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 3 != 0 && i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 3 != 0 && i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 3 != 0 && i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n            else if(i % 3 != 0 && i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 3 != 0 && i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n            if (i % 3 != 0 && i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n            else if(i % 3 != 0 && i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 3 != 0 && i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 3 != 0 && i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 3 != 0 && i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 3 != 0 && i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 3 != 0 && i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 3 != 0 && i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n            if(i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n            else if(i % 3 != 0 && i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += lst.get(i) * lst.get(i);\n            } else if (i % 3 != 0 && i % 4 == 0) {\n                sum += lst.get(i) * lst.get(i);\n            }\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        int[] lengths = new int[words.length];\n        for (int i = 0; i < words.length; i++) {\n            lengths[i] = words[i].length();\n        }\n        Arrays.sort(lengths);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < lengths.length; i++) {\n            if (lengths[i] == 1) {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        int[] lengths = new int[words.length];\n        for(int i = 0; i < words.length; i++) {\n            lengths[i] = words[i].length();\n        }\n        Arrays.sort(lengths);\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < lengths.length; i++) {\n            if(lengths[i] == 1) {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        // Write your code here\n        String[] words = sentence.split(\" \");\n        int[] lengths = new int[words.length];\n        for(int i = 0; i < words.length; i++) {\n            lengths[i] = words[i].length();\n        }\n        Arrays.sort(lengths);\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < lengths.length; i++) {\n            if(lengths[i] == 1) {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        // Write your code here\n        String[] words = sentence.split(\" \");\n        String[] prime = new String[words.length];\n        for (int i = 0; i < words.length; i++) {\n            prime[i] = words[i];\n        }\n        Arrays.sort(prime);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < prime.length; i++) {\n            sb.append(prime[i]);\n            if (i != prime.length - 1) {\n                sb.append(\" \");\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        // Write your code here\n        String[] words = sentence.split(\" \");\n        int[] lengths = new int[words.length];\n        for (int i = 0; i < words.length; i++) {\n            lengths[i] = words[i].length();\n        }\n        Arrays.sort(lengths);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < lengths.length; i++) {\n            if (lengths[i] == 1) {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        // Write your code here\n        String[] words = sentence.split(\" \");\n        int[] lengths = new int[words.length];\n        for (int i = 0; i < words.length; i++) {\n            lengths[i] = words[i].length();\n        }\n        Arrays.sort(lengths);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < lengths.length; i++) {\n            if (lengths[i] == 1) {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        // Write your code here\n        String[] words = sentence.split(\" \");\n        int[] lengths = new int[words.length];\n        for(int i = 0; i < words.length; i++) {\n            lengths[i] = words[i].length();\n        }\n        Arrays.sort(lengths);\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < lengths.length; i++) {\n            if(lengths[i] == 1) {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        int[] lengths = new int[words.length];\n        for(int i = 0; i < words.length; i++) {\n            lengths[i] = words[i].length();\n        }\n        Arrays.sort(lengths);\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < lengths.length; i++) {\n            if(lengths[i] == 1) {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        int[] lengths = new int[words.length];\n        for(int i = 0; i < words.length; i++) {\n            lengths[i] = words[i].length();\n        }\n        Arrays.sort(lengths);\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < lengths.length; i++) {\n            if(lengths[i] == 1) {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        int[] lengths = new int[words.length];\n        for (int i = 0; i < words.length; i++) {\n            lengths[i] = words[i].length();\n        }\n        Arrays.sort(lengths);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < lengths.length; i++) {\n            if (lengths[i] == 1) {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        // Write your code here\n        String[] words = sentence.split(\" \");\n        int[] lengths = new int[words.length];\n        for (int i = 0; i < words.length; i++) {\n            lengths[i] = words[i].length();\n        }\n        Arrays.sort(lengths);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < lengths.length; i++) {\n            if (lengths[i] == 1) {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        String[] primeWords = new String[words.length];\n        for (int i = 0; i < words.length; i++) {\n            primeWords[i] = words[i];\n        }\n        Arrays.sort(primeWords);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < primeWords.length; i++) {\n            sb.append(primeWords[i]).append(\" \");\n        }\n        return sb.toString().trim();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        int[] lengths = new int[words.length];\n        for (int i = 0; i < words.length; i++) {\n            lengths[i] = words[i].length();\n        }\n        Arrays.sort(lengths);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < lengths.length; i++) {\n            if (lengths[i] == 1) {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        int[] lengths = new int[words.length];\n        for(int i = 0; i < words.length; i++) {\n            lengths[i] = words[i].length();\n        }\n        Arrays.sort(lengths);\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < lengths.length; i++) {\n            if(lengths[i] == 1) {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        int[] lengths = new int[words.length];\n        for (int i = 0; i < words.length; i++) {\n            lengths[i] = words[i].length();\n        }\n        Arrays.sort(lengths);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < lengths.length; i++) {\n            if (lengths[i] == 1) {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        int[] lengths = new int[words.length];\n        for(int i = 0; i < words.length; i++) {\n            lengths[i] = words[i].length();\n        }\n        Arrays.sort(lengths);\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < lengths.length; i++) {\n            if(lengths[i] == 1) {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        int[] lengths = new int[words.length];\n        for (int i = 0; i < words.length; i++) {\n            lengths[i] = words[i].length();\n        }\n        Arrays.sort(lengths);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < lengths.length; i++) {\n            if (lengths[i] == 1) {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        String[] words = sentence.split(\" \");\n        int[] lengths = new int[words.length];\n        for (int i = 0; i < words.length; i++) {\n            lengths[i] = words[i].length();\n        }\n        Arrays.sort(lengths);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < lengths.length; i++) {\n            if (lengths[i] == 1) {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        // Write your code here\n        String[] words = sentence.split(\" \");\n        int[] lengths = new int[words.length];\n        for (int i = 0; i < words.length; i++) {\n            lengths[i] = words[i].length();\n        }\n        Arrays.sort(lengths);\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < lengths.length; i++) {\n            if (lengths[i] == 1) {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n        // Write your code here\n        String[] words = sentence.split(\" \");\n        int[] lengths = new int[words.length];\n        for(int i = 0; i < words.length; i++) {\n            lengths[i] = words[i].length();\n        }\n        Arrays.sort(lengths);\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < lengths.length; i++) {\n            if(lengths[i] == 1) {\n                sb.append(words[i]);\n            }\n        }\n        return sb.toString();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Write your code here\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int x_n_num = Integer.parseInt(x_n[0]);\n        int x_n_den = Integer.parseInt(x_n[1]);\n        int n_x_num = Integer.parseInt(n_x[0]);\n        int n_x_den = Integer.parseInt(n_x[1]);\n        if (x_n_den == 0) {\n            return false;\n        }\n        if (n_x_den == 0) {\n            return false;\n        }\n        if (x_n_num == 0 && n_x_num == 0) {\n            return true;\n        }\n        if (x_n_num == 0) {\n            return false;\n        }\n        if (n_x_num == 0) {\n            return false;\n        }\n        if (x_n_den == n_x_num) {\n            return true;\n        }\n        if (x_n_den == n_x_den) {\n            return true;\n        }\n        if (x_n_den != n_x_num) {\n            return false;\n        }\n        if (x_n_num != 0) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Write your code here\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int x_n_len = x_n.length;\n        int n_x_len = n_x.length;\n        if (x_n_len == 1 && n_x_len == 1) {\n            return true;\n        }\n        if (x_n_len == 1 && n_x_len == 2) {\n            return false;\n        }\n        if (x_n_len == 2 && n_x_len == 1) {\n            return false;\n        }\n        if (x_n_len == 2 && n_x_len == 2) {\n            int x_n_num = Integer.parseInt(x_n[0]);\n            int n_x_num = Integer.parseInt(n_x[0]);\n            if (x_n_num == n_x_num) {\n                return true;\n            }\n            return false;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Write your code here\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int x_num = Integer.parseInt(x_n[0]);\n        int x_den = Integer.parseInt(x_n[1]);\n        int n_num = Integer.parseInt(n_x[0]);\n        int n_den = Integer.parseInt(n_x[1]);\n        if(x_den == 0) return false;\n        if(n_den == 0) return false;\n        if(x_den == 1) return true;\n        if(n_den == 1) return true;\n        if(x_den == n_den) return true;\n        if(x_den == n_den + 1) return true;\n        if(x_den == n_den - 1) return true;\n        if(x_den == n_den + 2) return true;\n        if(x_den == n_den - 2) return true;\n        if(x_den == n_den + 3) return true;\n        if(x_den == n_den - 3) return true;\n        if(x_den == n_den + 4) return true;\n        if(x_den == n_den - 4) return true;\n        if(x_den == n_den + 5) return true;\n        if(x_den == n_den - 5) return true;\n        if(x_den == n_den + 6) return true;\n        if(x_den == n_den - 6) return true;\n        if(x_den == n_den + 7) return true;\n        if(x_den == n_den - 7) return true;\n        if(x_den == n_den + 8) return true;\n        if(x_den == n_den - 8) return true;\n        if(x_den == n_den + 9) return true;\n        if(x_den == n_den - 9) return true;\n        if(x_den == n_den + 10) return true;\n        if(x_den == n_den - 10) return true;\n        if(x_den == n_den + 11) return true;\n        if(x_den == n_den - 11) return true;\n        if(x_den == n_den + 12) return true;\n        if(x_den == n_den - 12) return true;\n        if(x_den == n_den + 13) return true;\n        if(x_den == n_den - 13) return true;\n        if(x_den == n_den + 14) return true;\n        if(x_den == n_den - 14) return true;\n        if(x_den == n_den + 15) return true;\n        if(x_den == n_den - 15) return true;\n        if(x_den == n_den + 16) return true;\n        if(x_den == n_den - 16) return true;\n        if(x_den == n_den + 17) return true;\n        if(x_den == n_den - 17) return true;\n        if(x_den == n_den + 18) return true;\n        if(x_den == n_den - 18) return true;\n        if(x_den == n_den + 19) return true;\n        if(x_den == n_den - 19) return true;\n        if(x_den == n_den + 20) return true;\n        if(x_den == n_den - 20) return true;\n        if(x_den == n_den + 21) return true;\n        if(x_den == n_den - 21) return true;\n        if(x_den == n_den + 22) return true;\n        if(x_den == n_den - 22) return true;\n        if(x_den == n_den + 23) return true;\n        if(x_den == n_den - 23) return true;\n        if(x_den == n_den + 24) return true;\n        if(x_den == n_den - 24) return true;\n        if(x_den == n_den + 25) return true;\n        if(x_den == n_den - 25) return true;\n        if(x_den == n_den + 26) return true;\n        if(x_den == n_den - 26) return true;\n        if(x_den == n_den + 27) return true;\n        if(x_den == n_den - 27) return true;\n        if(x_den == n_den + 28) return true;\n        if(x_den == n_den - 28) return true;\n        if(x_den == n_den + 29) return true;\n        if(x_den == n_den - 29) return true;\n        if(x_den == n_den + 30) return true;\n        if(x_den == n_den - 30) return true;\n        if(x_den == n_den + 31) return true;\n        if(x_den == n_den - 31) return true;\n        if(x_den == n_den + 32) return true;\n        if(x_den == n_den - 32) return true;\n        if(x_den == n_den + 33) return true;\n        if(x_den == n_den - 33) return true;\n        if(x_den == n_den + 34) return true;\n        if(x_den == n_den - 34) return true;\n        if(x_den == n_den + 35) return true;\n        if(x_den == n_den - 35) return true;\n        if(x_den == n_den + 36) return true;\n        if(x_den == n_den - 36) return true;\n        if(x_den == n_den + 37) return true;\n        if(x_den == n_den - 37) return true;\n        if(x_den == n_den + 38) return true;\n        if(x_den == n_den - 38) return true;\n        if(x_den == n_den + 39) return true;\n        if(x_den == n_den - 39) return true;\n        if(x_den == n_den + 40) return true;\n        if(x_den == n_den - 40) return true;\n        if(x_den == n_den + 41) return true;\n        if(x_den == n_den - 41) return true;\n        if(x_den == n_den + 42) return true;\n        if(x_den == n_den - 42) return true;\n        if(x_den == n_den + 43) return true;\n        if(x_den == n_den - 43) return true;\n        if(x_den == n_den + 44) return true;\n        if(x", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Write your code here\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int x_n_num = Integer.parseInt(x_n[0]);\n        int x_n_den = Integer.parseInt(x_n[1]);\n        int n_x_num = Integer.parseInt(n_x[0]);\n        int n_x_den = Integer.parseInt(n_x[1]);\n        if (x_n_den == 0) {\n            return false;\n        }\n        if (n_x_den == 0) {\n            return false;\n        }\n        if (x_n_num == 0 && n_x_num == 0) {\n            return true;\n        }\n        if (x_n_num == 0) {\n            return false;\n        }\n        if (n_x_num == 0) {\n            return false;\n        }\n        if (x_n_den == n_x_num) {\n            return true;\n        }\n        if (x_n_den == n_x_den) {\n            return true;\n        }\n        if (x_n_den != n_x_num) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Write your code here\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int x_n_num = Integer.parseInt(x_n[0]);\n        int x_n_den = Integer.parseInt(x_n[1]);\n        int n_x_num = Integer.parseInt(n_x[0]);\n        int n_x_den = Integer.parseInt(n_x[1]);\n        if(x_n_den == 0){\n            return false;\n        }\n        if(n_x_den == 0){\n            return false;\n        }\n        if(x_n_num == n_x_num){\n            return true;\n        }\n        if(x_n_num == 0){\n            return false;\n        }\n        if(x_n_den == 1){\n            return true;\n        }\n        if(n_x_num == 0){\n            return false;\n        }\n        if(n_x_den == 1){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }\n        if(x_n_num == n_x_den){\n            return true;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int x_n_num = Integer.parseInt(x_n[0]);\n        int x_n_den = Integer.parseInt(x_n[1]);\n        int n_x_num = Integer.parseInt(n_x[0]);\n        int n_x_den = Integer.parseInt(n_x[1]);\n        if (x_n_den == 0) {\n            return false;\n        }\n        if (n_x_den == 0) {\n            return false;\n        }\n        if (x_n_num == 0) {\n            return false;\n        }\n        if (n_x_num == 0) {\n            return false;\n        }\n        if (x_n_den == n_x_num) {\n            return true;\n        }\n        if (x_n_den != n_x_num) {\n            return false;\n        }\n        int x_n_num_1 = x_n_num;\n        int x_n_den_1 = x_n_den;\n        int n_x_num_1 = n_x_num;\n        int n_x_den_1 = n_x_den;\n        while (x_n_den_1 != 0) {\n            int temp = x_n_den_1;\n            x_n_den_1 = x_n_den_1 / 10;\n            x_n_num_1 = x_n_num_1 + x_n_den_1 * temp;\n        }\n        while (n_x_den_1 != 0) {\n            int temp = n_x_den_1;\n            n_x_den_1 = n_x_den_1 / 10;\n            n_x_num_1 = n_x_num_1 + n_x_den_1 * temp;\n        }\n        if (x_n_num_1 == n_x_num_1) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Write your code here\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int x_n_num = Integer.parseInt(x_n[0]);\n        int x_n_den = Integer.parseInt(x_n[1]);\n        int n_x_num = Integer.parseInt(n_x[0]);\n        int n_x_den = Integer.parseInt(n_x[1]);\n        if(x_n_den == 0) return false;\n        if(n_x_den == 0) return false;\n        if(x_n_num == 0) return false;\n        if(n_x_num == 0) return false;\n        if(x_n_den == n_x_num) return true;\n        if(x_n_den != n_x_num) return false;\n        if(x_n_den == 1) return true;\n        if(x_n_den == -1) return true;\n        if(x_n_den == 2) return true;\n        if(x_n_den == -2) return true;\n        if(x_n_den == 3) return true;\n        if(x_n_den == -3) return true;\n        if(x_n_den == 4) return true;\n        if(x_n_den == -4) return true;\n        if(x_n_den == 5) return true;\n        if(x_n_den == -5) return true;\n        if(x_n_den == 6) return true;\n        if(x_n_den == -6) return true;\n        if(x_n_den == 7) return true;\n        if(x_n_den == -7) return true;\n        if(x_n_den == 8) return true;\n        if(x_n_den == -8) return true;\n        if(x_n_den == 9) return true;\n        if(x_n_den == -9) return true;\n        if(x_n_den == 10) return true;\n        if(x_n_den == -10) return true;\n        if(x_n_den == 11) return true;\n        if(x_n_den == -11) return true;\n        if(x_n_den == 12) return true;\n        if(x_n_den == -12) return true;\n        if(x_n_den == 13) return true;\n        if(x_n_den == -13) return true;\n        if(x_n_den == 14) return true;\n        if(x_n_den == -14) return true;\n        if(x_n_den == 15) return true;\n        if(x_n_den == -15) return true;\n        if(x_n_den == 16) return true;\n        if(x_n_den == -16) return true;\n        if(x_n_den == 17) return true;\n        if(x_n_den == -17) return true;\n        if(x_n_den == 18) return true;\n        if(x_n_den == -18) return true;\n        if(x_n_den == 19) return true;\n        if(x_n_den == -19) return true;\n        if(x_n_den == 20) return true;\n        if(x_n_den == -20) return true;\n        if(x_n_den == 21) return true;\n        if(x_n_den == -21) return true;\n        if(x_n_den == 22) return true;\n        if(x_n_den == -22) return true;\n        if(x_n_den == 23) return true;\n        if(x_n_den == -23) return true;\n        if(x_n_den == 24) return true;\n        if(x_n_den == -24) return true;\n        if(x_n_den == 25) return true;\n        if(x_n_den == -25) return true;\n        if(x_n_den == 26) return true;\n        if(x_n_den == -26) return true;\n        if(x_n_den == 27) return true;\n        if(x_n_den == -27) return true;\n        if(x_n_den == 28) return true;\n        if(x_n_den == -28) return true;\n        if(x_n_den == 29) return true;\n        if(x_n_den == -29) return true;\n        if(x_n_den == 30) return true;\n        if(x_n_den == -30) return true;\n        if(x_n_den == 31) return true;\n        if(x_n_den == -31) return true;\n        if(x_n_den == 32) return true;\n        if(x_n_den == -32) return true;\n        if(x_n_den == 33) return true;\n        if(x_n_den == -33) return true;\n        if(x_n_den == 34) return true;\n        if(x_n_den == -34) return true;\n        if(x_n_den == 35) return true;\n        if(x_n_den == -35) return true;\n        if(x_n_den == 36) return true;\n        if(x_n_den == -36) return true;\n        if(x_n_den == 37) return true;\n        if(x_n_den == -37) return true;\n        if(x_n_den == 38) return true;\n        if(x_n_den == -38) return true;\n        if(x_n_den == 39) return true;\n        if(x_n_den == -39) return true;\n        if(x_n_den == 40) return true;\n        if(x_n_den == -40) return true;\n        if(x_n_den == 41) return true;\n        if(x_n_den == -41) return true;\n        if(x_n_den == 42) return true;\n        if(x_n_den == -42) return true;\n        if(x_n_den == 43) return true;\n        if(x_n_den == -43) return true;\n        if(x_n_den == 44) return true;\n        if(x_n_den == -44) return true;\n        if(x_n_den == 45) return true;\n        if(x_n_den == -45) return true;\n        if(x_n_den == 46) return true;\n        if(x_n_den == -46) return true;\n        if(x_n_den == 47) return true;\n        if(x_n_den == -47) return true;\n        if(x_n_den == 48) return true;\n        if(x_n_den == -48", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int numerator = Integer.parseInt(x_n[0]);\n        int denominator = Integer.parseInt(x_n[1]);\n        int numerator_n = Integer.parseInt(n_x[0]);\n        int denominator_n = Integer.parseInt(n_x[1]);\n        if(numerator == 0 && denominator == 0)\n            return false;\n        if(numerator_n == 0 && denominator_n == 0)\n            return false;\n        if(numerator_n == 0)\n            return true;\n        if(denominator_n == 0)\n            return true;\n        if(numerator_n == denominator_n)\n            return true;\n        if(numerator_n != denominator_n)\n            return false;\n        if(numerator_n == 1)\n            return true;\n        if(numerator_n == 2)\n            return true;\n        if(numerator_n == 3)\n            return true;\n        if(numerator_n == 4)\n            return true;\n        if(numerator_n == 5)\n            return true;\n        if(numerator_n == 6)\n            return true;\n        if(numerator_n == 7)\n            return true;\n        if(numerator_n == 8)\n            return true;\n        if(numerator_n == 9)\n            return true;\n        if(numerator_n == 10)\n            return true;\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // write your code here\n        String[] nums = x.split(\"/\");\n        String[] nums2 = n.split(\"/\");\n        int num1 = Integer.parseInt(nums[0]);\n        int num2 = Integer.parseInt(nums2[0]);\n        int den1 = Integer.parseInt(nums[1]);\n        int den2 = Integer.parseInt(nums2[1]);\n        if(den1 == 0)\n            return false;\n        if(den2 == 0)\n            return false;\n        if(den1 == den2)\n            return true;\n        if(den1 > den2)\n            return simplify(n, x);\n        else\n            return simplify(x, n);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // your code here\n        String[] xn = x.split(\"/\");\n        String[] nx = n.split(\"/\");\n        int xn_num = Integer.parseInt(xn[0]);\n        int xn_den = Integer.parseInt(xn[1]);\n        int nx_num = Integer.parseInt(nx[0]);\n        int nx_den = Integer.parseInt(nx[1]);\n        if(xn_den == 0) return false;\n        if(nx_den == 0) return false;\n        if(xn_num == 0 && nx_num == 0) return true;\n        if(xn_num == 0) return false;\n        if(nx_num == 0) return false;\n        if(xn_den == nx_num) return true;\n        if(xn_den != nx_num) return false;\n        if(xn_den == 1) return true;\n        if(xn_den == 2) return true;\n        if(xn_den == 3) return true;\n        if(xn_den == 4) return true;\n        if(xn_den == 5) return true;\n        if(xn_den == 6) return true;\n        if(xn_den == 7) return true;\n        if(xn_den == 8) return true;\n        if(xn_den == 9) return true;\n        if(xn_den == 10) return true;\n        if(xn_den == 11) return true;\n        if(xn_den == 12) return true;\n        if(xn_den == 13) return true;\n        if(xn_den == 14) return true;\n        if(xn_den == 15) return true;\n        if(xn_den == 16) return true;\n        if(xn_den == 17) return true;\n        if(xn_den == 18) return true;\n        if(xn_den == 19) return true;\n        if(xn_den == 20) return true;\n        if(xn_den == 21) return true;\n        if(xn_den == 22) return true;\n        if(xn_den == 23) return true;\n        if(xn_den == 24) return true;\n        if(xn_den == 25) return true;\n        if(xn_den == 26) return true;\n        if(xn_den == 27) return true;\n        if(xn_den == 28) return true;\n        if(xn_den == 29) return true;\n        if(xn_den == 30) return true;\n        if(xn_den == 31) return true;\n        if(xn_den == 32) return true;\n        if(xn_den == 33) return true;\n        if(xn_den == 34) return true;\n        if(xn_den == 35) return true;\n        if(xn_den == 36) return true;\n        if(xn_den == 37) return true;\n        if(xn_den == 38) return true;\n        if(xn_den == 39) return true;\n        if(xn_den == 40) return true;\n        if(xn_den == 41) return true;\n        if(xn_den == 42) return true;\n        if(xn_den == 43) return true;\n        if(xn_den == 44) return true;\n        if(xn_den == 45) return true;\n        if(xn_den == 46) return true;\n        if(xn_den == 47) return true;\n        if(xn_den == 48) return true;\n        if(xn_den == 49) return true;\n        if(xn_den == 50) return true;\n        if(xn_den == 51) return true;\n        if(xn_den == 52) return true;\n        if(xn_den == 53) return true;\n        if(xn_den == 54) return true;\n        if(xn_den == 55) return true;\n        if(xn_den == 56) return true;\n        if(xn_den == 57) return true;\n        if(xn_den == 58) return true;\n        if(xn_den == 59) return true;\n        if(xn_den == 60) return true;\n        if(xn_den == 61) return true;\n        if(xn_den == 62) return true;\n        if(xn_den == 63) return true;\n        if(xn_den == 64) return true;\n        if(xn_den == 65) return true;\n        if(xn_den == 66) return true;\n        if(xn_den == 67) return true;\n        if(xn_den == 68) return true;\n        if(xn_den == 69) return true;\n        if(xn_den == 70) return true;\n        if(xn_den == 71) return true;\n        if(xn_den == 72) return true;\n        if(xn_den == 73) return true;\n        if(xn_den == 74) return true;\n        if(xn_den == 75) return true;\n        if(xn_den == 76) return true;\n        if(xn_den == 77) return true;\n        if(xn_den == 78) return true;\n        if(xn_den == 79) return true;\n        if(xn_den == 80) return true;\n        if(xn_den == 81) return true;\n        if(xn_den == 82) return true;\n        if(xn_den == 83) return true;\n        if(xn_den == 84) return true;\n        if(xn_den == 85) return true;\n        if(xn_den == 86) return true;\n        if(xn_den == 87) return true;\n        if(xn_den == 88) return true;\n        if(xn_den == 89) return true;\n        if(xn_den == 90) return true;\n        if(xn_den == 91) return true;\n        if(xn_den == 92) return true;\n        if(xn_den == 93) return true;\n        if(xn_den == 94) return true;\n        if(xn_den == 95) return true;\n        if(xn_den == 96) return true;\n        if(xn_den == 97) return true;\n        if(xn_den == 98) return true;\n        if(xn_den == 99) return true;\n        if(xn_den == 100) return true;\n        if(xn_den == 101) return true;\n        if(xn_den == 102) return true;\n        if(xn_den == 103) return true;\n        if(xn_den == 104) return true;\n        if(xn_den == 105) return true;\n        if(xn_den == 106) return true;\n        if(xn_den == 107) return true;\n        if(xn_den == 108) return true;\n        if(xn_den == 109) return true;", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Write your code here\n        String[] x_n = x.split(\"/\");\n        String numerator = x_n[0];\n        String denominator = x_n[1];\n        String[] numerator_n = numerator.split(\"\");\n        String[] denominator_n = denominator.split(\"\");\n        int i = 0;\n        int j = 0;\n        while(i < numerator_n.length && j < denominator_n.length) {\n            if(numerator_n[i] == denominator_n[j]) {\n                numerator_n[i] = \"0\";\n                denominator_n[j] = \"0\";\n            }\n            else if(numerator_n[i] == \"0\") {\n                numerator_n[i] = \"1\";\n            }\n            else if(denominator_n[j] == \"0\") {\n                denominator_n[j] = \"1\";\n            }\n            i++;\n            j++;\n        }\n        while(i < numerator_n.length) {\n            numerator_n[i] = \"0\";\n            i++;\n        }\n        while(j < denominator_n.length) {\n            denominator_n[j] = \"0\";\n            j++;\n        }\n        String numerator_simplified = \"\";\n        String denominator_simplified = \"\";\n        for(int i = 0; i < numerator_n.length; i++) {\n            numerator_simplified += numerator_n[i];\n        }\n        for(int i = 0; i < denominator_n.length; i++) {\n            denominator_simplified += denominator_n[i];\n        }\n        if(numerator_simplified.equals(\"0\")) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int x_n_num = Integer.parseInt(x_n[0]);\n        int x_n_den = Integer.parseInt(x_n[1]);\n        int n_x_num = Integer.parseInt(n_x[0]);\n        int n_x_den = Integer.parseInt(n_x[1]);\n        if(x_n_den == 0) return false;\n        if(n_x_den == 0) return false;\n        if(x_n_num == 0) return false;\n        if(n_x_num == 0) return false;\n        if(x_n_den == n_x_num) return true;\n        if(x_n_den == n_x_den) return true;\n        if(x_n_num == n_x_den) return true;\n        if(x_n_num == n_x_num) return true;\n        if(x_n_den != n_x_den) return false;\n        if(x_n_num != n_x_num) return false;\n        if(x_n_den == 1) return true;\n        if(x_n_num == 1) return true;\n        if(n_x_den == 1) return true;\n        if(n_x_num == 1) return true;\n        if(x_n_den == n_x_num) return true;\n        if(x_n_den == n_x_den) return true;\n        if(x_n_num == n_x_den) return true;\n        if(x_n_num == n_x_num) return true;\n        if(x_n_den != n_x_den) return false;\n        if(x_n_num != n_x_num) return false;\n        if(x_n_den == 1) return true;\n        if(x_n_num == 1) return true;\n        if(n_x_den == 1) return true;\n        if(n_x_num == 1) return true;\n        if(x_n_den == n_x_num) return true;\n        if(x_n_den == n_x_den) return true;\n        if(x_n_num == n_x_den) return true;\n        if(x_n_num == n_x_num) return true;\n        if(x_n_den != n_x_den) return false;\n        if(x_n_num != n_x_num) return false;\n        if(x_n_den == 1) return true;\n        if(x_n_num == 1) return true;\n        if(n_x_den == 1) return true;\n        if(n_x_num == 1) return true;\n        if(x_n_den == n_x_num) return true;\n        if(x_n_den == n_x_den) return true;\n        if(x_n_num == n_x_den) return true;\n        if(x_n_num == n_x_num) return true;\n        if(x_n_den != n_x_den) return false;\n        if(x_n_num != n_x_num) return false;\n        if(x_n_den == 1) return true;\n        if(x_n_num == 1) return true;\n        if(n_x_den == 1) return true;\n        if(n_x_num == 1) return true;\n        if(x_n_den == n_x_num) return true;\n        if(x_n_den == n_x_den) return true;\n        if(x_n_num == n_x_den) return true;\n        if(x_n_num == n_x_num) return true;\n        if(x_n_den != n_x_den) return false;\n        if(x_n_num != n_x_num) return false;\n        if(x_n_den == 1) return true;\n        if(x_n_num == 1) return true;\n        if(n_x_den == 1) return true;\n        if(n_x_num == 1) return true;\n        if(x_n_den == n_x_num) return true;\n        if(x_n_den == n_x_den) return true;\n        if(x_n_num == n_x_den) return true;\n        if(x_n_num == n_x_num) return true;\n        if(x_n_den != n_x_den) return false;\n        if(x_n_num != n_x_num) return false;\n        if(x_n_den == 1) return true;\n        if(x_n_num == 1) return true;\n        if(n_x_den == 1) return true;\n        if(n_x_num == 1) return true;\n        if(x_n_den == n_x_num) return true;\n        if(x_n_den == n_x_den) return true;\n        if(x_n_num == n_x_den) return true;\n        if(x_n_num == n_x_num) return true;\n        if(x_n_den != n_x_den) return false;\n        if(x_n_num != n_x_num) return false;\n        if(x_n_den == 1) return true;\n        if(x_n_num == 1) return true;\n        if(n_x_den == 1) return true;\n        if(n_x_num == 1) return true;\n        if(x_n_den == n_x_num) return true;\n        if(x_n_den == n_x_den) return true;\n        if(x_n_num == n_x_den) return true;\n        if(x_n_num == n_x_num) return true;\n        if(x_n_den != n_x_den) return false;\n        if(x_n_num != n_x_num) return false;\n        if(x_n_den == 1) return true;\n        if(x_n_num == 1) return true;\n        if(n_x_den == 1) return true;\n        if(n_x_num == 1) return true;\n        if(x_n_den == n_x_num) return true;\n        if(x_n_den == n_x_den) return true;\n        if(x_n_num == n_x_den) return true;\n        if(x_n_num == n_x_num) return true;\n        if(x_n_den != n_x_den) return false;\n        if(x_n_num != n_x_num) return false;\n        if(x_n_den == 1) return true;\n        if(x_n_num == 1) return true;\n        if(n_x_den == 1) return true;\n        if(n_x_num == 1) return true;\n        if(x_n_den == n_x_num) return true;\n        if(x_n_den == n_x_den) return true;\n        if(x_n_num", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int x_n_num = Integer.parseInt(x_n[0]);\n        int x_n_den = Integer.parseInt(x_n[1]);\n        int n_x_num = Integer.parseInt(n_x[0]);\n        int n_x_den = Integer.parseInt(n_x[1]);\n        if(x_n_den == 0)\n            return false;\n        if(n_x_den == 0)\n            return false;\n        if(x_n_num == n_x_num)\n            return true;\n        if(x_n_num == n_x_den)\n            return false;\n        if(x_n_den == n_x_num)\n            return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int x_n_num = Integer.parseInt(x_n[0]);\n        int x_n_den = Integer.parseInt(x_n[1]);\n        int n_x_num = Integer.parseInt(n_x[0]);\n        int n_x_den = Integer.parseInt(n_x[1]);\n        if(x_n_den == 0)\n            return false;\n        if(n_x_den == 0)\n            return false;\n        if(x_n_den == 1)\n            return true;\n        if(n_x_den == 1)\n            return true;\n        if(x_n_num == n_x_num)\n            return true;\n        if(x_n_num == n_x_num && x_n_den == n_x_den)\n            return true;\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Write your code here\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int x_num = Integer.parseInt(x_n[0]);\n        int x_den = Integer.parseInt(x_n[1]);\n        int n_num = Integer.parseInt(n_x[0]);\n        int n_den = Integer.parseInt(n_x[1]);\n\n        if(x_den == 0)\n            return false;\n\n        if(n_den == 0)\n            return false;\n\n        if(x_den == 1)\n            return true;\n\n        if(n_den == 1)\n            return true;\n\n        if(x_den == n_den)\n            return true;\n\n        if(x_den != n_den)\n            return false;\n\n        if(x_num == 0)\n            return false;\n\n        if(n_num == 0)\n            return false;\n\n        if(x_num == n_num)\n            return true;\n\n        if(x_num != n_num)\n            return false;\n\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // write your code here\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int x_n_num = Integer.parseInt(x_n[0]);\n        int x_n_den = Integer.parseInt(x_n[1]);\n        int n_x_num = Integer.parseInt(n_x[0]);\n        int n_x_den = Integer.parseInt(n_x[1]);\n        if(x_n_den == 0)\n            return false;\n        if(n_x_den == 0)\n            return false;\n        if(x_n_num == n_x_num)\n            return true;\n        if(x_n_num == n_x_den)\n            return true;\n        if(x_n_den == n_x_num)\n            return true;\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Write your code here\n        String[] nums = x.split(\"/\");\n        String[] denoms = n.split(\"/\");\n        int num = Integer.parseInt(nums[0]);\n        int den = Integer.parseInt(denoms[0]);\n        if(den == 0) return false;\n        if(den == 1) return true;\n        if(den == 2) return num % 2 == 0;\n        if(den == 3) return num % 3 == 0;\n        if(den == 4) return num % 4 == 0;\n        if(den == 5) return num % 5 == 0;\n        if(den == 6) return num % 6 == 0;\n        if(den == 7) return num % 7 == 0;\n        if(den == 8) return num % 8 == 0;\n        if(den == 9) return num % 9 == 0;\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        // Write your code here\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int x_n_length = x_n.length;\n        int n_x_length = n_x.length;\n        int i = 0;\n        int j = 0;\n        int k = 0;\n        int m = 0;\n        int n_x_length_1 = n_x_length - 1;\n        int x_n_length_1 = x_n_length - 1;\n        int n_x_length_2 = n_x_length - 2;\n        int x_n_length_2 = x_n_length - 2;\n        int n_x_length_3 = n_x_length - 3;\n        int x_n_length_3 = x_n_length - 3;\n        int n_x_length_4 = n_x_length - 4;\n        int x_n_length_4 = x_n_length - 4;\n        int n_x_length_5 = n_x_length - 5;\n        int x_n_length_5 = x_n_length - 5;\n        int n_x_length_6 = n_x_length - 6;\n        int x_n_length_6 = x_n_length - 6;\n        int n_x_length_7 = n_x_length - 7;\n        int x_n_length_7 = x_n_length - 7;\n        int n_x_length_8 = n_x_length - 8;\n        int x_n_length_8 = x_n_length - 8;\n        int n_x_length_9 = n_x_length - 9;\n        int x_n_length_9 = x_n_length - 9;\n        int n_x_length_10 = n_x_length - 10;\n        int x_n_length_10 = x_n_length - 10;\n        int n_x_length_11 = n_x_length - 11;\n        int x_n_length_11 = x_n_length - 11;\n        int n_x_length_12 = n_x_length - 12;\n        int x_n_length_12 = x_n_length - 12;\n        int n_x_length_13 = n_x_length - 13;\n        int x_n_length_13 = x_n_length - 13;\n        int n_x_length_14 = n_x_length - 14;\n        int x_n_length_14 = x_n_length - 14;\n        int n_x_length_15 = n_x_length - 15;\n        int x_n_length_15 = x_n_length - 15;\n        int n_x_length_16 = n_x_length - 16;\n        int x_n_length_16 = x_n_length - 16;\n        int n_x_length_17 = n_x_length - 17;\n        int x_n_length_17 = x_n_length - 17;\n        int n_x_length_18 = n_x_length - 18;\n        int x_n_length_18 = x_n_length - 18;\n        int n_x_length_19 = n_x_length - 19;\n        int x_n_length_19 = x_n_length - 19;\n        int n_x_length_20 = n_x_length - 20;\n        int x_n_length_20 = x_n_length - 20;\n        int n_x_length_21 = n_x_length - 21;\n        int x_n_length_21 = x_n_length - 21;\n        int n_x_length_22 = n_x_length - 22;\n        int x_n_length_22 = x_n_length - 22;\n        int n_x_length_23 = n_x_length - 23;\n        int x_n_length_23 = x_n_length - 23;\n        int n_x_length_24 = n_x_length - 24;\n        int x_n_length_24 = x_n_length - 24;\n        int n_x_length_25 = n_x_length - 25;\n        int x_n_length_25 = x_n_length - 25;\n        int n_x_length_26 = n_x_length - 26;\n        int x_n_length_26 = x_n_length - 26;\n        int n_x_length_27 = n_x_length - 27;\n        int x_n_length_27 = x_n_length - 27;\n        int n_x_length_28 = n_x_length - 28;\n        int x_n_length_28 = x_n_length - 28;\n        int n_x_length_29 = n_x_length - 29;\n        int x_n_length_29 = x_n_length - 29;\n        int n_x_length_30 = n_x_length - 30;\n        int x_n_length_30 = x_n_length - 30;\n        int n_x_length_31 = n_x_length - 31;\n        int x_n_length_31 = x_n_length - 31;\n        int n_x_length_32 = n_x_length - 32;\n        int x_n_length_32 = x_n_length - 32;\n        int n_x_length_33 = n_x_length - 33;\n        int x_n_length_33 = x_n_length - 33;\n        int n_x_length_34 = n_x_length - 34;\n        int x_n_length_34 = x_n_length - 34;\n        int n_x_length_35 = n_x_length - 35;\n        int x_n_length_35 = x_n_length - 35;\n        int n_x_length_36 = n_x_length - 36;\n        int x_n_length_36 = x_n_length - 36;\n        int n_x_length_37 = n_x_length - 37;\n        int x_n_length_37 = x_n_length - 37;\n        int n_x_length_38 = n_x_length - 38;\n        int x_n_length_38 = x_n_length - 38;\n        int n_x_length_39 = n_x_length - 39;\n        int x_n_length_39 = x_n_length - 39;\n        int n_x_length_40 = n_x_length - 40;\n        int x", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        String[] x_n = x.split(\"/\");\n        String[] n_x = n.split(\"/\");\n        int numerator = Integer.parseInt(x_n[0]);\n        int denominator = Integer.parseInt(x_n[1]);\n        int numerator_n = Integer.parseInt(n_x[0]);\n        int denominator_n = Integer.parseInt(n_x[1]);\n        if(denominator == 0)\n            return false;\n        if(numerator == 0)\n            return false;\n        if(denominator_n == 0)\n            return false;\n        if(numerator_n == 0)\n            return false;\n        if(denominator == denominator_n)\n            return true;\n        if(numerator_n == denominator)\n            return true;\n        if(denominator_n == numerator)\n            return true;\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n        String[] xn = x.split(\"/\");\n        String[] nn = n.split(\"/\");\n        int xn_num = Integer.parseInt(xn[0]);\n        int xn_den = Integer.parseInt(xn[1]);\n        int nn_num = Integer.parseInt(nn[0]);\n        int nn_den = Integer.parseInt(nn[1]);\n        if(xn_den == 0)\n            return false;\n        if(xn_num == 0)\n            return false;\n        if(nn_den == 0)\n            return false;\n        if(nn_num == 0)\n            return false;\n        if(xn_den == nn_den)\n            return true;\n        if(xn_den == 1)\n            return true;\n        if(xn_num == 1)\n            return true;\n        if(xn_num == nn_num)\n            return true;\n        if(xn_num == nn_den)\n            return true;\n        if(xn_num == xn_den)\n            return true;\n        if(xn_num == nn_num)\n            return true;\n        if(xn_num == nn_den)\n            return true;\n        if(xn_num == xn_den)\n            return true;\n        if(xn_num == nn_num)\n            return true;\n        if(xn_num == nn_den)\n            return true;\n        if(xn_num == xn_den)\n            return true;\n        if(xn_num == nn_num)\n            return true;\n        if(xn_num == nn_den)\n            return true;\n        if(xn_num == xn_den)\n            return true;\n        if(xn_num == nn_num)\n            return true;\n        if(xn_num == nn_den)\n            return true;\n        if(xn_num == xn_den)\n            return true;\n        if(xn_num == nn_num)\n            return true;\n        if(xn_num == nn_den)\n            return true;\n        if(xn_num == xn_den)\n            return true;\n        if(xn_num == nn_num)\n            return true;\n        if(xn_num == nn_den)\n            return true;\n        if(xn_num == xn_den)\n            return true;\n        if(xn_num == nn_num)\n            return true;\n        if(xn_num == nn_den)\n            return true;\n        if(xn_num == xn_den)\n            return true;\n        if(xn_num == nn_num)\n            return true;\n        if(xn_num == nn_den)\n            return true;\n        if(xn_num == xn_den)\n            return true;\n        if(xn_num == nn_num)\n            return true;\n        if(xn_num == nn_den)\n            return true;\n        if(xn_num == xn_den)\n            return true;\n        if(xn_num == nn_num)\n            return true;\n        if(xn_num == nn_den)\n            return true;\n        if(xn_num == xn_den)\n            return true;\n        if(xn_num == nn_num)\n            return true;\n        if(xn_num == nn_den)\n            return true;\n        if(xn_num == xn_den)\n            return true;\n        if(xn_num == nn_num)\n            return true;\n        if(xn_num == nn_den)\n            return true;\n        if(xn_num == xn_den)\n            return true;\n        if(xn_num == nn_num)\n            return true;\n        if(xn_num == nn_den)\n            return true;\n        if(xn_num == xn_den)\n            return true;\n        if(xn_num == nn_num)\n            return true;\n        if(xn_num == nn_den)\n            return true;\n        if(xn_num == xn_den)\n            return true;\n        if(xn_num == nn_num)\n            return true;\n        if(xn_num == nn_den)\n            return true;\n        if(xn_num == xn_den)\n            return true;\n        if(xn_num == nn_num)\n            return true;\n        if(xn_num == nn_den)\n            return true;\n        if(xn_num == xn_den)\n            return true;\n        if(xn_num == nn_num)\n            return true;\n        if(xn_num == nn_den)\n            return true;\n        if(xn_num == xn_den)\n            return true;\n        if(xn_num == nn_num)\n            return true;\n        if(xn_num == nn_den)\n            return true;\n        if(xn_num == xn_den)\n            return true;\n        if(xn_num == nn_num)\n            return true;\n        if(xn_num == nn_den)\n            return true;\n        if(xn_num == xn_den)\n            return true;\n        if(xn_num == nn_num)\n            return true;\n        if(xn_num == nn_den)\n            return true;\n        if(xn_num == xn_den)\n            return true;\n        if(xn_num == nn_num)\n            return true;\n        if(xn_num == nn_den)\n            return true;\n        if(xn_num == xn_den)\n            return true;\n        if(xn_num == nn_num)\n            return true;\n        if(xn_num == nn_den)\n            return true;\n        if(xn_num == xn_den)\n            return true;\n        if(xn_num == nn_num)\n            return true;\n        if(xn_num == nn_den)\n            return true;\n        if(xn_num == xn_den)\n            return true;\n        if(xn_num == nn_num)\n            return true;\n        if(xn_num == nn_den)\n            return true;\n        if(xn_num == xn_den)\n            return true;\n        if(xn_num == nn_num)\n            return true;\n        if(xn_num == nn_den)\n            return true;\n        if(xn_num == xn_den)\n            return true;\n        if(xn_num == nn_num)\n            return true;\n        if(xn_num == nn_den)\n            return true;\n        if(xn_num == xn_den)\n            return true;\n        if(xn_num == nn_num)\n            return true;\n        if(xn_num == nn_den)\n            return true;\n        if(xn_num == xn_den)\n            return true;\n        if(xn_num == nn_num)\n            return true;\n        if(xn_num == nn_den)\n            return true;\n        if(xn_num == xn_den)\n            return true;\n        if(xn_num == nn_num)\n            return true;\n        if(xn_num == nn_den)\n            return true;\n        if(xn_num == xn_den)\n            return true;\n        if(xn_num == nn_num)\n            return true;\n        if(xn_num == nn_den)\n            return true;\n        if(xn_num == xn_den)\n            return true;\n        if(xn_num == nn_num)\n            return true;\n        if(xn_num == nn_den)\n            return true;\n        if(xn_num == xn_den)\n            return true;\n        if(xn_num == nn_num)\n            return true;\n        if(xn_num == nn_den)\n            return true;\n        if(xn_num == xn_den)\n            return true;\n        if(xn_num == nn_num)\n            return true;"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        if (nums.isEmpty()) {\n            return nums;\n        }\n\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int num : nums) {\n            map.put(num, map.getOrDefault(num, 0) + 1);\n        }\n\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int num = nums.get(i);\n            int count = map.get(num);\n            while (count > 0) {\n                res.add(num);\n                count--;\n            }\n        }\n\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        if (nums.size() == 0) {\n            return nums;\n        }\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int num : nums) {\n            map.put(num, map.getOrDefault(num, 0) + 1);\n        }\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n            for (int j = 0; j < nums.size(); j++) {\n                if (i != j) {\n                    sum += map.get(nums.get(j));\n                }\n            }\n            res.add(sum);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            result.add(i, sum);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        List<Integer> res = new ArrayList<>();\n        int n = nums.size();\n        int[] sum = new int[10];\n        for (int i = 0; i < n; i++) {\n            int num = nums.get(i);\n            sum[num % 10]++;\n        }\n        for (int i = 9; i >= 0; i--) {\n            while (sum[i] > 0) {\n                res.add(i);\n                sum[i]--;\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        if (nums.size() == 0) {\n            return nums;\n        }\n        int[] sums = new int[10];\n        for (int num : nums) {\n            sums[num % 10]++;\n        }\n        int[] res = new int[nums.size()];\n        for (int i = nums.size() - 1; i >= 0; i--) {\n            int sum = sums[nums.get(i) % 10];\n            res[sum - 1] = nums.get(i);\n            sums[nums.get(i) % 10]--;\n        }\n        return Arrays.asList(res);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        if (nums.size() == 0) {\n            return nums;\n        }\n\n        int[] sums = new int[10];\n        for (int num : nums) {\n            sums[num % 10]++;\n        }\n\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < sums.length; i++) {\n            for (int j = 0; j < sums[i]; j++) {\n                res.add(i);\n            }\n        }\n\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        // write your code here\n        List<Integer> res = new ArrayList<>();\n        if (nums.size() == 0) {\n            return res;\n        }\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n        }\n        int index = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (sum == nums.get(i)) {\n                res.add(index);\n            }\n            index++;\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        // Write your code here\n        List<Integer> result = new ArrayList<>();\n        if (nums.size() == 0) {\n            return result;\n        }\n        int[] sums = new int[10];\n        for (int i = 0; i < nums.size(); i++) {\n            sums[nums.get(i) % 10]++;\n        }\n        for (int i = 9; i >= 0; i--) {\n            while (sums[i] > 0) {\n                result.add(i);\n                sums[i]--;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        List<Integer> res = new ArrayList<>();\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n            while (nums.get(i) != 0) {\n                sum += nums.get(i) % 10;\n                nums.set(i, nums.get(i) / 10);\n            }\n            map.put(sum, i);\n        }\n        for (int i = 0; i < nums.size(); i++) {\n            res.add(nums.get(map.get(nums.get(i))));\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        if (nums.size() == 0) {\n            return nums;\n        }\n\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int num : nums) {\n            map.put(num, map.getOrDefault(num, 0) + 1);\n        }\n\n        List<Integer> result = new ArrayList<>();\n        for (int key : map.keySet()) {\n            result.add(key);\n        }\n\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        List<Integer> res = new ArrayList<>();\n        int sum = 0;\n        for(int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            res.add(i, sum);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        if (nums.size() == 0) {\n            return nums;\n        }\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int num = nums.get(i);\n            if (map.containsKey(num)) {\n                map.put(num, map.get(num) + 1);\n            } else {\n                map.put(num, 1);\n            }\n        }\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int num = nums.get(i);\n            int count = map.get(num);\n            for (int j = 0; j < count; j++) {\n                res.add(i);\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        // write your code here\n        List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            result.add(i, sum);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        if (nums.size() == 0) {\n            return nums;\n        }\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int num = nums.get(i);\n            int sum = 0;\n            while (num != 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n            map.put(sum, map.getOrDefault(sum, 0) + 1);\n        }\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int num = nums.get(i);\n            int sum = 0;\n            while (num != 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n            if (map.containsKey(sum)) {\n                res.add(map.get(sum) - 1);\n                map.put(sum, map.get(sum) - 1);\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        if (nums.size() == 0) {\n            return nums;\n        }\n        int n = nums.size();\n        int[] dp = new int[n];\n        dp[0] = nums.get(0);\n        for (int i = 1; i < n; i++) {\n            dp[i] = nums.get(i) + dp[i - 1];\n        }\n        List<Integer> res = new ArrayList<>();\n        for (int i = n - 1; i >= 0; i--) {\n            res.add(dp[i]);\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        List<Integer> result = new ArrayList<>();\n        if (nums.size() == 0) {\n            return result;\n        }\n        int sum = 0;\n        for (int num : nums) {\n            sum += num;\n        }\n        int index = 0;\n        for (int num : nums) {\n            if (sum == num) {\n                result.add(index);\n            }\n            index++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        // Write your code here\n        if (nums == null || nums.size() == 0) {\n            return nums;\n        }\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int num = nums.get(i);\n            int sum = 0;\n            while (num != 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n            map.put(sum, map.getOrDefault(sum, 0) + 1);\n        }\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int num = nums.get(i);\n            int sum = 0;\n            while (num != 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n            if (map.containsKey(sum)) {\n                res.add(map.get(sum) - 1);\n                map.put(sum, map.get(sum) - 1);\n            }\n        }\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        List<Integer> result = new ArrayList<>();\n        if (nums.isEmpty()) {\n            return result;\n        }\n        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            result.add(i, sum);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        if (nums == null || nums.size() == 0) {\n            return nums;\n        }\n\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int num : nums) {\n            int sum = 0;\n            while (num > 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n            map.put(sum, map.getOrDefault(sum, 0) + 1);\n        }\n\n        List<Integer> res = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n            while (nums.get(i) > 0) {\n                sum += nums.get(i) % 10;\n                nums.set(i, nums.get(i) / 10);\n            }\n            res.add(map.getOrDefault(sum, 0) - 1);\n        }\n\n        return res;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n        if (nums == null || nums.size() == 0) {\n            return nums;\n        }\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int num : nums) {\n            map.put(num, map.getOrDefault(num, 0) + 1);\n        }\n        List<Integer> res = new ArrayList<>();\n        for (int num : nums) {\n            int cnt = map.get(num);\n            while (cnt > 0) {\n                res.add(num);\n                cnt--;\n            }\n        }\n        return res;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10 && nums.get(i) % 10 == 1 && nums.get(i - 1) % 10 == 1 && nums.get(i + 1) % 10 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10 && nums.get(i) % 10 == 1 && nums.get(i - 1) % 10 == 1 && nums.get(i + 1) % 10 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10 && nums.get(i) % 10 == 1 && nums.get(i) % 100 != 11) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10 && (nums.get(i) % 10 == 1 || nums.get(i) % 10 == 3 || nums.get(i) % 10 == 5 || nums.get(i) % 10 == 7 || nums.get(i) % 10 == 9)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10 && (nums.get(i) % 10 == 1 || nums.get(i) % 10 == 3 || nums.get(i) % 10 == 5 || nums.get(i) % 10 == 7 || nums.get(i) % 10 == 9)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10 && (nums.get(i) % 10 == 1 || nums.get(i) % 10 == 3 || nums.get(i) % 10 == 5 || nums.get(i) % 10 == 7 || nums.get(i) % 10 == 9)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10 && nums.get(i) % 10 == 1 && nums.get(i) % 100 != 11) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10 && nums.get(i) % 10 == 1 && nums.get(i - 1) % 10 == 1 && nums.get(i + 1) % 10 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10 && (nums.get(i) % 10 == 1 || nums.get(i) % 10 == 3 || nums.get(i) % 10 == 5 || nums.get(i) % 10 == 7 || nums.get(i) % 10 == 9)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10 && nums.get(i) % 10 == 1 && nums.get(i - 1) % 10 == 1 && nums.get(i + 1) % 10 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10 && (nums.get(i) % 10 == 1 || nums.get(i) % 10 == 3 || nums.get(i) % 10 == 5 || nums.get(i) % 10 == 7 || nums.get(i) % 10 == 9)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10 && nums.get(i) % 10 == 1 && nums.get(i) % 100 != 11) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10 && nums.get(i) % 10 == 1 && nums.get(i - 1) % 10 == 1 && nums.get(i + 1) % 10 == 1) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            int num = nums.get(i);\n            if (num > 10 && (num % 10 == 1 || num % 10 == 3 || num % 10 == 5 || num % 10 == 7 || num % 10 == 9)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10 && (nums.get(i) % 10 == 1 || nums.get(i) % 10 == 3 || nums.get(i) % 10 == 5 || nums.get(i) % 10 == 7 || nums.get(i) % 10 == 9)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10 && (nums.get(i) % 10 == 1 || nums.get(i) % 10 == 3 || nums.get(i) % 10 == 5 || nums.get(i) % 10 == 7 || nums.get(i) % 10 == 9)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10 && (nums.get(i) % 10 == 1 || nums.get(i) % 10 == 3 || nums.get(i) % 10 == 5 || nums.get(i) % 10 == 7 || nums.get(i) % 10 == 9)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10 && (nums.get(i) % 10 == 1 || nums.get(i) % 10 == 3 || nums.get(i) % 10 == 5 || nums.get(i) % 10 == 7 || nums.get(i) % 10 == 9)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10 && (nums.get(i) % 10 == 1 || nums.get(i) % 10 == 3 || nums.get(i) % 10 == 5 || nums.get(i) % 10 == 7 || nums.get(i) % 10 == 9)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10 && (nums.get(i) % 10 == 1 || nums.get(i) % 10 == 3 || nums.get(i) % 10 == 5 || nums.get(i) % 10 == 7 || nums.get(i) % 10 == 9)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++){\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for(int i = 0; i < n; i++){\n            for(int j = i + 1; j < n; j++){\n                for(int k = j + 1; k < n; k++){\n                    if(a[i] + a[j] + a[k] % 3 == 0){\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for(int i=0; i<n; i++) {\n            a[i] = i*i - i + 1;\n        }\n        int count = 0;\n        for(int i=0; i<n; i++) {\n            for(int j=i+1; j<n; j++) {\n                for(int k=j+1; k<n; k++) {\n                    if(a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++)\n            a[i] = i * i - i + 1;\n        int count = 0;\n        for(int i = 0; i < n; i++)\n            for(int j = 0; j < n; j++)\n                for(int k = 0; k < n; k++)\n                    if(a[i] + a[j] + a[k] % 3 == 0)\n                        count++;\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for(int i=0; i<n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for(int i=0; i<n; i++) {\n            for(int j=i+1; j<n; j++) {\n                for(int k=j+1; k<n; k++) {\n                    if(a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    if (a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for(int i=0; i<n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for(int i=0; i<n; i++) {\n            for(int j=i+1; j<n; j++) {\n                for(int k=j+1; k<n; k++) {\n                    if(a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++)\n            a[i] = i * i - i + 1;\n        int count = 0;\n        for(int i = 0; i < n; i++)\n            for(int j = i + 1; j < n; j++)\n                for(int k = j + 1; k < n; k++)\n                    if(a[i] + a[j] + a[k] % 3 == 0)\n                        count++;\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n        int[] a = new int[n];\n        for(int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int count = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n                    if(a[i] + a[j] + a[k] % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1 == null || planet2 == null) {\n            return result;\n        }\n        if (planet1.equals(planet2)) {\n            result.add(planet1);\n            return result;\n        }\n        if (planet1.equals(\"Sun\")) {\n            result.add(planet2);\n            return result;\n        }\n        if (planet2.equals(\"Sun\")) {\n            result.add(planet1);\n            return result;\n        }\n        if (planet1.equals(\"Mercury\")) {\n            result.add(planet2);\n            return result;\n        }\n        if (planet2.equals(\"Mercury\")) {\n            result.add(planet1);\n            return result;\n        }\n        if (planet1.equals(\"Venus\")) {\n            result.add(planet2);\n            return result;\n        }\n        if (planet2.equals(\"Venus\")) {\n            result.add(planet1);\n            return result;\n        }\n        if (planet1.equals(\"Earth\")) {\n            result.add(planet2);\n            return result;\n        }\n        if (planet2.equals(\"Earth\")) {\n            result.add(planet1);\n            return result;\n        }\n        if (planet1.equals(\"Mars\")) {\n            result.add(planet2);\n            return result;\n        }\n        if (planet2.equals(\"Mars\")) {\n            result.add(planet1);\n            return result;\n        }\n        if (planet1.equals(\"Jupiter\")) {\n            result.add(planet2);\n            return result;\n        }\n        if (planet2.equals(\"Jupiter\")) {\n            result.add(planet1);\n            return result;\n        }\n        if (planet1.equals(\"Saturn\")) {\n            result.add(planet2);\n            return result;\n        }\n        if (planet2.equals(\"Saturn\")) {\n            result.add(planet1);\n            return result;\n        }\n        if (planet1.equals(\"Uranus\")) {\n            result.add(planet2);\n            return result;\n        }\n        if (planet2.equals(\"Uranus\")) {\n            result.add(planet1);\n            return result;\n        }\n        if (planet1.equals(\"Neptune\")) {\n            result.add(planet2);\n            return result;\n        }\n        if (planet2.equals(\"Neptune\")) {\n            result.add(planet1);\n            return result;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1 == null || planet2 == null) {\n            return result;\n        }\n        if (planet1.equals(planet2)) {\n            return result;\n        }\n        if (planet1.compareTo(planet2) > 0) {\n            String temp = planet1;\n            planet1 = planet2;\n            planet2 = temp;\n        }\n        String[] planets = {planet1, planet2};\n        for (int i = 0; i < planets.length; i++) {\n            String[] orbit = orbit(planets[i]);\n            if (orbit.length == 0) {\n                continue;\n            }\n            for (int j = 0; j < orbit.length; j++) {\n                if (orbit[j].equals(planets[i])) {\n                    continue;\n                }\n                if (bf(orbit[j], planets[i])) {\n                    result.add(orbit[j]);\n                }\n            }\n        }\n        return result;\n    }\n\n    /**\n    Given a planet name, return the orbit of that planet.\n    */\n    private String[] orbit(String planet) {\n        String[] orbit = new String[8];\n        orbit[0] = planet;\n        orbit[1] = planet;\n        orbit[2] = planet;\n        orbit[3] = planet;\n        orbit[4] = planet;\n        orbit[5] = planet;\n        orbit[6] = planet;\n        orbit[7] = planet;\n        return orbit;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1.equals(\"Sun\") || planet2.equals(\"Sun\")) {\n            return result;\n        }\n        if (planet1.equals(\"Mercury\") || planet2.equals(\"Mercury\")) {\n            result.add(\"Venus\");\n        }\n        if (planet1.equals(\"Venus\") || planet2.equals(\"Venus\")) {\n            result.add(\"Earth\");\n            result.add(\"Mars\");\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n            result.add(\"Neptune\");\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<String>();\n        if (planet1.equals(planet2)) {\n            return result;\n        }\n        if (planet1.equals(\"Sun\")) {\n            result.add(\"Sun\");\n            return result;\n        }\n        if (planet2.equals(\"Sun\")) {\n            result.add(\"Sun\");\n            return result;\n        }\n        if (planet1.equals(\"Mercury\")) {\n            result.add(\"Venus\");\n            return result;\n        }\n        if (planet2.equals(\"Mercury\")) {\n            result.add(\"Venus\");\n            return result;\n        }\n        if (planet1.equals(\"Venus\")) {\n            result.add(\"Earth\");\n            return result;\n        }\n        if (planet2.equals(\"Venus\")) {\n            result.add(\"Earth\");\n            return result;\n        }\n        if (planet1.equals(\"Earth\")) {\n            result.add(\"Mars\");\n            return result;\n        }\n        if (planet2.equals(\"Earth\")) {\n            result.add(\"Mars\");\n            return result;\n        }\n        if (planet1.equals(\"Mars\")) {\n            result.add(\"Jupiter\");\n            return result;\n        }\n        if (planet2.equals(\"Mars\")) {\n            result.add(\"Jupiter\");\n            return result;\n        }\n        if (planet1.equals(\"Jupiter\")) {\n            result.add(\"Saturn\");\n            return result;\n        }\n        if (planet2.equals(\"Jupiter\")) {\n            result.add(\"Saturn\");\n            return result;\n        }\n        if (planet1.equals(\"Saturn\")) {\n            result.add(\"Uranus\");\n            return result;\n        }\n        if (planet2.equals(\"Saturn\")) {\n            result.add(\"Uranus\");\n            return result;\n        }\n        if (planet1.equals(\"Uranus\")) {\n            result.add(\"Neptune\");\n            return result;\n        }\n        if (planet2.equals(\"Uranus\")) {\n            result.add(\"Neptune\");\n            return result;\n        }\n        if (planet1.equals(\"Neptune\")) {\n            result.add(\"Sun\");\n            return result;\n        }\n        if (planet2.equals(\"Neptune\")) {\n            result.add(\"Sun\");\n            return result;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> bf = new ArrayList<>();\n        if (planet1.equals(\"Sun\") || planet2.equals(\"Sun\")) {\n            return bf;\n        }\n        if (planet1.equals(\"Mercury\") || planet2.equals(\"Mercury\")) {\n            bf.add(\"Venus\");\n            return bf;\n        }\n        if (planet1.equals(\"Venus\") || planet2.equals(\"Venus\")) {\n            bf.add(\"Earth\");\n            return bf;\n        }\n        if (planet1.equals(\"Earth\") || planet2.equals(\"Earth\")) {\n            bf.add(\"Mars\");\n            return bf;\n        }\n        if (planet1.equals(\"Mars\") || planet2.equals(\"Mars\")) {\n            bf.add(\"Jupiter\");\n            return bf;\n        }\n        if (planet1.equals(\"Jupiter\") || planet2.equals(\"Jupiter\")) {\n            bf.add(\"Saturn\");\n            return bf;\n        }\n        if (planet1.equals(\"Saturn\") || planet2.equals(\"Saturn\")) {\n            bf.add(\"Uranus\");\n            return bf;\n        }\n        if (planet1.equals(\"Uranus\") || planet2.equals(\"Uranus\")) {\n            bf.add(\"Neptune\");\n            return bf;\n        }\n        return bf;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> bf = new ArrayList<String>();\n        bf.add(planet1);\n        bf.add(planet2);\n        return bf;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> bfList = new ArrayList<>();\n        if (planet1.equals(planet2)) {\n            return bfList;\n        }\n        if (planet1.compareTo(planet2) > 0) {\n            String temp = planet1;\n            planet1 = planet2;\n            planet2 = temp;\n        }\n        String[] planet1Arr = planet1.split(\" \");\n        String[] planet2Arr = planet2.split(\" \");\n        int[] planet1ArrInt = new int[planet1Arr.length];\n        int[] planet2ArrInt = new int[planet2Arr.length];\n        for (int i = 0; i < planet1Arr.length; i++) {\n            planet1ArrInt[i] = Integer.parseInt(planet1Arr[i]);\n        }\n        for (int i = 0; i < planet2Arr.length; i++) {\n            planet2ArrInt[i] = Integer.parseInt(planet2Arr[i]);\n        }\n        int[] orbit1 = new int[planet1ArrInt.length];\n        int[] orbit2 = new int[planet2ArrInt.length];\n        orbit1[0] = 0;\n        orbit2[0] = 0;\n        for (int i = 1; i < planet1ArrInt.length; i++) {\n            orbit1[i] = orbit1[i - 1] + planet1ArrInt[i - 1];\n        }\n        for (int i = 1; i < planet2ArrInt.length; i++) {\n            orbit2[i] = orbit2[i - 1] + planet2ArrInt[i - 1];\n        }\n        int[] orbit1Int = new int[orbit1.length];\n        int[] orbit2Int = new int[orbit2.length];\n        for (int i = 0; i < orbit1.length; i++) {\n            orbit1Int[i] = orbit1[i];\n        }\n        for (int i = 0; i < orbit2.length; i++) {\n            orbit2Int[i] = orbit2[i];\n        }\n        int[] orbit1Int2 = new int[orbit1Int.length];\n        int[] orbit2Int2 = new int[orbit2Int.length];\n        for (int i = 0; i < orbit1Int.length; i++) {\n            orbit1Int2[i] = orbit1Int[i];\n        }\n        for (int i = 0; i < orbit2Int.length; i++) {\n            orbit2Int2[i] = orbit2Int[i];\n        }\n        int[] orbit1Int3 = new int[orbit1Int2.length];\n        int[] orbit2Int3 = new int[orbit2Int2.length];\n        for (int i = 0; i < orbit1Int2.length; i++) {\n            orbit1Int3[i] = orbit1Int2[i];\n        }\n        for (int i = 0; i < orbit2Int2.length; i++) {\n            orbit2Int3[i] = orbit2Int2[i];\n        }\n        int[] orbit1Int4 = new int[orbit1Int3.length];\n        int[] orbit2Int4 = new int[orbit2Int3.length];\n        for (int i = 0; i < orbit1Int3.length; i++) {\n            orbit1Int4[i] = orbit1Int3[i];\n        }\n        for (int i = 0; i < orbit2Int3.length; i++) {\n            orbit2Int4[i] = orbit2Int3[i];\n        }\n        int[] orbit1Int5 = new int[orbit1Int4.length];\n        int[] orbit2Int5 = new int[orbit2Int4.length];\n        for (int i = 0; i < orbit1Int4.length; i++) {\n            orbit1Int5[i] = orbit1Int4[i];\n        }\n        for (int i = 0; i < orbit2Int4.length; i++) {\n            orbit2Int5[i] = orbit2Int4[i];\n        }\n        int[] orbit1Int6 = new int[orbit1Int5.length];\n        int[] orbit2Int6 = new int[orbit2Int5.length];\n        for (int i = 0; i < orbit1Int5.length; i++) {\n            orbit1Int6[i] = orbit1Int5[i];\n        }\n        for (int i = 0; i < orbit2Int5.length; i++) {\n            orbit2Int6[i] = orbit2Int5[i];\n        }\n        int[] orbit1Int7 = new int[orbit1Int6.length];\n        int[] orbit2Int7 = new int[orbit2Int6.length];\n        for (int i = 0; i < orbit1Int6.length; i++) {\n            orbit1Int7[i] = orbit1Int6[i];\n        }\n        for (int i = 0; i < orbit2Int6.length; i++) {\n            orbit2Int7[i] = orbit2Int6[i];\n        }\n        int[] orbit1Int8 = new int[orbit1Int7.length];\n        int[] orbit2Int8 = new int[orbit2Int7.length];\n        for (int i = 0; i < orbit1Int7.length; i++) {\n            orbit1Int8[i] = orbit1Int7[i];\n        }\n        for (int i = 0; i < orbit2Int7.length; i++) {\n            orbit2Int8[i] = orbit2Int7[i];\n        }\n        int[] orbit1Int9 = new int[orbit1Int8.length];\n        int[] orbit2Int9 = new int[orbit2Int8.length];\n        for (int i = 0; i < orbit1Int8.length; i++) {\n            orbit1Int9[i] = orbit1Int8[i];\n        }\n        for (int i = 0; i < orbit2Int8.length; i++) {\n            orbit2Int9[i] = orbit2Int8[i];\n        }\n        int[] orbit1Int10 = new int[orbit1Int9.length];\n        int[] orbit2Int10 = new int[orbit2Int9.length];\n        for (int i = 0; i < orbit1Int9.length; i++) {\n            orbit1Int10[i] = orbit1Int9[i];\n        }\n        for (int i = 0; i < orbit2Int9.length; i++) {\n            orbit2Int10[i] = orbit2Int9[i];\n        }\n        int[] orbit1Int11 = new int[orbit1Int10.length];\n        int[] orbit2Int11 = new int[orbit2Int10.length];\n        for (int i = 0; i < orbit1Int10.length; i++) {\n            orbit1Int11[i] = orbit1Int10[i];\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1 == null || planet1.equals(\"\")) {\n            return result;\n        }\n        if (planet2 == null || planet2.equals(\"\")) {\n            return result;\n        }\n        if (planet1.equals(planet2)) {\n            return result;\n        }\n        if (planet1.compareTo(planet2) > 0) {\n            String temp = planet1;\n            planet1 = planet2;\n            planet2 = temp;\n        }\n        String[] planet1Arr = planet1.split(\" \");\n        String[] planet2Arr = planet2.split(\" \");\n        int i = 0;\n        int j = 0;\n        while (i < planet1Arr.length && j < planet2Arr.length) {\n            if (planet1Arr[i].compareTo(planet2Arr[j]) > 0) {\n                j++;\n            } else if (planet1Arr[i].compareTo(planet2Arr[j]) < 0) {\n                i++;\n            } else {\n                result.add(planet1Arr[i]);\n                i++;\n                j++;\n            }\n        }\n        while (i < planet1Arr.length) {\n            result.add(planet1Arr[i]);\n            i++;\n        }\n        while (j < planet2Arr.length) {\n            result.add(planet2Arr[j]);\n            j++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1 == null || planet1.isEmpty() || planet2 == null || planet2.isEmpty()) {\n            return result;\n        }\n        if (planet1.equals(planet2)) {\n            return result;\n        }\n        String[] planets = planet1.split(\",\");\n        String[] planets2 = planet2.split(\",\");\n        for (int i = 0; i < planets.length; i++) {\n            for (int j = 0; j < planets2.length; j++) {\n                if (planets[i].equals(planets2[j])) {\n                    result.add(planets[i]);\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1.equals(\"Sun\") || planet2.equals(\"Sun\")) {\n            return result;\n        }\n        if (planet1.equals(\"Mercury\") || planet2.equals(\"Mercury\")) {\n            result.add(\"Venus\");\n            return result;\n        }\n        if (planet1.equals(\"Venus\") || planet2.equals(\"Venus\")) {\n            result.add(\"Earth\");\n            return result;\n        }\n        if (planet1.equals(\"Earth\") || planet2.equals(\"Earth\")) {\n            result.add(\"Mars\");\n            return result;\n        }\n        if (planet1.equals(\"Mars\") || planet2.equals(\"Mars\")) {\n            result.add(\"Jupiter\");\n            return result;\n        }\n        if (planet1.equals(\"Jupiter\") || planet2.equals(\"Jupiter\")) {\n            result.add(\"Saturn\");\n            return result;\n        }\n        if (planet1.equals(\"Saturn\") || planet2.equals(\"Saturn\")) {\n            result.add(\"Uranus\");\n            return result;\n        }\n        if (planet1.equals(\"Uranus\") || planet2.equals(\"Uranus\")) {\n            result.add(\"Neptune\");\n            return result;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1 == null || planet1.equals(\"\")) {\n            return result;\n        }\n        if (planet2 == null || planet2.equals(\"\")) {\n            return result;\n        }\n        if (planet1.equals(planet2)) {\n            return result;\n        }\n        if (planet1.equals(\"Sun\")) {\n            result.add(\"Mercury\");\n            result.add(\"Venus\");\n            result.add(\"Earth\");\n            result.add(\"Mars\");\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n            result.add(\"Neptune\");\n        } else {\n            String[] planet1Arr = planet1.split(\" \");\n            String[] planet2Arr = planet2.split(\" \");\n            int i = 0;\n            while (i < planet1Arr.length && i < planet2Arr.length) {\n                if (planet1Arr[i].equals(planet2Arr[i])) {\n                    result.add(planet1Arr[i]);\n                    i++;\n                } else if (planet1Arr[i].compareTo(planet2Arr[i]) > 0) {\n                    i++;\n                } else {\n                    result.add(planet2Arr[i]);\n                    i++;\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1 == null || planet1.isEmpty() || planet2 == null || planet2.isEmpty()) {\n            return result;\n        }\n        String[] planets = planet1.split(\",\");\n        String[] planets2 = planet2.split(\",\");\n        for (int i = 0; i < planets.length; i++) {\n            for (int j = 0; j < planets2.length; j++) {\n                if (planets[i].equals(planets2[j])) {\n                    result.add(planets[i]);\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> bf = new ArrayList<String>();\n        if (planet1.equals(\"Sun\") || planet2.equals(\"Sun\")) {\n            return bf;\n        }\n        if (planet1.equals(\"Mercury\") || planet2.equals(\"Mercury\")) {\n            bf.add(\"Venus\");\n            return bf;\n        }\n        if (planet1.equals(\"Venus\") || planet2.equals(\"Venus\")) {\n            bf.add(\"Earth\");\n            return bf;\n        }\n        if (planet1.equals(\"Earth\") || planet2.equals(\"Earth\")) {\n            bf.add(\"Mars\");\n            return bf;\n        }\n        if (planet1.equals(\"Mars\") || planet2.equals(\"Mars\")) {\n            bf.add(\"Jupiter\");\n            return bf;\n        }\n        if (planet1.equals(\"Jupiter\") || planet2.equals(\"Jupiter\")) {\n            bf.add(\"Saturn\");\n            return bf;\n        }\n        if (planet1.equals(\"Saturn\") || planet2.equals(\"Saturn\")) {\n            bf.add(\"Uranus\");\n            return bf;\n        }\n        if (planet1.equals(\"Uranus\") || planet2.equals(\"Uranus\")) {\n            bf.add(\"Neptune\");\n            return bf;\n        }\n        return bf;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1 == null || planet1.isEmpty() || planet2 == null || planet2.isEmpty()) {\n            return result;\n        }\n        String[] planets = {planet1, planet2};\n        Arrays.sort(planets);\n        for (int i = 0; i < planets.length; i++) {\n            if (planets[i].equals(\"Sun\")) {\n                continue;\n            }\n            String[] orbit = {planets[i], planets[(i + 1) % planets.length]};\n            if (bf(orbit[0], orbit[1])) {\n                result.add(orbit[0]);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> bf = new ArrayList<>();\n        if(planet1.equals(\"Sun\") || planet2.equals(\"Sun\")) {\n            return bf;\n        }\n        if(planet1.equals(\"Mercury\") || planet2.equals(\"Mercury\")) {\n            bf.add(\"Venus\");\n            return bf;\n        }\n        if(planet1.equals(\"Venus\") || planet2.equals(\"Venus\")) {\n            bf.add(\"Earth\");\n            return bf;\n        }\n        if(planet1.equals(\"Earth\") || planet2.equals(\"Earth\")) {\n            bf.add(\"Mars\");\n            return bf;\n        }\n        if(planet1.equals(\"Mars\") || planet2.equals(\"Mars\")) {\n            bf.add(\"Jupiter\");\n            return bf;\n        }\n        if(planet1.equals(\"Jupiter\") || planet2.equals(\"Jupiter\")) {\n            bf.add(\"Saturn\");\n            return bf;\n        }\n        if(planet1.equals(\"Saturn\") || planet2.equals(\"Saturn\")) {\n            bf.add(\"Uranus\");\n            return bf;\n        }\n        if(planet1.equals(\"Uranus\") || planet2.equals(\"Uranus\")) {\n            bf.add(\"Neptune\");\n            return bf;\n        }\n        return bf;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1 == null || planet2 == null) {\n            return result;\n        }\n        String[] planets = {planet1, planet2};\n        Arrays.sort(planets);\n        for (int i = 0; i < planets.length; i++) {\n            if (planets[i].equals(\"Sun\")) {\n                continue;\n            }\n            String[] orbit = {planets[i], planets[i + 1]};\n            if (isOrbit(orbit)) {\n                result.add(orbit[0]);\n            }\n        }\n        return result;\n    }\n\n    /**\n    Check if the orbit is valid.\n    */\n    private boolean isOrbit(String[] orbit) {\n        if (orbit.length != 2) {\n            return false;\n        }\n        String[] orbit1 = orbit[0].split(\" \");\n        String[] orbit2 = orbit[1].split(\" \");\n        if (orbit1.length != orbit2.length) {\n            return false;\n        }\n        for (int i = 0; i < orbit1.length; i++) {\n            if (!orbit1[i].equals(orbit2[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1 == null || planet1.isEmpty() || planet2 == null || planet2.isEmpty()) {\n            return result;\n        }\n        String[] planets = {planet1, planet2};\n        Arrays.sort(planets);\n        for (int i = 0; i < planets.length; i++) {\n            if (planets[i].equals(\"Sun\")) {\n                continue;\n            }\n            String[] orbit = planets[i].split(\"\\\\s+\");\n            String[] orbit2 = orbit[0].split(\"\\\\s+\");\n            String[] orbit3 = orbit2[0].split(\"\\\\s+\");\n            String[] orbit4 = orbit3[0].split(\"\\\\s+\");\n            String[] orbit5 = orbit4[0].split(\"\\\\s+\");\n            String[] orbit6 = orbit5[0].split(\"\\\\s+\");\n            String[] orbit7 = orbit6[0].split(\"\\\\s+\");\n            String[] orbit8 = orbit7[0].split(\"\\\\s+\");\n            if (orbit8[0].equals(orbit2[0])) {\n                continue;\n            }\n            if (orbit8[0].equals(orbit3[0])) {\n                continue;\n            }\n            if (orbit8[0].equals(orbit4[0])) {\n                continue;\n            }\n            if (orbit8[0].equals(orbit5[0])) {\n                continue;\n            }\n            if (orbit8[0].equals(orbit6[0])) {\n                continue;\n            }\n            if (orbit8[0].equals(orbit7[0])) {\n                continue;\n            }\n            if (orbit8[0].equals(orbit8[0])) {\n                result.add(planets[i]);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1 == null || planet2 == null) {\n            return result;\n        }\n        String[] planet1Arr = planet1.split(\" \");\n        String[] planet2Arr = planet2.split(\" \");\n        int[] planet1ArrInt = new int[planet1Arr.length];\n        int[] planet2ArrInt = new int[planet2Arr.length];\n        for (int i = 0; i < planet1Arr.length; i++) {\n            planet1ArrInt[i] = Integer.parseInt(planet1Arr[i]);\n        }\n        for (int i = 0; i < planet2Arr.length; i++) {\n            planet2ArrInt[i] = Integer.parseInt(planet2Arr[i]);\n        }\n        int[] distance = new int[planet1Arr.length];\n        for (int i = 0; i < planet1Arr.length; i++) {\n            distance[i] = Math.abs(planet1ArrInt[i] - planet2ArrInt[i]);\n        }\n        Arrays.sort(distance);\n        for (int i = 0; i < distance.length; i++) {\n            if (distance[i] == planet1ArrInt[i] || distance[i] == planet2ArrInt[i]) {\n                result.add(planet1Arr[i]);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<>();\n        if (planet1 == null || planet1.equals(\"\")) {\n            return result;\n        }\n        if (planet2 == null || planet2.equals(\"\")) {\n            return result;\n        }\n        if (planet1.equals(planet2)) {\n            return result;\n        }\n        if (planet1.compareTo(planet2) > 0) {\n            String temp = planet1;\n            planet1 = planet2;\n            planet2 = temp;\n        }\n        if (planet1.equals(\"Sun\")) {\n            result.add(\"Mercury\");\n            result.add(\"Venus\");\n            result.add(\"Earth\");\n            result.add(\"Mars\");\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n            result.add(\"Neptune\");\n        } else {\n            String[] planets = planet1.split(\",\");\n            for (String p : planets) {\n                if (p.equals(planet2)) {\n                    result.add(planet1);\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n        List<String> result = new ArrayList<String>();\n        if (planet1 == null || planet2 == null) {\n            return result;\n        }\n        if (planet1.equals(planet2)) {\n            return result;\n        }\n        if (planet1.equals(\"Sun\")) {\n            result.add(\"Mercury\");\n            result.add(\"Venus\");\n            result.add(\"Earth\");\n            result.add(\"Mars\");\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n            result.add(\"Neptune\");\n        } else if (planet2.equals(\"Sun\")) {\n            result.add(\"Mercury\");\n            result.add(\"Venus\");\n            result.add(\"Earth\");\n            result.add(\"Mars\");\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n            result.add(\"Uranus\");\n            result.add(\"Neptune\");\n        } else {\n            int i = 0;\n            while (i < 8) {\n                if (planet1.equals(Planet.planetNames[i])) {\n                    result.add(Planet.planetNames[i]);\n                }\n                i++;\n            }\n            i = 0;\n            while (i < 8) {\n                if (planet2.equals(Planet.planetNames[i])) {\n                    result.add(Planet.planetNames[i]);\n                }\n                i++;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        // Write your code here\n        List<String> result = new ArrayList<String>();\n        for (String s : lst) {\n            if (s.length() % 2 == 1) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        // write your code here\n        List<String> result = new ArrayList<String>();\n        for (String word : lst) {\n            if (word.length() % 2 == 1) {\n                result.add(word);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> sorted = new ArrayList<>();\n        for (String word : lst) {\n            if (word.length() % 2 == 1) {\n                sorted.add(word);\n            }\n        }\n        return sorted;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<String>();\n        for (String s : lst) {\n            if (s.length() % 2 == 1) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        // Write your code here\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            if (s.length() % 2 == 1) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            if (s.length() % 2 == 1) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String word : lst) {\n            if (word.length() % 2 == 1) {\n                result.add(word);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            if (s.length() % 2 == 1) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        // Write your code here\n        List<String> result = new ArrayList<>();\n        for (String word : lst) {\n            if (word.length() % 2 == 1) {\n                result.add(word);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            if (s.length() % 2 == 1) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            if (s.length() % 2 == 1) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            if (s.length() % 2 == 1) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String word : lst) {\n            if (word.length() % 2 == 1) {\n                result.add(word);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        // Write your code here\n        List<String> result = new ArrayList<>();\n        for (String word : lst) {\n            if (word.length() % 2 == 1) {\n                result.add(word);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String word : lst) {\n            if (word.length() % 2 == 1) {\n                result.add(word);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String word : lst) {\n            if (word.length() % 2 == 1) {\n                result.add(word);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<String>();\n        int len = 0;\n        for (String s : lst) {\n            len = s.length();\n            if (len % 2 != 0) {\n                result.add(s);\n            }\n        }\n        lst.removeAll(result);\n        lst.sort(new Comparator<String>() {\n            public int compare(String s1, String s2) {\n                return s1.length() - s2.length();\n            }\n        });\n        return lst;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String word : lst) {\n            if (word.length() % 2 == 1) {\n                result.add(word);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> result = new ArrayList<>();\n        for (String s : lst) {\n            if (s.length() % 2 == 1) {\n                result.add(s);\n            }\n        }\n        Collections.sort(result);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n        List<String> sorted = new ArrayList<>();\n        for (String word : lst) {\n            if (word.length() % 2 == 1) {\n                sorted.add(word);\n            }\n        }\n        Collections.sort(sorted);\n        return sorted;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n % 2 == 0) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n == 1) {\n            return x;\n        }\n        if (n % 2 == 0) {\n            return xOrY(n / 2, x, y);\n        }\n        return xOrY(n - 1, y, x);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n % 2 == 0) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n % 2 == 0) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n == 1) {\n            return x;\n        }\n        if (n % 2 == 0) {\n            return xOrY(n / 2, x, y);\n        }\n        return xOrY(n - 1, y, x);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n % 2 == 0) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n % 2 == 0) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n == 2) {\n            return x;\n        }\n        if (n % 2 == 0) {\n            return x;\n        }\n        if (n % 3 == 0) {\n            return y;\n        }\n        if (n % 5 == 0) {\n            return y;\n        }\n        if (n % 7 == 0) {\n            return x;\n        }\n        if (n % 11 == 0) {\n            return x;\n        }\n        if (n % 13 == 0) {\n            return y;\n        }\n        if (n % 17 == 0) {\n            return y;\n        }\n        if (n % 19 == 0) {\n            return x;\n        }\n        if (n % 23 == 0) {\n            return x;\n        }\n        if (n % 29 == 0) {\n            return y;\n        }\n        if (n % 31 == 0) {\n            return y;\n        }\n        if (n % 37 == 0) {\n            return x;\n        }\n        if (n % 41 == 0) {\n            return x;\n        }\n        if (n % 43 == 0) {\n            return y;\n        }\n        if (n % 47 == 0) {\n            return y;\n        }\n        if (n % 53 == 0) {\n            return x;\n        }\n        if (n % 59 == 0) {\n            return y;\n        }\n        if (n % 61 == 0) {\n            return y;\n        }\n        if (n % 67 == 0) {\n            return x;\n        }\n        if (n % 71 == 0) {\n            return x;\n        }\n        if (n % 73 == 0) {\n            return y;\n        }\n        if (n % 79 == 0) {\n            return y;\n        }\n        if (n % 83 == 0) {\n            return x;\n        }\n        if (n % 89 == 0) {\n            return y;\n        }\n        if (n % 97 == 0) {\n            return x;\n        }\n        if (n % 101 == 0) {\n            return x;\n        }\n        if (n % 103 == 0) {\n            return y;\n        }\n        if (n % 107 == 0) {\n            return y;\n        }\n        if (n % 109 == 0) {\n            return x;\n        }\n        if (n % 113 == 0) {\n            return x;\n        }\n        if (n % 127 == 0) {\n            return y;\n        }\n        if (n % 131 == 0) {\n            return y;\n        }\n        if (n % 137 == 0) {\n            return x;\n        }\n        if (n % 139 == 0) {\n            return y;\n        }\n        if (n % 149 == 0) {\n            return x;\n        }\n        if (n % 151 == 0) {\n            return x;\n        }\n        if (n % 157 == 0) {\n            return y;\n        }\n        if (n % 163 == 0) {\n            return y;\n        }\n        if (n % 167 == 0) {\n            return x;\n        }\n        if (n % 173 == 0) {\n            return x;\n        }\n        if (n % 179 == 0) {\n            return y;\n        }\n        if (n % 181 == 0) {\n            return y;\n        }\n        if (n % 191 == 0) {\n            return x;\n        }\n        if (n % 193 == 0) {\n            return y;\n        }\n        if (n % 197 == 0) {\n            return y;\n        }\n        if (n % 199 == 0) {\n            return x;\n        }\n        if (n % 211 == 0) {\n            return x;\n        }\n        if (n % 223 == 0) {\n            return y;\n        }\n        if (n % 227 == 0) {\n            return y;\n        }\n        if (n % 229 == 0) {\n            return x;\n        }\n        if (n % 233 == 0) {\n            return x;\n        }\n        if (n % 239 == 0) {\n            return y;\n        }\n        if (n % 241 == 0) {\n            return y;\n        }\n        if (n % 251 == 0) {\n            return x;\n        }\n        if (n % 257 == 0) {\n            return y;\n        }\n        if (n % 263 == 0) {\n            return y;\n        }\n        if (n % 269 == 0) {\n            return x;\n        }\n        if (n % 271 == 0) {\n            return x;\n        }\n        if (n % 277 == 0) {\n            return y;\n        }\n        if (n % 281 == 0) {\n            return x;\n        }\n        if (n % 283 == 0) {\n            return y;\n        }\n        if (n % 293 == 0) {\n            return x;\n        }\n        if (n % 307 == 0) {\n            return x;\n        }\n        if (n % 311 == 0) {\n            return y;\n        }\n        if (n % 313 == 0) {\n            return y;\n        }\n        if (n % 317 == 0) {\n            return y;\n        }\n        if (n % 331 == 0) {\n            return x;\n        }\n        if (n % 337 == 0) {\n            return y;\n        }\n        if (n % 347 == 0) {\n            return x;\n        }\n        if (n % 349 == 0) {\n            return y;\n        }\n        if (n % 353 == 0) {\n            return x;\n        }\n        if (n % 359 == 0) {\n            return y;\n        }\n        if (n % 367 == 0) {\n            return x;\n        }\n        if (n % 373 == 0) {\n            return y;\n        }\n        if (n % 379 == 0) {\n            return x;\n        }\n        if (n % 383 == 0) {\n            return y;\n        }\n        if (n % 389 == 0) {\n            return x;\n        }\n        if (n % 397 == 0) {\n            return y;\n        }\n        if (n % 401 == 0) {\n            return x;\n        }\n        if (n % 409 == 0) {\n            return y;\n        }\n        if (n % 419 == 0) {\n            return x;\n        }\n        if (n % 421 == 0) {\n            return y;\n        }\n        if (n % 431 == 0) {\n            return x;\n        }\n        if (n % 433 == 0) {\n            return y;\n        }\n        if (n % 439 == 0) {\n            return x;\n        }\n        if (n % 443 == 0) {\n            return x;\n        }\n        if (n % 449 == 0) {\n            return y;\n        }\n        if (n % 457 == 0) {\n            return x;\n        }\n        if (n % 461 == 0) {\n            return x;\n        }\n        if (n % 463 == 0) {\n            return y;\n        }\n        if (n % 467 == 0) {\n            return y;\n        }\n        if (n % 479 == 0) {\n            return x;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n % 2 == 0) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n == 2) {\n            return x;\n        }\n        if (n % 2 == 0) {\n            return x;\n        }\n        if (n % 3 == 0) {\n            return y;\n        }\n        if (n % 5 == 0) {\n            return x;\n        }\n        if (n % 7 == 0) {\n            return y;\n        }\n        if (n % 11 == 0) {\n            return x;\n        }\n        if (n % 13 == 0) {\n            return y;\n        }\n        if (n % 17 == 0) {\n            return x;\n        }\n        if (n % 19 == 0) {\n            return y;\n        }\n        if (n % 23 == 0) {\n            return x;\n        }\n        if (n % 29 == 0) {\n            return y;\n        }\n        if (n % 31 == 0) {\n            return x;\n        }\n        if (n % 37 == 0) {\n            return y;\n        }\n        if (n % 41 == 0) {\n            return x;\n        }\n        if (n % 43 == 0) {\n            return y;\n        }\n        if (n % 47 == 0) {\n            return x;\n        }\n        if (n % 53 == 0) {\n            return y;\n        }\n        if (n % 59 == 0) {\n            return x;\n        }\n        if (n % 61 == 0) {\n            return y;\n        }\n        if (n % 67 == 0) {\n            return x;\n        }\n        if (n % 71 == 0) {\n            return y;\n        }\n        if (n % 73 == 0) {\n            return x;\n        }\n        if (n % 79 == 0) {\n            return y;\n        }\n        if (n % 83 == 0) {\n            return x;\n        }\n        if (n % 89 == 0) {\n            return y;\n        }\n        if (n % 97 == 0) {\n            return x;\n        }\n        if (n % 101 == 0) {\n            return y;\n        }\n        if (n % 103 == 0) {\n            return x;\n        }\n        if (n % 107 == 0) {\n            return y;\n        }\n        if (n % 109 == 0) {\n            return x;\n        }\n        if (n % 113 == 0) {\n            return y;\n        }\n        if (n % 127 == 0) {\n            return x;\n        }\n        if (n % 131 == 0) {\n            return y;\n        }\n        if (n % 137 == 0) {\n            return x;\n        }\n        if (n % 139 == 0) {\n            return y;\n        }\n        if (n % 149 == 0) {\n            return x;\n        }\n        if (n % 151 == 0) {\n            return y;\n        }\n        if (n % 157 == 0) {\n            return x;\n        }\n        if (n % 163 == 0) {\n            return y;\n        }\n        if (n % 167 == 0) {\n            return x;\n        }\n        if (n % 173 == 0) {\n            return y;\n        }\n        if (n % 179 == 0) {\n            return x;\n        }\n        if (n % 181 == 0) {\n            return y;\n        }\n        if (n % 191 == 0) {\n            return x;\n        }\n        if (n % 193 == 0) {\n            return y;\n        }\n        if (n % 197 == 0) {\n            return x;\n        }\n        if (n % 199 == 0) {\n            return y;\n        }\n        if (n % 211 == 0) {\n            return x;\n        }\n        if (n % 223 == 0) {\n            return y;\n        }\n        if (n % 227 == 0) {\n            return x;\n        }\n        if (n % 229 == 0) {\n            return y;\n        }\n        if (n % 233 == 0) {\n            return x;\n        }\n        if (n % 239 == 0) {\n            return y;\n        }\n        if (n % 251 == 0) {\n            return x;\n        }\n        if (n % 257 == 0) {\n            return y;\n        }\n        if (n % 263 == 0) {\n            return x;\n        }\n        if (n % 269 == 0) {\n            return y;\n        }\n        if (n % 271 == 0) {\n            return x;\n        }\n        if (n % 277 == 0) {\n            return y;\n        }\n        if (n % 281 == 0) {\n            return x;\n        }\n        if (n % 283 == 0) {\n            return y;\n        }\n        if (n % 293 == 0) {\n            return x;\n        }\n        if (n % 307 == 0) {\n            return y;\n        }\n        if (n % 311 == 0) {\n            return x;\n        }\n        if (n % 313 == 0) {\n            return y;\n        }\n        if (n % 317 == 0) {\n            return x;\n        }\n        if (n % 331 == 0) {\n            return y;\n        }\n        if (n % 337 == 0) {\n            return x;\n        }\n        if (n % 347 == 0) {\n            return y;\n        }\n        if (n % 349 == 0) {\n            return x;\n        }\n        if (n % 353 == 0) {\n            return y;\n        }\n        if (n % 359 == 0) {\n            return x;\n        }\n        if (n % 367 == 0) {\n            return y;\n        }\n        if (n % 373 == 0) {\n            return x;\n        }\n        if (n % 379 == 0) {\n            return y;\n        }\n        if (n % 383 == 0) {\n            return x;\n        }\n        if (n % 389 == 0) {\n            return y;\n        }\n        if (n % 397 == 0) {\n            return x;\n        }\n        if (n % 401 == 0) {\n            return y;\n        }\n        if (n % 409 == 0) {\n            return x;\n        }\n        if (n % 419 == 0) {\n            return y;\n        }\n        if (n % 421 == 0) {\n            return x;\n        }\n        if (n % 431 == 0) {\n            return y;\n        }\n        if (n % 433 == 0) {\n            return x;\n        }\n        if (n % 439 == 0) {\n            return y;\n        }\n        if (n % 443 == 0) {\n            return x;\n        }\n        if (n % 449 == 0) {\n            return y;\n        }\n        if (n % 457 == 0) {\n            return x;\n        }\n        if (n % 461 == 0) {\n            return y;\n        }\n        if (n % 463 == 0) {\n            return x;\n        }\n        if (n % 467 == 0) {\n            return y;\n        }\n        if (n % 479 == 0) {\n            return x;\n        }\n        if (n % 487 == 0) {\n            return y;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n == 2) {\n            return x;\n        }\n        if (n == 3) {\n            return x ^ y;\n        }\n        if (n % 2 == 0) {\n            return x;\n        }\n        if (n % 3 == 0) {\n            return y;\n        }\n        if (n % 5 == 0) {\n            return x ^ y;\n        }\n        if (n % 7 == 0) {\n            return x ^ y;\n        }\n        if (n % 11 == 0) {\n            return x ^ y;\n        }\n        if (n % 13 == 0) {\n            return x ^ y;\n        }\n        if (n % 17 == 0) {\n            return x ^ y;\n        }\n        if (n % 19 == 0) {\n            return x ^ y;\n        }\n        if (n % 23 == 0) {\n            return x ^ y;\n        }\n        if (n % 29 == 0) {\n            return x ^ y;\n        }\n        if (n % 31 == 0) {\n            return x ^ y;\n        }\n        if (n % 37 == 0) {\n            return x ^ y;\n        }\n        if (n % 41 == 0) {\n            return x ^ y;\n        }\n        if (n % 43 == 0) {\n            return x ^ y;\n        }\n        if (n % 47 == 0) {\n            return x ^ y;\n        }\n        if (n % 53 == 0) {\n            return x ^ y;\n        }\n        if (n % 59 == 0) {\n            return x ^ y;\n        }\n        if (n % 61 == 0) {\n            return x ^ y;\n        }\n        if (n % 67 == 0) {\n            return x ^ y;\n        }\n        if (n % 71 == 0) {\n            return x ^ y;\n        }\n        if (n % 73 == 0) {\n            return x ^ y;\n        }\n        if (n % 79 == 0) {\n            return x ^ y;\n        }\n        if (n % 83 == 0) {\n            return x ^ y;\n        }\n        if (n % 89 == 0) {\n            return x ^ y;\n        }\n        if (n % 97 == 0) {\n            return x ^ y;\n        }\n        if (n % 101 == 0) {\n            return x ^ y;\n        }\n        if (n % 103 == 0) {\n            return x ^ y;\n        }\n        if (n % 107 == 0) {\n            return x ^ y;\n        }\n        if (n % 109 == 0) {\n            return x ^ y;\n        }\n        if (n % 113 == 0) {\n            return x ^ y;\n        }\n        if (n % 127 == 0) {\n            return x ^ y;\n        }\n        if (n % 131 == 0) {\n            return x ^ y;\n        }\n        if (n % 137 == 0) {\n            return x ^ y;\n        }\n        if (n % 139 == 0) {\n            return x ^ y;\n        }\n        if (n % 149 == 0) {\n            return x ^ y;\n        }\n        if (n % 151 == 0) {\n            return x ^ y;\n        }\n        if (n % 157 == 0) {\n            return x ^ y;\n        }\n        if (n % 163 == 0) {\n            return x ^ y;\n        }\n        if (n % 167 == 0) {\n            return x ^ y;\n        }\n        if (n % 173 == 0) {\n            return x ^ y;\n        }\n        if (n % 179 == 0) {\n            return x ^ y;\n        }\n        if (n % 181 == 0) {\n            return x ^ y;\n        }\n        if (n % 191 == 0) {\n            return x ^ y;\n        }\n        if (n % 193 == 0) {\n            return x ^ y;\n        }\n        if (n % 197 == 0) {\n            return x ^ y;\n        }\n        if (n % 199 == 0) {\n            return x ^ y;\n        }\n        if (n % 211 == 0) {\n            return x ^ y;\n        }\n        if (n % 223 == 0) {\n            return x ^ y;\n        }\n        if (n % 227 == 0) {\n            return x ^ y;\n        }\n        if (n % 229 == 0) {\n            return x ^ y;\n        }\n        if (n % 233 == 0) {\n            return x ^ y;\n        }\n        if (n % 239 == 0) {\n            return x ^ y;\n        }\n        if (n % 241 == 0) {\n            return x ^ y;\n        }\n        if (n % 251 == 0) {\n            return x ^ y;\n        }\n        if (n % 257 == 0) {\n            return x ^ y;\n        }\n        if (n % 263 == 0) {\n            return x ^ y;\n        }\n        if (n % 269 == 0) {\n            return x ^ y;\n        }\n        if (n % 271 == 0) {\n            return x ^ y;\n        }\n        if (n % 277 == 0) {\n            return x ^ y;\n        }\n        if (n % 281 == 0) {\n            return x ^ y;\n        }\n        if (n % 283 == 0) {\n            return x ^ y;\n        }\n        if (n % 293 == 0) {\n            return x ^ y;\n        }\n        if (n % 307 == 0) {\n            return x ^ y;\n        }\n        if (n % 311 == 0) {\n            return x ^ y;\n        }\n        if (n % 313 == 0) {\n            return x ^ y;\n        }\n        if (n % 317 == 0) {\n            return x ^ y;\n        }\n        if (n % 331 == 0) {\n            return x ^ y;\n        }\n        if (n % 337 == 0) {\n            return x ^ y;\n        }\n        if (n % 347 == 0) {\n            return x ^ y;\n        }\n        if (n % 349 == 0) {\n            return x ^ y;\n        }\n        if (n % 353 == 0) {\n            return x ^ y;\n        }\n        if (n % 359 == 0) {\n            return x ^ y;\n        }\n        if (n % 367 == 0) {\n            return x ^ y;\n        }\n        if (n % 373 == 0) {\n            return x ^ y;\n        }\n        if (n % 379 == 0) {\n            return x ^ y;\n        }\n        if (n % 383 == 0) {\n            return x ^ y;\n        }\n        if (n % 389 == 0) {\n            return x ^ y;\n        }\n        if (n % 397 == 0) {\n            return x ^ y;\n        }\n        if (n % 401 == 0) {\n            return x ^ y;\n        }\n        if (n % 409 == 0) {\n            return x ^ y;\n        }\n        if (n % 419 == 0) {\n            return x ^ y;\n        }\n        if (n % 421 == 0) {\n            return x ^ y;\n        }\n        if (n % 431 == 0) {\n            return x ^ y;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n % 2 == 0) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n % 2 == 0) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n % 2 == 0) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n % 2 == 0) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n % 2 == 0) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n % 2 == 0) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n % 2 == 0) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n % 2 == 0) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n        if (n % 2 == 0) {\n            return x;\n        } else {\n            return y;\n        }\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                int i = (int) o;\n                if (i % 2 == 1) {\n                    sum += i * i;\n                }\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                int i = (int) o;\n                if (i % 2 == 1) {\n                    sum += i * i;\n                }\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                int i = (int) o;\n                if (i % 2 == 1) {\n                    sum += i * i;\n                }\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                int i = (int) o;\n                if (i % 2 == 1) {\n                    sum += i * i;\n                }\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                int i = (int) o;\n                if (i % 2 != 0) {\n                    sum += i * i;\n                }\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                int num = (Integer) o;\n                if (num % 2 != 0) {\n                    sum += num * num;\n                }\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                int i = (int) o;\n                if (i % 2 == 1) {\n                    sum += i * i;\n                }\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                int i = (int) o;\n                if (i % 2 == 1) {\n                    sum += i * i;\n                }\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                int i = (int) o;\n                if (i % 2 == 1) {\n                    sum += i * i;\n                }\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                int i = (int) o;\n                if (i % 2 == 1) {\n                    sum += i * i;\n                }\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                int i = (int) o;\n                if (i % 2 != 0) {\n                    sum += i * i;\n                }\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                int i = (int) o;\n                if (i % 2 != 0) {\n                    sum += i * i;\n                }\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                int i = (Integer) o;\n                if (i % 2 == 1) {\n                    sum += i * i;\n                }\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                int i = (int) o;\n                if (i % 2 != 0) {\n                    sum += i * i;\n                }\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                int num = (int) o;\n                if (num % 2 == 1) {\n                    sum += num * num;\n                }\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                int i = (Integer) o;\n                if (i % 2 != 0) {\n                    sum += i * i;\n                }\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                int i = (Integer) o;\n                if (i % 2 == 1) {\n                    sum += i * i;\n                }\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                int i = (int) o;\n                if (i % 2 == 1) {\n                    sum += i * i;\n                }\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                int i = (Integer) o;\n                if (i % 2 == 1) {\n                    sum += i * i;\n                }\n            }\n        }\n        return sum;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n        int sum = 0;\n        for (Object o : lst) {\n            if (o instanceof Integer) {\n                int i = (int) o;\n                if (i % 2 == 1) {\n                    sum += i * i;\n                }\n            }\n        }\n        return sum;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> diff = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            diff.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return diff;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> answer = new ArrayList<>();\n        int len = game.size();\n        int[] score = new int[len];\n        int[] guessScore = new int[len];\n        for(int i = 0; i < len; i++) {\n            score[i] = game.get(i);\n            guessScore[i] = guess.get(i);\n        }\n        for(int i = 0; i < len; i++) {\n            if(guessScore[i] == score[i]) {\n                answer.add(0, 0);\n            } else {\n                answer.add(0, Math.abs(guessScore[i] - score[i]));\n            }\n        }\n        return answer;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        int[] gameScores = new int[game.size()];\n        int[] guessScores = new int[guess.size()];\n        for (int i = 0; i < game.size(); i++) {\n            gameScores[i] = game.get(i);\n        }\n        for (int i = 0; i < guess.size(); i++) {\n            guessScores[i] = guess.get(i);\n        }\n        int[] diff = new int[game.size()];\n        for (int i = 0; i < game.size(); i++) {\n            diff[i] = gameScores[i] - guessScores[i];\n        }\n        return Arrays.asList(diff);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> diff = new ArrayList<>();\n        for(int i = 0; i < game.size(); i++) {\n            diff.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return diff;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        int[] gameScore = new int[game.size()];\n        int[] guessScore = new int[guess.size()];\n        for (int i = 0; i < game.size(); i++) {\n            gameScore[i] = game.get(i);\n            guessScore[i] = guess.get(i);\n        }\n        Arrays.sort(gameScore);\n        Arrays.sort(guessScore);\n        int[] diff = new int[game.size()];\n        for (int i = 0; i < game.size(); i++) {\n            diff[i] = gameScore[i] - guessScore[i];\n        }\n        return Arrays.asList(diff);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> answer = new ArrayList<>();\n        int len = game.size();\n        for(int i=0;i<len;i++){\n            if(guess.get(i)==game.get(i)){\n                answer.add(0);\n            }else{\n                answer.add(Math.abs(guess.get(i)-game.get(i)));\n            }\n        }\n        return answer;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> diff = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            diff.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return diff;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        int[] gameScore = new int[game.size()];\n        int[] guessScore = new int[guess.size()];\n\n        for (int i = 0; i < game.size(); i++) {\n            gameScore[i] = game.get(i);\n        }\n\n        for (int i = 0; i < guess.size(); i++) {\n            guessScore[i] = guess.get(i);\n        }\n\n        int[] diff = new int[game.size()];\n        for (int i = 0; i < game.size(); i++) {\n            diff[i] = gameScore[i] - guessScore[i];\n        }\n\n        return Arrays.asList(diff);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> diff = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            diff.add(Math.abs(guess.get(i) - game.get(i)));\n        }\n        return diff;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        int[] scores = new int[game.size()];\n        int[] guesses = new int[guess.size()];\n        for (int i = 0; i < game.size(); i++) {\n            scores[i] = game.get(i);\n        }\n        for (int i = 0; i < guess.size(); i++) {\n            guesses[i] = guess.get(i);\n        }\n        int[] diff = new int[scores.length];\n        for (int i = 0; i < scores.length; i++) {\n            diff[i] = Math.abs(scores[i] - guesses[i]);\n        }\n        return diff;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> answer = new ArrayList<>();\n        int len = game.size();\n        int[] score = new int[len];\n        int[] guessScore = new int[len];\n        for(int i = 0; i < len; i++) {\n            score[i] = game.get(i);\n            guessScore[i] = guess.get(i);\n        }\n        for(int i = 0; i < len; i++) {\n            if(score[i] == guessScore[i]) {\n                answer.add(0, 0);\n            } else {\n                answer.add(0, Math.abs(score[i] - guessScore[i]));\n            }\n        }\n        return answer;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        int[] scores = new int[game.size()];\n        int[] guesses = new int[guess.size()];\n        for(int i = 0; i < game.size(); i++) {\n            scores[i] = game.get(i);\n        }\n        for(int i = 0; i < guess.size(); i++) {\n            guesses[i] = guess.get(i);\n        }\n        int[] diff = new int[game.size()];\n        for(int i = 0; i < game.size(); i++) {\n            diff[i] = Math.abs(scores[i] - guesses[i]);\n        }\n        return diff;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> diff = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            if (guess.get(i) == game.get(i)) {\n                diff.add(0, 0);\n            } else {\n                diff.add(0, Math.abs(guess.get(i) - game.get(i)));\n            }\n        }\n        return diff;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> diff = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            diff.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return diff;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> diff = new ArrayList<>();\n        int len = game.size();\n        for (int i = 0; i < len; i++) {\n            diff.add(Math.abs(guess.get(i) - game.get(i)));\n        }\n        return diff;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> diff = new ArrayList<>();\n        int len = game.size();\n        for (int i = 0; i < len; i++) {\n            int diff_i = Math.abs(guess.get(i) - game.get(i));\n            diff.add(diff_i);\n        }\n        return diff;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> answer = new ArrayList<>();\n        int len = game.size();\n        for (int i = 0; i < len; i++) {\n            if (guess.get(i) == game.get(i)) {\n                answer.add(0);\n            } else {\n                answer.add(Math.abs(guess.get(i) - game.get(i)));\n            }\n        }\n        return answer;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> diff = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            if (guess.get(i) == game.get(i)) {\n                diff.add(0, 0);\n            } else {\n                diff.add(0, Math.abs(guess.get(i) - game.get(i)));\n            }\n        }\n        return diff;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        List<Integer> diff = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            diff.add(Math.abs(guess.get(i) - game.get(i)));\n        }\n        return diff;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n        int[] gameScores = new int[game.size()];\n        int[] guessScores = new int[guess.size()];\n        for (int i = 0; i < game.size(); i++) {\n            gameScores[i] = game.get(i);\n        }\n        for (int i = 0; i < guess.size(); i++) {\n            guessScores[i] = guess.get(i);\n        }\n        int[] diff = new int[game.size()];\n        for (int i = 0; i < game.size(); i++) {\n            diff[i] = gameScores[i] - guessScores[i];\n        }\n        return Arrays.asList(diff);\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        String strongest_extension = \"\";\n        int strongest_extension_strength = 0;\n        for (String extension : extensions) {\n            int extension_strength = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    extension_strength += 1;\n                } else {\n                    extension_strength += 0;\n                }\n            }\n            if (extension_strength > strongest_extension_strength) {\n                strongest_extension = class_name + \".\" + extension;\n                strongest_extension_strength = extension_strength;\n            }\n        }\n        return strongest_extension;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        // Write your code here\n        String strongest_extension = \"\";\n        int strongest_extension_strength = 0;\n        for (String extension : extensions) {\n            int extension_strength = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    extension_strength += 1;\n                } else {\n                    extension_strength += 0;\n                }\n            }\n            if (extension_strength > strongest_extension_strength) {\n                strongest_extension = extension;\n                strongest_extension_strength = extension_strength;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        // Write your code here\n        String strongest_extension = \"\";\n        int strongest_extension_strength = 0;\n        for (String extension : extensions) {\n            int extension_strength = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    extension_strength++;\n                } else {\n                    extension_strength--;\n                }\n            }\n            if (extension_strength > strongest_extension_strength) {\n                strongest_extension = extension;\n                strongest_extension_strength = extension_strength;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        String strongest_extension = \"\";\n        int strongest_extension_strength = -1;\n        for (String extension : extensions) {\n            int extension_strength = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    extension_strength += 1;\n                } else {\n                    extension_strength += 0;\n                }\n            }\n            if (extension_strength > strongest_extension_strength) {\n                strongest_extension = class_name + \".\" + extension;\n                strongest_extension_strength = extension_strength;\n            }\n        }\n        return strongest_extension;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        // Write your code here\n        String strongest_extension = \"\";\n        int strongest_extension_strength = 0;\n        for (String extension : extensions) {\n            int extension_strength = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    extension_strength++;\n                } else {\n                    extension_strength--;\n                }\n            }\n            if (extension_strength > strongest_extension_strength) {\n                strongest_extension = extension;\n                strongest_extension_strength = extension_strength;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        String strongest_extension = \"\";\n        int strongest_extension_strength = -1;\n        for (String extension : extensions) {\n            int extension_strength = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    extension_strength++;\n                } else {\n                    extension_strength--;\n                }\n            }\n            if (extension_strength > strongest_extension_strength) {\n                strongest_extension = class_name + \".\" + extension;\n                strongest_extension_strength = extension_strength;\n            }\n        }\n        return strongest_extension;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        String strongest_extension = \"\";\n        int strongest_extension_strength = -1;\n        for (String extension : extensions) {\n            int extension_strength = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    extension_strength++;\n                } else {\n                    extension_strength--;\n                }\n            }\n            if (extension_strength > strongest_extension_strength) {\n                strongest_extension = class_name + \".\" + extension;\n                strongest_extension_strength = extension_strength;\n            }\n        }\n        return strongest_extension;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        String strongest_extension = \"\";\n        int strongest_extension_strength = -1;\n        for (String extension : extensions) {\n            int extension_strength = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    extension_strength++;\n                } else {\n                    extension_strength--;\n                }\n            }\n            if (extension_strength > strongest_extension_strength) {\n                strongest_extension = class_name + \".\" + extension;\n                strongest_extension_strength = extension_strength;\n            }\n        }\n        return strongest_extension;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        String strongest_extension = \"\";\n        int strongest_extension_strength = 0;\n        for (String extension : extensions) {\n            int extension_strength = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    extension_strength++;\n                } else {\n                    extension_strength--;\n                }\n            }\n            if (extension_strength > strongest_extension_strength) {\n                strongest_extension = extension;\n                strongest_extension_strength = extension_strength;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        // Write your code here\n        String strongest_extension = \"\";\n        int strongest_extension_strength = 0;\n        for (String extension : extensions) {\n            int extension_strength = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    extension_strength++;\n                } else {\n                    extension_strength--;\n                }\n            }\n            if (extension_strength > strongest_extension_strength) {\n                strongest_extension = extension;\n                strongest_extension_strength = extension_strength;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        // Write your code here\n        String strongest_extension = \"\";\n        int strongest_extension_strength = 0;\n        for (String extension : extensions) {\n            int extension_strength = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    extension_strength++;\n                } else {\n                    extension_strength--;\n                }\n            }\n            if (extension_strength > strongest_extension_strength) {\n                strongest_extension = extension;\n                strongest_extension_strength = extension_strength;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        // Write your code here\n        String strongest_extension = \"\";\n        int strongest_extension_strength = 0;\n        for (String extension : extensions) {\n            int extension_strength = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    extension_strength++;\n                } else {\n                    extension_strength--;\n                }\n            }\n            if (extension_strength > strongest_extension_strength) {\n                strongest_extension = extension;\n                strongest_extension_strength = extension_strength;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        // Write your code here\n        String strongest_extension = \"\";\n        int strongest_extension_strength = 0;\n        for (String extension : extensions) {\n            int extension_strength = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    extension_strength++;\n                } else {\n                    extension_strength--;\n                }\n            }\n            if (extension_strength > strongest_extension_strength) {\n                strongest_extension = extension;\n                strongest_extension_strength = extension_strength;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        // Write your code here\n        String strongest_extension = \"\";\n        int strongest_extension_strength = 0;\n        for (String extension : extensions) {\n            int extension_strength = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    extension_strength += 1;\n                } else {\n                    extension_strength -= 1;\n                }\n            }\n            if (extension_strength > strongest_extension_strength) {\n                strongest_extension = class_name + \".\" + extension;\n                strongest_extension_strength = extension_strength;\n            }\n        }\n        return strongest_extension;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        String strongest_extension = \"\";\n        int strongest_extension_strength = -1;\n        for (String extension : extensions) {\n            int extension_strength = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    extension_strength += 1;\n                } else {\n                    extension_strength += 0;\n                }\n            }\n            if (extension_strength > strongest_extension_strength) {\n                strongest_extension = class_name + \".\" + extension;\n                strongest_extension_strength = extension_strength;\n            }\n        }\n        return strongest_extension;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        // Write your code here\n        String strongest_extension = \"\";\n        int strongest_extension_strength = 0;\n        for (String extension : extensions) {\n            int extension_strength = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    extension_strength++;\n                } else {\n                    extension_strength--;\n                }\n            }\n            if (extension_strength > strongest_extension_strength) {\n                strongest_extension = class_name + \".\" + extension;\n                strongest_extension_strength = extension_strength;\n            }\n        }\n        return strongest_extension;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        String strongest_extension = \"\";\n        int strongest_extension_strength = 0;\n        for (String extension : extensions) {\n            int extension_strength = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    extension_strength++;\n                } else {\n                    extension_strength--;\n                }\n            }\n            if (extension_strength > strongest_extension_strength) {\n                strongest_extension = class_name + \".\" + extension;\n                strongest_extension_strength = extension_strength;\n            }\n        }\n        return strongest_extension;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        // Write your code here\n        String strongest_extension = \"\";\n        int strongest_extension_strength = 0;\n        for (String extension : extensions) {\n            int extension_strength = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    extension_strength++;\n                } else {\n                    extension_strength--;\n                }\n            }\n            if (extension_strength > strongest_extension_strength) {\n                strongest_extension = extension;\n                strongest_extension_strength = extension_strength;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        // Write your code here\n        String strongest_extension = \"\";\n        int strongest_extension_strength = 0;\n        for (String extension : extensions) {\n            int extension_strength = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    extension_strength++;\n                } else {\n                    extension_strength--;\n                }\n            }\n            if (extension_strength > strongest_extension_strength) {\n                strongest_extension = extension;\n                strongest_extension_strength = extension_strength;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n        // Write your code here\n        String strongest_extension = \"\";\n        int strongest_extension_strength = 0;\n        for (String extension : extensions) {\n            int extension_strength = 0;\n            for (char c : extension.toCharArray()) {\n                if (Character.isUpperCase(c)) {\n                    extension_strength++;\n                } else {\n                    extension_strength--;\n                }\n            }\n            if (extension_strength > strongest_extension_strength) {\n                strongest_extension = extension;\n                strongest_extension_strength = extension_strength;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        // write your code here\n        String s1 = a;\n        String s2 = b;\n        String s3 = \"\";\n        String s4 = \"\";\n        String s5 = \"\";\n        String s6 = \"\";\n        String s7 = \"\";\n        String s8 = \"\";\n        String s9 = \"\";\n        String s10 = \"\";\n        String s11 = \"\";\n        String s12 = \"\";\n        String s13 = \"\";\n        String s14 = \"\";\n        String s15 = \"\";\n        String s16 = \"\";\n        String s17 = \"\";\n        String s18 = \"\";\n        String s19 = \"\";\n        String s20 = \"\";\n        String s21 = \"\";\n        String s22 = \"\";\n        String s23 = \"\";\n        String s24 = \"\";\n        String s25 = \"\";\n        String s26 = \"\";\n        String s27 = \"\";\n        String s28 = \"\";\n        String s29 = \"\";\n        String s30 = \"\";\n        String s31 = \"\";\n        String s32 = \"\";\n        String s33 = \"\";\n        String s34 = \"\";\n        String s35 = \"\";\n        String s36 = \"\";\n        String s37 = \"\";\n        String s38 = \"\";\n        String s39 = \"\";\n        String s40 = \"\";\n        String s41 = \"\";\n        String s42 = \"\";\n        String s43 = \"\";\n        String s44 = \"\";\n        String s45 = \"\";\n        String s46 = \"\";\n        String s47 = \"\";\n        String s48 = \"\";\n        String s49 = \"\";\n        String s50 = \"\";\n        String s51 = \"\";\n        String s52 = \"\";\n        String s53 = \"\";\n        String s54 = \"\";\n        String s55 = \"\";\n        String s56 = \"\";\n        String s57 = \"\";\n        String s58 = \"\";\n        String s59 = \"\";\n        String s60 = \"\";\n        String s61 = \"\";\n        String s62 = \"\";\n        String s63 = \"\";\n        String s64 = \"\";\n        String s65 = \"\";\n        String s66 = \"\";\n        String s67 = \"\";\n        String s68 = \"\";\n        String s69 = \"\";\n        String s70 = \"\";\n        String s71 = \"\";\n        String s72 = \"\";\n        String s73 = \"\";\n        String s74 = \"\";\n        String s75 = \"\";\n        String s76 = \"\";\n        String s77 = \"\";\n        String s78 = \"\";\n        String s79 = \"\";\n        String s80 = \"\";\n        String s81 = \"\";\n        String s82 = \"\";\n        String s83 = \"\";\n        String s84 = \"\";\n        String s85 = \"\";\n        String s86 = \"\";\n        String s87 = \"\";\n        String s88 = \"\";\n        String s89 = \"\";\n        String s90 = \"\";\n        String s91 = \"\";\n        String s92 = \"\";\n        String s93 = \"\";\n        String s94 = \"\";\n        String s95 = \"\";\n        String s96 = \"\";\n        String s97 = \"\";\n        String s98 = \"\";\n        String s99 = \"\";\n        String s100 = \"\";\n        String s101 = \"\";\n        String s102 = \"\";\n        String s103 = \"\";\n        String s104 = \"\";\n        String s105 = \"\";\n        String s106 = \"\";\n        String s107 = \"\";\n        String s108 = \"\";\n        String s109 = \"\";\n        String s110 = \"\";\n        String s111 = \"\";\n        String s112 = \"\";\n        String s113 = \"\";\n        String s114 = \"\";\n        String s115 = \"\";\n        String s116 = \"\";\n        String s117 = \"\";\n        String s118 = \"\";\n        String s119 = \"\";\n        String s120 = \"\";\n        String s121 = \"\";\n        String s122 = \"\";\n        String s123 = \"\";\n        String s124 = \"\";\n        String s125 = \"\";\n        String s126 = \"\";\n        String s127 = \"\";\n        String s128 = \"\";\n        String s129 = \"\";\n        String s130 = \"\";\n        String s131 = \"\";\n        String s132 = \"\";\n        String s133 = \"\";\n        String s134 = \"\";\n        String s135 = \"\";\n        String s136 = \"\";\n        String s137 = \"\";\n        String s138 = \"\";\n        String s139 = \"\";\n        String s140 = \"\";\n        String s141 = \"\";\n        String s142 = \"\";\n        String s143 = \"\";\n        String s144 = \"\";\n        String s145 = \"\";\n        String s146 = \"\";\n        String s147 = \"\";\n        String s148 = \"\";\n        String s149 = \"\";\n        String s150 = \"\";\n        String s151 = \"\";\n        String s152 = \"\";\n        String s153 = \"\";\n        String s154 = \"\";\n        String s155 = \"\";\n        String s156 = \"\";\n        String s157 = \"\";\n        String s158 = \"\";\n        String s159 = \"\";\n        String s160 = \"\";\n        String s161 = \"\";\n        String s162 = \"\";\n        String s163 = \"\";\n        String s164 = \"\";\n        String s165 = \"\";\n        String s166 = \"\";\n        String s167 = \"\";\n        String s168 = \"\";\n        String s169 = \"\";\n        String s170 = \"\";\n        String s171 = \"\";\n        String s172 = \"\";\n        String s173 = \"\";\n        String s174 = \"\";\n        String s175 = \"\";\n        String s176 = \"\";\n        String s177 = \"\";\n        String s178 = \"\";\n        String s179 = \"\";\n        String s180 = \"\";\n        String s181 = \"\";\n        String s182 = \"\";\n        String s183 = \"\";\n        String s184 = \"\";\n        String s185 = \"\";\n        String s186 = \"\";\n        String s187 = \"\";\n        String s188 = \"\";\n        String s189 = \"\";\n        String s190 = \"\";\n        String s191 = \"\";\n        String s192 = \"\";\n        String s193 = \"\";\n        String s194 = \"\";\n        String s195 = \"\";\n        String s196 = \"\";\n        String s197 = \"\";\n        String s198 = \"\";\n        String s199 = \"\";\n        String s200 = \"\";\n        String s201 = \"\";\n        String s202 = \"\";\n        String s203 = \"\";\n        String s204 = \"\";\n        String s205 = \"\";\n        String s206 = \"\";\n        String s207 = \"\";\n        String s208 = \"\";\n        String s209 = \"\";\n        String s210 = \"\";\n        String s211 = \"\";\n        String s212 = \"\";\n        String s213 = \"\";\n        String s214 = \"\";\n        String s215 = \"\";\n        String s216 = \"\";\n        String s217 = \"\";\n        String s218 = \"\";\n        String s219 = \"\";\n        String s220 = \"\";\n        String s221 = \"\";\n        String s222 = \"\";\n        String s223 = \"\";\n        String s224 = \"\";\n        String s225 = \"\";\n        String s226 = \"\";\n        String s227 = \"\";\n        String s228 = \"\";\n        String s229 = \"\";\n        String s230 = \"\";\n        String s231 = \"\";\n        String s232 = \"\";\n        String s233", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        String a1 = a.toLowerCase();\n        String b1 = b.toLowerCase();\n        String a2 = new StringBuilder(a1).reverse().toString();\n        String b2 = new StringBuilder(b1).reverse().toString();\n        if(a1.contains(b1) || a2.contains(b2))\n            return true;\n        else\n            return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        if(a.length() > b.length()) {\n            return false;\n        }\n        if(a.length() == b.length()) {\n            return a.equals(b);\n        }\n        char[] aArr = a.toCharArray();\n        char[] bArr = b.toCharArray();\n        int aIndex = 0;\n        int bIndex = 0;\n        while(aIndex < a.length() && bIndex < b.length()) {\n            if(aArr[aIndex] == bArr[bIndex]) {\n                aIndex++;\n                bIndex++;\n            } else if(aArr[aIndex] == bArr[bIndex] + 1) {\n                aIndex++;\n            } else {\n                bIndex++;\n            }\n        }\n        return aIndex == a.length() && bIndex == b.length();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        if(a.length() != b.length())\n            return false;\n        String s1 = a.toLowerCase();\n        String s2 = b.toLowerCase();\n        int i = 0;\n        while(i < s1.length() && i < s2.length()) {\n            if(s1.charAt(i) != s2.charAt(i))\n                return false;\n            i++;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        if(a.length() > b.length()) {\n            return false;\n        }\n        if(a.length() == b.length()) {\n            return true;\n        }\n        char[] aArr = a.toCharArray();\n        char[] bArr = b.toCharArray();\n        int i = 0;\n        int j = 0;\n        while(i < aArr.length && j < bArr.length) {\n            if(aArr[i] == bArr[j]) {\n                i++;\n                j++;\n            } else if(aArr[i] > bArr[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n        return i == aArr.length && j == bArr.length;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        if(a.length() != b.length())\n            return false;\n        if(a.equals(b))\n            return true;\n        char[] a_arr = a.toCharArray();\n        char[] b_arr = b.toCharArray();\n        Arrays.sort(a_arr);\n        Arrays.sort(b_arr);\n        for(int i = 0; i < a_arr.length; i++)\n            if(a_arr[i] != b_arr[i])\n                return false;\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        String[] aArr = a.split(\"\");\n        String[] bArr = b.split(\"\");\n        int aLen = aArr.length;\n        int bLen = bArr.length;\n        int i = 0;\n        int j = 0;\n        while(i < aLen && j < bLen){\n            if(aArr[i] == bArr[j]){\n                i++;\n                j++;\n            }\n            else if(aArr[i] == bArr[j] || aArr[i] == bArr[j] + bArr[j+1] || aArr[i] == bArr[j] + bArr[j-1]){\n                i++;\n                j++;\n            }\n            else{\n                return false;\n            }\n        }\n        return i == aLen && j == bLen;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        String[] aArr = a.split(\"\");\n        String[] bArr = b.split(\"\");\n        String[] cArr = new String[aArr.length];\n        for(int i = 0; i < aArr.length; i++) {\n            cArr[i] = aArr[i];\n        }\n        for(int i = 0; i < bArr.length; i++) {\n            for(int j = 0; j < aArr.length; j++) {\n                if(bArr[i].equals(aArr[j])) {\n                    cArr[j] = bArr[i];\n                    break;\n                }\n            }\n        }\n        for(int i = 0; i < cArr.length; i++) {\n            if(cArr[i].equals(b)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        String[] aArr = a.split(\"\");\n        String[] bArr = b.split(\"\");\n        int len = aArr.length;\n        int lenB = bArr.length;\n        int lenA = aArr.length;\n        int i = 0;\n        int j = 0;\n        while(i < lenA && j < lenB){\n            if(aArr[i] == bArr[j]){\n                i++;\n                j++;\n            }\n            else if(aArr[i] == bArr[j] || aArr[i] == bArr[j] + bArr[j+1] || aArr[i] == bArr[j] + bArr[j-1]){\n                i++;\n                j++;\n            }\n            else{\n                return false;\n            }\n        }\n        return i == lenA && j == lenB;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        if(a.length() > b.length()) {\n            return false;\n        }\n        char[] aChars = a.toCharArray();\n        char[] bChars = b.toCharArray();\n        int aIndex = 0;\n        int bIndex = 0;\n        while(aIndex < aChars.length && bIndex < bChars.length) {\n            if(aChars[aIndex] == bChars[bIndex]) {\n                aIndex++;\n                bIndex++;\n            } else if(aChars[aIndex] == bChars[bIndex] + 1) {\n                aIndex++;\n            } else {\n                bIndex++;\n            }\n        }\n        return aIndex == aChars.length && bIndex == bChars.length;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        if(a.length() > b.length()) {\n            return false;\n        }\n        if(a.length() == b.length()) {\n            return a.equals(b);\n        }\n        char[] aChars = a.toCharArray();\n        char[] bChars = b.toCharArray();\n        int i = 0;\n        int j = 0;\n        while(i < aChars.length && j < bChars.length) {\n            if(aChars[i] == bChars[j]) {\n                i++;\n                j++;\n            } else if(aChars[i] == bChars[j] + 1) {\n                i++;\n            } else if(aChars[i] == bChars[j] - 1) {\n                j++;\n            }\n        }\n        return i == aChars.length && j == bChars.length;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        if (a.length() > b.length()) {\n            return false;\n        }\n        if (a.length() == b.length()) {\n            return a.equals(b);\n        }\n        int[] a_arr = new int[26];\n        int[] b_arr = new int[26];\n        for (int i = 0; i < a.length(); i++) {\n            a_arr[a.charAt(i) - 'a']++;\n        }\n        for (int i = 0; i < b.length(); i++) {\n            b_arr[b.charAt(i) - 'a']++;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (a_arr[i] != b_arr[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        if (a.length() > b.length()) {\n            return false;\n        }\n        String s1 = a.substring(0, b.length());\n        String s2 = b.substring(0, a.length());\n        if (s1.equals(s2)) {\n            return true;\n        }\n        String s3 = a.substring(0, b.length() - 1);\n        String s4 = b.substring(1, b.length());\n        if (s3.equals(s4)) {\n            return true;\n        }\n        String s5 = a.substring(0, b.length() - 2);\n        String s6 = b.substring(2, b.length());\n        if (s5.equals(s6)) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        String[] aArr = a.split(\"\");\n        String[] bArr = b.split(\"\");\n        String[] cArr = new String[aArr.length];\n        for(int i = 0; i < aArr.length; i++) {\n            cArr[i] = aArr[i];\n        }\n        for(int i = 0; i < bArr.length; i++) {\n            for(int j = 0; j < aArr.length; j++) {\n                if(bArr[i].equals(aArr[j])) {\n                    cArr[j] = bArr[i];\n                    break;\n                }\n            }\n        }\n        for(int i = 0; i < cArr.length; i++) {\n            if(cArr[i].equals(b)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        String s1 = a.toLowerCase();\n        String s2 = b.toLowerCase();\n        String s3 = s1.substring(0, s2.length());\n        String s4 = s2.substring(0, s1.length());\n        return s3.equals(s4);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        if (a.length() > b.length()) {\n            return false;\n        }\n        String b1 = b.substring(0, b.length() - 1);\n        String b2 = b.substring(1, b.length());\n        if (a.contains(b1) || a.contains(b2)) {\n            return true;\n        }\n        String b3 = b.substring(0, b.length() - 1);\n        String b4 = b.substring(1, b.length() - 1);\n        if (a.contains(b3) || a.contains(b4)) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        int n = a.length();\n        int m = b.length();\n        if(n == 0 || m == 0) return false;\n        if(n == 1) return a.equals(b);\n        if(m == 1) return a.equals(b);\n        if(n == 2) {\n            if(a.charAt(0) == b.charAt(0)) return true;\n            if(a.charAt(0) == b.charAt(1)) return true;\n            if(a.charAt(1) == b.charAt(0)) return true;\n            if(a.charAt(1) == b.charAt(1)) return true;\n        }\n        if(n == 3) {\n            if(a.charAt(0) == b.charAt(0) && a.charAt(1) == b.charAt(1) && a.charAt(2) == b.charAt(2)) return true;\n        }\n        if(n == 4) {\n            if(a.charAt(0) == b.charAt(0) && a.charAt(1) == b.charAt(1) && a.charAt(2) == b.charAt(2) && a.charAt(3) == b.charAt(3)) return true;\n        }\n        if(n == 5) {\n            if(a.charAt(0) == b.charAt(0) && a.charAt(1) == b.charAt(1) && a.charAt(2) == b.charAt(2) && a.charAt(3) == b.charAt(3) && a.charAt(4) == b.charAt(4)) return true;\n        }\n        if(n == 6) {\n            if(a.charAt(0) == b.charAt(0) && a.charAt(1) == b.charAt(1) && a.charAt(2) == b.charAt(2) && a.charAt(3) == b.charAt(3) && a.charAt(4) == b.charAt(4) && a.charAt(5) == b.charAt(5)) return true;\n        }\n        if(n == 7) {\n            if(a.charAt(0) == b.charAt(0) && a.charAt(1) == b.charAt(1) && a.charAt(2) == b.charAt(2) && a.charAt(3) == b.charAt(3) && a.charAt(4) == b.charAt(4) && a.charAt(5) == b.charAt(5) && a.charAt(6) == b.charAt(6)) return true;\n        }\n        if(n == 8) {\n            if(a.charAt(0) == b.charAt(0) && a.charAt(1) == b.charAt(1) && a.charAt(2) == b.charAt(2) && a.charAt(3) == b.charAt(3) && a.charAt(4) == b.charAt(4) && a.charAt(5) == b.charAt(5) && a.charAt(6) == b.charAt(6) && a.charAt(7) == b.charAt(7)) return true;\n        }\n        if(n == 9) {\n            if(a.charAt(0) == b.charAt(0) && a.charAt(1) == b.charAt(1) && a.charAt(2) == b.charAt(2) && a.charAt(3) == b.charAt(3) && a.charAt(4) == b.charAt(4) && a.charAt(5) == b.charAt(5) && a.charAt(6) == b.charAt(6) && a.charAt(7) == b.charAt(7) && a.charAt(8) == b.charAt(8)) return true;\n        }\n        if(n == 10) {\n            if(a.charAt(0) == b.charAt(0) && a.charAt(1) == b.charAt(1) && a.charAt(2) == b.charAt(2) && a.charAt(3) == b.charAt(3) && a.charAt(4) == b.charAt(4) && a.charAt(5) == b.charAt(5) && a.charAt(6) == b.charAt(6) && a.charAt(7) == b.charAt(7) && a.charAt(8) == b.charAt(8) && a.charAt(9) == b.charAt(9)) return true;\n        }\n        if(n == 11) {\n            if(a.charAt(0) == b.charAt(0) && a.charAt(1) == b.charAt(1) && a.charAt(2) == b.charAt(2) && a.charAt(3) == b.charAt(3) && a.charAt(4) == b.charAt(4) && a.charAt(5) == b.charAt(5) && a.charAt(6) == b.charAt(6) && a.charAt(7) == b.charAt(7) && a.charAt(8) == b.charAt(8) && a.charAt(9) == b.charAt(9) && a.charAt(10) == b.charAt(10)) return true;\n        }\n        if(n == 12) {\n            if(a.charAt(0) == b.charAt(0) && a.charAt(1) == b.charAt(1) && a.charAt(2) == b.charAt(2) && a.charAt(3) == b.charAt(3) && a.charAt(4) == b.charAt(4) && a.charAt(5) == b.charAt(5) && a.charAt(6) == b.charAt(6) && a.charAt(7) == b.charAt(7) && a.charAt(8) == b.charAt(8) && a.charAt(9) == b.charAt(9) && a.charAt(10) == b.charAt(10) && a.charAt(11) == b.charAt(11)) return true;\n        }\n        if(n == 13) {\n            if(a.charAt(0) == b.charAt(0) && a.charAt(1) == b.charAt(1) && a.charAt(2) == b.charAt(2) && a.charAt(3) == b.charAt(3) && a.charAt(4) == b.charAt(4) && a.charAt(5) == b.charAt(5) && a.charAt(6) == b.charAt(6) && a.charAt(7) == b.charAt(7) && a.charAt(8) == b.charAt(8) && a.charAt(9) == b.charAt(9) && a.charAt(10) == b.charAt(10) && a.charAt(11) == b.charAt(11) && a.charAt(12) == b.charAt(12)) return true;\n        }", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        if(a.length() > b.length()) {\n            return false;\n        }\n        String c = a.substring(0, b.length());\n        String d = a.substring(b.length());\n        if(c.equals(d)) {\n            return true;\n        }\n        String e = a.substring(0, b.length());\n        String f = a.substring(b.length(), a.length());\n        if(e.equals(f)) {\n            return true;\n        }\n        String g = a.substring(0, b.length());\n        String h = a.substring(b.length(), a.length());\n        if(g.equals(h)) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        if(a.length() > b.length())\n            return false;\n        String b1 = b.substring(0, b.length()-1);\n        String b2 = b.substring(b.length()-1, b.length());\n        String a1 = a.substring(0, a.length()-1);\n        String a2 = a.substring(a.length()-1, a.length());\n        if(a1.equals(b1) || a2.equals(b2) || a1.equals(b2) || a2.equals(b1))\n            return true;\n        else\n            return cycpatternCheck(a1, b1) || cycpatternCheck(a2, b2);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n        String s1 = a.toLowerCase();\n        String s2 = b.toLowerCase();\n        if(s1.length() > s2.length()) {\n            return false;\n        }\n        int i = 0;\n        while(i < s1.length() && i < s2.length()) {\n            if(s1.charAt(i) == s2.charAt(i)) {\n                i++;\n            } else {\n                break;\n            }\n        }\n        return i == s1.length();\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        int count = 0;\n        while (num != 0) {\n            if (num % 2 == 0) {\n                count++;\n            } else {\n                count--;\n            }\n            num /= 2;\n        }\n        result.add(count);\n        result.add(num);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        int count = 0;\n        while (num != 0) {\n            if (num % 2 == 0) {\n                count++;\n            }\n            num /= 2;\n        }\n        result.add(count);\n        count = 0;\n        while (num != 0) {\n            if (num % 2 != 0) {\n                count++;\n            }\n            num /= 2;\n        }\n        result.add(count);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        int even = 0;\n        int odd = 0;\n        while (num != 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n            num /= 10;\n        }\n        result.add(even);\n        result.add(odd);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        int count = 0;\n        while (num != 0) {\n            if (num % 2 == 0) {\n                count++;\n            }\n            num /= 2;\n        }\n        result.add(count);\n        num = num % 10;\n        while (num != 0) {\n            if (num % 2 == 1) {\n                count++;\n            }\n            num /= 2;\n        }\n        result.add(count);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        int count = 0;\n        while (num != 0) {\n            if (num % 2 == 0) {\n                count++;\n            }\n            num /= 2;\n        }\n        result.add(count);\n        count = 0;\n        while (num != 0) {\n            if (num % 2 != 0) {\n                count++;\n            }\n            num /= 2;\n        }\n        result.add(count);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        int count = 0;\n        while (num != 0) {\n            count++;\n            num /= 10;\n        }\n        result.add(count);\n        count = 0;\n        while (num != 0) {\n            count++;\n            num = num % 10;\n        }\n        result.add(count);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        int count = 0;\n        while (num != 0) {\n            count++;\n            num = num / 10;\n        }\n        result.add(count);\n        num = num % 10;\n        while (num != 0) {\n            count++;\n            num = num * 2;\n        }\n        result.add(count);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        int count = 0;\n        while (num != 0) {\n            num = num / 10;\n            count++;\n        }\n        result.add(count);\n        num = num % 10;\n        count = 0;\n        while (num != 0) {\n            num = num / 10;\n            count++;\n        }\n        result.add(count);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        int count = 0;\n        while (num != 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n                count++;\n            }\n            num /= 10;\n        }\n        result.add(count);\n        result.add(num);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<Integer>();\n        int even = 0;\n        int odd = 0;\n        while(num > 0) {\n            if(num % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n            num /= 2;\n        }\n        result.add(even);\n        result.add(odd);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        int count = 0;\n        while (num != 0) {\n            num = num / 10;\n            count++;\n        }\n        result.add(count);\n        count = 0;\n        while (num != 0) {\n            num = num % 10;\n            count++;\n        }\n        result.add(count);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        int even = 0;\n        int odd = 0;\n        while (num != 0) {\n            if (num % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n            num /= 2;\n        }\n        result.add(even);\n        result.add(odd);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        if (num < 0) {\n            result.add(0);\n            result.add(0);\n        } else {\n            int count = 0;\n            while (num != 0) {\n                num = num / 10;\n                count++;\n            }\n            result.add(count);\n            result.add(num);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<Integer>();\n        int count = 0;\n        while (num != 0) {\n            if (num % 2 == 0) {\n                count++;\n            } else {\n                count--;\n            }\n            num /= 2;\n        }\n        result.add(count);\n        result.add(num);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        int count = 0;\n        while(num != 0) {\n            if(num % 2 == 0) {\n                count++;\n            } else {\n                count--;\n            }\n            num /= 2;\n        }\n        result.add(count);\n        result.add(num);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        int count = 0;\n        while (num != 0) {\n            if (num % 2 == 0) {\n                count++;\n            } else {\n                count--;\n            }\n            num /= 2;\n        }\n        result.add(count);\n        result.add(num);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        int count = 0;\n        while (num != 0) {\n            if (num % 2 == 0) {\n                count++;\n            } else {\n                count--;\n            }\n            num = num / 2;\n        }\n        result.add(count);\n        result.add(num);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        int count = 0;\n        while(num != 0) {\n            if(num % 2 == 0) {\n                count++;\n            } else {\n                count--;\n            }\n            num /= 2;\n        }\n        result.add(count);\n        result.add(num);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<>();\n        int count = 0;\n        while (num != 0) {\n            if (num % 2 == 0) {\n                count++;\n            }\n            num = num / 2;\n        }\n        result.add(count);\n        result.add(num);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n        List<Integer> result = new ArrayList<Integer>();\n        int even = 0;\n        int odd = 0;\n        while(num != 0) {\n            if(num % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n            num = num / 2;\n        }\n        result.add(even);\n        result.add(odd);\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String[] roman2 = {\"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\"};\n        String[] roman3 = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String[] roman4 = {\"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\"};\n        String[] roman5 = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String[] roman6 = {\"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\"};\n        String[] roman7 = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String[] roman8 = {\"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\"};\n        String[] roman9 = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String[] roman10 = {\"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\"};\n        String[] roman11 = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String[] roman12 = {\"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\"};\n        String[] roman13 = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String[] roman14 = {\"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\"};\n        String[] roman15 = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String[] roman16 = {\"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\"};\n        String[] roman17 = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String[] roman18 = {\"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\"};\n        String[] roman19 = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String[] roman20 = {\"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\"};\n        String[] roman21 = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String[] roman22 = {\"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\"};\n        String[] roman23 = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String[] roman24 = {\"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\"};\n        String[] roman25 = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String[] roman26 = {\"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\"};\n        String[] roman27 = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String[] roman28 = {\"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\"};\n        String[] roman29 = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String[] roman30 = {\"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\"};\n        String[] roman31 = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String[] roman32 = {\"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\"};\n        String[] roman33 = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String[] roman34 = {\"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\"};\n        String[] roman35 = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String[] roman36 = {\"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\"};\n        String[] roman37 = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String[] roman38 = {\"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\"};\n        String[] roman39 = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String[] roman40 = {\"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\"};\n        String[] roman41 = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String[] roman42 = {\"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\"};\n        String[] roman43 = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String[] roman44 = {\"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\"};\n        String[] roman45 = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String[] roman46 = {\"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\"};\n        String[] roman47 = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String romanString = \"\";\n        int i = 0;\n        while (number > 0) {\n            while (number >= 1000) {\n                number -= 1000;\n                romanString += roman[i];\n            }\n            romanString += roman[i];\n            number = number % 1000;\n            i++;\n        }\n        return romanString.toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String romanString = \"\";\n        while (number > 0) {\n            int remainder = number % 10;\n            number = number / 10;\n            romanString = roman[remainder] + romanString;\n        }\n        return romanString.toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String[] roman2 = {\"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\"};\n        String[] roman3 = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String[] roman4 = {\"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\"};\n        String[] roman5 = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String[] roman6 = {\"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\"};\n        String[] roman7 = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String[] roman8 = {\"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\"};\n        String[] roman9 = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String[] roman10 = {\"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\"};\n        String[] roman11 = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String[] roman12 = {\"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\"};\n        String[] roman13 = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String[] roman14 = {\"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\"};\n        String[] roman15 = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String[] roman16 = {\"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\"};\n        String[] roman17 = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String[] roman18 = {\"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\"};\n        String[] roman19 = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String[] roman20 = {\"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\"};\n        String[] roman21 = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String[] roman22 = {\"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\"};\n        String[] roman23 = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String[] roman24 = {\"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\"};\n        String[] roman25 = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String[] roman26 = {\"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\"};\n        String[] roman27 = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String[] roman28 = {\"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\"};\n        String[] roman29 = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String[] roman30 = {\"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\"};\n        String[] roman31 = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String[] roman32 = {\"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\"};\n        String[] roman33 = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String[] roman34 = {\"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\"};\n        String[] roman35 = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String[] roman36 = {\"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\"};\n        String[] roman37 = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String[] roman38 = {\"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\"};\n        String[] roman39 = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String[] roman40 = {\"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\"};\n        String[] roman41 = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String[] roman42 = {\"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\"};\n        String[] roman43 = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String[] roman44 = {\"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\"};\n        String[] roman45 = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String[] roman46 = {\"M\", \"D\", \"C\", \"L\", \"X\", \"V\", \"I\"};\n        String[] roman47 = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String[] roman2 = {\"M\", \"MM\", \"MMM\"};\n        String[] roman3 = {\"M\", \"MM\", \"MMM\", \"MMMM\"};\n        String[] roman4 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\"};\n        String[] roman5 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\"};\n        String[] roman6 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\"};\n        String[] roman7 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\"};\n        String[] roman8 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\"};\n        String[] roman9 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\"};\n        String[] roman10 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\", \"MMMMMMMMMMM\"};\n        String[] roman11 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\", \"MMMMMMMMMMM\", \"MMMMMMMMMMMM\"};\n        String[] roman12 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\", \"MMMMMMMMMMM\", \"MMMMMMMMMMMM\", \"MMMMMMMMMMMMM\"};\n        String[] roman13 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\", \"MMMMMMMMMMM\", \"MMMMMMMMMMMM\", \"MMMMMMMMMMMMM\", \"MMMMMMMMMMMMMM\"};\n        String[] roman14 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\", \"MMMMMMMMMMM\", \"MMMMMMMMMMMM\", \"MMMMMMMMMMMMM\", \"MMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMM\"};\n        String[] roman15 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\", \"MMMMMMMMMMM\", \"MMMMMMMMMMMM\", \"MMMMMMMMMMMMM\", \"MMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMM\"};\n        String[] roman16 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\", \"MMMMMMMMMMM\", \"MMMMMMMMMMMM\", \"MMMMMMMMMMMMM\", \"MMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMM\"};\n        String[] roman17 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\", \"MMMMMMMMMMM\", \"MMMMMMMMMMMM\", \"MMMMMMMMMMMMM\", \"MMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMM\"};\n        String[] roman18 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\", \"MMMMMMMMMMM\", \"MMMMMMMMMMMM\", \"MMMMMMMMMMMMM\", \"MMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMM\"};\n        String[] roman19 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\", \"MMMMMMMMMMM\", \"MMMMMMMMMMMM\", \"MMMMMMMMMMMMM\", \"MMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMMM\"};\n        String[] roman20 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\", \"MMMMMMMMMMM\", \"MMMMMMMMMMMM\", \"MMMMMMMMMMMMM\", \"MMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMMMMM\"};\n        String[] roman21 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\", \"MMMMMMMMMMM\", \"MMMMMMMMMMMM\", \"MMMMMMMMMMMMM\", \"MMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMMMMMM\"};\n        String[] roman22 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\", \"MMMMMMMMMMM\", \"MMMMMMMMMMMM\", \"MMMMMMMMMMMMM\", \"MMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMMMMMMM\"};\n        String[] roman23 = {};\n        String[] roman24 = {}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"};\n        String result = \"\";\n        while (number > 0) {\n            int digit = number % 10;\n            number /= 10;\n            result = roman[digit] + result;\n        }\n        return result.toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String romanString = \"\";\n        int i = 0;\n        while (number > 0) {\n            romanString += roman[i];\n            number -= roman[i];\n            i++;\n        }\n        return romanString.toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"};\n        String romanString = \"\";\n        int i = 0;\n        while (number > 0) {\n            int remainder = number % 10;\n            number /= 10;\n            romanString = roman[i] + romanString;\n            if (number > 0) {\n                romanString = roman[i] + romanString;\n            }\n            i++;\n        }\n        return romanString.toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String romanString = \"\";\n        int i = 0;\n        while (number > 0) {\n            int remainder = number % 10;\n            number = number / 10;\n            romanString = roman[i] + romanString;\n            if (number > 0) {\n                romanString = roman[i] + romanString;\n            }\n            i++;\n        }\n        return romanString.toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String[] roman2 = {\"M\", \"MM\", \"MMM\"};\n        String[] roman3 = {\"M\", \"MM\", \"MMM\", \"MMMM\"};\n        String[] roman4 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\"};\n        String[] roman5 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\"};\n        String[] roman6 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\"};\n        String[] roman7 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\"};\n        String[] roman8 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\"};\n        String[] roman9 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\"};\n        String[] roman10 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\", \"MMMMMMMMMMM\"};\n        String[] roman11 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\", \"MMMMMMMMMMM\", \"MMMMMMMMMMMM\"};\n        String[] roman12 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\", \"MMMMMMMMMMM\", \"MMMMMMMMMMMM\", \"MMMMMMMMMMMMM\"};\n        String[] roman13 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\", \"MMMMMMMMMMM\", \"MMMMMMMMMMMM\", \"MMMMMMMMMMMMM\", \"MMMMMMMMMMMMMM\"};\n        String[] roman14 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\", \"MMMMMMMMMMM\", \"MMMMMMMMMMMM\", \"MMMMMMMMMMMMM\", \"MMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMM\"};\n        String[] roman15 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\", \"MMMMMMMMMMM\", \"MMMMMMMMMMMM\", \"MMMMMMMMMMMMM\", \"MMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMM\"};\n        String[] roman16 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\", \"MMMMMMMMMMM\", \"MMMMMMMMMMMM\", \"MMMMMMMMMMMMM\", \"MMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMM\"};\n        String[] roman17 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\", \"MMMMMMMMMMM\", \"MMMMMMMMMMMM\", \"MMMMMMMMMMMMM\", \"MMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMM\"};\n        String[] roman18 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\", \"MMMMMMMMMMM\", \"MMMMMMMMMMMM\", \"MMMMMMMMMMMMM\", \"MMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMM\"};\n        String[] roman19 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\", \"MMMMMMMMMMM\", \"MMMMMMMMMMMM\", \"MMMMMMMMMMMMM\", \"MMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMM\"}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"};\n        String[] roman2 = {\"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"};\n        String[] roman3 = {\"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman4 = {\"M\", \"MM\", \"MMM\"};\n        String[] roman5 = {\"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman6 = {\"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman7 = {\"M\", \"MM\", \"MMM\"};\n        String[] roman8 = {\"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman9 = {\"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman10 = {\"M\", \"MM\", \"MMM\"};\n        String[] roman11 = {\"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman12 = {\"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman13 = {\"M\", \"MM\", \"MMM\"};\n        String[] roman14 = {\"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman15 = {\"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman16 = {\"M\", \"MM\", \"MMM\"};\n        String[] roman17 = {\"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman18 = {\"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman19 = {\"M\", \"MM\", \"MMM\"};\n        String[] roman20 = {\"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman21 = {\"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman22 = {\"M\", \"MM\", \"MMM\"};\n        String[] roman23 = {\"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman24 = {\"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman25 = {\"M\", \"MM\", \"MMM\"};\n        String[] roman26 = {\"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman27 = {\"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman28 = {\"M\", \"MM\", \"MMM\"};\n        String[] roman29 = {\"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman30 = {\"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman31 = {\"M\", \"MM\", \"MMM\"};\n        String[] roman32 = {\"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman33 = {\"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman34 = {\"M\", \"MM\", \"MMM\"};\n        String[] roman35 = {\"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman36 = {\"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman37 = {\"M\", \"MM\", \"MMM\"};\n        String[] roman38 = {\"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman39 = {\"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman40 = {\"M\", \"MM\", \"MMM\"};\n        String[] roman41 = {\"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman42 = {\"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman43 = {\"M\", \"MM\", \"MMM\"};\n        String[] roman44 = {\"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman45 = {\"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman46 = {\"M\", \"MM\", \"MMM\"};\n        String[] roman47 = {\"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman48 = {\"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman49 = {\"M\", \"MM\", \"MMM\"};\n        String[] roman50 = {\"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman51 = {\"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman52 = {\"M\", \"MM\", \"MMM\"};\n        String[] roman53 = {\"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman54 = {\"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman55 = {\"M\", \"MM\", \"MMM\"};\n        String[] roman56 = {\"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman57 = {\"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman58 = {\"M\", \"MM\", \"MMM\"};\n        String[] roman59 = {\"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman60 = {\"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman61 = {\"M\", \"MM\", \"MMM\"};\n        String[] roman62 = {\"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman63 = {\"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman64 = {\"M\", \"MM\", \"MMM\"};\n        String[] roman65 = {\"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman66 = {\"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\n        String[] roman67 = {\"M\", \"MM\", \"MMM\"};\n        String[] roman68 = {\"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String romanString = \"\";\n        int count = 0;\n        while (number > 0) {\n            count = number % 10;\n            number = number / 10;\n            romanString = roman[count] + romanString;\n        }\n        return romanString.toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String romanNum = \"\";\n        while(number > 0) {\n            int digit = number % 10;\n            number = number / 10;\n            romanNum = roman[digit] + romanNum;\n        }\n        return romanNum.toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String romanString = \"\";\n        int i = 0;\n        while (number > 0) {\n            int remainder = number % 10;\n            number = number / 10;\n            if (i == 0) {\n                romanString = roman[remainder];\n            } else {\n                romanString = roman[remainder] + romanString;\n            }\n            i++;\n        }\n        return romanString.toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String result = \"\";\n        while (number > 0) {\n            int digit = number % 10;\n            number = number / 10;\n            result = roman[digit] + result;\n        }\n        return result.toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String result = \"\";\n        int i = 0;\n        while(number > 0) {\n            int digit = number % 10;\n            number = number / 10;\n            if(i == 0) {\n                result = roman[digit] + result;\n            } else {\n                result = roman[digit] + result + roman[i];\n            }\n            i++;\n        }\n        return result.toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String result = \"\";\n        int i = 0;\n        while(number > 0) {\n            while(number >= roman[i].length()) {\n                number -= roman[i].length();\n            }\n            result += roman[i] + number;\n            number = 0;\n            i++;\n        }\n        return result.toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String[] roman2 = {\"M\", \"MM\", \"MMM\"};\n        String[] roman3 = {\"M\", \"MM\", \"MMM\", \"MMMM\"};\n        String[] roman4 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\"};\n        String[] roman5 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\"};\n        String[] roman6 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\"};\n        String[] roman7 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\"};\n        String[] roman8 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\"};\n        String[] roman9 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\"};\n        String[] roman10 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\", \"MMMMMMMMMMM\"};\n        String[] roman11 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\", \"MMMMMMMMMMM\", \"MMMMMMMMMMMM\"};\n        String[] roman12 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\", \"MMMMMMMMMMM\", \"MMMMMMMMMMMM\", \"MMMMMMMMMMMMM\"};\n        String[] roman13 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\", \"MMMMMMMMMMM\", \"MMMMMMMMMMMM\", \"MMMMMMMMMMMMM\", \"MMMMMMMMMMMMMM\"};\n        String[] roman14 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\", \"MMMMMMMMMMM\", \"MMMMMMMMMMMM\", \"MMMMMMMMMMMMM\", \"MMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMM\"};\n        String[] roman15 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\", \"MMMMMMMMMMM\", \"MMMMMMMMMMMM\", \"MMMMMMMMMMMMM\", \"MMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMM\"};\n        String[] roman16 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\", \"MMMMMMMMMMM\", \"MMMMMMMMMMMM\", \"MMMMMMMMMMMMM\", \"MMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMM\"};\n        String[] roman17 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\", \"MMMMMMMMMMM\", \"MMMMMMMMMMMM\", \"MMMMMMMMMMMMM\", \"MMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMM\"};\n        String[] roman18 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\", \"MMMMMMMMMMM\", \"MMMMMMMMMMMM\", \"MMMMMMMMMMMMM\", \"MMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMM\"};\n        String[] roman19 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\", \"MMMMMMMMMMM\", \"MMMMMMMMMMMM\", \"MMMMMMMMMMMMM\", \"MMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMM\"};\n        String[] roman20 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\", \"MMMMMMMMMMM\", \"MMMMMMMMMMMM\", \"MMMMMMMMMMMMM\", \"MMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMM\"};\n        String[] roman21 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\", \"MMMMMMMMMMM\", \"MMMMMMMMMMMM\", \"MMMMMMMMMMMMM\", \"MMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMM\"};\n        String[] roman22 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\", \"MMMMMMMMMMM\", \"MMMMMMMMMMMM\", \"MMMMMMMMMMMMM\", \"MMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMM\"};\n        String[] roman23 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\", \"MMMMMMMMMMM\", \"MMMMMMMMMMMM\", \"MMMMMMMMMMMMM\", \"MMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMM\"};\n        String[] roman24 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\", \"MMMMMMMMMMM\", \"MMMMMMMMMMMM\", \"MMMMMMMMMMMMM\", \"MMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMM\"};\n        String[] roman25 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\", \"MMMMMMMMMMM\", \"MMMMMMMMMMMM\", \"MMMMMMMMMMMMM\", \"MMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMM\"}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String romanString = \"\";\n        while (number > 0) {\n            int digit = number % 10;\n            number = number / 10;\n            romanString = roman[digit] + romanString;\n        }\n        return romanString.toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n        String[] roman = {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        String[] roman2 = {\"M\", \"MM\", \"MMM\"};\n        String[] roman3 = {\"M\", \"MM\", \"MMM\", \"MMMM\"};\n        String[] roman4 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\"};\n        String[] roman5 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\"};\n        String[] roman6 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\"};\n        String[] roman7 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\"};\n        String[] roman8 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\"};\n        String[] roman9 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\"};\n        String[] roman10 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\", \"MMMMMMMMMMM\"};\n        String[] roman11 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\", \"MMMMMMMMMMM\", \"MMMMMMMMMMMM\"};\n        String[] roman12 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\", \"MMMMMMMMMMM\", \"MMMMMMMMMMMM\", \"MMMMMMMMMMMMM\"};\n        String[] roman13 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\", \"MMMMMMMMMMM\", \"MMMMMMMMMMMM\", \"MMMMMMMMMMMMM\", \"MMMMMMMMMMMMMM\"};\n        String[] roman14 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\", \"MMMMMMMMMMM\", \"MMMMMMMMMMMM\", \"MMMMMMMMMMMMM\", \"MMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMM\"};\n        String[] roman15 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\", \"MMMMMMMMMMM\", \"MMMMMMMMMMMM\", \"MMMMMMMMMMMMM\", \"MMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMM\"};\n        String[] roman16 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\", \"MMMMMMMMMMM\", \"MMMMMMMMMMMM\", \"MMMMMMMMMMMMM\", \"MMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMM\"};\n        String[] roman17 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\", \"MMMMMMMMMMM\", \"MMMMMMMMMMMM\", \"MMMMMMMMMMMMM\", \"MMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMM\"};\n        String[] roman18 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\", \"MMMMMMMMMMM\", \"MMMMMMMMMMMM\", \"MMMMMMMMMMMMM\", \"MMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMM\"};\n        String[] roman19 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\", \"MMMMMMMMMMM\", \"MMMMMMMMMMMM\", \"MMMMMMMMMMMMM\", \"MMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMM\"};\n        String[] roman20 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\", \"MMMMMMMMMMM\", \"MMMMMMMMMMMM\", \"MMMMMMMMMMMMM\", \"MMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMM\"};\n        String[] roman21 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\", \"MMMMMMMMMMM\", \"MMMMMMMMMMMM\", \"MMMMMMMMMMMMM\", \"MMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMM\"};\n        String[] roman22 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\", \"MMMMMMMMMMM\", \"MMMMMMMMMMMM\", \"MMMMMMMMMMMMM\", \"MMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMM\"};\n        String[] roman23 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\", \"MMMMMMMMMMM\", \"MMMMMMMMMMMM\", \"MMMMMMMMMMMMM\", \"MMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMM\"};\n        String[] roman24 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\", \"MMMMMMMMMMM\", \"MMMMMMMMMMMM\", \"MMMMMMMMMMMMM\", \"MMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMM\"};\n        String[] roman25 = {\"M\", \"MM\", \"MMM\", \"MMMM\", \"MMMMM\", \"MMMMMM\", \"MMMMMMM\", \"MMMMMMMM\", \"MMMMMMMMM\", \"MMMMMMMMMM\", \"MMMMMMMMMMM\", \"MMMMMMMMMMMM\", \"MMMMMMMMMMMMM\", \"MMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMM\", \"MMMMMMMMMMMMMMMMMMM\"}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if (a == b && b == c) {\n            return true;\n        }\n        if (a == b || b == c || a == c) {\n            return false;\n        }\n        if (a + b > c && b + c > a && c + a > b) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if (a == b || b == c || a == c) {\n            return true;\n        }\n        if (a > b && a > c) {\n            return false;\n        }\n        if (b > a && b > c) {\n            return false;\n        }\n        if (c > a && c > b) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if(a+b>c && a+c>b && b+c>a)\n            return true;\n        else\n            return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if (a == b || b == c || a == c) {\n            return false;\n        }\n        if (a > b && a > c) {\n            return true;\n        }\n        if (b > a && b > c) {\n            return true;\n        }\n        if (c > a && c > b) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if (a == b && b == c) {\n            return true;\n        }\n        if (a == b || b == c || a == c) {\n            return false;\n        }\n        if (a == b + c || b == a + c || c == a + b) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        return (a + b > c && a + c > b && b + c > a);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if (a <= 0 || b <= 0 || c <= 0) {\n            return false;\n        }\n        if (a + b > c || b + c > a || c + a > b) {\n            return false;\n        }\n        return true;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if(a == b || b == c || a == c)\n            return true;\n        if(a < b + c && b < a + c && c < a + b)\n            return true;\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if (a == b || b == c || a == c) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if (a == b && b == c) {\n            return true;\n        }\n        if (a == b || a == c || b == c) {\n            return false;\n        }\n        if (a + b > c && a + c > b && b + c > a) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if(a == b && b == c)\n            return true;\n        if(a == b || b == c)\n            return false;\n        if(a == c || c == b)\n            return false;\n        if(a == b && b == c)\n            return true;\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if(a == b || b == c || a == c)\n            return true;\n        else\n            return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if(a == b && b == c)\n            return true;\n        if(a == b || b == c || a == c)\n            return false;\n        return (a + b > c && b + c > a && a + c > b);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if(a == b || b == c || a == c)\n            return true;\n        else\n            return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if (a + b > c && a + c > b && b + c > a) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if (a == b && b == c) {\n            return true;\n        }\n        if (a == b || b == c || a == c) {\n            return false;\n        }\n        if (a + b > c && b + c > a && c + a > b) {\n            return true;\n        }\n        return false;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n        if (a <= 0 || b <= 0 || c <= 0) {\n            return false;\n        }\n        if (a == b && b == c) {\n            return true;\n        }\n        if (a == b || b == c || c == a) {\n            return false;\n        }\n        if (a == b + c || b == c + a || c == a + b) {\n            return true;\n        }\n        return false;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                count += c;\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                    count++;\n                }\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                if (c != ' ') {\n                    count++;\n                }\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                    count++;\n                }\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        if (words.size() == 0) {\n            return \"\";\n        }\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                    count++;\n                }\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        // Write your code here\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                    count++;\n                }\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                    count++;\n                }\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                count += c;\n            }\n            if (count > maxCount) {\n                maxCount = count;\n                max = word;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                if (c != ' ') {\n                    count++;\n                }\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                if (c != ' ') {\n                    count++;\n                }\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                    count++;\n                }\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        if (words.size() == 0) {\n            return \"\";\n        }\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                count += c;\n            }\n            if (count > maxCount) {\n                maxCount = count;\n                max = word;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                    count++;\n                }\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                if (c == 'a') {\n                    count++;\n                }\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                    count++;\n                }\n            }\n            if (count > maxCount) {\n                maxCount = count;\n                max = word;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                    count++;\n                }\n            }\n            if (count > maxCount) {\n                maxCount = count;\n                max = word;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                if (c == 'a') {\n                    count++;\n                }\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                count += c;\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                    count++;\n                }\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n        String max = \"\";\n        int maxCount = 0;\n        for (String word : words) {\n            int count = 0;\n            for (char c : word.toCharArray()) {\n                if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                    count++;\n                }\n            }\n            if (count > maxCount) {\n                max = word;\n                maxCount = count;\n            }\n        }\n        return max;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        if (need > remaining) {\n            result.add(number);\n            result.add(remaining);\n            return result;\n        }\n        int count = 0;\n        while (need > 0) {\n            if (count == number) {\n                result.add(number);\n                need -= number;\n                count++;\n            } else {\n                result.add(count);\n                need -= count;\n                count++;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        if (number < need) {\n            result.add(number);\n            result.add(need - number);\n            return result;\n        }\n        int num = number - need;\n        result.add(num);\n        result.add(remaining);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        int eaten = 0;\n        int left = remaining;\n        while(eaten < need) {\n            if(left >= need - eaten) {\n                result.add(eaten);\n                result.add(left);\n                break;\n            }\n            else {\n                result.add(eaten);\n                left -= need - eaten;\n                eaten += need - eaten;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> answer = new ArrayList<Integer>();\n        int carrotsEaten = 0;\n        int carrotsLeft = remaining;\n        while (carrotsLeft > 0) {\n            if (need > carrotsLeft) {\n                carrotsEaten += need - carrotsLeft;\n                carrotsLeft = 0;\n            } else {\n                carrotsEaten += need;\n                carrotsLeft -= need;\n            }\n        }\n        answer.add(carrotsEaten);\n        answer.add(carrotsLeft);\n        return answer;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        int total = 0;\n        int left = 0;\n        while (need > 0) {\n            if (need >= number) {\n                total += number;\n                need -= number;\n                left += number;\n            } else {\n                total += need;\n                need = 0;\n            }\n        }\n        result.add(total);\n        result.add(left);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        int total = 0;\n        int left = 0;\n        while(number > 0) {\n            if(number >= need) {\n                total += need;\n                number -= need;\n                left += need;\n            } else {\n                total += number;\n                number = 0;\n            }\n        }\n        result.add(total);\n        result.add(left);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> answer = new ArrayList<Integer>();\n        int eaten = 0;\n        int left = remaining;\n        while(eaten < need && left > 0) {\n            answer.add(eaten);\n            eaten += number;\n            left -= number;\n        }\n        answer.add(eaten);\n        answer.add(left);\n        return answer;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> answer = new ArrayList<>();\n        if (need > remaining) {\n            answer.add(remaining);\n            answer.add(0);\n            return answer;\n        }\n        answer.add(number);\n        answer.add(need - remaining);\n        return answer;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        if (number <= 0 || need <= 0 || remaining <= 0) {\n            return result;\n        }\n        int eaten = 0;\n        int left = remaining;\n        while (eaten < need && left > 0) {\n            result.add(eaten);\n            eaten++;\n            left--;\n        }\n        if (left > 0) {\n            result.add(left);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        int carrots = 0;\n        while (carrots < need && remaining > 0) {\n            carrots += number;\n            remaining -= number;\n        }\n        result.add(carrots);\n        result.add(remaining);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        if(number >= need) {\n            result.add(number - need);\n            result.add(0);\n        } else {\n            result.add(0);\n            result.add(number);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> answer = new ArrayList<>();\n        if(need > number) {\n            answer.add(number);\n            answer.add(need - number);\n            return answer;\n        }\n        answer.add(number);\n        answer.add(need);\n        answer.add(remaining);\n        return answer;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        if (number == 0) {\n            result.add(0, 0);\n            result.add(0, 0);\n            return result;\n        }\n        int carrots = number;\n        int total = 0;\n        while (carrots > 0) {\n            if (carrots >= need) {\n                total += need;\n                carrots -= need;\n            } else {\n                total += carrots;\n                carrots = 0;\n            }\n        }\n        result.add(total, remaining);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        if(number < need) {\n            result.add(number);\n            result.add(need - number);\n            return result;\n        }\n        int eaten = 0;\n        int left = 0;\n        while(eaten < need) {\n            left += number - eaten;\n            if(left < 0) {\n                left = 0;\n                eaten += number - eaten;\n            } else {\n                eaten += number - eaten;\n            }\n        }\n        result.add(eaten);\n        result.add(left);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        if (need <= 0 || remaining <= 0) {\n            result.add(number);\n            result.add(remaining);\n            return result;\n        }\n        int count = 0;\n        while (need > 0 && remaining > 0) {\n            if (count == 0) {\n                count = number;\n            }\n            if (count > number) {\n                count = number;\n            }\n            result.add(count);\n            need -= count;\n            remaining -= count;\n        }\n        if (need > 0) {\n            result.add(need);\n        }\n        if (remaining > 0) {\n            result.add(remaining);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        int eaten = 0;\n        int left = remaining;\n        while (eaten < need && left > 0) {\n            result.add(eaten);\n            eaten += number;\n            left -= number;\n        }\n        result.add(eaten);\n        result.add(left);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        if (number < need) {\n            result.add(number);\n            result.add(need - number);\n            return result;\n        }\n        int left = need - number;\n        int total = 0;\n        while (left > 0) {\n            total += left;\n            left -= eat(number, left, remaining);\n        }\n        result.add(total);\n        result.add(remaining);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> result = new ArrayList<>();\n        int carrotsEaten = 0;\n        int carrotsLeft = remaining;\n        while (carrotsLeft >= need) {\n            carrotsEaten += need;\n            carrotsLeft -= need;\n        }\n        result.add(carrotsEaten);\n        result.add(carrotsLeft);\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> answer = new ArrayList<>();\n        if (need > remaining) {\n            answer.add(number);\n            answer.add(0);\n            return answer;\n        }\n        int carrots = 0;\n        while (need > 0) {\n            if (need >= number) {\n                carrots += number;\n                need -= number;\n            } else {\n                carrots += need;\n                need = 0;\n            }\n        }\n        answer.add(carrots);\n        answer.add(remaining);\n        return answer;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n        List<Integer> answer = new ArrayList<>();\n        if (number >= need) {\n            answer.add(number - need);\n            answer.add(0);\n        } else {\n            answer.add(0);\n            answer.add(need - number);\n        }\n        return answer;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        int len = operator.size();\n        for (int i = 0; i < len - 1; i++) {\n            switch (operator.get(i)) {\n                case \"+\":\n                    result += operand.get(i);\n                    break;\n                case \"-\":\n                    result -= operand.get(i);\n                    break;\n                case \"*\":\n                    result *= operand.get(i);\n                    break;\n                case \"/\":\n                    result /= operand.get(i);\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, operand.get(i));\n                    break;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        for (int i = 0; i < operator.size(); i++) {\n            switch (operator.get(i)) {\n                case \"+\":\n                    result += operand.get(i);\n                    break;\n                case \"-\":\n                    result -= operand.get(i);\n                    break;\n                case \"*\":\n                    result *= operand.get(i);\n                    break;\n                case \"/\":\n                    result /= operand.get(i);\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, operand.get(i));\n                    break;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        int len = operator.size();\n        for (int i = 0; i < len; i++) {\n            String op = operator.get(i);\n            int num1 = operand.get(i);\n            int num2 = 0;\n            if (i + 1 < len) {\n                num2 = operand.get(i + 1);\n            }\n            switch (op) {\n                case \"+\":\n                    result += num1;\n                    break;\n                case \"-\":\n                    result -= num1;\n                    break;\n                case \"*\":\n                    result *= num1;\n                    break;\n                case \"/\":\n                    result /= num1;\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(num1, num2);\n                    break;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        int len = operator.size();\n        for (int i = 0; i < len; i++) {\n            String op = operator.get(i);\n            int a = operand.get(i);\n            switch (op) {\n                case \"+\":\n                    result += a;\n                    break;\n                case \"-\":\n                    result -= a;\n                    break;\n                case \"*\":\n                    result *= a;\n                    break;\n                case \"/\":\n                    result /= a;\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, a);\n                    break;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        int len = operator.size();\n        int[] arr = new int[len];\n        for(int i = 0; i < len; i++) {\n            arr[i] = operand.get(i);\n        }\n        for(int i = 0; i < len - 1; i++) {\n            switch(operator.get(i)) {\n                case \"+\":\n                    result += arr[i];\n                    break;\n                case \"-\":\n                    result -= arr[i];\n                    break;\n                case \"*\":\n                    result *= arr[i];\n                    break;\n                case \"/\":\n                    result /= arr[i];\n                    break;\n                case \"**\":\n                    result = (int)Math.pow(result, arr[i]);\n                    break;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        int len = operator.size();\n        int len2 = operand.size();\n        int i = 0;\n        int j = 0;\n        while(i < len && j < len2) {\n            String op = operator.get(i);\n            int a = operand.get(j);\n            switch(op) {\n                case \"+\":\n                    result += a;\n                    break;\n                case \"-\":\n                    result -= a;\n                    break;\n                case \"*\":\n                    result *= a;\n                    break;\n                case \"/\":\n                    result /= a;\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, a);\n                    break;\n                default:\n                    break;\n            }\n            i++;\n            j++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        int len = operator.size();\n        int len2 = operand.size();\n        int i = 0;\n        int j = 0;\n        while (i < len && j < len2) {\n            if (operator.get(i).equals(\"+\")) {\n                result += operand.get(j);\n                j++;\n            } else if (operator.get(i).equals(\"-\")) {\n                result -= operand.get(j);\n                j++;\n            } else if (operator.get(i).equals(\"*\")) {\n                result *= operand.get(j);\n                j++;\n            } else if (operator.get(i).equals(\"/\")) {\n                result /= operand.get(j);\n                j++;\n            } else if (operator.get(i).equals(\"**\")) {\n                result = (int) Math.pow(result, operand.get(j));\n                j++;\n            }\n            i++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        int len = operator.size();\n        int len2 = operand.size();\n        int i = 0;\n        int j = 0;\n        while(i < len && j < len2) {\n            String op = operator.get(i);\n            int op_val = Integer.parseInt(op);\n            int op_val2 = operand.get(j);\n            switch(op) {\n                case \"+\":\n                    result += op_val2;\n                    break;\n                case \"-\":\n                    result -= op_val2;\n                    break;\n                case \"*\":\n                    result *= op_val2;\n                    break;\n                case \"/\":\n                    result /= op_val2;\n                    break;\n                case \"**\":\n                    result = (int)Math.pow(result, op_val2);\n                    break;\n            }\n            i++;\n            j++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        int len = operator.size();\n        int[] arr = new int[len];\n        for (int i = 0; i < len; i++) {\n            switch (operator.get(i)) {\n                case \"+\":\n                    arr[i] = operand.get(i);\n                    break;\n                case \"-\":\n                    arr[i] = operand.get(i) - 1;\n                    break;\n                case \"*\":\n                    arr[i] = operand.get(i) * 2;\n                    break;\n                case \"/\":\n                    arr[i] = operand.get(i) / 2;\n                    break;\n                case \"**\":\n                    arr[i] = operand.get(i) * operand.get(i);\n                    break;\n            }\n        }\n        for (int i = 0; i < len; i++) {\n            result = result + arr[i];\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        int len = operator.size();\n        for (int i = 0; i < len; i++) {\n            String op = operator.get(i);\n            int num = operand.get(i);\n            switch (op) {\n                case \"+\":\n                    result += num;\n                    break;\n                case \"-\":\n                    result -= num;\n                    break;\n                case \"*\":\n                    result *= num;\n                    break;\n                case \"/\":\n                    result /= num;\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, num);\n                    break;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        int len = operator.size();\n        for (int i = 0; i < len; i++) {\n            String op = operator.get(i);\n            int num = operand.get(i);\n            switch (op) {\n                case \"+\":\n                    result += num;\n                    break;\n                case \"-\":\n                    result -= num;\n                    break;\n                case \"*\":\n                    result *= num;\n                    break;\n                case \"/\":\n                    result /= num;\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, num);\n                    break;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        int len = operator.size();\n        for (int i = 0; i < len; i++) {\n            String op = operator.get(i);\n            int val = operand.get(i);\n            switch (op) {\n                case \"+\":\n                    result += val;\n                    break;\n                case \"-\":\n                    result -= val;\n                    break;\n                case \"*\":\n                    result *= val;\n                    break;\n                case \"/\":\n                    result /= val;\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, val);\n                    break;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        int len = operator.size();\n        for (int i = 0; i < len; i++) {\n            String op = operator.get(i);\n            int op_val = Integer.parseInt(op);\n            int op_index = i;\n            int op_pre_index = i - 1;\n            int op_next_index = i + 1;\n            if (op_index == len - 1) {\n                op_pre_index = -1;\n            }\n            if (op_next_index == len) {\n                op_next_index = -1;\n            }\n            int op_pre_val = 0;\n            int op_next_val = 0;\n            if (op_pre_index >= 0) {\n                op_pre_val = operand.get(op_pre_index);\n            }\n            if (op_next_index >= 0) {\n                op_next_val = operand.get(op_next_index);\n            }\n            switch (op) {\n                case \"+\":\n                    result += op_val + op_pre_val + op_next_val;\n                    break;\n                case \"-\":\n                    result -= op_val - op_pre_val - op_next_val;\n                    break;\n                case \"*\":\n                    result *= op_val * op_pre_val * op_next_val;\n                    break;\n                case \"/\":\n                    result /= op_val / op_pre_val / op_next_val;\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(op_val, op_pre_val) * op_next_val;\n                    break;\n                default:\n                    break;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        int len = operator.size();\n        int i = 0;\n        while (i < len) {\n            String op = operator.get(i);\n            int a = operand.get(i);\n            int b = operand.get(i + 1);\n            if (op.equals(\"+\")) {\n                result += a + b;\n            } else if (op.equals(\"-\")) {\n                result -= a - b;\n            } else if (op.equals(\"*\")) {\n                result *= a * b;\n            } else if (op.equals(\"/\")) {\n                result /= a / b;\n            } else if (op.equals(\"**\")) {\n                result = (int) Math.pow(a, b);\n            }\n            i += 2;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        int len = operator.size();\n        int len2 = operand.size();\n        for (int i = 0; i < len; i++) {\n            String op = operator.get(i);\n            int num = operand.get(i);\n            if (op.equals(\"+\")) {\n                result += num;\n            } else if (op.equals(\"-\")) {\n                result -= num;\n            } else if (op.equals(\"*\")) {\n                result *= num;\n            } else if (op.equals(\"/\")) {\n                result /= num;\n            } else if (op.equals(\"**\")) {\n                result = (int) Math.pow(result, num);\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        int len = operator.size();\n        for (int i = 0; i < len; i++) {\n            String op = operator.get(i);\n            int num1 = operand.get(i);\n            int num2 = operand.get(i + 1);\n            switch (op) {\n                case \"+\":\n                    result += num1 + num2;\n                    break;\n                case \"-\":\n                    result -= num1 - num2;\n                    break;\n                case \"*\":\n                    result *= num1 * num2;\n                    break;\n                case \"/\":\n                    result /= num1 / num2;\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(num1, num2);\n                    break;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        int len = operator.size();\n        for (int i = 0; i < len; i++) {\n            String op = operator.get(i);\n            int val = operand.get(i);\n            switch (op) {\n                case \"+\":\n                    result += val;\n                    break;\n                case \"-\":\n                    result -= val;\n                    break;\n                case \"*\":\n                    result *= val;\n                    break;\n                case \"/\":\n                    result /= val;\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, val);\n                    break;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        int len = operator.size();\n        int len2 = operand.size();\n        if (len != len2 - 1) {\n            return -1;\n        }\n        for (int i = 0; i < len; i++) {\n            String op = operator.get(i);\n            int num1 = operand.get(i);\n            int num2 = 0;\n            if (i == len - 1) {\n                num2 = operand.get(i + 1);\n            } else {\n                num2 = operand.get(i + 1);\n            }\n            switch (op) {\n                case \"+\":\n                    result += num1 + num2;\n                    break;\n                case \"-\":\n                    result -= num1 - num2;\n                    break;\n                case \"*\":\n                    result *= num1 * num2;\n                    break;\n                case \"/\":\n                    result /= num1 / num2;\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(num1, num2);\n                    break;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        for (int i = 0; i < operator.size(); i++) {\n            switch (operator.get(i)) {\n                case \"+\":\n                    result += operand.get(i);\n                    break;\n                case \"-\":\n                    result -= operand.get(i);\n                    break;\n                case \"*\":\n                    result *= operand.get(i);\n                    break;\n                case \"/\":\n                    result /= operand.get(i);\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, operand.get(i));\n                    break;\n            }\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n        int result = 0;\n        int len = operator.size();\n        int[] arr = new int[len];\n        for (int i = 0; i < len; i++) {\n            arr[i] = operand.get(i);\n        }\n        for (int i = 0; i < len; i++) {\n            switch (operator.get(i)) {\n                case \"+\":\n                    result += arr[i];\n                    break;\n                case \"-\":\n                    result -= arr[i];\n                    break;\n                case \"*\":\n                    result *= arr[i];\n                    break;\n                case \"/\":\n                    result /= arr[i];\n                    break;\n                case \"**\":\n                    result = (int) Math.pow(result, arr[i]);\n                    break;\n            }\n        }\n        return result;\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        char[] arr = s.toCharArray();\n        for(int i = 0; i < arr.length; i++) {\n            if(Character.isLetter(arr[i])) {\n                char temp = arr[i];\n                arr[i] = Character.toLowerCase(arr[i]);\n                arr[i] = Character.toUpperCase(arr[i]);\n                arr[i] = temp;\n            }\n        }\n        if(arr.length == 0) {\n            return s;\n        }\n        return new String(arr);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        char[] ch = s.toCharArray();\n        for(int i = 0; i < ch.length; i++) {\n            if(Character.isLetter(ch[i])) {\n                char temp = ch[i];\n                ch[i] = Character.toLowerCase(temp);\n                ch[i] = Character.toUpperCase(ch[i]);\n            }\n        }\n        if(ch.length == 0) {\n            return s;\n        }\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < ch.length; i++) {\n            sb.append(ch[i]);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        char[] arr = s.toCharArray();\n        for (int i = 0; i < arr.length; i++) {\n            if (Character.isLetter(arr[i])) {\n                char temp = arr[i];\n                arr[i] = Character.toLowerCase(temp);\n                arr[i] = Character.toUpperCase(arr[i]);\n            }\n        }\n        if (arr.length == 0) {\n            return s;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < arr.length; i++) {\n            sb.append(arr[i]);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        String result = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n                char newc = Character.toLowerCase(c);\n                result += newc;\n            } else {\n                result += c;\n            }\n        }\n        if (result.length() == 0) {\n            result = s;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        char[] arr = s.toCharArray();\n        for(int i = 0; i < arr.length; i++) {\n            if(Character.isLetter(arr[i])) {\n                char temp = arr[i];\n                arr[i] = Character.toLowerCase(arr[i]);\n                arr[i] = Character.toUpperCase(arr[i]);\n                arr[i] = temp;\n            }\n        }\n        if(arr.length == 0) {\n            return s;\n        }\n        return String.valueOf(arr);\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        if(s.length() == 0) return s;\n        char[] ch = s.toCharArray();\n        for(int i = 0; i < ch.length; i++) {\n            if(Character.isLetter(ch[i])) {\n                char temp = ch[i];\n                ch[i] = Character.toLowerCase(ch[i]);\n                ch[i] = Character.toUpperCase(ch[i]);\n                ch[i] = temp;\n            }\n        }\n        if(ch.length == 0) return s;\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < ch.length; i++) {\n            sb.append(ch[i]);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        char[] arr = s.toCharArray();\n        for(int i=0; i<arr.length; i++) {\n            if(Character.isLetter(arr[i])) {\n                char temp = arr[i];\n                arr[i] = Character.toLowerCase(temp);\n                arr[i] = Character.toUpperCase(arr[i]);\n            }\n        }\n        if(arr.length == 0) {\n            return s;\n        }\n        StringBuilder sb = new StringBuilder();\n        for(int i=0; i<arr.length; i++) {\n            sb.append(arr[i]);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        char[] c = s.toCharArray();\n        for (int i = 0; i < c.length; i++) {\n            if (Character.isLetter(c[i])) {\n                char temp = c[i];\n                c[i] = Character.toLowerCase(c[i]);\n                c[i] = Character.toUpperCase(c[i]);\n                c[i] = temp;\n            }\n        }\n        if (c.length == 0) {\n            return s;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (char c1 : c) {\n            sb.append(c1);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        char[] c = s.toCharArray();\n        for (int i = 0; i < c.length; i++) {\n            if (Character.isLetter(c[i])) {\n                char temp = c[i];\n                c[i] = Character.toLowerCase(c[i]);\n                c[i] = Character.toUpperCase(c[i]);\n                c[i] = temp;\n            }\n        }\n        if (c.length == 0) {\n            return s;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < c.length; i++) {\n            sb.append(c[i]);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        char[] arr = s.toCharArray();\n        for(int i = 0; i < arr.length; i++) {\n            if(Character.isLetter(arr[i])) {\n                char temp = arr[i];\n                arr[i] = Character.toLowerCase(arr[i]);\n                arr[i] = Character.toUpperCase(arr[i]);\n                arr[i] = temp;\n            }\n        }\n        if(arr.length == 0) {\n            return s;\n        }\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < arr.length; i++) {\n            sb.append(arr[i]);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        char[] ch = s.toCharArray();\n        for (int i = 0; i < ch.length; i++) {\n            if (Character.isLetter(ch[i])) {\n                char temp = ch[i];\n                ch[i] = Character.toLowerCase(temp);\n                ch[i] = Character.toUpperCase(ch[i]);\n            }\n        }\n        if (ch.length == 0) {\n            return s;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < ch.length; i++) {\n            sb.append(ch[i]);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        char[] c = s.toCharArray();\n        for(int i = 0; i < c.length; i++) {\n            if(c[i] >= 'a' && c[i] <= 'z') {\n                c[i] = (char)(c[i] + 32);\n            }\n            else {\n                c[i] = c[i];\n            }\n        }\n        if(c.length == 0) {\n            return s;\n        }\n        else {\n            return new String(c);\n        }\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        char[] arr = s.toCharArray();\n        for (int i = 0; i < arr.length; i++) {\n            if (Character.isLetter(arr[i])) {\n                char c = arr[i];\n                if (c >= 'a' && c <= 'z') {\n                    arr[i] = (char) (c + 32);\n                } else {\n                    arr[i] = (char) (c - 32);\n                }\n            }\n        }\n        if (arr.length == 0) {\n            return s;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < arr.length; i++) {\n            sb.append(arr[i]);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        char[] arr = s.toCharArray();\n        for(int i = 0; i < arr.length; i++) {\n            if(Character.isLetter(arr[i])) {\n                arr[i] = Character.toLowerCase(arr[i]);\n            } else {\n                arr[i] = Character.toUpperCase(arr[i]);\n            }\n        }\n        if(arr.length == 0) {\n            return s;\n        }\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < arr.length; i++) {\n            sb.append(arr[i]);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        char[] ch = s.toCharArray();\n        for (int i = 0; i < ch.length; i++) {\n            if (Character.isLetter(ch[i])) {\n                char temp = ch[i];\n                ch[i] = Character.toLowerCase(ch[i]);\n                ch[i] = Character.toUpperCase(ch[i]);\n                ch[i] = temp;\n            }\n        }\n        if (ch.length == 0) {\n            return s;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < ch.length; i++) {\n            sb.append(ch[i]);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        char[] arr = s.toCharArray();\n        for(int i = 0; i < arr.length; i++) {\n            if(Character.isLetter(arr[i])) {\n                if(Character.isLowerCase(arr[i])) {\n                    arr[i] = (char) (arr[i] + 32);\n                } else {\n                    arr[i] = (char) (arr[i] - 32);\n                }\n            }\n        }\n        if(arr.length == 0) {\n            return s;\n        }\n        StringBuilder sb = new StringBuilder();\n        for(int i = arr.length - 1; i >= 0; i--) {\n            sb.append(arr[i]);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        char[] ch = s.toCharArray();\n        for (int i = 0; i < ch.length; i++) {\n            if (Character.isLetter(ch[i])) {\n                char temp = ch[i];\n                ch[i] = Character.toLowerCase(ch[i]);\n                ch[i] = Character.toUpperCase(ch[i]);\n                ch[i] = temp;\n            }\n        }\n        if (ch.length == 0) {\n            return s;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < ch.length; i++) {\n            sb.append(ch[i]);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        String result = \"\";\n        for(int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if(Character.isLetter(c)) {\n                char upper = Character.toUpperCase(c);\n                char lower = Character.toLowerCase(c);\n                result += (c == lower) ? upper : lower;\n            } else {\n                result += c;\n            }\n        }\n        return (result.length() == 0) ? result : result.toLowerCase();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        char[] ch = s.toCharArray();\n        for (int i = 0; i < ch.length; i++) {\n            if (Character.isLetter(ch[i])) {\n                char temp = ch[i];\n                ch[i] = Character.toLowerCase(temp);\n                ch[i] = Character.toUpperCase(ch[i]);\n            }\n        }\n        if (ch.length == 0) {\n            return s;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < ch.length; i++) {\n            sb.append(ch[i]);\n        }\n        return sb.toString();\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n        char[] c = s.toCharArray();\n        for (int i = 0; i < c.length; i++) {\n            if (Character.isLetter(c[i])) {\n                char temp = c[i];\n                c[i] = Character.toLowerCase(c[i]);\n                c[i] = Character.toUpperCase(c[i]);\n                c[i] = temp;\n            }\n        }\n        if (c.length == 0) {\n            return s;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < c.length; i++) {\n            sb.append(c[i]);\n        }\n        return sb.toString();\n    }\n}"], ["import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        return Optional.of(bigInt.toString(16));\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String md5 = bigInt.toString(16);\n        if (md5.length() == 32) {\n            return Optional.of(md5);\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String hexString = bigInt.toString(16);\n        if (hexString.length() == 32) {\n            return Optional.of(hexString);\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        if (text == null || text.isEmpty()) {\n            return Optional.empty();\n        }\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        BigInteger bigInt = new BigInteger(1, md.digest());\n        return Optional.of(bigInt.toString(16));\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        if (text == null || text.isEmpty()) {\n            return Optional.empty();\n        }\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        byte[] bytes = md.digest(text.getBytes());\n        BigInteger bigInt = new BigInteger(1, bytes);\n        return Optional.of(bigInt.toString(16).substring(0, 32));\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        byte[] bytes = text.getBytes();\n        md.update(bytes);\n        BigInteger bi = new BigInteger(1, md.digest());\n        return Optional.of(bi.toString(16));\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        return Optional.of(bigInt.toString(16));\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        if (text == null || text.isEmpty()) {\n            return Optional.empty();\n        }\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String hexString = bigInt.toString(16);\n        if (hexString.length() == 32) {\n            return Optional.of(hexString);\n        }\n        return Optional.empty();\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        byte[] bytes = text.getBytes();\n        md.update(bytes);\n        BigInteger bigInt = new BigInteger(1, md.digest());\n        String md5 = bigInt.toString(16);\n        if (md5.length() == 32) {\n            return Optional.of(md5);\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        if (text == null || text.isEmpty()) {\n            return Optional.empty();\n        }\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        return Optional.of(bigInt.toString(16).substring(0, 32));\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bi = new BigInteger(1, digest);\n        String hex = bi.toString(16);\n        if (hex.length() == 32) {\n            return Optional.of(hex);\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String md5 = bigInt.toString(16);\n        if (md5.length() != 32) {\n            return Optional.empty();\n        }\n        return Optional.of(md5);\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        if (text == null || text.isEmpty()) {\n            return Optional.empty();\n        }\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        BigInteger bigInt = new BigInteger(1, md.digest());\n        return Optional.of(bigInt.toString(16));\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        BigInteger bigInt = new BigInteger(1, md.digest());\n        return Optional.of(bigInt.toString(16));\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        byte[] bytes = md.digest(text.getBytes());\n        BigInteger bigInt = new BigInteger(1, bytes);\n        return Optional.of(bigInt.toString(16));\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        if (text == null || text.isEmpty()) {\n            return Optional.empty();\n        }\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        return Optional.of(bigInt.toString(16));\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String hexString = bigInt.toString(16);\n        if (hexString.length() == 32) {\n            return Optional.of(hexString);\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        byte[] bytes = md.digest(text.getBytes());\n        BigInteger bigInt = new BigInteger(1, bytes);\n        return Optional.of(bigInt.toString(16));\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1, digest);\n        String md5 = bigInt.toString(16);\n        if (md5.length() == 32) {\n            return Optional.of(md5);\n        } else {\n            return Optional.empty();\n        }\n    }\n}", "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(text.getBytes());\n        BigInteger bigInt = new BigInteger(1, md.digest());\n        return Optional.of(bigInt.toString(16));\n    }\n}"], ["import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i += 2) {\n            result.add(i);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> evenDigits = new ArrayList<>();\n        int i = a;\n        while (i <= b) {\n            if (i % 2 == 0) {\n                evenDigits.add(i);\n            }\n            i++;\n        }\n        return evenDigits;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = a; i <= b; i += 2) {\n            result.add(i);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i += 2) {\n            result.add(i);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<Integer>();\n        int start = a;\n        int end = b;\n        while (start <= end) {\n            if (start % 2 == 0) {\n                result.add(start);\n            }\n            start++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i += 2) {\n            result.add(i);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<Integer>();\n        int start = a;\n        int end = b;\n        while (start <= end) {\n            if (start % 2 == 0) {\n                result.add(start);\n            }\n            start++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<Integer>();\n        for (int i = a; i <= b; i += 2) {\n            result.add(i);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        int start = a;\n        int end = b;\n        while (start <= end) {\n            result.add(start);\n            start++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i += 2) {\n            result.add(i);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        int start = a;\n        int end = b;\n        while (start <= end) {\n            if (start % 2 == 0) {\n                result.add(start);\n            }\n            start++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i += 2) {\n            result.add(i);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i += 2) {\n            result.add(i);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<Integer>();\n        int start = a;\n        int end = b;\n        while (start <= end) {\n            if (start % 2 == 0) {\n                result.add(start);\n            }\n            start++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        int start = a;\n        int end = b;\n        while (start <= end) {\n            if (start % 2 == 0) {\n                result.add(start);\n            }\n            start++;\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i += 2) {\n            result.add(i);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> evenDigits = new ArrayList<>();\n        for (int i = a; i <= b; i += 2) {\n            evenDigits.add(i);\n        }\n        return evenDigits;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i += 2) {\n            result.add(i);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i += 2) {\n            result.add(i);\n        }\n        return result;\n    }\n}", "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = a; i <= b; i += 2) {\n            result.add(i);\n        }\n        return result;\n    }\n}"]]